<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2014-11-20T22:58:10.885492</updated>
  <id>c4f2cdb5-6bfc-4505-b761-bbf9d52bc8ed</id>

  
    <entry>
      <title>Boost Date-Time Library Documentation -- ページ名の先頭が大文字の場合はhtmlに変換しないルールだったので(READMEとかのため)、ページ名を修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time.html"/>
      <id>282fae150552720ecc34e94428ffe68e2a2289eb:archive/boost_docs/libs/date_time.md</id>
      <updated>2014-11-20 18:14:53 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost Date-Time Library Documentation&lt;/h1&gt;
&lt;p&gt;Version 1.00&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#more-info&#34;&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html&#34;&gt;Build-Compiler Information&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日付プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorian Date System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;Class date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html&#34;&gt;Class date_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html&#34;&gt;Class date_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;Date Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;Date Generators / Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html&#34;&gt;Class gregorian_calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/class_date.html#construct-from-clock&#34;&gt;Class day_clock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;時間プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Time System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html&#34;&gt;Class ptime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html&#34;&gt;Class time_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html&#34;&gt;Class time_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;Time Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html&#34;&gt;UTC / Local Time Adjustments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ジェネリックプログラミングの概念に基づいた日付・時間ライブラリ&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/motivation&#34; name=&#34;motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの開発動機は、多くのプロジェクトの多くの日付時間ライブラリで動作すること、また、それらの構築を手助けすることである。 日付時間ライブラリは多くの開発プロジェクトに対して、基礎的な構造を提供する。 しかしそれらの多くは、計算、書式化、変換、その他のいくつかの機能に限界がある。 例えば多くのライブラリは、うるう秒を正しく扱うこと、無限のような概念を提供すること、高分解能の時間資源やネットワーク上の時間資源を利用することが出来ない。 そのうえ、これらのライブラリは、どれも日付や時間の表現形式が厳密である傾向にあるため、プロジェクトやサブプロジェクトのためにカスタマイズすることが出来ない。&lt;/p&gt;
&lt;p&gt;日付や時間に関するプログラミングは、文字列や整数に関するプログラミングと同じくらいシンプルで自然であるべきである。 多くの時間論理を備えたアプリケーションは、演算子と計算能力の頑健な集合により、根本的に単純化することができる。 クラスは日付時間の比較、時間の長さ(length)や期間(duration)の加算、時計からの日付時間の取得、日付時間間隔(interval)に関する自然な動作を提供すべきである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/usage-examples&#34; name=&#34;usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;次に，グレゴリオ暦システムの使用例を示す。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;日付プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekstart&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekend&lt;/span&gt;  (&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
date_duration &lt;span style=&#34;color: #0000FF&#34;&gt;fiveDays&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;); 
date d3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; fiveDays;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; day_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_day();
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (d3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; today) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date comparison operators&lt;/span&gt;

date_period thisWeek(d1,d2);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (thisWeek.contains(today)) {}&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//do something&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//iterate and print the week&lt;/span&gt;
day_iterator itr(weekstart);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; itr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; weekend; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;itr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_iso_extended_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;itr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

そして &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;posix_time&lt;/span&gt;&lt;/code&gt; システムの使用例である。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;時間プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;d&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//an arbitrary date&lt;/span&gt;
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;t1&lt;/span&gt;(d, hours(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;nanosec(&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;));&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date + time of day offset&lt;/span&gt;
ptime t2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; minutes(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
ptime now &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; second_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_time(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//use the clock&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Get the date part out of the time&lt;/span&gt;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; now.date();
date tommorrow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; today &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; date_duration(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;tommorrow_start&lt;/span&gt;(tommorrow); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//midnight &lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//starting at current time iterator adds by one hour&lt;/span&gt;
time_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;titr&lt;/span&gt;(now,hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)); 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; titr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; tommorrow_start; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;titr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_simple_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;titr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/domain-concepts&#34; name=&#34;domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;日付・時間の分野には専門用語と問題が多い。以下はライブラリ中に見られる概念の簡単な紹介である。&lt;/p&gt;
&lt;p&gt;このライブラリは3つの基本的な時間型をサポートする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Point&lt;ul&gt;
&lt;li&gt;時間位置。時刻。連続する時間内での位置を示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Duration&lt;ul&gt;
&lt;li&gt;時間長。時間連続体においてどの位置にも結びついていない時間の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Interval&lt;ul&gt;
&lt;li&gt;時間間隔。時間連続体の特定の位置に結びついた時間長。期間とも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの時間型にはそれぞれ表現可能な最小の時間間隔(duration)で定義される &lt;strong&gt;分解能&lt;/strong&gt; がある。 &lt;strong&gt;時法系(Time system)&lt;/strong&gt; は、時刻にラベルを付けて計算するための規則はもちろんのこと、これらすべての時間型も提供する。 &lt;strong&gt;暦法系(Calendar system)&lt;/strong&gt; は最大の分解能(1日)を持っている簡素な時法系である。 &lt;strong&gt;グレゴリオ暦&lt;/strong&gt; は今日最も広く使われている暦法系である(ISOシステムは基本的にこれの派生物である)。 しかし、他にも多くの暦法系がある。 &lt;strong&gt;UTC(Coordinated Universal Time;協定標準時)&lt;/strong&gt; は広く使われている民間の時法系である。UTC がうるう秒（これは、必要に応じて適用されるもので、予測可能ではない）の使用によって経度0において地球自転に対して調整される。 たいていの &lt;strong&gt;地域時間システム&lt;/strong&gt; が UTC に基づいているが、地球自転に対して同じように調整されるために、昼時間はどこでも同じである。 さらに、夏の昼時間を長くするためのサマータイム(DST)調整を含む地域時間もある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;クロックデバイス&lt;/strong&gt; は時法系に関して現在の日付あるいは時刻を供給する(あるハードウェアに結び付けられた)ソフトウェアコンポーネントである。&lt;/p&gt;
&lt;p&gt;ライブラリは日付と時間の計算をサポートする。しかしながら、時間の計算は整数の計算と全く同じというわけにはいかない。 もし、時間計算の正確度(accuracy)が重要ならば、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/tradeoffs.html&#34;&gt;Stability, Predictability, and Approximations(安定性、予測性と近似)&lt;/a&gt;を読む必要がある。&lt;/p&gt;
&lt;p&gt;追加資料を以下に示す&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/basic_terms.html&#34;&gt;Basic Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/caluculations.html&#34;&gt;Calculations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/tradeoffs.html&#34;&gt;安定性、予測性と近似&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/tests&#34; name=&#34;tests&#34;&gt;Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリは、以下のディレクトリで多数のテストを提供している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libs/date_time/test &lt;/li&gt;
&lt;li&gt;libs/date_time/test/gregorian&lt;/li&gt;
&lt;li&gt;libs/date_time/test/posix_time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのテストをビルドして実行することで、ライブラリが正しくインストールされ、確実に機能していることを確認できる。 加えて、これらのテストは新しいコンパイラへの移植を容易にする。 最後に、テストは使用例で明示的に記述されない多くの機能の例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/design-and-extensions&#34; name=&#34;design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの起源の大部分は（今まで）ほとんどの日付時間ライブラリがカスタマイズと拡張を許す方法で構築されないという観察であった。 典型的な例では、カレンダーロジックは直接日付クラスに構築される。 あるいは時計検索機能は直接時間クラスに作り上げられる。 これらのデザイン決定は通常、拡張したりライブラリの振る舞いを変更することを不可能にする。 もっと基本的なレベルにおいては、時間表現あるいはグレゴリオ暦の分解能について通常仮定がある。&lt;/p&gt;
&lt;p&gt;高分解能の時間表現やそれ以外の仮定からの要求を、時間ライブラリの実装が満たすことが出来ないために、結果的に不完全なライブラリを使わざるをえない、というのは、よくあることである。 この種のライブラリの開発は、まったく些細なことではないので、こういう結果は非常に残念なことである。&lt;/p&gt;
&lt;p&gt;（このライブラリの）設計は完璧というには程遠いが、それでも現在の設計は、著者の知るどんな時間ライブラリよりもはるかに柔軟である。 将来のバージョンでは、拡張性のさまざまな面について、さらに文書化されることが期待される。 ライブラリの設計目標についての情報は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/DesignGoals.html&#34;&gt;ここ&lt;/a&gt;に要約されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many people have contributed to the development of this library. In particular Hugo Duncan and Joel de Guzman for help with porting to various compilers. For initial development of concepts and design Corwin Joy and Michael Kenniston deserve special thanks. Also extra thanks to Michael for writing up the theory and tradeoffs part of the documentation. Dave Zumbro for initial inspiration and sage thoughts. Many thanks to boost reviewers and users including: William Seymour, Kjell Elster, Beman Dawes, Gary Powell, Andrew Maclean, William Kempf, Peter Dimov, Chris Little, David Moore, Darin Adler, Gennadiy Rozental, Joachim Achtzehnter, Paul Bristow, Jan Langer, Mark Rodgers, Glen Knowles, Matthew Denman, and George Heintzelman.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/more-info&#34; name=&#34;more-info&#34;&gt;More Info&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在、ライブラリの設計はWikiと電子メールによる議論によって発展している。 詳しい情報はこちらへ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?GDTL&#34; target=&#34;_blank&#34;&gt;Boost Wiki GDTL Start Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/libraries/date_time/index.html&#34; target=&#34;_blank&#34;&gt;Full Doxygen Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Thu Sep 5 07:22:00 MST 2002 by Jeff Garland © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Date-Time Terminology -- ページ名の先頭が大文字の場合はhtmlに変換しないルールだったので(READMEとかのため)、ページ名を修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/basic_terms.html"/>
      <id>282fae150552720ecc34e94428ffe68e2a2289eb:archive/boost_docs/libs/date_time/basic_terms.md</id>
      <updated>2014-11-20 18:14:53 +0900</updated>
      
        <content type="html">&lt;h1&gt;Date-Time Terminology&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;posix_timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下は日付・時間分野に関する用語である。&lt;/p&gt;
&lt;p&gt;時間型の分類:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;時間位置(Timepoint)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;時間連続体(time continuum)の中の特定の位置を表す。定規の目盛に似ている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間長(Timelength)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;時間連続体中のどの時間位置にも関係しない時間の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間間隔(Timeinterval)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;時間連続体中の特定の時間位置に関係する時間の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他の用語:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正確度(Accuracy)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;誤差の単位, クロックから読み出した時間と真の時間との差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暦法系(Calendar System)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;日付レベルの分解能で時間位置(time points)にラベルを付ける体系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;クロックデバイス&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;暦法系あるいは時法系に関して現在の日付や時刻を供給する(あるハードウェアに結び付けられた)ソフトウェアコンポーネント。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;精密度(Precision)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;クロック間隔の計測単位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分解能(Resolution)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;時法系/暦法系あるいは時間型で表現可能な最小の時間間隔(例: 1秒，一世紀)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安定性(Stability)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;根本的な表現（実装）が特定の（抽象的な）値に関連付いたことを示すクラスの特性は決して変化しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時法系(Time System)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;日付レベルより高い分解能で時間位置(time points)にラベル付けするための体系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準的な日付・時間用語:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;エポック(Epoch)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;時法系/暦法系の始点となる時間位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;夏時間(DST)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Daylight Savings Time; いくつかの地域で夏期に日照時間を延長するために使われている地域時間の調整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間帯(Time zone)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;「地域時間」を提供するために、夏時間(DST)規則と協定標準時(UT)からのオフセットで定義される地球上の地域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;協定標準時(UTC Time)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Coordinated Universal Time; 経度0 で計測される民間の時法系。 うるう秒を使用することで、地球自転に適応されている。 ズールー時間(Zulu Time)として知られる。 グリニッジ標準時(Greenwich Mean Time)として知られている類似の時法系を置き換えた。 詳細は &lt;a href=&#34;http://aa.usno.navy.mil/faq/docs/UT.html&#34; target=&#34;_blank&#34;&gt;http://aa.usno.navy.mil/faq/docs/UT.html&lt;/a&gt; を参照されたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TAI Time&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;世界中の原子時計を使って 0.1 マイクロ秒の分解能で計測される、高精度で単調な時法系(もっと良い用語が必要)。 地球の自転には適応していない。詳細は &lt;a href=&#34;http://www.bipm.fr/enus/5_Scientific/c_time/time_server.html&#34; target=&#34;_blank&#34;&gt;http://www.bipm.fr/enus/5_Scientific/c_time/time_server.html&lt;/a&gt; を参照されたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらにいくつかの実験的なもの:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地域時間(Local Time)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;世界の特定の地域で測定される時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time Label&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;暦法系あるいは時法系に関して、完全にあるいは部分的に特定の日付時間を明示するタプル。これは年-月-日の表現である。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間長の調整(Adjusting Time Length)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;その時々に依存した物理的な時間の長さを表現する時間長(duration)。 例えば、1ヶ月間の時間長(duration)は一般に日数の定数ではない。 その実際の長さは、評価する日付に依存して決定される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設計に関する用語:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生成関数(Generation function)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一つ以上のパラメータからなる特定の時間位置(time points), 長さ(length), あるいは間隔(intervals)の集合を生成する関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;訳注: &lt;/p&gt;
&lt;p&gt;時間用語の訳語について、国土地理院の地理情報標準第2版にある&lt;a href=&#34;http://www.gsi.go.jp/GIS/stdind/stdindpdf/jsgi02.pdf&#34; target=&#34;_blank&#34;&gt;時間スキーマ&lt;/a&gt;を参考にしてみました。&lt;/p&gt;
&lt;p&gt;Accuracy と Precision の使い分けは&lt;a href=&#34;http://www.mathworks.com/access/helpdesk/jhelp/toolbox/daq/c1_int15.shtml&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt;を参考にしました。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Date-Time Build-Compiler Information -- ページ名の先頭が大文字の場合はhtmlに変換しないルールだったので(READMEとかのため)、ページ名を修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html"/>
      <id>282fae150552720ecc34e94428ffe68e2a2289eb:archive/boost_docs/libs/date_time/build_info.md</id>
      <updated>2014-11-20 18:14:53 +0900</updated>
      
        <content type="html">&lt;h1&gt;Date-Time Build-Compiler Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Build-Compiler Information&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#compilation-options&#34;&gt;Compilation Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/compiler-portability-notes&#34;&gt;Compiler/Portability Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#directory-structure&#34;&gt;Directory Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#required-boost-libraries&#34;&gt;Required Boost Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/overview&#34; name=&#34;overview&#34;&gt;Overview&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリ関数のいくつかはライブラリファイルを作成する必要がある。 これらの関数を含むライブラリ( &lt;strong&gt;libboost_date_time&lt;/strong&gt; )を作成するには、buildディレクトリにあるJamfileを使う。&lt;/p&gt;
&lt;p&gt;変数&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;DATE_TIME_INLINE&lt;/span&gt;&lt;/code&gt;は、ある特定のコア関数のインライン化を制御する。 デフォルトでこの変数はライブラリのコンパイル時に定義されている。 ライブラリを使っている全てのコンパイル単位でこの定義を含んでいなければ、リンクエラーになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/compilation-options&#34; name=&#34;compilation-options&#34;&gt;Compilation Options&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;デフォルトでは &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;posix_time&lt;/span&gt;&lt;/code&gt; はナノ秒レベルの精度を提供するために内部で 64bit整数と32bit整数を使う。 選択肢として、一つの 64bit整数でマイクロ秒レベルの精度を提供することもできる。 この代替実装は、ナノ秒精度を必要としない多くのアプリケーションでパフォーマンスの向上と省メモリが期待できる。&lt;/p&gt;
&lt;p&gt;変数&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG&lt;/span&gt;&lt;/code&gt;はbuild/Jamfileで定義されており、これらのオプションを選択する。 64bit整数版を使う場合、単にJamfileからこの定義を削除する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/compiler-portability-notes&#34; name=&#34;compiler-portability-notes&#34;&gt;Compiler/Portability Notes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost Date-Time libraryは、多くのコンパイラでビルドされテストされた。 しかしながら、いくつかのコンパイラと標準ライブラリで問題がある。 これらの問題のいくつかは回避可能であるが、回避できない問題も残っている。 以下のコンパイラはライブラリの機能を完全にサポートしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 3.0.3 on Linux&lt;/li&gt;
&lt;li&gt;GCC 3.1 (cygwin)&lt;/li&gt;
&lt;li&gt;MSVC 7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に、標準ロケールに対するサポートが完全でないと &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;iostream&lt;/span&gt;&lt;/code&gt; ベースの入出力サポートが制約される事がある。そういったコンパイラのために、より限定された文字列ベースの入出力を提供している。&lt;/p&gt;
&lt;p&gt;以下のコンパイラ及び標準ライブラリはこの制約を含む&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 2.9x on Linux&lt;/li&gt;
&lt;li&gt;Borland 5.1.1 and 5.6&lt;/li&gt;
&lt;li&gt;MSVC 6 SP5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ComeauやMetroworksといった他のコンパイラでは、ライブラリの初期バージョンでテストに成功している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/directory-structure&#34; name=&#34;directory-structure&#34;&gt;Directory Structure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;date_time&lt;/span&gt;&lt;/code&gt;のディレクトリ構成はBoostに合わせて変更された。&lt;/p&gt;
&lt;p&gt;ディレクトリ構成は次のようになっている&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ディレクトリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time&lt;/td&gt;
&lt;td&gt;共通ヘッダ及びテンプレート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time/gregoran&lt;/td&gt;
&lt;td&gt;グレゴリオ暦システムのヘッダファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time/posix_time&lt;/td&gt;
&lt;td&gt;Posix Time系のヘッダファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/build&lt;/td&gt;
&lt;td&gt;ビルドファイルと出力ディレクトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test&lt;/td&gt;
&lt;td&gt;ジェネリックコードに関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test/gregorian&lt;/td&gt;
&lt;td&gt;グレゴリオ暦に関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/examples/gregorian&lt;/td&gt;
&lt;td&gt;グレゴリオ暦に関する良いコード例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/src/gregorian&lt;/td&gt;
&lt;td&gt;libboost_date_time用のcppファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test/posix_time&lt;/td&gt;
&lt;td&gt;Posix Time系に関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/examples/posix_time&lt;/td&gt;
&lt;td&gt;時間に関する良いコード例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/src/posix_time&lt;/td&gt;
&lt;td&gt;空 (ファイルが一つあるが、ソースコードではない)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/required-boost-libraries&#34; name=&#34;required-boost-libraries&#34;&gt;Required Boost Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリは以下のライブラリに依存している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost.tokenizer&lt;/li&gt;
&lt;li&gt;boost.integer(cstdint)&lt;/li&gt;
&lt;li&gt;boost.operators&lt;/li&gt;
&lt;li&gt;boost::lexical_cast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;よって、最低限これらのライブラリがインストールされている必要がある。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::time_duration -- ページ名の先頭が大文字の場合はhtmlに変換しないルールだったので(READMEとかのため)、ページ名を修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html"/>
      <id>282fae150552720ecc34e94428ffe68e2a2289eb:archive/boost_docs/libs/date_time/class_time_duration.md</id>
      <updated>2014-11-20 18:14:53 +0900</updated>
      
        <content type="html">&lt;h1&gt;posix_time::time_duration&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Time Duration Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#count-based-construction&#34;&gt;Count Based Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;boost::posix_time::time_duration&lt;/span&gt;&lt;/code&gt; クラスは時間の長さを確実に表現できる基底型である。 時間長(duration)は正あるいは負の値を取り得る。&lt;/p&gt;
&lt;p&gt;以下に示すように、異なった分解能を調整するために基底の &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration&lt;/span&gt;&lt;/code&gt; から継承するいくつかの小さなヘルパークラスがある。 これらのクラスによって、コードを短く、意図をより明確にすることができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/time_duration_inherit.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time;

time_duration td &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; seconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//01:00:01&lt;/span&gt;
td &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; nanosec(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//01:00:00.000000005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

注意：高分解能(たとえば&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;nanosec&lt;/span&gt;&lt;/code&gt;)が存在するかどうかは、依存するインストールライブラリによって異なる。詳細は、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html&#34;&gt;Build-Compiler Information&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration(hours,minutes,seconds,fractional_seconds)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値から時間長(duration)を生成する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(1,2,3,9); //1 hr 2 min 3 sec 9 nanoseconds&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/count-based-construction&#34; name=&#34;count-based-construction&#34;&gt;Construction By Count&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;hours(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = hours(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;minutes(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = minutes(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;seconds(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = seconds(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;milliseconds(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミリ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = milliseconds(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;microseconds(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マイクロ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = microseconds(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;nanoseconds(long)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ナノ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td = nanoseconds(3);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration duration_from_string(const std::string&amp;amp;)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;区切られた文字列から生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;std::string ts(&#34;23:59:59.000&#34;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duraton td(duration_from_string(ts));&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;long hours() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(1,2,3); td.hours() --&amp;gt; 1&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;long minutes() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規化された分の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(1,2,3); td.minutes() --&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;long seconds() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(1,2,3); td.hours() --&amp;gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;long fractional_seconds() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒の小数部を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(1,2,3, 1000); td.fractional_seconds() --&amp;gt; 1000&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;bool is_negative() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)が負の時 &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(-1,0,0); td.is_negative() --&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration invert_sign() const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号を反転させた時間長(duration)を新たに生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(-1,0,0); td.invert_sign() --&amp;gt; 01:00:00&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;static gdtl::time_resolutions resolution()&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration&lt;/span&gt;&lt;/code&gt; クラスが表現可能な分解能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration::resolution() --&amp;gt; nano&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;boost::int64_t ticks()&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)型の生の数を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td(0,0,0, 1000); td.ticks() --&amp;gt; 1000&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;static time_duration unit()&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)型の扱える最小単位を返す(1ナノ秒)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration::unit() --&amp;gt; time_duration(0,0,0,1)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;std::string to_simple_string(time_duration)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HH:MM:SS.fffffffff 形式に変換する(fff...部は、秒の小数部が0でないときのみ含まれる)&lt;/td&gt;
&lt;td&gt;10:00:01.123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;std::string to_iso_string(time_duration)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HHMMSS,fffffffff 形式に変換する&lt;/td&gt;
&lt;td&gt;100001,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator==, operator!=,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;gt;, operator&amp;lt;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;dd1 == dd2&lt;/span&gt;&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration operator+(time_duration) const&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(durations)を加算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td1(hours(1)+minutes(2));&lt;/span&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td2(seconds(10)); time_duration td3 = td1 + td2;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration operator-(time_duration) const&lt;/span&gt;&lt;/code&gt; 時間長(durations)を減算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td1(hours(1)+nanosec(2));&lt;/span&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;time_duration td2 = td1 - minutes(1);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Date-Time Library Documentation -- リンクミスを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time.html"/>
      <id>00760b1fe060b8eb3e61760cb0d1a407bb6dbf09:archive/boost_docs/libs/date_time.md</id>
      <updated>2014-11-20 17:51:51 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost Date-Time Library Documentation&lt;/h1&gt;
&lt;p&gt;Version 1.00&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#more-info&#34;&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/BuildInfo.html&#34;&gt;Build-Compiler Information&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日付プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorian Date System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;Class date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html&#34;&gt;Class date_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html&#34;&gt;Class date_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;Date Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;Date Generators / Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html&#34;&gt;Class gregorian_calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/class_date.html#construct-from-clock&#34;&gt;Class day_clock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;時間プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Time System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html&#34;&gt;Class ptime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html&#34;&gt;Class time_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html&#34;&gt;Class time_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;Time Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html&#34;&gt;UTC / Local Time Adjustments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ジェネリックプログラミングの概念に基づいた日付・時間ライブラリ&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/motivation&#34; name=&#34;motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの開発動機は、多くのプロジェクトの多くの日付時間ライブラリで動作すること、また、それらの構築を手助けすることである。 日付時間ライブラリは多くの開発プロジェクトに対して、基礎的な構造を提供する。 しかしそれらの多くは、計算、書式化、変換、その他のいくつかの機能に限界がある。 例えば多くのライブラリは、うるう秒を正しく扱うこと、無限のような概念を提供すること、高分解能の時間資源やネットワーク上の時間資源を利用することが出来ない。 そのうえ、これらのライブラリは、どれも日付や時間の表現形式が厳密である傾向にあるため、プロジェクトやサブプロジェクトのためにカスタマイズすることが出来ない。&lt;/p&gt;
&lt;p&gt;日付や時間に関するプログラミングは、文字列や整数に関するプログラミングと同じくらいシンプルで自然であるべきである。 多くの時間論理を備えたアプリケーションは、演算子と計算能力の頑健な集合により、根本的に単純化することができる。 クラスは日付時間の比較、時間の長さ(length)や期間(duration)の加算、時計からの日付時間の取得、日付時間間隔(interval)に関する自然な動作を提供すべきである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/usage-examples&#34; name=&#34;usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;次に，グレゴリオ暦システムの使用例を示す。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;日付プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekstart&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekend&lt;/span&gt;  (&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
date_duration &lt;span style=&#34;color: #0000FF&#34;&gt;fiveDays&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;); 
date d3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; fiveDays;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; day_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_day();
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (d3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; today) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date comparison operators&lt;/span&gt;

date_period thisWeek(d1,d2);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (thisWeek.contains(today)) {}&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//do something&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//iterate and print the week&lt;/span&gt;
day_iterator itr(weekstart);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; itr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; weekend; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;itr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_iso_extended_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;itr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

そして &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;posix_time&lt;/span&gt;&lt;/code&gt; システムの使用例である。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;時間プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;d&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//an arbitrary date&lt;/span&gt;
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;t1&lt;/span&gt;(d, hours(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;nanosec(&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;));&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date + time of day offset&lt;/span&gt;
ptime t2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; minutes(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
ptime now &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; second_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_time(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//use the clock&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Get the date part out of the time&lt;/span&gt;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; now.date();
date tommorrow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; today &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; date_duration(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;tommorrow_start&lt;/span&gt;(tommorrow); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//midnight &lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//starting at current time iterator adds by one hour&lt;/span&gt;
time_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;titr&lt;/span&gt;(now,hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)); 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; titr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; tommorrow_start; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;titr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_simple_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;titr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/domain-concepts&#34; name=&#34;domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;日付・時間の分野には専門用語と問題が多い。以下はライブラリ中に見られる概念の簡単な紹介である。&lt;/p&gt;
&lt;p&gt;このライブラリは3つの基本的な時間型をサポートする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Point&lt;ul&gt;
&lt;li&gt;時間位置。時刻。連続する時間内での位置を示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Duration&lt;ul&gt;
&lt;li&gt;時間長。時間連続体においてどの位置にも結びついていない時間の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Interval&lt;ul&gt;
&lt;li&gt;時間間隔。時間連続体の特定の位置に結びついた時間長。期間とも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの時間型にはそれぞれ表現可能な最小の時間間隔(duration)で定義される &lt;strong&gt;分解能&lt;/strong&gt; がある。 &lt;strong&gt;時法系(Time system)&lt;/strong&gt; は、時刻にラベルを付けて計算するための規則はもちろんのこと、これらすべての時間型も提供する。 &lt;strong&gt;暦法系(Calendar system)&lt;/strong&gt; は最大の分解能(1日)を持っている簡素な時法系である。 &lt;strong&gt;グレゴリオ暦&lt;/strong&gt; は今日最も広く使われている暦法系である(ISOシステムは基本的にこれの派生物である)。 しかし、他にも多くの暦法系がある。 &lt;strong&gt;UTC(Coordinated Universal Time;協定標準時)&lt;/strong&gt; は広く使われている民間の時法系である。UTC がうるう秒（これは、必要に応じて適用されるもので、予測可能ではない）の使用によって経度0において地球自転に対して調整される。 たいていの &lt;strong&gt;地域時間システム&lt;/strong&gt; が UTC に基づいているが、地球自転に対して同じように調整されるために、昼時間はどこでも同じである。 さらに、夏の昼時間を長くするためのサマータイム(DST)調整を含む地域時間もある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;クロックデバイス&lt;/strong&gt; は時法系に関して現在の日付あるいは時刻を供給する(あるハードウェアに結び付けられた)ソフトウェアコンポーネントである。&lt;/p&gt;
&lt;p&gt;ライブラリは日付と時間の計算をサポートする。しかしながら、時間の計算は整数の計算と全く同じというわけにはいかない。 もし、時間計算の正確度(accuracy)が重要ならば、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/Tradeoffs.html&#34;&gt;Stability, Predictability, and Approximations(安定性、予測性と近似)&lt;/a&gt;を読む必要がある。&lt;/p&gt;
&lt;p&gt;追加資料を以下に示す&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/BasicTerms.html&#34;&gt;Basic Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/Caluculations.html&#34;&gt;Calculations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/Tradeoffs.html&#34;&gt;安定性、予測性と近似&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/References.html&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/tests&#34; name=&#34;tests&#34;&gt;Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリは、以下のディレクトリで多数のテストを提供している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libs/date_time/test &lt;/li&gt;
&lt;li&gt;libs/date_time/test/gregorian&lt;/li&gt;
&lt;li&gt;libs/date_time/test/posix_time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのテストをビルドして実行することで、ライブラリが正しくインストールされ、確実に機能していることを確認できる。 加えて、これらのテストは新しいコンパイラへの移植を容易にする。 最後に、テストは使用例で明示的に記述されない多くの機能の例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/design-and-extensions&#34; name=&#34;design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの起源の大部分は（今まで）ほとんどの日付時間ライブラリがカスタマイズと拡張を許す方法で構築されないという観察であった。 典型的な例では、カレンダーロジックは直接日付クラスに構築される。 あるいは時計検索機能は直接時間クラスに作り上げられる。 これらのデザイン決定は通常、拡張したりライブラリの振る舞いを変更することを不可能にする。 もっと基本的なレベルにおいては、時間表現あるいはグレゴリオ暦の分解能について通常仮定がある。&lt;/p&gt;
&lt;p&gt;高分解能の時間表現やそれ以外の仮定からの要求を、時間ライブラリの実装が満たすことが出来ないために、結果的に不完全なライブラリを使わざるをえない、というのは、よくあることである。 この種のライブラリの開発は、まったく些細なことではないので、こういう結果は非常に残念なことである。&lt;/p&gt;
&lt;p&gt;（このライブラリの）設計は完璧というには程遠いが、それでも現在の設計は、著者の知るどんな時間ライブラリよりもはるかに柔軟である。 将来のバージョンでは、拡張性のさまざまな面について、さらに文書化されることが期待される。 ライブラリの設計目標についての情報は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/DesignGoals.html&#34;&gt;ここ&lt;/a&gt;に要約されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many people have contributed to the development of this library. In particular Hugo Duncan and Joel de Guzman for help with porting to various compilers. For initial development of concepts and design Corwin Joy and Michael Kenniston deserve special thanks. Also extra thanks to Michael for writing up the theory and tradeoffs part of the documentation. Dave Zumbro for initial inspiration and sage thoughts. Many thanks to boost reviewers and users including: William Seymour, Kjell Elster, Beman Dawes, Gary Powell, Andrew Maclean, William Kempf, Peter Dimov, Chris Little, David Moore, Darin Adler, Gennadiy Rozental, Joachim Achtzehnter, Paul Bristow, Jan Langer, Mark Rodgers, Glen Knowles, Matthew Denman, and George Heintzelman.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/more-info&#34; name=&#34;more-info&#34;&gt;More Info&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在、ライブラリの設計はWikiと電子メールによる議論によって発展している。 詳しい情報はこちらへ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?GDTL&#34; target=&#34;_blank&#34;&gt;Boost Wiki GDTL Start Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/libraries/date_time/index.html&#34; target=&#34;_blank&#34;&gt;Full Doxygen Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Thu Sep 5 07:22:00 MST 2002 by Jeff Garland © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>