<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2015-01-14T23:01:06.706122</updated>
  <id>b87b2a13-7ee2-4bd5-8671-d857313ff451</id>

  
    <entry>
      <title>多倍長整数 -- リンクミスを修正</title>
      <link href="http://boostjp.github.io/tips/multiprec-int.html"/>
      <id>e4af6f098947d73c000efbbb6009baf1059b786d:tips/multiprec-int.md</id>
      <updated>2015-01-09 12:13:33 +0900</updated>
      
        <content type="html">&lt;h1&gt;多倍長整数&lt;/h1&gt;
&lt;p&gt;多倍長整数を使用するには、&lt;a href=&#34;http://www.boost.org/libs/multiprecision/&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#variation&#34;&gt;多倍長整数の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#convert-integer&#34;&gt;異なる大きさの整数間で型変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#min&#34;&gt;最小値を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#max&#34;&gt;最大値を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#is-bounded&#34;&gt;有限かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Multiprecisionから提供される多倍長整数の、基本的な使い方を示す。&lt;/p&gt;
&lt;p&gt;以下は、任意精度の符号あり多倍長整数である&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::multiprecision::cpp_int&lt;/code&gt;&lt;/a&gt;クラスを使用して、100の階乗を求めるプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_int&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
       x &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; i;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cpp_int&lt;/code&gt;は、Boost.Multiprecisionが独自実装した演算をバックエンドに持つ、任意精度の多倍長整数である。この型は、メモリが許す限り無限の桁数を扱える。Boost.Multiprecisionが提供する全ての機能は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間以下で定義される。&lt;/p&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長整数は、組み込みの整数型と同じ演算をサポートする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a + b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a += b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a - b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a -= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a * b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a *= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a / b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a /= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a % b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a %= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をプラスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をマイナスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a++;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;++a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a--;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;--a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;amp;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットAND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a | b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a |= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a ^ b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a ^= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットXOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;lt;&amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左ビットシフト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;gt;&amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右ビットシフト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a == b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a != b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より小さいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以下かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より大きいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以上かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#variation&#34; name=&#34;variation&#34;&gt;多倍長整数の種類&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下に、Boost.Multiprecisionから提供される多倍長整数の種類を示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision独自実装の多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;符号付きチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数。 メモリが許す限り、無限の桁数を扱える。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号なしチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号付きチェック付き整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_cpp_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数。 メモリが許す限り、無限の精度を扱える。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号なしチェック付き整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cheked_uint256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チェック付き整数は、値が不正になる演算を行った際に例外を送出する。&lt;/p&gt;
&lt;p&gt;チェックなし整数が送出する例外：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;送出する例外&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ゼロ割り時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チェック付き整数が送出する例外：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;送出する例外&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ゼロ割り時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;符号なしなのにマイナス値になった&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::range_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;オーバーフロー時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/gmp_int.html&#34; target=&#34;_blank&#34;&gt;GMPバックエンドの多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;符号ありチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpz_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/tom_int.html&#34; target=&#34;_blank&#34;&gt;libtommathバックエンドの多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/tommath.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;符号ありチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tom_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#from-string&#34; name=&#34;from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列から多倍長整数に変換するには、&lt;code&gt;explicit&lt;/code&gt;な変換コンストラクタ、もしくは&lt;code&gt;assign()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;文字列は、&lt;code&gt;char&lt;/code&gt;配列および&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;/a&gt;を受け取ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタで文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列から変換&lt;/span&gt;
    cpp_int y(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;456&#34;&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringから変換&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
456
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;assign()&lt;/code&gt;メンバ関数で文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x;
    x.assign(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;変換できない文字列が渡された場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::runtime_error&lt;/code&gt;&lt;/a&gt;例外が送出される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#to-string&#34; name=&#34;to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列への変換には、&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。この関数は、&lt;code&gt;std::string&lt;/code&gt;型で多倍長整数の文字列表現を返す。&lt;/p&gt;
&lt;p&gt;デフォルトでは10進数表現の文字列が返されるが、以下の引数を設定することで、精度と基数、その他出力方法を選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数： 出力する精度。整数では単に無視されるので、0を指定すればよい。&lt;/li&gt;
&lt;li&gt;第2引数： 出力フラグ。基数の選択。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;123&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 10進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;();
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 8進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;oct);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 16進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hex);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
173
7B
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#convert-integer&#34; name=&#34;convert-integer&#34;&gt;異なる大きさの整数間で型変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長整数は、異なる精度間での変換をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小さい整数型から大きい整数型への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;や&lt;code&gt;long&lt;/code&gt;型といった組み込みの整数型から、&lt;code&gt;int128_t&lt;/code&gt;や&lt;code&gt;cpp_int&lt;/code&gt;といった多倍長整数への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;int128_t&lt;/code&gt;から&lt;code&gt;int256&lt;/code&gt;へ、といったより大きい精度への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// intからint128_tへの暗黙変換&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; i128 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int128_tからint256_tへの暗黙変換&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int256_t&lt;/span&gt; i256 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i128; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大きい精度から小さい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小さい精度への変換は、データが失われる可能性があるため、暗黙の型変換はサポートしない。&lt;/p&gt;
&lt;p&gt;明示的な型変換を使用する場合のみ変換可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int256_t&lt;/span&gt; i256 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  int128_t i128 = i256; // コンパイルエラー！変換できない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; i128 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i256); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#min&#34; name=&#34;min&#34;&gt;最小値を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数の最小値を取得するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;静的メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、最小値は取得できなかったものとして、0を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int  x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;min&lt;/span&gt;();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;min&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
-340282366920938463463374607431768211455
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#max&#34; name=&#34;max&#34;&gt;最大値を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数の最大値を取得するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;静的メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、最大値は取得できなかったものとして、0を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int  x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;max&lt;/span&gt;();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;max&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
340282366920938463463374607431768211455
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#is-bounded&#34; name=&#34;is-bounded&#34;&gt;有限かどうかを判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数型の表す値が有限かどうかを判定するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;定数を取得する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;bool&lt;/code&gt;型で定義され、有限であれば&lt;code&gt;true&lt;/code&gt;、無限であれば&lt;code&gt;false&lt;/code&gt;が設定される。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;false&lt;/code&gt;となる。&lt;/p&gt;
&lt;p&gt;固定精度整数の&lt;code&gt;int128_t&lt;/code&gt;、&lt;code&gt;int256_t&lt;/code&gt;といった型の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;true&lt;/code&gt;となる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_bounded&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_bounded&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#math-functions&#34; name=&#34;math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;標準関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;標準ライブラリで定義される以下の関数は、Boost.Multiprecisionの多倍長整数でも使用できる。&lt;/p&gt;
&lt;p&gt;これらの関数は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T abs(T x);&lt;/code&gt;&lt;br /&gt; &lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/fabs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T fabs(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sqrt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sqrt(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T floor(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;床関数（引数より大きくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ceil(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;天井関数（引数より小さくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T trunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T itrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T ltrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lltrunc(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ方向への丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T round(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lround(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T llround(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四捨五入による丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/exp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T exp(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする指数関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする自然対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log10&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log10(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10 を底とする常用対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;余弦関数（コサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正弦関数（サイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正接関数（タンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/acos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T acos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆余弦関数（アークコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/asin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T asin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正弦関数（アークサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cosh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cosh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線余弦関数（ハイパボリックコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sinh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sinh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正弦関数（ハイパボリックサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tanh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tanh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正接関数（ハイパボリックタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ldexp(T x, int);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 の冪乗との乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T frexp(T x, int*);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部と 2 の冪乗への分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/pow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T pow(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T fmod(T x, T y);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan2(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対辺と隣辺からの逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;整数に特化した数学関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下の関数は、Boost.Multiprecisionで整数演算に特化したものとして、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/pow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T pow(T x, unsigned int y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T powm(T b, T p, T m);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;冪剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void divide_qr(T x, y, T&amp;amp; q, T&amp;amp; r);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算と剰余算を同時に行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Integer&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;Integer integer_modulus(T x, Integer val);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余の絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned int lsb(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1に設定されている最下位ビットのインデックスを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool bit_test(T val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットが1に設定されているかを判定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_set(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを1に設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_unset(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを0に設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_flip(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを反転する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Engine&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bool miller_rabin_test(T n, unsigned trials, Engine&amp;amp; gen);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bool miller_rabin_test(T n, unsigned trials);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミラー・ラビン素数判定&lt;br /&gt; 参照： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130222/1361516978&#34; target=&#34;_blank&#34;&gt;Boost.Multiprecision ミラー・ラビン法による素数判定 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参照： &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/ref/number.html#boost_multiprecision.ref.number.integer_functions&#34; target=&#34;_blank&#34;&gt;Integer functions - Boost Multiprecision Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネットワーク - TCP -- fix markdown for boost::asio::steady_timer</title>
      <link href="http://boostjp.github.io/tips/network/tcp.html"/>
      <id>5c275bf28e63e2dfc53c01c4197aa1fadd618318:tips/network/tcp.md</id>
      <updated>2015-01-06 12:02:22 +0900</updated>
      
        <content type="html">&lt;h1&gt;ネットワーク - TCP&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34;&gt;接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34;&gt;接続待機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34; name=&#34;connect&#34;&gt;接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/connect/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;()メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;接続先の情報は&lt;code&gt;tcp::endpoint&lt;/code&gt;に、IPアドレス文字列と、ポート番号の2つを指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt;の第2引数として&lt;code&gt;error_code&lt;/code&gt;を渡した場合には、接続失敗時にエラー情報が&lt;code&gt;error_code&lt;/code&gt;変数に格納される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、接続失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    socket.&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt;(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt; failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/async_connect.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_connect&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数として、接続先情報のIPアドレス文字列と、ポート番号を指定する。&lt;/p&gt;
&lt;p&gt;第2引数として、接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_connect&lt;/span&gt;(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34; name=&#34;accept&#34;&gt;接続待機&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接続待機には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/acceptor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::acceptor&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acceptor&lt;/code&gt;クラスのコンストラクタには、IPのバージョン(&lt;code&gt;tcp::v4()&lt;/code&gt; or &lt;code&gt;tcp::v6()&lt;/code&gt;)とポート番号を設定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/accept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;引数として、バインディングする&lt;code&gt;socket&lt;/code&gt;クラスオブジェクトへの参照を渡す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    &lt;span style=&#34;color:#ff0000&#34;&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor&lt;/span&gt; acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    acc.&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt;(socket, error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数としてバインディングする&lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照をとり、第2引数として接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_accept&lt;/span&gt;(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start_accept();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34; name=&#34;send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ送信方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数には、多様なバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    socket.connect(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;write&lt;/span&gt;(socket, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(msg), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数もまた、いくつかのバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string send_data_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信データ&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        send();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; send()
    {
        send_data_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_write&lt;/span&gt;(
                socket_,
                asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(send_data_),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_send, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_send(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34; name=&#34;receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ受信の方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;sockeオブジェクト&lt;/code&gt;への参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第4引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    acc.accept(socket);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buffer;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;read(socket, receive_buffer, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(), error);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buffer.data());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)
ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        start_accept();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.async_accept(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_read&lt;/span&gt;(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 受信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buff_.data());
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

            receive_buff_.consume(receive_buff_.size());
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34; name=&#34;resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver&lt;/code&gt;&lt;/a&gt;クラスと&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/query.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::query&lt;/code&gt;&lt;/a&gt;クラスを組み合わせて使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt;クラスのコンストラクタには、以下を指定する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： ホスト名&lt;/li&gt;
&lt;li&gt;第2引数 ： サービス名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ホスト名等が設定された&lt;code&gt;query&lt;/code&gt;オブジェクトを&lt;code&gt;resolver&lt;/code&gt;クラスの&lt;code&gt;resolve()&lt;/code&gt;メンバ関数に渡し、その文字列を接続関数に渡すことで、同期バージョンでの名前解決しての接続ができる。&lt;/p&gt;
&lt;p&gt;この関数の最後の引数として&lt;code&gt;boost::system::error_code&lt;/code&gt;オブジェクトへの参照を渡した場合には、名前解決失敗時にエラー情報が格納される。&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、名前解決失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;また、この関数は戻り値として、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/iterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::iterator&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。このイテレータは、デフォルト構築されたイテレータを終端としてイテレートできる。このイテレータは間接参照によって&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/endpoint.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;endpoint&lt;/code&gt;&lt;/a&gt;オブジェクトが取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver(io_service_);
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query &lt;span style=&#34;color:#ff0000&#34;&gt;query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;)&lt;/span&gt;;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同期で名前解決&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket,
            resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;resolve&lt;/span&gt;(query),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;boost::asio::ip::tcp::resolver&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/async_resolve/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_resolve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;query&lt;/code&gt;オブジェクト&lt;/li&gt;
&lt;li&gt;第2引数 ： 名前解決の成功もしくは失敗時に呼ばれる関数。iteratorプレースホルダを束縛することにより、完了時に呼ばれる関数に、&lt;code&gt;endpoint&lt;/code&gt;のイテレータが渡される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          resolver_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;);

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で名前解決&lt;/span&gt;
        resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_resolve&lt;/span&gt;(
            query,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_resolve, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_resolve(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error,
                    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator endpoint_iterator)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;resolve failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket_,
            endpoint_iterator,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34; name=&#34;timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通信処理のタイムアウトには、ソケットに対してタイムアウトを指定するのではなく、タイマークラスの非同期イベントと組み合わせて行う。&lt;/p&gt;
&lt;p&gt;同期通信でタイムアウトを指定する方法はないため、ここでは非同期バージョンのみ示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio/steady_timer.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

    &lt;span style=&#34;color:#ff0000&#34;&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;steady_timer&lt;/span&gt; timer_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウト用のタイマー&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_canceled_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          timer_(io_service),
          is_canceled_(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_read(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;expires_from_now&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_wait&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;operation_aborted&lt;/span&gt;) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
            timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;();
            is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;その他のエラー : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;受信成功&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_timer(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
            socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイムアウトにはいくつかのポイントがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. タイマークラスの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイマークラスには以下の選択肢がある：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイマークラス&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/deadline_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::deadline_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boost.DateTimeライブラリの&lt;code&gt;posix_time&lt;/code&gt;で時間指定を行う古いタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/high_resolution_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::high_resolution_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高分解能タイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/steady_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::steady_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;時間が逆行しないことを保証するタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/system_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::system_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_t&lt;/code&gt;と互換性のあるタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用途に応じて使い分ける必要があるが、基本的には&lt;code&gt;steady_timer&lt;/code&gt;を推奨する。これは、タイマー処理中にOSの時間設定が変更されても時間が逆行しないタイマーであるため、外部要因によるバグを防ぐことができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. タイムアウトの時間設定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイムアウトの時間指定は、ここでは以下のように行なっている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
timer_.expires_from_now(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
timer_.async_wait(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;各タイマークラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_from_now/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_from_now()&lt;/code&gt;&lt;/a&gt;メンバ関数は、現在日時からの相対時間でタイムアウトを指定する関数である。特定の日時にタイムアウトを設定したい場合は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_at/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_at()&lt;/code&gt;&lt;/a&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. タイムアウト方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまではタイムアウトではなく、単にタイマーの使い方を見てきた。
実際のタイムアウトは以下のようにして行う：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;タイマーハンドラで通信処理をキャンセル or 失敗させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理が正常終了するより前にタイマーハンドラが呼ばれたら、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/cancel/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt;メンバ関数や&lt;code&gt;close()&lt;/code&gt;メンバ関数を使用して通信処理を異常終了させる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_timer&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
        socket_.cancel(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;注意すべきポイントは、これらの異常終了させるための関数を呼び出しても、通信処理のイベントハンドラが呼び出されるということである。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理のイベントハンドラでタイムアウトによる中断をハンドリングする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;タイムアウトによって通信処理が異常終了した場合、通信処理のイベントハンドラには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;というエラーが渡される。ハンドラは、タイムアウトによって失敗したのかどうかを正しくハンドリングする必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_receive&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理がタイマーよりも早く正常終了したらタイマーをキャンセルする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理がタイムアウトを待つことなく正常終了した場合は、タイマーを止める必要がある。これをしないと以降の通信処理が意図せずタイムアウトになってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
    timer_.cancel();
    is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイマークラスの&lt;code&gt;calcel()&lt;/code&gt;メンバ関数を呼ぶと、&lt;code&gt;socket&lt;/code&gt;の場合と逆に、タイマーのハンドラに&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;エラーが渡されることになる。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;cancel()&lt;/code&gt;メンバ関数を呼ぶ直前ですでにタイムアウトになっている場合、&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;エラーがハンドラに渡されない可能性がある。
この場合に備えてフラグ変数等でタイマーを止めたことを知らせる必要がある。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネットワーク - TCP -- Merge pull request #28 from amedama41/correct_asio_timeout
</title>
      <link href="http://boostjp.github.io/tips/network/tcp.html"/>
      <id>d3c4c31f09c4712a9b84ccb9105cd649e1c3e1c8:tips/network/tcp.md</id>
      <updated>2015-01-06 00:47:10 +0900
</updated>
      
        <content type="html">&lt;h1&gt;ネットワーク - TCP&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34;&gt;接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34;&gt;接続待機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34; name=&#34;connect&#34;&gt;接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/connect/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;()メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;接続先の情報は&lt;code&gt;tcp::endpoint&lt;/code&gt;に、IPアドレス文字列と、ポート番号の2つを指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt;の第2引数として&lt;code&gt;error_code&lt;/code&gt;を渡した場合には、接続失敗時にエラー情報が&lt;code&gt;error_code&lt;/code&gt;変数に格納される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、接続失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    socket.&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt;(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt; failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/async_connect.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_connect&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数として、接続先情報のIPアドレス文字列と、ポート番号を指定する。&lt;/p&gt;
&lt;p&gt;第2引数として、接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_connect&lt;/span&gt;(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34; name=&#34;accept&#34;&gt;接続待機&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接続待機には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/acceptor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::acceptor&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acceptor&lt;/code&gt;クラスのコンストラクタには、IPのバージョン(&lt;code&gt;tcp::v4()&lt;/code&gt; or &lt;code&gt;tcp::v6()&lt;/code&gt;)とポート番号を設定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/accept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;引数として、バインディングする&lt;code&gt;socket&lt;/code&gt;クラスオブジェクトへの参照を渡す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    &lt;span style=&#34;color:#ff0000&#34;&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor&lt;/span&gt; acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    acc.&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt;(socket, error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数としてバインディングする&lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照をとり、第2引数として接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_accept&lt;/span&gt;(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start_accept();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34; name=&#34;send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ送信方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数には、多様なバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    socket.connect(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;write&lt;/span&gt;(socket, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(msg), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数もまた、いくつかのバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string send_data_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信データ&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        send();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; send()
    {
        send_data_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_write&lt;/span&gt;(
                socket_,
                asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(send_data_),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_send, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_send(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34; name=&#34;receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ受信の方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;sockeオブジェクト&lt;/code&gt;への参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第4引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    acc.accept(socket);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buffer;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;read(socket, receive_buffer, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(), error);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buffer.data());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)
ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        start_accept();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.async_accept(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_read&lt;/span&gt;(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 受信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buff_.data());
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

            receive_buff_.consume(receive_buff_.size());
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34; name=&#34;resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver&lt;/code&gt;&lt;/a&gt;クラスと&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/query.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::query&lt;/code&gt;&lt;/a&gt;クラスを組み合わせて使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt;クラスのコンストラクタには、以下を指定する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： ホスト名&lt;/li&gt;
&lt;li&gt;第2引数 ： サービス名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ホスト名等が設定された&lt;code&gt;query&lt;/code&gt;オブジェクトを&lt;code&gt;resolver&lt;/code&gt;クラスの&lt;code&gt;resolve()&lt;/code&gt;メンバ関数に渡し、その文字列を接続関数に渡すことで、同期バージョンでの名前解決しての接続ができる。&lt;/p&gt;
&lt;p&gt;この関数の最後の引数として&lt;code&gt;boost::system::error_code&lt;/code&gt;オブジェクトへの参照を渡した場合には、名前解決失敗時にエラー情報が格納される。&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、名前解決失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;また、この関数は戻り値として、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/iterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::iterator&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。このイテレータは、デフォルト構築されたイテレータを終端としてイテレートできる。このイテレータは間接参照によって&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/endpoint.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;endpoint&lt;/code&gt;&lt;/a&gt;オブジェクトが取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver(io_service_);
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query &lt;span style=&#34;color:#ff0000&#34;&gt;query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;)&lt;/span&gt;;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同期で名前解決&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket,
            resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;resolve&lt;/span&gt;(query),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;boost::asio::ip::tcp::resolver&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/async_resolve/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_resolve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;query&lt;/code&gt;オブジェクト&lt;/li&gt;
&lt;li&gt;第2引数 ： 名前解決の成功もしくは失敗時に呼ばれる関数。iteratorプレースホルダを束縛することにより、完了時に呼ばれる関数に、&lt;code&gt;endpoint&lt;/code&gt;のイテレータが渡される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          resolver_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;);

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で名前解決&lt;/span&gt;
        resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_resolve&lt;/span&gt;(
            query,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_resolve, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_resolve(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error,
                    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator endpoint_iterator)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;resolve failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket_,
            endpoint_iterator,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34; name=&#34;timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通信処理のタイムアウトには、ソケットに対してタイムアウトを指定するのではなく、タイマークラスの非同期イベントと組み合わせて行う。&lt;/p&gt;
&lt;p&gt;同期通信でタイムアウトを指定する方法はないため、ここでは非同期バージョンのみ示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio/steady_timer.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

    &lt;span style=&#34;color:#ff0000&#34;&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;steady_timer&lt;/span&gt; timer_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウト用のタイマー&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_canceled_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          timer_(io_service),
          is_canceled_(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_read(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;expires_from_now&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_wait&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;operation_aborted&lt;/span&gt;) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
            timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;();
            is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;その他のエラー : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;受信成功&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_timer(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
            socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイムアウトにはいくつかのポイントがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. タイマークラスの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイマークラスには以下の選択肢がある：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイマークラス&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/deadline_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::deadline_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boost.DateTimeライブラリの&lt;code&gt;posix_time&lt;/code&gt;で時間指定を行う古いタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/high_resolution_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::high_resolution_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高分解能タイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/steady_timer.html&#34; target=&#34;_blank&#34;&gt;boost::asio::steady_timer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;時間が逆行しないことを保証するタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/system_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::system_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_t&lt;/code&gt;と互換性のあるタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用途に応じて使い分ける必要があるが、基本的には&lt;code&gt;steady_timer&lt;/code&gt;を推奨する。これは、タイマー処理中にOSの時間設定が変更されても時間が逆行しないタイマーであるため、外部要因によるバグを防ぐことができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. タイムアウトの時間設定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイムアウトの時間指定は、ここでは以下のように行なっている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
timer_.expires_from_now(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
timer_.async_wait(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;各タイマークラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_from_now/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_from_now()&lt;/code&gt;&lt;/a&gt;メンバ関数は、現在日時からの相対時間でタイムアウトを指定する関数である。特定の日時にタイムアウトを設定したい場合は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_at/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_at()&lt;/code&gt;&lt;/a&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. タイムアウト方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまではタイムアウトではなく、単にタイマーの使い方を見てきた。
実際のタイムアウトは以下のようにして行う：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;タイマーハンドラで通信処理をキャンセル or 失敗させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理が正常終了するより前にタイマーハンドラが呼ばれたら、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/cancel/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt;メンバ関数や&lt;code&gt;close()&lt;/code&gt;メンバ関数を使用して通信処理を異常終了させる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_timer&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
        socket_.cancel(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;注意すべきポイントは、これらの異常終了させるための関数を呼び出しても、通信処理のイベントハンドラが呼び出されるということである。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理のイベントハンドラでタイムアウトによる中断をハンドリングする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;タイムアウトによって通信処理が異常終了した場合、通信処理のイベントハンドラには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;というエラーが渡される。ハンドラは、タイムアウトによって失敗したのかどうかを正しくハンドリングする必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_receive&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理がタイマーよりも早く正常終了したらタイマーをキャンセルする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理がタイムアウトを待つことなく正常終了した場合は、タイマーを止める必要がある。これをしないと以降の通信処理が意図せずタイムアウトになってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
    timer_.cancel();
    is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイマークラスの&lt;code&gt;calcel()&lt;/code&gt;メンバ関数を呼ぶと、&lt;code&gt;socket&lt;/code&gt;の場合と逆に、タイマーのハンドラに&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;エラーが渡されることになる。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;cancel()&lt;/code&gt;メンバ関数を呼ぶ直前ですでにタイムアウトになっている場合、&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;エラーがハンドラに渡されない可能性がある。
この場合に備えてフラグ変数等でタイマーを止めたことを知らせる必要がある。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
    <entry>
      <title>ネットワーク - TCP -- correct timeout example with asio timer class</title>
      <link href="http://boostjp.github.io/tips/network/tcp.html"/>
      <id>45404a479122449db99969dc9f3aa670ff150f9c:tips/network/tcp.md</id>
      <updated>2015-01-06 00:39:56 +0900</updated>
      
        <content type="html">&lt;h1&gt;ネットワーク - TCP&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34;&gt;接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34;&gt;接続待機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34; name=&#34;connect&#34;&gt;接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/connect/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;()メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;接続先の情報は&lt;code&gt;tcp::endpoint&lt;/code&gt;に、IPアドレス文字列と、ポート番号の2つを指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt;の第2引数として&lt;code&gt;error_code&lt;/code&gt;を渡した場合には、接続失敗時にエラー情報が&lt;code&gt;error_code&lt;/code&gt;変数に格納される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、接続失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    socket.&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt;(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt; failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/async_connect.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_connect&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数として、接続先情報のIPアドレス文字列と、ポート番号を指定する。&lt;/p&gt;
&lt;p&gt;第2引数として、接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_connect&lt;/span&gt;(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34; name=&#34;accept&#34;&gt;接続待機&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接続待機には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/acceptor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::acceptor&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acceptor&lt;/code&gt;クラスのコンストラクタには、IPのバージョン(&lt;code&gt;tcp::v4()&lt;/code&gt; or &lt;code&gt;tcp::v6()&lt;/code&gt;)とポート番号を設定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/accept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;引数として、バインディングする&lt;code&gt;socket&lt;/code&gt;クラスオブジェクトへの参照を渡す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    &lt;span style=&#34;color:#ff0000&#34;&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor&lt;/span&gt; acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    acc.&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt;(socket, error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数としてバインディングする&lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照をとり、第2引数として接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_accept&lt;/span&gt;(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start_accept();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34; name=&#34;send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ送信方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数には、多様なバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    socket.connect(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;write&lt;/span&gt;(socket, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(msg), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数もまた、いくつかのバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string send_data_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信データ&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        send();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; send()
    {
        send_data_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_write&lt;/span&gt;(
                socket_,
                asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(send_data_),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_send, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_send(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34; name=&#34;receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ受信の方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;sockeオブジェクト&lt;/code&gt;への参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第4引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    acc.accept(socket);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buffer;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;read(socket, receive_buffer, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(), error);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buffer.data());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)
ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        start_accept();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.async_accept(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_read&lt;/span&gt;(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 受信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buff_.data());
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

            receive_buff_.consume(receive_buff_.size());
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34; name=&#34;resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver&lt;/code&gt;&lt;/a&gt;クラスと&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/query.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::query&lt;/code&gt;&lt;/a&gt;クラスを組み合わせて使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt;クラスのコンストラクタには、以下を指定する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： ホスト名&lt;/li&gt;
&lt;li&gt;第2引数 ： サービス名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ホスト名等が設定された&lt;code&gt;query&lt;/code&gt;オブジェクトを&lt;code&gt;resolver&lt;/code&gt;クラスの&lt;code&gt;resolve()&lt;/code&gt;メンバ関数に渡し、その文字列を接続関数に渡すことで、同期バージョンでの名前解決しての接続ができる。&lt;/p&gt;
&lt;p&gt;この関数の最後の引数として&lt;code&gt;boost::system::error_code&lt;/code&gt;オブジェクトへの参照を渡した場合には、名前解決失敗時にエラー情報が格納される。&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、名前解決失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;また、この関数は戻り値として、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/iterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::iterator&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。このイテレータは、デフォルト構築されたイテレータを終端としてイテレートできる。このイテレータは間接参照によって&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/endpoint.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;endpoint&lt;/code&gt;&lt;/a&gt;オブジェクトが取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver(io_service_);
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query &lt;span style=&#34;color:#ff0000&#34;&gt;query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;)&lt;/span&gt;;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同期で名前解決&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket,
            resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;resolve&lt;/span&gt;(query),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;boost::asio::ip::tcp::resolver&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/async_resolve/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_resolve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;query&lt;/code&gt;オブジェクト&lt;/li&gt;
&lt;li&gt;第2引数 ： 名前解決の成功もしくは失敗時に呼ばれる関数。iteratorプレースホルダを束縛することにより、完了時に呼ばれる関数に、&lt;code&gt;endpoint&lt;/code&gt;のイテレータが渡される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          resolver_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;);

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で名前解決&lt;/span&gt;
        resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_resolve&lt;/span&gt;(
            query,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_resolve, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_resolve(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error,
                    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator endpoint_iterator)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;resolve failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket_,
            endpoint_iterator,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34; name=&#34;timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通信処理のタイムアウトには、ソケットに対してタイムアウトを指定するのではなく、タイマークラスの非同期イベントと組み合わせて行う。&lt;/p&gt;
&lt;p&gt;同期通信でタイムアウトを指定する方法はないため、ここでは非同期バージョンのみ示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio/steady_timer.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

    &lt;span style=&#34;color:#ff0000&#34;&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;steady_timer&lt;/span&gt; timer_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウト用のタイマー&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_canceled_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          timer_(io_service),
          is_canceled_(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_read(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;expires_from_now&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_wait&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;operation_aborted&lt;/span&gt;) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
            timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;();
            is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;その他のエラー : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;受信成功&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_timer(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
            socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイムアウトにはいくつかのポイントがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. タイマークラスの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイマークラスには以下の選択肢がある：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイマークラス&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/deadline_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::deadline_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boost.DateTimeライブラリの&lt;code&gt;posix_time&lt;/code&gt;で時間指定を行う古いタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/high_resolution_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::high_resolution_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高分解能タイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/steady_timer.html&#34; target=&#34;_blank&#34;&gt;boost::asio::steady_timer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;時間が逆行しないことを保証するタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/system_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::system_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_t&lt;/code&gt;と互換性のあるタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用途に応じて使い分ける必要があるが、基本的には&lt;code&gt;steady_timer&lt;/code&gt;を推奨する。これは、タイマー処理中にOSの時間設定が変更されても時間が逆行しないタイマーであるため、外部要因によるバグを防ぐことができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. タイムアウトの時間設定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイムアウトの時間指定は、ここでは以下のように行なっている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
timer_.expires_from_now(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
timer_.async_wait(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;各タイマークラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_from_now/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_from_now()&lt;/code&gt;&lt;/a&gt;メンバ関数は、現在日時からの相対時間でタイムアウトを指定する関数である。特定の日時にタイムアウトを設定したい場合は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_at/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_at()&lt;/code&gt;&lt;/a&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. タイムアウト方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまではタイムアウトではなく、単にタイマーの使い方を見てきた。
実際のタイムアウトは以下のようにして行う：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;タイマーハンドラで通信処理をキャンセル or 失敗させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理が正常終了するより前にタイマーハンドラが呼ばれたら、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/cancel/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt;メンバ関数や&lt;code&gt;close()&lt;/code&gt;メンバ関数を使用して通信処理を異常終了させる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_timer&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;is_canceled_) {
        socket_.cancel(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;注意すべきポイントは、これらの異常終了させるための関数を呼び出しても、通信処理のイベントハンドラが呼び出されるということである。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理のイベントハンドラでタイムアウトによる中断をハンドリングする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;タイムアウトによって通信処理が異常終了した場合、通信処理のイベントハンドラには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;というエラーが渡される。ハンドラは、タイムアウトによって失敗したのかどうかを正しくハンドリングする必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_receive&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理がタイマーよりも早く正常終了したらタイマーをキャンセルする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理がタイムアウトを待つことなく正常終了した場合は、タイマーを止める必要がある。これをしないと以降の通信処理が意図せずタイムアウトになってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
    timer_.cancel();
    is_canceled_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;タイマークラスの&lt;code&gt;calcel()&lt;/code&gt;メンバ関数を呼ぶと、&lt;code&gt;socket&lt;/code&gt;の場合と逆に、タイマーのハンドラに&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;エラーが渡されることになる。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;cancel()&lt;/code&gt;メンバ関数を呼ぶ直前ですでにタイムアウトになっている場合、&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;エラーがハンドラに渡されない可能性がある。
この場合に備えてフラグ変数等でタイマーを止めたことを知らせる必要がある。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>amedama41</name>
        <email>kamo.tanabota@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boost/graph/exception.hpp -- Boost.Graph : exceptionを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/exception.html"/>
      <id>70caba9caeabe55754f2045b9ba518ee980861c5:archive/boost_docs/libs/graph/exception.md</id>
      <updated>2015-01-05 15:39:01 +0900</updated>
      
        <content type="html">&lt;h1&gt;boost/graph/exception.hpp&lt;/h1&gt;
&lt;p&gt;BGL は、 BGL アルゴリズムからエラーを報告するためにいくつかの例外クラスを定義している。 多くの BGL アルゴリズムは入力されるグラフについてある種の要求事項を設定している。 もしこれらの要求事項に則さないならば、 そのアルゴリズムは成功裏に完了することができず、その代わりに適切な例外を投げる。&lt;/p&gt;
&lt;h2&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bad_graph &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; invalid_argument {
  bad_graph(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; what_arg);
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; not_a_dag &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; bad_graph {
  not_a_dag();
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; negative_edge &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; bad_graph {
  negative_edge();
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; negative_cycle &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; bad_graph {
  negative_cycle();
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; not_connected &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; bad_graph {
  not_connected();
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>