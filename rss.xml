<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2016-08-19T12:10:51.509448</updated>
  <id>370ca83d-fe1a-41ef-9bc2-c1599f6e4ef1</id>

  
    <entry>
      <title>Boost.Signals: クラステンプレート `last_value` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/last_value.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;last_value&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/last_value.hpp&#34; target=&#34;_blank&#34;&gt;boost/last_value.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// void は禁止&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事前条件&lt;/strong&gt;: &lt;code&gt;first != last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 最後のイテレータを参照外しした結果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;void_call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 値は無意味だが &lt;code&gt;void&lt;/code&gt; ではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: &lt;code&gt;void&lt;/code&gt; を戻す関数は、しばしば関数オブジェクトを構成するシステムに多くの回避手段を要求する。
    そこで &lt;code&gt;void&lt;/code&gt; を戻すことを避け、代わりに関数オブジェクトを容易に適合させうる、実装依存の無意味な値を戻すことに決定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:17 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `last_value` -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/last_value.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;last_value&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/last_value.hpp&#34; target=&#34;_blank&#34;&gt;boost/last_value.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// void は禁止&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事前条件&lt;/strong&gt;: &lt;code&gt;first != last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 最後のイテレータを参照外しした結果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;void_call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 値は無意味だが &lt;code&gt;void&lt;/code&gt; ではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: &lt;code&gt;void&lt;/code&gt; を戻す関数は、しばしば関数オブジェクトを構成するシステムに多くの回避手段を要求する。
    そこで &lt;code&gt;void&lt;/code&gt; を戻すことを避け、代わりに関数オブジェクトを容易に適合させうる、実装依存の無意味な値を戻すことに決定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:17 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt; -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html"/>
      <id>526a6ae595cec0eb80e211825c05d6d804484f95:archive/boost_docs/libs/signals/reference/signal.md</id>
      <updated>2016-08-19 12:07:12 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signal.hpp&#34; target=&#34;_blank&#34;&gt;boost/signal.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;signal&lt;/code&gt; クラステンプレートの仕様では、二つの正整数 &lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; が使われている。
前者はスロットに受け渡すことが出来る関数のパラメタ最大数を、後者は所与の実体化されたシグナルに対する関数のパラメタ数を記述する。
&lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; は、実装によってサポートされる実引数の最大値を定義するプリプロセッサのマクロとして、ヘッダ中に存在している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Function type R (T1, T2, ..., TN)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signalN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;#constructor&#34;&gt;explicit signal(const Combiner&amp;amp; combiner = Combiner(), const GroupCompare&amp;amp; group_compare = GroupCompare());&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;combiner&lt;/code&gt; と &lt;code&gt;group_compare&lt;/code&gt; で基底クラスを初期化する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:29 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>526a6ae595cec0eb80e211825c05d6d804484f95:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:07:12 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt; -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html"/>
      <id>4973e1083e1d4c07342c7648a66cfb73aeb86c14:archive/boost_docs/libs/signals/reference/signal.md</id>
      <updated>2016-08-19 12:06:46 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signal.hpp&#34; target=&#34;_blank&#34;&gt;boost/signal.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;signal&lt;/code&gt; クラステンプレートの仕様では、二つの正整数 &lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; が使われている。
前者はスロットに受け渡すことが出来る関数のパラメタ最大数を、後者は所与の実体化されたシグナルに対する関数のパラメタ数を記述する。
&lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; は、実装によってサポートされる実引数の最大値を定義するプリプロセッサのマクロとして、ヘッダ中に存在している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Function type R (T1, T2, ..., TN)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signalN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;#constructor&#34;&gt;explicit signal(const Combiner&amp;amp; combiner = Combiner(), const GroupCompare&amp;amp; group_compare = GroupCompare());&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;combiner&lt;/code&gt; と &lt;code&gt;group_compare&lt;/code&gt; で基底クラスを初期化する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:29 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>4973e1083e1d4c07342c7648a66cfb73aeb86c14:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:06:46 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals 設計の論拠 -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html"/>
      <id>a1578e737a3d3a2638f5338d308da577b1382eff:archive/boost_docs/libs/signals/design_rationale.md</id>
      <updated>2016-08-17 03:00:37 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals 設計の論拠&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本ドキュメントは、Boost.Signals ライブラリに対してなされたいくつかの大きな設計上の決定に関して、その背後にある論拠を解説する。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;設計上の決定と論拠&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#slotdef&#34;&gt;スロットの定義の選択&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#user_connect&#34;&gt;ユーザレベルの接続管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#combiners&#34;&gt;統合子インターフェース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#plus_equals&#34;&gt;接続インターフェース: += 演算子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#trackable&#34;&gt;&lt;code&gt;trackable&lt;/code&gt; の論拠&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他のシグナル・スロット設計との比較&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#libsigc&#34;&gt;libsigc++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#delegates&#34;&gt;.NET デリゲート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;slotdef&#34;&gt;スロットの定義の選択&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットの定義は、シグナル・スロットライブラリによって異なる。
Boost.Signals では、スロットは非常に緩やかな方法で定義されている:
それは、シグナルによって指定された型のパラメタを与えて呼び出すことが可能であり、その戻り値がシグナルが想定する結果の型に変換可能であるような  任意の関数オブジェクトである。
しかしながら Boost.Signals を構築するに先立って考慮された別の定義は、それに関連した利点と欠点を持つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特定の基底クラスから派生したスロット&lt;/strong&gt;:
    一般にこのような枠組みでは、すべてのユーザ定義スロットを、スロットを呼び出す仮想関数を定義したあるライブラリ指定の &lt;code&gt;Slot&lt;/code&gt; 抽象クラスから派生させることを要求する。
    アダプタを用いることで、このような定義を Boost.Signals によって用いられているのと似た定義に変換することが可能だが、そうすると元々の仕様が内部で仮想関数を利用するという実装に結びつけられてしまう。
    このアプローチは、オブジェクト指向の観点から実装とユーザインターフェースを単純化する利点がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プリミティブの集合から構築されたスロット&lt;/strong&gt;:
    この枠組みでは、スロットは (しばしば共通の抽象基底クラスから派生した) 限られた型の集合を持つ。
    それは、しばしば自由関数ポインタやメンバ関数ポインタからの変換を含むライブラリ定義のプリミティブの集合から構築され、制限された引数結合能力を持つ。
    このようなアプローチは適度に単純でほとんどの場合をカバーするが、スロットの構築に関しては柔軟性に乏しい。
    関数オブジェクト構成のためのライブラリは非常に高度なものとなり、そのような機能強化を組み込むことはシグナル・スロットライブラリの範囲を超える。
    したがって Boost.Signals は引数結合や関数オブジェクト構築プリミティブを含めずに、通常の関数オブジェクトの構成についての情報を発見する well-defined なインターフェースを用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スロットの定義に満足できないユーザは、既定のスロット関数型を特定の用途にあった別のものに置き換えることが可能である。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;user_connect&#34;&gt;ユーザレベルの接続管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ユーザは、シグナルからスロットへの接続と来たるべき切断に関して、洗練された制御を必要とする。
Boost.Signals が採用しているアプローチは、接続状態問い合わせと手動での切断、ならびに破棄状態における自動切断を可能にする &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;connection&lt;/a&gt;&lt;/code&gt; オブジェクトを返すことである。
他に見込みがあるインターフェースとして、次のようなものがある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;切断のためにスロットを渡す&lt;/strong&gt;:
    このインターフェースのモデルでは、&lt;code&gt;sig.connect(slot)&lt;/code&gt; によって接続されたスロットの切断は &lt;code&gt;sig.disconnect(code)&lt;/code&gt; によって行われる。
    内部的にはスロット比較を用いた線形検索が実行され、見つかるとそれがリストから削除される。
    不幸なことに接続状態を問い合わせることも、一般に線形時間の操作となる。
    このモデルは、スロットが単純な関数ポインタ、メンバ関数ポインタや制限された構築子と引数結合子よりも複雑なものとなった場合、実装上の理由からも失敗する。
    なぜならこのモデルは関数オブジェクトの比較に依存しているが、一般の関数オブジェクトは比較可能ではないからだ。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;切断のためにトークンを渡す&lt;/strong&gt;:
    このアプローチでは、スロットを容易に比較可能なトークン (例: 文字列) によって識別する。
    これによって、スロットを一般の関数オブジェクトにすることが可能になる。
    このアプローチは本質的には Boost.Signals が採用しているアプローチと等価だが、いくつかの理由でよりエラーを生じやすい傾向にある:&lt;ul&gt;
&lt;li&gt;接続と切断を対にしなければならないため、動的メモリ確保に際して &lt;code&gt;new&lt;/code&gt; と &lt;code&gt;delete&lt;/code&gt; を対にするときに背負い込む問題と同種の問題を生じる。
    この種のエラーはシグナル・スロットの実装においては大失敗ではないだろうが、その検出は一般に自明ではない。&lt;/li&gt;
&lt;li&gt;トークンは固有でなければならない、さもなければ同名の二つのスロットが区別不能になる。
    多くの接続が動的に生成される環境では、名前生成がユーザにとって付加的な作業となる。
    またトークンの固有性は、すでに利用されているトークンを用いてスロットを接続しようと試みたときに追加のエラーを生じさせることになる。&lt;/li&gt;
&lt;li&gt;さらなるパラメタ化が必要となる、なぜならトークン型はユーザ定義であるからだ。
    付加的なパラメタ化は学習曲線を険しくし、単純なインターフェースを過度に複雑にする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Signals では、この種類のインターフェースは名前付き接続の機構を介してサポートされている。
それは、オブジェクトベースの接続管理の枠組みである &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;connection&lt;/a&gt;&lt;/code&gt; を補う。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;combiners&#34;&gt;統合子インターフェース&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;統合子のインターフェースは、 C++ 標準ライブラリのアルゴリズム呼び出しに類似するように選択された。
スロット呼び出しの結果を入力イテレータによってアクセスされる単なる値のシーケンスのように見せることで、統合子のインターフェースは熟達した C++ にとってもっとも自然なものとなっただろう。
競合するインターフェース設計では、概して統合子を Signals ライブラリに特化した (そして限定された) インターフェースにしたがって構築する必要がある。
一般に、このようなインターフェースはシグナル・スロットライブラリのより直裁的な実装を可能にする一方で、統合子を他のシグナル・スロットライブラリはジェネリックアルゴリズムで再利用することは残念ながら不可能となり、特定の統合子インターフェースを学ぶことが学習曲線をやや険しくする。&lt;/p&gt;
&lt;p&gt;Signals における統合子の形式は、統合子が通信に際して、より複雑な &#34;push&#34; 方式ではなく &#34;pull&#34; 方式を利用することを基礎としている。
&#34;pull&#34; 機構では統合子の状態はスタックとプログラムカウンタ中に保持できる。
なぜなら新しいデータを必要とする (つまり次のスロットを呼び出して戻り値を受け取る) 際には、いつでも統合子のコードから戻ることなしに即座にデータを受け取ることができる単純なインターフェースが存在するからだ。
これは、シグナル呼び出しの度に統合子の手続きが呼び出されるため、統合子が全状態をクラスメンバに保持しなければならない &#34;push&#34; 機構と対照的だ。
例として、スロット呼び出しの最大要素を戻す統合子を比較してみる。
もし最大要素 100 を超えたら、それ以上のスロットは呼び出さないものとする。&lt;/p&gt;
&lt;h3&gt;Pull&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pull_max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runtime_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Empty!&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;Push&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;push_max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;push_max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;got_first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// returns false when we want to stop&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;got_first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;got_first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;got_first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runtime_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Empty!&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;got_first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これらの例において注意すべき点がいくつかある。
&#34;pull&#34; 版は、 &lt;code&gt;value_type&lt;/code&gt; が汎整数型であるような入力イテレータシーケンスに基づいた再利用可能な関数オブジェクトであり、意図も非常に直裁的である。
一方 &#34;push&#34; 方式は呼び出し側の特定のインターフェースに依拠しており、たいていは再利用不可能である。
また決定に際して余分な状態値、たとえば要素を一つでも受け取ったか、を必要とする。
一般にコードの品質と利用しやすさは主観的なものだが、明らかに &#34;pull&#34; 方式は短く、再利用性に富み、たいていはシグナル・スロットライブラリの文脈外であっても、書き、理解するのが容易である。&lt;/p&gt;
&lt;p&gt;&#34;pull&#34; 統合子インターフェースのコストは Signals ライブラリ自身の実装において支払われている。
呼び出し中 (例: 参照外し演算子実行中) のスロット切断を正しく扱うために、切断されたスロットを飛ばすイテレータを構築しなければならない。
加えてイテレータはそれぞれのスロットに渡す実引数の集合を持ち運ぶ必要があり(これらの実引数を格納した構造体への参照で十分であるが)、複数回の参照外しが複数回のスロット呼び出しとならないよう、スロット呼び出しの結果をキャッシュしなければならない。
これは明らかに大きなオーバーヘッドを必要とするが、スロット呼び出しの全過程を考えると、このオーバーヘッドは &#34;push&#34; 方式におけるオーバーヘッドとほぼ等価であると考えられる。
我々は統合子の状態検出を複雑にする代わりに、イテレーションと参照外しを行う制御構造が複雑になるように逆転させたのである。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;plus_equals&#34;&gt;接続インターフェース: += 演算子&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals は、接続に関して &lt;code&gt;sig.connect(slot)&lt;/code&gt; 形式の構文をサポートしている。
しがしながら、より簡潔な構文である (そして他のシグナル・スロット実装で用いられている) &lt;code&gt;sig += slot&lt;/code&gt; が提案されたことがある。
この構文が却下された理由は、いくつかある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要である&lt;/strong&gt;:
    Boost.Signals によって提供される接続に関する構文は、 &lt;code&gt;sig += slot&lt;/code&gt; と同程度に強力である。
    &lt;code&gt;connect()&lt;/code&gt; と &lt;code&gt;+=&lt;/code&gt; を比較してタイプ数を節約できることは、本質的に無視できる。
    さらに、 &lt;code&gt;connect()&lt;/code&gt; 呼び出しは &lt;code&gt;+=&lt;/code&gt; のオーバーロードよりも読みやすいと主張できる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値型の曖昧さ&lt;/strong&gt;:
    &lt;code&gt;+=&lt;/code&gt; 演算子の戻り値に関して曖昧さが生じる:
    &lt;code&gt;sig += slot1 += slot2&lt;/code&gt; を可能にするために戻り値はシグナル自身への参照であるべきだろうか、
    それとも新規に作成されたシグナル・スロット接続を表す &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;connection&lt;/a&gt;&lt;/code&gt; を返すべきだろうか?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-=, + 演算子への橋渡し&lt;/strong&gt;:
    接続のための演算子 &lt;code&gt;+=&lt;/code&gt; を追加したのなら、切断のための演算子 &lt;code&gt;-=&lt;/code&gt; を追加するのは自然なことだろう。
    しかしながら、これはライブラリが一般の関数オブジェクトを暗黙のうちにスロットにしようとする場合に問題を生じさせる。
    なぜならスロットはもはや比較可能ではなくなるからだ (このトピックに関する議論は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#user_connect&#34;&gt;ユーザレベルの接続管理&lt;/a&gt; を参照のこと)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operator+=&lt;/code&gt; を含めた場合、次に複数スロットをサポートする &lt;code&gt;+&lt;/code&gt; 演算子を付け足すことも素朴な追加だろう。
この後にシグナルへの代入が続く。
だが、これは任意の二つの関数オブジェクトを受理可能な &lt;code&gt;+&lt;/code&gt; の実装を必要とし、技術的に実行不可能である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;trackable&#34;&gt;&lt;code&gt;trackable&lt;/code&gt; の論拠&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; クラスは自動的な接続寿命管理に関する主要なユーザインターフェースであり、その設計はユーザに直接的に影響を及ぼす。
二つの点がもっとも目立っている:
それは &lt;code&gt;trackable&lt;/code&gt; をコピーする際の奇妙な振る舞いと、そして自動切断管理に関係する型を作成するには &lt;code&gt;trackable&lt;/code&gt; から派生することを要求するという制約である。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;trackable&lt;/code&gt; コピー時の振る舞い&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;trackable&lt;/code&gt; のコピー時の振る舞いは、本質的に &lt;code&gt;trackable&lt;/code&gt; 部分オブジェクトは決してコピーされないということである;
コピー操作はほとんど何も行わない。
これを理解するためにシグナル・スロット接続の性質を調べ、接続が接続状態にある実体を基礎としていることに注目しよう;
実体が破棄されると接続も破棄される。
したがって &lt;code&gt;trackable&lt;/code&gt; 部分オブジェクトがコピーされると、接続をコピーすることが不可能になる。
なぜなら接続は目標となる実体を参照しているのではなく、その源となる実体を参照しているからだ。
この理由はシグナルがコピー不可能である理由と対をなしている:
シグナルに接続されたスロットは特定のシグナルに接続されているのであって、シグナル中のデータに接続されているのではない。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;trackable&lt;/code&gt; から派生させる理由&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;trackable&lt;/code&gt; た正しく働くために二つの制約が存在する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trackable&lt;/code&gt; は、このオブジェクトに対してなされた全接続を追跡する記憶域を持つ必要がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trackable&lt;/code&gt; は、オブジェクトが破棄されるとき、その接続を切断するために通告を受ける必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明らかに &lt;code&gt;trackable&lt;/code&gt; から派生させることはこれらの二つの指針を満足する。
我々は、これに勝る解決策を発見していない。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;libsigc&#34;&gt;libsigc++&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://libsigc.sourceforge.net&#34; target=&#34;_blank&#34;&gt;libsigc++&lt;/a&gt; は、当初は C++ で &lt;a href=&#34;http://www.gtk.org&#34; target=&#34;_blank&#34;&gt;GTK&lt;/a&gt; の C 言語インターフェースをラップしようという提唱の一部として開始され、Karl Nelson によって保守される別個のライブラリに成長した C++ のシグナル・スロットライブラリである。
libsigc++ と Boost.Signals には多くの類似点があり、実際のところ Boost.Signals は Karl Nelson と libsigc++ に強く影響されている。
それぞれのライブラリを大雑把に調査すると、シグナル構築や接続の利用法、自動的な接続寿命管理に関して類似した構文を見つけるだろう。
これらのライブラリを区別する、設計上の大きな差異もいくつか存在する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;スロットの定義&lt;/strong&gt;: libsigc++ におけるスロットは、ライブラリによって提供される一連のプリミティブを用いて作成される。
    これらのプリミティブによってオブジェクトを (ライブラリの一部として) 結合させ、シグナルと引数と戻り値型をスロットの引数と戻り値型に適合させることが可能になる(既定では libsigc++ は Boost.Signals よりも型に関して厳密である)。
    このアプローチと Boost.Signals によって採用されているアプローチの比較は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#slotdef&#34;&gt;スロットの定義の選択&lt;/a&gt; にある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;統合子／マーシャラーインターフェース&lt;/strong&gt;: libsigc++ において Boost.Signals の統合子に相当するものはマーシャラーである。
    マーシャラーは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/design_rationale.html#combiners&#34;&gt;統合子インターフェース&lt;/a&gt; で記述されている &#34;push&#34; インターフェースに類似しており、
    そこでこの件に関する厳密な議論がなされている。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;delegates&#34;&gt;.NET デリゲート&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com&#34; target=&#34;_blank&#34;&gt;Microsoft&lt;/a&gt; は .NET フレームワークと、それに関連した一連の言語、言語拡張を登場させたが、そのうちの一つがデリゲートである。
デリゲートはシグナルとスロットに類似しているが、ほとんどの C++ のシグナル・スロットの実装と比較して限定されたものとなっている。
デリゲートは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デリゲートと呼び出すものの間で、厳密な型の一致を要求する。&lt;/li&gt;
&lt;li&gt;戻り値型を許さない。&lt;/li&gt;
&lt;li&gt;事前に結合された &lt;code&gt;this&lt;/code&gt; によってメソッドを呼び出さねばならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:41:04 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;[boost/signals/connection.hpp](http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp)&amp;gt; -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html"/>
      <id>a1578e737a3d3a2638f5338d308da577b1382eff:archive/boost_docs/libs/signals/reference/connection.md</id>
      <updated>2016-08-17 03:00:37 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;connection_class&#34;&gt;&lt;code&gt;connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;connection&lt;/code&gt; クラスは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html&#34;&gt;Signal&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;Slot&lt;/a&gt; の間の接続を表す。
これはシグナルとスロットが現在接続されているかを問い合わせ、またシグナルとスロットを切断する能力を有する軽量オブジェクトである。
問い合わせと &lt;code&gt;connection&lt;/code&gt; の切断を行うことは、常に安全である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt; クラスは &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; かつ &lt;a href=&#34;http://www.sgi.com/tech/stl/EqualityComparable.html&#34; target=&#34;_blank&#34;&gt;EqualityComparable&lt;/a&gt;である&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;less_than_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equality_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#destructor&#34;&gt;~connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connected&#34;&gt;connected&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#less_than&#34;&gt;operator&amp;lt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;default_constructor&#34;&gt;connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_constructor&#34;&gt;connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect&#34;&gt;void disconnect() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;is_connected()&lt;/code&gt; が真であれば &lt;code&gt;this&lt;/code&gt; によって参照されているシグナルとスロットの接続を切断する; そうでなければ何もしない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;is_connected()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connected&#34;&gt;bool connected() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; がアクティブな (接続されている) 非 NULL 接続を参照していれば &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_assignment&#34;&gt;connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_member&#34;&gt;void swap(connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照している接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;equality&#34;&gt;bool operator==(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が同一の接続を参照しているか、両方とも NULL 接続を参照している場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;less_than&#34;&gt;bool operator&amp;lt;(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 実装定義の順序づけによって、&lt;code&gt;this&lt;/code&gt; によって参照されている接続が &lt;code&gt;other&lt;/code&gt; によって参照されている接続に先行する場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;scoped_connection_class&#34;&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスは、そのインスタンスが破棄されるときに自動的に切断される接続である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_destructor&#34;&gt;~scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_default_constructor&#34;&gt;scoped_connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_constructor&#34;&gt;scoped_connection(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_constructor&#34;&gt;scoped_connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;disconnect()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_member&#34;&gt;void swap(scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照する接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;フリー関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_free&#34;&gt;void swap(connection&amp;amp; c1, connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_free&#34;&gt;void swap(scoped_connection&amp;amp; c1, scoped_connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:05 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt; -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html"/>
      <id>a1578e737a3d3a2638f5338d308da577b1382eff:archive/boost_docs/libs/signals/reference/signal.md</id>
      <updated>2016-08-17 03:00:37 +0900
</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/signals/reference/signal.md b/archive/boost_docs/libs/signals/reference/signal.md
index 7105177..6d65a01 100644
--- a/archive/boost_docs/libs/signals/reference/signal.md
+++ b/archive/boost_docs/libs/signals/reference/signal.md
@@ -30,7 +30,7 @@ namespace boost {
 * last_value[link last_value.md]
 * function[link ../../function.md]
 * signal[link signalN.md]
-* explicit signal[link #constructor]
+* signal[link #constructor]
 
 ###コンストラクタ
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>a1578e737a3d3a2638f5338d308da577b1382eff:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-17 03:00:37 +0900
</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/signals/reference/signalN.md b/archive/boost_docs/libs/signals/reference/signalN.md
index 63b96bb..379eebe 100644
--- a/archive/boost_docs/libs/signals/reference/signalN.md
+++ b/archive/boost_docs/libs/signals/reference/signalN.md
@@ -144,7 +144,6 @@ namespace boost {
 
 &amp;lt;a name=&amp;#34;connect&amp;#34;&amp;gt;
 `signals::connection connect(const slot_type&amp;amp; slot);`
-* connection[link connection.md]
 &amp;lt;/a&amp;gt;
 
 - **作用**: シグナル `this` を `slot` に接続する。
@@ -159,7 +158,6 @@ namespace boost {
 
 &amp;lt;a name=&amp;#34;group_connect&amp;#34;&amp;gt;
 `signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);`
-* connection[link connection.md]
 &amp;lt;/a&amp;gt;
 
 - **作用**: 与えられたスロットを (`connect(slot)` と同様に) シグナルに接続し、このスロット接続を与えられたグループ `group` に関連づける。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>a1578e737a3d3a2638f5338d308da577b1382eff:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-17 03:00:37 +0900
</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/signals/reference/slot.md b/archive/boost_docs/libs/signals/reference/slot.md
index 21c6b12..5a35b61 100644
--- a/archive/boost_docs/libs/signals/reference/slot.md
+++ b/archive/boost_docs/libs/signals/reference/slot.md
@@ -25,7 +25,7 @@ namespace boost {
 };
 }
 ```
-* SlotFunction[link signalN.md#slot_function_type)
+* SlotFunction[link signalN.md#slot_function_type]
 * slot[link #constructor]
 
 ###コンストラクタ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>