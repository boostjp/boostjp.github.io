<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2018-03-13T05:30:42.329003</updated>
  <id>b44c9832-9ad0-4240-8b26-95346bbc81e6</id>

  
    <entry>
      <title>Boost 1.67.0リリースノート -- 1.67.0リリースノート : Atomicを追加 (close #215)</title>
      <link href="https://boostjp.github.io/document/version/1_67_0.html"/>
      <id>c017bebc305daa4a090801770c0a68dc45291ef1:document/version/1_67_0.md</id>
      <updated>2018-03-13T14:26:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.67.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_67_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_67_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 1.66.0で追加された&lt;code&gt;(op)_and_test&lt;/code&gt;操作の結果を反対にした。これらの関数は、演算結果がゼロでない場合に&lt;code&gt;true&lt;/code&gt;を返す。これは標準ライブラリのほかの&lt;code&gt;test&lt;/code&gt;関数と一貫した動作である。この関数を使用するたびに警告を出力する&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;オプションを用意した。これを定義することで、仕様変更前のこれらの関数を使用しているところを検出できる&lt;/li&gt;
&lt;li&gt;C++2a用の更新。&lt;code&gt;memory_order&lt;/code&gt;がスコープ付きのenumになったことへの対応。&lt;code&gt;memory_order_acquire&lt;/code&gt;の代わりに&lt;code&gt;memory_order::acquire&lt;/code&gt;を使用できる。古い名前は互換性のために残る。参照 : &lt;a href=&#34;https://boostjp.github.io/document/version/http：/www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0439r0.html&#34;&gt;P0439R0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++2a用の更新。浮動小数点数型のアトミック操作を実験的にサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt; (加算)、&lt;code&gt;sub&lt;/code&gt; (減算)、&lt;code&gt;negate&lt;/code&gt; (符号反転)の、&lt;code&gt;fetch_&lt;/code&gt;バージョンと&lt;code&gt;opaque_&lt;/code&gt;バージョン (戻り値型が&lt;code&gt;void&lt;/code&gt;) を追加した&lt;/li&gt;
&lt;li&gt;ロックフリーのプロパティマクロとして、&lt;code&gt;BOOST_ATOMIC_FLOAT_LOCK_FREE&lt;/code&gt;, &lt;code&gt;BOOST_ATOMIC_DOUBLE_LOCK_FREE&lt;/code&gt;, &lt;code&gt;BOOST_ATOMIC_LONG_DOUBLE_LOCK_FREE&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_NO_FLOATING_POINT&lt;/code&gt;を定義することで、浮動小数点数版を無効にできる&lt;/li&gt;
&lt;li&gt;参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html&#34; target=&#34;_blank&#34;&gt;P0020R6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新たな実験的な操作を追加&lt;ul&gt;
&lt;li&gt;符号反転する&lt;code&gt;negate_and_test&lt;/code&gt;と、ビット反転する&lt;code&gt;complement_and_test&lt;/code&gt;。結果がゼロでない場合に&lt;code&gt;true&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch_&lt;/code&gt;と違って変更後の値が返る&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;negate&lt;/code&gt;, &lt;code&gt;bitwise_and&lt;/code&gt;, &lt;code&gt;bitwise_or&lt;/code&gt;, &lt;code&gt;bitwise_xor&lt;/code&gt;, &lt;code&gt;bitwise_complement&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;のデフォルトコンストラクタがtrivial (自明) であれば、それを要素とする&lt;code&gt;atomic&lt;/code&gt;型のデフォルトコンストラクタもそうなるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&lt;/code&gt;型の内部実装として、符号付き整数型のオーバーフローに起因する未定義動作を回避するようにした。このライブラリの内部で2の補数表現を使用し、オーバーフロー規則に合致するようにした。現在、このライブラリは2の補数表現のネイティブ符号付き整数型を要求する (ただし、定義されたオーバーフローのセマンティクスはない。ライブラリ内部で未定義動作を引き起こさないだけ)&lt;/li&gt;
&lt;li&gt;Clangサポートを改善。とくに、DCASがロックフリーにならない問題を修正し、32ビットx86で不正なコードが生成される可能があった問題を修正した&lt;/li&gt;
&lt;li&gt;MinGWサポートを改善。GCC 4.6以上向けに、x86のDCASのコンパイルを修正&lt;/li&gt;
&lt;li&gt;x86 PIEコードで、asmブロックが&lt;code&gt;ebx&lt;/code&gt;値を保存するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17 との互換性向上: アロケータを使うために、メンバに直にアクセスするのではなく、&lt;code&gt;allocator_traits&lt;/code&gt; を使うようにした&lt;/li&gt;
&lt;li&gt;ABI の 名前空間の定義を更新することで、gcc 7 以降との互換性を向上させた&lt;/li&gt;
&lt;li&gt;&#34;TextFile&#34; sink の &#34;Append&#34; 設定パラメータをドキュメントに追加した。このパラメータは以前からサポートされていたが、ドキュメントの更新だけが抜けていた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13307&#34; target=&#34;_blank&#34;&gt;Ticket 13307&lt;/a&gt; &lt;code&gt;operator&amp;amp;&lt;/code&gt; をオーバーロードしていた要素を完全に受け入れられるようになった。この修正を行うために、Boost.Operators を更新してくれた Daniel Frey に感謝する&lt;/li&gt;
&lt;li&gt;C++17 で非推奨になった &lt;code&gt;std::allocator&lt;/code&gt; の使用をやめた&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/7&#34; target=&#34;_blank&#34;&gt;GitHub #7&lt;/a&gt; C++17で非推奨になった&lt;code&gt;std::iterator&lt;/code&gt;の使用をやめた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub #53&lt;/a&gt; OSが提供するエントロピーを直接使用するために、&lt;code&gt;random_generator&lt;/code&gt;を最適化&lt;/li&gt;
&lt;li&gt;UUIDのバルク生成のために、&lt;code&gt;random_generator_mt19937&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エントロピーの取得エラーを、無視するのでなく処理するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows UWPをサポート&lt;/li&gt;
&lt;li&gt;CloudABIをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.67.0リリースノート -- Merge pull request #227 from mumumu/release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/document/version/1_67_0.html"/>
      <id>6e3edb35cd4ebb692cf4b87a50d7462bae572987:document/version/1_67_0.md</id>
      <updated>2018-03-13T00:38:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.67.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_67_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_67_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17 との互換性向上: アロケータを使うために、メンバに直にアクセスするのではなく、&lt;code&gt;allocator_traits&lt;/code&gt; を使うようにした&lt;/li&gt;
&lt;li&gt;ABI の 名前空間の定義を更新することで、gcc 7 以降との互換性を向上させた&lt;/li&gt;
&lt;li&gt;&#34;TextFile&#34; sink の &#34;Append&#34; 設定パラメータをドキュメントに追加した。このパラメータは以前からサポートされていたが、ドキュメントの更新だけが抜けていた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13307&#34; target=&#34;_blank&#34;&gt;Ticket 13307&lt;/a&gt; &lt;code&gt;operator&amp;amp;&lt;/code&gt; をオーバーロードしていた要素を完全に受け入れられるようになった。この修正を行うために、Boost.Operators を更新してくれた Daniel Frey に感謝する&lt;/li&gt;
&lt;li&gt;C++17 で非推奨になった &lt;code&gt;std::allocator&lt;/code&gt; の使用をやめた&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/7&#34; target=&#34;_blank&#34;&gt;GitHub #7&lt;/a&gt; C++17で非推奨になった&lt;code&gt;std::iterator&lt;/code&gt;の使用をやめた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub #53&lt;/a&gt; OSが提供するエントロピーを直接使用するために、&lt;code&gt;random_generator&lt;/code&gt;を最適化&lt;/li&gt;
&lt;li&gt;UUIDのバルク生成のために、&lt;code&gt;random_generator_mt19937&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エントロピーの取得エラーを、無視するのでなく処理するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows UWPをサポート&lt;/li&gt;
&lt;li&gt;CloudABIをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Preprocessor Library -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost Preprocessor Library&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;Topics&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html&#34;&gt;動機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/problems.html&#34;&gt;プリプロセッサに関する既知の問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html&#34;&gt;テクニック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/incompatible.html&#34;&gt;非互換性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/reentrancy.html&#34;&gt;reentrancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/local_iteration.html&#34;&gt;local iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/file_iteration.html&#34;&gt;file iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/evaluated_slots.html&#34;&gt;evaluated slots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminology&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/evaluated.html&#34;&gt;evaluated parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/named_external.html&#34;&gt;named external argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Types&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/arrays.html&#34;&gt;arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/lists.html&#34;&gt;lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/sequences.html&#34;&gt;sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/tuples.html&#34;&gt;tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add.html&#34;&gt;ADD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;ADD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/and.html&#34;&gt;AND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/apply.html&#34;&gt;APPLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_data.html&#34;&gt;ARRAY_DATA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_elem.html&#34;&gt;ARRAY_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_size.html&#34;&gt;ARRAY_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert.html&#34;&gt;ASSERT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert_msg.html&#34;&gt;ASSERT_MSG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;ASSIGN_SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitand.html&#34;&gt;BITAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitnor.html&#34;&gt;BITNOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitor.html&#34;&gt;BITOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitxor.html&#34;&gt;BITXOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bool.html&#34;&gt;BOOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma.html&#34;&gt;COMMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;COMMA_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/compl.html&#34;&gt;COMPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;DEC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_d.html&#34;&gt;DEDUCE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_r.html&#34;&gt;DEDUCE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_z.html&#34;&gt;DEDUCE_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div.html&#34;&gt;DIV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div_d.html&#34;&gt;DIV_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/empty.html&#34;&gt;EMPTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum.html&#34;&gt;ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params.html&#34;&gt;ENUM_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params_z.html&#34;&gt;ENUM_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params.html&#34;&gt;ENUM_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_a_default.html&#34;&gt;ENUM_PARAMS_WITH_A_DEFAULT*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_defaults.html&#34;&gt;ENUM_PARAMS_WITH_DEFAULTS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_z.html&#34;&gt;ENUM_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted.html&#34;&gt;ENUM_SHIFTED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params.html&#34;&gt;ENUM_SHIFTED_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params_z.html&#34;&gt;ENUM_SHIFTED_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_z.html&#34;&gt;ENUM_SHIFTED_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing.html&#34;&gt;ENUM_TRAILING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params_z.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params.html&#34;&gt;ENUM_TRAILING_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params_z.html&#34;&gt;ENUM_TRAILING_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_z.html&#34;&gt;ENUM_TRAILING_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_z.html&#34;&gt;ENUM_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal.html&#34;&gt;EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal_d.html&#34;&gt;EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expand.html&#34;&gt;EXPAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_if.html&#34;&gt;EXPR_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_iif.html&#34;&gt;EXPR_IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/filename_x.html&#34;&gt;FILENAME_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for_r.html&#34;&gt;FOR_&lt;em&gt;r&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_finish.html&#34;&gt;FRAME_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_flags.html&#34;&gt;FRAME_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_iteration.html&#34;&gt;FRAME_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_start.html&#34;&gt;FRAME_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater.html&#34;&gt;GREATER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_d.html&#34;&gt;GREATER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal.html&#34;&gt;GREATER_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal_d.html&#34;&gt;GREATER_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/identity.html&#34;&gt;IDENTITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/if.html&#34;&gt;IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iif.html&#34;&gt;IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;INC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/include_self.html&#34;&gt;INCLUDE_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/indirect_self.html&#34;&gt;INDIRECT_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/intercept.html&#34;&gt;INTERCEPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;IS_ITERATING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_selfish.html&#34;&gt;IS_SELFISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;ITERATION_DEPTH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_finish.html&#34;&gt;ITERATION_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;ITERATION_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_limits.html&#34;&gt;ITERATION_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;ITERATION_PARAMS_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_start.html&#34;&gt;ITERATION_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;LESS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;LESS_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;LESS_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;LESS_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_dim.html&#34;&gt;LIMIT_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_for.html&#34;&gt;LIMIT_FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html&#34;&gt;LIMIT_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.html&#34;&gt;LIMIT_ITERATION_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;LIMIT_MAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;LIMIT_REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html&#34;&gt;LIMIT_SLOT_COUNT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.html&#34;&gt;LIMIT_SLOT_SIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;LIMIT_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_while.html&#34;&gt;LIMIT_WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html&#34;&gt;LINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html&#34;&gt;LIST_APPEND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;LIST_APPEND_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;LIST_AT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;LIST_AT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;LIST_CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;LIST_CAT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;LIST_CONS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;LIST_ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;LIST_ENUM_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;LIST_FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;LIST_FILTER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;LIST_FIRST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;LIST_FIRST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;LIST_FIRST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;LIST_FOLD_LEFT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html&#34;&gt;LIST_FOLD_LEFT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html&#34;&gt;LIST_FOLD_LEFT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;LIST_FOLD_LEFT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LIST_FOLD_LEFT_D*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;LIST_FOLD_RIGHT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.html&#34;&gt;LIST_FOLD_RIGHT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html&#34;&gt;LIST_FOLD_RIGHT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;LIST_FOLD_RIGHT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LIST_FOLD_RIGHT_D*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;LIST_FOR_EACH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;LIST_FOR_EACH_I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;LIST_FOR_EACH_I_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;LIST_FOR_EACH_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;LIST_IS_CONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;LIST_IS_NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;LIST_NIL*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;LIST_REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;LIST_REST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;LIST_REST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;LIST_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;LIST_REVERSE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;LIST_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;LIST_SIZE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;LIST_TO_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;LIST_TO_TUPLE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;LIST_TRANSFORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;LIST_TRANSFORM_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;LOCAL_ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;LOCAL_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;LOCAL_MACRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;LPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;LPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;MAX_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;MIN_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;MOD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;MOD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;MUL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;NOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;NOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;NOT_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;NOT_EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_finish.html&#34;&gt;RELATIVE_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_flags.html&#34;&gt;RELATIVE_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html&#34;&gt;RELATIVE_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_start.html&#34;&gt;RELATIVE_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html&#34;&gt;REPEAT_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html&#34;&gt;REPEAT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html&#34;&gt;REPEAT_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;REPEAT_FROM_TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html&#34;&gt;REPEAT_FROM_TO_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html&#34;&gt;REPEAT_FROM_TO_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html&#34;&gt;REPEAT_FROM_TO_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;REPEAT_FROM_TO_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;REPEAT_FROM_TO_D_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;REPEAT_FROM_TO_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;REPEAT_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;RPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;RPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html&#34;&gt;SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html&#34;&gt;STRINGIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;SUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;SUB_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html&#34;&gt;TUPLE_EAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;TUPLE_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html&#34;&gt;TUPLE_REM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html&#34;&gt;TUPLE_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html&#34;&gt;TUPLE_TO_LIST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html&#34;&gt;VALUE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;WHILE_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;XOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Headers&lt;ul&gt;
&lt;li&gt;../&lt;ul&gt;
&lt;li&gt;preprocessor.hpp&lt;/li&gt;
&lt;li&gt;arithmetic.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arithmetic/&lt;ul&gt;
&lt;li&gt;add.hpp&lt;/li&gt;
&lt;li&gt;dec.hpp&lt;/li&gt;
&lt;li&gt;div.hpp&lt;/li&gt;
&lt;li&gt;inc.hpp&lt;/li&gt;
&lt;li&gt;mod.hpp&lt;/li&gt;
&lt;li&gt;mul.hpp&lt;/li&gt;
&lt;li&gt;sub.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array.hpp&lt;/li&gt;
&lt;li&gt;array/&lt;ul&gt;
&lt;li&gt;data.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assert_msg.hpp*&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;comma.hpp*&lt;/li&gt;
&lt;li&gt;comma_if.hpp*&lt;/li&gt;
&lt;li&gt;comparison.hpp&lt;/li&gt;
&lt;li&gt;comparison/&lt;ul&gt;
&lt;li&gt;equal.hpp&lt;/li&gt;
&lt;li&gt;greater.hpp&lt;/li&gt;
&lt;li&gt;greater_equal.hpp&lt;/li&gt;
&lt;li&gt;less.hpp&lt;/li&gt;
&lt;li&gt;less_equal.hpp&lt;/li&gt;
&lt;li&gt;not_equal.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config/&lt;ul&gt;
&lt;li&gt;limits.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;control.hpp&lt;/li&gt;
&lt;li&gt;control/&lt;ul&gt;
&lt;li&gt;deduce_d.hpp&lt;/li&gt;
&lt;li&gt;expr_if.hpp&lt;/li&gt;
&lt;li&gt;expr_iif.hpp&lt;/li&gt;
&lt;li&gt;if.hpp&lt;/li&gt;
&lt;li&gt;iif.hpp&lt;/li&gt;
&lt;li&gt;while.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;debug.hpp&lt;/li&gt;
&lt;li&gt;debug/&lt;ul&gt;
&lt;li&gt;assert.hpp&lt;/li&gt;
&lt;li&gt;line.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dec.hpp*&lt;/li&gt;
&lt;li&gt;empty.hpp*&lt;/li&gt;
&lt;li&gt;enum.hpp*&lt;/li&gt;
&lt;li&gt;enum_params.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp*&lt;/li&gt;
&lt;li&gt;expand.hpp*&lt;/li&gt;
&lt;li&gt;expr_if.hpp*&lt;/li&gt;
&lt;li&gt;facilities.hpp&lt;/li&gt;
&lt;li&gt;facilities/&lt;ul&gt;
&lt;li&gt;apply.hpp&lt;/li&gt;
&lt;li&gt;empty.hpp&lt;/li&gt;
&lt;li&gt;expand.hpp&lt;/li&gt;
&lt;li&gt;identity.hpp&lt;/li&gt;
&lt;li&gt;intercept.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for.hpp*&lt;/li&gt;
&lt;li&gt;identity.hpp*&lt;/li&gt;
&lt;li&gt;if.hpp*&lt;/li&gt;
&lt;li&gt;inc.hpp*&lt;/li&gt;
&lt;li&gt;iterate.hpp*&lt;/li&gt;
&lt;li&gt;iteration.hpp&lt;/li&gt;
&lt;li&gt;iteration/&lt;ul&gt;
&lt;li&gt;iterate.hpp&lt;/li&gt;
&lt;li&gt;local.hpp&lt;/li&gt;
&lt;li&gt;self.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;library.hpp&lt;/li&gt;
&lt;li&gt;limits.hpp*&lt;/li&gt;
&lt;li&gt;list.hpp&lt;/li&gt;
&lt;li&gt;list/&lt;ul&gt;
&lt;li&gt;adt.hpp&lt;/li&gt;
&lt;li&gt;append.hpp&lt;/li&gt;
&lt;li&gt;at.hpp&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical.hpp&lt;/li&gt;
&lt;li&gt;logical/&lt;ul&gt;
&lt;li&gt;and.hpp&lt;/li&gt;
&lt;li&gt;bitand.hpp&lt;/li&gt;
&lt;li&gt;bitnor.hpp&lt;/li&gt;
&lt;li&gt;bitor.hpp&lt;/li&gt;
&lt;li&gt;bitxor.hpp&lt;/li&gt;
&lt;li&gt;bool.hpp&lt;/li&gt;
&lt;li&gt;compl.hpp&lt;/li&gt;
&lt;li&gt;nor.hpp&lt;/li&gt;
&lt;li&gt;not.hpp&lt;/li&gt;
&lt;li&gt;or.hpp&lt;/li&gt;
&lt;li&gt;xor.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max.hpp*&lt;/li&gt;
&lt;li&gt;min.hpp*&lt;/li&gt;
&lt;li&gt;punctuation.hpp&lt;/li&gt;
&lt;li&gt;punctuation/&lt;ul&gt;
&lt;li&gt;comma.hpp&lt;/li&gt;
&lt;li&gt;comma_if.hpp&lt;/li&gt;
&lt;li&gt;paren.hpp&lt;/li&gt;
&lt;li&gt;paren_if.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat.hpp*&lt;/li&gt;
&lt;li&gt;repeat_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repetition.hpp&lt;/li&gt;
&lt;li&gt;repetition/&lt;ul&gt;
&lt;li&gt;deduce_r.hpp&lt;/li&gt;
&lt;li&gt;deduce_z.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;enum_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_params.hpp&lt;/li&gt;
&lt;li&gt;for.hpp&lt;/li&gt;
&lt;li&gt;repeat.hpp&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;selection.hpp&lt;/li&gt;
&lt;li&gt;selection/&lt;ul&gt;
&lt;li&gt;max.hpp&lt;/li&gt;
&lt;li&gt;min.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;seq/&lt;ul&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;subseq.hpp&lt;/li&gt;
&lt;li&gt;to_array.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;li&gt;slot/&lt;ul&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tuple.hpp&lt;/li&gt;
&lt;li&gt;tuple/&lt;ul&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;eat.hpp&lt;/li&gt;
&lt;li&gt;rem.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;to_list.hpp&lt;/li&gt;
&lt;li&gt;to_seq.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stringize.hpp&lt;/li&gt;
&lt;li&gt;while.hpp*&lt;/li&gt;
&lt;li&gt;wstringize.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;array_arithmetic.c&lt;/li&gt;
&lt;li&gt;catch_builtin.cpp&lt;/li&gt;
&lt;li&gt;delay.c&lt;/li&gt;
&lt;li&gt;duffs_device.c&lt;/li&gt;
&lt;li&gt;is_integral.cpp&lt;/li&gt;
&lt;li&gt;linear_fib.c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellanea&lt;ul&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;acknowledgements&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor/bibliography.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;参考文献&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#stroustrup&#34; id=&#34;stroustrup&#34;&gt;[Stroustrup]&lt;/a&gt; Stroustrup:  The Design and Evolution of C++, ISBN 0201543303&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#czarnecki&#34; id=&#34;czarnecki&#34;&gt;[Czarnecki]&lt;/a&gt; Czarnecki, Eisenecker:  Generative Programming, ISBN 0201309777&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#barton&#34; id=&#34;barton&#34;&gt;[Barton]&lt;/a&gt; Barton, Nackman:  Scientific and Engineering C++, ISBN 0201533936&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#mcconnell&#34; id=&#34;mcconnell&#34;&gt;[McConnell]&lt;/a&gt; McConnell:  Code Complete, ISBN 1556154844&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#std&#34; id=&#34;std&#34;&gt;[Std]&lt;/a&gt; ISO/IEC 14882:1998 Programming Languages - C++&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#thompson&#34; id=&#34;thompson&#34;&gt;[Thompson]&lt;/a&gt; Thompson:  Haskell:  The Craft of Functional Programming, ISBN 0201342758&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#okasaki&#34; id=&#34;okasaki&#34;&gt;[Okasaki]&lt;/a&gt; Okasaki:  Purely Functional Data Structures, ISBN 0521663504&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#cousineau&#34; id=&#34;cousineau&#34;&gt;[Cousineau]&lt;/a&gt; Cousineau, Mauny:  The Functional Approach to Programming, ISBN 0521576814&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#abelson&#34; id=&#34;abelson&#34;&gt;[Abelson]&lt;/a&gt; Abelson, Sussman, Sussman:  Structure and Interpretation of Computer Programs, ISBN 0521576814&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>Sequences -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/sequences.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor/data/sequences.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Sequences&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;A &lt;em&gt;sequence&lt;/em&gt; (abbreviated to &lt;em&gt;seq&lt;/em&gt;) is a group of adjacent parenthesized elements.
For example,&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;...is a &lt;code&gt;seq&lt;/code&gt; of &lt;code&gt;3&lt;/code&gt; elements--&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sequences&lt;/em&gt; are data structures that merge the properties of both &lt;em&gt;lists&lt;/em&gt; and &lt;em&gt;tuples&lt;/em&gt; with the exception that a &lt;em&gt;seq&lt;/em&gt; cannot be empty.
Therefore, an &#34;empty&#34; &lt;em&gt;seq&lt;/em&gt; is considered a special case scenario that must be handled separately in C++.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define SEQ (x)(y)(z)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define REVERSE(s, state, elem) (elem) state&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// append to head                 ^&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_SEQ_FOLD_LEFT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;REVERSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_EMPTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//                          #1                  #2&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 1) placeholder for &#34;empty&#34; seq&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 2) remove placeholder&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define SEQ_B (1)(2)(3)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define INC(s, state, elem) state (BOOST_PP_INC(elem))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// append to tail            ^&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_SEQ_FOLD_RIGHT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_SEQ_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//                       ^&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// special placeholder that will be &#34;eaten&#34;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// by appending to the tail&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sequences&lt;/em&gt; are extremely efficient.
Element access speed approaches random access--even with &lt;em&gt;seqs&lt;/em&gt; of up to &lt;em&gt;256&lt;/em&gt; elements.
This is because element access (among other things) is implemented iteratively rather than recursively.
Therefore, elements can be accessed at extremely high indices even on preprocessors with low maximum expansion depths.&lt;/p&gt;
&lt;p&gt;Elements of a &lt;em&gt;seq&lt;/em&gt; can be extracted with &lt;code&gt;BOOST_PP_SEQ_ELEM&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Primitives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_SEQ_ELEM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_ITERATION -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor/ref/iteration.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;BOOST_PP_ITERATION&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_ITERATION&lt;/code&gt; マクロは現在の &lt;em&gt;ファイル繰り返し&lt;/em&gt;の深さの反復値に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_ITERATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; が進行中の時のみ有効である。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/iterate.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// file.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#if !&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;BOOST_PP_IS_ITERATING&lt;/a&gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE_H_&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE_H_&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;BOOST_PP_ITERATION_PARAMS_1&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#elif &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;BOOST_PP_ITERATION_DEPTH&lt;/a&gt;() == 1&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>動機 -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor/topics/motivation.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;動機&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++ の関数やテンプレートの引数リストは特別な構文によって組み立てられるもので、C++ の式によって構成したり操作したりできない。
このことによってコードを無駄に反復してしまうことがある。&lt;/p&gt;
&lt;p&gt;例としてBoostの &lt;code&gt;is_function&amp;lt;&amp;gt;&lt;/code&gt; メタ関数の実装を見てみよう。
この実装は、型が関数へのポインタへ変換できるかどうかを調べる &lt;code&gt;is_function_tester()&lt;/code&gt; 多重定義関数を使っている。
引数リストは特別な取扱いがされるため、任意個の引数を持つ関数に直接マッチさせることはできない。
そのかわりに、関数 &lt;code&gt;is_function_tester()&lt;/code&gt; はサポートされる全ての引数の個数ごとに別々に定義されなければならない。
例えば次の通り:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)());&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このような種類の繰り返しは総称的なコンポーネントやメタプログラミングのための機能の実装をする際に頻繁に起きる。&lt;/p&gt;
&lt;h2&gt;典型的な解決法&lt;/h2&gt;
&lt;p&gt;典型的には、このような繰り返しは手動で解決される。
手動による繰り返しは生産的ではないが、訓練されていない人間の目にはそのようなコードが読みやすいことがある。&lt;/p&gt;
&lt;p&gt;ほかの解決法としては、繰り返しを生成する外部プログラムを使うことや、高度なエディタなどを使う方法がある。
残念ながら、外部の生成プログラムを使う方法はたくさんの欠点がある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成プログラムを書くのは時間がかかる。(標準的な生成プログラムを使うと楽になるが。)&lt;/li&gt;
&lt;li&gt;生成された C++ コードを直接変更できない。&lt;/li&gt;
&lt;li&gt;生成プログラムを呼ぶのは難しいかもしれない。&lt;/li&gt;
&lt;li&gt;特定の環境においては生成プログラムの呼び出しを自動化するのは難しいかもしれない。
    (呼び出しの自動化は頻繁に変更されるライブラリにとっては魅力的である。)&lt;/li&gt;
&lt;li&gt;生成プログラムの移植や配布は難しいかもしれないし、時間を消費する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プリプロセッサではどうか？&lt;/h2&gt;
&lt;p&gt;C++にはプリプロセッサが付いているので、このような需要に向いていると考えるかもしれない。
実際、プリプロセッサはこのようなケースに極めて妥当である。なぜなら:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリプロセッサはポータブルである。&lt;/li&gt;
&lt;li&gt;プリプロセッサはコンパイルの一部として自動的に実行される。&lt;/li&gt;
&lt;li&gt;プリプロセッサのコードは直接 C++ のコードに埋め込むことができる。&lt;/li&gt;
&lt;li&gt;コンパイラは通常、プリプロセッサの出力を見ることができるようになっているが、これは生成されたコードをデバグしたりコピーするのに便利である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残念ながらプリプロセッサは非常に低レベルなものであり、繰り返しや再帰的マクロをサポートしていない。
したがってライブラリによるサポートが必要である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;詳細なプリプロセッサの機能と制限については、C++ 標準 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#std&#34;&gt;[Std]&lt;/a&gt; を参照してほしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ふたたび先の例&lt;/h2&gt;
&lt;p&gt;プリプロセッサライブラリを使用すると、 &lt;code&gt;is_function_tester()&lt;/code&gt; は次のように実装できる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define IS_FUNCTION_TESTER(Z, N, _) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class R BOOST_PP_COMMA_IF(N) BOOST_PP_ENUM_PARAMS(N, class A)&amp;gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    yes_type is_function_tester(R (*)(BOOST_PP_ENUM_PARAMS(N, A))); \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_INC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_IS_FUNCTION_TESTER_PARAMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IS_FUNCTION_TESTER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef IS_FUNCTION_TESTER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;サポートする引数の最大個数を変更するには、単に &lt;code&gt;MAX_IS_FUNCTION_TESTER_PARAMS&lt;/code&gt; を変更してコンパイルしなおせばよい。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(C) Copyright &lt;a href=&#34;http://www.housemarque.com&#34; target=&#34;_blank&#34;&gt;Housemarque Oy&lt;/a&gt; 2002&lt;/p&gt;
&lt;p&gt;Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>テクニック集 -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:archive/boost_docs/libs/preprocessor/topics/techniques.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;テクニック集&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;プリプロセッサメタプログラミングの技を例示する。&lt;/p&gt;
&lt;h2&gt;例 - 小さな規模の反復を避けるために局所的なマクロを使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(op) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ..................................... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class T, int n&amp;gt;                                          \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    vec&amp;lt;T, n&amp;gt; operator op ## =(vec&amp;lt;T, n&amp;gt; lhs, const vec&amp;lt;T, n&amp;gt;&amp;amp; rhs) { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        for (int i = 0; i &amp;amp;lt; n; ++i) {                              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            lhs(i) op ## = rhs(i);                                    \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        }                                                             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                                                 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef BOOST_PP_DEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;通常はこのような種類のコードに対して &lt;code&gt;BOOST_PP_DEF&lt;/code&gt; のような標準的なマクロの名前を使って構わない。
なぜならこのマクロは使用される場所のすぐそばで定義されふたたび未定義にされているから。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;継続行が正しく使用されているか確認しやすくするには継続文字(バックスラッシュ文字)の位置を揃えるとよい。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;別の演算子を定義することによってこの例を拡張することができる。
それをする前に、&lt;em&gt;algebraic categories&lt;/em&gt; (文献 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#barton&#34;&gt;[Barton]&lt;/a&gt; で紹介されている)や &lt;em&gt;layered architecture&lt;/em&gt; (例えば文献 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#czarnecki&#34;&gt;[Czarnecki]&lt;/a&gt;) を使うことを考慮せよ。
しかしながら、演算子トークン &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, 等はテンプレートによっては生成できないから、これらのトークンをどこかに書く必要が出て来るだろう。
そのトークンの反復(&lt;em&gt;categorical repetition&lt;/em&gt;)はテンプレートメタプログラミングによって除去できる。&lt;/p&gt;
&lt;h2&gt;例 - マクロ BOOST_PP_EMPTY を局所的なマクロのインスタンス化の際の未使用パラメータとして使用する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(cv) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class base&amp;gt;           \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    cv() typename implement_subscript_using_begin_subscript&amp;lt;base&amp;gt;::value_type&amp;amp; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    implement_subscript_using_begin_subscript&amp;lt;base&amp;gt;::operator[](index_type i) cv() { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        return base::begin()[i];   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY()&lt;/code&gt; は空に展開されるので未使用パラメータとして使用することができる。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt; の後ろに () を付けないと展開されない。&lt;/p&gt;
&lt;p&gt;関数のようなマクロを呼ぶには () が必要である。&lt;/p&gt;
&lt;h3&gt;警告:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY()&lt;/code&gt; を使っている場合、 連結(concatenation)は安全に使用できない。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;時折、1～2行が他の行より極端に長くなることがある。
継続行演算子の位置を全ての行について揃えることを &lt;em&gt;しない&lt;/em&gt; ことによって、可読性をそれほど犠牲にせずに作業を楽にすることができる。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;プリプロセッサメタプログラミングのためのマクロ識別子をハイライト表示せよ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_DEF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これによって可読性が向上する。&lt;/p&gt;
&lt;h2&gt;例 - 必要なら ## のかわりに BOOST_PP_CAT を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define STATIC_ASSERT(expr) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    enum { BOOST_PP_CAT(static_check_, __LINE__) = (expr) ? 1 : -1 }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    typedef char \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_CAT(static_assert_, __LINE__)[BOOST_PP_CAT(static_check_, __LINE__)] \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;理由:&lt;/h3&gt;
&lt;p&gt;マクロ展開は(層状に)再帰的に適用される。
トークンの結合はマクロ展開を阻害する。
そのためトークンの結合を遅延せねばならないことがしばしば起きる。&lt;/p&gt;
&lt;h2&gt;例 - 必要なら # のかわりに BOOST_PP_STRINGIZE を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define NOTE(str) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    message(__FILE__ &#34;(&#34; BOOST_PP_STRINGIZE(__LINE__) &#34;) : &#34; str) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# pragma NOTE(&#34;TBD!&#34;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;理由:&lt;/h3&gt;
&lt;p&gt;マクロ展開は(層状に)再帰的に適用される。
文字列化はマクロ展開を阻害するため、文字列化を遅延せねばならないことがしばしば起きる。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_ENUM_PARAMS (やその変種)や BOOST_PP_REPEAT や BOOST_PP_COMMA_IF 等を使ってリスト操作の &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) 繰り返しを除去する&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_cons_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;type_cons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;T0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_inner_if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_identity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;make_type_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;BOOST_PP_ENUM_SHIFTED_PARAMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; は再帰もどきを使用する (疑似コード):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT(n, m, p) BOOST_PP_REPEAT ## n(m, p)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT0(m, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT1(m, p) m(0, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT2(m, p) m(0, p) m(1, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT3(m, p) BOOST_PP_REPEAT2(m, p) m(2, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT4(m, p) BOOST_PP_REPEAT3(m, p) m(3, p)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;上のコードは決して &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の実装などではなく、単に説明のためのものである！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; とその変種は &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使っている。
&lt;code&gt;BOOST_PP_COMMA_IF(I)&lt;/code&gt; は I != 0 のときコンマに展開される。
&lt;code&gt;BOOST_PP_INC(I)&lt;/code&gt; は本質的には &#34;I+1&#34; に展開され、&lt;code&gt;BOOST_PP_DEC(I)&lt;/code&gt; は &#34;I-1&#34; に展開される。&lt;/p&gt;
&lt;h2&gt;例 - ある上限を決めるのではなく、&lt;em&gt;条件付きのマクロ定義&lt;/em&gt; を使って、必要に応じてユーザがコードの繰り返しを制御できるようにする。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# ifndef MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define MAKE_TYPE_LIST_MAX_LENGTH 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このようにすれば、ライブラリのコードを変更することなくユーザが &lt;code&gt;make_type_list&lt;/code&gt; を設定することができる。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_REPEAT と &lt;em&gt;トークン照合関数&lt;/em&gt; を使って categorical repetition を除去する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 注意: 私のコンパイラは算術型に関して標準的ではない。&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE(I) ARITHMETIC_TYPE ## I&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE0    bool&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE1    char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE2    signed char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE3    unsigned char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE4    short&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE5    unsigned short&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE6    int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE7    unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE8    long&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE9    unsigned long&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE10   float&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE11   double&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE12   long double&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE_CNT 13&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(z, I, _) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    catch (ARITHMETIC_TYPE(I) t) {      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        report_typeid(t);               \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        report_value(t);                \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARITHMETIC_TYPE_CNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef BOOST_PP_DEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;上の例の繰り返しはテンプレートメタプログラミング &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#czarnecki&#34;&gt;[Czarnecki]&lt;/a&gt; によっても除去できる。
しかしながら演算子トークンの categorical repetition はテンプレートメタプログラミングによっては完全に除去できない。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_REPEAT を使って&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt;)の繰り返しを除去する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# ifndef MAX_VEC_ARG_CNT&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define MAX_VEC_ARG_CNT 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# endif&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARG_FUN(z, i, _) BOOST_PP_COMMA_IF(i) T a ## i&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ASSIGN_FUN(z, i, ) (*this)[i] = a ## i;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define DEF_VEC_CTOR_FUN(z, i, _) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    vec(BOOST_PP_REPEAT(i, ARG_FUN, _)) {   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_REPEAT(i, ASSIGN_FUN, _)   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                       \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_INC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_VEC_ARG_CNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEF_VEC_CTOR_FUN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef ARG_FUN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# undef ASSIGN_FUN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# undef DEF_VEC_CTOR_FUN&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; は &lt;em&gt;自動再帰&lt;/em&gt; [訳注: ???]を起こさせるような特別な方法で実装されている。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_IF を使って分岐を実現する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define COMMA_IF(c) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_IF(c, BOOST_PP_COMMA, BOOST_PP_EMPTY)() \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_IF&lt;/code&gt; を使えば &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使ったリストの生成を簡単にできる。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;THEN&lt;/em&gt; と &lt;em&gt;ELSE&lt;/em&gt; の部分(第2、第3引数)はマクロである必要はない。
しかし、もしそれらの一方が関数的なマクロであって、それを条件付きで展開したいのであれば、もう一方も関数的マクロにしなければならない。
その目的のために &lt;code&gt;BOOST_PP_IDENTITY&lt;/code&gt; を使うことができる。
下の例 (Aleksey Gurtovoy による) を見よ:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define NUMBERED_EXPRESSION(i, x) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_IF(                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        i,                                  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_IDENTITY(x ## i)           \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_EMPTY                      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )()                                     \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;上の &lt;code&gt;COMMA_IF&lt;/code&gt; の例のように、&lt;code&gt;BOOST_PP_IF&lt;/code&gt; の結果が呼ばれても &lt;em&gt;THEN&lt;/em&gt; や &lt;em&gt;ELSE&lt;/em&gt; パラメータが呼ばれないことがある。
もしパラメータも呼ばれるなら、&lt;code&gt;BOOST_PP_IF&lt;/code&gt; が適切に展開される前に &lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt; が空に展開されるため、そのコードは正しく展開されなくなってしまう。
[訳注: ???]&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_IF&lt;/code&gt; は全ての繰り返し範囲について定義されている(疑似コード):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF(c, THEN, ELSE) BOOST_PP_IF ## c(THEN, ELSE)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF0(THEN, ELSE) ELSE&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF1(THEN, ELSE) THEN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF1(THEN, ELSE) THEN&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例: 算術、論理、比較演算を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define SPECIAL_NUMBERED_LIST(n, i, elem, special) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_ASSERT_MSG(                      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_LESS(i, n),                  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        bad params for SPECIAL_NUMBERED_LIST! \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_ENUM_PARAMS(i, elem)             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_COMMA_IF(i) special              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_REPEAT(                          \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_SUB(BOOST_PP_DEC(n), i),     \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        SPECIAL_NUMBERED_LIST_HELPER,         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        (elem, i)                             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define SPECIAL_NUMBERED_LIST_HELPER(z, i, elem_base) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ,                                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_CAT(                                \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_TUPLE_ELEM(2, 0, elem_base),    \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_ADD(                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            i,                                   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            BOOST_PP_TUPLE_ELEM(2, 1, elem_base) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        )                                        \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(C) Copyright &lt;a href=&#34;http://www.housemarque.com&#34; target=&#34;_blank&#34;&gt;Housemarque Oy&lt;/a&gt; 2002&lt;/p&gt;
&lt;p&gt;Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.67.0リリースノート -- Merge branch &#39;master&#39; into release_note_1_67_multi_index</title>
      <link href="https://boostjp.github.io/document/version/1_67_0.html"/>
      <id>fdb42fac297c97cf1eab86072b921dae6b307fd1:document/version/1_67_0.md</id>
      <updated>2018-03-13T00:37:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.67.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_67_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_67_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17 との互換性向上: アロケータを使うために、メンバに直にアクセスするのではなく、&lt;code&gt;allocator_traits&lt;/code&gt; を使うようにした&lt;/li&gt;
&lt;li&gt;ABI の 名前空間の定義を更新することで、gcc 7 以降との互換性を向上させた&lt;/li&gt;
&lt;li&gt;&#34;TextFile&#34; sink の &#34;Append&#34; 設定パラメータをドキュメントに追加した。このパラメータは以前からサポートされていたが、ドキュメントの更新だけが抜けていた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13307&#34; target=&#34;_blank&#34;&gt;Ticket 13307&lt;/a&gt; &lt;code&gt;operator&amp;amp;&lt;/code&gt; をオーバーロードしていた要素を完全に受け入れられるようになった。この修正を行うために、Boost.Operators を更新してくれた Daniel Frey に感謝する&lt;/li&gt;
&lt;li&gt;C++17 で非推奨になった &lt;code&gt;std::allocator&lt;/code&gt; の使用をやめた&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/7&#34; target=&#34;_blank&#34;&gt;GitHub #7&lt;/a&gt; C++17で非推奨になった&lt;code&gt;std::iterator&lt;/code&gt;の使用をやめた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub #53&lt;/a&gt; OSが提供するエントロピーを直接使用するために、&lt;code&gt;random_generator&lt;/code&gt;を最適化&lt;/li&gt;
&lt;li&gt;UUIDのバルク生成のために、&lt;code&gt;random_generator_mt19937&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エントロピーの取得エラーを、無視するのでなく処理するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows UWPをサポート&lt;/li&gt;
&lt;li&gt;CloudABIをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.67.0リリースノート -- fixed anchor typo</title>
      <link href="https://boostjp.github.io/document/version/1_67_0.html"/>
      <id>98d145004f4fa1be9ac1a38ccbb782cd2d9cfe7d:document/version/1_67_0.md</id>
      <updated>2018-03-13T00:35:57+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.67.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_67_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_67_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_67_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13307&#34; target=&#34;_blank&#34;&gt;Ticket 13307&lt;/a&gt; &lt;code&gt;operator&amp;amp;&lt;/code&gt; をオーバーロードしていた要素を完全に受け入れられるようになった。この修正を行うために、Boost.Operators を更新してくれた Daniel Frey に感謝する&lt;/li&gt;
&lt;li&gt;C++17 で非推奨になった &lt;code&gt;std::allocator&lt;/code&gt; の使用をやめた&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/7&#34; target=&#34;_blank&#34;&gt;GitHub #7&lt;/a&gt; C++17で非推奨になった&lt;code&gt;std::iterator&lt;/code&gt;の使用をやめた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yoshinari Takaoka</name>
        <email>mumumu@mumumu.org</email>
      </author>
    </entry>
  
    <entry>
      <title>動機 -- Preprocessor : 参考文献へのリンクミスを修正 (#237)</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html"/>
      <id>c614c737a9d5f1384bce0da456e3d2418f975a4e:archive/boost_docs/libs/preprocessor/topics/motivation.md</id>
      <updated>2018-03-12T15:06:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;動機&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++ の関数やテンプレートの引数リストは特別な構文によって組み立てられるもので、C++ の式によって構成したり操作したりできない。
このことによってコードを無駄に反復してしまうことがある。&lt;/p&gt;
&lt;p&gt;例としてBoostの &lt;code&gt;is_function&amp;lt;&amp;gt;&lt;/code&gt; メタ関数の実装を見てみよう。
この実装は、型が関数へのポインタへ変換できるかどうかを調べる &lt;code&gt;is_function_tester()&lt;/code&gt; 多重定義関数を使っている。
引数リストは特別な取扱いがされるため、任意個の引数を持つ関数に直接マッチさせることはできない。
そのかわりに、関数 &lt;code&gt;is_function_tester()&lt;/code&gt; はサポートされる全ての引数の個数ごとに別々に定義されなければならない。
例えば次の通り:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)());&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yes_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_function_tester&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このような種類の繰り返しは総称的なコンポーネントやメタプログラミングのための機能の実装をする際に頻繁に起きる。&lt;/p&gt;
&lt;h2&gt;典型的な解決法&lt;/h2&gt;
&lt;p&gt;典型的には、このような繰り返しは手動で解決される。
手動による繰り返しは生産的ではないが、訓練されていない人間の目にはそのようなコードが読みやすいことがある。&lt;/p&gt;
&lt;p&gt;ほかの解決法としては、繰り返しを生成する外部プログラムを使うことや、高度なエディタなどを使う方法がある。
残念ながら、外部の生成プログラムを使う方法はたくさんの欠点がある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成プログラムを書くのは時間がかかる。(標準的な生成プログラムを使うと楽になるが。)&lt;/li&gt;
&lt;li&gt;生成された C++ コードを直接変更できない。&lt;/li&gt;
&lt;li&gt;生成プログラムを呼ぶのは難しいかもしれない。&lt;/li&gt;
&lt;li&gt;特定の環境においては生成プログラムの呼び出しを自動化するのは難しいかもしれない。
    (呼び出しの自動化は頻繁に変更されるライブラリにとっては魅力的である。)&lt;/li&gt;
&lt;li&gt;生成プログラムの移植や配布は難しいかもしれないし、時間を消費する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プリプロセッサではどうか？&lt;/h2&gt;
&lt;p&gt;C++にはプリプロセッサが付いているので、このような需要に向いていると考えるかもしれない。
実際、プリプロセッサはこのようなケースに極めて妥当である。なぜなら:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プリプロセッサはポータブルである。&lt;/li&gt;
&lt;li&gt;プリプロセッサはコンパイルの一部として自動的に実行される。&lt;/li&gt;
&lt;li&gt;プリプロセッサのコードは直接 C++ のコードに埋め込むことができる。&lt;/li&gt;
&lt;li&gt;コンパイラは通常、プリプロセッサの出力を見ることができるようになっているが、これは生成されたコードをデバグしたりコピーするのに便利である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残念ながらプリプロセッサは非常に低レベルなものであり、繰り返しや再帰的マクロをサポートしていない。
したがってライブラリによるサポートが必要である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;詳細なプリプロセッサの機能と制限については、C++ 標準 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#std&#34;&gt;[Std]&lt;/a&gt; を参照してほしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ふたたび先の例&lt;/h2&gt;
&lt;p&gt;プリプロセッサライブラリを使用すると、 &lt;code&gt;is_function_tester()&lt;/code&gt; は次のように実装できる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define IS_FUNCTION_TESTER(Z, N, _) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class R BOOST_PP_COMMA_IF(N) BOOST_PP_ENUM_PARAMS(N, class A)&amp;gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    yes_type is_function_tester(R (*)(BOOST_PP_ENUM_PARAMS(N, A))); \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_INC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_IS_FUNCTION_TESTER_PARAMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IS_FUNCTION_TESTER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef IS_FUNCTION_TESTER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;サポートする引数の最大個数を変更するには、単に &lt;code&gt;MAX_IS_FUNCTION_TESTER_PARAMS&lt;/code&gt; を変更してコンパイルしなおせばよい。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(C) Copyright &lt;a href=&#34;http://www.housemarque.com&#34; target=&#34;_blank&#34;&gt;Housemarque Oy&lt;/a&gt; 2002&lt;/p&gt;
&lt;p&gt;Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テクニック集 -- Preprocessor : 参考文献へのリンクミスを修正 (#237)</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html"/>
      <id>c614c737a9d5f1384bce0da456e3d2418f975a4e:archive/boost_docs/libs/preprocessor/topics/techniques.md</id>
      <updated>2018-03-12T15:06:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;テクニック集&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;プリプロセッサメタプログラミングの技を例示する。&lt;/p&gt;
&lt;h2&gt;例 - 小さな規模の反復を避けるために局所的なマクロを使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(op) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ..................................... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class T, int n&amp;gt;                                          \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    vec&amp;lt;T, n&amp;gt; operator op ## =(vec&amp;lt;T, n&amp;gt; lhs, const vec&amp;lt;T, n&amp;gt;&amp;amp; rhs) { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        for (int i = 0; i &amp;amp;lt; n; ++i) {                              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            lhs(i) op ## = rhs(i);                                    \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        }                                                             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                                                 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef BOOST_PP_DEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;通常はこのような種類のコードに対して &lt;code&gt;BOOST_PP_DEF&lt;/code&gt; のような標準的なマクロの名前を使って構わない。
なぜならこのマクロは使用される場所のすぐそばで定義されふたたび未定義にされているから。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;継続行が正しく使用されているか確認しやすくするには継続文字(バックスラッシュ文字)の位置を揃えるとよい。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;別の演算子を定義することによってこの例を拡張することができる。
それをする前に、&lt;em&gt;algebraic categories&lt;/em&gt; (文献 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#barton&#34;&gt;[Barton]&lt;/a&gt; で紹介されている)や &lt;em&gt;layered architecture&lt;/em&gt; (例えば文献 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#czarnecki&#34;&gt;[Czarnecki]&lt;/a&gt;) を使うことを考慮せよ。
しかしながら、演算子トークン &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, 等はテンプレートによっては生成できないから、これらのトークンをどこかに書く必要が出て来るだろう。
そのトークンの反復(&lt;em&gt;categorical repetition&lt;/em&gt;)はテンプレートメタプログラミングによって除去できる。&lt;/p&gt;
&lt;h2&gt;例 - マクロ BOOST_PP_EMPTY を局所的なマクロのインスタンス化の際の未使用パラメータとして使用する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(cv) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;class base&amp;gt;           \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    cv() typename implement_subscript_using_begin_subscript&amp;lt;base&amp;gt;::value_type&amp;amp; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    implement_subscript_using_begin_subscript&amp;lt;base&amp;gt;::operator[](index_type i) cv() { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        return base::begin()[i];   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY()&lt;/code&gt; は空に展開されるので未使用パラメータとして使用することができる。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt; の後ろに () を付けないと展開されない。&lt;/p&gt;
&lt;p&gt;関数のようなマクロを呼ぶには () が必要である。&lt;/p&gt;
&lt;h3&gt;警告:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_EMPTY()&lt;/code&gt; を使っている場合、 連結(concatenation)は安全に使用できない。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;時折、1～2行が他の行より極端に長くなることがある。
継続行演算子の位置を全ての行について揃えることを &lt;em&gt;しない&lt;/em&gt; ことによって、可読性をそれほど犠牲にせずに作業を楽にすることができる。&lt;/p&gt;
&lt;h3&gt;小技:&lt;/h3&gt;
&lt;p&gt;プリプロセッサメタプログラミングのためのマクロ識別子をハイライト表示せよ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_DEF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これによって可読性が向上する。&lt;/p&gt;
&lt;h2&gt;例 - 必要なら ## のかわりに BOOST_PP_CAT を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define STATIC_ASSERT(expr) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    enum { BOOST_PP_CAT(static_check_, __LINE__) = (expr) ? 1 : -1 }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    typedef char \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_CAT(static_assert_, __LINE__)[BOOST_PP_CAT(static_check_, __LINE__)] \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;理由:&lt;/h3&gt;
&lt;p&gt;マクロ展開は(層状に)再帰的に適用される。
トークンの結合はマクロ展開を阻害する。
そのためトークンの結合を遅延せねばならないことがしばしば起きる。&lt;/p&gt;
&lt;h2&gt;例 - 必要なら # のかわりに BOOST_PP_STRINGIZE を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define NOTE(str) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    message(__FILE__ &#34;(&#34; BOOST_PP_STRINGIZE(__LINE__) &#34;) : &#34; str) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# pragma NOTE(&#34;TBD!&#34;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;理由:&lt;/h3&gt;
&lt;p&gt;マクロ展開は(層状に)再帰的に適用される。
文字列化はマクロ展開を阻害するため、文字列化を遅延せねばならないことがしばしば起きる。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_ENUM_PARAMS (やその変種)や BOOST_PP_REPEAT や BOOST_PP_COMMA_IF 等を使ってリスト操作の &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;) 繰り返しを除去する&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_same&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_type_list_end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_cons_empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;type_cons&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;T0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_inner_if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type_identity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;make_type_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;BOOST_PP_ENUM_SHIFTED_PARAMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; は再帰もどきを使用する (疑似コード):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT(n, m, p) BOOST_PP_REPEAT ## n(m, p)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT0(m, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT1(m, p) m(0, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT2(m, p) m(0, p) m(1, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT3(m, p) BOOST_PP_REPEAT2(m, p) m(2, p)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_REPEAT4(m, p) BOOST_PP_REPEAT3(m, p) m(3, p)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;上のコードは決して &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の実装などではなく、単に説明のためのものである！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; とその変種は &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使っている。
&lt;code&gt;BOOST_PP_COMMA_IF(I)&lt;/code&gt; は I != 0 のときコンマに展開される。
&lt;code&gt;BOOST_PP_INC(I)&lt;/code&gt; は本質的には &#34;I+1&#34; に展開され、&lt;code&gt;BOOST_PP_DEC(I)&lt;/code&gt; は &#34;I-1&#34; に展開される。&lt;/p&gt;
&lt;h2&gt;例 - ある上限を決めるのではなく、&lt;em&gt;条件付きのマクロ定義&lt;/em&gt; を使って、必要に応じてユーザがコードの繰り返しを制御できるようにする。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# ifndef MAKE_TYPE_LIST_MAX_LENGTH&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define MAKE_TYPE_LIST_MAX_LENGTH 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このようにすれば、ライブラリのコードを変更することなくユーザが &lt;code&gt;make_type_list&lt;/code&gt; を設定することができる。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_REPEAT と &lt;em&gt;トークン照合関数&lt;/em&gt; を使って categorical repetition を除去する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 注意: 私のコンパイラは算術型に関して標準的ではない。&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE(I) ARITHMETIC_TYPE ## I&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE0    bool&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE1    char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE2    signed char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE3    unsigned char&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE4    short&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE5    unsigned short&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE6    int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE7    unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE8    long&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE9    unsigned long&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE10   float&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE11   double&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE12   long double&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARITHMETIC_TYPE_CNT 13&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_DEF(z, I, _) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    catch (ARITHMETIC_TYPE(I) t) {      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        report_typeid(t);               \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        report_value(t);                \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ARITHMETIC_TYPE_CNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_DEF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef BOOST_PP_DEF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;上の例の繰り返しはテンプレートメタプログラミング &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.html#czarnecki&#34;&gt;[Czarnecki]&lt;/a&gt; によっても除去できる。
しかしながら演算子トークンの categorical repetition はテンプレートメタプログラミングによっては完全に除去できない。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_REPEAT を使って&lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt; * &lt;em&gt;n&lt;/em&gt;)の繰り返しを除去する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# ifndef MAX_VEC_ARG_CNT&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define MAX_VEC_ARG_CNT 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# endif&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define ARG_FUN(z, i, _) BOOST_PP_COMMA_IF(i) T a ## i&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define ASSIGN_FUN(z, i, ) (*this)[i] = a ## i;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define DEF_VEC_CTOR_FUN(z, i, _) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    vec(BOOST_PP_REPEAT(i, ARG_FUN, _)) {   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_REPEAT(i, ASSIGN_FUN, _)   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }                                       \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_INC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAX_VEC_ARG_CNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEF_VEC_CTOR_FUN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# undef ARG_FUN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# undef ASSIGN_FUN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# undef DEF_VEC_CTOR_FUN&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; は &lt;em&gt;自動再帰&lt;/em&gt; [訳注: ???]を起こさせるような特別な方法で実装されている。&lt;/p&gt;
&lt;h2&gt;例 - BOOST_PP_IF を使って分岐を実現する。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define COMMA_IF(c) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_IF(c, BOOST_PP_COMMA, BOOST_PP_EMPTY)() \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_PP_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_IF&lt;/code&gt; を使えば &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使ったリストの生成を簡単にできる。&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;THEN&lt;/em&gt; と &lt;em&gt;ELSE&lt;/em&gt; の部分(第2、第3引数)はマクロである必要はない。
しかし、もしそれらの一方が関数的なマクロであって、それを条件付きで展開したいのであれば、もう一方も関数的マクロにしなければならない。
その目的のために &lt;code&gt;BOOST_PP_IDENTITY&lt;/code&gt; を使うことができる。
下の例 (Aleksey Gurtovoy による) を見よ:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define NUMBERED_EXPRESSION(i, x) &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_IF(                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        i,                                  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_IDENTITY(x ## i)           \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_EMPTY                      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )()                                     \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;注意:&lt;/h3&gt;
&lt;p&gt;上の &lt;code&gt;COMMA_IF&lt;/code&gt; の例のように、&lt;code&gt;BOOST_PP_IF&lt;/code&gt; の結果が呼ばれても &lt;em&gt;THEN&lt;/em&gt; や &lt;em&gt;ELSE&lt;/em&gt; パラメータが呼ばれないことがある。
もしパラメータも呼ばれるなら、&lt;code&gt;BOOST_PP_IF&lt;/code&gt; が適切に展開される前に &lt;code&gt;BOOST_PP_EMPTY&lt;/code&gt; が空に展開されるため、そのコードは正しく展開されなくなってしまう。
[訳注: ???]&lt;/p&gt;
&lt;h3&gt;仕組み:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;BOOST_PP_IF&lt;/code&gt; は全ての繰り返し範囲について定義されている(疑似コード):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF(c, THEN, ELSE) BOOST_PP_IF ## c(THEN, ELSE)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF0(THEN, ELSE) ELSE&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF1(THEN, ELSE) THEN&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;# define BOOST_PP_IF1(THEN, ELSE) THEN&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;例: 算術、論理、比較演算を使う。&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;# define SPECIAL_NUMBERED_LIST(n, i, elem, special) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_ASSERT_MSG(                      \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_LESS(i, n),                  \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        bad params for SPECIAL_NUMBERED_LIST! \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_ENUM_PARAMS(i, elem)             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_COMMA_IF(i) special              \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_REPEAT(                          \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_SUB(BOOST_PP_DEC(n), i),     \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        SPECIAL_NUMBERED_LIST_HELPER,         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        (elem, i)                             \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                         \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;# define SPECIAL_NUMBERED_LIST_HELPER(z, i, elem_base) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ,                                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    BOOST_PP_CAT(                                \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_TUPLE_ELEM(2, 0, elem_base),    \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        BOOST_PP_ADD(                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            i,                                   \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            BOOST_PP_TUPLE_ELEM(2, 1, elem_base) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        )                                        \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    )                                            \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SPECIAL_NUMBERED_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(C) Copyright &lt;a href=&#34;http://www.housemarque.com&#34; target=&#34;_blank&#34;&gt;Housemarque Oy&lt;/a&gt; 2002&lt;/p&gt;
&lt;p&gt;Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>