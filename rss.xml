<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2023-11-07T14:32:29.286919</updated>
  <id>119b123a-749a-4fc8-a14b-bb7c94dc3dba</id>

  
    <entry>
      <title>boostjpを編集するには -- Merge pull request #567 from ROCKTAKEY/fix-member-url</title>
      <link href="https://boostjp.github.io/editors_doc/start_editing.html"/>
      <id>2c6b0981635c0252c046c0792da798ef37f1b590:editors_doc/start_editing.md</id>
      <updated>2023-11-07T01:22:41+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;boostjpを編集するには&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本boostjpサイトのコンテンツは、GitHubリポジトリにあるMarkdown形式のプレーンテキストで行います。&lt;/p&gt;
&lt;p&gt;boostjpサイトのGitHubリポジトリは、以下になります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/boostjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、boostjpサイト上に掲載する画像ファイルのようなリソースも、GitHubリポジトリで管理しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/image&#34; target=&#34;_blank&#34;&gt;画像ファイルリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集権限を得るには&lt;/h2&gt;
&lt;p&gt;編集権限は現在のコミッタに与えてもらうか、pull requestしてコミッタに修正を取り込んでもらうかする必要があります。&lt;/p&gt;
&lt;p&gt;旧boostjpサイトで編集を行っていた方には、優先的に編集権限をお渡しします。&lt;/p&gt;
&lt;p&gt;以下のページに載っているコミッタの人たちの誰かにコンタクトをとってもらうか、boostjp/siteリポジトリのIssue報告として、編集権限の申請を行ってください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/orgs/boostjp/people&#34; target=&#34;_blank&#34;&gt;boostjp members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コミッタから直接お誘いに行く場合もありますので、快く引き受けていただければ幸いです。&lt;/p&gt;
&lt;p&gt;boostjpサイトの編集に慣れていない方は、pull requestからでもぜひ始めてみてください。これは、編集権限を得るための審査ではなく、編集の練習のためだと考えてください。pull requestを何回かいただければ、継続して活動していただけるものと判断し、編集権限をお渡しします。&lt;/p&gt;
&lt;h2&gt;Markdown形式による編集方法&lt;/h2&gt;
&lt;p&gt;boostjpサイトは、Markdown(.md)形式でリファレンスを記述します。&lt;/p&gt;
&lt;p&gt;Markdownは、GitHubサービス上でドキュメントを記述するフォーマットとして広く使用されている形式です。&lt;/p&gt;
&lt;p&gt;Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d&#34; target=&#34;_blank&#34;&gt;Markdown記法 チートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojika17.com/2013/01/starting-markdown.html&#34; target=&#34;_blank&#34;&gt;文章作成やメモ書きにも便利、Markdown記法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.2310.net/archives/6&#34; target=&#34;_blank&#34;&gt;Markdown文法の全訳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown形式では、htmlのタグも併用できますが、boostjpサイトでは積極的にはhtmlタグを使用しない方針です。できるだけ、Markdown形式でできる範囲内で解決するようにしてください。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boostjpを編集するには -- boostjpのメンバーへのリンクのミスを修正</title>
      <link href="https://boostjp.github.io/editors_doc/start_editing.html"/>
      <id>5b7be4df3346979f242b50973fa621fe8780048b:editors_doc/start_editing.md</id>
      <updated>2023-11-07T00:31:12+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;boostjpを編集するには&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本boostjpサイトのコンテンツは、GitHubリポジトリにあるMarkdown形式のプレーンテキストで行います。&lt;/p&gt;
&lt;p&gt;boostjpサイトのGitHubリポジトリは、以下になります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/boostjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、boostjpサイト上に掲載する画像ファイルのようなリソースも、GitHubリポジトリで管理しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/image&#34; target=&#34;_blank&#34;&gt;画像ファイルリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集権限を得るには&lt;/h2&gt;
&lt;p&gt;編集権限は現在のコミッタに与えてもらうか、pull requestしてコミッタに修正を取り込んでもらうかする必要があります。&lt;/p&gt;
&lt;p&gt;旧boostjpサイトで編集を行っていた方には、優先的に編集権限をお渡しします。&lt;/p&gt;
&lt;p&gt;以下のページに載っているコミッタの人たちの誰かにコンタクトをとってもらうか、boostjp/siteリポジトリのIssue報告として、編集権限の申請を行ってください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/orgs/boostjp/people&#34; target=&#34;_blank&#34;&gt;boostjp members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コミッタから直接お誘いに行く場合もありますので、快く引き受けていただければ幸いです。&lt;/p&gt;
&lt;p&gt;boostjpサイトの編集に慣れていない方は、pull requestからでもぜひ始めてみてください。これは、編集権限を得るための審査ではなく、編集の練習のためだと考えてください。pull requestを何回かいただければ、継続して活動していただけるものと判断し、編集権限をお渡しします。&lt;/p&gt;
&lt;h2&gt;Markdown形式による編集方法&lt;/h2&gt;
&lt;p&gt;boostjpサイトは、Markdown(.md)形式でリファレンスを記述します。&lt;/p&gt;
&lt;p&gt;Markdownは、GitHubサービス上でドキュメントを記述するフォーマットとして広く使用されている形式です。&lt;/p&gt;
&lt;p&gt;Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d&#34; target=&#34;_blank&#34;&gt;Markdown記法 チートシート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kojika17.com/2013/01/starting-markdown.html&#34; target=&#34;_blank&#34;&gt;文章作成やメモ書きにも便利、Markdown記法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.2310.net/archives/6&#34; target=&#34;_blank&#34;&gt;Markdown文法の全訳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown形式では、htmlのタグも併用できますが、boostjpサイトでは積極的にはhtmlタグを使用しない方針です。できるだけ、Markdown形式でできる範囲内で解決するようにしてください。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.83.0リリースノート -- 1.83.0 : Unorderedのパッチを追加</title>
      <link href="https://boostjp.github.io/document/version/1_83_0.html"/>
      <id>cd1c5f8af25a2930ad82a1f083edbc072d4a26d9:document/version/1_83_0.md</id>
      <updated>2023-08-31T02:53:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.83.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_83_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_83_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_83_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_83_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;既知の問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JSON&lt;ul&gt;
&lt;li&gt;Windows ARM環境において、組み込み命令 (intrinsics) の欠如によりコンパイルが失敗する場合がある。&lt;a href=&#34;https://github.com/boostorg/json/issues/926&#34; target=&#34;_blank&#34;&gt;GitHub #926&lt;/a&gt;と&lt;a href=&#34;https://github.com/boostorg/json/issues/927&#34; target=&#34;_blank&#34;&gt;GitHub #927&lt;/a&gt;、および&lt;a href=&#34;https://github.com/boostorg/json/commit/c4ce8509d015a0b75cfa9d36609b8409821a9c86.patch&#34; target=&#34;_blank&#34;&gt;パッチ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unordered&lt;ul&gt;
&lt;li&gt;コピー代入演算子において、存在しない要素を誤って削除してしまう問題を修正。&lt;a href=&#34;https://github.com/boostorg/unordered/issues/205&#34; target=&#34;_blank&#34;&gt;GitHub #205&lt;/a&gt;、および&lt;a href=&#34;https://github.com/boostorg/website/blob/482eff5d7e22db9b3cca0e89837e6dc9b3bde431/patches/1_83_0/0001-unordered-fix-copy-assign.patch&#34; target=&#34;_blank&#34;&gt;パッチ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/compat&#34; target=&#34;_blank&#34;&gt;Compat&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;後の標準C++に追加された標準コンポーネントをC++11実装した互換性ライブラリ (作者Peter Dimov氏とコントリビューターたち)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#timer&#34;&gt;Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなC++11クラス&lt;code&gt;boost::anys::unique_any&lt;/code&gt;を追加。held typeからのコピー or ムーブ構築を必要としない&lt;code&gt;boost::any&lt;/code&gt; (&lt;code&gt;std::any&lt;/code&gt;) の代替クラス&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickbookに移植し、Doxygenコメントをコードで使用するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/62&#34; target=&#34;_blank&#34;&gt;GitHub #62&lt;/a&gt; &lt;code&gt;const&lt;/code&gt;修飾した&lt;code&gt;atomic_ref&lt;/code&gt;のコンパイルエラーを修正。const`修飾されたアトミックオブジェクトであっても、読み書き可能なメモリに存在しなければならないことに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#chrono&#34; id=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非推奨となっていたBoost.Ratioの使用部分を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;latch.hpp&lt;/code&gt;を追加。&lt;code&gt;std::latch&lt;/code&gt;の実装 (Christian Mazakas氏の貢献に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_lock.hpp&lt;/code&gt;を追加。&lt;code&gt;std::shared_lock&lt;/code&gt;の (部分的な) 実装 (Christian Mazakas氏の貢献に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::core::type_name&lt;/code&gt;に不完全型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/bit.hpp&lt;/code&gt;のビット操作関数を最新のMSVCで&lt;code&gt;constexpr&lt;/code&gt;に対応 (VS2019 update 5以降)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/bit.hpp&lt;/code&gt;に&lt;code&gt;boost::core::byteswap&lt;/code&gt; (C++23&lt;code&gt;std::byteswap&lt;/code&gt;の実装) を追加&lt;/li&gt;
&lt;li&gt;yieldのプリミティブ&lt;code&gt;sp_thread_pause&lt;/code&gt;, &lt;code&gt;sp_thread_yield&lt;/code&gt;, &lt;code&gt;sp_thread_sleep&lt;/code&gt;を、SmartPtrライブラリの実装詳細から&lt;code&gt;boost/core/yield_primitives.hpp&lt;/code&gt;に移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; glibc 2.36+でのテスト失敗を修正。&lt;a href=&#34;https://github.com/sgn&#34; target=&#34;_blank&#34;&gt;Đoàn Trần Công Danh&lt;/a&gt;のバグ報告に感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;パスで識別されるディレクトリエントリの内部キャッシュファイルの状態を更新する &lt;code&gt;directory_entry::refresh&lt;/code&gt; メンバ関数を追加&lt;/li&gt;
&lt;li&gt;[v4] &lt;code&gt;directory_entry&lt;/code&gt; のコンストラクタや変更関数でパスを初期化したり変更したりすると、自動的に &lt;code&gt;refresh&lt;/code&gt; が呼び出されるようになった。これにより、v3以前やv3ではファイルステータスのファイルシステムへの問い合わせが失敗した場合 (ファイルが存在しない場合など)、表示されなかったエラーが発生する可能性がある。この新しい動作は&lt;code&gt;std::filesystem&lt;/code&gt;に似ている&lt;/li&gt;
&lt;li&gt;v4 &lt;code&gt;file_status&lt;/code&gt; パラメータを受け取る &lt;code&gt;directory_entry&lt;/code&gt; コンストラクタとメソッドが削除された。これらの引数を取り除き、 &lt;code&gt;directory_entry&lt;/code&gt; が内部的に &lt;code&gt;refresh&lt;/code&gt; を呼び出すようにすることを推奨する&lt;/li&gt;
&lt;li&gt;std::filesystem と同様に、ファイルのファイルタイプをチェックするための &lt;code&gt;directory_entry&lt;/code&gt; のメンバ関数を追加した&lt;/li&gt;
&lt;li&gt;ファイルの状態を検査する関数を追加した： &lt;code&gt;is_block_file&lt;/code&gt;, &lt;code&gt;is_character_file&lt;/code&gt;, &lt;code&gt;is_fifo&lt;/code&gt;, &lt;code&gt;is_socket&lt;/code&gt; および &lt;code&gt;is_reparse_file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt; は、ファイルシステムのイテレート処理中に取得したファイルタイプに関する情報を再利用するようになった。これにより、パフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/280&#34; target=&#34;_blank&#34;&gt;GitHub #280&lt;/a&gt; 標準ライブラリのファイルストリームがムーブ可能な場合、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt; で定義されたファイルストリームもムーブ可能になった&lt;/li&gt;
&lt;li&gt;最初の引数に &lt;code&gt;path&lt;/code&gt; をとる移植可能な &lt;code&gt;fopen&lt;/code&gt; オーバーロードを持つ新しいヘッダー &lt;code&gt;boost/filesystem/cstdio.hpp&lt;/code&gt; を追加した。この関数は &lt;code&gt;std::fopen&lt;/code&gt; と等価だが、Windows ではパスにネイティブのワイド文字エンコーディングを使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/285&#34; target=&#34;_blank&#34;&gt;GitHub #285&lt;/a&gt; 汎用的な &lt;code&gt;path&lt;/code&gt; 比較演算子がより制限されるようになり、ユーザーのコードに &lt;code&gt;using namespace boost::filesystem;&lt;/code&gt; ディレクティブが含まれている場合に、潜在的な曖昧さを回避できるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; イテレータからの &lt;code&gt;path&lt;/code&gt; コンストラクタが &lt;code&gt;std::initializer_list&lt;/code&gt; 引数を取る関数のオーバーロードと干渉する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/286&#34; target=&#34;_blank&#34;&gt;GitHub #286&lt;/a&gt; Windows で、directory iteratorを作成する際に様々なファイルシステムから返されるエラーに対する回避策を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/290&#34; target=&#34;_blank&#34;&gt;GitHub #290&lt;/a&gt; Windows で、ファイル時間の照会に必要なアクセス権を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::flyweight&lt;/code&gt;にスマートポインタ構文 (元の値への間接参照を行う&lt;code&gt;operator*&lt;/code&gt;と&lt;code&gt;operator-&amp;gt;&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/12&#34; target=&#34;_blank&#34;&gt;GitHub #12&lt;/a&gt; &lt;code&gt;simple_locking&lt;/code&gt;で使われるミューテックスが再帰的でなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1140&#34; target=&#34;_blank&#34;&gt;GitHub #1140&lt;/a&gt; 依存関係を削除し、いくつかの箇所で boost を std に置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1154&#34; target=&#34;_blank&#34;&gt;GitHub #1154&lt;/a&gt; 不足していたヘッダを追加し、すべてのヘッダがBoostのポリシーに従って独立してコンパイルできるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1157&#34; target=&#34;_blank&#34;&gt;GitHub #1157&lt;/a&gt; &lt;code&gt;calculate_point_order&lt;/code&gt;で&lt;code&gt;const Ring&lt;/code&gt;のコンセプトをチェックする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決済みの問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1100&#34; target=&#34;_blank&#34;&gt;GitHub #1100&lt;/a&gt; &lt;code&gt;union&lt;/code&gt;の修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1139&#34; target=&#34;_blank&#34;&gt;GitHub #1139&lt;/a&gt; 異なるジオメトリタイプの修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1158&#34; target=&#34;_blank&#34;&gt;GitHub #1158&lt;/a&gt; 凸包の修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1161&#34; target=&#34;_blank&#34;&gt;GitHub #1161&lt;/a&gt; 頂点に極を持つジオメトリのアルゴリズム内の修正1&lt;/li&gt;
&lt;li&gt;様々なエラーと警告の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_iterator&lt;/code&gt; 型特性を追加し、その型がイテレータ型として適格かどうかをテストできるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; &lt;code&gt;filter_iterator&lt;/code&gt; は、適応されたイテレータと関数オブジェクトのムーブ構築をサポートするようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリはメモリ割り当てに失敗した場合を除き、&lt;code&gt;system_error&lt;/code&gt;を例外送出するようにした。ただし、メモリ割り当てに失敗した場合は &lt;code&gt;std::bad_alloc&lt;/code&gt; が送出される&lt;/li&gt;
&lt;li&gt;シリアライズの動作を &lt;code&gt;serialize_options&lt;/code&gt; で変更できるようになった&lt;/li&gt;
&lt;li&gt;文脈変換&lt;/li&gt;
&lt;li&gt;より正確な数値解析を行うためのパーサーオプション&lt;/li&gt;
&lt;li&gt;ストリーム &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; で &lt;code&gt;parse_options&lt;/code&gt; をサポートした&lt;/li&gt;
&lt;li&gt;JSON リテラルの &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; を許可するパーサーオプション&lt;/li&gt;
&lt;li&gt;数値のパースではなく、数値の検証のみを行うパーサーモード&lt;/li&gt;
&lt;li&gt;指数が &lt;code&gt;INT_MAX&lt;/code&gt; より大きい数値はパーサーに受け入れられ、無限大として扱われる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;メンバ関数を強い保証をするよう修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/range.hpp&lt;/code&gt;がインクルードされている場合の &lt;code&gt;end&lt;/code&gt; 呼び出しのあいまいさを修正した&lt;/li&gt;
&lt;li&gt;ASan の失敗を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error::size_mismatch&lt;/code&gt; のエラーメッセージを修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 要素を持つタプルへの変換を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#locale&#34; id=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GNU gettextの動作にマッチするメッセージカタログファイルにおいて、ビット演算子/バイナリ演算子(左/右シフト、バイナリand/or/xor/not)がサポートされなくなった&lt;/li&gt;
&lt;li&gt;Windows の Std バックエンドは、要求されたロケールが存在しない場合、システムロケールの代わりにクラシックロケールを使用するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localization_backend_manager::get&lt;/code&gt;は非推奨。代わりにジェネレーターを使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_utf&lt;/code&gt;/&lt;code&gt;from_utf&lt;/code&gt;/&lt;code&gt;between&lt;/code&gt; に代わる新しいコンバータークラスを追加した&lt;/li&gt;
&lt;li&gt;フォーマット文字列の無効なインデックスに関する未定義動作を修正した&lt;/li&gt;
&lt;li&gt;ICU のない Windows で iso-2022-jp などへの UTF 変換を修正した&lt;/li&gt;
&lt;li&gt;複数形翻訳のカウントパラメーターとして &lt;code&gt;long long&lt;/code&gt; を使用するようにした&lt;/li&gt;
&lt;li&gt;いくつかのクラスのムーブと例外指定を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/209&#34; target=&#34;_blank&#34;&gt;GitHub #209&lt;/a&gt; &lt;code&gt;text_file_backend&lt;/code&gt; で、フォーマットされたログレコードのサイズが &lt;code&gt;rotation_size&lt;/code&gt; の制限を超えた場合に無限ループになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/921&#34; target=&#34;_blank&#34;&gt;GitHub #921&lt;/a&gt; Daubechiesスケーリング関数のフーリエ変換の数値評価を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/946&#34; target=&#34;_blank&#34;&gt;GitHub #946&lt;/a&gt; 統計分布に &lt;code&gt;logcdf&lt;/code&gt; 関数を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/978&#34; target=&#34;_blank&#34;&gt;GitHub #978&lt;/a&gt; C++23 の &lt;code&gt;&amp;lt;stdfloat&amp;gt;&lt;/code&gt; 型のサポートを追加した&lt;/li&gt;
&lt;li&gt;様々な &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; 警告を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/968&#34; target=&#34;_blank&#34;&gt;GitHub #968&lt;/a&gt; 表現不可能な数値の &lt;code&gt;round&lt;/code&gt; と &lt;code&gt;trunc&lt;/code&gt; 関数を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/976&#34; target=&#34;_blank&#34;&gt;GitHub #976&lt;/a&gt; F 分布の最頻値の計算を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/977&#34; target=&#34;_blank&#34;&gt;GitHub #977&lt;/a&gt; ベータ分布のオーバーフローを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/987&#34; target=&#34;_blank&#34;&gt;GitHub #987&lt;/a&gt; 超幾何分布のオーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/997&#34; target=&#34;_blank&#34;&gt;GitHub #997&lt;/a&gt; 中央値が 0 でない場合の絶対偏差の中央値の計算を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_from_sequence&lt;/code&gt;, &lt;code&gt;mp_iota&lt;/code&gt;, &lt;code&gt;mp_iota_c&lt;/code&gt; に offset/from パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_value&lt;/code&gt;, &lt;code&gt;mp_list_v&lt;/code&gt;, &lt;code&gt;mp_rename_v&lt;/code&gt;, &lt;code&gt;mp_is_value_list&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;boost/mp11/list.hpp&amp;gt;&lt;/code&gt;のプリミティブに値リストのサポートを追加&lt;/li&gt;
&lt;li&gt;値リストのサポートを &lt;code&gt;mp_repeat&lt;/code&gt;、&lt;code&gt;mp_fill&lt;/code&gt;、&lt;code&gt;mp_at&lt;/code&gt;、&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_take&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;、&lt;code&gt;mp_drop&lt;/code&gt;、&lt;code&gt;mp_insert&lt;/code&gt;、&lt;code&gt;mp_erase&lt;/code&gt; に追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; non-unique ordered indicesのRange版 &lt;code&gt;insert&lt;/code&gt; を更新し、等価な要素の挿入順序を保持するようにした&lt;/li&gt;
&lt;li&gt;シリアライズで &lt;code&gt;multi_index_container&lt;/code&gt; のサイズの保存と読み込みに &lt;code&gt;unsigned long&lt;/code&gt; ではなく &lt;code&gt;std::size_t&lt;/code&gt; を使用するようになった (LLP64 データモデルでは &lt;code&gt;unsigned long&lt;/code&gt; は &lt;code&gt;std::size_t&lt;/code&gt; より小さい)。この変更にともない、 &lt;code&gt;multi_index_container&lt;/code&gt; のシリアライズバージョンが 3 から 4 に変更された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/542&#34; target=&#34;_blank&#34;&gt;GitHub #542&lt;/a&gt; rational adapter divisionのバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/552&#34; target=&#34;_blank&#34;&gt;GitHub #552&lt;/a&gt; マルチスレッド環境でのグローバルプレッションの変更の処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/555&#34; target=&#34;_blank&#34;&gt;GitHub #555&lt;/a&gt; &lt;code&gt;cpp_int::eval_convert_to&lt;/code&gt; の `noexcept 指定を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;データを生成する &lt;code&gt;SELECT&lt;/code&gt; ステートメントと &lt;code&gt;OUT&lt;/code&gt; パラメータを持つプロシージャを含むストアドプロシージャが完全にサポートされた。これにより、セミコロンで区切られた複数のステートメントを 1 回の呼び出しで実行できるようになった&lt;/li&gt;
&lt;li&gt;静的に型付けされたインターフェースが追加され、Boost.Describe構造体とタプルを使用して、クエリ結果をユーザーが提供した型に解析できるようになった&lt;/li&gt;
&lt;li&gt;テキストクエリとプリペアドステートメントは、新しい &lt;code&gt;connection::execute&lt;/code&gt; 関数と &lt;code&gt;connection::start_execution&lt;/code&gt; 関数（とその非同期関数）を使って実行できるようになった。これらは &lt;code&gt;connection::query&lt;/code&gt;、&lt;code&gt;connection::execute_statement&lt;/code&gt;、&lt;code&gt;connection::start_query&lt;/code&gt;、&lt;code&gt;connection::start_statement_execution&lt;/code&gt; の上位関数である。新しい関数により、静的インターフェースのような新しい機能にアクセスできるようになった&lt;/li&gt;
&lt;li&gt;ビルド時間を短縮するために、独立したコンパイルモードが追加された。ソースは &lt;code&gt;boost/mysql/src.hpp&lt;/code&gt; に含まれており、正確に1つの翻訳ユニットに含める必要がある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement::bind&lt;/code&gt; と &lt;code&gt;connection::execute&lt;/code&gt; を使用して、イテレータペアでパラメータを指定してプリペアドステートメントを実行できるようになった。これにより、コンパイル時にパラメータの数や型がわからない場合に使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; 型、&lt;code&gt;std::optional&lt;/code&gt; 型、&lt;code&gt;boost::optional&lt;/code&gt; 型のパラメータを使用できるようになった&lt;/li&gt;
&lt;li&gt;エラーコードを追加し、MySQL v8.0.33 および MariaDB v11.0 との互換性を確認した&lt;/li&gt;
&lt;li&gt;Windows の &lt;code&gt;min()&lt;/code&gt; と &lt;code&gt;max()&lt;/code&gt; マクロの潜在的な問題を修正した&lt;/li&gt;
&lt;li&gt;すべてのアサーションが Boost.Assert を使用するようになった。&lt;/li&gt;
&lt;li&gt;すべての例外は Boost.ThrowException によってスローされるようになった&lt;/li&gt;
&lt;li&gt;即時完了が I/O object executorを通して正しくディスパッチされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#ratio&#34; id=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの &lt;code&gt;BOOST_RATIO_VERSION&lt;/code&gt; を 2 に変更した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_RATIO_EXTENSIONS&lt;/code&gt; のサポートは非推奨となり、Boost.Ratio が標準の &lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt; ヘッダとして実装されたときに削除される予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CIシステムに古いプラットフォームを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/353&#34; target=&#34;_blank&#34;&gt;GitHub #353&lt;/a&gt; &lt;code&gt;uintptr_t&lt;/code&gt; の取り扱いを修正し、32 ビットシステムでも移植できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/375&#34; target=&#34;_blank&#34;&gt;GitHub #375&lt;/a&gt; &lt;code&gt;Wdeprecated-copy-dtor&lt;/code&gt; と &lt;code&gt;-Wdeprecated-copy-with-user-provided-dtor&lt;/code&gt; の警告を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/382&#34; target=&#34;_blank&#34;&gt;GitHub #382&lt;/a&gt; C++23 &lt;code&gt;&amp;lt;stdfloat&amp;gt;&lt;/code&gt; 型の &lt;code&gt;check_is_close&lt;/code&gt; の処理を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#timer&#34; id=&#34;timer&#34;&gt;Timer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Chrono、Boost.Systemなどへの依存を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_TIMER_ENABLE_DEPRECATED&lt;/code&gt; が定義されていない限り、非推奨のヘッダーを無効にするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;オープンアドレッシングに基づく高速でスレッドセーフなハッシュマップ &lt;code&gt;boost::concurrent_flat_map&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;オープンアドレッシングコンテナのイテレート処理を高速化&lt;/li&gt;
&lt;li&gt;オープンアドレッシングコンテナにおいて、以前はなにも返さなかった &lt;code&gt;erase(iterator)&lt;/code&gt; が、次の要素へのイテレータに変換可能なプロキシオブジェクトを返すようになった。これにより、返されたプロキシが使用されない場合に、パフォーマンス上のペナルティを負うことなく、典型的な &lt;code&gt;it = c.erase(it)&lt;/code&gt; イディオムを使用できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/757&#34; target=&#34;_blank&#34;&gt;GitHub #757&lt;/a&gt; &lt;code&gt;parse_query&lt;/code&gt;で&lt;code&gt;string_view&lt;/code&gt;を作り直さないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/756&#34; target=&#34;_blank&#34;&gt;GitHub #756&lt;/a&gt; &lt;code&gt;url_view&lt;/code&gt;/&lt;code&gt;string_view&lt;/code&gt;のコンストラクタが、&lt;code&gt;url_view_base&lt;/code&gt;を要求するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/711&#34; target=&#34;_blank&#34;&gt;GitHub #711&lt;/a&gt; &lt;code&gt;IP-literal&lt;/code&gt;が&lt;code&gt;IPv6addrz&lt;/code&gt;になれるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; AVX ターゲット用に生成される x86 コードを改善。SSE3 ターゲットでの &lt;code&gt;lddqu&lt;/code&gt; 命令の使用を削除した。これは Intel NetBurst CPU ではパフォーマンスが低下するが、Skylake 以降の CPU では最適である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uses_double_storage()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.10.1をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.83.0リリースノート -- 1.83 : 既知の問題を追加</title>
      <link href="https://boostjp.github.io/document/version/1_83_0.html"/>
      <id>403bc7b71df825a1fe8dff8795af3fd8d8876939:document/version/1_83_0.md</id>
      <updated>2023-08-12T11:27:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.83.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_83_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_83_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_83_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_83_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;既知の問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JSON&lt;ul&gt;
&lt;li&gt;Windows ARM環境において、組み込み命令 (intrinsics) の欠如によりコンパイルが失敗する場合がある。&lt;a href=&#34;https://github.com/boostorg/json/issues/926&#34; target=&#34;_blank&#34;&gt;GitHub #926&lt;/a&gt;と&lt;a href=&#34;https://github.com/boostorg/json/issues/927&#34; target=&#34;_blank&#34;&gt;GitHub #927&lt;/a&gt;、および&lt;a href=&#34;https://github.com/boostorg/json/commit/c4ce8509d015a0b75cfa9d36609b8409821a9c86.patch&#34; target=&#34;_blank&#34;&gt;パッチ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/compat&#34; target=&#34;_blank&#34;&gt;Compat&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;後の標準C++に追加された標準コンポーネントをC++11実装した互換性ライブラリ (作者Peter Dimov氏とコントリビューターたち)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#timer&#34;&gt;Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなC++11クラス&lt;code&gt;boost::anys::unique_any&lt;/code&gt;を追加。held typeからのコピー or ムーブ構築を必要としない&lt;code&gt;boost::any&lt;/code&gt; (&lt;code&gt;std::any&lt;/code&gt;) の代替クラス&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickbookに移植し、Doxygenコメントをコードで使用するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/62&#34; target=&#34;_blank&#34;&gt;GitHub #62&lt;/a&gt; &lt;code&gt;const&lt;/code&gt;修飾した&lt;code&gt;atomic_ref&lt;/code&gt;のコンパイルエラーを修正。const`修飾されたアトミックオブジェクトであっても、読み書き可能なメモリに存在しなければならないことに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#chrono&#34; id=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非推奨となっていたBoost.Ratioの使用部分を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;latch.hpp&lt;/code&gt;を追加。&lt;code&gt;std::latch&lt;/code&gt;の実装 (Christian Mazakas氏の貢献に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_lock.hpp&lt;/code&gt;を追加。&lt;code&gt;std::shared_lock&lt;/code&gt;の (部分的な) 実装 (Christian Mazakas氏の貢献に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::core::type_name&lt;/code&gt;に不完全型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/bit.hpp&lt;/code&gt;のビット操作関数を最新のMSVCで&lt;code&gt;constexpr&lt;/code&gt;に対応 (VS2019 update 5以降)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/bit.hpp&lt;/code&gt;に&lt;code&gt;boost::core::byteswap&lt;/code&gt; (C++23&lt;code&gt;std::byteswap&lt;/code&gt;の実装) を追加&lt;/li&gt;
&lt;li&gt;yieldのプリミティブ&lt;code&gt;sp_thread_pause&lt;/code&gt;, &lt;code&gt;sp_thread_yield&lt;/code&gt;, &lt;code&gt;sp_thread_sleep&lt;/code&gt;を、SmartPtrライブラリの実装詳細から&lt;code&gt;boost/core/yield_primitives.hpp&lt;/code&gt;に移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; glibc 2.36+でのテスト失敗を修正。&lt;a href=&#34;https://github.com/sgn&#34; target=&#34;_blank&#34;&gt;Đoàn Trần Công Danh&lt;/a&gt;のバグ報告に感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;パスで識別されるディレクトリエントリの内部キャッシュファイルの状態を更新する &lt;code&gt;directory_entry::refresh&lt;/code&gt; メンバ関数を追加&lt;/li&gt;
&lt;li&gt;[v4] &lt;code&gt;directory_entry&lt;/code&gt; のコンストラクタや変更関数でパスを初期化したり変更したりすると、自動的に &lt;code&gt;refresh&lt;/code&gt; が呼び出されるようになった。これにより、v3以前やv3ではファイルステータスのファイルシステムへの問い合わせが失敗した場合 (ファイルが存在しない場合など)、表示されなかったエラーが発生する可能性がある。この新しい動作は&lt;code&gt;std::filesystem&lt;/code&gt;に似ている&lt;/li&gt;
&lt;li&gt;v4 &lt;code&gt;file_status&lt;/code&gt; パラメータを受け取る &lt;code&gt;directory_entry&lt;/code&gt; コンストラクタとメソッドが削除された。これらの引数を取り除き、 &lt;code&gt;directory_entry&lt;/code&gt; が内部的に &lt;code&gt;refresh&lt;/code&gt; を呼び出すようにすることを推奨する&lt;/li&gt;
&lt;li&gt;std::filesystem と同様に、ファイルのファイルタイプをチェックするための &lt;code&gt;directory_entry&lt;/code&gt; のメンバ関数を追加した&lt;/li&gt;
&lt;li&gt;ファイルの状態を検査する関数を追加した： &lt;code&gt;is_block_file&lt;/code&gt;, &lt;code&gt;is_character_file&lt;/code&gt;, &lt;code&gt;is_fifo&lt;/code&gt;, &lt;code&gt;is_socket&lt;/code&gt; および &lt;code&gt;is_reparse_file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt; は、ファイルシステムのイテレート処理中に取得したファイルタイプに関する情報を再利用するようになった。これにより、パフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/280&#34; target=&#34;_blank&#34;&gt;GitHub #280&lt;/a&gt; 標準ライブラリのファイルストリームがムーブ可能な場合、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt; で定義されたファイルストリームもムーブ可能になった&lt;/li&gt;
&lt;li&gt;最初の引数に &lt;code&gt;path&lt;/code&gt; をとる移植可能な &lt;code&gt;fopen&lt;/code&gt; オーバーロードを持つ新しいヘッダー &lt;code&gt;boost/filesystem/cstdio.hpp&lt;/code&gt; を追加した。この関数は &lt;code&gt;std::fopen&lt;/code&gt; と等価だが、Windows ではパスにネイティブのワイド文字エンコーディングを使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/285&#34; target=&#34;_blank&#34;&gt;GitHub #285&lt;/a&gt; 汎用的な &lt;code&gt;path&lt;/code&gt; 比較演算子がより制限されるようになり、ユーザーのコードに &lt;code&gt;using namespace boost::filesystem;&lt;/code&gt; ディレクティブが含まれている場合に、潜在的な曖昧さを回避できるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; イテレータからの &lt;code&gt;path&lt;/code&gt; コンストラクタが &lt;code&gt;std::initializer_list&lt;/code&gt; 引数を取る関数のオーバーロードと干渉する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/286&#34; target=&#34;_blank&#34;&gt;GitHub #286&lt;/a&gt; Windows で、directory iteratorを作成する際に様々なファイルシステムから返されるエラーに対する回避策を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/290&#34; target=&#34;_blank&#34;&gt;GitHub #290&lt;/a&gt; Windows で、ファイル時間の照会に必要なアクセス権を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::flyweight&lt;/code&gt;にスマートポインタ構文 (元の値への間接参照を行う&lt;code&gt;operator*&lt;/code&gt;と&lt;code&gt;operator-&amp;gt;&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/12&#34; target=&#34;_blank&#34;&gt;GitHub #12&lt;/a&gt; &lt;code&gt;simple_locking&lt;/code&gt;で使われるミューテックスが再帰的でなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1140&#34; target=&#34;_blank&#34;&gt;GitHub #1140&lt;/a&gt; 依存関係を削除し、いくつかの箇所で boost を std に置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1154&#34; target=&#34;_blank&#34;&gt;GitHub #1154&lt;/a&gt; 不足していたヘッダを追加し、すべてのヘッダがBoostのポリシーに従って独立してコンパイルできるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1157&#34; target=&#34;_blank&#34;&gt;GitHub #1157&lt;/a&gt; &lt;code&gt;calculate_point_order&lt;/code&gt;で&lt;code&gt;const Ring&lt;/code&gt;のコンセプトをチェックする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決済みの問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1100&#34; target=&#34;_blank&#34;&gt;GitHub #1100&lt;/a&gt; &lt;code&gt;union&lt;/code&gt;の修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1139&#34; target=&#34;_blank&#34;&gt;GitHub #1139&lt;/a&gt; 異なるジオメトリタイプの修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1158&#34; target=&#34;_blank&#34;&gt;GitHub #1158&lt;/a&gt; 凸包の修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1161&#34; target=&#34;_blank&#34;&gt;GitHub #1161&lt;/a&gt; 頂点に極を持つジオメトリのアルゴリズム内の修正1&lt;/li&gt;
&lt;li&gt;様々なエラーと警告の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_iterator&lt;/code&gt; 型特性を追加し、その型がイテレータ型として適格かどうかをテストできるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; &lt;code&gt;filter_iterator&lt;/code&gt; は、適応されたイテレータと関数オブジェクトのムーブ構築をサポートするようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリはメモリ割り当てに失敗した場合を除き、&lt;code&gt;system_error&lt;/code&gt;を例外送出するようにした。ただし、メモリ割り当てに失敗した場合は &lt;code&gt;std::bad_alloc&lt;/code&gt; が送出される&lt;/li&gt;
&lt;li&gt;シリアライズの動作を &lt;code&gt;serialize_options&lt;/code&gt; で変更できるようになった&lt;/li&gt;
&lt;li&gt;文脈変換&lt;/li&gt;
&lt;li&gt;より正確な数値解析を行うためのパーサーオプション&lt;/li&gt;
&lt;li&gt;ストリーム &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; で &lt;code&gt;parse_options&lt;/code&gt; をサポートした&lt;/li&gt;
&lt;li&gt;JSON リテラルの &lt;code&gt;Infinity&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; を許可するパーサーオプション&lt;/li&gt;
&lt;li&gt;数値のパースではなく、数値の検証のみを行うパーサーモード&lt;/li&gt;
&lt;li&gt;指数が &lt;code&gt;INT_MAX&lt;/code&gt; より大きい数値はパーサーに受け入れられ、無限大として扱われる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;メンバ関数を強い保証をするよう修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/range.hpp&lt;/code&gt;がインクルードされている場合の &lt;code&gt;end&lt;/code&gt; 呼び出しのあいまいさを修正した&lt;/li&gt;
&lt;li&gt;ASan の失敗を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error::size_mismatch&lt;/code&gt; のエラーメッセージを修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 要素を持つタプルへの変換を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#locale&#34; id=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GNU gettextの動作にマッチするメッセージカタログファイルにおいて、ビット演算子/バイナリ演算子(左/右シフト、バイナリand/or/xor/not)がサポートされなくなった&lt;/li&gt;
&lt;li&gt;Windows の Std バックエンドは、要求されたロケールが存在しない場合、システムロケールの代わりにクラシックロケールを使用するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localization_backend_manager::get&lt;/code&gt;は非推奨。代わりにジェネレーターを使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to_utf&lt;/code&gt;/&lt;code&gt;from_utf&lt;/code&gt;/&lt;code&gt;between&lt;/code&gt; に代わる新しいコンバータークラスを追加した&lt;/li&gt;
&lt;li&gt;フォーマット文字列の無効なインデックスに関する未定義動作を修正した&lt;/li&gt;
&lt;li&gt;ICU のない Windows で iso-2022-jp などへの UTF 変換を修正した&lt;/li&gt;
&lt;li&gt;複数形翻訳のカウントパラメーターとして &lt;code&gt;long long&lt;/code&gt; を使用するようにした&lt;/li&gt;
&lt;li&gt;いくつかのクラスのムーブと例外指定を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/209&#34; target=&#34;_blank&#34;&gt;GitHub #209&lt;/a&gt; &lt;code&gt;text_file_backend&lt;/code&gt; で、フォーマットされたログレコードのサイズが &lt;code&gt;rotation_size&lt;/code&gt; の制限を超えた場合に無限ループになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/921&#34; target=&#34;_blank&#34;&gt;GitHub #921&lt;/a&gt; Daubechiesスケーリング関数のフーリエ変換の数値評価を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/946&#34; target=&#34;_blank&#34;&gt;GitHub #946&lt;/a&gt; 統計分布に &lt;code&gt;logcdf&lt;/code&gt; 関数を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/978&#34; target=&#34;_blank&#34;&gt;GitHub #978&lt;/a&gt; C++23 の &lt;code&gt;&amp;lt;stdfloat&amp;gt;&lt;/code&gt; 型のサポートを追加した&lt;/li&gt;
&lt;li&gt;様々な &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; 警告を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/968&#34; target=&#34;_blank&#34;&gt;GitHub #968&lt;/a&gt; 表現不可能な数値の &lt;code&gt;round&lt;/code&gt; と &lt;code&gt;trunc&lt;/code&gt; 関数を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/976&#34; target=&#34;_blank&#34;&gt;GitHub #976&lt;/a&gt; F 分布の最頻値の計算を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/977&#34; target=&#34;_blank&#34;&gt;GitHub #977&lt;/a&gt; ベータ分布のオーバーフローを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/987&#34; target=&#34;_blank&#34;&gt;GitHub #987&lt;/a&gt; 超幾何分布のオーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/997&#34; target=&#34;_blank&#34;&gt;GitHub #997&lt;/a&gt; 中央値が 0 でない場合の絶対偏差の中央値の計算を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_from_sequence&lt;/code&gt;, &lt;code&gt;mp_iota&lt;/code&gt;, &lt;code&gt;mp_iota_c&lt;/code&gt; に offset/from パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_value&lt;/code&gt;, &lt;code&gt;mp_list_v&lt;/code&gt;, &lt;code&gt;mp_rename_v&lt;/code&gt;, &lt;code&gt;mp_is_value_list&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;boost/mp11/list.hpp&amp;gt;&lt;/code&gt;のプリミティブに値リストのサポートを追加&lt;/li&gt;
&lt;li&gt;値リストのサポートを &lt;code&gt;mp_repeat&lt;/code&gt;、&lt;code&gt;mp_fill&lt;/code&gt;、&lt;code&gt;mp_at&lt;/code&gt;、&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_take&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;、&lt;code&gt;mp_drop&lt;/code&gt;、&lt;code&gt;mp_insert&lt;/code&gt;、&lt;code&gt;mp_erase&lt;/code&gt; に追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; non-unique ordered indicesのRange版 &lt;code&gt;insert&lt;/code&gt; を更新し、等価な要素の挿入順序を保持するようにした&lt;/li&gt;
&lt;li&gt;シリアライズで &lt;code&gt;multi_index_container&lt;/code&gt; のサイズの保存と読み込みに &lt;code&gt;unsigned long&lt;/code&gt; ではなく &lt;code&gt;std::size_t&lt;/code&gt; を使用するようになった (LLP64 データモデルでは &lt;code&gt;unsigned long&lt;/code&gt; は &lt;code&gt;std::size_t&lt;/code&gt; より小さい)。この変更にともない、 &lt;code&gt;multi_index_container&lt;/code&gt; のシリアライズバージョンが 3 から 4 に変更された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/542&#34; target=&#34;_blank&#34;&gt;GitHub #542&lt;/a&gt; rational adapter divisionのバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/552&#34; target=&#34;_blank&#34;&gt;GitHub #552&lt;/a&gt; マルチスレッド環境でのグローバルプレッションの変更の処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/555&#34; target=&#34;_blank&#34;&gt;GitHub #555&lt;/a&gt; &lt;code&gt;cpp_int::eval_convert_to&lt;/code&gt; の `noexcept 指定を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;データを生成する &lt;code&gt;SELECT&lt;/code&gt; ステートメントと &lt;code&gt;OUT&lt;/code&gt; パラメータを持つプロシージャを含むストアドプロシージャが完全にサポートされた。これにより、セミコロンで区切られた複数のステートメントを 1 回の呼び出しで実行できるようになった&lt;/li&gt;
&lt;li&gt;静的に型付けされたインターフェースが追加され、Boost.Describe構造体とタプルを使用して、クエリ結果をユーザーが提供した型に解析できるようになった&lt;/li&gt;
&lt;li&gt;テキストクエリとプリペアドステートメントは、新しい &lt;code&gt;connection::execute&lt;/code&gt; 関数と &lt;code&gt;connection::start_execution&lt;/code&gt; 関数（とその非同期関数）を使って実行できるようになった。これらは &lt;code&gt;connection::query&lt;/code&gt;、&lt;code&gt;connection::execute_statement&lt;/code&gt;、&lt;code&gt;connection::start_query&lt;/code&gt;、&lt;code&gt;connection::start_statement_execution&lt;/code&gt; の上位関数である。新しい関数により、静的インターフェースのような新しい機能にアクセスできるようになった&lt;/li&gt;
&lt;li&gt;ビルド時間を短縮するために、独立したコンパイルモードが追加された。ソースは &lt;code&gt;boost/mysql/src.hpp&lt;/code&gt; に含まれており、正確に1つの翻訳ユニットに含める必要がある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement::bind&lt;/code&gt; と &lt;code&gt;connection::execute&lt;/code&gt; を使用して、イテレータペアでパラメータを指定してプリペアドステートメントを実行できるようになった。これにより、コンパイル時にパラメータの数や型がわからない場合に使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; 型、&lt;code&gt;std::optional&lt;/code&gt; 型、&lt;code&gt;boost::optional&lt;/code&gt; 型のパラメータを使用できるようになった&lt;/li&gt;
&lt;li&gt;エラーコードを追加し、MySQL v8.0.33 および MariaDB v11.0 との互換性を確認した&lt;/li&gt;
&lt;li&gt;Windows の &lt;code&gt;min()&lt;/code&gt; と &lt;code&gt;max()&lt;/code&gt; マクロの潜在的な問題を修正した&lt;/li&gt;
&lt;li&gt;すべてのアサーションが Boost.Assert を使用するようになった。&lt;/li&gt;
&lt;li&gt;すべての例外は Boost.ThrowException によってスローされるようになった&lt;/li&gt;
&lt;li&gt;即時完了が I/O object executorを通して正しくディスパッチされるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#ratio&#34; id=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの &lt;code&gt;BOOST_RATIO_VERSION&lt;/code&gt; を 2 に変更した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_RATIO_EXTENSIONS&lt;/code&gt; のサポートは非推奨となり、Boost.Ratio が標準の &lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt; ヘッダとして実装されたときに削除される予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CIシステムに古いプラットフォームを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/353&#34; target=&#34;_blank&#34;&gt;GitHub #353&lt;/a&gt; &lt;code&gt;uintptr_t&lt;/code&gt; の取り扱いを修正し、32 ビットシステムでも移植できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/375&#34; target=&#34;_blank&#34;&gt;GitHub #375&lt;/a&gt; &lt;code&gt;Wdeprecated-copy-dtor&lt;/code&gt; と &lt;code&gt;-Wdeprecated-copy-with-user-provided-dtor&lt;/code&gt; の警告を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/382&#34; target=&#34;_blank&#34;&gt;GitHub #382&lt;/a&gt; C++23 &lt;code&gt;&amp;lt;stdfloat&amp;gt;&lt;/code&gt; 型の &lt;code&gt;check_is_close&lt;/code&gt; の処理を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#timer&#34; id=&#34;timer&#34;&gt;Timer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Chrono、Boost.Systemなどへの依存を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_TIMER_ENABLE_DEPRECATED&lt;/code&gt; が定義されていない限り、非推奨のヘッダーを無効にするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;オープンアドレッシングに基づく高速でスレッドセーフなハッシュマップ &lt;code&gt;boost::concurrent_flat_map&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;オープンアドレッシングコンテナのイテレート処理を高速化&lt;/li&gt;
&lt;li&gt;オープンアドレッシングコンテナにおいて、以前はなにも返さなかった &lt;code&gt;erase(iterator)&lt;/code&gt; が、次の要素へのイテレータに変換可能なプロキシオブジェクトを返すようになった。これにより、返されたプロキシが使用されない場合に、パフォーマンス上のペナルティを負うことなく、典型的な &lt;code&gt;it = c.erase(it)&lt;/code&gt; イディオムを使用できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/757&#34; target=&#34;_blank&#34;&gt;GitHub #757&lt;/a&gt; &lt;code&gt;parse_query&lt;/code&gt;で&lt;code&gt;string_view&lt;/code&gt;を作り直さないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/756&#34; target=&#34;_blank&#34;&gt;GitHub #756&lt;/a&gt; &lt;code&gt;url_view&lt;/code&gt;/&lt;code&gt;string_view&lt;/code&gt;のコンストラクタが、&lt;code&gt;url_view_base&lt;/code&gt;を要求するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/711&#34; target=&#34;_blank&#34;&gt;GitHub #711&lt;/a&gt; &lt;code&gt;IP-literal&lt;/code&gt;が&lt;code&gt;IPv6addrz&lt;/code&gt;になれるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; AVX ターゲット用に生成される x86 コードを改善。SSE3 ターゲットでの &lt;code&gt;lddqu&lt;/code&gt; 命令の使用を削除した。これは Intel NetBurst CPU ではパフォーマンスが低下するが、Skylake 以降の CPU では最適である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uses_double_storage()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_83_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.10.1をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>