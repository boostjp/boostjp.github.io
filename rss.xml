<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2016-01-07T23:01:36.949508</updated>
  <id>c8554c39-b7bc-4d3c-9470-a10ba08f88cb</id>

  
    <entry>
      <title>各ライブラリの翻訳ドキュメント -- io_state:io_stateへのリンクを追加．</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs.html"/>
      <id>7ccec272c9315975852038cee21869abba4c26ea:archive/boost_docs/libs.md</id>
      <updated>2015-12-26 23:20:10 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;各ライブラリの翻訳ドキュメント&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、Boost 1.31.0時点での各ライブラリの翻訳ドキュメントを掲載する。&lt;/p&gt;
&lt;p&gt;最新バージョンへの追従は行っていないことに注意されたし。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ライブラリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array.html&#34;&gt;array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL に準拠した定数サイズの配列のラッパコンテナ。Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;bind&lt;/a&gt; and &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数、オブジェクト、ポインタ、メンバ関数のための汎用的なバインダ。 Peter Dimov 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/compatibility.html&#34;&gt;compatibility&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準に準拠しないプラットフォームでのライブラリの利用に役立つ。Ralf Grosse-Kunstleve and Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/compose.html&#34;&gt;compose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL の為の関数合成アダプタ Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html&#34;&gt;concept_check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックプログラミングのためのツール群。 Jeremy Siek 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion.html&#34;&gt;conversion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数学的、多相的、辞書的キャスト Dave Abrahams and Kevlin Henney 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;date_time&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付/時間ライブラリ Jeff Garland 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html&#34;&gt;disjoint_sets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;互いに素な集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format.html&#34;&gt;format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型安全な printf 風の書式化操作。Samuel Krempp 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;遅延呼び出し及びコールバックのための関数オブジェクトラッパ。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional.html&#34;&gt;functional&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機能強化された関数オブジェクトアダプタ。 Mark Rodgers 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph.html&#34;&gt;graph&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;汎用グラフコンポーネント及びアルゴリズム。 Jeremy Siek and a University of Notre Dame team 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html&#34;&gt;io state savers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入出力の状態を保存して、データが化けるのを防ぐ。 Daryle Walker 作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>graighle</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.60.0リリースノート -- Boost 1.60.0リリースノート : 順番が間違っていたので修正</title>
      <link href="http://boostjp.github.io/document/version/1_60_0.html"/>
      <id>319e4c1769aa83054975b8fa7a8116e12ead3e70:document/version/1_60_0.md</id>
      <updated>2015-12-25 16:35:57 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.60.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_60_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_60_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_60_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_60_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hanaのリリースは延期&lt;/h2&gt;
&lt;p&gt;時間的な制約により、&lt;a href=&#34;https://github.com/boostorg/hana&#34; target=&#34;_blank&#34;&gt;Hana&lt;/a&gt;のリリースは、Boostの以降のリリースに延期となった。&lt;/p&gt;
&lt;p&gt;これによって、HanaがBoostの一部として正式にリリースする前に、いくつかの既知の問題に対処できる。詳細はメーリングリストを参照。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lib.boost.devel/263964&#34; target=&#34;_blank&#34;&gt;http://article.gmane.org/gmane.comp.lib.boost.devel/263964&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Boost.DLLのリリースは延期&lt;/h2&gt;
&lt;p&gt;めずらしいツールセットとプラットフォームのサポートを提供するために、Boost.DLLのリリースは、Boostの以降のリリースに延期となった。&lt;/p&gt;
&lt;p&gt;これによって、&lt;code&gt;boost::dll::shared_library&lt;/code&gt;インスタンスのコピー構築とコピー代入の機能も追加されてより良いテストができるようになり、非デフォルトの呼び出し規約の関数をインポートするサンプルも提供される。&lt;/p&gt;
&lt;p&gt;このライブラリの最新バージョンと開発ドキュメントは、以下のリポジトリにある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll&#34; target=&#34;_blank&#34;&gt;boostorg/dll - GitHubリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Windowsユーザーへの注記&lt;/h2&gt;
&lt;p&gt;このリリースでのBoostは、コンパイラが最新のWindows SDKをサポートしていてWindows XP以外の場合に、Windows Vista/Windows Server 2008をデフォルトコンパイルとする。古いバージョンのWindowsでは、デフォルトのオプションでコンパイルされたバイナリを実行できなくなる。&lt;/p&gt;
&lt;p&gt;Windows APIのバージョン番号を&lt;code&gt;BOOST_USE_WINAPI_VERSION&lt;/code&gt;マクロを定義することによって、対象のWindowsバージョンを明示的に指定することもできる。たとえば、Windows XP向けにBoostをコンパイルするには、次のコマンドを使用する：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;b2 release define=BOOST_USE_WINAPI_VERSION=0x0501
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Windows APIのバージョン番号の一覧は、以下のページで確認できる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/6sehtctf.aspx&#34; target=&#34;_blank&#34;&gt;Modifying &lt;code&gt;WINVER&lt;/code&gt; and &lt;code&gt;_WIN32_WINNT&lt;/code&gt; - MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は、BoostのWindows APIに対する抽象レイヤーを使用しているライブラリだけに影響する。現在は、以下のライブラリが対象である： Boost.Chrono、Boost.Dll、Boost.Log、Boost.UUID。これらのライブラリに依存するライブラリも対象となる。&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/vmd/&#34; target=&#34;_blank&#34;&gt;VMD&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;可変引数マクロデータライブラリ(Variadic Macro Data Library)&lt;/li&gt;
&lt;li&gt;作者 : Edward Diener&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;&amp;gt;&lt;/code&gt;のストレージに、適切なアラインメントを設定した。これによって、ネイティブのワードサイズより大きいデータ単位に対するアトミック操作のサポートに関する問題が修正される。&lt;/li&gt;
&lt;li&gt;IBM XL C++コンパイラでのPowerPC向けのコンパイルエラーを修正。PowerPCアセンブラのメモリバリアを正しいものにした。&lt;/li&gt;
&lt;li&gt;MSVC-8でのARM向けのコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10994&#34; target=&#34;_blank&#34;&gt;#10994&lt;/a&gt; 128ビットアトミック操作を使用したときの、gcc 4.4でのx86-64向けのコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;x86/x86-64向けのgccアセンブラブロックを最適化し、使用するレジスタ数を減らした。これはbinutils 2.10以降を必要とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; VC14 CTP4において、&lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;が&lt;code&gt;TriviallyCopyable&lt;/code&gt;ではないために、それを要素とする&lt;code&gt;atomic&lt;/code&gt;のコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; test_7868.cppで、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; time_point_output.cppで、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO State Saverが、Boost.IO State Saverと異なるインタフェースだったのを修正。コンストラクタの第1パラメータを、&lt;code&gt;state_type&lt;/code&gt;から&lt;code&gt;state_type&amp;amp;&lt;/code&gt;に変更した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、小数部が切り詰められる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2で、&lt;code&gt;boost::chrono::duration &amp;lt; boost::rational &amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;のコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準C++に提案されている、Polymorphic Memory Resourcesを実装した&lt;ul&gt;
&lt;li&gt;標準のドキュメントは以下：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html&#34; target=&#34;_blank&#34;&gt;C++ Extensions for Library Fundamentals (最新のドラフト仕様: N4480)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/files/papers/N3916.pdf&#34; target=&#34;_blank&#34;&gt;N3916 Polymorphic Memory Resources (r2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASSERT&lt;/code&gt;での事前条件のチェックを強化した(&lt;code&gt;pop_back()&lt;/code&gt;, &lt;code&gt;pop_front()&lt;/code&gt;, &lt;code&gt;back()&lt;/code&gt;, &lt;code&gt;front()&lt;/code&gt;、その他)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_string&lt;/code&gt;に、C++11の&lt;code&gt;back()&lt;/code&gt;と&lt;code&gt;front()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11627&#34; target=&#34;_blank&#34;&gt;Trac #11627&lt;/a&gt; &lt;code&gt;small_vector&amp;lt;T,n&amp;gt;::swap( )&lt;/code&gt;が壊れていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11628&#34; target=&#34;_blank&#34;&gt;Trac #11628&lt;/a&gt; 要素のデストラクタを呼ぶ必要のない&lt;code&gt;small_vector&amp;lt;int,n&amp;gt;&lt;/code&gt;で、要素のデストラクタが個別に呼び出されていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11697&#34; target=&#34;_blank&#34;&gt;Trac #11697&lt;/a&gt; 可変引数テンプレートのツールとして作成したタプルの初期化が、tail -&amp;gt; headの順になっていたので、head -&amp;gt; tailの順になるよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11698&#34; target=&#34;_blank&#34;&gt;Trac #11698&lt;/a&gt; &lt;code&gt;static_storage_allocator&lt;/code&gt;の&lt;code&gt;return&lt;/code&gt;文漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;flat_map&lt;/code&gt;のドキュメントで、計算量が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; dlmallocの実装で、アドレス取得がヌルチェックの中で行われていたために、アドレスを間接参照できない場合があったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11603&#34; target=&#34;_blank&#34;&gt;#11603&lt;/a&gt; PPC32/MACH-Oアセンブラの誤字を修正&lt;/li&gt;
&lt;li&gt;Cygwinをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シンボルのデマングルツールに、Android NDKのgabi++ ABIのサポートを追加&lt;/li&gt;
&lt;li&gt;入れ子型の存在をSFINAEチェックするためのツールとして、&lt;code&gt;enable_if_has_type&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以下の関数を追加した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path::lexically_normal()&lt;/code&gt; : パスの正規化を行う。正規化では、冗長なカレントディレクトリ(ドット)の指定や親ディレクトリ(ドット-ドット)の削除を行う。例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;foo/./bar/..&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;foo/.///bar/../&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo/.&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path::lexically_relative()&lt;/code&gt; : パラメータで指定されたパスから&lt;code&gt;*this&lt;/code&gt;のパスへの相対パスを求める。例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../../d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c/x/y&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../..&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;c/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;relative()&lt;/code&gt; : 第2パラメータのパスから第1パラメータのパスへの、相対パスを求める&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weakly_canonical()&lt;/code&gt; : パラメータで指定されたパスのシンボリックリンクを解決し、正規化した結果のパスを返す&lt;/li&gt;
&lt;li&gt;上記4関数の追加で協力してくれたJamie Allsop氏に、多大な感謝をする&lt;/li&gt;
&lt;li&gt;これによって解決したチケットは以下： &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1976&#34; target=&#34;_blank&#34;&gt;#1976&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5897&#34; target=&#34;_blank&#34;&gt;#5897&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6249&#34; target=&#34;_blank&#34;&gt;#6249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path&lt;/code&gt;クラスに、&lt;code&gt;reverse_iterator&lt;/code&gt;と&lt;code&gt;const_reverse_iterator&lt;/code&gt;型を追加し、&lt;code&gt;rbegin()&lt;/code&gt;、&lt;code&gt;rend()&lt;/code&gt;メンバ関数を追加した&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Filesystem TSによって規定された、C++11の&lt;code&gt;noexcept&lt;/code&gt;を付加(コンパイラが&lt;code&gt;noexcept&lt;/code&gt;をサポートしていれば)&lt;/li&gt;
&lt;li&gt;Filesystem TSによって規定された、C++11のムーブコンストラクタとムーブ代入演算子を追加(コンパイラがムーブをサポートしていれば)&lt;/li&gt;
&lt;li&gt;Filesystem TSの規定に従って、関数の名前をいくつか変更した。現在は、古い名前と新しい名前、両方をサポートしている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6874&#34; target=&#34;_blank&#34;&gt;#6874&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;チケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11733&#34; target=&#34;_blank&#34;&gt;#11733&lt;/a&gt; boost/libs/filesystem/src/unique_path.cppでのunistd.hのインクルード漏れを修正。Idar Tollefsen氏によるパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5706&#34; target=&#34;_blank&#34;&gt;#5706&lt;/a&gt; WindowsのTemporary User Profilesで&lt;code&gt;unique_path()&lt;/code&gt;が失敗する問題を修正。Sebastian Redl氏によるpull requestを適用した(&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/15&#34; target=&#34;_blank&#34;&gt;pull request #15&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10591&#34; target=&#34;_blank&#34;&gt;#10591&lt;/a&gt; このライブラリを、iOS 8でビルドできない問題を修正。Daniel Seither氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9454&#34; target=&#34;_blank&#34;&gt;#9454&lt;/a&gt; &lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされていると、このライブラリをビルドできない問題を修正。Makesim氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11447&#34; target=&#34;_blank&#34;&gt;#11447&lt;/a&gt; &lt;code&gt;__OpenBSD__&lt;/code&gt;マクロ名が間違っていたのを修正。Jasper Lievisse Adriaanse氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11288&#34; target=&#34;_blank&#34;&gt;#11288&lt;/a&gt; 文字列の冗長なメモリ確保を回避した。Yevhen Ivannikov氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11175&#34; target=&#34;_blank&#34;&gt;#11175&lt;/a&gt; 古いドキュメントが原因で、このライブラリが例外を無効にして使用できるとユーザーに期待させてしまっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11166&#34; target=&#34;_blank&#34;&gt;#11166&lt;/a&gt; &lt;code&gt;remove()&lt;/code&gt;関数の、競合の可能性を減らした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7258&#34; target=&#34;_blank&#34;&gt;#7258&lt;/a&gt; &lt;code&gt;create_directories()&lt;/code&gt;関数に指定されたパスの最後がスラッシュの場合に、&lt;code&gt;false&lt;/code&gt;を返してしまっていたので修正。それにともなって、パスに「&lt;code&gt;.&lt;/code&gt;」もしくは「&lt;code&gt;..&lt;/code&gt;」が含まれていた場合のテストを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10766&#34; target=&#34;_blank&#34;&gt;#10766&lt;/a&gt; 冗長な区切り文字が付いたパスに対して&lt;code&gt;parent_path()&lt;/code&gt;を呼び出すと、間違った値が返されていたという問題が報告されたが、これは動作としては正しかったので、ドキュメントにその動作を記載した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7607&#34; target=&#34;_blank&#34;&gt;#7607&lt;/a&gt; スラッシュで終わるパスのファイル名が「&lt;code&gt;.&lt;/code&gt;」であると推論される問題。この問題は、&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7258&#34; target=&#34;_blank&#34;&gt;#7258&lt;/a&gt;と&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10766&#34; target=&#34;_blank&#34;&gt;#10766&lt;/a&gt;で解決した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11061&#34; target=&#34;_blank&#34;&gt;#11061&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11062&#34; target=&#34;_blank&#34;&gt;#11062&lt;/a&gt; パスを逆順に辿ることができないという問題だが、これはreverse iterator機能の追加によって解決した&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;その他修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCCのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のバグを修正 : 1引数以外のコンストラクタを非&lt;code&gt;explicit&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;リファレンスドキュメントを整理した : 残りのドキュメントにも、同じスタイルシートを適用した。タブのフォントサイズを調整した。テーブル内の長すぎる行を修正した&lt;/li&gt;
&lt;li&gt;Jonathan Wakely氏とMarcel Raad氏からのpull requestを含む、小さい修正を行った。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正を行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全てのFusionコンテナとジェネレータはC++11の可変長テンプレートをサポートした。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/89&#34; target=&#34;_blank&#34;&gt;pull-request 89&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/97&#34; target=&#34;_blank&#34;&gt;pull-request 97&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/100&#34; target=&#34;_blank&#34;&gt;pull-request 100&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::vector&lt;/code&gt;に関する注意&lt;ul&gt;
&lt;li&gt;実装上の理由により、番号付きのvector(つまり&lt;code&gt;fusion::vectorN&lt;/code&gt;の形)はC++11のエイリアステンプレートを使って提供され、C++11以降ではdeprecatedとなる。
  この場合、いくつかの部分特殊化がコンパイルエラーとなる為、&lt;code&gt;BOOST_FUSION_HAS_VARIADIC_VECTOR&lt;/code&gt;マクロを使用して実装を切り替えなければならない(&lt;a href=&#34;https://github.com/boostorg/spirit/pull/158/files#diff-250ce096dee927d2b7eb5a4e24afb8cd&#34; target=&#34;_blank&#34;&gt;Spiritへのpull request&lt;/a&gt;を参照されたい)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fusion::nview&lt;/code&gt;はC++11の可変長テンプレートをサポートした。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/90&#34; target=&#34;_blank&#34;&gt;pull-request 90&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fusion::fold&lt;/code&gt;がSFINAE-friendlyとなった。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/102&#34; target=&#34;_blank&#34;&gt;pull-request 102&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Fusionシーケンスを&lt;code&gt;fusion::deque&lt;/code&gt;へ変換できなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11572&#34; target=&#34;_blank&#34;&gt;#11572&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(ドキュメント) 関数の戻り値の型が正しくなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3358&#34; target=&#34;_blank&#34;&gt;#3358&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10803&#34; target=&#34;_blank&#34;&gt;#10803&lt;/a&gt; &lt;code&gt;union_()&lt;/code&gt;アルゴリズムが、不正なジオメトリを返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11522&#34; target=&#34;_blank&#34;&gt;#11522&lt;/a&gt; &lt;code&gt;traits::detail&lt;/code&gt;名前空間の&lt;code&gt;buffer&lt;/code&gt;が名前衝突していたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11533&#34; target=&#34;_blank&#34;&gt;#11533&lt;/a&gt; &lt;code&gt;rtree&lt;/code&gt;の最小要素数が1の場合に&lt;code&gt;remove()&lt;/code&gt;関数を呼び出すと、アサートに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11607&#34; target=&#34;_blank&#34;&gt;#11607&lt;/a&gt; &lt;code&gt;geometry::exception::what()&lt;/code&gt;が&lt;code&gt;private&lt;/code&gt;になっていたので、&lt;code&gt;public&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11709&#34; target=&#34;_blank&#34;&gt;#11709&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;でセグメンテーション違反が発生する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11710&#34; target=&#34;_blank&#34;&gt;#11710&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;に空のジオメトリを与えるとセグメンテーション違反が発生していたので、&lt;code&gt;true&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11711&#34; target=&#34;_blank&#34;&gt;#11711&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;と&lt;code&gt;is_valid()&lt;/code&gt;に、NaNやInfinityを含むジオメトリを与えても&lt;code&gt;true&lt;/code&gt;が返ってきていたので、&lt;code&gt;false&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ほかのポリゴンにtouchする部分の、interior ringとexterior ringのコロケーション(colocations)を修正&lt;/li&gt;
&lt;li&gt;空の&lt;code&gt;rtree&lt;/code&gt;に対して&lt;code&gt;remove()&lt;/code&gt;関数を呼び出した際に、アサート失敗するのではなく、何もせずに&lt;code&gt;0&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;li&gt;空のジオメトリをひとつだけ含むmulti geometriesに対する&lt;code&gt;centroid()&lt;/code&gt;の呼び出しによって、セグメンテーション違反が発生する問題を修正(Jiri Drbalek氏に感謝)&lt;/li&gt;
&lt;li&gt;整数座標系の&lt;code&gt;liang_barsky&lt;/code&gt; strategyを修正(Dane Springmeyer氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;のパフォーマンスを改善し、あらゆる未定義動作を削除した。異なるコンパイラでの特殊ケースが必要なくなった。&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11699&#34; target=&#34;_blank&#34;&gt;Trac #11699&lt;/a&gt; Visual Studio 2015のバグにより、標準クラステンプレートの先行宣言がコンパイルエラーになっていたので、ワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;順序付き連想コンテナでの「&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/intrusive/advanced_lookups_insertions.html&#34; target=&#34;_blank&#34;&gt;高度な検索と挿入&lt;/a&gt;」に、比較関数のサポートを追加した。&lt;code&gt;key_compare&lt;/code&gt;と同じ「狭義の弱順序(strict weak ordering)」を提供することなしに、比較関数オブジェクトでコンテナを分割できる。&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11701&#34; target=&#34;_blank&#34;&gt;Boost Trac #11701&lt;/a&gt; &lt;code&gt;boost::intrusive::set::equal_range&lt;/code&gt;のレギュレッション&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11765&#34; target=&#34;_blank&#34;&gt;Boost Trac #11765&lt;/a&gt; sgtreeのテストコードが不正だったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブのみできる型を使用することができなくなっていたのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11570&#34; target=&#34;_blank&#34;&gt;#11570&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_LCAST_NO_COMPILE_TIME_PRECISION&lt;/code&gt;が定義されていた際にクラッシュしていたのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11669&#34; target=&#34;_blank&#34;&gt;#11669&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11570&#34; target=&#34;_blank&#34;&gt;#11570&lt;/a&gt;と&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4946&#34; target=&#34;_blank&#34;&gt;#4946&lt;/a&gt;で指摘されていた幾つかの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックな&lt;code&gt;codecvt&lt;/code&gt;ファセットと、汎用的な目的に使用できる&lt;code&gt;utf8_codecvt&lt;/code&gt;ファセットを実装した&lt;/li&gt;
&lt;li&gt;FreeBSD 10.0と上記の機能向けに、POSIXのロケールをサポートした&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10017&#34; target=&#34;_blank&#34;&gt;#10017&lt;/a&gt; &lt;code&gt;sun&lt;/code&gt;をSunOSに向けて再定義した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11163&#34; target=&#34;_blank&#34;&gt;#11163&lt;/a&gt; &lt;code&gt;set_default_messages_domain()&lt;/code&gt;の不正な振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11673&#34; target=&#34;_blank&#34;&gt;#11673&lt;/a&gt; ビルドの問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;最新のICUバージョンでのテストを修正&lt;/li&gt;
&lt;li&gt;libc++の問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;BOOST_LOCALE_ENABLE_CHAR16_T&lt;/code&gt;と&lt;code&gt;BOOST_LOCALE_ENABLE_CHAR32_T&lt;/code&gt;を追加。これは、C++11が有効であれば&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;に置き換えられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;全体的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows環境で、構成マクロ&lt;code&gt;BOOST_LOG_USE_WINNT6_API&lt;/code&gt;は使われなくなる。ターゲット環境を設定するマクロ&lt;code&gt;BOOST_USE_WINAPI_VERSION&lt;/code&gt;を定義することによって、Windowsのバージョンを設定する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11559&#34; target=&#34;_blank&#34;&gt;#11559&lt;/a&gt; AndroidでのGoogle NDKのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11549&#34; target=&#34;_blank&#34;&gt;#11549&lt;/a&gt; ロギング文のいくつかのコンパイルエラーを修正。ストリームに入れる最初のオブジェクトは、&lt;code&gt;formatting_ostream&lt;/code&gt;がサポートされていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11549&#34; target=&#34;_blank&#34;&gt;#11549&lt;/a&gt; Solaris Studio 12.4向けのワークアラウンドを追加。&lt;code&gt;formatting_ostream&lt;/code&gt;のコンパイルエラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11541&#34; target=&#34;_blank&#34;&gt;#11541&lt;/a&gt; ネイティブの&lt;code&gt;wchar_t&lt;/code&gt;を無効にしたときのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;POSIXライクシステム上での、&lt;code&gt;boost_log_setup&lt;/code&gt;ライブラリからのエクスポートシンボルを修正&lt;/li&gt;
&lt;li&gt;character decoratorsのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11691&#34; target=&#34;_blank&#34;&gt;#11691&lt;/a&gt; ファイル名にdate/timeのプレースホルダが含まれている場合に、text file sink backendで不正なファイル名であると判定される問題に対するワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらなる詳細は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11615&#34; target=&#34;_blank&#34;&gt;#11615&lt;/a&gt;: type_traits.hppで&lt;code&gt;std::size_t&lt;/code&gt;を完全修飾せず使っている場所があったので修正&lt;ul&gt;
&lt;li&gt;訳者註: &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt; ヘッダをインクルードしてもグローバル名前空間に&lt;code&gt;size_t&lt;/code&gt;が存在するとは限らない為、一部の標準ライブラリ実装ではコンパイルできない問題があった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな定義である&lt;code&gt;foreach&lt;/code&gt;マクロ名による、&lt;a href=&#34;http://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qtフレームワーク&lt;/a&gt;との相互運用の問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正を行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#odeint&#34; name=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;あまりにも多くのODEステップが実行された場合に、例外を送出する機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%80%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E6%9C%89%E9%99%90%E8%A6%81%E7%B4%A0%E6%B3%95&#34; target=&#34;_blank&#34;&gt;アダプティブ法(adaptive method)&lt;/a&gt;の最大ステップサイズを制限する機能を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかのバグを修正 : &lt;a href=&#34;https://github.com/headmyshoulder/odeint-v2/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/headmyshoulder/odeint-v2/issues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;訳注 : どのバージョンでなにが直ったのかわからなかったので、バグ修正の詳細は記載しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11203&#34; target=&#34;_blank&#34;&gt;#11203&lt;/a&gt; &lt;code&gt;boost::none&lt;/code&gt;の実装を再度変更した。内部リンケージの&lt;code&gt;const&lt;/code&gt;オブジェクトとした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIMDハードウェアの検出機能を追加。&lt;code&gt;BOOST_HW_*&lt;/code&gt;マクロを使用する(Charly Chevalier氏に感謝)&lt;/li&gt;
&lt;li&gt;クロスコンパイルのチェックを行うための、コンパイルのみ行うユーティリティを追加&lt;/li&gt;
&lt;li&gt;テストの警告を修正&lt;/li&gt;
&lt;li&gt;Windowsプラットフォームの、&lt;code&gt;AVAILABLE&lt;/code&gt;マクロの誤字を修正(Vemund Handeland氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインのインタフェースを改善&lt;/li&gt;
&lt;li&gt;データセットのAPIを改善 : データセットの生成に初期化子リストを使用できるようにし、データセットの構築をより容易にした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正とリクエスト&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3384&#34; target=&#34;_blank&#34;&gt;#3384&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6032&#34; target=&#34;_blank&#34;&gt;#6032&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10317&#34; target=&#34;_blank&#34;&gt;#10317&lt;/a&gt; ダブルクォーテーションで囲まれた引数が、スペースで分割されてしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6859&#34; target=&#34;_blank&#34;&gt;#6859&lt;/a&gt; コマンドラインの、最後の空パラメータが無視される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11279&#34; target=&#34;_blank&#34;&gt;#11279&lt;/a&gt; 不正なパラメータを渡した際に、それが報告されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11478&#34; target=&#34;_blank&#34;&gt;#11478&lt;/a&gt; アサーションの失敗で送出される例外のメッセージが固定文言のため、原因がわからなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11571&#34; target=&#34;_blank&#34;&gt;#11571&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11625&#34; target=&#34;_blank&#34;&gt;#11625&lt;/a&gt; &lt;code&gt;BOOST_TEST( ..., per_element() )&lt;/code&gt;で、コンテナの比較ができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11623&#34; target=&#34;_blank&#34;&gt;#11623&lt;/a&gt; Clangで&lt;code&gt;BOOST_TEST()&lt;/code&gt;のコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11624&#34; target=&#34;_blank&#34;&gt;#11624&lt;/a&gt; C++11モードのGCCとClangで、&lt;code&gt;BOOST_TEST( 0.0 == 0.0 )&lt;/code&gt;というテストが失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.6.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11231&#34; target=&#34;_blank&#34;&gt;#11231&lt;/a&gt; &lt;code&gt;future&lt;/code&gt;のデストラクタをブロッキングしないよう設定する機能を追加。&lt;code&gt;BOOST_THREAD_FUTURE_BLOCKING&lt;/code&gt;をdefineする&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11424&#34; target=&#34;_blank&#34;&gt;#11424&lt;/a&gt; &lt;code&gt;shared_mutex&lt;/code&gt;の名前変更として&lt;code&gt;shared_timed_mutex&lt;/code&gt;を提供し、元のtimed mutex機能付きの&lt;code&gt;shared_mutex&lt;/code&gt;を非推奨とした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11734&#34; target=&#34;_blank&#34;&gt;#11734&lt;/a&gt; &lt;code&gt;future::then(Cont)&lt;/code&gt;を、可能であればスレッドを引き継いで実行するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11736&#34; target=&#34;_blank&#34;&gt;#11736&lt;/a&gt; &lt;code&gt;launch::executor&lt;/code&gt;を&lt;code&gt;future::then(launch::executor, cont)&lt;/code&gt;のように使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11737&#34; target=&#34;_blank&#34;&gt;#11737&lt;/a&gt; &lt;code&gt;launch::inherit&lt;/code&gt;ポリシーを追加した。これを使用することにより、親の&lt;code&gt;then()&lt;/code&gt;で指定されたポリシーを引き継げるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/3926&#34; target=&#34;_blank&#34;&gt;#3926&lt;/a&gt; &lt;code&gt;thread_specific_ptr&lt;/code&gt;とdlopenライブラリの組み合わせでセグメンテーションフォルトとなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6377&#34; target=&#34;_blank&#34;&gt;#6377&lt;/a&gt; 時間が変更されると条件変数がブロックする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時間が逆行すると、&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7665&#34; target=&#34;_blank&#34;&gt;#7665&lt;/a&gt; &lt;code&gt;this_thread::sleep_for()&lt;/code&gt;が&lt;code&gt;steady_clock&lt;/code&gt;を使用していなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7720&#34; target=&#34;_blank&#34;&gt;#7720&lt;/a&gt; &lt;code&gt;mutex&lt;/code&gt;の集中的なロック取得／解除で&lt;code&gt;lock_error&lt;/code&gt;例外が送出される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9309&#34; target=&#34;_blank&#34;&gt;#9309&lt;/a&gt; clang-darwin-tot11環境で、test_latchがたまに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10788&#34; target=&#34;_blank&#34;&gt;#10788&lt;/a&gt; &lt;code&gt;GetLogicalProcessor&lt;/code&gt;が、Windowsプラットフォームの&lt;code&gt;0x0502&lt;/code&gt;以下では使用できなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11090&#34; target=&#34;_blank&#34;&gt;#11090&lt;/a&gt; ex_future_unwrapが、ThreadSanitizerによると、ロック取得の順番によってデッドロックする可能性があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11158&#34; target=&#34;_blank&#34;&gt;#11158&lt;/a&gt; pthreadのスレッドが、faketimeを使用するとデッドロックする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11174&#34; target=&#34;_blank&#34;&gt;#11174&lt;/a&gt; &lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;で無限に待つと、述語が突然起床することがある問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11185&#34; target=&#34;_blank&#34;&gt;#11185&lt;/a&gt; ドキュメントのURLリダイレクトが間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11192&#34; target=&#34;_blank&#34;&gt;#11192&lt;/a&gt; &lt;code&gt;boost::future::then()&lt;/code&gt;と&lt;code&gt;executor&lt;/code&gt;を組み合わせると、コンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11250&#34; target=&#34;_blank&#34;&gt;#11250&lt;/a&gt; &lt;code&gt;make_exceptional()&lt;/code&gt;で作った&lt;code&gt;future&lt;/code&gt;オブジェクトが、そのデストラクタでアサーション失敗していたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11256&#34; target=&#34;_blank&#34;&gt;#11256&lt;/a&gt; 継続関数内で&lt;code&gt;future&amp;lt;&amp;gt;::is_ready() == false&lt;/code&gt;となる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11261&#34; target=&#34;_blank&#34;&gt;#11261&lt;/a&gt; &lt;code&gt;basic_thread_pool&lt;/code&gt;内でスコープ付きスレッドの使い方が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11262&#34; target=&#34;_blank&#34;&gt;#11262&lt;/a&gt; &lt;code&gt;shared_state_nullary_task&lt;/code&gt;内で直接的なポインタの使い方が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11263&#34; target=&#34;_blank&#34;&gt;#11263&lt;/a&gt; いくつかのアンロック操作が不足していたために、&lt;code&gt;lock()&lt;/code&gt;関数で「すれにロックされている」という例外が発生する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11266&#34; target=&#34;_blank&#34;&gt;#11266&lt;/a&gt; &lt;code&gt;boost::packaged_task&lt;/code&gt;クラスの可変引数シグニチャが間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11302&#34; target=&#34;_blank&#34;&gt;#11302&lt;/a&gt; &lt;code&gt;BOOST_THREAD_PATCH&lt;/code&gt;をdefineするとビルドが通らなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11322&#34; target=&#34;_blank&#34;&gt;#11322&lt;/a&gt; &lt;code&gt;sleep_for()&lt;/code&gt;のナノ秒オーバーロードを使用すると、Windows上で返ってくるのが早すぎる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11329&#34; target=&#34;_blank&#34;&gt;#11329&lt;/a&gt; &lt;code&gt;GetProcessHeap()&lt;/code&gt;のusingディレクティブが失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11368&#34; target=&#34;_blank&#34;&gt;#11368&lt;/a&gt; sleep操作で起床しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11377&#34; target=&#34;_blank&#34;&gt;#11377&lt;/a&gt; pthread環境上でシステム時間を変更すると、条件変数が永遠に待ってしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11435&#34; target=&#34;_blank&#34;&gt;#11435&lt;/a&gt; future.hppの、GCCでの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11555&#34; target=&#34;_blank&#34;&gt;#11555&lt;/a&gt; devector.hppが、&lt;code&gt;allocator_traits_type&lt;/code&gt;の存在を前提としていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11562&#34; target=&#34;_blank&#34;&gt;#11562&lt;/a&gt; タイマー起動後にシステム時間を設定すると、タイマーがすぐに切れる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11672&#34; target=&#34;_blank&#34;&gt;#11672&lt;/a&gt; 内部実装で、&lt;code&gt;auto_ptr&lt;/code&gt;の代わりに&lt;code&gt;unique_ptr&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11688&#34; target=&#34;_blank&#34;&gt;#11688&lt;/a&gt; &lt;code&gt;thread::try_join_until()&lt;/code&gt;で、システム時間が変更された場合のbusy waitを待機&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11672&#34; target=&#34;_blank&#34;&gt;#11716&lt;/a&gt; &lt;code&gt;then()&lt;/code&gt;が、親のexecutorを引き継ぐようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#uuid&#34; name=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UUIDを比較する際にクラッシュを引き起こす可能性のあるMSVC codegenのバグに対する、ワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;MSVCのコンパイラスイッチを使って、AVXが有効かどうかを検出できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.6&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.8.4, 4.9.3, 5.1.0, 5.2.1&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0, 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2, 3.6.0, 3.8.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.7.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.9.3, 5.1.0, 6.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.3, 5.2.1&lt;/li&gt;
&lt;li&gt;IBM XL C++: 13.1.2.0&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 7.0.0&lt;/li&gt;
&lt;li&gt;GCC: 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0, 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang, C++11: 3.4.1, 3.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.5, 5.2.0, 6.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Header &lt;boost/io/ios_state.hpp&gt; -- ios_state : MarkdownからHTMLへの変換エラーを修正。 タグのミスマッチを修正したのと、HTMLコメントを削除。HTMLコメントは扱えない。</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html"/>
      <id>8ec6c87bcb1ea40793606dad21f9390f4007a1e5:archive/boost_docs/libs/io/ios_state.md</id>
      <updated>2015-12-25 16:28:31 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Header &amp;lt;boost/io/ios_state.hpp&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;boost/io/ios_state.hppは、C++の入出力ストリームシステムにおけるオブジェクトのストリーム状態を保持することを保証する。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#rationale&#34;&gt;Rationale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#header&#34;&gt;Header Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#base_savers&#34;&gt;Savers for Basic Standard Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#adv_savers&#34;&gt;Savers for Advanced Standard Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#user_savers&#34;&gt;Savers for User-Defined Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#combo_savers&#34;&gt;Savers for Combined Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#refer&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#credits&#34;&gt;Credits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;rationale&#34;&gt;Rationale&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;時々、ある値が制限されたスコープ内でのみ変化しなければならない時がある。
セーバークラス群は、オブジェクトの現在の状態（またはオブジェクトの様相）のコピーを保持し、デストラクト時にスコープ内で発生した変更を全て元通りにして、そのオブジェクトの状態を回復する。&lt;/p&gt;
&lt;p&gt;セーバークラスの戦略は、入出力ストリームオブジェクトを使う時に有効である。
マニピュレータオブジェクトは、入力または出力時のストリームの様相を変更できる。
普通マニピュレータによって入出力ストリームの状態を変更すると、処理が終わった後の次の値に対しても影響が残ってしまう。
これは、マニピュレータを外面的にはストリームの状態を変更しないと仮定している関数の中で使う場合に問題になるかもしれない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;ostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;ios&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;hex_my_byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os&lt;/code&gt; ストリームは、&lt;code&gt;hex_my_byte&lt;/code&gt;を呼んだ後も16進表記モードを保持し続ける。
ストリームの表記モードは、ストリームの状態を調べたり、変更するためのメンバー関数を手動で呼び出すことで変更されたり、元に戻されたりする。
この手動による方法は、メインとなる関数の性質が複雑、且つ／または例外安全である必要がある場合には扱いにくいものになってしまう。
セーバークラスを使うことで、「リソースの確保は初期化時に」というより優れた戦略を採ることができるようになる。&lt;/p&gt;
&lt;p&gt;セーバークラスを使ったより優れたコードの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#example&#34;&gt;例&lt;/a&gt;を下の方に示す。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;header&#34;&gt;Header Synopsis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iosfwd&amp;gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// for std::char_traits (declaration)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_flags_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_precision_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_width_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_base_all_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_iostate_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_exception_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_tie_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_rdbuf_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_fill_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_locale_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;basic_ios_all_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_iostate_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ios_iostate_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_iostate_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;wios_iostate_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_exception_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;ios_exception_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_exception_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;wios_exception_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_tie_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;ios_tie_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_tie_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;wios_tie_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_rdbuf_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;ios_rdbuf_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_rdbuf_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;wios_rdbuf_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_fill_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;ios_fill_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_fill_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;wios_fill_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_locale_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&#34;n&#34;&gt;ios_locale_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_locale_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;wios_locale_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_all_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;ios_all_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;basic_ios_all_saver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wchar_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;wios_all_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_iword_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_pword_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ios_all_word_saver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;base_savers&#34;&gt;Savers for Basic Standard Attributes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基本セーバークラスは、次のようなフォーマットを持っている。:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;saver_class&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation_defined&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;state_type&lt;/code&gt;は、入出力ストリーム基本クラスの&lt;code&gt;std::ios_base&lt;/code&gt;のことである。
ユーザが通常&lt;code&gt;state-type&lt;/code&gt;パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第２引数に新しい&lt;code&gt;aspect_type&lt;/code&gt;を指定することでストリームの属性を変更できる。
デストラクタはストリームの属性を保持しておいた状態に戻す。&lt;/p&gt;
&lt;h3&gt;Basic IOStreams State Saver Classes&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Saved Attribute&lt;/th&gt;
&lt;th&gt;Attribute Type&lt;/th&gt;
&lt;th&gt;Reading Method&lt;/th&gt;
&lt;th&gt;Writing Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::ios_flags_saver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Format control flags&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::ios_base::fmtflags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::ios_precision_saver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number of digits to print after decimal point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::streamsize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::ios_width_saver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Minimum field width for printing objects&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::streamsize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a name=&#34;adv_savers&#34;&gt;Savers for Advanced Standard Attributes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;セーバークラステンプレートは次のようなフォーマットを持つ:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;saver_class&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;basic_ios&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation_defined&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;state_type&lt;/code&gt;は、入出力ストリーム基本クラステンプレート&lt;code&gt;std::basic_ios&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;のことである。
ここで&lt;code&gt;Ch&lt;/code&gt;は、文字タイプ、&lt;code&gt;Tr&lt;/code&gt;は文字特性のことである。
ユーザが通常&lt;code&gt;state-type&lt;/code&gt;パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第２引数に新しい&lt;code&gt;aspect_type&lt;/code&gt;を指定することでストリームの属性を変更できる。
デストラクタはストリームの属性を保持しておいた状態に戻す。&lt;/p&gt;
&lt;h3&gt;Advanced IOStreams State Saver Class Templates&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class Template&lt;/th&gt;
&lt;th&gt;Saved Attribute&lt;/th&gt;
&lt;th&gt;Attribute Type&lt;/th&gt;
&lt;th&gt;Reading Method&lt;/th&gt;
&lt;th&gt;Writing Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_iostate_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Failure state of the stream &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#Note1&#34;&gt;[1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::ios_base::iostate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rdstate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_exception_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Which failure states trigger an exception &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#Note1&#34;&gt;[1]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::ios_base::iostate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exceptions&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_tie_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output stream synchronized with the stream&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::basic_ostream&amp;lt;Ch, Tr&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_rdbuf_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stream buffer associated with the stream &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#Note2&#34;&gt;[2]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::basic_streambuf&amp;lt;Ch, Tr&amp;gt; *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_fill_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Character used to pad oversized field widths&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::basic_ios_locale_saver&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Locale information associated with the stream &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#Note3&#34;&gt;[3]&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::locale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;getloc&lt;/code&gt; (from &lt;code&gt;std::ios_base&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;imbue&lt;/code&gt; (from &lt;code&gt;std::basic_ios&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;失敗状態フラグとフラグを監視している失敗状態例外の両方またはどちらかが変化した場合、もし２つのフラグが一致したら例外が投げられる。
  これは、&lt;a name=&#34;Note1&#34;&gt;これらのクラステンプレートのコンストラクタまたはデストラクタが例外を投げることを意味するかもしれない。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;関連ストリームバッファが変化した場合、もし指定したストリームバッファのアドレスがNULLでないならばストリームの失敗状態は&#34;good&#34;にリセットされるが、NULLだった場合には&#34;bad&#34;失敗状態がセットされる。
  NULLストリームバッファアドレスを指定した場合、もし&#34;bad&#34;失敗状態が監視されていると例外が投げられる。
  これは、&lt;a name=&#34;Note2&#34;&gt;このクラステンプレートのコンストラクタまたはデストラクタが例外を投げることを意味するかもしれない。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a name=&#34;Note3&#34;&gt;ロケール用のセーバーは、&lt;code&gt;std::ios_base&lt;/code&gt;の関数をロケール情報を取り出すために使用できたかもしれないが、そうはせずに&lt;code&gt;std::basic_ios&amp;lt;Ch, Tr&amp;gt;&lt;/code&gt;クラスを使用して情報を取り出している。&lt;/a&gt;
  この問題は、&lt;code&gt;basic_ios&lt;/code&gt;の中の必要とするメンバ関数が多態的に&lt;code&gt;basic_ios&lt;/code&gt;のそれに結びついていないためである。
  セーバークラスと共に使用されるストリームクラスは継承によってそれらに最も近いメンバ関数を使用するべきである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;user_savers&#34;&gt;Savers for User-Defined Attributes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ユーザー定義の情報の為のセーバークラスは、次のようなフォーマットを持つ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iosfwd&amp;gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// for std::ios_base (declaration)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;saver_class&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;                     &lt;span class=&#34;n&#34;&gt;index_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation_defined&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
              &lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aspect_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;saver_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;インデックス&lt;code&gt;i&lt;/code&gt;は、ユーザー定義の属性を区別するのに使用される。
インデックスは、実行時にのみ決定できる。
（それはおそらく静的メンバ関数&lt;code&gt;std::ios_base::xalloc&lt;/code&gt;と同時だろう。）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;state_type&lt;/code&gt;は、入出力ストリームシステムの基本クラス&lt;code&gt;std::ios_base&lt;/code&gt;である。
ユーザが通常&lt;code&gt;state-type&lt;/code&gt;パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第３引数に新しい&lt;code&gt;aspect_type&lt;/code&gt;を指定することでストリームの属性を変更できる。
デストラクタはストリームの属性を保持しておいた状態に戻す。&lt;/p&gt;
&lt;h3&gt;IOStream User-Defined State Saver Classes&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Saved Attribute&lt;/th&gt;
&lt;th&gt;Attribute Type&lt;/th&gt;
&lt;th&gt;Reference Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::ios_iword_saver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Numeric user-defined format flag&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iword&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::io::ios_pword_saver&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pointer user-defined format flag&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pword&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a name=&#34;combo_savers&#34;&gt;Savers for Combined Attributes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;属性セーバークラスを統合するために３つのクラス（テンプレート）がある。
&lt;code&gt;boost:io::ios_base_all_saver&lt;/code&gt;セーバークラスは、全ての基本属性セーバークラスの機能を統合している。
このクラスには引数に状態を保持させたいストリームを取ることのできるコンストラクタが一つある。
&lt;code&gt;boost::io::basic_ios_all_saver&lt;/code&gt;セーバークラスは、全ての高等属性セーバークラステンプレートの機能と基本属性セーバークラスを統合している。
このクラスには引数に状態を保持させたいストリームを取ることのできるコンストラクタが一つある。
&lt;code&gt;boost::io::ios_all_word_saver&lt;/code&gt;セーバークラスは、ユーザー定義の情報を保持するクラスを結合する。
このコンストラクタは、属性を保持させたいストリームとユーザーが定義した属性のインデックスを引数に取る。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;example&#34;&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html#rationale&#34;&gt;Rationale&lt;/a&gt;で使用したコードは２つの点で改善できる。
表示出力関数は書式設定状態を変更するコードの周りでセーバーを使えるかもしれない。
または関数の呼び出し側でその関数の周りをセーバーで囲むこともできる。
または両方を偏執症患者のために行うこともできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/io/ios_state.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;ios&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;ostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;new_hex_my_byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_flags_saver&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ifs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_all_saver&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ias&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;new_hex_my_byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;refer&#34;&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The I/O state saver library header itself: boost/io/ios_state.hpp&lt;/li&gt;
&lt;li&gt;Some test/example code: ios_state_test.cpp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;credits&#34;&gt;Credits&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/people/daryle_walker.html&#34;&gt;Daryle Walker&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリを開始した。
  フォーマットフラグ、精度、幅、そしてユーザー定義のフォーマットフラグを保持するクラスの初期バージョンに貢献した。
  成功状態、成功状態例外フラグ、出力ストリームタイ、ストリームバッファ、文字埋め、そしてロケールをセーブするクラステンプレートの初期バージョンに貢献した。
属性クラスとクラステンプレートを統合するのに貢献した。
テストファイルios_state_test.cppに貢献した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;history&#34;&gt;History&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;13 Mar 2002, Daryle Walker&lt;ul&gt;
&lt;li&gt;Initial version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Revised: 13 March 2002&lt;/p&gt;
&lt;p&gt;Copyright c Daryle Walker 2002.  Permission to copy, use,
modify, sell and distribute this document is granted provided this
copyright notice appears in all copies.  This document is provided
&#34;as is&#34; without express or implied warranty, and with no claim
as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 MINAMI Takeshi.
オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の
複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」
に提供されており、いかなる明示的、暗黙的保証も行わない。また、
いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.60.0リリースノート -- Boost 1.60.0リリースノート : Geometryを追加(close #60)</title>
      <link href="http://boostjp.github.io/document/version/1_60_0.html"/>
      <id>d6dba3033ddf785c0b546c97fb546faf76f531b1:document/version/1_60_0.md</id>
      <updated>2015-12-25 14:40:37 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.60.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_60_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_60_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_60_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_60_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hanaのリリースは延期&lt;/h2&gt;
&lt;p&gt;時間的な制約により、&lt;a href=&#34;https://github.com/boostorg/hana&#34; target=&#34;_blank&#34;&gt;Hana&lt;/a&gt;のリリースは、Boostの以降のリリースに延期となった。&lt;/p&gt;
&lt;p&gt;これによって、HanaがBoostの一部として正式にリリースする前に、いくつかの既知の問題に対処できる。詳細はメーリングリストを参照。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lib.boost.devel/263964&#34; target=&#34;_blank&#34;&gt;http://article.gmane.org/gmane.comp.lib.boost.devel/263964&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Boost.DLLのリリースは延期&lt;/h2&gt;
&lt;p&gt;めずらしいツールセットとプラットフォームのサポートを提供するために、Boost.DLLのリリースは、Boostの以降のリリースに延期となった。&lt;/p&gt;
&lt;p&gt;これによって、&lt;code&gt;boost::dll::shared_library&lt;/code&gt;インスタンスのコピー構築とコピー代入の機能も追加されてより良いテストができるようになり、非デフォルトの呼び出し規約の関数をインポートするサンプルも提供される。&lt;/p&gt;
&lt;p&gt;このライブラリの最新バージョンと開発ドキュメントは、以下のリポジトリにある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll&#34; target=&#34;_blank&#34;&gt;boostorg/dll - GitHubリポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Windowsユーザーへの注記&lt;/h2&gt;
&lt;p&gt;このリリースでのBoostは、コンパイラが最新のWindows SDKをサポートしていてWindows XP以外の場合に、Windows Vista/Windows Server 2008をデフォルトコンパイルとする。古いバージョンのWindowsでは、デフォルトのオプションでコンパイルされたバイナリを実行できなくなる。&lt;/p&gt;
&lt;p&gt;Windows APIのバージョン番号を&lt;code&gt;BOOST_USE_WINAPI_VERSION&lt;/code&gt;マクロを定義することによって、対象のWindowsバージョンを明示的に指定することもできる。たとえば、Windows XP向けにBoostをコンパイルするには、次のコマンドを使用する：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;b2 release define=BOOST_USE_WINAPI_VERSION=0x0501
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Windows APIのバージョン番号の一覧は、以下のページで確認できる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/6sehtctf.aspx&#34; target=&#34;_blank&#34;&gt;Modifying &lt;code&gt;WINVER&lt;/code&gt; and &lt;code&gt;_WIN32_WINNT&lt;/code&gt; - MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この変更は、BoostのWindows APIに対する抽象レイヤーを使用しているライブラリだけに影響する。現在は、以下のライブラリが対象である： Boost.Chrono、Boost.Dll、Boost.Log、Boost.UUID。これらのライブラリに依存するライブラリも対象となる。&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/vmd/&#34; target=&#34;_blank&#34;&gt;VMD&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;可変引数マクロデータライブラリ(Variadic Macro Data Library)&lt;/li&gt;
&lt;li&gt;作者 : Edward Diener&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;&amp;gt;&lt;/code&gt;のストレージに、適切なアラインメントを設定した。これによって、ネイティブのワードサイズより大きいデータ単位に対するアトミック操作のサポートに関する問題が修正される。&lt;/li&gt;
&lt;li&gt;IBM XL C++コンパイラでのPowerPC向けのコンパイルエラーを修正。PowerPCアセンブラのメモリバリアを正しいものにした。&lt;/li&gt;
&lt;li&gt;MSVC-8でのARM向けのコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10994&#34; target=&#34;_blank&#34;&gt;#10994&lt;/a&gt; 128ビットアトミック操作を使用したときの、gcc 4.4でのx86-64向けのコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;x86/x86-64向けのgccアセンブラブロックを最適化し、使用するレジスタ数を減らした。これはbinutils 2.10以降を必要とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; VC14 CTP4において、&lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;が&lt;code&gt;TriviallyCopyable&lt;/code&gt;ではないために、それを要素とする&lt;code&gt;atomic&lt;/code&gt;のコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; test_7868.cppで、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; time_point_output.cppで、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO State Saverが、Boost.IO State Saverと異なるインタフェースだったのを修正。コンストラクタの第1パラメータを、&lt;code&gt;state_type&lt;/code&gt;から&lt;code&gt;state_type&amp;amp;&lt;/code&gt;に変更した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、小数部が切り詰められる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2で、&lt;code&gt;boost::chrono::duration &amp;lt; boost::rational &amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;のコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準C++に提案されている、Polymorphic Memory Resourcesを実装した&lt;ul&gt;
&lt;li&gt;標準のドキュメントは以下：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html&#34; target=&#34;_blank&#34;&gt;C++ Extensions for Library Fundamentals (最新のドラフト仕様: N4480)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/files/papers/N3916.pdf&#34; target=&#34;_blank&#34;&gt;N3916 Polymorphic Memory Resources (r2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASSERT&lt;/code&gt;での事前条件のチェックを強化した(&lt;code&gt;pop_back()&lt;/code&gt;, &lt;code&gt;pop_front()&lt;/code&gt;, &lt;code&gt;back()&lt;/code&gt;, &lt;code&gt;front()&lt;/code&gt;、その他)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_string&lt;/code&gt;に、C++11の&lt;code&gt;back()&lt;/code&gt;と&lt;code&gt;front()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11627&#34; target=&#34;_blank&#34;&gt;Trac #11627&lt;/a&gt; &lt;code&gt;small_vector&amp;lt;T,n&amp;gt;::swap( )&lt;/code&gt;が壊れていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11628&#34; target=&#34;_blank&#34;&gt;Trac #11628&lt;/a&gt; 要素のデストラクタを呼ぶ必要のない&lt;code&gt;small_vector&amp;lt;int,n&amp;gt;&lt;/code&gt;で、要素のデストラクタが個別に呼び出されていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11697&#34; target=&#34;_blank&#34;&gt;Trac #11697&lt;/a&gt; 可変引数テンプレートのツールとして作成したタプルの初期化が、tail -&amp;gt; headの順になっていたので、head -&amp;gt; tailの順になるよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11698&#34; target=&#34;_blank&#34;&gt;Trac #11698&lt;/a&gt; &lt;code&gt;static_storage_allocator&lt;/code&gt;の&lt;code&gt;return&lt;/code&gt;文漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;flat_map&lt;/code&gt;のドキュメントで、計算量が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; dlmallocの実装で、アドレス取得がヌルチェックの中で行われていたために、アドレスを間接参照できない場合があったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11603&#34; target=&#34;_blank&#34;&gt;#11603&lt;/a&gt; PPC32/MACH-Oアセンブラの誤字を修正&lt;/li&gt;
&lt;li&gt;Cygwinをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シンボルのデマングルツールに、Android NDKのgabi++ ABIのサポートを追加&lt;/li&gt;
&lt;li&gt;入れ子型の存在をSFINAEチェックするためのツールとして、&lt;code&gt;enable_if_has_type&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以下の関数を追加した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path::lexically_normal()&lt;/code&gt; : パスの正規化を行う。正規化では、冗長なカレントディレクトリ(ドット)の指定や親ディレクトリ(ドット-ドット)の削除を行う。例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;foo/./bar/..&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;foo/.///bar/../&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo/.&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path::lexically_relative()&lt;/code&gt; : パラメータで指定されたパスから&lt;code&gt;*this&lt;/code&gt;のパスへの相対パスを求める。例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../../d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;/a/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c/x/y&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;../..&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b/c&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a/b&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lexically_relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;c/d&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;relative()&lt;/code&gt; : 第2パラメータのパスから第1パラメータのパスへの、相対パスを求める&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weakly_canonical()&lt;/code&gt; : パラメータで指定されたパスのシンボリックリンクを解決し、正規化した結果のパスを返す&lt;/li&gt;
&lt;li&gt;上記4関数の追加で協力してくれたJamie Allsop氏に、多大な感謝をする&lt;/li&gt;
&lt;li&gt;これによって解決したチケットは以下： &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1976&#34; target=&#34;_blank&#34;&gt;#1976&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5897&#34; target=&#34;_blank&#34;&gt;#5897&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6249&#34; target=&#34;_blank&#34;&gt;#6249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;path&lt;/code&gt;クラスに、&lt;code&gt;reverse_iterator&lt;/code&gt;と&lt;code&gt;const_reverse_iterator&lt;/code&gt;型を追加し、&lt;code&gt;rbegin()&lt;/code&gt;、&lt;code&gt;rend()&lt;/code&gt;メンバ関数を追加した&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Filesystem TSによって規定された、C++11の&lt;code&gt;noexcept&lt;/code&gt;を付加(コンパイラが&lt;code&gt;noexcept&lt;/code&gt;をサポートしていれば)&lt;/li&gt;
&lt;li&gt;Filesystem TSによって規定された、C++11のムーブコンストラクタとムーブ代入演算子を追加(コンパイラがムーブをサポートしていれば)&lt;/li&gt;
&lt;li&gt;Filesystem TSの規定に従って、関数の名前をいくつか変更した。現在は、古い名前と新しい名前、両方をサポートしている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6874&#34; target=&#34;_blank&#34;&gt;#6874&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;チケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11733&#34; target=&#34;_blank&#34;&gt;#11733&lt;/a&gt; boost/libs/filesystem/src/unique_path.cppでのunistd.hのインクルード漏れを修正。Idar Tollefsen氏によるパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5706&#34; target=&#34;_blank&#34;&gt;#5706&lt;/a&gt; WindowsのTemporary User Profilesで&lt;code&gt;unique_path()&lt;/code&gt;が失敗する問題を修正。Sebastian Redl氏によるpull requestを適用した(&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/15&#34; target=&#34;_blank&#34;&gt;pull request #15&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10591&#34; target=&#34;_blank&#34;&gt;#10591&lt;/a&gt; このライブラリを、iOS 8でビルドできない問題を修正。Daniel Seither氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9454&#34; target=&#34;_blank&#34;&gt;#9454&lt;/a&gt; &lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされていると、このライブラリをビルドできない問題を修正。Makesim氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11447&#34; target=&#34;_blank&#34;&gt;#11447&lt;/a&gt; &lt;code&gt;__OpenBSD__&lt;/code&gt;マクロ名が間違っていたのを修正。Jasper Lievisse Adriaanse氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11288&#34; target=&#34;_blank&#34;&gt;#11288&lt;/a&gt; 文字列の冗長なメモリ確保を回避した。Yevhen Ivannikov氏のパッチを適用した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11175&#34; target=&#34;_blank&#34;&gt;#11175&lt;/a&gt; 古いドキュメントが原因で、このライブラリが例外を無効にして使用できるとユーザーに期待させてしまっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11166&#34; target=&#34;_blank&#34;&gt;#11166&lt;/a&gt; &lt;code&gt;remove()&lt;/code&gt;関数の、競合の可能性を減らした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7258&#34; target=&#34;_blank&#34;&gt;#7258&lt;/a&gt; &lt;code&gt;create_directories()&lt;/code&gt;関数に指定されたパスの最後がスラッシュの場合に、&lt;code&gt;false&lt;/code&gt;を返してしまっていたので修正。それにともなって、パスに「&lt;code&gt;.&lt;/code&gt;」もしくは「&lt;code&gt;..&lt;/code&gt;」が含まれていた場合のテストを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10766&#34; target=&#34;_blank&#34;&gt;#10766&lt;/a&gt; 冗長な区切り文字が付いたパスに対して&lt;code&gt;parent_path()&lt;/code&gt;を呼び出すと、間違った値が返されていたという問題が報告されたが、これは動作としては正しかったので、ドキュメントにその動作を記載した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7607&#34; target=&#34;_blank&#34;&gt;#7607&lt;/a&gt; スラッシュで終わるパスのファイル名が「&lt;code&gt;.&lt;/code&gt;」であると推論される問題。この問題は、&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7258&#34; target=&#34;_blank&#34;&gt;#7258&lt;/a&gt;と&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10766&#34; target=&#34;_blank&#34;&gt;#10766&lt;/a&gt;で解決した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11061&#34; target=&#34;_blank&#34;&gt;#11061&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11062&#34; target=&#34;_blank&#34;&gt;#11062&lt;/a&gt; パスを逆順に辿ることができないという問題だが、これはreverse iterator機能の追加によって解決した&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;その他修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCCのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のバグを修正 : 1引数以外のコンストラクタを非&lt;code&gt;explicit&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;リファレンスドキュメントを整理した : 残りのドキュメントにも、同じスタイルシートを適用した。タブのフォントサイズを調整した。テーブル内の長すぎる行を修正した&lt;/li&gt;
&lt;li&gt;Jonathan Wakely氏とMarcel Raad氏からのpull requestを含む、小さい修正を行った。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正を行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全てのFusionコンテナとジェネレータはC++11の可変長テンプレートをサポートした。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/89&#34; target=&#34;_blank&#34;&gt;pull-request 89&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/97&#34; target=&#34;_blank&#34;&gt;pull-request 97&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/100&#34; target=&#34;_blank&#34;&gt;pull-request 100&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::vector&lt;/code&gt;に関する注意&lt;ul&gt;
&lt;li&gt;実装上の理由により、番号付きのvector(つまり&lt;code&gt;fusion::vectorN&lt;/code&gt;の形)はC++11のエイリアステンプレートを使って提供され、C++11以降ではdeprecatedとなる。
  この場合、いくつかの部分特殊化がコンパイルエラーとなる為、&lt;code&gt;BOOST_FUSION_HAS_VARIADIC_VECTOR&lt;/code&gt;マクロを使用して実装を切り替えなければならない(&lt;a href=&#34;https://github.com/boostorg/spirit/pull/158/files#diff-250ce096dee927d2b7eb5a4e24afb8cd&#34; target=&#34;_blank&#34;&gt;Spiritへのpull request&lt;/a&gt;を参照されたい)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fusion::nview&lt;/code&gt;はC++11の可変長テンプレートをサポートした。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/90&#34; target=&#34;_blank&#34;&gt;pull-request 90&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fusion::fold&lt;/code&gt;がSFINAE-friendlyとなった。(&lt;a href=&#34;https://github.com/boostorg/fusion/pull/102&#34; target=&#34;_blank&#34;&gt;pull-request 102&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Fusionシーケンスを&lt;code&gt;fusion::deque&lt;/code&gt;へ変換できなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11572&#34; target=&#34;_blank&#34;&gt;#11572&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(ドキュメント) 関数の戻り値の型が正しくなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3358&#34; target=&#34;_blank&#34;&gt;#3358&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;のパフォーマンスを改善し、あらゆる未定義動作を削除した。異なるコンパイラでの特殊ケースが必要なくなった。&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11699&#34; target=&#34;_blank&#34;&gt;Trac #11699&lt;/a&gt; Visual Studio 2015のバグにより、標準クラステンプレートの先行宣言がコンパイルエラーになっていたので、ワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10803&#34; target=&#34;_blank&#34;&gt;#10803&lt;/a&gt; &lt;code&gt;union_()&lt;/code&gt;アルゴリズムが、不正なジオメトリを返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11522&#34; target=&#34;_blank&#34;&gt;#11522&lt;/a&gt; &lt;code&gt;traits::detail&lt;/code&gt;名前空間の&lt;code&gt;buffer&lt;/code&gt;が名前衝突していたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11533&#34; target=&#34;_blank&#34;&gt;#11533&lt;/a&gt; &lt;code&gt;rtree&lt;/code&gt;の最小要素数が1の場合に&lt;code&gt;remove()&lt;/code&gt;関数を呼び出すと、アサートに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11607&#34; target=&#34;_blank&#34;&gt;#11607&lt;/a&gt; &lt;code&gt;geometry::exception::what()&lt;/code&gt;が&lt;code&gt;private&lt;/code&gt;になっていたので、&lt;code&gt;public&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11709&#34; target=&#34;_blank&#34;&gt;#11709&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;でセグメンテーション違反が発生する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11710&#34; target=&#34;_blank&#34;&gt;#11710&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;に空のジオメトリを与えるとセグメンテーション違反が発生していたので、&lt;code&gt;true&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11711&#34; target=&#34;_blank&#34;&gt;#11711&lt;/a&gt; &lt;code&gt;is_simple()&lt;/code&gt;と&lt;code&gt;is_valid()&lt;/code&gt;に、NaNやInfinityを含むジオメトリを与えても&lt;code&gt;true&lt;/code&gt;が返ってきていたので、&lt;code&gt;false&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ほかのポリゴンにtouchする部分の、interior ringとexterior ringのコロケーション(colocations)を修正&lt;/li&gt;
&lt;li&gt;空の&lt;code&gt;rtree&lt;/code&gt;に対して&lt;code&gt;remove()&lt;/code&gt;関数を呼び出した際に、アサート失敗するのではなく、何もせずに&lt;code&gt;0&lt;/code&gt;を返すよう修正&lt;/li&gt;
&lt;li&gt;空のジオメトリをひとつだけ含むmulti geometriesに対する&lt;code&gt;centroid()&lt;/code&gt;の呼び出しによって、セグメンテーション違反が発生する問題を修正(Jiri Drbalek氏に感謝)&lt;/li&gt;
&lt;li&gt;整数座標系の&lt;code&gt;liang_barsky&lt;/code&gt; strategyを修正(Dane Springmeyer氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;順序付き連想コンテナでの「&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/intrusive/advanced_lookups_insertions.html&#34; target=&#34;_blank&#34;&gt;高度な検索と挿入&lt;/a&gt;」に、比較関数のサポートを追加した。&lt;code&gt;key_compare&lt;/code&gt;と同じ「狭義の弱順序(strict weak ordering)」を提供することなしに、比較関数オブジェクトでコンテナを分割できる。&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11701&#34; target=&#34;_blank&#34;&gt;Boost Trac #11701&lt;/a&gt; &lt;code&gt;boost::intrusive::set::equal_range&lt;/code&gt;のレギュレッション&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11765&#34; target=&#34;_blank&#34;&gt;Boost Trac #11765&lt;/a&gt; sgtreeのテストコードが不正だったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブのみできる型を使用することができなくなっていたのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11570&#34; target=&#34;_blank&#34;&gt;#11570&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_LCAST_NO_COMPILE_TIME_PRECISION&lt;/code&gt;が定義されていた際にクラッシュしていたのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11669&#34; target=&#34;_blank&#34;&gt;#11669&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11570&#34; target=&#34;_blank&#34;&gt;#11570&lt;/a&gt;と&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4946&#34; target=&#34;_blank&#34;&gt;#4946&lt;/a&gt;で指摘されていた幾つかの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックな&lt;code&gt;codecvt&lt;/code&gt;ファセットと、汎用的な目的に使用できる&lt;code&gt;utf8_codecvt&lt;/code&gt;ファセットを実装した&lt;/li&gt;
&lt;li&gt;FreeBSD 10.0と上記の機能向けに、POSIXのロケールをサポートした&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10017&#34; target=&#34;_blank&#34;&gt;#10017&lt;/a&gt; &lt;code&gt;sun&lt;/code&gt;をSunOSに向けて再定義した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11163&#34; target=&#34;_blank&#34;&gt;#11163&lt;/a&gt; &lt;code&gt;set_default_messages_domain()&lt;/code&gt;の不正な振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11673&#34; target=&#34;_blank&#34;&gt;#11673&lt;/a&gt; ビルドの問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;最新のICUバージョンでのテストを修正&lt;/li&gt;
&lt;li&gt;libc++の問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;BOOST_LOCALE_ENABLE_CHAR16_T&lt;/code&gt;と&lt;code&gt;BOOST_LOCALE_ENABLE_CHAR32_T&lt;/code&gt;を追加。これは、C++11が有効であれば&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;に置き換えられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;全体的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows環境で、構成マクロ&lt;code&gt;BOOST_LOG_USE_WINNT6_API&lt;/code&gt;は使われなくなる。ターゲット環境を設定するマクロ&lt;code&gt;BOOST_USE_WINAPI_VERSION&lt;/code&gt;を定義することによって、Windowsのバージョンを設定する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11559&#34; target=&#34;_blank&#34;&gt;#11559&lt;/a&gt; AndroidでのGoogle NDKのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11549&#34; target=&#34;_blank&#34;&gt;#11549&lt;/a&gt; ロギング文のいくつかのコンパイルエラーを修正。ストリームに入れる最初のオブジェクトは、&lt;code&gt;formatting_ostream&lt;/code&gt;がサポートされていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11549&#34; target=&#34;_blank&#34;&gt;#11549&lt;/a&gt; Solaris Studio 12.4向けのワークアラウンドを追加。&lt;code&gt;formatting_ostream&lt;/code&gt;のコンパイルエラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11541&#34; target=&#34;_blank&#34;&gt;#11541&lt;/a&gt; ネイティブの&lt;code&gt;wchar_t&lt;/code&gt;を無効にしたときのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;POSIXライクシステム上での、&lt;code&gt;boost_log_setup&lt;/code&gt;ライブラリからのエクスポートシンボルを修正&lt;/li&gt;
&lt;li&gt;character decoratorsのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11691&#34; target=&#34;_blank&#34;&gt;#11691&lt;/a&gt; ファイル名にdate/timeのプレースホルダが含まれている場合に、text file sink backendで不正なファイル名であると判定される問題に対するワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらなる詳細は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11615&#34; target=&#34;_blank&#34;&gt;#11615&lt;/a&gt;: type_traits.hppで&lt;code&gt;std::size_t&lt;/code&gt;を完全修飾せず使っている場所があったので修正&lt;ul&gt;
&lt;li&gt;訳者註: &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt; ヘッダをインクルードしてもグローバル名前空間に&lt;code&gt;size_t&lt;/code&gt;が存在するとは限らない為、一部の標準ライブラリ実装ではコンパイルできない問題があった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな定義である&lt;code&gt;foreach&lt;/code&gt;マクロ名による、&lt;a href=&#34;http://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qtフレームワーク&lt;/a&gt;との相互運用の問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正を行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#odeint&#34; name=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;あまりにも多くのODEステップが実行された場合に、例外を送出する機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%80%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E6%9C%89%E9%99%90%E8%A6%81%E7%B4%A0%E6%B3%95&#34; target=&#34;_blank&#34;&gt;アダプティブ法(adaptive method)&lt;/a&gt;の最大ステップサイズを制限する機能を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかのバグを修正 : &lt;a href=&#34;https://github.com/headmyshoulder/odeint-v2/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/headmyshoulder/odeint-v2/issues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;訳注 : どのバージョンでなにが直ったのかわからなかったので、バグ修正の詳細は記載しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11203&#34; target=&#34;_blank&#34;&gt;#11203&lt;/a&gt; &lt;code&gt;boost::none&lt;/code&gt;の実装を再度変更した。内部リンケージの&lt;code&gt;const&lt;/code&gt;オブジェクトとした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIMDハードウェアの検出機能を追加。&lt;code&gt;BOOST_HW_*&lt;/code&gt;マクロを使用する(Charly Chevalier氏に感謝)&lt;/li&gt;
&lt;li&gt;クロスコンパイルのチェックを行うための、コンパイルのみ行うユーティリティを追加&lt;/li&gt;
&lt;li&gt;テストの警告を修正&lt;/li&gt;
&lt;li&gt;Windowsプラットフォームの、&lt;code&gt;AVAILABLE&lt;/code&gt;マクロの誤字を修正(Vemund Handeland氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインのインタフェースを改善&lt;/li&gt;
&lt;li&gt;データセットのAPIを改善 : データセットの生成に初期化子リストを使用できるようにし、データセットの構築をより容易にした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正とリクエスト&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3384&#34; target=&#34;_blank&#34;&gt;#3384&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6032&#34; target=&#34;_blank&#34;&gt;#6032&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10317&#34; target=&#34;_blank&#34;&gt;#10317&lt;/a&gt; ダブルクォーテーションで囲まれた引数が、スペースで分割されてしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6859&#34; target=&#34;_blank&#34;&gt;#6859&lt;/a&gt; コマンドラインの、最後の空パラメータが無視される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11279&#34; target=&#34;_blank&#34;&gt;#11279&lt;/a&gt; 不正なパラメータを渡した際に、それが報告されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11478&#34; target=&#34;_blank&#34;&gt;#11478&lt;/a&gt; アサーションの失敗で送出される例外のメッセージが固定文言のため、原因がわからなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11571&#34; target=&#34;_blank&#34;&gt;#11571&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11625&#34; target=&#34;_blank&#34;&gt;#11625&lt;/a&gt; &lt;code&gt;BOOST_TEST( ..., per_element() )&lt;/code&gt;で、コンテナの比較ができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11623&#34; target=&#34;_blank&#34;&gt;#11623&lt;/a&gt; Clangで&lt;code&gt;BOOST_TEST()&lt;/code&gt;のコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11624&#34; target=&#34;_blank&#34;&gt;#11624&lt;/a&gt; C++11モードのGCCとClangで、&lt;code&gt;BOOST_TEST( 0.0 == 0.0 )&lt;/code&gt;というテストが失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.6.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11231&#34; target=&#34;_blank&#34;&gt;#11231&lt;/a&gt; &lt;code&gt;future&lt;/code&gt;のデストラクタをブロッキングしないよう設定する機能を追加。&lt;code&gt;BOOST_THREAD_FUTURE_BLOCKING&lt;/code&gt;をdefineする&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11424&#34; target=&#34;_blank&#34;&gt;#11424&lt;/a&gt; &lt;code&gt;shared_mutex&lt;/code&gt;の名前変更として&lt;code&gt;shared_timed_mutex&lt;/code&gt;を提供し、元のtimed mutex機能付きの&lt;code&gt;shared_mutex&lt;/code&gt;を非推奨とした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11734&#34; target=&#34;_blank&#34;&gt;#11734&lt;/a&gt; &lt;code&gt;future::then(Cont)&lt;/code&gt;を、可能であればスレッドを引き継いで実行するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11736&#34; target=&#34;_blank&#34;&gt;#11736&lt;/a&gt; &lt;code&gt;launch::executor&lt;/code&gt;を&lt;code&gt;future::then(launch::executor, cont)&lt;/code&gt;のように使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11737&#34; target=&#34;_blank&#34;&gt;#11737&lt;/a&gt; &lt;code&gt;launch::inherit&lt;/code&gt;ポリシーを追加した。これを使用することにより、親の&lt;code&gt;then()&lt;/code&gt;で指定されたポリシーを引き継げるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/3926&#34; target=&#34;_blank&#34;&gt;#3926&lt;/a&gt; &lt;code&gt;thread_specific_ptr&lt;/code&gt;とdlopenライブラリの組み合わせでセグメンテーションフォルトとなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6377&#34; target=&#34;_blank&#34;&gt;#6377&lt;/a&gt; 時間が変更されると条件変数がブロックする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時間が逆行すると、&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7665&#34; target=&#34;_blank&#34;&gt;#7665&lt;/a&gt; &lt;code&gt;this_thread::sleep_for()&lt;/code&gt;が&lt;code&gt;steady_clock&lt;/code&gt;を使用していなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7720&#34; target=&#34;_blank&#34;&gt;#7720&lt;/a&gt; &lt;code&gt;mutex&lt;/code&gt;の集中的なロック取得／解除で&lt;code&gt;lock_error&lt;/code&gt;例外が送出される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9309&#34; target=&#34;_blank&#34;&gt;#9309&lt;/a&gt; clang-darwin-tot11環境で、test_latchがたまに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10788&#34; target=&#34;_blank&#34;&gt;#10788&lt;/a&gt; &lt;code&gt;GetLogicalProcessor&lt;/code&gt;が、Windowsプラットフォームの&lt;code&gt;0x0502&lt;/code&gt;以下では使用できなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11090&#34; target=&#34;_blank&#34;&gt;#11090&lt;/a&gt; ex_future_unwrapが、ThreadSanitizerによると、ロック取得の順番によってデッドロックする可能性があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11158&#34; target=&#34;_blank&#34;&gt;#11158&lt;/a&gt; pthreadのスレッドが、faketimeを使用するとデッドロックする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11174&#34; target=&#34;_blank&#34;&gt;#11174&lt;/a&gt; &lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;で無限に待つと、述語が突然起床することがある問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11185&#34; target=&#34;_blank&#34;&gt;#11185&lt;/a&gt; ドキュメントのURLリダイレクトが間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11192&#34; target=&#34;_blank&#34;&gt;#11192&lt;/a&gt; &lt;code&gt;boost::future::then()&lt;/code&gt;と&lt;code&gt;executor&lt;/code&gt;を組み合わせると、コンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11250&#34; target=&#34;_blank&#34;&gt;#11250&lt;/a&gt; &lt;code&gt;make_exceptional()&lt;/code&gt;で作った&lt;code&gt;future&lt;/code&gt;オブジェクトが、そのデストラクタでアサーション失敗していたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11256&#34; target=&#34;_blank&#34;&gt;#11256&lt;/a&gt; 継続関数内で&lt;code&gt;future&amp;lt;&amp;gt;::is_ready() == false&lt;/code&gt;となる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11261&#34; target=&#34;_blank&#34;&gt;#11261&lt;/a&gt; &lt;code&gt;basic_thread_pool&lt;/code&gt;内でスコープ付きスレッドの使い方が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11262&#34; target=&#34;_blank&#34;&gt;#11262&lt;/a&gt; &lt;code&gt;shared_state_nullary_task&lt;/code&gt;内で直接的なポインタの使い方が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11263&#34; target=&#34;_blank&#34;&gt;#11263&lt;/a&gt; いくつかのアンロック操作が不足していたために、&lt;code&gt;lock()&lt;/code&gt;関数で「すれにロックされている」という例外が発生する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11266&#34; target=&#34;_blank&#34;&gt;#11266&lt;/a&gt; &lt;code&gt;boost::packaged_task&lt;/code&gt;クラスの可変引数シグニチャが間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11302&#34; target=&#34;_blank&#34;&gt;#11302&lt;/a&gt; &lt;code&gt;BOOST_THREAD_PATCH&lt;/code&gt;をdefineするとビルドが通らなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11322&#34; target=&#34;_blank&#34;&gt;#11322&lt;/a&gt; &lt;code&gt;sleep_for()&lt;/code&gt;のナノ秒オーバーロードを使用すると、Windows上で返ってくるのが早すぎる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11329&#34; target=&#34;_blank&#34;&gt;#11329&lt;/a&gt; &lt;code&gt;GetProcessHeap()&lt;/code&gt;のusingディレクティブが失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11368&#34; target=&#34;_blank&#34;&gt;#11368&lt;/a&gt; sleep操作で起床しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11377&#34; target=&#34;_blank&#34;&gt;#11377&lt;/a&gt; pthread環境上でシステム時間を変更すると、条件変数が永遠に待ってしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11435&#34; target=&#34;_blank&#34;&gt;#11435&lt;/a&gt; future.hppの、GCCでの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11555&#34; target=&#34;_blank&#34;&gt;#11555&lt;/a&gt; devector.hppが、&lt;code&gt;allocator_traits_type&lt;/code&gt;の存在を前提としていたので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11562&#34; target=&#34;_blank&#34;&gt;#11562&lt;/a&gt; タイマー起動後にシステム時間を設定すると、タイマーがすぐに切れる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11672&#34; target=&#34;_blank&#34;&gt;#11672&lt;/a&gt; 内部実装で、&lt;code&gt;auto_ptr&lt;/code&gt;の代わりに&lt;code&gt;unique_ptr&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11688&#34; target=&#34;_blank&#34;&gt;#11688&lt;/a&gt; &lt;code&gt;thread::try_join_until()&lt;/code&gt;で、システム時間が変更された場合のbusy waitを待機&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11672&#34; target=&#34;_blank&#34;&gt;#11716&lt;/a&gt; &lt;code&gt;then()&lt;/code&gt;が、親のexecutorを引き継ぐようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_60_0.html#uuid&#34; name=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UUIDを比較する際にクラッシュを引き起こす可能性のあるMSVC codegenのバグに対する、ワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;MSVCのコンパイラスイッチを使って、AVXが有効かどうかを検出できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.6&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.8.4, 4.9.3, 5.1.0, 5.2.1&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0, 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2, 3.6.0, 3.8.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.7.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.9.3, 5.1.0, 6.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.3, 5.2.1&lt;/li&gt;
&lt;li&gt;IBM XL C++: 13.1.2.0&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 7.0.0&lt;/li&gt;
&lt;li&gt;GCC: 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0, 5.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang, C++11: 3.4.1, 3.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.5, 5.2.0, 6.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Input/Output Library -- Merge pull request #59 from graighle/transplant_old_boostjp_io
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/io/index.html"/>
      <id>f0503623a288a0c43f18afd082d4d9a799d324e8:archive/boost_docs/libs/io/index.md</id>
      <updated>2015-12-23 14:43:59 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost Input/Output Library&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;&amp;lt;!-- &amp;lt;p&amp;gt;The I/O sub-library of Boost helps segregate the large number of
Boost headers.  This sub-library should contain various items to use
with/for the standard I/O library.&amp;lt;/p&amp;gt; --&amp;gt;&lt;/p&gt;
&lt;p&gt;Boost の入出力サブライブラリは、非常に多くの Boost ヘッダーを分離するのに役立つ。
このサブライブラリは、標準入出力ライブラリと一緒に使ったり、標準入出力ライブラリの為に使ったりする様々なアイテムを含んでいるだろう。&lt;/p&gt;
&lt;p&gt;Revised: 26 Feb 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
    <entry>
      <title>ios_state.md -- Merge pull request #59 from graighle/transplant_old_boostjp_io
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html"/>
      <id>f0503623a288a0c43f18afd082d4d9a799d324e8:archive/boost_docs/libs/io/ios_state.md</id>
      <updated>2015-12-23 14:43:59 +0900
</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/io/ios_state.md b/archive/boost_docs/libs/io/ios_state.md
new file mode 100644
index 0000000..dab13df
--- /dev/null
+++ b/archive/boost_docs/libs/io/ios_state.md
@@ -0,0 +1,439 @@
+&amp;lt;!--
+&amp;lt;p&amp;gt;The header &amp;lt;cite&amp;gt;&amp;lt;a
+href=&amp;#34;../../../boost/io/ios_state.hpp&amp;#34;&amp;gt;boost/io/ios_state.hpp&amp;lt;/a&amp;gt;&amp;lt;/cite&amp;gt;
+covers saving the stream state of objects in the C++ IOStreams
+system.&amp;lt;/p&amp;gt;
+--&amp;gt;
+
+#Header &amp;amp;lt;boost/io/ios_state.hpp&amp;amp;gt;
+
+boost/io/ios_state.hppは、C++の入出力ストリームシステムにおけるオブジェクトのストリーム状態を保持することを保証する。
+
+
+##目次
+- [Rationale](#rationale)
+- [Header Synopsis](#header)
+- [Savers for Basic Standard Attributes](#base_savers)
+- [Savers for Advanced Standard Attributes](#adv_savers)
+- [Savers for User-Defined Attributes](#user_savers)
+- [Savers for Combined Attributes](#combo_savers)
+- [Example](#example)
+- [References](#refer)
+- [Credits](#credits)
+    - [Contributors](#contributors)
+    - [History](#history)
+
+##&amp;lt;a name=&amp;#34;rationale&amp;#34;&amp;gt;Rationale&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;Sometimes a certain value has to change only for a limited scope. 
+Saver classes save a copy of the current state of some object (or an
+aspect of an object), and reset the object&amp;#39;s state at destruction time,
+undoing any change the object may have gone through.&amp;lt;/p&amp;gt;
+--&amp;gt;
+時々、ある値が制限されたスコープ内でのみ変化しなければならない時がある。
+セーバークラス群は、オブジェクトの現在の状態（またはオブジェクトの様相）のコピーを保持し、デストラクト時にスコープ内で発生した変更を全て元通りにして、そのオブジェクトの状態を回復する。
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The saver class strategy is helpful when using I/O stream objects. 
+Manipulator objects can change some aspect of a stream during input or
+output.  The state changed by the manipulator usually sticks to its new
+value after the I/O transaction.  This can be a problem if manipulators
+are used in a function that is not supposed to externally change a
+stream&amp;#39;s state.&amp;lt;/p&amp;gt;
+--&amp;gt;
+セーバークラスの戦略は、入出力ストリームオブジェクトを使う時に有効である。
+マニピュレータオブジェクトは、入力または出力時のストリームの様相を変更できる。
+普通マニピュレータによって入出力ストリームの状態を変更すると、処理が終わった後の次の値に対しても影響が残ってしまう。
+これは、マニピュレータを外面的にはストリームの状態を変更しないと仮定している関数の中で使う場合に問題になるかもしれない。
+
+```cpp
+#include &amp;lt;ostream&amp;gt;
+#include &amp;lt;ios&amp;gt;
+
+void  hex_my_byte( std::ostream &amp;amp;os, char byte )
+{
+    os &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; static_cast&amp;lt;unsigned&amp;gt;(byte);
+}
+```
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;os&amp;lt;/var&amp;gt; stream will retain its new hexadecimal printing
+mode after the call to &amp;lt;code&amp;gt;hex_my_byte&amp;lt;/code&amp;gt;.  The stream&amp;#39;s printing
+mode can be saved and restored with manual calls to the stream&amp;#39;s state
+inspecting and mutating member functions.  The manual method becomes
+unwieldy if the main functionality is complex and/or needs to be
+exception safe.  A saver class can implement the better &amp;amp;quot;resource
+acquisition is initialization&amp;amp;quot; strategy.&amp;lt;/p&amp;gt;
+--&amp;gt;
+`os` ストリームは、`hex_my_byte`を呼んだ後も16進表記モードを保持し続ける。
+ストリームの表記モードは、ストリームの状態を調べたり、変更するためのメンバー関数を手動で呼び出すことで変更されたり、元に戻されたりする。
+この手動による方法は、メインとなる関数の性質が複雑、且つ／または例外安全である必要がある場合には扱いにくいものになってしまう。
+セーバークラスを使うことで、「リソースの確保は初期化時に」というより優れた戦略を採ることができるようになる。
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;See the &amp;lt;a href=&amp;#34;#example&amp;#34;&amp;gt;example&amp;lt;/a&amp;gt; below for better code, using
+saver classes.&amp;lt;/p&amp;gt;
+--&amp;gt;
+セーバークラスを使ったより優れたコードの[例](#example)を下の方に示す。
+
+##&amp;lt;a name=&amp;#34;header&amp;#34;&amp;gt;Header Synopsis&amp;lt;/a&amp;gt;
+
+```cpp
+#include &amp;lt;iosfwd&amp;gt;  // for std::char_traits (declaration)
+
+namespace boost
+{
+namespace io
+{
+
+class ios_flags_saver;
+class ios_precision_saver;
+class ios_width_saver;
+class ios_base_all_saver;
+
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_iostate_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_exception_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_tie_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_rdbuf_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_fill_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_locale_saver;
+template &amp;lt; typename Ch, class Tr = ::std::char_traits&amp;lt;Ch&amp;gt; &amp;gt;
+    class basic_ios_all_saver;
+
+typedef basic_ios_iostate_saver&amp;lt;char&amp;gt;        ios_iostate_saver;
+typedef basic_ios_iostate_saver&amp;lt;wchar_t&amp;gt;    wios_iostate_saver;
+typedef basic_ios_exception_saver&amp;lt;char&amp;gt;      ios_exception_saver;
+typedef basic_ios_exception_saver&amp;lt;wchar_t&amp;gt;  wios_exception_saver;
+typedef basic_ios_tie_saver&amp;lt;char&amp;gt;            ios_tie_saver;
+typedef basic_ios_tie_saver&amp;lt;wchar_t&amp;gt;        wios_tie_saver;
+typedef basic_ios_rdbuf_saver&amp;lt;char&amp;gt;          ios_rdbuf_saver;
+typedef basic_ios_rdbuf_saver&amp;lt;wchar_t&amp;gt;      wios_rdbuf_saver;
+typedef basic_ios_fill_saver&amp;lt;char&amp;gt;           ios_fill_saver;
+typedef basic_ios_fill_saver&amp;lt;wchar_t&amp;gt;       wios_fill_saver;
+typedef basic_ios_locale_saver&amp;lt;char&amp;gt;         ios_locale_saver;
+typedef basic_ios_locale_saver&amp;lt;wchar_t&amp;gt;     wios_locale_saver;
+typedef basic_ios_all_saver&amp;lt;char&amp;gt;            ios_all_saver;
+typedef basic_ios_all_saver&amp;lt;wchar_t&amp;gt;        wios_all_saver;
+
+class ios_iword_saver;
+class ios_pword_saver;
+class ios_all_word_saver;
+
+}
+}
+```
+
+##&amp;lt;a name=&amp;#34;base_savers&amp;#34;&amp;gt;Savers for Basic Standard Attributes&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The basic saver classes have this format:&amp;lt;/p&amp;gt;
+--&amp;gt;
+基本セーバークラスは、次のようなフォーマットを持っている。:
+
+```cpp
+class saver_class
+{
+    typedef std::ios_base           state_type;
+    typedef implementation_defined  aspect_type;
+
+    explicit  saver_class( state_type &amp;amp;s );
+              saver_class( state_type &amp;amp;s, aspect_type const &amp;amp;new_value );
+             ~saver_class();
+};
+```
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;state_type&amp;lt;/var&amp;gt; is the IOStreams base class
+&amp;lt;code&amp;gt;std::ios_base&amp;lt;/code&amp;gt;.  The user would usually place an actual
+input, output, or combined stream object for the state-type parameter,
+and not a base class object.  The first constructor takes a stream
+object and saves a reference to the stream and the current value of a
+particular stream attribute.  The second constructor works like the
+first, and uses its second argument to change the stream&amp;#39;s attribute to
+the new &amp;lt;var&amp;gt;aspect_type&amp;lt;/var&amp;gt; value given.  The destructor changes the
+stream&amp;#39;s attribute back to the saved value.&amp;lt;/p&amp;gt;
+--&amp;gt;
+`state_type`は、入出力ストリーム基本クラスの`std::ios_base`のことである。
+ユーザが通常`state-type`パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
+最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
+２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第２引数に新しい`aspect_type`を指定することでストリームの属性を変更できる。
+デストラクタはストリームの属性を保持しておいた状態に戻す。
+
+###Basic IOStreams State Saver Classes
+| Class | Saved Attribute | Attribute Type | Reading Method | Writing Method |
+|---|---|---|---|---|
+| `boost::io::ios_flags_saver` | Format control flags | `std::ios_base::fmtflags` | `flags` | `flags` |
+| `boost::io::ios_precision_saver` | Number of digits to print after decimal point | `std::streamsize` | `precision` | `precision` |
+| `boost::io::ios_width_saver` | Minimum field width for printing objects | `std::streamsize` | `width` | `width` |
+
+##&amp;lt;a name=&amp;#34;adv_savers&amp;#34;&amp;gt;Savers for Advanced Standard Attributes&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The saver class templates have this format:&amp;lt;/p&amp;gt;
+--&amp;gt;
+セーバークラステンプレートは次のようなフォーマットを持つ:
+
+```cpp
+template &amp;lt; typename Ch, class Tr &amp;gt;
+class saver_class
+{
+    typedef std::basic_ios&amp;lt;Ch, Tr&amp;gt;  state_type;
+    typedef implementation_defined  aspect_type;
+
+    explicit  saver_class( state_type &amp;amp;s );
+              saver_class( state_type &amp;amp;s, aspect_type const &amp;amp;new_value );
+             ~saver_class();
+};
+```
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;state_type&amp;lt;/var&amp;gt; is a version of the IOStreams base class
+template &amp;lt;code&amp;gt;std::basic_ios&amp;amp;lt;Ch, Tr&amp;amp;gt;&amp;lt;/code&amp;gt;, where
+&amp;lt;code&amp;gt;Ch&amp;lt;/code&amp;gt; is a character type and &amp;lt;code&amp;gt;Tr&amp;lt;/code&amp;gt; is a character
+traits class.  The user would usually place an actual input, output, or
+combined stream object for the state-type parameter, and not a base
+class object.  The first constructor takes a stream object and saves a
+reference to the stream and the current value of a particular stream
+attribute.  The second constructor works like the first, and uses its
+second argument to change the stream&amp;#39;s attribute to the new
+&amp;lt;var&amp;gt;aspect_type&amp;lt;/var&amp;gt; value given.  The destructor changes the stream&amp;#39;s
+attribute back to the saved value.&amp;lt;/p&amp;gt;
+--&amp;gt;
+`state_type`は、入出力ストリーム基本クラステンプレート`std::basic_ios&amp;lt;Ch, Tr&amp;gt;`のことである。
+ここで`Ch`は、文字タイプ、`Tr`は文字特性のことである。
+ユーザが通常`state-type`パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
+最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
+２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第２引数に新しい`aspect_type`を指定することでストリームの属性を変更できる。
+デストラクタはストリームの属性を保持しておいた状態に戻す。
+
+###Advanced IOStreams State Saver Class Templates
+| Class Template | Saved Attribute | Attribute Type | Reading Method | Writing Method |
+|---|---|---|---|---|
+| `boost::io::basic_ios_iostate_saver&amp;lt;Ch, Tr&amp;gt;` | Failure state of the stream [[1]](#Note1) | `std::ios_base::iostate` | `rdstate` | `clear` |
+| `boost::io::basic_ios_exception_saver&amp;lt;Ch, Tr&amp;gt;` | Which failure states trigger an exception [[1]](#Note1) | `std::ios_base::iostate` | `exceptions` | `exceptions` |
+| `boost::io::basic_ios_tie_saver&amp;lt;Ch, Tr&amp;gt;` | Output stream synchronized with the stream | `std::basic_ostream&amp;lt;Ch, Tr&amp;gt; *` | `tie` | `tie` |
+| `boost::io::basic_ios_rdbuf_saver&amp;lt;Ch, Tr&amp;gt;` | Stream buffer associated with the stream [[2]](#Note2) | `std::basic_streambuf&amp;lt;Ch, Tr&amp;gt; *` | `rdbuf` | `rdbuf` |
+| `boost::io::basic_ios_fill_saver&amp;lt;Ch, Tr&amp;gt;` | Character used to pad oversized field widths | `Ch` | `fill` | `fill` |
+| `boost::io::basic_ios_locale_saver&amp;lt;Ch, Tr&amp;gt;` | Locale information associated with the stream [[3]](#Note3) | `std::locale` | `getloc` (from `std::ios_base`) | `imbue` (from `std::basic_ios&amp;lt;Ch, Tr&amp;gt;`) |
+
+###Notes
+
+&amp;lt;!--
+	&amp;lt;li&amp;gt;When the failure state flags and/or the failure state exception
+		watching flags are changed, an exception is thrown if a match
+		occurs among the two sets of flags.  This could mean that
+		the &amp;lt;a name=&amp;#34;Note1&amp;#34;&amp;gt;constructor or destructor of these class
+		templates may throw&amp;lt;/a&amp;gt;. 
+--&amp;gt;
+- 失敗状態フラグとフラグを監視している失敗状態例外の両方またはどちらかが変化した場合、もし２つのフラグが一致したら例外が投げられる。
+  これは、&amp;lt;a name=&amp;#34;Note1&amp;#34;&amp;gt;これらのクラステンプレートのコンストラクタまたはデストラクタが例外を投げることを意味するかもしれない。&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+	&amp;lt;li&amp;gt;When the associated stream buffer is changed, the stream&amp;#39;s
+		failure state set is reset to &amp;#34;good&amp;#34; if the given stream
+		buffer&amp;#39;s address is non-NULL, but the &amp;#34;bad&amp;#34; failure
+		state is set if that address is NULL.  Given a NULL stream
+		buffer address, an exception is thrown if the &amp;#34;bad&amp;#34;
+		failure state is being watched.  This could mean that the 
+		&amp;lt;a name=&amp;#34;Note2&amp;#34;&amp;gt;constructor or destructor of this class template may throw&amp;lt;/a&amp;gt;. 
+--&amp;gt;
+- 関連ストリームバッファが変化した場合、もし指定したストリームバッファのアドレスがNULLでないならばストリームの失敗状態は&amp;#34;good&amp;#34;にリセットされるが、NULLだった場合には&amp;#34;bad&amp;#34;失敗状態がセットされる。
+  NULLストリームバッファアドレスを指定した場合、もし&amp;#34;bad&amp;#34;失敗状態が監視されていると例外が投げられる。
+  これは、&amp;lt;a name=&amp;#34;Note2&amp;#34;&amp;gt;このクラステンプレートのコンストラクタまたはデストラクタが例外を投げることを意味するかもしれない。&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+	&amp;lt;li&amp;gt;The &amp;lt;a name=&amp;#34;Note3&amp;#34;&amp;gt;saver for the locale uses the
+		&amp;lt;code&amp;gt;std::basic_ios&amp;amp;lt;Ch, Tr&amp;amp;gt;&amp;lt;/code&amp;gt; class to extract their
+		information&amp;lt;/a&amp;gt;, although it could have used the functionality
+		in &amp;lt;code&amp;gt;std::ios_base&amp;lt;/code&amp;gt;.  The problem is that the versions
+		of the needed member functions in &amp;lt;code&amp;gt;ios_base&amp;lt;/code&amp;gt; are not
+		polymorphically related to the ones in &amp;lt;code&amp;gt;basic_ios&amp;lt;/code&amp;gt;. 
+		The stream classes that will be used with the saver classes
+		should use the versions of the member functions closest to them
+		by inheritance, which means the ones in
+		&amp;lt;code&amp;gt;basic_ios&amp;lt;/code&amp;gt;.&amp;lt;/li&amp;gt;
+--&amp;gt;
+- &amp;lt;a name=&amp;#34;Note3&amp;#34;&amp;gt;ロケール用のセーバーは、`std::ios_base`の関数をロケール情報を取り出すために使用できたかもしれないが、そうはせずに`std::basic_ios&amp;lt;Ch, Tr&amp;gt;`クラスを使用して情報を取り出している。&amp;lt;/a&amp;gt;
+  この問題は、`basic_ios`の中の必要とするメンバ関数が多態的に`basic_ios`のそれに結びついていないためである。
+  セーバークラスと共に使用されるストリームクラスは継承によってそれらに最も近いメンバ関数を使用するべきである。
+&amp;lt;/ol&amp;gt;
+
+##&amp;lt;a name=&amp;#34;user_savers&amp;#34;&amp;gt;Savers for User-Defined Attributes&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The saver classes for user-defined formatting information have this
+format:&amp;lt;/p&amp;gt;
+--&amp;gt;
+ユーザー定義の情報の為のセーバークラスは、次のようなフォーマットを持つ。
+
+```cpp
+#include &amp;lt;iosfwd&amp;gt;  // for std::ios_base (declaration)
+
+class saver_class
+{
+    typedef std::ios_base           state_type;
+    typedef int                     index_type;
+    typedef implementation_defined  aspect_type;
+
+    explicit  saver_class( state_type &amp;amp;s, index_type i );
+              saver_class( state_type &amp;amp;s, index_type i, aspect_type &amp;amp;new_value );
+             ~saver_class();
+};
+```
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The index &amp;lt;var&amp;gt;i&amp;lt;/var&amp;gt; differentiates between specific user-defined
+formatting attributes.  The index can only be determined at run-time
+(most likely with the class-static &amp;lt;code&amp;gt;std::ios_base::xalloc&amp;lt;/code&amp;gt;
+member function).&amp;lt;/p&amp;gt;
+--&amp;gt;
+インデックス`i`は、ユーザー定義の属性を区別するのに使用される。
+インデックスは、実行時にのみ決定できる。
+（それはおそらく静的メンバ関数`std::ios_base::xalloc`と同時だろう。）
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The &amp;lt;var&amp;gt;state_type&amp;lt;/var&amp;gt; is the base class of the IOStreams system,
+&amp;lt;code&amp;gt;std::ios_base&amp;lt;/code&amp;gt;.  The user would usually place an actual
+input, output, or combined stream object for the state-type parameter,
+and not a base class object.  The first constructor takes a stream
+object and index and saves a reference to the stream and the current
+value of a particular stream attribute.  The second constructor works
+like the first, and uses its third argument to change the stream&amp;#39;s
+attribute to the new &amp;lt;var&amp;gt;aspect_type&amp;lt;/var&amp;gt; value given.  The destructor
+changes the stream&amp;#39;s attribute back to the saved value.&amp;lt;/p&amp;gt;
+--&amp;gt;
+`state_type`は、入出力ストリームシステムの基本クラス`std::ios_base`である。
+ユーザが通常`state-type`パラメータに置くのは、実際の入力(ストリーム)、出力(ストリーム)、または入出力ストリームオブジェクトであって、基底クラスのオブジェクトではないだろう。
+最初のコンストラクタは、ストリームオブジェクトを１つ取り、そのストリームへの参照とストリーム固有の属性とを保持する。
+２番目のコンストラクタは一つ目のと同様に働くが、さらにそれに加えて第３引数に新しい`aspect_type`を指定することでストリームの属性を変更できる。
+デストラクタはストリームの属性を保持しておいた状態に戻す。
+
+###IOStream User-Defined State Saver Classes
+| Class | Saved Attribute | Attribute Type | Reference Method |
+|---|---|---|---|
+| `boost::io::ios_iword_saver` | Numeric user-defined format flag | `long` | `iword` |
+| `boost::io::ios_pword_saver` | Pointer user-defined format flag | `void *` | `pword` |
+
+##&amp;lt;a name=&amp;#34;combo_savers&amp;#34;&amp;gt;Savers for Combined Attributes&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;There are three class (templates) for combined attribute savers.  The
+&amp;lt;code&amp;gt;boost:io::ios_base_all_saver&amp;lt;/code&amp;gt; saver class combines the
+functionality of all the basic attribute saver classes.  It has a
+constructor that takes the stream to have its state preserved.  The
+&amp;lt;code&amp;gt;boost::io::basic_ios_all_saver&amp;lt;/code&amp;gt; combines the functionality
+of all the advanced attribute saver class templates and the combined
+basic attribute saver class.  It has a constructor that takes the stream
+to have its state preserved.  The
+&amp;lt;code&amp;gt;boost::io::ios_all_word_saver&amp;lt;/code&amp;gt; saver class combines the
+saver classes that preserve user-defined formatting information.  Its
+constructor takes the stream to have its attributes saved and the index
+of the user-defined attributes.&amp;lt;/p&amp;gt;
+--&amp;gt;
+属性セーバークラスを統合するために３つのクラス（テンプレート）がある。
+`boost:io::ios_base_all_saver`セーバークラスは、全ての基本属性セーバークラスの機能を統合している。
+このクラスには引数に状態を保持させたいストリームを取ることのできるコンストラクタが一つある。
+`boost::io::basic_ios_all_saver`セーバークラスは、全ての高等属性セーバークラステンプレートの機能と基本属性セーバークラスを統合している。
+このクラスには引数に状態を保持させたいストリームを取ることのできるコンストラクタが一つある。
+`boost::io::ios_all_word_saver`セーバークラスは、ユーザー定義の情報を保持するクラスを結合する。
+このコンストラクタは、属性を保持させたいストリームとユーザーが定義した属性のインデックスを引数に取る。
+
+##&amp;lt;a name=&amp;#34;example&amp;#34;&amp;gt;Example&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+&amp;lt;p&amp;gt;The code used in the &amp;lt;A href=&amp;#34;#rationale&amp;#34;&amp;gt;rationale&amp;lt;/a&amp;gt; can be
+improved at two places.  The printing function could use a saver around
+the code that changes the formatting state.  Or the calling function can
+surround the call with a saver.  Or both can be done for paranoia&amp;#39;s
+sake.&amp;lt;/p&amp;gt;
+--&amp;gt;
+[Rationale](#rationale)で使用したコードは２つの点で改善できる。
+表示出力関数は書式設定状態を変更するコードの周りでセーバーを使えるかもしれない。
+または関数の呼び出し側でその関数の周りをセーバーで囲むこともできる。
+または両方を偏執症患者のために行うこともできる。
+
+```cpp
+#include &amp;lt;boost/io/ios_state.hpp&amp;gt;
+#include &amp;lt;ios&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ostream&amp;gt;
+
+void  new_hex_my_byte( std::ostream &amp;amp;os, char byte )
+{
+    boost::io::ios_flags_saver  ifs( os );
+
+    os &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; static_cast&amp;lt;unsigned&amp;gt;(byte);
+}
+
+int  main()
+{
+    using std::cout;
+
+    //...
+
+    {
+        boost::io::ios_all_saver  ias( cout );
+
+        new_hex_my_byte( cout, &amp;#39;A&amp;#39; );
+    }
+
+    //...
+}
+```
+
+##&amp;lt;a name=&amp;#34;refer&amp;#34;&amp;gt;References&amp;lt;/a&amp;gt;
+
+- The I/O state saver library header itself: boost/io/ios_state.hpp
+- Some test/example code: ios_state_test.cpp
+
+##&amp;lt;a name=&amp;#34;credits&amp;#34;&amp;gt;Credits&amp;lt;/a&amp;gt;
+
+###&amp;lt;a name=&amp;#34;contributors&amp;#34;&amp;gt;Contributors&amp;lt;/a&amp;gt;
+
+- &amp;lt;A href=&amp;#34;../../../people/daryle_walker.html&amp;#34;&amp;gt;Daryle Walker&amp;lt;/a&amp;gt;
+
+&amp;lt;!--
+	&amp;lt;dd&amp;gt;Started the library.  Contributed the initial versions of the
+		format flags, precision, width, and user-defined format flags
+		saver classes.  Contributed the initial versions of the success
+		state, success state exception flags, output stream tie, stream
+		buffer, character fill, and locale saver class templates. 
+		Contributed the combined attribute classes and class template. 
+		Contributed the test file &amp;lt;cite&amp;gt;&amp;lt;A
+		 href=&amp;#34;../test/ios_state_test.cpp&amp;#34; &amp;gt;ios_state_test.cpp&amp;lt;/a&amp;gt;&amp;lt;/cite&amp;gt;.&amp;lt;/dd&amp;gt;
+--&amp;gt;
+    - このライブラリを開始した。
+      フォーマットフラグ、精度、幅、そしてユーザー定義のフォーマットフラグを保持するクラスの初期バージョンに貢献した。
+      成功状態、成功状態例外フラグ、出力ストリームタイ、ストリームバッファ、文字埋め、そしてロケールをセーブするクラステンプレートの初期バージョンに貢献した。
+	属性クラスとクラステンプレートを統合するのに貢献した。
+	テストファイルios_state_test.cppに貢献した。
+
+###&amp;lt;a name=&amp;#34;history&amp;#34;&amp;gt;History&amp;lt;/a&amp;gt;
+
+- 13 Mar 2002, Daryle Walker
+    - Initial version
+
+--
+
+Revised: 13 March 2002
+
+Copyright c Daryle Walker 2002.  Permission to copy, use,
+modify, sell and distribute this document is granted provided this
+copyright notice appears in all copies.  This document is provided
+&amp;#34;as is&amp;#34; without express or implied warranty, and with no claim
+as to its suitability for any purpose.
+
+
+Japanese Translation Copyright (C) 2003 MINAMI Takeshi.
+オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の
+複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」
+に提供されており、いかなる明示的、暗黙的保証も行わない。また、
+いかなる目的に対しても、その利用が適していることを関知しない。
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
</feed>