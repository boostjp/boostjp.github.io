<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-11-09T14:04:38.748017</updated>
  <id>bba63a06-582f-47f9-8538-1178b1b634d4</id>

  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : CircularBufferを追加 (close #397)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>f81cc50f8f87d0add7945f1a19c8f4a74f1d824b:document/version/1_72_0.md</id>
      <updated>2019-11-06T13:35:40+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Someone&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リリースノート -- 1.72.0のリリースノートページを用意</title>
      <link href="https://boostjp.github.io/document/version.html"/>
      <id>6acdac65d997e065338de8dea05cadea46b56eea:document/version.md</id>
      <updated>2019-11-05T13:47:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、Boostの各バージョンのリリースノートを翻訳、情報補完したドキュメントです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html&#34;&gt;雛形ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html&#34;&gt;1.72.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html&#34;&gt;1.71.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html&#34;&gt;1.70.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_69_0.html&#34;&gt;1.69.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_68_0.html&#34;&gt;1.68.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html&#34;&gt;1.67.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html&#34;&gt;1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html&#34;&gt;1.65.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_0.html&#34;&gt;1.65.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html&#34;&gt;1.64.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html&#34;&gt;1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_62_0.html&#34;&gt;1.62.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_61_0.html&#34;&gt;1.61.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_60_0.html&#34;&gt;1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_59_0.html&#34;&gt;1.59.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_58_0.html&#34;&gt;1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_57_0.html&#34;&gt;1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html&#34;&gt;1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_55_0.html&#34;&gt;1.55.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_54_0.html&#34;&gt;1.54.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_53_0.html&#34;&gt;1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_52_0.html&#34;&gt;1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_51_0.html&#34;&gt;1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_50_0.html&#34;&gt;1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_49_0.html&#34;&gt;1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_48_0.html&#34;&gt;1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_47_0.html&#34;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_1.html&#34;&gt;1.46.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_0.html&#34;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_45_0.html&#34;&gt;1.45.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0のリリースノートページを用意</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>6acdac65d997e065338de8dea05cadea46b56eea:document/version/1_72_0.md</id>
      <updated>2019-11-05T13:47:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#one&#34;&gt;One&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#two&#34;&gt;Two&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#three&#34;&gt;Three&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#one&#34; id=&#34;One&#34;&gt;One&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;blahblahblah&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#two&#34; id=&#34;Two&#34;&gt;Two&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt; ticket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/XXX/pull/XX&#34; target=&#34;_blank&#34;&gt;pull request XX&lt;/a&gt; GitHub PR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#three&#34; id=&#34;Three&#34;&gt;Three&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: &lt;code&gt;boost::xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trailing &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Someone&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ヘッダオンリー or ビルドが必要なライブラリ -- Update build_link.md</title>
      <link href="https://boostjp.github.io/tips/build_link.html"/>
      <id>c0ea2bd7b86172847b510245f807729f0cf2a8cd:tips/build_link.md</id>
      <updated>2019-09-13T23:36:45+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ヘッダオンリー or ビルドが必要なライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、Boostの各ライブラリが、ヘッダオンリーなのか、ビルドが必要なのか、どの外部ライブラリが必要なのか、といったものをまとめる。&lt;/p&gt;
&lt;p&gt;バージョン： 1.54.0&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ライブラリ名&lt;/th&gt;
&lt;th&gt;ビルド種類&lt;/th&gt;
&lt;th&gt;依存ライブラリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Accumulators&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Algorithm&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Asio&lt;/td&gt;
&lt;td&gt;ヘッダオンリー。 SSL通信を使用する場合はOpenSSLが必要。&lt;/td&gt;
&lt;td&gt;Date Time, Regex, System&lt;/td&gt;
&lt;td&gt;SSL通信以外では、以下のマクロをdefineすることでヘッダオンリーで使用可能。 &lt;code&gt;BOOST_DATE_TIME_NO_LIB&lt;/code&gt;、&lt;code&gt;BOOST_REGEX_NO_LIB&lt;/code&gt;、&lt;code&gt;BOOST_ERROR_CODE_HEADER_ONLY&lt;/code&gt;、&lt;code&gt;BOOST_SYSTEM_NO_LIB&lt;/code&gt;。Regexを使用しない場合、正規表現を使用する受信関数が使用不能となる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assign&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Atomic&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bimap&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bind&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Call Traits&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chrono&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;以下のマクロをdefineすることで、ヘッダオンリーで使用可能。 &lt;code&gt;BOOST_CHRONO_HEADER_ONLY&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Circular Buffer&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compatibility&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compressed Pair&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concept Checp&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Config&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Container&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Context&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conversion&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CRC&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coroutine&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;Context&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date Time&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;posix timeのみを使用する場合は、以下のマクロをdefineすることでヘッダオンリーで使用可能。 &lt;code&gt;BOOST_DATE_TIME_NO_LIB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disjoint Sets&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dynamic Bitset&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enable If&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exception&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Filesystem&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flyweight&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Foreach&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Format&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional/Factory&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional/Forward&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional/Hash&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional/OverloadedFunction&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fusion&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Geometry&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GIL&lt;/td&gt;
&lt;td&gt;pngを使用する場合はlibpng jpegを使用する場合はlibjpeg tiffを使用する場合はlibtiffが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graph&lt;/td&gt;
&lt;td&gt;ヘッダオンリー。 GraphMLを使用する場合はビルドが必要。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heap&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ICL&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Identity Type&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In Place Factory, Typed In Place Factory&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interprocess&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;Date Time&lt;/td&gt;
&lt;td&gt;Boost.DateTimeの機能としてposix timeしか使用していないため、以下のマクロをdefineすることでヘッダオンリーで使用可能。 &lt;code&gt;BOOST_DATE_TIME_NO_LIB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interval&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intrusive&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IO State Savers&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iostreams&lt;/td&gt;
&lt;td&gt;ビルドが必要。 zlib, gzipを使用する場合はzlib bzip2を使用する場合はlibbz2が必要。&lt;/td&gt;
&lt;td&gt;Regex&lt;/td&gt;
&lt;td&gt;インストールマニュアルを参照 &lt;a href=&#34;http://www.boost.org/libs/iostreams/doc/installation.html&#34; target=&#34;_blank&#34;&gt;Installation&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iterators&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lambda&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lexical Cast&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Local Function&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Locale&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;ICUバックエンドを使用する際は、ビルドオプションを設定する必要がある。 &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/locale/doc/html/building_boost_locale.html&#34; target=&#34;_blank&#34;&gt;Building The Library&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lockfree&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;Atomic&lt;/td&gt;
&lt;td&gt;C++11環境では内部的に&lt;code&gt;std::atomic&lt;/code&gt;を使用するため、依存ライブラリなし。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math Common Factor&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math Octonion&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math Quaternion&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math / Special Functions&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Math / Statistical Distribution&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Member Functions&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Meta State Machine&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Move&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Min-Max&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MPI&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;インストールマニュアルを参照 &lt;a href=&#34;http://www.boost.org/doc/html/mpi/getting_started.html#mpi.installation&#34; target=&#34;_blank&#34;&gt;Installing and Using Boost.MPI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MPL&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Array&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Index&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiprecision&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric Conversion&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Odeint&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Operators&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parameter&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phoenix&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pointer Container&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Polygon&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pool&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preprocessor&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program Options&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Property Map&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Property Tree&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proto&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Random&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;random_device&lt;/code&gt;を使用しない場合、ヘッダオンリーで使用可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ratio&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rational&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ref&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regex&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Result Of&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope Exit&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Serialization&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signals&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Signals2&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Smart Ptr&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spirit&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Statechart&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Static Assert&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String Algo&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swap&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ただし Boost 1.69.0 以降のみ。Boost 1.68.0 以前の場合はビルドが必要。Boost 1.68.0 以前の場合、以下のマクロをdefineすることでヘッダオンリーとして使用可能。 &lt;code&gt;BOOST_ERROR_CODE_HEADER_ONLY&lt;/code&gt;、&lt;code&gt;BOOST_SYSTEM_NO_LIB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;minimal test、もしくは&lt;code&gt;boost/test/included&lt;/code&gt;以下のヘッダをインクルードすることで、ヘッダオンリーとして使用可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thread&lt;/td&gt;
&lt;td&gt;ビルドが必要&lt;/td&gt;
&lt;td&gt;System, Chrono&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Timer&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tokenizer&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TR1&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tribool&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TTI&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tuple&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type Erasure&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type Traits&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Typeof&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uBLAS&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;Serialization&lt;/td&gt;
&lt;td&gt;シリアライズを使用しない場合は、以下のマクロをdefineすることで、自動リンクを解除できる。&lt;code&gt;BOOST_SERIALIZATION_NO_LIB&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Units&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unordered&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Utility&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uuid&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value Initialized&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variant&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wave&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Xpressive&lt;/td&gt;
&lt;td&gt;ヘッダオンリー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon</name>
        <email>shigemasa7watanabe+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.71.0リリースノート -- 1.71.0リリースノート : テストコンパイラを追加</title>
      <link href="https://boostjp.github.io/document/version/1_71_0.html"/>
      <id>885b6004da06c1dedd3c4eb62ea3a17cd9b680f0:document/version/1_71_0.md</id>
      <updated>2019-08-20T12:21:00+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.71.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_71_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_71_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/variant2/&#34; target=&#34;_blank&#34;&gt;Variant2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;valuelessにならず、強い例外安全性をもつ&lt;code&gt;std::variant&lt;/code&gt;の実装。作者Peter Dimov&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34;&gt;Align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34; id=&#34;align&#34;&gt;Align&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;align_up&lt;/code&gt;と&lt;code&gt;align_down&lt;/code&gt;の整数版を、全ての整数型向けにサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;の実装を改善し、&lt;code&gt;void&lt;/code&gt;型への特殊化を要求しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;に&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;と&lt;code&gt;is_always_equal&lt;/code&gt;を定義&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::any&lt;/code&gt;のデフォルト構築を静的初期化できるようにした&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスをもたないコンパイラでの、代入のパフォーマンス低下を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完了ハンドラがディスパッチされる際の不要なムーブ構築を排除したことにより、パフォーマンスがわずかに改善した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;フリー関数の実装で&lt;code&gt;case&lt;/code&gt;のフォールスルーにアノテーションをつけたことにより、コンパイラの警告をなくした&lt;/li&gt;
&lt;li&gt;ユーザー定義シーケンス向けの&lt;code&gt;is_*_buffer_sequence&lt;/code&gt;検出トレイトを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CancelIoEx&lt;/code&gt;エントリポイントを取得する際の互換性のないポインタキャストについての、Windows固有の警告を修正&lt;/li&gt;
&lt;li&gt;Windowsでシリアルポートを開く際のデフォルトを、自動で設定するよう変更した&lt;/li&gt;
&lt;li&gt;シリアルポートの&lt;code&gt;get_option()&lt;/code&gt;メンバ関数を&lt;code&gt;const&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;WinRTストリーム指向ソケットバックエンドの&lt;code&gt;shutdown()&lt;/code&gt;関数の、name hiding問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dynamic_buffer&lt;/code&gt;のドキュメントの、小さな修正を適用&lt;/li&gt;
&lt;li&gt;Haiku OSのいくつかのサポートを追加&lt;/li&gt;
&lt;li&gt;wolfSSL互換を追加&lt;/li&gt;
&lt;li&gt;ClangでのCoroutine TSのサポートを、C++17以降を要求するよう変更&lt;/li&gt;
&lt;li&gt;チュートリアルのDoxygen生成の問題を修正&lt;/li&gt;
&lt;li&gt;サンプルプログラムがドキュメントに正しく組み込まれていることを確認&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このバージョンは主にバグ修正とパフォーマンス改善で構成される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BEAST_SEPARATE_COMPILATION&lt;/code&gt;を定義した際にコンパイル時間を減らすため、分割コンパイルのための多くの作業を行った&lt;/li&gt;
&lt;li&gt;Beastを使用しているユーザーとユーザー企業を知りたい。GitHub Wikiページ「&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;」にリストアップしている&lt;/li&gt;
&lt;li&gt;完全な変更リストは&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Noteページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenで生成されたリファレンスドキュメントに内部メンバが出力されていたのを修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;と&lt;code&gt;sub&lt;/code&gt;に対するUBSanの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_uninitialized&lt;/code&gt;のチェックが間違っていた問題を修正 (Niklas Fejes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;にアライメント仕様を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; 自己ムーブ代入に関するC++17のMoveAssignable要件を実装 (自己ムーブ代入したあともrhs側はvalidな状態でなければならない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;resource_adaptor&lt;/code&gt;でアライメント指定が無視される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; &lt;code&gt;-fsanitize=integer&lt;/code&gt;で見つかったcopy_move_algo.hppでの整数オーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; GCC 9でnew_allocator.hpp内の暗黙定義されないコピー代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; msvc10..12で&lt;code&gt;vector::resize()&lt;/code&gt;がコンパイルエラーになる問題を修正。「data is not a member of &lt;code&gt;boost::detail::aligned_storage&lt;/code&gt;」という内容のエラーが起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/114&#34; target=&#34;_blank&#34;&gt;GitHub #114&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;の&lt;code&gt;noexcept&lt;/code&gt;仕様を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; MSVC + boost 1.70でwindows.hがすでにインクルードされている場合にコンパイルエラーになる問題を修正 (detail/thread_mutex.hpp)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/117&#34; target=&#34;_blank&#34;&gt;GitHub #117&lt;/a&gt; ヒント付きの&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;map::insert_or_assign&lt;/code&gt;の戻り値型が間違っていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/118&#34; target=&#34;_blank&#34;&gt;GitHub #118&lt;/a&gt; &lt;code&gt;flat_tree_merge_unique&lt;/code&gt;内でuniqueでない&lt;code&gt;inplace_set_difference&lt;/code&gt;が使用されていた問題と、&lt;code&gt;insert_unique&lt;/code&gt;内でのイテレータ無効化を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/122&#34; target=&#34;_blank&#34;&gt;GitHub #122&lt;/a&gt; &lt;code&gt;has_trivial_destructor_after_move&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/123&#34; target=&#34;_blank&#34;&gt;GitHub #123&lt;/a&gt; 異種混合探索 (heterogeneous lookup) において、&lt;code&gt;equal_range&lt;/code&gt;が1より大きい範囲を返せるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;に、ブロックサイズ・ブロックバイト数を指定できるようにするカスタマイズ機能として&lt;code&gt;deque_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;に、オーバーフロー時に例外を発生させる、およびアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;static_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、伸長ポリシー (growth factor) とアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;small_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RISC-V LP64Dのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; ppc64 ELFv2のABI違反を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/99&#34; target=&#34;_blank&#34;&gt;GitHub #99&lt;/a&gt; ucontextの作成に失敗した際にスタックをクリーンアップするよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/core/alloc_construct.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、アロケータを考慮したオブジェクトと配列の例外安全な構築と破棄の機能を提供する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/first_scalar.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、配列の最初のスカラ要素へのポインタを取得する関数&lt;code&gt;first_scalar()&lt;/code&gt;を提供する。型&lt;code&gt;T*&lt;/code&gt;が与えられると、&lt;code&gt;remove_all_extents_t&amp;lt;T&amp;gt;*&lt;/code&gt;型のポインタが返る (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/noinit_adaptor.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;noinit_adaptor&lt;/code&gt;クラステンプレートを提供する。このクラスは&lt;code&gt;construct(ptr)&lt;/code&gt;呼び出しで配置newを通してデフォルト初期化を行い、&lt;code&gt;destroy(ptr)&lt;/code&gt;呼び出しで&lt;code&gt;value_type&lt;/code&gt;のデストラクタを直接呼び出す (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/default_allocator.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;default_allocator&lt;/code&gt;クラステンプレートを提供する。このクラスはC++20の&lt;code&gt;std::allocator&lt;/code&gt;に似た最小のデフォルトアロケータとして機能し、例外を無効化する設定を持ち、関連名前空間として&lt;code&gt;std&lt;/code&gt;を持たない。このアロケータはメモリ割り当てに&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;を使用する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/issues/59&#34; target=&#34;_blank&#34;&gt;GitHub #59&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;ヘッダに、libc++ / libc++abiライブラリを使用した際のQNX SDP 7.0との互換性を改善するワークアラウンドを追加 (Andrey Semashev氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/detail/sp_typeinfo.hpp&lt;/code&gt;ヘッダを非推奨化し、将来のリリースで削除する予定となった。代わりに&lt;code&gt;boost/core/typeinfo.hpp&lt;/code&gt;を使用すること (Peter Dimov氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/38&#34; target=&#34;_blank&#34;&gt;GitHub #38&lt;/a&gt; MSVCでハードウェア支援のあるpopcountを有効にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;boost::hash&lt;/code&gt;と&lt;code&gt;std::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; デフォルトコンストラクタを非explicitにし、コピー初期化構文を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;値型テンプレートパラメータの要件を明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;と&lt;code&gt;double&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_load&lt;/code&gt;と&lt;code&gt;endian_store&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;を、非&lt;code&gt;bool&lt;/code&gt;の全ての整数型を正しくサポートするよう更新&lt;/li&gt;
&lt;li&gt;非推奨の名前を、&lt;code&gt;endian.hpp&lt;/code&gt;に移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34; id=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_work&lt;/code&gt;のドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;directory iteratorのインクリメント時に&lt;code&gt;readdir_r&lt;/code&gt;が使用されていた場合に、間違った&lt;code&gt;error_code&lt;/code&gt;が返る問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;の右辺値版&lt;code&gt;operator/&lt;/code&gt;の戻り値型を、右辺値参照ではなく右辺値を返すよう修正。これによるぶら下がり参照 (dangling reference) の問題が起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows CEとの互換性を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/106&#34; target=&#34;_blank&#34;&gt;GitHub #106&lt;/a&gt; CMakeを小さくサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;スレッドセーフなストレージとスレッドセーフな新たなaccumulatorをサポート&lt;/li&gt;
&lt;li&gt;例外とRTTIを無効化したコンパイルをサポート (10-20%ほどパフォーマンスがよくなる) (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;1D・2Dヒストグラムのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed&lt;/code&gt;がinput iterator rangeではなくforward iterator rangeを返すようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed_range::accessor&lt;/code&gt;をコピー不可にしてセル値 (cell value) への参照のように振る舞うようにし、C++標準ライブラリのより多くのアルゴリズムで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;にスライス・オプションを追加し、オプションを合成できるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::project&lt;/code&gt;が静的ヒストグラムに実行時インデックス列を受けられるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;がreduction supportを必要とせず、いくつかの軸型 (axis type) をもつヒストグラムに対して動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::axis::traits::update&lt;/code&gt;が&lt;code&gt;boost::histogram::axis::variant&lt;/code&gt;に対して正しく動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;テストカバレッジを100%にした&lt;/li&gt;
&lt;li&gt;依存するBoostライブラリを減らした&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを改善&lt;/li&gt;
&lt;li&gt;全ての組み込み軸型でムーブが例外を送出しないことを保証&lt;/li&gt;
&lt;li&gt;高い警告レベルでもコンパイルで警告がでないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/histogram/doc/html/histogram/history.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; 整数の精度が落ちる警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt; カンマ演算子の使い方が間違っている可能性がある警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ドキュメントがtreap &lt;code&gt;priority_of_value&lt;/code&gt;の変更を説明していなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/43&#34; target=&#34;_blank&#34;&gt;GitHub #43&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_VARIADIC_TEMPLATES&lt;/code&gt;が有効の場合のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; MSVC-12で内部コンパイラエラーを回避するために可変引数テンプレートを無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34; id=&#34;iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt; マルチストリーム・ファイルの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/95&#34; target=&#34;_blank&#34;&gt;GitHub #95&lt;/a&gt; LZMA圧縮のマルチスレッド・サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::filesystem::path&lt;/code&gt;の変換を行うテストを追加&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; のテスト失敗修正を含む&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;でのC++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを改善。文字コード変換の出力としてstring viewが使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_newline&lt;/code&gt;フォーマッタとストリーム・マニピュレータを追加。改行の重複を避けながら、フォーマットされた出力を常に改行でおわらせるよう使用できる&lt;/li&gt;
&lt;li&gt;出力ストリームにおいて、text file / text multi-file sink backendに、フォーマットされた全てのログレコードの末尾に改行を追加する動作を設定できるサポートを追加した。バックエンド・コンストラクタの名前付きパラメータ&lt;code&gt;auto_newline_mode&lt;/code&gt;を使用するか、sink backendの&lt;code&gt;set_auto_newline_mode()&lt;/code&gt;メンバ関数を呼ぶこと&lt;/li&gt;
&lt;li&gt;注：sink backendに末尾改行を追加するデフォルトの動作は、Boost.Logの以前のリリースからわずかに変更になった。バックエンドは、フォーマットされた文字列に末尾改行がない場合にのみ改行を追加するようになった。以前のリリースでは、改行は無条件に追加されていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt; 任意の関数オブジェクトを渡せる名前付きパラメータ&lt;code&gt;filter&lt;/code&gt;と&lt;code&gt;format&lt;/code&gt;を追加。これはsinkのコンストラクタとsinkを初期化する便利関数で使用できる。例として、C++11のラムダ式をこれらのパラメータで直接指定できるようになった&lt;/li&gt;
&lt;li&gt;filterとformatterのパーサーで使用されるデフォルトのファクトリに、&lt;code&gt;boost::log::trivial::severity_level&lt;/code&gt;型の重要度レベルを設定できるようにした。フィルタの場合、属性は&lt;code&gt;&#34;Severity&#34;&lt;/code&gt;という名前に限定される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; text file sink backendのファイル・スキャニングにおいて、rotateするファイル名のコンポーネントの解析が間違っていた問題を修正した。ファイル名パターンがプレースホルダでおわる場合 (たとえばファイルカウンタ)、&lt;code&gt;scan_for_files()&lt;/code&gt;メンバ関数はターゲット・ストレージからそのパターンに一致するファイルを見つけられず、管理されないままになっていた。そのようなファイルはターゲット・ストレージから削除されず、残ってしまっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt; &lt;code&gt;basic_formatting_ostream&lt;/code&gt;と&lt;code&gt;basic_record_ostream&lt;/code&gt;がユーザー定義型へのポインタに対するストリーム演算子のオーバーロードを定義できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より詳細な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;Catmull-Rom interpolatorがC++11で動作するようにした&lt;/li&gt;
&lt;li&gt;カーディナル2次B-スプライン補間 (Cardinal quadratic B-spline interpolation)&lt;/li&gt;
&lt;li&gt;楕円積分のドメイン拡張&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_pi&lt;/code&gt;と&lt;code&gt;cos_pi&lt;/code&gt;のパフォーマンス改善&lt;/li&gt;
&lt;li&gt;フォワードモードの自動微分&lt;/li&gt;
&lt;li&gt;ベクトル値の重心有理補間 (barycentric rational interpolation)&lt;/li&gt;
&lt;li&gt;フーリエ積分 (Fourier integrals) の評価に使用するOoura法 (Ooura&#39;s method)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Multiprecisionとの互換性を修正&lt;/li&gt;
&lt;li&gt;レアなアーキテクチャでのLambert-Wを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34; id=&#34;metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;以下の機能をC++11の可変引数テンプレートに対応した：&lt;code&gt;sequence&lt;/code&gt;, &lt;code&gt;one_of_c&lt;/code&gt;, &lt;code&gt;one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of1&lt;/code&gt;, &lt;code&gt;one_char_except_c&lt;/code&gt;, &lt;code&gt;one_char_except&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_METAPARSE_STRING&lt;/code&gt;が範囲外の文字をテンプレート引数として使用できなかった問題を修正&lt;/li&gt;
&lt;li&gt;C++14において&lt;code&gt;any_of_c&amp;lt;&amp;gt;&lt;/code&gt;が空配列を作成しなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;adaptive_sort_combine_blocks&lt;/code&gt;内の最後のイテレーションにおいて、イテレータに対する不正なインクリメント・デクリメントが行われていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34; id=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coreの&lt;code&gt;alloc_construct_n&lt;/code&gt;、&lt;code&gt;alloc_destroy_n&lt;/code&gt;を使用することでアロケータサポートを簡略化 (Glen Fernandes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 参照修飾とCV修飾の組み合わせをサポートするため、&lt;code&gt;mem_fun&lt;/code&gt;と&lt;code&gt;const_mem_fun&lt;/code&gt;のバリエーションを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cv_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cvref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() &amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; &lt;code&gt;key&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;付き関数を正しくハンドリングできるようにした&lt;ul&gt;
&lt;li&gt;C++17で例外仕様が型の一部になった影響&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34; target=&#34;_blank&#34;&gt;C++17 例外仕様を型システムの一部にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;機能拡張&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Boostのリリースマネージャからの要求に従い、&lt;code&gt;version.hpp&lt;/code&gt;と&lt;code&gt;revision.hpp&lt;/code&gt;をdetailディレクトリ以下に移動した。それと、不足していたソースコード中のライセンス表記を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/185&#34; target=&#34;_blank&#34;&gt;GitHub #185&lt;/a&gt; このIssueで報告された、&lt;code&gt;std::launder()&lt;/code&gt;を使わなければ未定義動作になるケースについてFAQを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;OUTCOME_TRY&lt;/code&gt;の実装をリファクタし、外からの入力を受け付けられるカスタマイゼーション・ポイントであることをより明確にした。&lt;code&gt;std::experimental::expected&amp;lt;T, E&amp;gt;&lt;/code&gt;の特殊化は不要になったので削除した。カスタマイゼーション・ポイントについて以前はADLによって検知するとドキュメントに書いていたが、実際はそうではなかったので説明を修正した。外部入力をどのように追加すればよいかを記載した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt; Boost用に、motivationとplug_error_codeを分けた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_VERSION_MINOR&lt;/code&gt;を1に更新した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメント化されているにも関わらず、Outcomeがswap操作の強い保証を実装していなかったので修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/190&#34; target=&#34;_blank&#34;&gt;GitHub #190&lt;/a&gt; Boost版のテストスイートがリリースディストリビューションで実行できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/182&#34; target=&#34;_blank&#34;&gt;GitHub #182&lt;/a&gt; &lt;code&gt;trait::is_exception_ptr_available&amp;lt;T&amp;gt;&lt;/code&gt;が常に&lt;code&gt;true&lt;/code&gt;になっていたため、診断メッセージが表示されず、全てを&lt;code&gt;make_exception_ptr()&lt;/code&gt;に渡そうとしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; スタンドアローン版とBoost版を組み合わせた場合、翻訳単位に&lt;code&gt;std::basic_outcome_failure_exception_from_error()&lt;/code&gt;が2回定義されてしまっていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34; id=&#34;parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; キーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_TEMPLATE_KEYWORD&lt;/code&gt;を更新。関数をパラメータとして受け付けられるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; Boost Accumulators Libraryからキーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_NESTED_KEYWORD&lt;/code&gt;を移動した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/16&#34; target=&#34;_blank&#34;&gt;GitHub #16&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt;と&lt;code&gt;std::ref()&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; &lt;code&gt;boost::parameter::required&lt;/code&gt;、&lt;code&gt;boost::parameter::optional&lt;/code&gt;、&lt;code&gt;boost::parameter::deduced&lt;/code&gt;メタ関数の定義を、&lt;code&gt;boost/parameter&lt;/code&gt;ディレクトリ内に移動&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/20&#34; target=&#34;_blank&#34;&gt;GitHub #20&lt;/a&gt; Boost.Parameterを有効にした関数呼び出し演算子を生成できるようにした。&lt;code&gt;&amp;lt;boost/parameter/preprocessor.hpp&amp;gt;&lt;/code&gt;に、コード生成マクロ&lt;code&gt;BOOST_PARAMETER_FUNCTION_CALL_OPERATOR&lt;/code&gt;と&lt;code&gt;BOOST_PARAMETER_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/21&#34; target=&#34;_blank&#34;&gt;GitHub #21&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; パラメータのカテゴリ修飾として&#34;forward&#34;、&#34;consume&#34;、&#34;move_from&#34;を追加 (現在の修飾は&#34;in&#34;、&#34;out&#34;、&#34;in_out&#34;)&lt;ul&gt;
&lt;li&gt;以下の記事がベースとなっている： &lt;a href=&#34;http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters&#34; target=&#34;_blank&#34;&gt;C++ Core Guidelines: The Rules for in, out, in-out, consume, and forward Function Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;このカテゴリ修飾の追加にともなって、新たな構文を2つ追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME((object-name), namespace-name) qualifier(tag-name))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME(qualifier(name))&lt;/code&gt; (&lt;code&gt;BOOST_PARAMETER_NAME(consume(my_param))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME&lt;/code&gt;を正しく使用した既存コードは影響を受けないはずなので、破壊的変更はない&lt;/li&gt;
&lt;li&gt;使い方が変更になった理由は、引数を合成したBoost.Parameterが有効になった関数とコンストラクタにパラメータ・カテゴリの制約を適用するため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; 完全転送のサポートを追加。その結果、&lt;code&gt;parameter::parameters::operator()&lt;/code&gt;が非constの右辺値を受け取れるようになった。これによるいい影響として、完全転送をサポートするコンパイラでは&lt;code&gt;BOOST_PARAMETER_MAX_ARITY&lt;/code&gt;の制約に縛られなくなる。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_HAS_PERFECT_FORWARDING&lt;/code&gt;で完全転送が有効かを確認でき、マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING&lt;/code&gt;によって手動で完全転送のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;以下のメタ関数を追加：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/27&#34; target=&#34;_blank&#34;&gt;GitHub #27&lt;/a&gt; &lt;code&gt;boost::parameter::is_argument_pack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;boost::parameter::are_tagged_arguments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;boost::parameter::result_of::compose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 可変引数テンプレート関数&lt;code&gt;boost::parameter::compose()&lt;/code&gt;を追加。これは名前付きパラメータをとって引数パックにして返す。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/61&#34; target=&#34;_blank&#34;&gt;GitHub #61&lt;/a&gt; 完全転送をサポートしないコンパイラの場合、設定マクロ&lt;code&gt;BOOST_PARAMETER_COMPOSE_MAX_ARITY&lt;/code&gt;が&lt;code&gt;boost::parameter::compose()&lt;/code&gt;がとれる引数の最大数になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 以下のコード生成マクロを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt; Boost.MP11のサポートを追加。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_CAN_USE_MP11&lt;/code&gt;を使用してBoost.MP11がサポートされているかを確認できる。マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_MP11_USAGE&lt;/code&gt;によって手動でBoost.MP11のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/73&#34; target=&#34;_blank&#34;&gt;GitHub #73&lt;/a&gt; SFINAEによるパラメータ依存の戻り値型のサポートを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34; id=&#34;ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/ptr_container/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 1.66.0から導入されたレグレッションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/boostorg/smart_ptr/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;weak_ptr&lt;/code&gt;クラスに、エイリアス・コンストラクタ (aliasing constructors) を追加
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは、&lt;code&gt;weak_from_this()&lt;/code&gt;を使用する際に必要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これらのコンストラクタがない場合は、以下のようなコードとなる：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static_pointer_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt;::empty()&lt;/code&gt;を追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;基本クラス、&lt;code&gt;shared_from()&lt;/code&gt;、&lt;code&gt;weak_from()&lt;/code&gt;関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;は、&lt;code&gt;enable_shared_from_this&lt;/code&gt;と違って非テンプレートなクラスである。このクラスを基底クラスとすることで、&lt;code&gt;this&lt;/code&gt;を生ポインタ、&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;weak_ptr&lt;/code&gt;として取得する機能が使用できるようになる。新たに書くコードでは、&lt;code&gt;enable_shared_from_this&lt;/code&gt;よりもこちらを使用することを推奨する

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_shared_from&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++98モードのthread sanitizer buildで報告された&lt;code&gt;name()&lt;/code&gt;、&lt;code&gt;source_location()&lt;/code&gt;、&lt;code&gt;source_line()&lt;/code&gt;の出力を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; MSVCでの&lt;code&gt;name()&lt;/code&gt;と&lt;code&gt;source_location()&lt;/code&gt;の長い文字列出力を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.11&lt;/li&gt;
&lt;li&gt;詳細な変更は&lt;a href=&#34;https://www.boost.org/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Chang Log&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;非推奨になっている非常に古いヘッダーを使用した場合に、非推奨の警告を表示するようにした。このような警告が表示された場合は、指示に従ってほしい。これらのヘッダーは将来のリリースで削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロを抽象型の比較に使用できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/209&#34; target=&#34;_blank&#34;&gt;GitHub #209&lt;/a&gt; &lt;code&gt;BOOST_TEST_CHECK&lt;/code&gt;で抽象型を比較できない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/218&#34; target=&#34;_blank&#34;&gt;GitHub #218&lt;/a&gt; テストスイートのデフォルトファイル名がドキュメントと違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/219&#34; target=&#34;_blank&#34;&gt;GitHub #219&lt;/a&gt; 未使用変数の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; 非推奨ヘッダーに&lt;code&gt;BOOST_HEADER_DEPRECATED&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;あらゆる種類の文字列を出力ストリームに最適に書き込めるユーティリティ関数として、&lt;code&gt;ostream_string&lt;/code&gt;を&lt;code&gt;boost/utility/ostream_string.hpp&lt;/code&gt;に実装した。この関数は[ostream.formatted.reqmts]の要件を満たす (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_string_view&lt;/code&gt;と&lt;code&gt;basic_string_ref&lt;/code&gt;のストリーム出力演算子を、&lt;code&gt;rdbuf&lt;/code&gt;ストリームバッファに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; : &lt;a href=&#34;https://github.com/boostorg/uuid/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; MD5ベースのUUID生成が、全てのエンディアンシステムで同一となるよう修正した。1.66.0から1.70.0までの動作と互換性を保ちたい場合は、&lt;code&gt;BOOST_UUID_COMPAT_PRE_1_71_MD5&lt;/code&gt;をdefineすること。この修正は、SHA1ベースのデフォルトのUUID生成には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; 非const参照の&lt;code&gt;variant&lt;/code&gt;を渡したときの&lt;code&gt;boost::apply_visitor&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/issues/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; &lt;code&gt;std::hash&lt;/code&gt;のサポートを追加。この定義を避ける場合は&lt;code&gt;BOOST_VARIANT_DO_NOT_SPECIALIZE_STD_HASH&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt; バイナリサイズとパフォーマンスの小さな最適化を追加 (Nikita Kniazev氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/64&#34; target=&#34;_blank&#34;&gt;GitHub #64 (Nikita Kniazev氏)&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/67&#34; target=&#34;_blank&#34;&gt;GitHub #67 (Hans Dembinski氏)&lt;/a&gt;を含むメンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YAP式を自己評価 (self evaluating) する方法を示す例を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.71.0リリースノート -- 1.71.0リリースノート : Asioを追加 (close #396)</title>
      <link href="https://boostjp.github.io/document/version/1_71_0.html"/>
      <id>4b54015d00250ffd9371cd613062705a25d58578:document/version/1_71_0.md</id>
      <updated>2019-08-19T13:50:18+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.71.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_71_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_71_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/variant2/&#34; target=&#34;_blank&#34;&gt;Variant2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;valuelessにならず、強い例外安全性をもつ&lt;code&gt;std::variant&lt;/code&gt;の実装。作者Peter Dimov&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34;&gt;Align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34; id=&#34;align&#34;&gt;Align&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;align_up&lt;/code&gt;と&lt;code&gt;align_down&lt;/code&gt;の整数版を、全ての整数型向けにサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;の実装を改善し、&lt;code&gt;void&lt;/code&gt;型への特殊化を要求しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;に&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;と&lt;code&gt;is_always_equal&lt;/code&gt;を定義&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::any&lt;/code&gt;のデフォルト構築を静的初期化できるようにした&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスをもたないコンパイラでの、代入のパフォーマンス低下を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完了ハンドラがディスパッチされる際の不要なムーブ構築を排除したことにより、パフォーマンスがわずかに改善した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;フリー関数の実装で&lt;code&gt;case&lt;/code&gt;のフォールスルーにアノテーションをつけたことにより、コンパイラの警告をなくした&lt;/li&gt;
&lt;li&gt;ユーザー定義シーケンス向けの&lt;code&gt;is_*_buffer_sequence&lt;/code&gt;検出トレイトを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CancelIoEx&lt;/code&gt;エントリポイントを取得する際の互換性のないポインタキャストについての、Windows固有の警告を修正&lt;/li&gt;
&lt;li&gt;Windowsでシリアルポートを開く際のデフォルトを、自動で設定するよう変更した&lt;/li&gt;
&lt;li&gt;シリアルポートの&lt;code&gt;get_option()&lt;/code&gt;メンバ関数を&lt;code&gt;const&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;WinRTストリーム指向ソケットバックエンドの&lt;code&gt;shutdown()&lt;/code&gt;関数の、name hiding問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dynamic_buffer&lt;/code&gt;のドキュメントの、小さな修正を適用&lt;/li&gt;
&lt;li&gt;Haiku OSのいくつかのサポートを追加&lt;/li&gt;
&lt;li&gt;wolfSSL互換を追加&lt;/li&gt;
&lt;li&gt;ClangでのCoroutine TSのサポートを、C++17以降を要求するよう変更&lt;/li&gt;
&lt;li&gt;チュートリアルのDoxygen生成の問題を修正&lt;/li&gt;
&lt;li&gt;サンプルプログラムがドキュメントに正しく組み込まれていることを確認&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このバージョンは主にバグ修正とパフォーマンス改善で構成される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BEAST_SEPARATE_COMPILATION&lt;/code&gt;を定義した際にコンパイル時間を減らすため、分割コンパイルのための多くの作業を行った&lt;/li&gt;
&lt;li&gt;Beastを使用しているユーザーとユーザー企業を知りたい。GitHub Wikiページ「&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;」にリストアップしている&lt;/li&gt;
&lt;li&gt;完全な変更リストは&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Noteページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenで生成されたリファレンスドキュメントに内部メンバが出力されていたのを修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;と&lt;code&gt;sub&lt;/code&gt;に対するUBSanの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_uninitialized&lt;/code&gt;のチェックが間違っていた問題を修正 (Niklas Fejes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;にアライメント仕様を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; 自己ムーブ代入に関するC++17のMoveAssignable要件を実装 (自己ムーブ代入したあともrhs側はvalidな状態でなければならない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;resource_adaptor&lt;/code&gt;でアライメント指定が無視される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; &lt;code&gt;-fsanitize=integer&lt;/code&gt;で見つかったcopy_move_algo.hppでの整数オーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; GCC 9でnew_allocator.hpp内の暗黙定義されないコピー代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; msvc10..12で&lt;code&gt;vector::resize()&lt;/code&gt;がコンパイルエラーになる問題を修正。「data is not a member of &lt;code&gt;boost::detail::aligned_storage&lt;/code&gt;」という内容のエラーが起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/114&#34; target=&#34;_blank&#34;&gt;GitHub #114&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;の&lt;code&gt;noexcept&lt;/code&gt;仕様を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; MSVC + boost 1.70でwindows.hがすでにインクルードされている場合にコンパイルエラーになる問題を修正 (detail/thread_mutex.hpp)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/117&#34; target=&#34;_blank&#34;&gt;GitHub #117&lt;/a&gt; ヒント付きの&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;map::insert_or_assign&lt;/code&gt;の戻り値型が間違っていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/118&#34; target=&#34;_blank&#34;&gt;GitHub #118&lt;/a&gt; &lt;code&gt;flat_tree_merge_unique&lt;/code&gt;内でuniqueでない&lt;code&gt;inplace_set_difference&lt;/code&gt;が使用されていた問題と、&lt;code&gt;insert_unique&lt;/code&gt;内でのイテレータ無効化を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/122&#34; target=&#34;_blank&#34;&gt;GitHub #122&lt;/a&gt; &lt;code&gt;has_trivial_destructor_after_move&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/123&#34; target=&#34;_blank&#34;&gt;GitHub #123&lt;/a&gt; 異種混合探索 (heterogeneous lookup) において、&lt;code&gt;equal_range&lt;/code&gt;が1より大きい範囲を返せるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;に、ブロックサイズ・ブロックバイト数を指定できるようにするカスタマイズ機能として&lt;code&gt;deque_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;に、オーバーフロー時に例外を発生させる、およびアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;static_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、伸長ポリシー (growth factor) とアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;small_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RISC-V LP64Dのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; ppc64 ELFv2のABI違反を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/99&#34; target=&#34;_blank&#34;&gt;GitHub #99&lt;/a&gt; ucontextの作成に失敗した際にスタックをクリーンアップするよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/core/alloc_construct.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、アロケータを考慮したオブジェクトと配列の例外安全な構築と破棄の機能を提供する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/first_scalar.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、配列の最初のスカラ要素へのポインタを取得する関数&lt;code&gt;first_scalar()&lt;/code&gt;を提供する。型&lt;code&gt;T*&lt;/code&gt;が与えられると、&lt;code&gt;remove_all_extents_t&amp;lt;T&amp;gt;*&lt;/code&gt;型のポインタが返る (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/noinit_adaptor.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;noinit_adaptor&lt;/code&gt;クラステンプレートを提供する。このクラスは&lt;code&gt;construct(ptr)&lt;/code&gt;呼び出しで配置newを通してデフォルト初期化を行い、&lt;code&gt;destroy(ptr)&lt;/code&gt;呼び出しで&lt;code&gt;value_type&lt;/code&gt;のデストラクタを直接呼び出す (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/default_allocator.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;default_allocator&lt;/code&gt;クラステンプレートを提供する。このクラスはC++20の&lt;code&gt;std::allocator&lt;/code&gt;に似た最小のデフォルトアロケータとして機能し、例外を無効化する設定を持ち、関連名前空間として&lt;code&gt;std&lt;/code&gt;を持たない。このアロケータはメモリ割り当てに&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;を使用する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/issues/59&#34; target=&#34;_blank&#34;&gt;GitHub #59&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;ヘッダに、libc++ / libc++abiライブラリを使用した際のQNX SDP 7.0との互換性を改善するワークアラウンドを追加 (Andrey Semashev氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/detail/sp_typeinfo.hpp&lt;/code&gt;ヘッダを非推奨化し、将来のリリースで削除する予定となった。代わりに&lt;code&gt;boost/core/typeinfo.hpp&lt;/code&gt;を使用すること (Peter Dimov氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/38&#34; target=&#34;_blank&#34;&gt;GitHub #38&lt;/a&gt; MSVCでハードウェア支援のあるpopcountを有効にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;boost::hash&lt;/code&gt;と&lt;code&gt;std::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; デフォルトコンストラクタを非explicitにし、コピー初期化構文を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;値型テンプレートパラメータの要件を明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;と&lt;code&gt;double&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_load&lt;/code&gt;と&lt;code&gt;endian_store&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;を、非&lt;code&gt;bool&lt;/code&gt;の全ての整数型を正しくサポートするよう更新&lt;/li&gt;
&lt;li&gt;非推奨の名前を、&lt;code&gt;endian.hpp&lt;/code&gt;に移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34; id=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_work&lt;/code&gt;のドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;directory iteratorのインクリメント時に&lt;code&gt;readdir_r&lt;/code&gt;が使用されていた場合に、間違った&lt;code&gt;error_code&lt;/code&gt;が返る問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;の右辺値版&lt;code&gt;operator/&lt;/code&gt;の戻り値型を、右辺値参照ではなく右辺値を返すよう修正。これによるぶら下がり参照 (dangling reference) の問題が起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows CEとの互換性を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/106&#34; target=&#34;_blank&#34;&gt;GitHub #106&lt;/a&gt; CMakeを小さくサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;スレッドセーフなストレージとスレッドセーフな新たなaccumulatorをサポート&lt;/li&gt;
&lt;li&gt;例外とRTTIを無効化したコンパイルをサポート (10-20%ほどパフォーマンスがよくなる) (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;1D・2Dヒストグラムのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed&lt;/code&gt;がinput iterator rangeではなくforward iterator rangeを返すようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed_range::accessor&lt;/code&gt;をコピー不可にしてセル値 (cell value) への参照のように振る舞うようにし、C++標準ライブラリのより多くのアルゴリズムで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;にスライス・オプションを追加し、オプションを合成できるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::project&lt;/code&gt;が静的ヒストグラムに実行時インデックス列を受けられるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;がreduction supportを必要とせず、いくつかの軸型 (axis type) をもつヒストグラムに対して動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::axis::traits::update&lt;/code&gt;が&lt;code&gt;boost::histogram::axis::variant&lt;/code&gt;に対して正しく動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;テストカバレッジを100%にした&lt;/li&gt;
&lt;li&gt;依存するBoostライブラリを減らした&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを改善&lt;/li&gt;
&lt;li&gt;全ての組み込み軸型でムーブが例外を送出しないことを保証&lt;/li&gt;
&lt;li&gt;高い警告レベルでもコンパイルで警告がでないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/histogram/doc/html/histogram/history.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; 整数の精度が落ちる警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt; カンマ演算子の使い方が間違っている可能性がある警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ドキュメントがtreap &lt;code&gt;priority_of_value&lt;/code&gt;の変更を説明していなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/43&#34; target=&#34;_blank&#34;&gt;GitHub #43&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_VARIADIC_TEMPLATES&lt;/code&gt;が有効の場合のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; MSVC-12で内部コンパイラエラーを回避するために可変引数テンプレートを無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34; id=&#34;iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt; マルチストリーム・ファイルの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/95&#34; target=&#34;_blank&#34;&gt;GitHub #95&lt;/a&gt; LZMA圧縮のマルチスレッド・サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::filesystem::path&lt;/code&gt;の変換を行うテストを追加&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; のテスト失敗修正を含む&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;でのC++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを改善。文字コード変換の出力としてstring viewが使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_newline&lt;/code&gt;フォーマッタとストリーム・マニピュレータを追加。改行の重複を避けながら、フォーマットされた出力を常に改行でおわらせるよう使用できる&lt;/li&gt;
&lt;li&gt;出力ストリームにおいて、text file / text multi-file sink backendに、フォーマットされた全てのログレコードの末尾に改行を追加する動作を設定できるサポートを追加した。バックエンド・コンストラクタの名前付きパラメータ&lt;code&gt;auto_newline_mode&lt;/code&gt;を使用するか、sink backendの&lt;code&gt;set_auto_newline_mode()&lt;/code&gt;メンバ関数を呼ぶこと&lt;/li&gt;
&lt;li&gt;注：sink backendに末尾改行を追加するデフォルトの動作は、Boost.Logの以前のリリースからわずかに変更になった。バックエンドは、フォーマットされた文字列に末尾改行がない場合にのみ改行を追加するようになった。以前のリリースでは、改行は無条件に追加されていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt; 任意の関数オブジェクトを渡せる名前付きパラメータ&lt;code&gt;filter&lt;/code&gt;と&lt;code&gt;format&lt;/code&gt;を追加。これはsinkのコンストラクタとsinkを初期化する便利関数で使用できる。例として、C++11のラムダ式をこれらのパラメータで直接指定できるようになった&lt;/li&gt;
&lt;li&gt;filterとformatterのパーサーで使用されるデフォルトのファクトリに、&lt;code&gt;boost::log::trivial::severity_level&lt;/code&gt;型の重要度レベルを設定できるようにした。フィルタの場合、属性は&lt;code&gt;&#34;Severity&#34;&lt;/code&gt;という名前に限定される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; text file sink backendのファイル・スキャニングにおいて、rotateするファイル名のコンポーネントの解析が間違っていた問題を修正した。ファイル名パターンがプレースホルダでおわる場合 (たとえばファイルカウンタ)、&lt;code&gt;scan_for_files()&lt;/code&gt;メンバ関数はターゲット・ストレージからそのパターンに一致するファイルを見つけられず、管理されないままになっていた。そのようなファイルはターゲット・ストレージから削除されず、残ってしまっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt; &lt;code&gt;basic_formatting_ostream&lt;/code&gt;と&lt;code&gt;basic_record_ostream&lt;/code&gt;がユーザー定義型へのポインタに対するストリーム演算子のオーバーロードを定義できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より詳細な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;Catmull-Rom interpolatorがC++11で動作するようにした&lt;/li&gt;
&lt;li&gt;カーディナル2次B-スプライン補間 (Cardinal quadratic B-spline interpolation)&lt;/li&gt;
&lt;li&gt;楕円積分のドメイン拡張&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_pi&lt;/code&gt;と&lt;code&gt;cos_pi&lt;/code&gt;のパフォーマンス改善&lt;/li&gt;
&lt;li&gt;フォワードモードの自動微分&lt;/li&gt;
&lt;li&gt;ベクトル値の重心有理補間 (barycentric rational interpolation)&lt;/li&gt;
&lt;li&gt;フーリエ積分 (Fourier integrals) の評価に使用するOoura法 (Ooura&#39;s method)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Multiprecisionとの互換性を修正&lt;/li&gt;
&lt;li&gt;レアなアーキテクチャでのLambert-Wを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34; id=&#34;metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;以下の機能をC++11の可変引数テンプレートに対応した：&lt;code&gt;sequence&lt;/code&gt;, &lt;code&gt;one_of_c&lt;/code&gt;, &lt;code&gt;one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of1&lt;/code&gt;, &lt;code&gt;one_char_except_c&lt;/code&gt;, &lt;code&gt;one_char_except&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_METAPARSE_STRING&lt;/code&gt;が範囲外の文字をテンプレート引数として使用できなかった問題を修正&lt;/li&gt;
&lt;li&gt;C++14において&lt;code&gt;any_of_c&amp;lt;&amp;gt;&lt;/code&gt;が空配列を作成しなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;adaptive_sort_combine_blocks&lt;/code&gt;内の最後のイテレーションにおいて、イテレータに対する不正なインクリメント・デクリメントが行われていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34; id=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coreの&lt;code&gt;alloc_construct_n&lt;/code&gt;、&lt;code&gt;alloc_destroy_n&lt;/code&gt;を使用することでアロケータサポートを簡略化 (Glen Fernandes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 参照修飾とCV修飾の組み合わせをサポートするため、&lt;code&gt;mem_fun&lt;/code&gt;と&lt;code&gt;const_mem_fun&lt;/code&gt;のバリエーションを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cv_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cvref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() &amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; &lt;code&gt;key&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;付き関数を正しくハンドリングできるようにした&lt;ul&gt;
&lt;li&gt;C++17で例外仕様が型の一部になった影響&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34; target=&#34;_blank&#34;&gt;C++17 例外仕様を型システムの一部にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;機能拡張&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Boostのリリースマネージャからの要求に従い、&lt;code&gt;version.hpp&lt;/code&gt;と&lt;code&gt;revision.hpp&lt;/code&gt;をdetailディレクトリ以下に移動した。それと、不足していたソースコード中のライセンス表記を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/185&#34; target=&#34;_blank&#34;&gt;GitHub #185&lt;/a&gt; このIssueで報告された、&lt;code&gt;std::launder()&lt;/code&gt;を使わなければ未定義動作になるケースについてFAQを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;OUTCOME_TRY&lt;/code&gt;の実装をリファクタし、外からの入力を受け付けられるカスタマイゼーション・ポイントであることをより明確にした。&lt;code&gt;std::experimental::expected&amp;lt;T, E&amp;gt;&lt;/code&gt;の特殊化は不要になったので削除した。カスタマイゼーション・ポイントについて以前はADLによって検知するとドキュメントに書いていたが、実際はそうではなかったので説明を修正した。外部入力をどのように追加すればよいかを記載した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt; Boost用に、motivationとplug_error_codeを分けた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_VERSION_MINOR&lt;/code&gt;を1に更新した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメント化されているにも関わらず、Outcomeがswap操作の強い保証を実装していなかったので修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/190&#34; target=&#34;_blank&#34;&gt;GitHub #190&lt;/a&gt; Boost版のテストスイートがリリースディストリビューションで実行できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/182&#34; target=&#34;_blank&#34;&gt;GitHub #182&lt;/a&gt; &lt;code&gt;trait::is_exception_ptr_available&amp;lt;T&amp;gt;&lt;/code&gt;が常に&lt;code&gt;true&lt;/code&gt;になっていたため、診断メッセージが表示されず、全てを&lt;code&gt;make_exception_ptr()&lt;/code&gt;に渡そうとしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; スタンドアローン版とBoost版を組み合わせた場合、翻訳単位に&lt;code&gt;std::basic_outcome_failure_exception_from_error()&lt;/code&gt;が2回定義されてしまっていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34; id=&#34;parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; キーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_TEMPLATE_KEYWORD&lt;/code&gt;を更新。関数をパラメータとして受け付けられるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; Boost Accumulators Libraryからキーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_NESTED_KEYWORD&lt;/code&gt;を移動した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/16&#34; target=&#34;_blank&#34;&gt;GitHub #16&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt;と&lt;code&gt;std::ref()&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; &lt;code&gt;boost::parameter::required&lt;/code&gt;、&lt;code&gt;boost::parameter::optional&lt;/code&gt;、&lt;code&gt;boost::parameter::deduced&lt;/code&gt;メタ関数の定義を、&lt;code&gt;boost/parameter&lt;/code&gt;ディレクトリ内に移動&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/20&#34; target=&#34;_blank&#34;&gt;GitHub #20&lt;/a&gt; Boost.Parameterを有効にした関数呼び出し演算子を生成できるようにした。&lt;code&gt;&amp;lt;boost/parameter/preprocessor.hpp&amp;gt;&lt;/code&gt;に、コード生成マクロ&lt;code&gt;BOOST_PARAMETER_FUNCTION_CALL_OPERATOR&lt;/code&gt;と&lt;code&gt;BOOST_PARAMETER_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/21&#34; target=&#34;_blank&#34;&gt;GitHub #21&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; パラメータのカテゴリ修飾として&#34;forward&#34;、&#34;consume&#34;、&#34;move_from&#34;を追加 (現在の修飾は&#34;in&#34;、&#34;out&#34;、&#34;in_out&#34;)&lt;ul&gt;
&lt;li&gt;以下の記事がベースとなっている： &lt;a href=&#34;http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters&#34; target=&#34;_blank&#34;&gt;C++ Core Guidelines: The Rules for in, out, in-out, consume, and forward Function Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;このカテゴリ修飾の追加にともなって、新たな構文を2つ追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME((object-name), namespace-name) qualifier(tag-name))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME(qualifier(name))&lt;/code&gt; (&lt;code&gt;BOOST_PARAMETER_NAME(consume(my_param))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME&lt;/code&gt;を正しく使用した既存コードは影響を受けないはずなので、破壊的変更はない&lt;/li&gt;
&lt;li&gt;使い方が変更になった理由は、引数を合成したBoost.Parameterが有効になった関数とコンストラクタにパラメータ・カテゴリの制約を適用するため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; 完全転送のサポートを追加。その結果、&lt;code&gt;parameter::parameters::operator()&lt;/code&gt;が非constの右辺値を受け取れるようになった。これによるいい影響として、完全転送をサポートするコンパイラでは&lt;code&gt;BOOST_PARAMETER_MAX_ARITY&lt;/code&gt;の制約に縛られなくなる。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_HAS_PERFECT_FORWARDING&lt;/code&gt;で完全転送が有効かを確認でき、マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING&lt;/code&gt;によって手動で完全転送のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;以下のメタ関数を追加：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/27&#34; target=&#34;_blank&#34;&gt;GitHub #27&lt;/a&gt; &lt;code&gt;boost::parameter::is_argument_pack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;boost::parameter::are_tagged_arguments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;boost::parameter::result_of::compose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 可変引数テンプレート関数&lt;code&gt;boost::parameter::compose()&lt;/code&gt;を追加。これは名前付きパラメータをとって引数パックにして返す。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/61&#34; target=&#34;_blank&#34;&gt;GitHub #61&lt;/a&gt; 完全転送をサポートしないコンパイラの場合、設定マクロ&lt;code&gt;BOOST_PARAMETER_COMPOSE_MAX_ARITY&lt;/code&gt;が&lt;code&gt;boost::parameter::compose()&lt;/code&gt;がとれる引数の最大数になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 以下のコード生成マクロを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt; Boost.MP11のサポートを追加。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_CAN_USE_MP11&lt;/code&gt;を使用してBoost.MP11がサポートされているかを確認できる。マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_MP11_USAGE&lt;/code&gt;によって手動でBoost.MP11のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/73&#34; target=&#34;_blank&#34;&gt;GitHub #73&lt;/a&gt; SFINAEによるパラメータ依存の戻り値型のサポートを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34; id=&#34;ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/ptr_container/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 1.66.0から導入されたレグレッションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/boostorg/smart_ptr/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;weak_ptr&lt;/code&gt;クラスに、エイリアス・コンストラクタ (aliasing constructors) を追加
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは、&lt;code&gt;weak_from_this()&lt;/code&gt;を使用する際に必要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これらのコンストラクタがない場合は、以下のようなコードとなる：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static_pointer_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt;::empty()&lt;/code&gt;を追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;基本クラス、&lt;code&gt;shared_from()&lt;/code&gt;、&lt;code&gt;weak_from()&lt;/code&gt;関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;は、&lt;code&gt;enable_shared_from_this&lt;/code&gt;と違って非テンプレートなクラスである。このクラスを基底クラスとすることで、&lt;code&gt;this&lt;/code&gt;を生ポインタ、&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;weak_ptr&lt;/code&gt;として取得する機能が使用できるようになる。新たに書くコードでは、&lt;code&gt;enable_shared_from_this&lt;/code&gt;よりもこちらを使用することを推奨する

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_shared_from&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++98モードのthread sanitizer buildで報告された&lt;code&gt;name()&lt;/code&gt;、&lt;code&gt;source_location()&lt;/code&gt;、&lt;code&gt;source_line()&lt;/code&gt;の出力を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; MSVCでの&lt;code&gt;name()&lt;/code&gt;と&lt;code&gt;source_location()&lt;/code&gt;の長い文字列出力を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.11&lt;/li&gt;
&lt;li&gt;詳細な変更は&lt;a href=&#34;https://www.boost.org/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Chang Log&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;非推奨になっている非常に古いヘッダーを使用した場合に、非推奨の警告を表示するようにした。このような警告が表示された場合は、指示に従ってほしい。これらのヘッダーは将来のリリースで削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロを抽象型の比較に使用できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/209&#34; target=&#34;_blank&#34;&gt;GitHub #209&lt;/a&gt; &lt;code&gt;BOOST_TEST_CHECK&lt;/code&gt;で抽象型を比較できない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/218&#34; target=&#34;_blank&#34;&gt;GitHub #218&lt;/a&gt; テストスイートのデフォルトファイル名がドキュメントと違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/219&#34; target=&#34;_blank&#34;&gt;GitHub #219&lt;/a&gt; 未使用変数の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; 非推奨ヘッダーに&lt;code&gt;BOOST_HEADER_DEPRECATED&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;あらゆる種類の文字列を出力ストリームに最適に書き込めるユーティリティ関数として、&lt;code&gt;ostream_string&lt;/code&gt;を&lt;code&gt;boost/utility/ostream_string.hpp&lt;/code&gt;に実装した。この関数は[ostream.formatted.reqmts]の要件を満たす (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_string_view&lt;/code&gt;と&lt;code&gt;basic_string_ref&lt;/code&gt;のストリーム出力演算子を、&lt;code&gt;rdbuf&lt;/code&gt;ストリームバッファに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; : &lt;a href=&#34;https://github.com/boostorg/uuid/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; MD5ベースのUUID生成が、全てのエンディアンシステムで同一となるよう修正した。1.66.0から1.70.0までの動作と互換性を保ちたい場合は、&lt;code&gt;BOOST_UUID_COMPAT_PRE_1_71_MD5&lt;/code&gt;をdefineすること。この修正は、SHA1ベースのデフォルトのUUID生成には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; 非const参照の&lt;code&gt;variant&lt;/code&gt;を渡したときの&lt;code&gt;boost::apply_visitor&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/issues/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; &lt;code&gt;std::hash&lt;/code&gt;のサポートを追加。この定義を避ける場合は&lt;code&gt;BOOST_VARIANT_DO_NOT_SPECIALIZE_STD_HASH&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt; バイナリサイズとパフォーマンスの小さな最適化を追加 (Nikita Kniazev氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/64&#34; target=&#34;_blank&#34;&gt;GitHub #64 (Nikita Kniazev氏)&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/67&#34; target=&#34;_blank&#34;&gt;GitHub #67 (Hans Dembinski氏)&lt;/a&gt;を含むメンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YAP式を自己評価 (self evaluating) する方法を示す例を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>