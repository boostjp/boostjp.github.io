<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2021-08-11T14:39:43.520341</updated>
  <id>0e913f43-6a2f-453d-b8ba-999e2bdbe22d</id>

  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0 : BeastとPropertyTreeを追加</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>2921f73311e7fc0d0c7b90dc4e35917e83465bf9:document/version/1_77_0.md</id>
      <updated>2021-08-10T11:56:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このメンテナンスアップデートは、小さなバグ修正と、CI報告の更新を含む&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2139&#34; target=&#34;_blank&#34;&gt;GitHub #2139&lt;/a&gt; &lt;code&gt;test_stream&lt;/code&gt;に、executorをrebindする機能を追加&lt;/li&gt;
&lt;li&gt;WebSocketのasync shutdownでの未使用変数の警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2124&#34; target=&#34;_blank&#34;&gt;GitHub #2124&lt;/a&gt; Beastで浮動小数点数のサポートを要求しないようにした&lt;/li&gt;
&lt;li&gt;すべての操作においてcommon buffers typeを使用することにより、websocketyのコンパイルされたコードのサイズを削減&lt;/li&gt;
&lt;li&gt;HTTP Parserの間違った使い方の検出を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2140&#34; target=&#34;_blank&#34;&gt;GitHub #2140&lt;/a&gt; ライブラリのメタデータにcxxstdタグを追加&lt;/li&gt;
&lt;li&gt;Drone CIに移行&lt;/li&gt;
&lt;li&gt;ドキュメントの小さな書式を改善&lt;/li&gt;
&lt;li&gt;CMLは、in-treeビルド中に必要なBoost Thread Libraryを見つけられるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt; riscv32ターゲットのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_intersperse&lt;/code&gt;, &lt;code&gt;mp_split&lt;/code&gt;, &lt;code&gt;mp_join&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;衝突数を減らし&lt;code&gt;boost::pfr::hash_value()&lt;/code&gt;の品質を向上させるため、MurMur Hashベース実装の&lt;code&gt;hash_combine()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;Visual Studio 2017のC++14モードをサポート (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;inspect toolによって発見した問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; &lt;code&gt;include/boost/pfr/detail/fields_count.hpp&lt;/code&gt;内の不要なセミコロンの削除など、いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;継承型のコンパイル時アサートを追加 (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;コピー省略が保証されている場合の、ムーブ不能なフィールドをもつ集成体のリフレクションが可能になった&lt;/li&gt;
&lt;li&gt;スペルミスを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34; id=&#34;property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスリリース&lt;/li&gt;
&lt;li&gt;CIでのコンパイラのカバレッジを拡張&lt;/li&gt;
&lt;li&gt;CMakeLists.txtでのBoostの互換性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;から&lt;code&gt;std::error_category&lt;/code&gt;への変換演算子を改善し、&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;が必要なくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;の比較演算子をメンバ関数の代わりにインラインのfriendにした (↑の変更の副作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;は実際にオブジェクトのインスタンス化が必要になるまで&lt;code&gt;generic_category()&lt;/code&gt;の呼び出しを遅らせるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;と&lt;code&gt;error_condition::message&lt;/code&gt;を非推奨ではなくした。また、&lt;code&gt;operator bool()&lt;/code&gt;も&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;system categoryにおいてオブジェクトのインスタンス化を回避するために&lt;code&gt;generic_category()&lt;/code&gt;を呼び出すのをやめた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_error_condition&lt;/code&gt;で返される値は、いくつかのケースでsystem categoryではなくgeneric categoryに変わる場合がある。これは、入力となるsystem categoryの&lt;code&gt;error_code&lt;/code&gt;に合致する&lt;code&gt;errc_t&lt;/code&gt;がない場合にPOSIX環境で起こる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;std::error_code&lt;/code&gt;の相互運用性を大幅に改善した。&lt;code&gt;std::error_code&lt;/code&gt;から&lt;code&gt;boost::system::error_code&lt;/code&gt;を構築できるようになり、&lt;code&gt;std::error_code&amp;amp;&lt;/code&gt;をとる関数に&lt;code&gt;boost::system::error_code&lt;/code&gt;を渡せるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;にストリーム入力演算子&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; メモリ確保なくUUID文字列を書き込むための&lt;code&gt;to_chars()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のバージョン4.6.1をリリース&lt;/li&gt;
&lt;li&gt;cygwin64でのb2エンジンのビルドを修正 (René Ferdinand Rivera Morell氏に感謝)&lt;/li&gt;
&lt;li&gt;compiler execからのclang toolsetのバージョン検出を修正 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0リリースノート : 残りを追加</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>bbc2f3fa95560e7bbae6faf037f114d6eba6e513:document/version/1_77_0.md</id>
      <updated>2021-08-02T12:49:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt; riscv32ターゲットのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_intersperse&lt;/code&gt;, &lt;code&gt;mp_split&lt;/code&gt;, &lt;code&gt;mp_join&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;衝突数を減らし&lt;code&gt;boost::pfr::hash_value()&lt;/code&gt;の品質を向上させるため、MurMur Hashベース実装の&lt;code&gt;hash_combine()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;Visual Studio 2017のC++14モードをサポート (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;inspect toolによって発見した問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; &lt;code&gt;include/boost/pfr/detail/fields_count.hpp&lt;/code&gt;内の不要なセミコロンの削除など、いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;継承型のコンパイル時アサートを追加 (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;コピー省略が保証されている場合の、ムーブ不能なフィールドをもつ集成体のリフレクションが可能になった&lt;/li&gt;
&lt;li&gt;スペルミスを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;から&lt;code&gt;std::error_category&lt;/code&gt;への変換演算子を改善し、&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;が必要なくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;の比較演算子をメンバ関数の代わりにインラインのfriendにした (↑の変更の副作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;は実際にオブジェクトのインスタンス化が必要になるまで&lt;code&gt;generic_category()&lt;/code&gt;の呼び出しを遅らせるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;と&lt;code&gt;error_condition::message&lt;/code&gt;を非推奨ではなくした。また、&lt;code&gt;operator bool()&lt;/code&gt;も&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;system categoryにおいてオブジェクトのインスタンス化を回避するために&lt;code&gt;generic_category()&lt;/code&gt;を呼び出すのをやめた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_error_condition&lt;/code&gt;で返される値は、いくつかのケースでsystem categoryではなくgeneric categoryに変わる場合がある。これは、入力となるsystem categoryの&lt;code&gt;error_code&lt;/code&gt;に合致する&lt;code&gt;errc_t&lt;/code&gt;がない場合にPOSIX環境で起こる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;std::error_code&lt;/code&gt;の相互運用性を大幅に改善した。&lt;code&gt;std::error_code&lt;/code&gt;から&lt;code&gt;boost::system::error_code&lt;/code&gt;を構築できるようになり、&lt;code&gt;std::error_code&amp;amp;&lt;/code&gt;をとる関数に&lt;code&gt;boost::system::error_code&lt;/code&gt;を渡せるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;にストリーム入力演算子&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; メモリ確保なくUUID文字列を書き込むための&lt;code&gt;to_chars()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のバージョン4.6.1をリリース&lt;/li&gt;
&lt;li&gt;cygwin64でのb2エンジンのビルドを修正 (René Ferdinand Rivera Morell氏に感謝)&lt;/li&gt;
&lt;li&gt;compiler execからのclang toolsetのバージョン検出を修正 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0 : Filesystemの追加に対応</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>6d9dd410918376010c7c0b2d5b135b79297d7ae7:document/version/1_77_0.md</id>
      <updated>2021-08-01T23:12:26+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リリースノート -- 1.77.0リリースノート : 7割くらい書いた</title>
      <link href="https://boostjp.github.io/document/version.html"/>
      <id>27e3227281d5bbb641bb109cda000288d708d20c:document/version.md</id>
      <updated>2021-08-01T22:23:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、Boostの各バージョンのリリースノートを翻訳、情報補完したドキュメントです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html&#34;&gt;雛形ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html&#34;&gt;1.77.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html&#34;&gt;1.76.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html&#34;&gt;1.75.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html&#34;&gt;1.74.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html&#34;&gt;1.73.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html&#34;&gt;1.72.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html&#34;&gt;1.71.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html&#34;&gt;1.70.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_69_0.html&#34;&gt;1.69.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_68_0.html&#34;&gt;1.68.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html&#34;&gt;1.67.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html&#34;&gt;1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html&#34;&gt;1.65.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_0.html&#34;&gt;1.65.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html&#34;&gt;1.64.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html&#34;&gt;1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_62_0.html&#34;&gt;1.62.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_61_0.html&#34;&gt;1.61.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_60_0.html&#34;&gt;1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_59_0.html&#34;&gt;1.59.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_58_0.html&#34;&gt;1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_57_0.html&#34;&gt;1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html&#34;&gt;1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_55_0.html&#34;&gt;1.55.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_54_0.html&#34;&gt;1.54.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_53_0.html&#34;&gt;1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_52_0.html&#34;&gt;1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_51_0.html&#34;&gt;1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_50_0.html&#34;&gt;1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_49_0.html&#34;&gt;1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_48_0.html&#34;&gt;1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_47_0.html&#34;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_1.html&#34;&gt;1.46.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_0.html&#34;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_45_0.html&#34;&gt;1.45.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0リリースノート : 7割くらい書いた</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>27e3227281d5bbb641bb109cda000288d708d20c:document/version/1_77_0.md</id>
      <updated>2021-08-01T22:23:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.76.0リリースノート -- 1.76.0 : Histogramを追加 (close #559)</title>
      <link href="https://boostjp.github.io/document/version/1_76_0.html"/>
      <id>da66a6ff372f692872f72936c1bb6c5d4d0ce809:document/version/1_76_0.md</id>
      <updated>2021-04-26T14:43:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.76.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_76_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_76_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_76_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_76_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#bind&#34;&gt;Bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#json&#34;&gt;Json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;型の別名&lt;code&gt;ip::scope_id_type&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;型の別名&lt;code&gt;ip::port_type&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;IPアドレスの&lt;code&gt;std::hash&lt;/code&gt;特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_endpoint&amp;lt;&amp;gt;&lt;/code&gt;の&lt;code&gt;std::hash&lt;/code&gt;特殊化を追加&lt;/li&gt;
&lt;li&gt;SFINAEの使用をリファクタし、コンパイル時間を改善&lt;/li&gt;
&lt;li&gt;カスタマイゼーションポイントのfriendサポートを追加し、多くのカスタマイズをprivateにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_io_executor&lt;/code&gt;をstrong typedefスタイルのクラスに変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::as_single&lt;/code&gt;を非推奨のハンドラーフックで動作するよう修正&lt;/li&gt;
&lt;li&gt;すべてのプラットフォーム向けにpthreadの条件変数の属性を整理&lt;/li&gt;
&lt;li&gt;socketとdescriptorのスレッド安全性を明確にした&lt;/li&gt;
&lt;li&gt;macOS/FreeBSDで、&lt;code&gt;socket()&lt;/code&gt;が失敗した場合に&lt;code&gt;errno&lt;/code&gt;が上書きされないようにした&lt;/li&gt;
&lt;li&gt;ムーブ代入時の&lt;code&gt;io_context&lt;/code&gt;と&lt;code&gt;thread_pool&lt;/code&gt;の追跡を修正&lt;/li&gt;
&lt;li&gt;内部の&lt;code&gt;call_stack&lt;/code&gt;オブジェクトが実装ファイルからのみアクセスされるようにした&lt;/li&gt;
&lt;li&gt;I/Oオブジェクトのムーブ代入でexecutorの有効状態を保つよう修正&lt;/li&gt;
&lt;li&gt;MSVCで関数のデフォルトテンプレート引数のコンパイラサポートの検出を修正&lt;/li&gt;
&lt;li&gt;正しいセマンティクスが生成されなかったため、&lt;code&gt;blocking.always&lt;/code&gt;が&lt;code&gt;strand&amp;lt;&amp;gt;&lt;/code&gt;で使用されないよう修正&lt;/li&gt;
&lt;li&gt;非推奨になっていた&lt;code&gt;asio/impl/src.cpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; MSVCのARMターゲット向けコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2139&#34; target=&#34;_blank&#34;&gt;GitHub #2139&lt;/a&gt; &lt;code&gt;test::stream&lt;/code&gt;にexecutorのrebindを追加&lt;/li&gt;
&lt;li&gt;WebSocket async shutdown内での未使用変数の警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2124&#34; target=&#34;_blank&#34;&gt;GitHub #2124&lt;/a&gt; Beastを使用するために浮動小数点サポートを要求しないようにした&lt;/li&gt;
&lt;li&gt;すべての操作にcommon buffers typeを使用するようにしたことにより、websocketyのコンパイルされたコードのサイズを削減した&lt;/li&gt;
&lt;li&gt;HTTPパーサーの誤った使い方の検出を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2140&#34; target=&#34;_blank&#34;&gt;GitHub #2140&lt;/a&gt; ライブラリのメタデータにcxxstdタグを追加&lt;/li&gt;
&lt;li&gt;Drone CIに移行&lt;/li&gt;
&lt;li&gt;小さなドキュメントフォーマットの改善&lt;/li&gt;
&lt;li&gt;in-treeビルドでの要求されるBoost.ThreadライブラリをCMLが見つけられるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#bind&#34; id=&#34;bind&#34;&gt;Bind&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind&lt;/code&gt;でC++11標準のプレースホルダーを使用できるようサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::apply&lt;/code&gt;で可変引数テンプレートと完全転送を使用できるよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;未使用の戻り値に関連するバグを捕捉するために、すべてのコンテナに&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性を追加&lt;/li&gt;
&lt;li&gt;デフォルトの標準例外クラスをBoost.Container独自のクラスに置き換え、インクルードファイルのオーバーヘッドを大幅に減らした。例として、Visual Studio 2019では&lt;code&gt;boost/container/vector.hpp&lt;/code&gt;をプリプロセスした際のサイズが1.5MBから930KBに減少する。標準例外クラスを使用したい場合は、Boost.Containerのクラスを使用するまえに&lt;code&gt;BOOST_CONTAINER_USE_STD_EXCEPTIONS&lt;/code&gt;を定義すること&lt;/li&gt;
&lt;li&gt;バグと問題の修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; &lt;code&gt;flat_map::insert&lt;/code&gt;がinitializer listとpairであいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/139&#34; target=&#34;_blank&#34;&gt;GitHub #139&lt;/a&gt; &lt;code&gt;flat_map::merge&lt;/code&gt;のドキュメントが間違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/141&#34; target=&#34;_blank&#34;&gt;GitHub #141&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;が要素型のnoexcept状態を伝播しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; &lt;code&gt;pmr::map&lt;/code&gt;と&lt;code&gt;std::pair&lt;/code&gt;を組み合わせて使用した場合のコンパイルエラーを修正。&lt;code&gt;std::tuple&lt;/code&gt;では正しく動作していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/171&#34; target=&#34;_blank&#34;&gt;GitHub #171&lt;/a&gt; &lt;code&gt;deque::clear()&lt;/code&gt;が未定義動作を引き起こしていた問題を修正 (UBSanで検出された)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;変換可能なreference wrapper間の暗黙変換を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/cmath.hpp&lt;/code&gt;を追加。&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;からの移植可能な浮動小数点数の分類関数の実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/bit.hpp&lt;/code&gt;を追加。C++20標準ヘッダ&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;の移植可能な実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST_EQ&lt;/code&gt;と&lt;code&gt;BOOST_TEST_NE&lt;/code&gt;でのC++20の文字型を修正&lt;/li&gt;
&lt;li&gt;アロケータアクセスのユーティリティを見直した (VS2013をサポートし、&lt;code&gt;allocator_traits&lt;/code&gt;を使用したワークアラウンドがない)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; C++20の&lt;code&gt;import&lt;/code&gt;キーワードとの衝突を避けるために、&lt;code&gt;boost::dll::import&lt;/code&gt;を&lt;code&gt;boost::dll::import_symbol&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;FAQを含むドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; WASIプラットフォームとの互換を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/176&#34; target=&#34;_blank&#34;&gt;GitHub #176&lt;/a&gt; パスが&lt;code&gt;////&lt;/code&gt;である場合の、&lt;code&gt;path::remove_filename&lt;/code&gt;によって送出される例外を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/182&#34; target=&#34;_blank&#34;&gt;GitHub #182&lt;/a&gt; &lt;code&gt;create_directories&lt;/code&gt;が内部で発行されたファイル状態の問い合わせで起きたエラーを無視する問題を修正。修正前は、&lt;code&gt;create_directories&lt;/code&gt;が誤ったエラーコードが返される可能性があった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを落とす。また、要求するC++の最低バージョンをC++11からC++14に変更する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このリリースには、クリティカルな修正が含まれている。あなたの使用に影響がないことを確認してほしい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crop&lt;/code&gt;をともなう&lt;code&gt;algorithm::reduce&lt;/code&gt;は、選択した範囲が実際にflow binと重なっている (overlap) 場合に、flow binのカウントを削除しないようになり、flow binの処理 (treatment) がinner binと一致するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::mean&lt;/code&gt;と&lt;code&gt;accumulators::weighted_mean&lt;/code&gt;は、&lt;code&gt;operator+=&lt;/code&gt;が呼び出された際に、例としてアキュムレータがヒストグラムを追加した際に、分散 (variance) を正しく計算するようになった。分散が小さすぎる以前の問題として値が間違っていた&lt;/li&gt;
&lt;li&gt;アキュムレータが&lt;code&gt;operator()&lt;/code&gt;の代わりに&lt;code&gt;operator+=&lt;/code&gt;を使用した場合に、ユーザー定義アキュムレータでの重み (weight) サポートの検出がコンパイル時に壊れていた。テストは組み込み&lt;code&gt;weighted_sum&lt;/code&gt;の誤ったケースのみパスしていた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#interprocess&#34; id=&#34;#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ネイティブのワイド文字APIを提供するOS (例としてWindows) での名前付きリソースの&lt;code&gt;wchar_t&lt;/code&gt; APIのサポートを追加。以下のAPIは、&lt;code&gt;wchar_t&lt;/code&gt;の名前をサポートするよう更新した：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_mapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_mapped_file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_shared_memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_windows_shared_memory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_memory_object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory_object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_condition_any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_recursive_mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_semaphore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_sharable_mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_upgradable_mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ネイティブのPOSIXもしくはWinapiの関数の代わりにプロセス共有同期プリミティブの汎用エミュレーションコードを使用することを無効にする&lt;code&gt;BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION&lt;/code&gt;マクロを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; Cygwinでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/83&#34; target=&#34;_blank&#34;&gt;GitHub #83&lt;/a&gt; &lt;code&gt;BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;bufferstream&lt;/code&gt;のMSVCでの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/106&#34; target=&#34;_blank&#34;&gt;GitHub #106&lt;/a&gt; &lt;code&gt;truncate_file&lt;/code&gt;で&lt;code&gt;fallocate&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/120&#34; target=&#34;_blank&#34;&gt;GitHub #120&lt;/a&gt; &lt;code&gt;segment_manager&lt;/code&gt;のカスタマイゼーションポイントとして&lt;code&gt;get_memory_algorithm()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/122&#34; target=&#34;_blank&#34;&gt;GitHub #122&lt;/a&gt; コンストラクタ／代入／swapの可能なところに&lt;code&gt;noexcept&lt;/code&gt;をつけた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/126&#34; target=&#34;_blank&#34;&gt;GitHub #126&lt;/a&gt; clang-cl.exeでの&lt;code&gt;_ReadWriteBarrier&lt;/code&gt;の非推奨警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存性を削減：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linear_slist_algorithms&lt;/code&gt;が返す型として&lt;code&gt;std::pair&lt;/code&gt;の代わりにシンプルな&lt;code&gt;node_ptr&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;/&lt;code&gt;slist&lt;/code&gt;が&lt;code&gt;std::equal_to&lt;/code&gt;/&lt;code&gt;std::less&lt;/code&gt;の代わりに&lt;code&gt;operator==&lt;/code&gt;/&lt;code&gt;operator &amp;lt;&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; &lt;code&gt;set.rbegin()&lt;/code&gt;の計算量がO(log(N))になっていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#json&#34; id=&#34;json&#34;&gt;Json&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/json/issues/481&#34; target=&#34;_blank&#34;&gt;GitHub #481&lt;/a&gt; &lt;code&gt;value_from&lt;/code&gt;の実装をリファクタ。現在は、ユーザーカスタマイゼーションは、ライブラリが提供するオーバーロードよりも優先される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/json/issues/484&#34; target=&#34;_blank&#34;&gt;GitHub #484&lt;/a&gt; いくつかの浮動小数点数の不正確なパースを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/json/issues/485&#34; target=&#34;_blank&#34;&gt;GitHub #485&lt;/a&gt; Boostといっしょに使用した場合の、スタンドアロンモードでのリンクエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/json/pull/497&#34; target=&#34;_blank&#34;&gt;GitHub #497&lt;/a&gt; GCC 4.8向けのBoost.Buildビルドを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/37&#34; target=&#34;_blank&#34;&gt;GitHub #37&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/39&#34; target=&#34;_blank&#34;&gt;GitHub #39&lt;/a&gt; Boost.Mathへの依存をなくした (Peter Dimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/38&#34; target=&#34;_blank&#34;&gt;GitHub #38&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; CIとカバレッジと修正 (&#34;The C++ Alliance&#34;のSam Darwin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/139&#34; target=&#34;_blank&#34;&gt;GitHub #139&lt;/a&gt; &lt;code&gt;asynchronous_sink&lt;/code&gt;フロントエンドの&lt;code&gt;unbounded_fifo_queue&lt;/code&gt;ポリシーで使用されるスレッドセーフなlog record queueの実装にあった競合状態 (race condition) を正式に修正。競合はTSANによって検出されたが、現在のほとんどのCPUアーキテクチャとコンパイラでは、実際には問題にならない&lt;/li&gt;
&lt;li&gt;channel属性をもつloggerをコピーした際に (たとえば&lt;code&gt;channel_logger&lt;/code&gt;)、元のloggerからchannel属性をディープコピーするようにした。これによって、新しいloggerでchannelを変更しても元のloggerに影響しなくなる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/141&#34; target=&#34;_blank&#34;&gt;GitHub #141&lt;/a&gt; テンプレートパラメータでの&lt;code&gt;std::allocator&amp;lt;void&amp;gt;&lt;/code&gt;の使用を新たなタグ型&lt;code&gt;boost::log::use_std_allocator&lt;/code&gt;に置き換えた。これは&lt;code&gt;std::allocator&amp;lt;void&amp;gt;&lt;/code&gt;がC++17以降で非推奨になりlibc++で警告が出力されるようになったため。このタグは、インスタンス化されたテンプレートが動的メモリを確保するために内部で&lt;code&gt;std::allocator&lt;/code&gt;の特殊化を使用するため、この変更による機能的な影響はない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/149&#34; target=&#34;_blank&#34;&gt;GitHub #149&lt;/a&gt; Boost.LogはMinGWおよびMinGW-w64向けに&lt;code&gt;__MSVCRT_VERSION__&lt;/code&gt;マクロを定義しないようにした。このマクロを定義すると、最近のMinGW-w64でオプションとして仕様できるUCRTとの非互換性が発生した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; C++03のサポートを削除した。このライブラリを使用するにはC++11以降が必要となる&lt;/li&gt;
&lt;li&gt;Z-testを追加&lt;/li&gt;
&lt;li&gt;統計関数であるunivariate (単変量) とbivariate (二変量) に実行ポリシーのサポートを追加 (C++17と&lt;code&gt;&amp;lt;execution&amp;gt;&lt;/code&gt;が必要となる)&lt;/li&gt;
&lt;li&gt;CIテストに対する大きな更新・改善&lt;/li&gt;
&lt;li&gt;bivariate (二変量) 統計に整数サポートを追加&lt;/li&gt;
&lt;li&gt;T-Testに整数サポートを追加&lt;/li&gt;
&lt;li&gt;Linear regression (線形回帰) に整数サポートを追加&lt;/li&gt;
&lt;li&gt;終了点 (endpoints) でのbeta distribution (ベータ分布) のPDFを正しくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/github.com/boostorg/math/issues/396&#34;&gt;GitHub #396&lt;/a&gt; 特定の多倍長ケースでStirling&#39;s approximation (スターリング近似) の使用を正しくした&lt;/li&gt;
&lt;li&gt;Clangで&lt;code&gt;-Wimplicit-int-float-conversion&lt;/code&gt;オプションを除外&lt;/li&gt;
&lt;li&gt;quaternion/octonionでのいくつかのconstexpr問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tanh_sinh&lt;/code&gt;微分での小さなパフォーマンス問題を修正&lt;/li&gt;
&lt;li&gt;hypergeometric functions (超幾何関数) 内部のスケーリングを更新し、多倍長型の64ビット (long long) 指数部の使用を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 新たな例外送出しないムーブのトレイトが不完全だった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 大規模なリファクタリングとコードのシンプル化により、C++11が絶対の要件となった&lt;/li&gt;
&lt;li&gt;例外フリーな環境で使用できるようにするために、&lt;code&gt;BOOST_TRY&lt;/code&gt;/&lt;code&gt;CATCH&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/277&#34; target=&#34;_blank&#34;&gt;GitHub #277&lt;/a&gt; powのコーナーケースを正しくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/257&#34; target=&#34;_blank&#34;&gt;GitHub #257&lt;/a&gt; lsbとmsbのドキュメントと一致するよう、送出される例外の型を正しくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/278&#34; target=&#34;_blank&#34;&gt;GitHub #278&lt;/a&gt; 関係しているが異なる型 (例としてアロケータ型) の間で、ムーブと演算を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seek&lt;/code&gt;関数もしくは&lt;code&gt;sync&lt;/code&gt;関数が使用され (Windowsなどで) 改行が変換された場合に、text file streamの文字が無視される問題を修正&lt;/li&gt;
&lt;li&gt;閉じられたfile streamを (&lt;code&gt;open&lt;/code&gt;によって) 再利用する際の、潜在的な「解放後の使用 (use-after-free)」バグを修正&lt;/li&gt;
&lt;li&gt;sourceがput-back character (&lt;code&gt;istream::unget()&lt;/code&gt;でストリームに戻す文字) をもっている、もしくはunbuffered modeが設定されているオブジェクトへムーブもしくはswapされたfile streamオブジェクトを使用した場合に、不正メモリアクセスが起きる可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;UCRTランタイムとの互換性のため、&lt;code&gt;__MSVCRT_VERSION__&lt;/code&gt;マクロを定義しないようにした&lt;/li&gt;
&lt;li&gt;既知の問題 : テキストファイルの読み取り速度が低下する。バイナリファイルと書き込みには影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVCでのC4702 (到達できないコード) 警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 繰り返してきたこのアナウンスをはじめてから1年 (3回のBoostメジャーリリース) が経ち、今回がv2.2ブランチの最初のリリースとなる。このブランチには、Boost 1.75以前に含まれたOutcome v2.1に対する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;VS2019.8でOucomeがコンパイルできなかったため、コルーチンを有効にする方法を変更した&lt;/li&gt;
&lt;li&gt;C++20の場合、コンパイラ固有のマークアップの代わりに&lt;code&gt;[[likely]]&lt;/code&gt;属性を使用するようにして、TRYが成功・失敗する可能性が高いことを示すようにした&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 以前まで&lt;code&gt;spare_storage(const basic_result|basic_outcome *) noexcep&lt;/code&gt;の値は&lt;code&gt;BOOST_OUTCOME_TRY&lt;/code&gt;に伝播されなかった。これによって、エラー結果を構築するためにキャプチャされたスタックバックトレースがすべて&lt;code&gt;TRY&lt;/code&gt;ごとに落とされていた。今回の修正では、&lt;code&gt;success_type&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;T&amp;gt;&lt;/code&gt;、および&lt;code&gt;auto success(T &amp;amp;&amp;amp;, ...)&lt;/code&gt;と&lt;code&gt;auto failure(T &amp;amp;&amp;amp;, ...)&lt;/code&gt;にオプション&lt;code&gt;spare_storage&lt;/code&gt;を追加したことにより、この問題を修正する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeが、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルできるようになったはず。Boost.ExceptionのメンテなであるEmilの協力によって、Outcomeにこの修正が行われた。Boost.Outcomeは、C++例外がグローバルに無効にされた状態でもコンパイルできるべきである。ただし、その状態では&lt;code&gt;boost::exception_ptr&lt;/code&gt;は使用できない&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;a href=&#34;https://github.com/ned14/outcome/issues/244&#34; target=&#34;_blank&#34;&gt;GitHub #244&lt;/a&gt; このライブラリの初期リリースから、特定のコーナーケースコードで&lt;code&gt;BOOST_OUTCOME_TRY&lt;/code&gt;が壊れていたため、TRYの動作を大幅に変える必要があってショックを受けた。詳細は&lt;a href=&#34;https://boostorg.github.io/outcome/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#parameter&#34; id=&#34;parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/log/issues/132&#34; target=&#34;_blank&#34;&gt;GitHub log #132&lt;/a&gt; 関数の名前付きパラメータのデフォルト値として右辺値が使用された場合にVS2015でコンパイルに失敗する問題に対するワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートコンストラクタのSFINAE式で、型のリフレクションに&lt;code&gt;const&lt;/code&gt;が欠落している問題を修正。標準ライブラリの実装がLWG3050の修正に対応していない環境であっても、&lt;code&gt;std::optional&amp;lt;std::chrono::duration&amp;lt;???&amp;gt;&amp;gt;&lt;/code&gt;フィールドをもつ集成体のリフレクションが正しく動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 比較関数を&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt; ドキュメントの多くの誤字を修正 (Phil Miller氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PollyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/20&#34; target=&#34;_blank&#34;&gt;GitHub #20&lt;/a&gt; &lt;a href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888&#34; target=&#34;_blank&#34;&gt;GCCのバグ&lt;/a&gt;に対するワークアラウンドを導入。GCCのバージョン9.3から10.2に影響する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#predef&#34; id=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バージョン1.13&lt;/li&gt;
&lt;li&gt;事前定義マクロ&lt;code&gt;ARCH_PPC_64&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ARCH_WORD_BITS*&lt;/code&gt;の再定義による警告・エラーを修正&lt;/li&gt;
&lt;li&gt;Elbrus 2000アーキテクチャを検出する事前定義マクロ&lt;code&gt;ARCH_E2K&lt;/code&gt;を追加 (Konstantin Ivlev氏に感謝)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10.xを超える最近のC++バージョンを扱えない問題を修正&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;バージョン1.12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;OpenBSD環境でendian.hヘッダを使用するよう変更 (Brad Smith氏に感謝)&lt;/li&gt;
&lt;li&gt;9を超える最近のstdcxxバージョンを扱えない問題を修正&lt;/li&gt;
&lt;li&gt;sub-BSD OSのヘッダを直接インクルードすることによる再定義警告を修正&lt;/li&gt;
&lt;li&gt;全ヘッダをインクルードするCIテストを追加&lt;/li&gt;
&lt;li&gt;FreeBSDでのClang or GCCのCIテストを追加&lt;/li&gt;
&lt;li&gt;アーキテクチャのワードサイズを検出するための&lt;code&gt;WORD_BITS&lt;/code&gt;事前定義マクロ集合を追加。これはMikhail Komarov氏によって提出された初期実装に触発されたもの&lt;/li&gt;
&lt;li&gt;Cygwin 32 or 64のCIテストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#property-tree&#34; id=&#34;property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Property Treeは新たなメンテナを得た&lt;/li&gt;
&lt;li&gt;非推奨となっているBoost.Bind機能の使用を修正&lt;/li&gt;
&lt;li&gt;Wikipediaへのリンクを修正&lt;/li&gt;
&lt;li&gt;GCCの警告を修正するために&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;CIテストを拡張&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#regex&#34; id=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Regexライブラリは、C++03モードを除いてヘッダオンリーとなった&lt;/li&gt;
&lt;li&gt;C++03サポートを非推奨化&lt;/li&gt;
&lt;li&gt;このライブラリは、Boostのほかのライブラリが存在しなくてもスタンドアロンで使用できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; ClangでのC++11未満でのビルドサポートを改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/71&#34; target=&#34;_blank&#34;&gt;GitHub #71&lt;/a&gt; 「シグナルハンドラ内でstacktraceを使用してはならない」という警告をより大きくした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studioのマネージドプロジェクト向けの修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ダブルバッファを使用するケースの生成されるコードを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2バージョン4.4.1&lt;ul&gt;
&lt;li&gt;macOSのデフォルトエンジンコンパイラ向けに、小さな間違いを修正するパッチを適用&lt;ul&gt;
&lt;li&gt;macOS/XCode向けのエンジンビルドのデフォルトをClangからGCCに修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0, 11.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>