<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-12-06T05:43:46.241856</updated>
  <id>b63d18da-9bc5-462c-a8e6-ab66f90be4f5</id>

  
    <entry>
      <title>Boost 1.66.0リリースノート -- 1.66.0リリースノート : Regexを追加 (close #203)</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>b64c379a7d2643504f9afb5f00ce2b365f9f3698:document/version/1_66_0.md</id>
      <updated>2017-12-06T14:40:02+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Networking TSによるインタフェース変更を反映させた (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf&#34; target=&#34;_blank&#34;&gt;N4546&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;変更リストは作成中 (TODO)&lt;/li&gt;
&lt;li&gt;Networking TSによって置き換えられた関数とクラスは非推奨となった&lt;/li&gt;
&lt;li&gt;サービステンプレートパラメータと対応するクラスは、デフォルトで無効となった。例として&lt;code&gt;basic_socket&amp;lt;Protocol, SocketService&amp;gt;&lt;/code&gt;の代わりにシンプルな&lt;code&gt;basic_socket&amp;lt;Protocol&amp;gt;&lt;/code&gt;がある。古いインタフェースを有効にする場合は、&lt;code&gt;BOOST_ASIO_ENABLE_OLD_SERVICES&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以前から非推奨だった関数を削除&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのカスタマイズをサポート&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのためにreactor関係のイベントを追加 (ディスクリプタの準備ができた、とか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;単位でロックを無効化するために使用する、特殊な「並行性のヒント (concurrency hint)」を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;の最初のコンストラクタ引数の完全転送を可能にした&lt;/li&gt;
&lt;li&gt;低レイヤーネイティブソケット (underlying native socket) の所有権を手放す機能を追加した (この機能を使用するには、Windows 8.1以降のI/O完了ポートバックエンドが必要)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数型の拡張アトミック命令を実験的に実装&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch_negate&lt;/code&gt;と&lt;code&gt;fetch_complement&lt;/code&gt;はアトミックに符号反転（2の補数）、もしくは1の補数（ビット反転）へ置換え、もとの値を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opaque_&amp;lt;op&amp;gt;&lt;/code&gt;は対応する&lt;code&gt;fetch_&amp;lt;op&amp;gt;&lt;/code&gt;に等しいが、値を返さない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;op&amp;gt;_and_test&lt;/code&gt;は&lt;code&gt;&amp;lt;op&amp;gt;&lt;/code&gt;をアトミックに行い、結果が&lt;code&gt;0&lt;/code&gt;であるならば&lt;code&gt;true&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bit_test_and_set&lt;/code&gt;、&lt;code&gt;bit_test_and_reset&lt;/code&gt;および&lt;code&gt;bit_test_and_complement&lt;/code&gt;はアトミックに指定したビットを&lt;code&gt;1&lt;/code&gt;にする（&lt;code&gt;set&lt;/code&gt;）、&lt;code&gt;0&lt;/code&gt;にする（&lt;code&gt;reset&lt;/code&gt;）もしくはビット反転（&lt;code&gt;complement&lt;/code&gt;）し、そのビットのもとの値を返す&lt;ul&gt;
&lt;li&gt;訳者註: 原文ではそのビットのもとの値を返すとなっているが、戻り値の型は&lt;code&gt;bool&lt;/code&gt;型であることに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf&#34; target=&#34;_blank&#34;&gt;P0558R1&lt;/a&gt;で提案、C++17に採択されたポインターを介した整数演算の削除に追従。それらはもう提供されなくなった&lt;/li&gt;
&lt;li&gt;C++17で追加された&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::difference_type&lt;/code&gt;にも追従し、ユーザコードで使用可能となった&lt;/li&gt;
&lt;li&gt;GCC 7へのサポートを改善し、x86-64環境下での128bit演算にはコンパイラ提供の&lt;code&gt;libatomic&lt;/code&gt;へのリンクは不要となった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows SDKの抽象レイヤーとしてBoost.WinAPIを使用するようにした&lt;/li&gt;
&lt;li&gt;日付から大きな年を加算・減算した際に、整数オーバーフローによって不正な結果になっていた問題を修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations&#34; target=&#34;_blank&#34;&gt;Boost.DateTime issue with adding long year durations - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CUDAストリームと同期できるようになった&lt;/li&gt;
&lt;li&gt;ROCm/HIPストリームと同期できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34; name=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;新たな変換指定子を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;a&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;fixed | scientific&lt;/code&gt;フラグを設定する (&lt;code&gt;hexfloat&lt;/code&gt;相当)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/43&#34; target=&#34;_blank&#34;&gt;&#39;b&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;boolalpha&lt;/code&gt;フラグを設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;A&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;a&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;F&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;f&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ISO 99の新たな引数型 &lt;code&gt;j&lt;/code&gt; (&lt;code&gt;intmax_t&lt;/code&gt;) と &lt;code&gt;z&lt;/code&gt; (&lt;code&gt;size_t&lt;/code&gt;) を追加。これは値の解析をし、型としては単に無視する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/44&#34; target=&#34;_blank&#34;&gt;GitHub #44&lt;/a&gt; Microsoftの新たな引数型プレフィックス &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;ptrdiff_t&lt;/code&gt;)、 &lt;code&gt;I32&lt;/code&gt; (&lt;code&gt;__int32&lt;/code&gt;)、 &lt;code&gt;I64&lt;/code&gt; (&lt;code&gt;__int64&lt;/code&gt;)、 &lt;code&gt;w&lt;/code&gt; (&lt;code&gt;wchar_t&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;format_matrix&lt;/code&gt;という新たな開発ツールを追加した。これはできるだけ多くの可能なフォーマットを組み合わせて、ファイルに記録する：&lt;ul&gt;
&lt;li&gt;Boostリリース時の回帰テストに役立つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snprintf&lt;/code&gt;との比較ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/36&#34; target=&#34;_blank&#34;&gt;GitHub #36&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;引数に対して安全に&lt;code&gt;operator%&lt;/code&gt;を使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/4636&#34; target=&#34;_blank&#34;&gt;Trac #4636&lt;/a&gt; MSVC環境で値の丸め処理が&lt;code&gt;/RTCc&lt;/code&gt;オプション (ランタイムエラーチェック) によって失敗していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/7477&#34; target=&#34;_blank&#34;&gt;Trac #7477&lt;/a&gt; MSVCの&lt;code&gt;/Za&lt;/code&gt;オプション (Microsoftの言語拡張を使用しない) との互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10324&#34; target=&#34;_blank&#34;&gt;Trac #10324&lt;/a&gt; 不正な&lt;code&gt;const_cast&lt;/code&gt;による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11632&#34; target=&#34;_blank&#34;&gt;Trac #11632&lt;/a&gt; 静的解析して問題があった&lt;code&gt;alt_sstream.hpp&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/149&#34; target=&#34;_blank&#34;&gt;PR#149&lt;/a&gt; &lt;code&gt;isspace(c)&lt;/code&gt; はVxWorksのDinkum clibではマクロとして実装されていないこと対応。Brian Kuhl(@kuhlenough)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/150&#34; target=&#34;_blank&#34;&gt;PR#150&lt;/a&gt; 循環したプリプロセッサのインクルードを修正。Gregor Jasny(@gjasny)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/151&#34; target=&#34;_blank&#34;&gt;PR#151&lt;/a&gt; &lt;code&gt;fusion::tuple&lt;/code&gt;の基底クラスが変更された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/153&#34; target=&#34;_blank&#34;&gt;PR#153&lt;/a&gt; &lt;code&gt;std::array&lt;/code&gt;でコンパイルエラーになることがあるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/154&#34; target=&#34;_blank&#34;&gt;PR#154&lt;/a&gt; C++03において、ネストしたコンテナのコピーでバグがあったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_collector::scan_for_files()&lt;/code&gt;のバグを修正。ユーザーアプリケーションの再起動後、ターゲットディレクトリ内のログファイル名が不正になることがあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt;と&lt;code&gt;prior()&lt;/code&gt;関数は、ネストした型（例えば&lt;code&gt;iterator_category&lt;/code&gt;や&lt;code&gt;difference_type&lt;/code&gt;といったような型特性に関わる型）を定義していないようなユーザイテレータをサポートするようになった。代わりにそれらの型を扱うには&lt;code&gt;std::iterator_traits&lt;/code&gt;を特殊化すること。これが正しく動作するためにはC++17準拠の&lt;code&gt;std::iterator_traits&lt;/code&gt;をサポートした環境が必要である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ガウス求積法 (Gauss quadrature) とガウス＝クロンロッド求積法 (Gauss-Kronrod quadrature) のルーチンを追加&lt;/li&gt;
&lt;li&gt;二重指数関数型数値積分 (double-exponential quadrature) のルーチンを追加 (tanh-sinh, exp-sinh, sinh-sinh)&lt;/li&gt;
&lt;li&gt;チェビシェフ多項式 (Chebyshev polynomial) の評価 (evaluation)、平方根 (roots)、積分 (integration)、微分 (differentiation)、内挿 (interpolation, 補間) のルーチンを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt;と&lt;code&gt;modify_key()&lt;/code&gt;をより頑強にし、Modifierで例外が送出された場合や、Rollback関数で復旧がされなかった場合に、変更要素を消去するようにした (完全な議論は &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12542&#34; target=&#34;_blank&#34;&gt;Trac #12542&lt;/a&gt; を参照)。これは技術的には後方互換性がなく、以下のコードにおいて：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Boostの以前のバージョンでは&lt;code&gt;c&lt;/code&gt;は維持されたが、現在は&lt;code&gt;c.begin()&lt;/code&gt;の要素は消去される。この問題を提起したJon Kalb氏に感謝する
- メンテナンス上の修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンパイラでは、Tがスカラー型の場合 optional&amp;lt;T&amp;gt; がトリビアルコピー可能となった。これは、これまでとは異なるストレージ(aligned_storage ではなく、単なる T)を用いることで実現している。 我々はコンパイラが default宣言 された関数をサポートすることを必須としている&lt;/li&gt;
&lt;li&gt;GCC が &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; の警告を誤って出すのを防止するため、 &lt;code&gt;operator==&lt;/code&gt; の実装を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34; name=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9、Clang 3.3から3.6といった古いバージョンのコンパイラで動作するようバックポートした。GCC 4.8のlibstdc++-v3では、一部の機能が欠如しているために、以下の制限がある (Clangでlibstdc++を使用する場合も同様)。&lt;ul&gt;
&lt;li&gt;状態を持つアロケータがない&lt;/li&gt;
&lt;li&gt;アロケータのムーブ構築がコピー構築にdecayされる&lt;/li&gt;
&lt;li&gt;要素のコピー中に例外が送出されると、コピー構築がクラッシュする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows Universal Platformの検出を改善した (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;cloudlibcを使用したCloudABIの検出を追加 (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;その他バグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;de-fuzzingによって発見されたセキュリティ問題に対する小さな修正をした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34; name=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常識から外れたMinGW-w64環境で動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libbacktrace&lt;/code&gt;がインストールされたMinGW環境 (&lt;code&gt;-w64&lt;/code&gt;なし) で動作するようにした。さらなる情報は、MinGWの「MinGW specific notes」セクションを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/next_prior.hpp&lt;/code&gt;をBoost.Iteratorモジュールに移動。ユーザーコードは変更の必要なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;name_generator&lt;/code&gt;をリファクタし、hash provider conceptによるハッシュアルゴリズムの設定変更をできるようにした。オプション機能としてRFC-4122のMD5ハッシュ実装を追加した。この変更によって、将来の標準ハッシュアルゴリズムがサポートしやすくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc4122#appendix-C&#34; target=&#34;_blank&#34;&gt;RFC 4122, Appendix C&lt;/a&gt;の名前空間として&lt;code&gt;boost::uuids::ns&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/8630&#34; target=&#34;_blank&#34;&gt;Trac #8630&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/11482&#34; target=&#34;_blank&#34;&gt;Trac #11482&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12253&#34; target=&#34;_blank&#34;&gt;Trac #12253&lt;/a&gt; &lt;code&gt;string_generator&lt;/code&gt;が不正なuuidを受け付けてしまっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10665&#34; target=&#34;_blank&#34;&gt;Trac #10665&lt;/a&gt; &lt;code&gt;name_generator::operator()&lt;/code&gt;をドキュメントに合わせて&lt;code&gt;const&lt;/code&gt;メンバ関数にした&lt;/li&gt;
&lt;li&gt;実証詳細のヘッダファイルをdetailディレクトリに移動した。ユーザーコードの変更は必要ないが、移動前の古いファイルをインクルードしたときに警告は出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/6971&#34; target=&#34;_blank&#34;&gt;Trac #6971&lt;/a&gt; &lt;code&gt;apply_visitor()&lt;/code&gt;の&lt;code&gt;visitables&lt;/code&gt;パラメータ (&lt;code&gt;variant&lt;/code&gt;オブジェクト) を完全転送するよう修正。この機能を実装してくれたLevon Tarakchyan氏に多大なる感謝を&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.66.0リリースノート -- 1.66.0リリースノート : Mathを追加 (close #202)</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>80ae16b1600b1281ffdfc15a16598942139e1530:document/version/1_66_0.md</id>
      <updated>2017-12-05T15:45:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Networking TSによるインタフェース変更を反映させた (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf&#34; target=&#34;_blank&#34;&gt;N4546&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;変更リストは作成中 (TODO)&lt;/li&gt;
&lt;li&gt;Networking TSによって置き換えられた関数とクラスは非推奨となった&lt;/li&gt;
&lt;li&gt;サービステンプレートパラメータと対応するクラスは、デフォルトで無効となった。例として&lt;code&gt;basic_socket&amp;lt;Protocol, SocketService&amp;gt;&lt;/code&gt;の代わりにシンプルな&lt;code&gt;basic_socket&amp;lt;Protocol&amp;gt;&lt;/code&gt;がある。古いインタフェースを有効にする場合は、&lt;code&gt;BOOST_ASIO_ENABLE_OLD_SERVICES&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以前から非推奨だった関数を削除&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのカスタマイズをサポート&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのためにreactor関係のイベントを追加 (ディスクリプタの準備ができた、とか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;単位でロックを無効化するために使用する、特殊な「並行性のヒント (concurrency hint)」を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;の最初のコンストラクタ引数の完全転送を可能にした&lt;/li&gt;
&lt;li&gt;低レイヤーネイティブソケット (underlying native socket) の所有権を手放す機能を追加した (この機能を使用するには、Windows 8.1以降のI/O完了ポートバックエンドが必要)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数型の拡張アトミック命令を実験的に実装&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch_negate&lt;/code&gt;と&lt;code&gt;fetch_complement&lt;/code&gt;はアトミックに符号反転（2の補数）、もしくは1の補数（ビット反転）へ置換え、もとの値を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opaque_&amp;lt;op&amp;gt;&lt;/code&gt;は対応する&lt;code&gt;fetch_&amp;lt;op&amp;gt;&lt;/code&gt;に等しいが、値を返さない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;op&amp;gt;_and_test&lt;/code&gt;は&lt;code&gt;&amp;lt;op&amp;gt;&lt;/code&gt;をアトミックに行い、結果が&lt;code&gt;0&lt;/code&gt;であるならば&lt;code&gt;true&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bit_test_and_set&lt;/code&gt;、&lt;code&gt;bit_test_and_reset&lt;/code&gt;および&lt;code&gt;bit_test_and_complement&lt;/code&gt;はアトミックに指定したビットを&lt;code&gt;1&lt;/code&gt;にする（&lt;code&gt;set&lt;/code&gt;）、&lt;code&gt;0&lt;/code&gt;にする（&lt;code&gt;reset&lt;/code&gt;）もしくはビット反転（&lt;code&gt;complement&lt;/code&gt;）し、そのビットのもとの値を返す&lt;ul&gt;
&lt;li&gt;訳者註: 原文ではそのビットのもとの値を返すとなっているが、戻り値の型は&lt;code&gt;bool&lt;/code&gt;型であることに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf&#34; target=&#34;_blank&#34;&gt;P0558R1&lt;/a&gt;で提案、C++17に採択されたポインターを介した整数演算の削除に追従。それらはもう提供されなくなった&lt;/li&gt;
&lt;li&gt;C++17で追加された&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::difference_type&lt;/code&gt;にも追従し、ユーザコードで使用可能となった&lt;/li&gt;
&lt;li&gt;GCC 7へのサポートを改善し、x86-64環境下での128bit演算にはコンパイラ提供の&lt;code&gt;libatomic&lt;/code&gt;へのリンクは不要となった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows SDKの抽象レイヤーとしてBoost.WinAPIを使用するようにした&lt;/li&gt;
&lt;li&gt;日付から大きな年を加算・減算した際に、整数オーバーフローによって不正な結果になっていた問題を修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations&#34; target=&#34;_blank&#34;&gt;Boost.DateTime issue with adding long year durations - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CUDAストリームと同期できるようになった&lt;/li&gt;
&lt;li&gt;ROCm/HIPストリームと同期できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34; name=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;新たな変換指定子を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;a&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;fixed | scientific&lt;/code&gt;フラグを設定する (&lt;code&gt;hexfloat&lt;/code&gt;相当)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/43&#34; target=&#34;_blank&#34;&gt;&#39;b&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;boolalpha&lt;/code&gt;フラグを設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;A&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;a&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;F&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;f&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ISO 99の新たな引数型 &lt;code&gt;j&lt;/code&gt; (&lt;code&gt;intmax_t&lt;/code&gt;) と &lt;code&gt;z&lt;/code&gt; (&lt;code&gt;size_t&lt;/code&gt;) を追加。これは値の解析をし、型としては単に無視する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/44&#34; target=&#34;_blank&#34;&gt;GitHub #44&lt;/a&gt; Microsoftの新たな引数型プレフィックス &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;ptrdiff_t&lt;/code&gt;)、 &lt;code&gt;I32&lt;/code&gt; (&lt;code&gt;__int32&lt;/code&gt;)、 &lt;code&gt;I64&lt;/code&gt; (&lt;code&gt;__int64&lt;/code&gt;)、 &lt;code&gt;w&lt;/code&gt; (&lt;code&gt;wchar_t&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;format_matrix&lt;/code&gt;という新たな開発ツールを追加した。これはできるだけ多くの可能なフォーマットを組み合わせて、ファイルに記録する：&lt;ul&gt;
&lt;li&gt;Boostリリース時の回帰テストに役立つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snprintf&lt;/code&gt;との比較ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/36&#34; target=&#34;_blank&#34;&gt;GitHub #36&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;引数に対して安全に&lt;code&gt;operator%&lt;/code&gt;を使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/4636&#34; target=&#34;_blank&#34;&gt;Trac #4636&lt;/a&gt; MSVC環境で値の丸め処理が&lt;code&gt;/RTCc&lt;/code&gt;オプション (ランタイムエラーチェック) によって失敗していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/7477&#34; target=&#34;_blank&#34;&gt;Trac #7477&lt;/a&gt; MSVCの&lt;code&gt;/Za&lt;/code&gt;オプション (Microsoftの言語拡張を使用しない) との互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10324&#34; target=&#34;_blank&#34;&gt;Trac #10324&lt;/a&gt; 不正な&lt;code&gt;const_cast&lt;/code&gt;による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11632&#34; target=&#34;_blank&#34;&gt;Trac #11632&lt;/a&gt; 静的解析して問題があった&lt;code&gt;alt_sstream.hpp&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/149&#34; target=&#34;_blank&#34;&gt;PR#149&lt;/a&gt; &lt;code&gt;isspace(c)&lt;/code&gt; はVxWorksのDinkum clibではマクロとして実装されていないこと対応。Brian Kuhl(@kuhlenough)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/150&#34; target=&#34;_blank&#34;&gt;PR#150&lt;/a&gt; 循環したプリプロセッサのインクルードを修正。Gregor Jasny(@gjasny)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/151&#34; target=&#34;_blank&#34;&gt;PR#151&lt;/a&gt; &lt;code&gt;fusion::tuple&lt;/code&gt;の基底クラスが変更された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/153&#34; target=&#34;_blank&#34;&gt;PR#153&lt;/a&gt; &lt;code&gt;std::array&lt;/code&gt;でコンパイルエラーになることがあるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/154&#34; target=&#34;_blank&#34;&gt;PR#154&lt;/a&gt; C++03において、ネストしたコンテナのコピーでバグがあったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_collector::scan_for_files()&lt;/code&gt;のバグを修正。ユーザーアプリケーションの再起動後、ターゲットディレクトリ内のログファイル名が不正になることがあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt;と&lt;code&gt;prior()&lt;/code&gt;関数は、ネストした型（例えば&lt;code&gt;iterator_category&lt;/code&gt;や&lt;code&gt;difference_type&lt;/code&gt;といったような型特性に関わる型）を定義していないようなユーザイテレータをサポートするようになった。代わりにそれらの型を扱うには&lt;code&gt;std::iterator_traits&lt;/code&gt;を特殊化すること。これが正しく動作するためにはC++17準拠の&lt;code&gt;std::iterator_traits&lt;/code&gt;をサポートした環境が必要である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ガウス求積法 (Gauss quadrature) とガウス＝クロンロッド求積法 (Gauss-Kronrod quadrature) のルーチンを追加&lt;/li&gt;
&lt;li&gt;二重指数関数型数値積分 (double-exponential quadrature) のルーチンを追加 (tanh-sinh, exp-sinh, sinh-sinh)&lt;/li&gt;
&lt;li&gt;チェビシェフ多項式 (Chebyshev polynomial) の評価 (evaluation)、平方根 (roots)、積分 (integration)、微分 (differentiation)、内挿 (interpolation, 補間) のルーチンを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt;と&lt;code&gt;modify_key()&lt;/code&gt;をより頑強にし、Modifierで例外が送出された場合や、Rollback関数で復旧がされなかった場合に、変更要素を消去するようにした (完全な議論は &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12542&#34; target=&#34;_blank&#34;&gt;Trac #12542&lt;/a&gt; を参照)。これは技術的には後方互換性がなく、以下のコードにおいて：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Boostの以前のバージョンでは&lt;code&gt;c&lt;/code&gt;は維持されたが、現在は&lt;code&gt;c.begin()&lt;/code&gt;の要素は消去される。この問題を提起したJon Kalb氏に感謝する
- メンテナンス上の修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンパイラでは、Tがスカラー型の場合 optional&amp;lt;T&amp;gt; がトリビアルコピー可能となった。これは、これまでとは異なるストレージ(aligned_storage ではなく、単なる T)を用いることで実現している。 我々はコンパイラが default宣言 された関数をサポートすることを必須としている&lt;/li&gt;
&lt;li&gt;GCC が &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; の警告を誤って出すのを防止するため、 &lt;code&gt;operator==&lt;/code&gt; の実装を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34; name=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9、Clang 3.3から3.6といった古いバージョンのコンパイラで動作するようバックポートした。GCC 4.8のlibstdc++-v3では、一部の機能が欠如しているために、以下の制限がある (Clangでlibstdc++を使用する場合も同様)。&lt;ul&gt;
&lt;li&gt;状態を持つアロケータがない&lt;/li&gt;
&lt;li&gt;アロケータのムーブ構築がコピー構築にdecayされる&lt;/li&gt;
&lt;li&gt;要素のコピー中に例外が送出されると、コピー構築がクラッシュする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows Universal Platformの検出を改善した (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;cloudlibcを使用したCloudABIの検出を追加 (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;その他バグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34; name=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常識から外れたMinGW-w64環境で動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libbacktrace&lt;/code&gt;がインストールされたMinGW環境 (&lt;code&gt;-w64&lt;/code&gt;なし) で動作するようにした。さらなる情報は、MinGWの「MinGW specific notes」セクションを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/next_prior.hpp&lt;/code&gt;をBoost.Iteratorモジュールに移動。ユーザーコードは変更の必要なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;name_generator&lt;/code&gt;をリファクタし、hash provider conceptによるハッシュアルゴリズムの設定変更をできるようにした。オプション機能としてRFC-4122のMD5ハッシュ実装を追加した。この変更によって、将来の標準ハッシュアルゴリズムがサポートしやすくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc4122#appendix-C&#34; target=&#34;_blank&#34;&gt;RFC 4122, Appendix C&lt;/a&gt;の名前空間として&lt;code&gt;boost::uuids::ns&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/8630&#34; target=&#34;_blank&#34;&gt;Trac #8630&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/11482&#34; target=&#34;_blank&#34;&gt;Trac #11482&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12253&#34; target=&#34;_blank&#34;&gt;Trac #12253&lt;/a&gt; &lt;code&gt;string_generator&lt;/code&gt;が不正なuuidを受け付けてしまっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10665&#34; target=&#34;_blank&#34;&gt;Trac #10665&lt;/a&gt; &lt;code&gt;name_generator::operator()&lt;/code&gt;をドキュメントに合わせて&lt;code&gt;const&lt;/code&gt;メンバ関数にした&lt;/li&gt;
&lt;li&gt;実証詳細のヘッダファイルをdetailディレクトリに移動した。ユーザーコードの変更は必要ないが、移動前の古いファイルをインクルードしたときに警告は出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/6971&#34; target=&#34;_blank&#34;&gt;Trac #6971&lt;/a&gt; &lt;code&gt;apply_visitor()&lt;/code&gt;の&lt;code&gt;visitables&lt;/code&gt;パラメータ (&lt;code&gt;variant&lt;/code&gt;オブジェクト) を完全転送するよう修正。この機能を実装してくれたLevon Tarakchyan氏に多大なる感謝を&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>User Allocators -- Boost.Poolの翻訳ドキュメント修正</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html"/>
      <id>349477015b262f09f1367c6266f484ecce302a03:archive/boost_docs/libs/pool/interfaces/user_allocator.md</id>
      <updated>2017-12-03T17:58:43+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;User Allocators&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Pool オブジェクトはシステムにメモリーブロックを要求する必要があり、それを Pool はユーザーに割り当てるチャンクに分割する。
様々な Pool インターフェースに対し、テンプレートパラメータである &lt;code&gt;UserAllocator&lt;/code&gt; を指定することで、ユーザーはそれらのシステムメモリーブロックがどのように割り当てられるかを管理することができる。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーアロケーター型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;block&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char *&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::size_type&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Typedefs&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケートされる最大オブジェクトのサイズを表現しうる符号無し整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の2つのポインタの差を表現しうる符号付整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Allocation and Deallocation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;事前条件/注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::malloc(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムから &lt;code&gt;n&lt;/code&gt; バイトを割り当てようとする。メモリー枯渇時には0を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::free(block)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;block block&lt;/code&gt; は以前に &lt;code&gt;UserAllocator::malloc&lt;/code&gt; への呼び出しから返されたものでなくてはならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;提供されている実装&lt;/h2&gt;
&lt;p&gt;2つの &lt;code&gt;UserAllocator&lt;/code&gt; クラスが提供されている。
両者とも &lt;code&gt;pool.hpp&lt;/code&gt; の中にある(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;pool&lt;/a&gt; を参照)。
テンプレートパラメータ &lt;code&gt;UserAllocator&lt;/code&gt; のデフォルト値は常に &lt;code&gt;default_user_allocator_new_delete&lt;/code&gt; である。&lt;/p&gt;
&lt;h3&gt;梗概&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nothrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_malloc_free&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アラインメント保証 -- Boost.Pollの翻訳ドキュメント修正(close #16)</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/alignment.html"/>
      <id>cde48c15bc7ed0b530db938a9b3ab1b74ba29547:archive/boost_docs/libs/pool/implementation/alignment.md</id>
      <updated>2017-12-02T02:37:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;アラインメント保証&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;用語&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html&#34;&gt;concepts document&lt;/a&gt; についてまだ十分理解していないのなら、再読するのがよい。
復習すると、&lt;em&gt;ブロック&lt;/em&gt;は連続したメモリー塊のひとつであり、固定サイズの&lt;em&gt;チャンク&lt;/em&gt;に&lt;em&gt;仕切られ&lt;/em&gt;、あるいは&lt;em&gt;分離され&lt;/em&gt;ている。
ユーザーが確保、解放するのは、これらの&lt;em&gt;チャンク&lt;/em&gt;である。&lt;/p&gt;
&lt;h2&gt;大要&lt;/h2&gt;
&lt;p&gt;個々の &lt;code&gt;Pool&lt;/code&gt; は、複数のメモリーブロックにまで広がるフリーリストをひとつ持っている。
さらに、&lt;code&gt;Pool&lt;/code&gt; は確保したメモリーブロックのリンクリストも持っている。
個々のメモリーブロックは、特に指定しなければ、&lt;code&gt;new[]&lt;/code&gt; を使って確保され、破棄時に解放される。
アラインメントを保証してくれる &lt;code&gt;new[]&lt;/code&gt; の、まさに使いどころである。&lt;/p&gt;
&lt;h2&gt;概要の証明: アラインメント保証&lt;/h2&gt;
&lt;p&gt;個々のメモリーブロックは &lt;code&gt;operator new[]&lt;/code&gt; 経由で POD な型として(はっきり言えば、characterの配列である)確保される。
&lt;em&gt;POD_size&lt;/em&gt; を確保した character の数としよう。&lt;/p&gt;
&lt;h3&gt;述語1:配列はパディングを持ってはならない&lt;/h3&gt;
&lt;p&gt;これは以下の引用から言える。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;5.3.3/2&lt;/em&gt; (Expressions::Unary expressions::Sizeof)
&#34;... 配列に適用すると、結果は、配列の全バイト数になる。
これは &lt;em&gt;n&lt;/em&gt; 個の要素からなる配列のサイズは、要素のサイズの &lt;em&gt;n&lt;/em&gt; 倍であることを意味する。&#34;&lt;/p&gt;
&lt;p&gt;従って、配列内の要素がパディングを含むことはあっても、配列がパディングを含むことはない。&lt;/p&gt;
&lt;h3&gt;述語 2: 任意の &lt;code&gt;operator new[]&lt;/code&gt; によって character の配列として確保されたメモリーブロック(以後、&lt;em&gt;the block&lt;/em&gt; と呼ぶ)は、任意の同じか小さいサイズのオブジェクトと適切に境界調整されている。&lt;/h3&gt;
&lt;p&gt;これは以下による。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;3.7.3.1/2&lt;/em&gt; (Basic concepts::Storage duration::Dynamic storage duration::Allocation functions)
    &#34;... 返されたポインタは、どのような完全オブジェクト型へのポインタにでも変換して、割り当てられた記憶域内のオブジェクトまたは配列にアクセスするために使用できるよう、適切に境界に整列させられている...&#34;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;5.3.4/10&lt;/em&gt; (Expressions::Unary expressions::New)
    &#34;&lt;code&gt;char&lt;/code&gt; と &lt;code&gt;unsigned char&lt;/code&gt; の配列に関して、&lt;em&gt;new 式(new-expression)&lt;/em&gt; の結果と割り当て関数によって返されたアドレスの差は、生成されようとしている配列のサイズを超えない任意のオブジェクトの最も厳しいアラインメント(3.9)要求の整数倍である。
    &lt;em&gt;Note:&lt;/em&gt; 割り当て関数は、任意の型のオブジェクトに対して適切に境界に整列しているポインタを返すものされているため、この配列割り当てに関するオーバーヘッドの強制は、文字型の配列を確保しておき、別の型のオブジェクトを後からそこに配置するという、よく知られた慣用を許容する。&#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;考察: サイズがある実際のオブジェクトの整数倍であるような想像上のオブジェクト型&lt;em&gt;Element&lt;/em&gt; (ただし、 &lt;code&gt;sizeof(Element) &amp;gt; POD_size&lt;/code&gt; とする)&lt;/h3&gt;
&lt;p&gt;そのようなオブジェクトは存在することが&lt;em&gt;できる&lt;/em&gt;。
そのサイズのひとつのオブジェクトは、&#34;実際の&#34;オブジェクトの配列である。&lt;/p&gt;
&lt;p&gt;ブロックは Element に適切に整列している。
これは述語2から直接導かれる。&lt;/p&gt;
&lt;h3&gt;系1:ブロックは要素の配列に適切に整列している&lt;/h3&gt;
&lt;p&gt;これは述語1、2 および以下の引用から導かれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;3.9/9&lt;/em&gt; (Basic concepts::Types)
    &#34; &lt;em&gt;object type&lt;/em&gt; は(cv-修飾であってもよい)は関数型、参照型、&lt;code&gt;void&lt;/code&gt; 型ではない型である。(仕様上、配列型はobject type である) &#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;系2:ポインタ &lt;code&gt;p&lt;/code&gt; と整数 &lt;code&gt;i&lt;/code&gt; がある。&lt;code&gt;p&lt;/code&gt; が、それが指す型に適切に整列しているならば、&lt;code&gt;p + i&lt;/code&gt; (well-definedのとき)は、その型に適切に整列している。 言い換えると、配列が適切に整列しているならば、その要素も適切に整列している。&lt;/h3&gt;
&lt;p&gt;この主張を直接支持する標準からの引用はない。
しかしそれは&#34;アラインメント&#34;の意味の共通概念に合致する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p + i&lt;/code&gt; が well-defined である条件は &lt;em&gt;5.7/5&lt;/em&gt; で概略が示されている。
ここで引用はせず、&lt;code&gt;p&lt;/code&gt; と &lt;code&gt;p + i&lt;/code&gt; の両者が同じ配列の中を指している、または同じ配列の末尾をひとつ過ぎたところであるとき well-defined であることを記述するに留める。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sizeof(Element)&lt;/code&gt; をいくつかの実際のオブジェクト &lt;code&gt;(T1, T2, T3, ...)&lt;/code&gt; のサイズの最小公倍数であると置く&lt;/h3&gt;
&lt;h3&gt;&lt;em&gt;block&lt;/em&gt; をメモリーブロックへのポインタとする。&lt;code&gt;pe&lt;/code&gt; は &lt;code&gt;(Element *)block&lt;/code&gt;、 &lt;code&gt;*pn*&lt;/code&gt; は &lt;code&gt;(Tn *)block&lt;/code&gt; であるとする&lt;/h3&gt;
&lt;h3&gt;系3: &lt;code&gt;pe + i&lt;/code&gt; が well-defined であるようなすべての整数 &lt;code&gt;i&lt;/code&gt; について、すべての &lt;code&gt;n&lt;/code&gt; に対して、&lt;code&gt;pn + jn&lt;/code&gt; が well-defined であり、 &lt;code&gt;pe + i&lt;/code&gt; と同じメモリーアドレスを参照するような整数 &lt;code&gt;jn&lt;/code&gt; が存在する。 メモリーブロックは Element の配列であり、すべての &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;sizeof(Element) % sizeof(Tn) == 0&lt;/code&gt; であるので、Elementsの配列内の個々の要素の境界は &lt;code&gt;Tn&lt;/code&gt; の配列の個々の要素の境界でもあることが自然に導かれる。 定理: &lt;code&gt;pe + i&lt;/code&gt; が well-defined であるような、すべての整数 &lt;code&gt;i&lt;/code&gt; について、アドレス &lt;code&gt;(pe + i)&lt;/code&gt; はすべての型 &lt;code&gt;Tn&lt;/code&gt; に適切に整列している&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pe + i&lt;/code&gt; は well-defined であるので、系3より、&lt;code&gt;pn + jn&lt;/code&gt; は well-defined である。
述語2および系1,2より、それは適切に整列している。&lt;/p&gt;
&lt;h2&gt;定理の使用&lt;/h2&gt;
&lt;p&gt;上記の証明はブロックからチャンクを切り出すさいのアラインメントに関する要求について当てはまる。
実装では下記の実際のオブジェクトのサイズを使用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求されたオブジェクトのサイズ(&lt;code&gt;requested_size&lt;/code&gt;)。これはユーザーが要求したチャンクのサイズである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void *&lt;/code&gt; (void へのポインタ)。これはチャンク群のを通してフリーリストをインターリーブしているがゆえに。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;。個々のメモリーブロックの中に次のブロックのサイズを格納しているがゆえに。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれのブロックは次のブロックへのポインタも含んでいる。
しかしこれは、上記の3つの型へのアラインメント要求を単純にするため、
&lt;code&gt;void&lt;/code&gt; へのポインタとして保存され必要に応じてキャストされる。&lt;/p&gt;
&lt;p&gt;従って、&lt;code&gt;alloc_size&lt;/code&gt; は上記の3つの型のサイズの最小公倍数として定義される。&lt;/p&gt;
&lt;h2&gt;メモリーブロックの概覧&lt;/h2&gt;
&lt;p&gt;それぞれのメモリーブロックは3つの主要セクションからなる。
最初のセクションは、そこからチャンクが切り出される場所であり、インターリーブされたフリーリストを含んでいる。
第二のセクションは、次のブロックへのポインタであり、第三のセクションは次のブロックのサイズである。&lt;/p&gt;
&lt;p&gt;これらのセクションは次のセクションのアラインメントを保証するのに必要なパディングを含むことがある。
最初のセクションのサイズは、&lt;code&gt;number_of_chunks * lcm(requested_size, sizeof(void *), sizeof(size_type))&lt;/code&gt; である。
第二のセクションのサイズは &lt;code&gt;lcm(sizeof(void *), sizeof(size_type)&lt;/code&gt; である。
第三のセクションのサイズは &lt;code&gt;sizeof(size_type)&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;メモリーブロックの一例を示す。
ここでは &lt;code&gt;requested_size == sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは4個のチャンクを含む。配列構造を重ねて表示する。FLP=フリーリストのインターリーブされたポインタ&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;セクション&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; 境界&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; 境界&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; 境界&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 1 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;パディングがある例を図示する。
この例では &lt;code&gt;requested_size == 8&lt;/code&gt; and &lt;code&gt;sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは4個のチャンクを含む。配列構造を重ねて示す。FLP=フリーリストのインターリーブされたポインタ&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 1 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最後に、&lt;code&gt;requested_size&lt;/code&gt; は 7, &lt;code&gt;sizeof(void *)&lt;/code&gt; は 3, and &lt;code&gt;sizeof(size_type)&lt;/code&gt; は 5という入り組んだ例をあげ、奇数ばかりの環境であっても最小公倍数がアラインメントを保証するようすを示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:Memory block containing 2 chunks, showing overlying array structures&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックのサイズ (5 bytes; 5 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックのサイズ (5 bytes; 5 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;どのように連続したチャンクを扱うか&lt;/h2&gt;
&lt;p&gt;上記の定理は、チャンクの割り当てにも、インターリーブされているフリーリストのような実装の詳細にも、すべてのアラインメント要求を保証している。
しかしながら、それは必要に応じてパディングを追加しているので、連続したチャンクの割り当ては別の方法で扱わなくてはならない。&lt;/p&gt;
&lt;p&gt;上記に似ている配列引数を使用することで、連続した &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;requested_size&lt;/code&gt; のオブジェクトへの要求を、&lt;code&gt;m&lt;/code&gt; 個の連続したチャンクへの要求に翻訳できる。
&lt;code&gt;m&lt;/code&gt; は単純に &lt;code&gt;ceil(n * requested_size / alloc_size)&lt;/code&gt; であり、&lt;code&gt;alloc_size&lt;/code&gt; はチャンクの実際のサイズである。
図示する。&lt;/p&gt;
&lt;p&gt;これは &lt;code&gt;requested_size == 1&lt;/code&gt; で &lt;code&gt;sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt; の場合のメモリーブロックの例である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは 4個のチャンクを含んでいる。&lt;code&gt;requested_size&lt;/code&gt; は 1&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ptr to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:ユーザーが 7個の連続した requested_size の要素を要求した後&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4 bytes in use by program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 bytes in use by program (1 byte unused)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ptr to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ユーザーが連続したメモリーを解放したときは、再びチャンクに分けることができる。&lt;/p&gt;
&lt;p&gt;連続したチャンクを割り当てるための実装は、二次ではなく線形のアルゴリズムを使っている。
これはフリーリストが順序付けされていなければ連続したチャンクを&lt;strong&gt;発見できないことがある&lt;/strong&gt;ことを意味している。
従って連続したチャンクを割り当てることがあるときは、いつも順序付けられたフリーリストを使うことを勧める。
(上記の例でなら、チャンクが順序付けされておらず、チャンク1 がチャンク3 を指し、チャンク3 はチャンク2 を、チャンク2 は、チャンク4 を指しているならば、連続領域割り当てアルゴリズムは、いずれの連続したチャンクをも発見できない)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ct_gcd_lcm - コンパイル時 GCD および LCM -- Boost.Pollの翻訳ドキュメント修正(close #16)</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.html"/>
      <id>cde48c15bc7ed0b530db938a9b3ab1b74ba29547:archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.md</id>
      <updated>2017-12-02T02:37:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ct_gcd_lcm - コンパイル時 GCD および LCM&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/ct_gcd_lcm.hpp&lt;/code&gt; は2つのコンパイル時アルゴリズムを提供する。
最大公約数と最小公倍数である。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_gcd&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_lcm&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A, B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数 [5.19/1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Result Type&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Precondition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ct_gcd&amp;lt;A, B&amp;gt;::value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最大公約数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A != 0 &amp;amp;&amp;amp; B != 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ct_lcm&amp;lt;A, B&amp;gt;::value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最小公倍数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A != 0 &amp;amp;&amp;amp; B != 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;コンパイル時アルゴリズムであるため、事前条件の違反はコンパイル時エラーを招く。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/static_assert.hpp&amp;gt;&lt;/code&gt; (see &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.md]&#34;&gt;Boost.Static_Assert&lt;/a&gt;, 事前条件が満たされていることを確認する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/ice.hpp&amp;gt;&lt;/code&gt; (see Coding Guidelines for Integral Constant Expressions), 移植性の一助&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;標準文書からの抜粋&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.19/1: Expressions: Constant Expressions:&lt;/strong&gt; &#34;. . . &lt;em&gt;整定数式&lt;/em&gt; は、リテラル(2.13)、列挙子、&lt;code&gt;const&lt;/code&gt; 変数または定数式(8.5)で初期化された整数ないし列挙型の静的データメンバー、整数ないし列挙型の非型テンプレートパラメータ、&lt;code&gt;sizeof&lt;/code&gt; 式のみを含むことができる。
浮動小数リテラル(2.13.3)は整数ないし列挙型にキャストされる場合のみ現れることができる。
整数ないし列挙型への型変換のみが使用できる。
特に、&lt;code&gt;sizeof&lt;/code&gt; 式を除いて、関数、クラスオブジェクト、ポインタ、参照は使用できず、代入、増分、減分、関数呼び出し、カンマ演算子は使用できない。&#34;&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このヘッダーは Boost compile-time algorithms ライブラリに置き換えられるかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>各ライブラリの翻訳ドキュメント -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;各ライブラリの翻訳ドキュメント&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、Boost 1.31.0時点での各ライブラリの翻訳ドキュメントを掲載する。&lt;/p&gt;
&lt;p&gt;最新バージョンへの追従は行っていないことに注意されたし。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ライブラリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/array.html&#34;&gt;array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL に準拠した定数サイズの配列のラッパコンテナ。Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;bind&lt;/a&gt; and &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数、オブジェクト、ポインタ、メンバ関数のための汎用的なバインダ。 Peter Dimov 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/compatibility.html&#34;&gt;compatibility&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準に準拠しないプラットフォームでのライブラリの利用に役立つ。Ralf Grosse-Kunstleve and Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/compose.html&#34;&gt;compose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL の為の関数合成アダプタ Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/concept_check.html&#34;&gt;concept_check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックプログラミングのためのツール群。 Jeremy Siek 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/conversion.html&#34;&gt;conversion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数学的、多相的、辞書的キャスト Dave Abrahams and Kevlin Henney 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;date_time&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付/時間ライブラリ Jeff Garland 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html&#34;&gt;disjoint_sets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;互いに素な集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/format.html&#34;&gt;format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型安全な printf 風の書式化操作。Samuel Krempp 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;遅延呼び出し及びコールバックのための関数オブジェクトラッパ。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/functional.html&#34;&gt;functional&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機能強化された関数オブジェクトアダプタ。 Mark Rodgers 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph.html&#34;&gt;graph&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;汎用グラフコンポーネント及びアルゴリズム。 Jeremy Siek and a University of Notre Dame team 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html&#34;&gt;io state savers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入出力の状態を保存して、データが化けるのを防ぐ。 Daryle Walker 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/multi_array.html&#34;&gt;muti_array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリ上で連続したデータの配列のための多次元コンテナとアダプタ。 Ron Garcia 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html&#34;&gt;preprocessor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;繰り返しと再帰を含むプリプロセッサメタプログラミングツール群。 Vesa Karvonen 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool.html&#34;&gt;pool&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリプールの管理。Steve Cleary 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/random.html&#34;&gt;random&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成のためのシステム一式。 Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/signals.html&#34;&gt;signals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理されたシグナルとスロットのコールバックでの実装。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.html&#34;&gt;static_assert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;静的アサート(コンパイル時アサート)。 John Maddock 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/smart_ptr.html&#34;&gt;smart_ptr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5つのスマートポインタクラステンプレート Greg Colvin, Beman Dawes, Peter Dimov, and Darin Adler 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/type_traits.html&#34;&gt;type_traits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の基本的な特徴のためのテンプレート。 John Maddock, Steve Cleary, et al 作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Pool Library -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost Pool Library&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;h3&gt;Poolとは何か?&lt;/h3&gt;
&lt;p&gt;Poolアロケーションは使い方の制限があるものの非常に高速なメモリー割り当て方法である。
Poolアロケーション(「単純分割記憶域(simple segregated storage)」とも言う)のより詳細な情報は&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html&#34;&gt;概念資料&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h3&gt;なぜPoolを使うのか?&lt;/h3&gt;
&lt;p&gt;Poolsを使用すると、プログラム中でどのようにメモリーが使用されるかを、よりうまく管理することができる。
例えば、一度に小さなオブジェクトを大量に割り当てたいときがあり、そしてそれらの一切が要らなくなるというときがやってくる、という状況になり得るだろう。
プールインターフェイス使えば、それらのデストラクターを実行するか、忘却の彼方へ送り去るかを選ぶことができる。
プールインタフェースはメモリーリークが起きないことを保証してくれる。&lt;/p&gt;
&lt;h3&gt;いつPoolを使うべきか?&lt;/h3&gt;
&lt;p&gt;通常、プールは小さいオブジェクトを大量に割り当て、解放するときに使用される。
もう一つのよくある使い方が、上記の状況である。
すなわち沢山のオブジェクトがメモリーから消えるときである。&lt;/p&gt;
&lt;p&gt;一般に、Poolは普段はやらないような効率的なメモリー管理が必要なときに使うべきだ。&lt;/p&gt;
&lt;h3&gt;Poolの使い方は?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;pool interfaces document&lt;/a&gt;を見なさい。
そこには、このライブラリーで提供される様々なインターフェイスについて記述がある。&lt;/p&gt;
&lt;h2&gt;ライブラリの構造と依存性&lt;/h2&gt;
&lt;p&gt;このライブラリーの開示されたシンボルの前方宣言は、ヘッダーファイル &lt;code&gt;&amp;lt;boost/pool/poolfwd.hpp&amp;gt;&lt;/code&gt; に含まれている。&lt;/p&gt;
&lt;p&gt;ライブラリーは &lt;code&gt;BOOST_POOL_&lt;/code&gt; で始まるマクロを使っている。
例外はインクルードファイルガード、(&lt;code&gt;xxx.hpp&lt;/code&gt; については)&lt;code&gt;BOOST_xxx_HPP&lt;/code&gt;である。&lt;/p&gt;
&lt;p&gt;ライブラリーで定義されているすべての開示されたシンボルは名前空間&lt;code&gt;boost&lt;/code&gt;内にある。
ライブラリーの実装だけが使用するシンボルは名前空間&lt;code&gt;boost::details::pool&lt;/code&gt;内にある。&lt;/p&gt;
&lt;p&gt;ライブラリーの実装だけが使用するヘッダーはサブディレクトリー&lt;code&gt;detail/&lt;/code&gt;にある。&lt;/p&gt;
&lt;p&gt;ライブラリーに含まれるヘッダーは、ライブラリーのヘッダーやシステムが提供するヘッダーをそれぞれの裁量で使っていることがある。&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;The Boost Pool ライブラリーはヘッダファイルによるライブラリーである。
なので .lib も .dll も .so も作る必要はなく、コンパイラーのインクルードファイルパスに Boost ディレクトリを追加するだけで使える。&lt;/p&gt;
&lt;h2&gt;Building the Test Programs&lt;/h2&gt;
&lt;p&gt;&#34;build&#34; サブディレクトリにいくつかのプラットフォーム用のサブディレクトリがある。
これらのサブディレクトリには、それぞれのプラットフォームに合わせた回避手段コードに加えてメイクファイルまたは IDE プロジェクトファイルがある。&lt;/p&gt;
&lt;p&gt;適切なサブディレクトリの &#34;readme.txt&#34; を読みなさい。もしあれば。&lt;/p&gt;
&lt;p&gt;標準的なメイクファイルのターゲットは &#34;all&#34;、&#34;clean&#34; (全ての中間ファイルを削除)、&#34;veryclean&#34; (全ての中間ファイルと実行ファイルを削除)、である。
すべての中間ファイルと実行ファイルはメイクファイル/プロジェクトファイルと同じディレクトリに作られる。
メイクファイルではなくプロジェクトファイルが提供されている場合、&#34;clean&#34; and &#34;veryclean&#34; シェルスクリプト/バッチファイルが用意されている。&lt;/p&gt;
&lt;p&gt;ここにないプラットフォーム用のプロジェクトファイルやメイクファイルを作ったら &lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt; へ送ってくれて構わない。&lt;/p&gt;
&lt;h2&gt;文書マップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Poolingの概観&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html&#34;&gt;Poolの概念&lt;/a&gt; - プール(pooling)の基本的考え方&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/alignment.html&#34;&gt;implementation/alignment&lt;/a&gt; - 如何にアラインメントの移植性を保証するか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;interfaces&lt;/a&gt; - 提供されるインターフェースと、いつどれを使うか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poolの外部インターフェース&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/simple_segregated_storage.html&#34;&gt;interfaces/simple_segregated_storage&lt;/a&gt; - Not for the faint of heart; embedded programmers only.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;interfaces/pool&lt;/a&gt; - 基本的プールインターフェース&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/singleton_pool.html&#34;&gt;interfaces/singleton_pool&lt;/a&gt; - スレッドセーフシングルトンとしての基本的プールインターフェース&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/object_pool.html&#34;&gt;interfaces/object_pool&lt;/a&gt; - (サイズ指向でなく)型指向のプールインターフェース&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool_alloc.html&#34;&gt;interfaces/pool_alloc&lt;/a&gt; - singleton_poolに基づく標準アロケータプールインターフェース&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;interfaces/user_allocator&lt;/a&gt; - プールインターフェースではないと言うのは、ごもっとも。だがプールがシステムメモリーをどのように管理するかをユーザーがどうのように管理するかを記述してある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pool実装の詳細と拡張&lt;ul&gt;
&lt;li&gt;インターフェースの実装と拡張&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/simple_segregated_storage.html&#34;&gt;implementation/simple_segregated_storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;implementation/pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;implementation/singleton_pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/object_pool.html&#34;&gt;implementation/object_pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_alloc.html&#34;&gt;implementation/pool_alloc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;実装にのみ使用されるコンポーネント&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.html&#34;&gt;implementation/ct_gcd_lcm&lt;/a&gt; - コンパイル時GCDとLDM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/for.html&#34;&gt;implementation/for&lt;/a&gt; - コンポーネントの記述&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/gcd_lcm.html&#34;&gt;implementation/gcd_lcm&lt;/a&gt; - 実行時GCDとLCM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/guard.html&#34;&gt;implementation/guard&lt;/a&gt; - mutexの自動ロックとアンロック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/mutex.html&#34;&gt;implementation/mutex&lt;/a&gt; - プラットフォーム依存のmutex型&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_construct.html&#34;&gt;implementation/pool_construct&lt;/a&gt; - object_poolのコンストラクタの引数をより多くサポートするためのシステム&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton.html&#34;&gt;implementation/singleton&lt;/a&gt; - 静的初期化問題を回避するシングルトン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;別のプールインターフェースを作るつもり。クラス毎の割り当ての既定クラス&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Many, many thanks to the Boost peers, notably Jeff Garland, Beman Dawes, Ed Brey, Gary Powell, Peter Dimov, and Jens Maurer for providing helpful suggestions!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Poolの概念 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/concepts.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Poolの概念&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&#34;動的メモリー割り当ては、概ね1960年以来、ほとんどのコンピューターシステムにとって基礎部分でありつづけた&#34; [^1]&lt;/p&gt;
&lt;p&gt;誰しも動的メモリー割り当てを使用する。
&lt;code&gt;malloc&lt;/code&gt; や &lt;code&gt;new&lt;/code&gt;を呼び出したことがあるなら、動的メモリー割り当てを使用したことがあるということだ。
ほとんどのプログラマはヒープを&#34;magic bag&#34;として扱う傾向がある。
我らは請い、魔術によって生み出され給うと。
だが、ヒープは魔術&lt;em&gt;ではない&lt;/em&gt;ため、時に問題が起きるのだ。&lt;/p&gt;
&lt;p&gt;ヒープには限界がある。
膨大な量の仮想記憶を持つ、(組み込みシステムではない)巨大システムであっても限界はある。
誰しも物理的限界には思いを馳せるが、より気付きにくい&#34;仮想&#34;システム上の限界がある。
その限界では仮想記憶の使用によってあなたのプログラム(もしくはシステム全体)がスローダウンする。
この仮想システムの限界は、物理的限界に比べ遥かにあなたのプログラムに密接である。
マルチタスクシステム上では、格別である。
従って、大きなシステムで実行されるプログラムの場合は、必要とする最小リソースだけを使い出来る限り速やかにそれを解放するよう、&#34;細心&#34;の注意を払わなくてはならない。
組み込みシステムの場合は、無駄にできるメモリーなどそもそもないのだ。&lt;/p&gt;
&lt;p&gt;ヒープは複雑に絡まっている。
どのような型のメモリー要求にも、どのようなサイズであっても、満足させなくてはならない上に、それを&lt;em&gt;高速に&lt;/em&gt;やってのけなくてはならない。
よくあるメモリー管理の方法は、メモリーを一区切りづつに分け、そのサイズ順に木やリストの類に保持するもののはずだ。
ここに局所性や予想生存期間といった他の要素を加えてやると、ヒープはすぐに複雑に絡まってしまう。
実際、複雑すぎて、動的メモリー割り当て方法の&#34;完璧な&#34;解は知られていない。
下によくあるメモリーマネージャーのほとんどがどのように働くかを図示する。
個々のメモリーチャンクは、内部の木やリストを維持するために、その一部を使用している。
メモリーチャンクがプログラムへ &lt;code&gt;malloc&lt;/code&gt; されるときに、メモリーマネージャーは、そこへある種の情報を&#34;保存&#34;しているに違いない。-- 普通はそのサイズだが。
そうすることでブロックが &lt;code&gt;free&lt;/code&gt; されるとき、メモリーマネージャーは容易にその大きさを知ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:未割り当てメモリーブロック&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;メモリー割り当てアルゴリズムが内部で使用しているメモリー&lt;br /&gt;(通常8ないし12バイト)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;br /&gt;未使用メモリー&lt;br /&gt;&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:割り当て済みメモリーブロック(プログラムで使用中)&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;メモリー割り当てアルゴリズムに内部で使用されているメモリー&lt;br /&gt;(通常4バイト)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;br /&gt;プログラムが使用可能なメモリー&lt;br /&gt;&lt;br /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;動的メモリー割り当ては複雑であるがゆえに、時間と空間の両方または一方の見地から効率が悪いということがよく起きる。
ほとんどのメモリー割り当てアルゴリズムは、個々のメモリーブロックに、ブロックのサイズ、もしくは木やリスト内での自身の位置のような、関連を示す情報を保存している。
このような&#34;ヘッダーフィールド&#34;では、プログラムで使用されようとするブロックに1マシンワードを入れるということが普通に行われている。
だが、これでは小さなオブジェクトが動的に割り当てられるときは、明らかに問題がある。
例えば、&lt;code&gt;int&lt;/code&gt; が動的に割り当てられるようなことがあれば、アルゴリズムは宜しく自動的にヘッダーフィールドを、御取り置きするため、メモリーの50%が無駄になる。
これは最悪のシナリオの話ではある。
しかしながら、モダンなプログラミングは小さなオブジェクトをヒープに作るようになり、この問題は益々顕著になってきている。
Wilson &lt;em&gt;et. al.&lt;/em&gt; は、平均的なケースでメモリーのオーバーヘッドは10から20パーセントであると述べている[^2]。
プログラムが使用するオブジェクトが小さくなるほど、このメモリーのオーバーヘッドは大きくなる。
プログラムを仮想システムの限界に近づけるのは、まさにこのメモリーオーバーヘッドである。&lt;/p&gt;
&lt;p&gt;より巨大システムでは(かかる実行時間に比べると)メモリーオーバーヘッドは重要ではなく無視されることが多い。
しかし、小さなオブジェクトの多数の割り当てと(and/or)解放が、タイムクリティカルなアルゴリズムでは、無視できなくなる状況がある。
このような状況では、システムが提供しているメモリー割り当て機構は遅すぎる場合が多いのだ。&lt;/p&gt;
&lt;p&gt;単純分離記憶域は、この両方の問題に取り組んでいる。
メモリーオーバーヘッドはほとんど無くなり、すべての割り当ては短い(償却)定数時間しかかからない。
しかしながら、汎用性は失われることになる。
単純分離記憶域は、単一サイズのチャンクしか割り当てられない。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;単純分離記憶域(Simple Segregated Storage)&lt;/h2&gt;
&lt;p&gt;単純分離記憶域は Boost Pool ライブラリの見えないところにある基礎的アイデアである。
単純分離記憶域は最も単純な、そしておそらく最速のメモリー割り当て・開放アルゴリズムである。
それは、メモリー&lt;em&gt;ブロック&lt;/em&gt;を、一定サイズの&lt;em&gt;チャンク&lt;/em&gt;に&lt;em&gt;仕切る&lt;/em&gt;ことから始まる。
ブロックがどこ由来のものであるかは、実装時までは重要ではない。
&lt;em&gt;Pool&lt;/em&gt; は、このようなやり方で単純分離記憶域を使用する、オブジェクトのひとつである。
図示する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:Memory block, split into chunks&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;どのブロックにおいても、それぞれのチャンクは&lt;strong&gt;常に&lt;/strong&gt;同一サイズである。
これは単純分離記憶域の、基礎からの制約事項である。
チャンクに異なるサイズであれ、と求めることはできない。
たとえば、integer 用の Pool に character が欲しいと求めても適わないし、character 用のプールに interger を求めることもできない(characterとintegerが異なるサイズであると仮定してのことだが)。&lt;/p&gt;
&lt;p&gt;単純分離記憶域は&lt;em&gt;フリーリスト&lt;/em&gt;を未使用チャンク群の中で纏り縫いにする(interleave)ことで動作する。
例えば、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:チャンクを割り当てていないメモリーブロック&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 0; チャンク 1 を指す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 1; チャンク 2 を指す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 2; チャンク 3 を指す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 3; リストの末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:2個のチャンクが割り当て中になっているメモリブロック&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 0; チャンク 2 を指す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 1 (プロセスが使用中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 2; リストの末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;チャンク 3 (プロセスが使用中)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チャンク群の中にフリーリストを纏り縫いするので、個々の単純分離記憶域のオーバーヘッドはポインタ一個(リストの中の最初の要素へのポインタ)分だけである。
プロセスで使用されているチャンクにはメモリーのオーバーヘッドは&lt;em&gt;存在しない&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;単純分離記憶域は、猛烈に速い。
最も単純なケースでは、メモリーの割り当ては自由リストから断片を取り除くだけの O(1) 操作にすぎない。
自由リストが空の場合、別のブロックを確保し仕切る必要がある、これには償却 O(1) 時間を要する。
メモリーの開放は、フリーリストの先頭に断片を追加するのと同等の単純さであり、O(1) 操作である。
しかしながら、単純分離記憶域のより複雑な使用方法は、フリーリストがソートされていなくてはならず、開放は O(N) 時間を要するようになる。&lt;/p&gt;
&lt;p&gt;単純分離記憶域は、システムが提供する割り当て機構よりも、高速に実行されメモリーオーバーヘッドも少ないが、割り当てサイズに汎用性がない。
多くの(不連続な)小さなオブジェクトをヒープ上に割り当てるような状況や、同じサイズのオブジェクトの割り当てと開放が繰り返し起きるような状況が Pool を使用するのに相応しい。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;[^1]:Doug Lea, &lt;em&gt;A Memory Allocator&lt;/em&gt;.  web 上では &lt;a href=&#34;http://gee.cs.oswego.edu/dl/html/malloc.html&#34; target=&#34;_blank&#34;&gt;http://gee.cs.oswego.edu/dl/html/malloc.html&lt;/a&gt; にある
[^2]:Paul R. Wilson, Mark S. Johnstone, Michael Neely, and David Boles, &#34;Dynamic Storage Allocation: A Survey and Critical Review&#34; in &lt;em&gt;International Workshop on Memory Management&lt;/em&gt;, September 1995, pg. 28, 36.  web 上では &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/ftp:/ftp.cs.utexas.edu/pub/garbage/allocsrv.ps&#34;&gt;ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps&lt;/a&gt; にある&lt;/p&gt;
&lt;h2&gt;他の実装&lt;/h2&gt;
&lt;p&gt;Pool 割り当て機構は多くのプログラミング言語に見ることができ、多くのバリエーションが存在する。
多くの実装の端緒は、ごく普通のプログラミングに関する文献に求めることができる。
いくつかを以下に示す。これらの何れも完全な実装ではない。
多くは実装のある局面を読者への練習問題としている。
しかしながら、これらの例はどれも、ある局面が欠落しているとはいえ、このドキュメントで述べている単純分離記憶域と同じ基底概念を使用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&#34;The C++ Programming Language&#34;, 3rd ed., by Bjarne Stroustrup, Section 19.4.2. 
    欠落局面:&lt;ul&gt;
&lt;li&gt;ポータブルでない&lt;/li&gt;
&lt;li&gt;任意数のオブジェクトを扱うことができない(練習問題として残されている)&lt;/li&gt;
&lt;li&gt;スレッドセーフではない&lt;/li&gt;
&lt;li&gt;静的初期化問題による不都合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&#34;MicroC/OS-II: The Real-Time Kernel&#34;, by Jean J. Labrosse, Chapter 7 and Appendix B.04. 実際のOSの内部で機能している単純分離記憶域手法の例である。
    欠落局面:&lt;ul&gt;
&lt;li&gt;ポータブルではない(これは OK である。自分自身が OS の一部である。)&lt;/li&gt;
&lt;li&gt;任意数のオブジェクトを扱うことができない(これも OK である。この特徴は必要ではない。)&lt;/li&gt;
&lt;li&gt;プールを生成また破棄するために非直感的なコードを書く必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&#34;Efficient C++: Performance Programming Techniques&#34;, by Dov Bulka and David Mayhew, Chapters 6 and 7.
    プール解の反復開発の良い例である。
    しかしながら、(システムが提供する割り当てメカニズムが絶望的に非効率的であるという)前提は、私がテストしたすべてのシステムで不備があった。
    彼らの結論を受け入れる前に、あなたのシステムで時間を測定してみよ。
    欠落局面:&lt;ul&gt;
&lt;li&gt;プールを生成また破棄するために非直感的なコードを書く必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&#34;Advanced C++: Programming Styles and Idioms&#34;, by James O. Coplien, Section 3.6. 
    これは静的と動的、両方の pooling の例である。
    欠落局面:&lt;ul&gt;
&lt;li&gt;スレッドセーフではない&lt;/li&gt;
&lt;li&gt;静的 pooling の例がポータブルではない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pool Copyright -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/copyright.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Pool Copyright&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;Copyright (c) 2000 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Permission to copy, use, and distribute this software and its documentation is granted, provided that the above copyright notice appears in all copies and that that copyright notice appear in supporting documentation.&lt;/p&gt;
&lt;p&gt;Permission to modify the software and its documentation, and to distribute modified software and documentation is granted, provided that: the above copyright notice appears in all copies &lt;strong&gt;AND&lt;/strong&gt; that copyright notice appears in supporting documentation, &lt;strong&gt;AND&lt;/strong&gt; a notice that the software was modified appears with the copyright notice.&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>アラインメント保証 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/alignment.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/alignment.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;アラインメント保証&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;用語&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html&#34;&gt;concepts document&lt;/a&gt; についてまだ十分理解していないのなら、再読するのがよい。
復習すると、&lt;em&gt;ブロック&lt;/em&gt;は連続したメモリー塊のひとつであり、固定サイズの&lt;em&gt;チャンク&lt;/em&gt;に&lt;em&gt;仕切られ&lt;/em&gt;、あるいは&lt;em&gt;分離され&lt;/em&gt;ている。
ユーザーが確保、解放するのは、これらの&lt;em&gt;チャンク&lt;/em&gt;である。&lt;/p&gt;
&lt;h2&gt;大要&lt;/h2&gt;
&lt;p&gt;個々の &lt;code&gt;Pool&lt;/code&gt; は、複数のメモリーブロックにまで広がるフリーリストをひとつ持っている。
さらに、&lt;code&gt;Pool&lt;/code&gt; は確保したメモリーブロックのリンクリストも持っている。
個々のメモリーブロックは、特に指定しなければ、&lt;code&gt;new[]&lt;/code&gt; を使って確保され、破棄時に解放される。
アラインメントを保証してくれる &lt;code&gt;new[]&lt;/code&gt; の、まさに使いどころである。&lt;/p&gt;
&lt;h2&gt;概要の証明: アラインメント保証&lt;/h2&gt;
&lt;p&gt;個々のメモリーブロックは &lt;code&gt;operator new[]&lt;/code&gt; 経由で POD な型として(はっきり言えば、characterの配列である)確保される。
&lt;em&gt;POD_size&lt;/em&gt; を確保した character の数としよう。&lt;/p&gt;
&lt;h3&gt;述語1:配列はパディングを持ってはならない&lt;/h3&gt;
&lt;p&gt;これは以下の引用から言える。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;5.3.3/2&lt;/em&gt; (Expressions::Unary expressions::Sizeof)
&#34;... 配列に適用すると、結果は、配列の全バイト数になる。
これは &lt;em&gt;n&lt;/em&gt; 個の要素からなる配列のサイズは、要素のサイズの &lt;em&gt;n&lt;/em&gt; 倍であることを意味する。&#34;&lt;/p&gt;
&lt;p&gt;従って、配列内の要素がパディングを含むことはあっても、配列がパディングを含むことはない。&lt;/p&gt;
&lt;h3&gt;述語 2: 任意の &lt;code&gt;operator new[]&lt;/code&gt; によって character の配列として確保されたメモリーブロック(以後、&lt;em&gt;the block&lt;/em&gt; と呼ぶ)は、任意の同じか小さいサイズのオブジェクトと適切に境界調整されている。&lt;/h3&gt;
&lt;p&gt;これは以下による。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;3.7.3.1/2&lt;/em&gt; (Basic concepts::Storage duration::Dynamic storage duration::Allocation functions)
    &#34;... 返されたポインタは、どのような完全オブジェクト型へのポインタにでも変換して、割り当てられた記憶域内のオブジェクトまたは配列にアクセスするために使用できるよう、適切に境界に整列させられている...&#34;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;5.3.4/10&lt;/em&gt; (Expressions::Unary expressions::New)
    &#34;&lt;code&gt;char&lt;/code&gt; と &lt;code&gt;unsigned char&lt;/code&gt; の配列に関して、&lt;em&gt;new 式(new-expression)&lt;/em&gt; の結果と割り当て関数によって返されたアドレスの差は、生成されようとしている配列のサイズを超えない任意のオブジェクトの最も厳しいアラインメント(3.9)要求の整数倍である。
    &lt;em&gt;Note:&lt;/em&gt; 割り当て関数は、任意の型のオブジェクトに対して適切に境界に整列しているポインタを返すものされているため、この配列割り当てに関するオーバーヘッドの強制は、文字型の配列を確保しておき、別の型のオブジェクトを後からそこに配置するという、よく知られた慣用を許容する。&#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;考察: サイズがある実際のオブジェクトの整数倍であるような想像上のオブジェクト型&lt;em&gt;Element&lt;/em&gt; (ただし、 &lt;code&gt;sizeof(Element) &amp;gt; POD_size&lt;/code&gt; とする)&lt;/h3&gt;
&lt;p&gt;そのようなオブジェクトは存在することが&lt;em&gt;できる&lt;/em&gt;。
そのサイズのひとつのオブジェクトは、&#34;実際の&#34;オブジェクトの配列である。&lt;/p&gt;
&lt;p&gt;ブロックは Element に適切に整列している。
これは述語2から直接導かれる。&lt;/p&gt;
&lt;h3&gt;系1:ブロックは要素の配列に適切に整列している&lt;/h3&gt;
&lt;p&gt;これは述語1、2 および以下の引用から導かれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;3.9/9&lt;/em&gt; (Basic concepts::Types)
    &#34; &lt;em&gt;object type&lt;/em&gt; は(cv-修飾であってもよい)は関数型、参照型、&lt;code&gt;void&lt;/code&gt; 型ではない型である。(仕様上、配列型はobject type である) &#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;系2:ポインタ &lt;code&gt;p&lt;/code&gt; と整数 &lt;code&gt;i&lt;/code&gt; がある。&lt;code&gt;p&lt;/code&gt; が、それが指す型に適切に整列しているならば、&lt;code&gt;p + i&lt;/code&gt; (well-definedのとき)は、その型に適切に整列している。 言い換えると、配列が適切に整列しているならば、その要素も適切に整列している。&lt;/h3&gt;
&lt;p&gt;この主張を直接支持する標準からの引用はない。
しかしそれは&#34;アラインメント&#34;の意味の共通概念に合致する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p + i&lt;/code&gt; が well-defined である条件は &lt;em&gt;5.7/5&lt;/em&gt; で概略が示されている。
ここで引用はせず、&lt;code&gt;p&lt;/code&gt; と &lt;code&gt;p + i&lt;/code&gt; の両者が同じ配列の中を指している、または同じ配列の末尾をひとつ過ぎたところであるとき well-defined であることを記述するに留める。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sizeof(Element)&lt;/code&gt; をいくつかの実際のオブジェクト &lt;code&gt;(T1, T2, T3, ...)&lt;/code&gt; のサイズの最小公倍数であると置く&lt;/h3&gt;
&lt;h3&gt;&lt;em&gt;block&lt;/em&gt; をメモリーブロックへのポインタとする。&lt;code&gt;pe&lt;/code&gt; は &lt;code&gt;(Element *)block&lt;/code&gt;、 &lt;code&gt;*pn*&lt;/code&gt; は &lt;code&gt;(Tn *)block&lt;/code&gt; であるとする&lt;/h3&gt;
&lt;h3&gt;系3: &lt;code&gt;pe + i&lt;/code&gt; が well-defined であるようなすべての整数 &lt;code&gt;i&lt;/code&gt; について、すべての &lt;code&gt;n&lt;/code&gt; に対して、&lt;code&gt;pn + jn&lt;/code&gt; が well-defined であり、 &lt;code&gt;pe + i&lt;/code&gt; と同じメモリーアドレスを参照するような整数 &lt;code&gt;jn&lt;/code&gt; が存在する。 メモリーブロックは Element の配列であり、すべての &lt;code&gt;n&lt;/code&gt; について、&lt;code&gt;sizeof(Element) % sizeof(Tn) == 0&lt;/code&gt; であるので、Elementsの配列内の個々の要素の境界は &lt;code&gt;Tn&lt;/code&gt; の配列の個々の要素の境界でもあることが自然に導かれる。 定理: &lt;code&gt;pe + i&lt;/code&gt; が well-defined であるような、すべての整数 &lt;code&gt;i&lt;/code&gt; について、アドレス &lt;code&gt;(pe + i)&lt;/code&gt; はすべての型 &lt;code&gt;Tn&lt;/code&gt; に適切に整列している&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pe + i&lt;/code&gt; は well-defined であるので、系3より、&lt;code&gt;pn + jn&lt;/code&gt; は well-defined である。
述語2および系1,2より、それは適切に整列している。&lt;/p&gt;
&lt;h2&gt;定理の使用&lt;/h2&gt;
&lt;p&gt;上記の証明はブロックからチャンクを切り出すさいのアラインメントに関する要求について当てはまる。
実装では下記の実際のオブジェクトのサイズを使用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求されたオブジェクトのサイズ(&lt;code&gt;requested_size&lt;/code&gt;)。これはユーザーが要求したチャンクのサイズである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void *&lt;/code&gt; (void へのポインタ)。これはチャンク群のを通してフリーリストをインターリーブしているがゆえに。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;。個々のメモリーブロックの中に次のブロックのサイズを格納しているがゆえに。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれのブロックは次のブロックへのポインタも含んでいる。
しかしこれは、上記の3つの型へのアラインメント要求を単純にするため、
&lt;code&gt;void&lt;/code&gt; へのポインタとして保存され必要に応じてキャストされる。&lt;/p&gt;
&lt;p&gt;従って、&lt;code&gt;alloc_size&lt;/code&gt; は上記の3つの型のサイズの最小公倍数として定義される。&lt;/p&gt;
&lt;h2&gt;メモリーブロックの概覧&lt;/h2&gt;
&lt;p&gt;それぞれのメモリーブロックは3つの主要セクションからなる。
最初のセクションは、そこからチャンクが切り出される場所であり、インターリーブされたフリーリストを含んでいる。
第二のセクションは、次のブロックへのポインタであり、第三のセクションは次のブロックのサイズである。&lt;/p&gt;
&lt;p&gt;これらのセクションは次のセクションのアラインメントを保証するのに必要なパディングを含むことがある。
最初のセクションのサイズは、&lt;code&gt;number_of_chunks * lcm(requested_size, sizeof(void *), sizeof(size_type))&lt;/code&gt; である。
第二のセクションのサイズは &lt;code&gt;lcm(sizeof(void *), sizeof(size_type)&lt;/code&gt; である。
第三のセクションのサイズは &lt;code&gt;sizeof(size_type)&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;メモリーブロックの一例を示す。
ここでは &lt;code&gt;requested_size == sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは4個のチャンクを含む。配列構造を重ねて表示する。FLP=フリーリストのインターリーブされたポインタ&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;セクション&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; 境界&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; 境界&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; 境界&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 1 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;パディングがある例を図示する。
この例では &lt;code&gt;requested_size == 8&lt;/code&gt; and &lt;code&gt;sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは4個のチャンクを含む。配列構造を重ねて示す。FLP=フリーリストのインターリーブされたポインタ&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 1 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP for Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (32 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (8 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最後に、&lt;code&gt;requested_size&lt;/code&gt; は 7, &lt;code&gt;sizeof(void *)&lt;/code&gt; は 3, and &lt;code&gt;sizeof(size_type)&lt;/code&gt; は 5という入り組んだ例をあげ、奇数ばかりの環境であっても最小公倍数がアラインメントを保証するようすを示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:Memory block containing 2 chunks, showing overlying array structures&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 1 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(15 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Interleaved free list pointer for Chunk 2 (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (210 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (105 bytes; 7 used)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(5 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックへのポインタ (15 bytes; 3 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックのサイズ (5 bytes; 5 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;次ブロックのサイズ (5 bytes; 5 used)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;プロセス外メモリー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;どのように連続したチャンクを扱うか&lt;/h2&gt;
&lt;p&gt;上記の定理は、チャンクの割り当てにも、インターリーブされているフリーリストのような実装の詳細にも、すべてのアラインメント要求を保証している。
しかしながら、それは必要に応じてパディングを追加しているので、連続したチャンクの割り当ては別の方法で扱わなくてはならない。&lt;/p&gt;
&lt;p&gt;上記に似ている配列引数を使用することで、連続した &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;requested_size&lt;/code&gt; のオブジェクトへの要求を、&lt;code&gt;m&lt;/code&gt; 個の連続したチャンクへの要求に翻訳できる。
&lt;code&gt;m&lt;/code&gt; は単純に &lt;code&gt;ceil(n * requested_size / alloc_size)&lt;/code&gt; であり、&lt;code&gt;alloc_size&lt;/code&gt; はチャンクの実際のサイズである。
図示する。&lt;/p&gt;
&lt;p&gt;これは &lt;code&gt;requested_size == 1&lt;/code&gt; で &lt;code&gt;sizeof(void *) == sizeof(size_type) == 4&lt;/code&gt; の場合のメモリーブロックの例である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:メモリーブロックは 4個のチャンクを含んでいる。&lt;code&gt;requested_size&lt;/code&gt; は 1&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 2 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 1 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 3 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 2 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ptr to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:ユーザーが 7個の連続した requested_size の要素を要求した後&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Sections&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;size_type&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;void *&lt;/code&gt; alignment&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;requested_size&lt;/code&gt; alignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4 bytes in use by program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3 bytes in use by program (1 byte unused)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to Chunk 4 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 3 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Chunks section (16 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;FLP to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Chunk 4 (4 bytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Pointer to next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ptr to end-of-list (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Size of next Block (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0 (4 bytes)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Memory not belonging to process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ユーザーが連続したメモリーを解放したときは、再びチャンクに分けることができる。&lt;/p&gt;
&lt;p&gt;連続したチャンクを割り当てるための実装は、二次ではなく線形のアルゴリズムを使っている。
これはフリーリストが順序付けされていなければ連続したチャンクを&lt;strong&gt;発見できないことがある&lt;/strong&gt;ことを意味している。
従って連続したチャンクを割り当てることがあるときは、いつも順序付けられたフリーリストを使うことを勧める。
(上記の例でなら、チャンクが順序付けされておらず、チャンク1 がチャンク3 を指し、チャンク3 はチャンク2 を、チャンク2 は、チャンク4 を指しているならば、連続領域割り当てアルゴリズムは、いずれの連続したチャンクをも発見できない)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ct_gcd_lcm - コンパイル時 GCD および LCM -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ct_gcd_lcm - コンパイル時 GCD および LCM&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/ct_gcd_lcm.hpp&lt;/code&gt; は2つのコンパイル時アルゴリズムを提供する。
最大公約数と最小公倍数である。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_gcd&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct_lcm&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A, B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数 [5.19/1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Result Type&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Precondition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ct_gcd&amp;lt;A, B&amp;gt;::value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最大公約数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A != 0 &amp;amp;&amp;amp; B != 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ct_lcm&amp;lt;A, B&amp;gt;::value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時符号なし定整数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最小公倍数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A != 0 &amp;amp;&amp;amp; B != 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;コンパイル時アルゴリズムであるため、事前条件の違反はコンパイル時エラーを招く。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/static_assert.hpp&amp;gt;&lt;/code&gt; (see &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.md]&#34;&gt;Boost.Static_Assert&lt;/a&gt;, 事前条件が満たされていることを確認する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/ice.hpp&amp;gt;&lt;/code&gt; (see Coding Guidelines for Integral Constant Expressions), 移植性の一助&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;標準文書からの抜粋&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.19/1: Expressions: Constant Expressions:&lt;/strong&gt; &#34;. . . &lt;em&gt;整定数式&lt;/em&gt; は、リテラル(2.13)、列挙子、&lt;code&gt;const&lt;/code&gt; 変数または定数式(8.5)で初期化された整数ないし列挙型の静的データメンバー、整数ないし列挙型の非型テンプレートパラメータ、&lt;code&gt;sizeof&lt;/code&gt; 式のみを含むことができる。
浮動小数リテラル(2.13.3)は整数ないし列挙型にキャストされる場合のみ現れることができる。
整数ないし列挙型への型変換のみが使用できる。
特に、&lt;code&gt;sizeof&lt;/code&gt; 式を除いて、関数、クラスオブジェクト、ポインタ、参照は使用できず、代入、増分、減分、関数呼び出し、カンマ演算子は使用できない。&#34;&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このヘッダーは Boost compile-time algorithms ライブラリに置き換えられるかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary ( &lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for - m4 FOR Macro -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/for.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/for.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;for - m4 FOR Macro&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/for.m4&lt;/code&gt; は &lt;code&gt;BOOST_M4_FOR&lt;/code&gt; を提供する。
この &lt;code&gt;m4&lt;/code&gt; マクロは &lt;code&gt;#for&lt;/code&gt; プリプロセッサインストラクションと同等のものを提供する。&lt;/p&gt;
&lt;h2&gt;用法&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;code&gt;m4&lt;/code&gt; ファイルで使用されなくてはならない。
このファイルは、すべてのビルトインシンボルに&lt;code&gt;m4_&lt;/code&gt;接頭辞が強制的に付けられることように、オプション &lt;code&gt;-P&lt;/code&gt;が使用されていると仮定している。&lt;/p&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;現在の値を保持する変数の名前&lt;/li&gt;
&lt;li&gt;その変数の開始値&lt;/li&gt;
&lt;li&gt;その変数の終了値&lt;/li&gt;
&lt;li&gt;繰り返されるテキスト。
    このテキストは変数への参照を含むことができ、そのときの変数の値で置き換えられる。&lt;/li&gt;
&lt;li&gt;区切りテキスト(オプショナル)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もし引数の数が不正であれば(4未満または5より多い)、&lt;code&gt;BOOST_M4_FOR&lt;/code&gt; はエラーとともに終了する。
もし開始値(&lt;code&gt;$2&lt;/code&gt;)が終了値(&lt;code&gt;$3&lt;/code&gt;)と同じか大きい場合、&lt;code&gt;BOOST_M4_FOR&lt;/code&gt;は何もしない。
さもなくば、テキスト(&lt;code&gt;$4&lt;/code&gt;)を繰り返す。
このとき変数(&lt;code&gt;$1&lt;/code&gt;)をレンジ[開始値 (&lt;code&gt;$2&lt;/code&gt;), 終了値 (&lt;code&gt;$3&lt;/code&gt;)] に束縛し、繰り返されるテキスト(&lt;code&gt;$4&lt;/code&gt;)の出現の間には区切りテキスト(&lt;code&gt;$5&lt;/code&gt;)を繰り返す。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;注意してほしいのは、下記のテーブルで使われる引用符(&lt;code&gt;&#34;&lt;/code&gt;)は入力と出力の一部であることである。
それはホワイトスペースを区切るために使われる。
すべての対の引用符内のコードは一行に書かれていると思ってほしい。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 1, 3)&#34;&lt;/td&gt;
&lt;td&gt;Boost m4 script: BOOST_M4_FOR: Wrong number of arguments (3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 1, 3, i, ` &#39;, 13)&#34;&lt;/td&gt;
&lt;td&gt;Boost m4 script: BOOST_M4_FOR: Wrong number of arguments (6)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 7, 0, i )&#34;&lt;/td&gt;
&lt;td&gt;(nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 0, i )&#34;&lt;/td&gt;
&lt;td&gt;(nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 7, i )&#34;&lt;/td&gt;
&lt;td&gt;&#34;0 1 2 3 4 5 6 &#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, -13, -10, i )&#34;&lt;/td&gt;
&lt;td&gt;&#34;-13 -12 -11 &#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 8, BOOST_M4_FOR(j, 0, 4, (i, j) )&#34;&lt;br /&gt;&#34;)&#34;&lt;/td&gt;
&lt;td&gt;&#34;(0, 0) (0, 1) (0, 2) (0, 3) &#34;&lt;br /&gt;&#34;(1, 0) (1, 1) (1, 2) (1, 3) &#34;&lt;br /&gt;&#34;(2, 0) (2, 1) (2, 2) (2, 3) &#34;&lt;br /&gt;&#34;(3, 0) (3, 1) (3, 2) (3, 3) &#34;&lt;br /&gt;&#34;(4, 0) (4, 1) (4, 2) (4, 3) &#34;&lt;br /&gt;&#34;(5, 0) (5, 1) (5, 2) (5, 3) &#34;&lt;br /&gt;&#34;(6, 0) (6, 1) (6, 2) (6, 3) &#34;&lt;br /&gt;&#34;(7, 0) (7, 1) (7, 2) (7, 3) &#34;&lt;br /&gt;&#34;&#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 7, 0, i, /)&#34;&lt;/td&gt;
&lt;td&gt;(nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 0, i, /)&#34;&lt;/td&gt;
&lt;td&gt;(nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 7, i, /)&#34;&lt;/td&gt;
&lt;td&gt;&#34;0/1/2/3/4/5/6&#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, -13, -10, i, `, &#39;)&#34;&lt;/td&gt;
&lt;td&gt;&#34;-13, -12, -11&#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#34;BOOST_M4_FOR(i, 0, 8, &lt;code&gt;[BOOST_M4_FOR(j, 0, 4, (i, j),&lt;/code&gt;, &#39;)]&#39;, `,&#34;&lt;br /&gt;&#34;&#39;)&#34;&lt;/td&gt;
&lt;td&gt;&#34;[(0, 0), (0, 1), (0, 2), (0, 3)],&#34;&lt;br /&gt;&#34;[(1, 0), (1, 1), (1, 2), (1, 3)],&#34;&lt;br /&gt;&#34;[(2, 0), (2, 1), (2, 2), (2, 3)],&#34;&lt;br /&gt;&#34;[(3, 0), (3, 1), (3, 2), (3, 3)],&#34;&lt;br /&gt;&#34;[(4, 0), (4, 1), (4, 2), (4, 3)],&#34;&lt;br /&gt;&#34;[(5, 0), (5, 1), (5, 2), (5, 3)],&#34;&lt;br /&gt;&#34;[(6, 0), (6, 1), (6, 2), (6, 3)],&#34;&lt;br /&gt;&#34;[(7, 0), (7, 1), (7, 2), (7, 3)]&#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gcd_lcm - GCD and LCM -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/gcd_lcm.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/gcd_lcm.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;gcd_lcm - GCD and LCM&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/gcd_lcm.hpp&lt;/code&gt; は2つの汎用整数アルゴリズムを提供する。
最大公約数と最小公倍数である。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lcm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An integral type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A, B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Values of type &lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Semantics&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Result Type&lt;/th&gt;
&lt;th&gt;Precondition&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gcd(A, B)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A &amp;gt; 0 &amp;amp;&amp;amp; B &amp;gt; 0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最大公約数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lcm(A, B)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A &amp;gt; 0 &amp;amp;&amp;amp; B &amp;gt; 0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最小公倍数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;実装上の注意&lt;/h2&gt;
&lt;p&gt;速度のため、&lt;code&gt;A &amp;gt; B&lt;/code&gt;とする。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;なし。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このヘッダーは Boost algorithms library に置き換えられるかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>guard - Auto-lock/unlock-er -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/guard.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/guard.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;guard - Auto-lock/unlock-er&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/guard.hpp&lt;/code&gt; は &lt;code&gt;Mutex&lt;/code&gt; のロックとアンロック操作にスコープ付きのアクセスを許すようにした &lt;code&gt;guard&amp;lt;Mutex&amp;gt;&lt;/code&gt; を提供する。
それは、例外が投げられたときでも、&lt;code&gt;Mutex&lt;/code&gt; を確実にアンロックする。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;guard&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;guard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mtx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;guard&amp;lt;Mutex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;Mutex &amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;guard&amp;lt;Mutex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Requirements on &lt;code&gt;Mutex&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Assertion/Note/Pre/Post-Condition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.lock()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt; で参照される mutex をロックする。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.unlock()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt; で参照される mutex をアンロックする。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Requirements satisfied by &lt;code&gt;guard&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;アサーション/注意事項/事前/事後条件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T(m)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt; で参照される mutex をロックする。&lt;code&gt;T(m)&lt;/code&gt; を &lt;code&gt;m&lt;/code&gt; に束縛する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&amp;amp;g)-&amp;gt;~T()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt; が束縛されている mutex をアンロックする。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;(プラットフォーム依存の) &lt;code&gt;mutex&lt;/code&gt; があり、以下のようにそれをコードで包むことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;global_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// g のコンストラクタは &#34;global_lock&#34; をロックする&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 何をしてもよい:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 例外を投げるもよし&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// return するもよし&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// そのまま抜けてもよし&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// g のデストラクタが &#34;global_lock&#34;をアンロックする&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;なし。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このヘッダーはいつかは Boost multithreading library で置き換えられるであろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/&amp;quot;../copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mutex - Mutex -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/mutex.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/mutex.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mutex - Mutex&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/mutex.hpp&lt;/code&gt; は OS 提供の mutex 型に対する首尾一貫したインターフェースを提供するいくつかの mutex 型を提供する。
それらはすべて thread-level mutex であり、プロセス間 mutex はサポートされていない。&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;このヘッダファイルは、それがどのような種類のシステムに存在しているかを考えようとする。
Win32 もしくは POSIX + pthread システムについては自身を自動コンフィグする。
すべての mutex code をもみ消すため、自動コンフィグレーションをバイパスし、このヘッダをインクルードするより前に &lt;code&gt;#define BOOST_NO_MT&lt;/code&gt; しなくてはならない。
単一定義規則(ODR)違反を防ぐため、これはライブラリファイルも含めてあなたのプロジェクトの &lt;strong&gt;すべての&lt;/strong&gt; 翻訳単位で定義されていなくてはならない。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Win32 システムでのみ存在する&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Win32_mutex&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Win32_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Win32_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Win32_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Win32_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Win32_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// POSIX+pthread システムでのみ存在する&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;pthread_mutex&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pthread_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pthread_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pthread_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// すべてのシステムに存在する&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;null_mutex&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;null_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;null_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;null_mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;null_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;null_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 上記の型のひとつ&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このヘッダで定義されている任意の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;Mutex&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;mutex&lt;/code&gt; が満たすべき要求&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Assertion/Note/Pre/Post-Condition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.lock()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;mutexをロックする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.unlock()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;mutexをアンロックする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;すべての mutex は owned または unowned のいずれかである。
owned の場合、特定のスレッドに所有されている。
mutex を&#34;ロック&#34;するとは、その mutex が unowned になるまで待ち、カレントスレッドによって owned された状態にすることを意味する。
mutex を&#34;アンロック&#34;するとは、カレントスレッドによる所有を放棄すること意味する(カレントスレッドは所有を放棄する mutex を所有していなくては&lt;strong&gt;ならない&lt;/strong&gt;ことに注意)。
特別な場合として &lt;code&gt;null_mutex&lt;/code&gt; は待たれることがない。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;システムヘッダー &lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;unistd.h&amp;gt;&lt;/code&gt;、および/または &lt;code&gt;&amp;lt;pthread.h&amp;gt;&lt;/code&gt; をインクルードすることがある。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このヘッダーはいつかは Boost multithreading library で置き換えられるであろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Object Pool Implementation -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/object_pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/object_pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Object Pool Implementation&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;Boost ヘッダー &lt;code&gt;&#34;pool.hpp&#34;&lt;/code&gt;(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;pool&lt;/a&gt; を見よ)をインクルードしている。&lt;/p&gt;
&lt;h2&gt;公開インタフェースの拡張&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ObjectPool&lt;/code&gt; 型のオブジェクトがシステムからメモリーを必要とするときはいつでも、それのテンプレートパラメーター &lt;code&gt;UserAllocator&lt;/code&gt; がシステムへ要求を出す。
リクエストされる量はダブリングアルゴリズムによって決定される。
言い換えると、より多くのシステムメモリーが割り当てられるとき、要求される量は2倍になるということである。
ユーザーは以下に述べる拡張によってダブリングアルゴリズムを管理することができる。&lt;/p&gt;
&lt;h3&gt;追加のコンストラクタパラメータ&lt;/h3&gt;
&lt;p&gt;ユーザーは &lt;code&gt;ObjectPool&lt;/code&gt; のコンストラクタに追加のパラメータを渡すことができる。
このパラメータは &lt;code&gt;size_type&lt;/code&gt; 型で、そのオブジェクトがシステムメモリーを初めて必要とするときに要求するチャンクの数である。
デフォルト値は 32 である。
このパラメーターは 0 であってはならない。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;next_size&lt;/code&gt;アクセサ関数&lt;/h3&gt;
&lt;p&gt;関数 &lt;code&gt;size_type get_next_size() const;&lt;/code&gt; と &lt;code&gt;void set_next_size(size_type);&lt;/code&gt; のペアはユーザーに明示的な &lt;code&gt;next_size&lt;/code&gt; の読み書きを許す。
この値はオブジェクトが次にシステムメモリーから割り当てを必要とするときに要求するチャンクの数である。
この値を 0 に設定してはならない。&lt;/p&gt;
&lt;h2&gt;Protected インタフェース&lt;/h2&gt;
&lt;h3&gt;梗概&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ElementType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;object_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// public interface&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;Protected Derivation&lt;/h3&gt;
&lt;p&gt;ObjectPool は protected 導出を使って単純分離記憶域から導出されている。
これは &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;Pool 実装の詳細&lt;/a&gt; のすべてを、ObjectPool から導出されるすべてのクラスにも同じように開示している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/object_pool.html&#34;&gt;インタフェースの説明&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pool の実装 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Pool の実装&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;システムヘッダー &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;exception&amp;gt;&lt;/code&gt; をインクルードしている。&lt;/p&gt;
&lt;p&gt;Boost ヘッダー &lt;code&gt;&#34;detail/ct_gcd_lcm.hpp&#34;&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/ct_gcd_lcm.html&#34;&gt;ct_gcd_lcm&lt;/a&gt; を見よ)、&lt;code&gt;&#34;detail/gcd_lcm.hpp&#34;&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/gcd_lcm.html&#34;&gt;gcd_lcm&lt;/a&gt;を見よ)、&lt;code&gt;&#34;simple_segregated_storage.hpp&#34;&lt;/code&gt; をインクルードしている。
( &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/simple_segregated_storage.html&#34;&gt;simple_segregated_storage&lt;/a&gt;を見よ)。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PODptr&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// コピーコンストラクタ、代入演算子、デストラクターを許可&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;valid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;invalidate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インターフェース&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;protected:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requested_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PODptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find_POD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeof_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インターフェースの拡張&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requested_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_next_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;set_next_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;公開インターフェースの拡張&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pool&lt;/code&gt; がシステムからメモリーを必要とするときはいつでも、テンプレートパラメータである &lt;code&gt;UserAllocator&lt;/code&gt; からシステムへ要求が出される。
システムにリクエストする量はダブリングアルゴリズムによって決定される。
言い換えると、追加でシステムメモリーを確保するときは、要求する量を2倍にするということである。
ユーザーは以下に述べる拡張によってダブリングアルゴリズムを管理することができる。&lt;/p&gt;
&lt;h3&gt;追加のコンストラクターのパラメータ&lt;/h3&gt;
&lt;p&gt;ユーザーは &lt;code&gt;pool&lt;/code&gt; のコンストラクターに追加のパラメータを渡すことができる。
このパラメーターは &lt;code&gt;size_type&lt;/code&gt; 型で、そのオブジェクトがシステムメモリーを初めて必要とするときに要求するチャンクの数である。
既定値は 32 である。
このパラメーターは 0 であってはならない。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;next_size&lt;/code&gt; アクセサ関数&lt;/h3&gt;
&lt;p&gt;関数 &lt;code&gt;size_type get_next_size() const;&lt;/code&gt; と &lt;code&gt;void set_next_size(size_type);&lt;/code&gt; のペアはユーザーに明示的な &lt;code&gt;next_size&lt;/code&gt; への読み書きを許す。
この値はオブジェクトが次にシステムメモリーからの割り当てが必要になったときに要求するチャンクの数である。
この値を 0 に設定してはならない。&lt;/p&gt;
&lt;h2&gt;Class &lt;code&gt;PODptr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; は現実には存在しない異なるクラス型へのポインタであるかのように振舞うクラスである。
それは、それが指す &#34;object&#34; の &#34;data&#34; にアクセスするメンバー関数を提供する。
これらの &#34;class&#34; 型はサイズが異なり、メモリーの最後に何か情報を持っているため、&lt;code&gt;PODptr&lt;/code&gt; は、この &#34;class&#34; のサイズを知っている必要がある。
まるで &#34;class&#34; へのポインタと同様に。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; はシステムから割り当てられたメモリーブロックの場所とサイズを保持している。
個々のメモリーブロックは論理的に3つのセクションに分かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;チャンクエリア。
    このセクションは異なるサイズである。
    &lt;code&gt;PODptr&lt;/code&gt; はチャンクのサイズには注意しないが、チャンク領域のトータルサイズには注意を払い、追跡している。&lt;/li&gt;
&lt;li&gt;次へのポインタ。
    このセクションは与えられた &lt;code&gt;SizeType&lt;/code&gt; により常に同じサイズである。
    それはメモリーブロックリスト中の次のメモリーブロックの場所を保持する。
    次のブロックがなければ 0 を保持する。&lt;/li&gt;
&lt;li&gt;次のサイズ。
    このセクションは与えられた &lt;code&gt;SizeType&lt;/code&gt; により常に同じサイズである。
    それはメモリーブロックリスト中の次のメモリーブロックのサイズを保持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; クラスは生のメモリーブロックを扱うよりはクリーンな方法を提供するのみである。&lt;/p&gt;
&lt;h3&gt;有効・無効性&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; は &lt;strong&gt;valid&lt;/strong&gt; もしくは &lt;strong&gt;invalid&lt;/strong&gt; のいずれかである。
invalid な &lt;code&gt;PODptr&lt;/code&gt; は null ポインタのアナロジーである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; のデフォルトコンストラクタは無効な(invalid)なオブジェクトを作る。
メンバー関数 &lt;code&gt;invalidate&lt;/code&gt; の呼び出しは、そのオブジェクトを無効にする。
メンバー関数 &lt;code&gt;valid&lt;/code&gt; は、有効・無効性のテストに使用することができる。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;PODptr&lt;/code&gt; オブジェクトを得る&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; は、コンストラクタにメモリーブロックのアドレスとサイズを渡すことでメモリーブロックを指すように作られることもある。
この方法で生成された &lt;code&gt;PODptr&lt;/code&gt; は有効(valid)である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PODptr&lt;/code&gt; はメンバー関数 &lt;code&gt;next&lt;/code&gt; の呼び出しによって生成されることもある。
このメンバー関数は、メモリーブロックリストの中の次のメモリーブロックを指す &lt;code&gt;PODptr&lt;/code&gt; を返す。
もしくは、次のブロックが存在しないならば無効な &lt;code&gt;PODptr&lt;/code&gt; を返す。&lt;/p&gt;
&lt;h2&gt;&#34;pointer&#34; データにアクセスする&lt;/h2&gt;
&lt;p&gt;個々の &lt;code&gt;PODptr&lt;/code&gt; は、そのメモリーブロックのアドレスとサイズを保持している。
このアドレスはメンバー関数 &lt;code&gt;begin&lt;/code&gt; で、読み書きされる。
メモリーブロックのサイズはメンバー関数 &lt;code&gt;total_size&lt;/code&gt; による読みのみが許されている。&lt;/p&gt;
&lt;h3&gt;メモリーブロックの各領域へのアクセス&lt;/h3&gt;
&lt;p&gt;チャンク領域は &lt;code&gt;element_size&lt;/code&gt; と連携して、メンバー関数&lt;code&gt;begin&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; によってアクセスすることができる。
&lt;code&gt;end&lt;/code&gt; によって返される値は、つねに &lt;code&gt;begin&lt;/code&gt; によって返される値に &lt;code&gt;element_size&lt;/code&gt; を加えた値である。
&lt;code&gt;begin&lt;/code&gt; のみが書き込み可能である。
&lt;code&gt;end&lt;/code&gt; は past-the-end 値(末尾の要素の次)である。
&lt;code&gt;begin&lt;/code&gt; に始まり&lt;code&gt;end&lt;/code&gt; の前で終わるポインタの使用はメモリーブロックのチャンクを通しで反復することができる。&lt;/p&gt;
&lt;p&gt;メンバー関数 &lt;code&gt;next_ptr&lt;/code&gt; によって次ポインタ領域にアクセスすることができる。
メンバー関数 &lt;code&gt;next_size&lt;/code&gt; によって次サイズ領域にアクセスすることができる。
両者とも書き込み可能である。
両者とも、メンバー関数 &lt;code&gt;next&lt;/code&gt; を使って、同時に読むまたは変更ができる。&lt;/p&gt;
&lt;h2&gt;Protected インタフェース&lt;/h2&gt;
&lt;h3&gt;Protected 導出&lt;/h3&gt;
&lt;p&gt;Pool は protected 導出を使って単純分離記憶域から導出されている。
これは &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/simple_segregated_storage.html&#34;&gt;単純分離記憶域の実装の詳細&lt;/a&gt;のすべてを、Poolから導出されるすべてのクラスにも同じように開示している。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;details::PODptr&amp;lt;size_type&amp;gt; list;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;これは、このPoolオブジェクトによって割り当てられたメモリーブロックのリストである。
(&lt;code&gt;first&lt;/code&gt; として単純分離記憶域によって開示された)未使用のメモリーチャンクのリストと同じものでは&lt;strong&gt;ない&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;store&lt;/code&gt; functions&lt;/h3&gt;
&lt;p&gt;基底クラスである単純分離記憶域オブジェクトを返すのに使われる、便宜関数がある。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;const size_type requested_size;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;最初の引数はコンストラクタへ渡される。
ユーザーによって要求されたチャンクのバイト数を表現している。
チャンクの実際のサイズは異なっているかもしれない。
下記の &lt;code&gt;alloc_size&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;size_type next_size&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;我々が次にシステムメモリーを割り当てるとき &lt;code&gt;UserAllocator&lt;/code&gt; が要求するチャンクの数。
上記の拡張の説明を見よ。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;details::PODptr&amp;lt;size_type&amp;gt; find_POD(void * chunk) const;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;メモリーブロックリストを通しで調べて、その &lt;code&gt;chunk&lt;/code&gt; がそこから割り当てられている、または将来割り当てられことがあり得るブロックを探す。
もし見つかれば、そのブロックを返す。&lt;code&gt;chunk&lt;/code&gt; が他の Pool から割り当てられている、もしくは将来他の Pool から割り当てられことがあり得る場合は無効な値を返す。
それ以外の &lt;code&gt;chunk&lt;/code&gt; の値は、不正な結果を招く。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;static bool is_from(void * chunk, char * i, size_type sizeof_i);&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;chunk&lt;/code&gt; が 要素サイズが &lt;code&gt;sizeof_i&lt;/code&gt; のメモリーチャンク &lt;code&gt;i&lt;/code&gt; から割り当てられていると見える(思われる)かどうかをテストする。
&lt;code&gt;sizeof_i&lt;/code&gt; はそのブロックのチャンク領域のサイズであり、ブロックのトータルサイズではないことに注意せよ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chunk&lt;/code&gt; がそのメモリーブロックから割り当てられているか、将来そのメモリーブロックから割り当てられることがあり得る場合に &lt;code&gt;true&lt;/code&gt; を返す。
&lt;code&gt;chunk&lt;/code&gt; が他のブロックから割り当てられているか、将来他のブロックから割り当てられることがあり得る場合には &lt;code&gt;false&lt;/code&gt; を返す。
それ以外の &lt;code&gt;chunk&lt;/code&gt; の値は不正な結果を招く。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;size_type alloc_size() const;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;この Pool によって割り当てられるメモリーチャンクの計算されたサイズを返す。
&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/alignment.html&#34;&gt;アラインメントの都合で&lt;/a&gt;、&lt;code&gt;lcm(requested_size, sizeof(void *), sizeof(size_type))&lt;/code&gt; と定義されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;インタフェースの説明&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pool_alloc - Boost Pool Standard Allocators Implementation -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_alloc.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/pool_alloc.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;pool_alloc - Boost Pool Standard Allocators Implementation&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;システムヘッダ&lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;をインクルードしている。&lt;/p&gt;
&lt;p&gt;Boostヘッダ&lt;code&gt;&#34;singleton_pool.hpp&#34;&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;singleton_pool&lt;/a&gt;を見よ) および &lt;code&gt;&#34;detail/mutex.hpp&#34;&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/mutex.html&#34;&gt;mutex&lt;/a&gt;を見よ)をインクルードしている。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;pool_allocator&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インタフェース&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// extensions to public interface&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rebind&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;fast_pool_allocator&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インタフェース&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// extensions to public interface&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rebind&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;公開インタフェースの拡張&lt;/h2&gt;
&lt;h3&gt;Additional template parameters&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;このパラメーターで、ユーザーに基底となるシングルトンプールで使用される同期の型を決定することができる。
より多くの情報は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;singleton pool&lt;/a&gt; の公開インタフェースの拡張を見よ。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;NextSize&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;このパラメーターの値は基底となる Pool が生成されるときに渡される。
より詳しい情報は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;pool&lt;/a&gt; の公開インタフェースの拡張を見よ。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;rebind&lt;/code&gt; の修正&lt;/h3&gt;
&lt;p&gt;構造体 &lt;code&gt;rebind&lt;/code&gt; が、追加のテンプレートパラメータの値を保護するために再定義されている。&lt;/p&gt;
&lt;h3&gt;追加メンバー&lt;/h3&gt;
&lt;p&gt;typedef である &lt;code&gt;mutex&lt;/code&gt; と静的定数値 &lt;code&gt;next_size&lt;/code&gt; はテンプレートパラメータの値 &lt;code&gt;Mutex&lt;/code&gt; と &lt;code&gt;NextSize&lt;/code&gt; をそれぞれクラス外へ見せる。&lt;/p&gt;
&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;多くのよく使われる STL ライブラリがアロケータの使い方でバグを含んでいる。
具体的に言うと、それらは &lt;code&gt;deallocate&lt;/code&gt; 関数にヌルポインタを渡しており、それは標準[20.1.5 Table 32]ではっきりと禁止されている。&lt;/p&gt;
&lt;p&gt;PoolAlloc は、それを発見すれば、これらのライブラリのバグ回避する。
現状でのバグ回避:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Borland C++ (Builder and command-line compiler) with default (RogueWave) library, ver. 5 and earlier&lt;/li&gt;
&lt;li&gt;STLport (with any compiler), ver. 4.0 and earlier&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;Boost multithreading library が完成すれば、&lt;code&gt;Mutex&lt;/code&gt; パラメーターは同様の柔軟性を提供する、そのライブラリーの何かで置き換えられ、実装の詳細からインタフェース仕様へ移されることになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool_alloc.html&#34;&gt;Interface Description&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Object Pool Constructors Generator -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_construct.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/pool_construct.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Object Pool Constructors Generator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;説明&lt;/h2&gt;
&lt;p&gt;テンプレートクラス &lt;code&gt;object_pool&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/object_pool.html&#34;&gt;object_pool&lt;/a&gt; を見よ)は、いくつもの関数 &lt;code&gt;construct(..)&lt;/code&gt; を含んでいる。
これらはオブジェクトの割り当てと構築の両方をひとつの操作で行う。&lt;/p&gt;
&lt;p&gt;この関数への引数の数と型はまったく気まぐれであるので、テンプレート関数 &lt;code&gt;construct&lt;/code&gt; を自動的に生成する簡単なシステムが用意されている。
このシステムは &lt;code&gt;m4&lt;/code&gt; マクロプリプロセッサをベースとしている。
&lt;code&gt;m4&lt;/code&gt; は UNIX システムでは標準であり、Win32 システムにもある。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;m4&lt;/code&gt; を走らせると、&lt;code&gt;detail/pool_construct.m4&lt;/code&gt; は &lt;code&gt;detail/pool_construct.inc&lt;/code&gt; を作る。
ここには適切な個数の引数を持つ &lt;code&gt;construct&lt;/code&gt; の定義のみがある。
引数の数は m4 マクロ &lt;code&gt;NumberOfArguments&lt;/code&gt; としてファイルに渡されることがある。
もし提供されていなければ既定値は &lt;code&gt;3&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;異なった引数の個数毎に(&lt;code&gt;1&lt;/code&gt; から &lt;code&gt;NumberOfArguments&lt;/code&gt;まで)、テンプレート関数が生成される。
引数の数と同じ数のテンプレートパラメータが存在し、それぞれの引数の型はそのテンプレートの引数(cv-修飾の場合もある)の反映である。
cv-修飾の可能な順列の数だけ生成される。&lt;/p&gt;
&lt;p&gt;可能な引数の数のすべての順列が生成されるため、インクルードされるファイルのサイズは
コンストラクター引数の数の式で線形ではなく、指数的に増加する。
無理のないコンパイル時間のために、必要なだけの数の引数のみを使うべきである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;detail/pool_construct.bat&lt;/code&gt; と &lt;code&gt;detail/pool_construct.sh&lt;/code&gt; はどちらも、&lt;code&gt;NumberOfArguments&lt;/code&gt; をコマンドラインとして定義するように、&lt;code&gt;m4&lt;/code&gt; を呼び出すために提供されている。
より詳細はこれらのファイルを見よ。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;for.m4&lt;/code&gt; に依存(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/for.html&#34;&gt;for&lt;/a&gt; を見よ)。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;このシステムは Python (または他の言語)スクリプトによって補完または置換される予定。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/object_pool.html&#34;&gt;Interface Description&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>単純分離記憶域の実装 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/simple_segregated_storage.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/simple_segregated_storage.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;単純分離記憶域の実装&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;システムヘッダー &lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt; をインクルードしている。&lt;/p&gt;
&lt;h2&gt;Protected インタフェース&lt;/h2&gt;
&lt;h3&gt;梗概&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;simple_segregated_storage&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インタフェース&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;protected:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nextof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find_prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;void * first;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;このデータメンバーはフリーリストである。
フリーリスト中の最初のチャンクを指し、フリーリストが空のときは 0 である。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;static void * &amp;amp; nextof(void * const ptr);&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;これは便宜関数である。
可読性を増し、フリーリストを扱うクリーンアップコードの手助けをする。
戻り値は単に &lt;code&gt;*ptr&lt;/code&gt; を適切な型へキャストしただけである。
&lt;code&gt;ptr&lt;/code&gt; は 0 であってはならない。&lt;/p&gt;
&lt;p&gt;例として、最初のチャンクの後のフリーリストを切り詰めたくなったと仮定しよう。
つまり、&lt;code&gt;*first&lt;/code&gt; を 0 にセットしたいのだ。
こうすると中身が一個だけのフリーリストになる。
そうするための通常の方法は、最初に、&lt;code&gt;first&lt;/code&gt; を void へのポインタへのポインタにキャストし、それを参照外しを行って代入することである(&lt;code&gt;*static_cast&amp;lt;void **&amp;gt;(first) = 0;&lt;/code&gt;)。
これをこの便宜関数を使ってより容易に行うことができる(&lt;code&gt;nextof(first) = 0;&lt;/code&gt;)。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;void * find_prev(void * ptr);&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; によって参照されるフリーリストを廻って(traverse訳語未定)、&lt;code&gt;ptr&lt;/code&gt; が指すものが仮にフリーリスト中にいるとすればそこであろう場所の、ひとつ前のものへのポインタを返す。
&lt;code&gt;ptr&lt;/code&gt; がフリーリストの最初のものであれば 0 を返す(言い換えると &lt;code&gt;first&lt;/code&gt; より前である)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptr&lt;/code&gt; が指すものは実際にはフリーリスト中には存在しないが、&lt;strong&gt;仮に&lt;/strong&gt;フリーリスト中にあるならそこに&lt;strong&gt;あるはずの&lt;/strong&gt;場所のひとつ前の位置を見つけ出すことに注意せよ。
&lt;code&gt;ptr&lt;/code&gt; のひとつ前のエントリーを見つけ出すのではない(&lt;code&gt;ptr&lt;/code&gt; がすでにフリーリストに入っているのでない限り)。
仕様として、&lt;code&gt;find_prev(0)&lt;/code&gt; は 0 を返す。
フリーリストの最後のエントリーではない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/simple_segregated_storage.html&#34;&gt;インタフェースの説明&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>singleton - Singleton -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/singleton.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;singleton - Singleton&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;detail/singleton.hpp&lt;/code&gt; はクラス型のシングルトンへのアクセスを提供する。
これは汎用のシングルトン解では&lt;strong&gt;ない&lt;/strong&gt;。
それはデフォルトコンストラクタを持つクラス型に限定される。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;singleton_default&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;singleton_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace details&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げないデフォルトコンストラクタと例外を投げないデストラクタを持つ任意のクラス&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;singleton_default&lt;/code&gt;が満たすべき要件&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;アサーション/注意事項/事前/事後条件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;singleton_default&amp;lt;T&amp;gt;::instance()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T &amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シングルトンインスタンスへの参照を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;保証&lt;/h2&gt;
&lt;p&gt;シングルトンインスタンスは &lt;code&gt;main()&lt;/code&gt; 開始前に構築され、&lt;code&gt;main()&lt;/code&gt; 終了後に破棄されることが保証される。
さらに、&lt;code&gt;singleton_default&amp;lt;T&amp;gt;::instance()&lt;/code&gt; への最初の呼び出しが完了する前に(たとえそれが &lt;code&gt;main()&lt;/code&gt; の呼び出し前であっても)構築されていることが保証される。
したがって &lt;code&gt;main()&lt;/code&gt; の中以外では複数のスレッドが実行されておらず、シングルトンへのすべてのアクセスが mutexes によって制限されているならば、この保証によってスレッドセーフなシングルトンになる。&lt;/p&gt;
&lt;h2&gt;詳細&lt;/h2&gt;
&lt;p&gt;我々がどのように上記の保証を提供しているかの詳細は、ヘッダーファイルのコメントを見よ。&lt;/p&gt;
&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;なし。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;Boost singleton library によって置き換えられるかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Singleton Pool の実装 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/implementation/singleton_pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Singleton Pool の実装&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;依存性&lt;/h2&gt;
&lt;p&gt;Boostヘッダー &lt;code&gt;pool.hpp&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;pool&lt;/a&gt;を見よ)、&lt;code&gt;detail/singleton.hpp&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton.html&#34;&gt;singleton&lt;/a&gt;を見よ)、&lt;code&gt;detail/mutex.hpp&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/mutex.html&#34;&gt;mutex&lt;/a&gt;を見よ)、&lt;code&gt;detail/guard.hpp&lt;/code&gt; (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/guard.html&#34;&gt;guard&lt;/a&gt;を見よ)をインクルードしている。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestedSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;singleton_pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インタフェース&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 公開インタフェースの拡張&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mutex&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NextSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;公開インタフェースの拡張&lt;/h2&gt;
&lt;h3&gt;追加テンプレートパラメータ&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;このクラスは&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/mutex.html&#34;&gt;mutex&lt;/a&gt;型のもので基底であるPoolへの同時アクセスを保護するために使用する。
これは開示されているので、ユーザーはシングルトンプールを通常の様(つまり同期して)に記述することもできるし、効率のために、シングルトンプールを(&lt;code&gt;details::pool::null_mutex&lt;/code&gt; を指定して)同期制御無しにすることもできる。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;NextSize&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;基底となる Pool が生成されるとき、このパラメーターの値が渡される。
より詳しい情報は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;pool&lt;/a&gt; の公開インタフェースの拡張を見よ。&lt;/p&gt;
&lt;h3&gt;追加メンバー&lt;/h3&gt;
&lt;p&gt;typedef である &lt;code&gt;mutex&lt;/code&gt; と静的定数値 &lt;code&gt;next_size&lt;/code&gt; はテンプレートパラメータの値 &lt;code&gt;Mutex&lt;/code&gt; と &lt;code&gt;NextSize&lt;/code&gt; をそれぞれにクラス外に見せる。&lt;/p&gt;
&lt;h2&gt;将来の方向性&lt;/h2&gt;
&lt;p&gt;Boost multithreading library が完成すれば、&lt;code&gt;Mutex&lt;/code&gt; パラメーターは同等の柔軟性を提供する、そのライブラリーの何かで置き換えられ、実装の詳細からインタフェース仕様へ移動されることになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/singleton_pool.html&#34;&gt;インタフェースの説明&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Pool Interfaces -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost Pool Interfaces&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;ユーザーが Pool を使いたくなるような、素晴らしい柔軟性のあるインターフェースを紹介しよう。
Pools がどのように働くかについて基本的理解が必要なら、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/concepts.html&#34;&gt;concepts document概念資料&lt;/a&gt;をよく読むと良い。&lt;/p&gt;
&lt;h2&gt;用語とトレードオフ&lt;/h2&gt;
&lt;h3&gt;オブジェクト用法 対 シングルトン用法&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;オブジェクト用法&lt;/em&gt;は、個々の Pool を生成・破棄されるオブジェクトとして扱う方法である。
Pool の破棄は、暗黙のうちに、そのプールから割り当てられたチャンクを開放する。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;シングルトン用法&lt;/em&gt;は、個々のプールを static な生存期間のオブジェクトとして扱う方法である。
つまりプログラム終了時まで破棄されない。
シングルトン用法ではプールは共有されてもよい。
シングルトン用法はスレッドセーフであるということである。
シングルトン用法のプールオブジェクトによって確保されたシステムメモリーは、&lt;code&gt;release_memory&lt;/code&gt; または &lt;code&gt;purge_memory&lt;/code&gt;を使って開放される。&lt;/p&gt;
&lt;h3&gt;メモリー枯渇時状態: 例外 対 Null 返し&lt;/h3&gt;
&lt;p&gt;Some Pool interfaces throw exceptions when out-of-memory; others will return 0.
In general, unless mandated by the Standard, Pool interfaces will always prefer to return 0 instead of throw an exception.&lt;/p&gt;
&lt;p&gt;プールインタフェースには、メモリ枯渇時に例外を投げるものもある。
他のものは 0 を返す。
全般的には、標準に則っていないが、プールインタフェースは例外を投げるより 0 を返すことを好んでいる。&lt;/p&gt;
&lt;h2&gt;インタフェース&lt;/h2&gt;
&lt;h3&gt;pool&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;pool interface&lt;/a&gt;はNullを返す、単純なオブジェクト用法のインタフェースである。&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// t を使って何かをする。それを free() する時間は取らなくてよい&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数終了時、pは破棄され、すべてのmalloc()されたintも暗黙のうちに開放される。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;object_pool&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/object_pool.html&#34;&gt;object_pool interface&lt;/a&gt; は Null を返すオブジェクト用法のインタフェースである。
これはチャンクが割り当てられようとしているオブジェクトの型を意識するという違いがある。
破棄時、&lt;code&gt;object_pool&lt;/code&gt;が割り当てたすべてのチャンクにデストラクタが呼び出される。&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 副作用のあるデストラクタを持つ&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//  t を使って何かをする。それを free() する時間は取らなくてよい&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数終了時、pは破棄され、すべてのXオブジェクトについてデストラクタが呼び出される。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;singleton_pool&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/singleton_pool.html&#34;&gt;singleton_pool interface&lt;/a&gt; は Null を返す、シングルトン用法のインタフェースである。
これはシングルトン用法であること以外は pool インタフェースと同じである。&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyPoolTag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singleton_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyPoolTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//  t を使って何かをする。それを free() する時間は取らなくてよい&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 明示的にすべてのmalloc()された int を開放しなくてはならない&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;my_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;purge_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;pool_alloc&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool_alloc.html&#34;&gt;pool_alloc interface&lt;/a&gt; は例外を使うシングルトン用法のインタフェースである。
&lt;code&gt;singleton_pool&lt;/code&gt; interface 上に構築され、標準アロケータ準拠クラス(コンテナ内で使用できるなど)を提供する。&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 関数の終了時にpoolアロケータによって割り当てられたシステムメモリーは解放されないので、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 開放させるために&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//  boost::singleton_pool&amp;lt;boost::pool_allocator_tag, sizeof(int)&amp;gt;::release_memory()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// を呼ばなくてはならない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Future Directions&lt;/h2&gt;
&lt;p&gt;別のプールインタフェースを書く予定である。
クラス個々のプールによる割り当てのための基底クラスになる。
この&lt;code&gt;pool_base&lt;/code&gt; インタフェースは、例外を使うシングルトン用法で、&lt;code&gt;singleton_pool&lt;/code&gt; インターフェース上に構築されることになるだろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>object_pool - Boost Object Pool Allocator -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/object_pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/object_pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;object_pool - Boost Object Pool Allocator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;object_pool.hpp&lt;/code&gt; は速く効率的なメモリー割り当てに使用できるテンプレート型を提供する。
開放されていないオブジェクトの自動破棄も提供する。
他のpoolベースのインタフェースについての情報は&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;他のプールインタフェース&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ElementType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;object_pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ElementType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// other construct() functions&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ&lt;/h2&gt;
&lt;h3&gt;ElementType&lt;/h3&gt;
&lt;p&gt;テンプレートパラメータは割り当て/開放するオブジェクトの型である。
そのオブジェクトは例外を投げないデストラクを持たなくてはならない。&lt;/p&gt;
&lt;h3&gt;UserAllocator&lt;/h3&gt;
&lt;p&gt;基底となっているPoolがシステムからメモリーを割り当てるとき使用するメソッドを定義する。
詳細は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt; を見よ。 &lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;object_pool&amp;lt;ElementType, UserAllocator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ObjectPool&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const ObjectPool&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType *&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Typedefs&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool::element_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ElementType&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool::user_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UserAllocator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pool&amp;lt;UserAllocator&amp;gt;::size_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pool&amp;lt;UserAllocator&amp;gt;::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Constructors, Destructors, and Testing&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectPool()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;新しい空の &lt;code&gt;ObjectPool&lt;/code&gt; を構築する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&amp;amp;t)-&amp;gt;~ObjectPool()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ObjectPool&lt;/code&gt; を破棄する。開放されていない割り当て中の ElementType に &lt;code&gt;~ElementType()&lt;/code&gt; が呼び出される。O(N)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.is_from(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; から割り当てられているもの、もしくは &lt;code&gt;u&lt;/code&gt; から先々、割り当てられることがありえるものの場合に &lt;code&gt;true&lt;/code&gt; を返す。&lt;code&gt;p&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; 以外の pool から割り当てられているもの、もしくは他の pool から先々割り当てられることがありえるものの場合に &lt;code&gt;false&lt;/code&gt; を返す。さもなくば、戻り値の値は無意味である。この関数はどのようなポインタ値についても信頼できるテストを行うわけでは&lt;strong&gt;ない&lt;/strong&gt;ことに注意せよ。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Allocation and Deallocation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Pre-Condition&lt;/th&gt;
&lt;th&gt;Semantic Equivalence&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType&lt;/code&gt; を保持できるメモリーを割り当てる。メモリー枯渇時は &lt;code&gt;0&lt;/code&gt; を返す。償却O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt; は &lt;code&gt;t&lt;/code&gt; から返されたものでなくてはならない。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;メモリーのチャンクを解放する。&lt;code&gt;p&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; であってはならないことに注意せよ。&lt;code&gt;p&lt;/code&gt; のデストラクタは呼ばれないことに注意せよ。O(N)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.construct(???)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType&lt;/code&gt; は &lt;code&gt;???&lt;/code&gt; 部分がマッチするコンストラクターを持っていなくてはならない。そこで与えられるパラメータ数は &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_construct.html&#34;&gt;pool_construct&lt;/a&gt;&lt;/code&gt; 中でサポートされている数を超えてはならない。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ElementType&lt;/code&gt; 型のオブジェクトを割り当て初期化する。メモリー枯渇時は、&lt;code&gt;0&lt;/code&gt; を返す。償却 O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.destroy(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt; は &lt;code&gt;t&lt;/code&gt; から返されたものでなくてはならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p-&amp;gt;~ElementType(); t.free(p);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::object_pool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/object_pool.html&#34;&gt;Implementation Details&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pool -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Pool&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pool&lt;/code&gt;は高速なメモリーアロケータであり、すべての割り当てたチャンクの適正なアラインメントを保証する。&lt;/p&gt;
&lt;p&gt;pool.hpp は2つの &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;UserAllocator&lt;/a&gt; クラスと &lt;code&gt;pool&lt;/code&gt; テンプレートクラスを提供する。
これは &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/simple_segregated_storage.html&#34;&gt;simple segregated storage&lt;/a&gt; 解が提供するフレームワークを拡張し一般化する。
他のプールベースのインタフェースについての情報は&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;他のプールインタフェース&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt;を見よ&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_malloc_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt;を見よ&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requested_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;release_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;purge_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_requested_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ&lt;/h2&gt;
&lt;h3&gt;UserAllocator&lt;/h3&gt;
&lt;p&gt;Poolがシステムからメモリーを割り当てるときに使用するメソッドを定義する。
詳細は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt; を見よ。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Table:Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pool&amp;lt;UserAllocator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;Pool&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;const Pool&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RequestedSize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;Pool::size_type&lt;/code&gt;; must be greater than 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Typedefs&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pool::user_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pool::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::size_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pool::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Constructors, Destructors, and Testing&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pool(RequestedSize)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RequestedSize&lt;/code&gt; サイズのチャンクを割り当てるために使用される、新しい空の &lt;code&gt;Pool&lt;/code&gt; を構築する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&amp;amp;t)-&amp;gt;~Pool()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pool&lt;/code&gt;を破棄し、メモリーブロックのリストを解放する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.is_from(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;が&lt;code&gt;u&lt;/code&gt;から割り当てられたものである、もしくは&lt;code&gt;u&lt;/code&gt;から先々割り当てられることがあり得るものの場合に&lt;code&gt;true&lt;/code&gt;を返す。&lt;code&gt;chunk&lt;/code&gt;が&lt;code&gt;u&lt;/code&gt;以外のpoolから割り当てられたものである、もしくは他のpoolから先々割り当てられることがあり得るものの場合に&lt;code&gt;false&lt;/code&gt;を返す。さもなくば、戻り値は無意味である。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.get_requested_size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;この関数はどのようなポインタ値を与えても信頼できるテストを行っているわけでは&lt;strong&gt;ない&lt;/strong&gt;ことに注意せよ。コンストラクタに渡された値を返す。&lt;code&gt;Pool&lt;/code&gt; オブジェクトの生存期間中、変わらない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Allocation and Deallocation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Pre-Condition&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;メモリーのチャンクを割り当てる。未使用のチャンクを持つブロックを、メモリーブロックリストから探し、見つかればその未使用チャンクを返す。さもなくば、新しいメモリーブロックを生成し、それのフリーリストを &lt;code&gt;t&lt;/code&gt; のフリーリストに追加し、そのブロックから未使用チャンクを返す。新しいメモリーブロックを確保することができなければ、&lt;code&gt;0&lt;/code&gt; を返す。償却 O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;上記と同じ、但し、順序を維持してフリーリストをマージすることだけが異なる。償却 O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_malloc(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;上記と同じ、但し、少なくとも &lt;code&gt;n * requested_size&lt;/code&gt; バイト以上の大きさはある連続したチャンクを割り当てる。償却 O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;t.malloc()&lt;/code&gt; もしくは &lt;code&gt;t.ordered_malloc()&lt;/code&gt; によって返されたものでなくてはならない。&lt;/td&gt;
&lt;td&gt;メモリーのチャンクを解放する。&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; であってはならないことに注意せよ。O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上記と同じ。&lt;/td&gt;
&lt;td&gt;上記と同じ、但し、順序を維持する。&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; であってはならないことに注意せよ。フリーリストのサイズによって O(N)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.free(chunk, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;t.ordered_malloc(n)&lt;/code&gt; によって返されたものでなくてはならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; は実際に &lt;code&gt;n * partition_sz&lt;/code&gt; バイトに広がったチャンクのブロックを参照していることを前提とし、ブロックの個々のチャンクを開放する。&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; であってはならないことに注意せよ。O(n)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_free(chunk, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;t.ordered_malloc(n)&lt;/code&gt; によって返されたものでなくてはならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; は実際に &lt;code&gt;n * partition_sz&lt;/code&gt; バイトに広がったチャンクのブロックを参照していることを前提とし、ブロックの個々のチャンクを開放する。&lt;code&gt;chunk&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; であってはならないことに注意せよ。順序を維持する。O(N + n)、N はフリーリストのサイズ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.release_memory()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt; 順序付けされていること。&lt;/td&gt;
&lt;td&gt;割り当て中のチャンクを持たないメモリーブロックを解放する。少なくともひとつのメモリーブロックを解放した場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.purge_memory()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;すべてのメモリーブロックを解放する。この関数は &lt;code&gt;t&lt;/code&gt; の割り当て関数から返されたポインタを無効にする。少なくともひとつのメモリーブロックを解放した場合、&lt;code&gt;true&lt;/code&gt; を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;boost::default_user_allocator_new_delete&lt;/li&gt;
&lt;li&gt;boost::default_user_allocator_malloc_new&lt;/li&gt;
&lt;li&gt;boost::pool&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool.html&#34;&gt;実装の詳細&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pool_alloc - Boost Pool Standard Allocators -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool_alloc.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/pool_alloc.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;pool_alloc - Boost Pool Standard Allocators&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pool_alloc.hpp&lt;/code&gt; は速く効率的なメモリー割り当てに使用できる2つのテンプレート型を提供している。
どちらも[20.1.5]の標準アロケーターとしての要件と[20.1.5/4]の付加要件を満足しており、標準コンテナもしくはユーザーが作成したコンテナに使用することができる。
他の pool ベースのインタフェースの情報は&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;他のプールインターフェース&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator_tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;pool_allocator&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllcoator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rebind&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 以下はstd::allocator [20.4.1]をそっくり真似るので explicitではない。&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deallocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator_tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;fast_pool_allocator&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rebind&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 以下はstd::allocator [20.4.1]をそっくり真似るので explicitではない。&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;const_pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_pool_allocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deallocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;allocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deallocate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テンプレート&lt;/h2&gt;
&lt;h3&gt;T&lt;/h3&gt;
&lt;p&gt;最初のテンプレートパラメーターは割り当て/開放するオブジェクトの型である。&lt;/p&gt;
&lt;h3&gt;UserAllocator&lt;/h3&gt;
&lt;p&gt;基礎となっている Pool がシステムからメモリーを確保するとき使用するメソッドを定義する。
詳細は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt; を見よ。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;上記の2つの pool アロケーターは標準[20.1.5]で説明されている標準アロケーターとしてのすべての要件を満足している。
それらは[20.1.5/4]に見られる付加要件も満足しており、どの標準準拠のコンテナにも使用することができる。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;fast_pool_allocator&lt;/code&gt; は追加の割り当てと追加の開放を行う関数も提供している。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PoolAlloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fast_pool_allocator&amp;lt;T, UserAllocator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;T *&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Additional allocation/deallocation functions (&lt;code&gt;fast_pool_allocator&lt;/code&gt; only)&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Return Type&lt;/th&gt;
&lt;th&gt;Semantic Equivalence&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PoolAlloc::allocate()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PoolAlloc::allocate(1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PoolAlloc::deallocate(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PoolAlloc::deallocate(p, 1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;typedef である &lt;code&gt;user_allocator&lt;/code&gt; はテンプレートパラメータの値である &lt;code&gt;UserAllocator&lt;/code&gt; をクラスの外に見せる。&lt;/p&gt;
&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;割り当て関数は、メモリーを使い切ったときには &lt;code&gt;std::bad_alloc&lt;/code&gt; を投げる。&lt;/p&gt;
&lt;p&gt;アロケーターが使用する、基底となっている Pool 型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/singleton_pool.html&#34;&gt;Singleton Pool Interface&lt;/a&gt; 経由でアクセスできる。
&lt;code&gt;pool_allocator&lt;/code&gt; で使用される識別タグは &lt;code&gt;pool_allocator_tag&lt;/code&gt; であり、&lt;code&gt;fast_pool_allocator&lt;/code&gt; で使用されるタグは &lt;code&gt;fast_pool_allocator_tag&lt;/code&gt; である。
(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_alloc.html&#34;&gt;実装に特定のもの&lt;/a&gt;も含めて)アロケータのすべてのテンプレートパラメータは、基底となっている Pool の型を決定する。
ただし、最初のパラメータ &lt;code&gt;T&lt;/code&gt; については、そのサイズが使用されるので、これは除く。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt; のサイズが基底となる Pool の型を決定するので、同じサイズの異なる型のアロケータは、同じ基底となる pool を&lt;em&gt;共有することになる&lt;/em&gt;。
タグクラスは &lt;code&gt;pool_allocator&lt;/code&gt; と &lt;code&gt;fast_pool_allocator&lt;/code&gt; が pool を共有しないようにする。
例えば、 &lt;code&gt;sizeof(int) == sizeof(void *)&lt;/code&gt; であるシステムでは、&lt;code&gt;pool_allocator&amp;lt;int&amp;gt;&lt;/code&gt; と &lt;code&gt;pool_allocator&amp;lt;void *&amp;gt;&lt;/code&gt; は同一の pool から 割り当て/開放を行うことになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; 開始前と &lt;code&gt;main()&lt;/code&gt; 終了後に、ただひとつのスレッドのみが走っているなら、どちらのアロケータも完全にスレッドセーフである。&lt;/p&gt;
&lt;h2&gt;The Fast Pool Allocator&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pool_allocator&lt;/code&gt; は、任意数の連続したチャンクへの割り当て要求に効率的に応えることに適した、より汎用性のある解である。
&lt;code&gt;fast_pool_allocator&lt;/code&gt; も、汎用性のある解であるが、一度に一個のチャンクが要求されることに効率的に応えるように調整されている。
連続したチャンクに対しても機能するが、&lt;code&gt;pool_allocator&lt;/code&gt; ほどではない。
もし、パフォーマンスを真剣に考えているなら、&lt;code&gt;std::list&lt;/code&gt; のようなコンテナを扱うときは &lt;code&gt;fast_pool_allocator&lt;/code&gt; を、&lt;code&gt;std::vector&lt;/code&gt; のようなコンテナを扱うときは &lt;code&gt;pool_allocator&lt;/code&gt; を使うとよい。&lt;/p&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::pool_allocator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::pool_allocator_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::fast_pool_allocator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::fast_pool_allocator_tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/pool_alloc.html&#34;&gt;実装の詳細&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>単純分離記憶域 -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/simple_segregated_storage.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/simple_segregated_storage.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;単純分離記憶域&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;simple_segregated_storage.hpp&lt;/code&gt; はメモリーチャンクの&lt;em&gt;フリーリスト&lt;/em&gt;へのアクセスを管理するテンプレートクラス &lt;code&gt;simple_segregated_storage&lt;/code&gt; を提供する。
これは&lt;strong&gt;極めて&lt;/strong&gt;単純なクラスであり、ほとんどすべての機能に事前条件があることに注意してほしい。
それは最速最小ですぐ使えるメモリアロケータとなることを狙っている。
--例えば組み込みシステムで使われるような。
このクラスは多くの難しい事前条件(すなわちアラインメント問題である)をユーザーの代わりに処理する。
さらに多くの用法については&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;他のプールインタフェイス&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;simple_segregated_storage&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SizeType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simple_segregated_storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;segregate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;npartition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;npartition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add_ordered_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;npartition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partition_sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;simple_segregated_storage&amp;lt;SizeType&amp;gt;&lt;/code&gt;型のオブジェクトは、それのフリーリストが空ならば&lt;em&gt;空(empty)&lt;/em&gt;である。
オブジェクトが空でないとき、そのフリーリストが順序付けされているならば&lt;em&gt;順序付けされている(ordered)&lt;/em&gt;。
フリーリストは &lt;code&gt;malloc()&lt;/code&gt;の繰り返し呼び出しが、&lt;code&gt;std::less&amp;lt;void *&amp;gt;&lt;/code&gt;で定義される、単調増加列の値に帰着するならば、順序付けされている。
メンバー関数は、フリーリストの順序付けられた傾向を維持するならば&lt;em&gt;順序付け維持(order-preserving)&lt;/em&gt;である。
(すなわち順序付けられたフリーリストは、そのメンバー関数の呼出し後も順序付けられている。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table:Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;simple_segregated_storage&amp;lt;SizeType&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Store&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const Store&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;block, chunk, end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;partition_sz, sz, n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Store::size_type&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:テンプレートパラメータ&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;既定値&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SizeType&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::size_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号無し整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Typedefs&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SizeType&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Constructors, Destructors, and State&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;事後条件&lt;/th&gt;
&lt;th&gt;注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Store()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新しい &lt;code&gt;Store&lt;/code&gt; を構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&amp;amp;t)-&amp;gt;~Store()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;not used&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Store&lt;/code&gt; を破棄する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt; が空のとき &lt;code&gt;true&lt;/code&gt; を返す。順序付け維持(Order-preserving)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Segregation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;事前条件&lt;/th&gt;
&lt;th&gt;事後条件&lt;/th&gt;
&lt;th&gt;意味的同値&lt;/th&gt;
&lt;th&gt;注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Store::segregate(block, sz, partition_sz, end)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;partition_sz &amp;gt;= sizeof(void *)&lt;/code&gt; &lt;br /&gt; &lt;code&gt;partition_sz = sizeof(void *) * i&lt;/code&gt; となる整数&lt;code&gt;i&lt;/code&gt;が存在する。&lt;br /&gt; &lt;code&gt;sz &amp;gt;= partition_sz&lt;/code&gt; &lt;br /&gt; &lt;code&gt;block&lt;/code&gt; はサイズが&lt;code&gt;partition_sz&lt;/code&gt;であるオブジェクトの配列に適切に整列している。 &lt;br /&gt; &lt;code&gt;block&lt;/code&gt; は&lt;code&gt;void *&lt;/code&gt;の配列に適切に整列している。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;block&lt;/code&gt;によって指定された&lt;code&gt;sz&lt;/code&gt;バイトのメモリーブロック全体を通してフリーリストをインターリーブする、そのさい可能な限り多くの&lt;code&gt;partition_sz&lt;/code&gt;-サイズのチャンクに分割する。最後のチャンクは&lt;code&gt;end&lt;/code&gt;を指すようにセットされ、最初のチャンクへのポインタが返される(これはいつも&lt;code&gt;block&lt;/code&gt;に等しい)。 のインターリーブされたフリーリストは順序付けされている。O(sz)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Store::segregate(block, sz, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as above&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Store::segregate(block, sz, partition_sz, 0)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.add_block(block, sz, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as above&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;block&lt;/code&gt;によって指定された&lt;code&gt;sz&lt;/code&gt;バイトのメモリーブロックを&lt;code&gt;partition_sz&lt;/code&gt;サイズのチャンクに分割し(segregate)、そのフリーリストを自分自身のフリーリストに加える。呼び出し前に&lt;code&gt;t&lt;/code&gt; が空のとき、呼出し後は順序付けられている。O(sz)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.add_ordered_block(block, sz, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as above&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;block&lt;/code&gt;によって指定された&lt;code&gt;sz&lt;/code&gt;バイトのメモリーブロックを&lt;code&gt;partition_sz&lt;/code&gt;サイズのチャンクに分離させ(segregate)、そのフリーリストを自分自身のフリーリストとマージする。 順序付け維持(Order-preserving)である。 O(sz)。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table:Allocation and Deallocation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;事前条件&lt;/th&gt;
&lt;th&gt;事後条件&lt;/th&gt;
&lt;th&gt;意味的同値&lt;/th&gt;
&lt;th&gt;注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;フリーリストから、存在する最初のチャンクを取り出し返す。順序付け維持(Order-preserving)である。O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; was previously returned from a call to &lt;code&gt;t.malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;をフリーリスト中へ戻す。&lt;code&gt;chunk&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;であってはならない。O(1)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as above&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;をフリーリスト中へ戻す。&lt;code&gt;chunk&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;であってはならない。フリーリストのサイズによりO(N)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.malloc_n(n, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;partition_sz&lt;/code&gt;サイズの連続したチャンク&lt;code&gt;n&lt;/code&gt;個を発見しようと企てる。見つかれば、それらをすべてフリーリストから取り除き、それらの先頭へのポインタを返す。見つからなければ、&lt;code&gt;0&lt;/code&gt;を返す。(必須ではないが)フリーリストは順序づけられていることが強く推奨される。このアルゴリズムは、フリーリストがうまく連続していなければ失敗するからである。順序付け維持(Order-preserving)である。フリーリストのサイズにより O(N)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.free_n(chunk, n, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt; was previously returned from a call to &lt;code&gt;t.malloc_n(n, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!t.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;t.add_block(chunk, n * partition_sz, partition_sz)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;は実際に &lt;code&gt;n * partition_sz&lt;/code&gt;バイトにわたるチャンクのブロックを参照していることを前提に、分離しブロックに加える。&lt;code&gt;chunk&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;であってはならない。O(n)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t.ordered_free_n(chunk, n, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;same as above&lt;/td&gt;
&lt;td&gt;same as above&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t.add_ordered_block(chunk, n * partition_sz, partition_sz)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上記と同じ。ただしフリーリストにマージする。順序付け維持(Order-preserving)である。NをフリーリストのサイズとしてO(N + n)。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::simple_segregated_storage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/simple_segregated_storage.html&#34;&gt;実装の詳細&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Singleton Pool -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/singleton_pool.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/singleton_pool.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Singleton Pool&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;singleton_pool.hpp&lt;/code&gt; はテンプレートクラス &lt;code&gt;singleton_pool&lt;/code&gt; を提供している。
そのクラスはシングルトンオブジェクトとしての &lt;code&gt;pool&lt;/code&gt; へのアクセスを提供している。
他のpool-ベースのインターフェースについての情報は、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces.html&#34;&gt;他の pool インタフェース&lt;/a&gt;を見よ。&lt;/p&gt;
&lt;h2&gt;梗概&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestedSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;singleton_pool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_allocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UserAllocator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requested_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RequestedSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// exposition only!&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;singleton_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ordered_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;release_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;purge_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;注意事項&lt;/h2&gt;
&lt;p&gt;静的関数によって参照されている、基底となっている pool &lt;code&gt;p&lt;/code&gt; は、実際には次のように宣言されている。&lt;/p&gt;
&lt;p&gt;-- &lt;code&gt;main()&lt;/code&gt; の開始前および &lt;code&gt;main()&lt;/code&gt; の終了後はただひとつのスレッドのみが走っているなら、スレッドセーフである。
    &lt;code&gt;singleton_pool&lt;/code&gt; のすべての静的関数は &lt;code&gt;p&lt;/code&gt; へのアクセスを同期する。
-- 使用前に構築済みであることが保証されている。それゆえ、上の梗概での単純な静的オブジェクトは実際には不正な実装である。
    これを保証する、実際の&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;実装&lt;/a&gt;はもっと込み入ったものである。&lt;/p&gt;
&lt;p&gt;別々の、基底となっている pool &lt;code&gt;p&lt;/code&gt; は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;実装に特定のもの&lt;/a&gt;を含めて、テンプレートパラメーターの組み合わせ毎に存在することに注意せよ。&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ&lt;/h2&gt;
&lt;h3&gt;Tag&lt;/h3&gt;
&lt;p&gt;テンプレートパラメータ &lt;code&gt;Tag&lt;/code&gt; を区別することによって、別々の束縛されないシングルトンプールが存在できる。
一例として &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool_alloc.html&#34;&gt;pool allocators&lt;/a&gt; は、2つの異なるアロケーター型が、同じ基底となっているシングルトンプールを共有することが決して起きないように、2つのタグを使用している。&lt;/p&gt;
&lt;p&gt;実際には&lt;code&gt;Tag&lt;/code&gt;が&lt;code&gt;singleton_pool&lt;/code&gt;によって何かに使用されることはない。&lt;/p&gt;
&lt;h3&gt;RequestedSize&lt;/h3&gt;
&lt;p&gt;割り当てられるメモリーチャンクの要求サイズ。
これはコンストラクタパラメーターとして、基底となる &lt;code&gt;pool&lt;/code&gt; に渡される。
0より大きいこと。&lt;/p&gt;
&lt;h3&gt;UserAllocator&lt;/h3&gt;
&lt;p&gt;基底となる &lt;code&gt;pool&lt;/code&gt; が、システムからメモリーを割り当てるために使用するメソッドを定義する。
詳細は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html&#34;&gt;User Allocators&lt;/a&gt; を見よ。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;singleton_pool&amp;lt;Tag, RequestedSize, UserAllocator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chunk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;value of type &lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Typedefs/Static Const Values&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;th&gt;Type/Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::tag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tag&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::user_allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pool&amp;lt;UserAllocator&amp;gt;::size_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pool&amp;lt;UserAllocator&amp;gt;::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::requested_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RequestedSize&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;意味的同値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::is_from(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.is_from(chunk);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::malloc()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.malloc();&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::ordered_malloc(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.ordered_malloc(n);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.free(chunk);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::ordered_free(chunk)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.ordered_free(chunk);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::free(chunk, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.free(chunk, n);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::ordered_free(chunk, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.ordered_free(chunk, n);&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::release_memory()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.release_memory();&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::purge_memory()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SingletonPool::p.purge_memory();&lt;/code&gt; synchronized&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらの関数についてより詳しい情報は、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;pool interface&lt;/a&gt; を見よ。&lt;/p&gt;
&lt;h2&gt;Symbols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::singleton_pool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/implementation/singleton_pool.html&#34;&gt;Implementation Details&lt;/a&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>User Allocators -- Boost.Poolの翻訳ドキュメントを移植</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/user_allocator.html"/>
      <id>118e764fc9084768027700c3c881741ad1585250:archive/boost_docs/libs/pool/interfaces/user_allocator.md</id>
      <updated>2017-12-02T01:27:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;User Allocators&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Pool オブジェクトはシステムにメモリーブロックを要求する必要があり、それを Pool はユーザーに割り当てるチャンクに分割する。
様々な Pool インターフェースに対し、テンプレートパラメータである &lt;code&gt;UserAllocator&lt;/code&gt; を指定することで、ユーザーはそれらのシステムメモリーブロックがどのように割り当てられるかを管理することができる。&lt;/p&gt;
&lt;h2&gt;意味&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Symbol Table&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーアロケーター型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;block&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char *&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::size_type&lt;/code&gt; 型の値&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Typedefs&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケートされる最大オブジェクトのサイズを表現しうる符号無し整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の2つのポインタの差を表現しうる符号付整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Allocation and Deallocation&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り型&lt;/th&gt;
&lt;th&gt;事前条件/注意事項&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::malloc(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char *&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムから &lt;code&gt;n&lt;/code&gt; バイトを割り当てようとする。メモリー枯渇時には0を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAllocator::free(block)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;block block&lt;/code&gt; は以前に &lt;code&gt;UserAllocator::malloc&lt;/code&gt; への呼び出しから返されたものでなくてはならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;提供されている実装&lt;/h2&gt;
&lt;p&gt;2つの &lt;code&gt;UserAllocator&lt;/code&gt; クラスが提供されている。
両者とも &lt;code&gt;pool.hpp&lt;/code&gt; の中にある(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/interfaces/pool.html&#34;&gt;pool&lt;/a&gt; を参照)。
テンプレートパラメータ &lt;code&gt;UserAllocator&lt;/code&gt; のデフォルト値は常に &lt;code&gt;default_user_allocator_new_delete&lt;/code&gt; である。&lt;/p&gt;
&lt;h3&gt;梗概&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_new_delete&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nothrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_user_allocator_malloc_free&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright (c) 2000, 2001 Stephen Cleary (&lt;a href=&#34;mailto:shammah@voyager.net&#34;&gt;shammah@voyager.net&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This file can be redistributed and/or modified under the terms found in &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/pool/copyright.html&#34;&gt;copyright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This software and its documentation is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
</feed>