<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-05-31T23:04:17.017262</updated>
  <id>d16b7e05-615a-4b1c-86b0-bac4ea87af6a</id>

  
    <entry>
      <title>Boost Preprocessor Library -- Boost.Preprocessorの翻訳ドキュメント修正</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html"/>
      <id>8178bba3c688635bf48ac6f8d670ec104ebd96f8:archive/boost_docs/libs/preprocessor.md</id>
      <updated>2017-05-07T00:32:53+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost Preprocessor Library&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;Topics&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html&#34;&gt;動機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/problems.html&#34;&gt;プリプロセッサに関する既知の問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html&#34;&gt;テクニック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/incompatible.html&#34;&gt;非互換性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/reentrancy.html&#34;&gt;reentrancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/local_iteration.html&#34;&gt;local iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/file_iteration.html&#34;&gt;file iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/evaluated_slots.html&#34;&gt;evaluated slots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminology&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/evaluated.html&#34;&gt;evaluated parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/named_external.html&#34;&gt;named external argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Types&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/arrays.html&#34;&gt;arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/lists.html&#34;&gt;lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/sequences.html&#34;&gt;sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/tuples.html&#34;&gt;tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add.html&#34;&gt;ADD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;ADD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/and.html&#34;&gt;AND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/apply.html&#34;&gt;APPLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_data.html&#34;&gt;ARRAY_DATA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_elem.html&#34;&gt;ARRAY_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_size.html&#34;&gt;ARRAY_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert.html&#34;&gt;ASSERT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert_msg.html&#34;&gt;ASSERT_MSG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;ASSIGN_SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitand.html&#34;&gt;BITAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitnor.html&#34;&gt;BITNOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitor.html&#34;&gt;BITOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitxor.html&#34;&gt;BITXOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bool.html&#34;&gt;BOOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma.html&#34;&gt;COMMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;COMMA_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/compl.html&#34;&gt;COMPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;DEC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_d.html&#34;&gt;DEDUCE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_r.html&#34;&gt;DEDUCE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_z.html&#34;&gt;DEDUCE_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div.html&#34;&gt;DIV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div_d.html&#34;&gt;DIV_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/empty.html&#34;&gt;EMPTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum.html&#34;&gt;ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params.html&#34;&gt;ENUM_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params_z.html&#34;&gt;ENUM_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params.html&#34;&gt;ENUM_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_a_default.html&#34;&gt;ENUM_PARAMS_WITH_A_DEFAULT*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_defaults.html&#34;&gt;ENUM_PARAMS_WITH_DEFAULTS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_z.html&#34;&gt;ENUM_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted.html&#34;&gt;ENUM_SHIFTED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params.html&#34;&gt;ENUM_SHIFTED_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params_z.html&#34;&gt;ENUM_SHIFTED_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_z.html&#34;&gt;ENUM_SHIFTED_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing.html&#34;&gt;ENUM_TRAILING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params_z.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params.html&#34;&gt;ENUM_TRAILING_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params_z.html&#34;&gt;ENUM_TRAILING_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_z.html&#34;&gt;ENUM_TRAILING_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_z.html&#34;&gt;ENUM_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal.html&#34;&gt;EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal_d.html&#34;&gt;EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expand.html&#34;&gt;EXPAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_if.html&#34;&gt;EXPR_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_iif.html&#34;&gt;EXPR_IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/filename_x.html&#34;&gt;FILENAME_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for_r.html&#34;&gt;FOR_&lt;em&gt;r&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_finish.html&#34;&gt;FRAME_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_flags.html&#34;&gt;FRAME_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_iteration.html&#34;&gt;FRAME_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_start.html&#34;&gt;FRAME_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater.html&#34;&gt;GREATER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_d.html&#34;&gt;GREATER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal.html&#34;&gt;GREATER_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal_d.html&#34;&gt;GREATER_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/identity.html&#34;&gt;IDENTITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/if.html&#34;&gt;IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iif.html&#34;&gt;IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;INC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/include_self.html&#34;&gt;INCLUDE_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/indirect_self.html&#34;&gt;INDIRECT_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/intercept.html&#34;&gt;INTERCEPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;IS_ITERATING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_selfish.html&#34;&gt;IS_SELFISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;ITERATION_DEPTH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_finish.html&#34;&gt;ITERATION_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;ITERATION_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_limits.html&#34;&gt;ITERATION_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;ITERATION_PARAMS_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_start.html&#34;&gt;ITERATION_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;LESS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;LESS_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;LESS_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;LESS_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_dim.html&#34;&gt;LIMIT_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_for.html&#34;&gt;LIMIT_FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html&#34;&gt;LIMIT_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.html&#34;&gt;LIMIT_ITERATION_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;LIMIT_MAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;LIMIT_REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html&#34;&gt;LIMIT_SLOT_COUNT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.html&#34;&gt;LIMIT_SLOT_SIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;LIMIT_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_while.html&#34;&gt;LIMIT_WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html&#34;&gt;LINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html&#34;&gt;LIST_APPEND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;LIST_APPEND_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;LIST_AT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;LIST_AT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;LIST_CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;LIST_CAT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;LIST_CONS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;LIST_ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;LIST_ENUM_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;LIST_FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;LIST_FILTER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;LIST_FIRST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;LIST_FIRST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;LIST_FIRST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;LIST_FOLD_LEFT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html&#34;&gt;LIST_FOLD_LEFT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html&#34;&gt;LIST_FOLD_LEFT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;LIST_FOLD_LEFT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LIST_FOLD_LEFT_D*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;LIST_FOLD_RIGHT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.html&#34;&gt;LIST_FOLD_RIGHT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html&#34;&gt;LIST_FOLD_RIGHT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;LIST_FOLD_RIGHT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LIST_FOLD_RIGHT_D*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;LIST_FOR_EACH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;LIST_FOR_EACH_I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;LIST_FOR_EACH_I_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;LIST_FOR_EACH_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;LIST_IS_CONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;LIST_IS_NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;LIST_NIL*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;LIST_REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;LIST_REST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;LIST_REST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;LIST_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;LIST_REVERSE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;LIST_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;LIST_SIZE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;LIST_TO_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;LIST_TO_TUPLE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;LIST_TRANSFORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;LIST_TRANSFORM_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;LOCAL_ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;LOCAL_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;LOCAL_MACRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;LPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;LPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;MAX_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;MIN_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;MOD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;MOD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;MUL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;NOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;NOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;NOT_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;NOT_EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_finish.html&#34;&gt;RELATIVE_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_flags.html&#34;&gt;RELATIVE_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html&#34;&gt;RELATIVE_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_start.html&#34;&gt;RELATIVE_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html&#34;&gt;REPEAT_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html&#34;&gt;REPEAT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html&#34;&gt;REPEAT_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;REPEAT_FROM_TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html&#34;&gt;REPEAT_FROM_TO_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html&#34;&gt;REPEAT_FROM_TO_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html&#34;&gt;REPEAT_FROM_TO_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;REPEAT_FROM_TO_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;REPEAT_FROM_TO_D_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;REPEAT_FROM_TO_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;REPEAT_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;RPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;RPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html&#34;&gt;SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html&#34;&gt;STRINGIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;SUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;SUB_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html&#34;&gt;TUPLE_EAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;TUPLE_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html&#34;&gt;TUPLE_REM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html&#34;&gt;TUPLE_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html&#34;&gt;TUPLE_TO_LIST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html&#34;&gt;VALUE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;WHILE_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;XOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Headers&lt;ul&gt;
&lt;li&gt;../&lt;ul&gt;
&lt;li&gt;preprocessor.hpp&lt;/li&gt;
&lt;li&gt;arithmetic.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arithmetic/&lt;ul&gt;
&lt;li&gt;add.hpp&lt;/li&gt;
&lt;li&gt;dec.hpp&lt;/li&gt;
&lt;li&gt;div.hpp&lt;/li&gt;
&lt;li&gt;inc.hpp&lt;/li&gt;
&lt;li&gt;mod.hpp&lt;/li&gt;
&lt;li&gt;mul.hpp&lt;/li&gt;
&lt;li&gt;sub.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array.hpp&lt;/li&gt;
&lt;li&gt;array/&lt;ul&gt;
&lt;li&gt;data.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assert_msg.hpp*&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;comma.hpp*&lt;/li&gt;
&lt;li&gt;comma_if.hpp*&lt;/li&gt;
&lt;li&gt;comparison.hpp&lt;/li&gt;
&lt;li&gt;comparison/&lt;ul&gt;
&lt;li&gt;equal.hpp&lt;/li&gt;
&lt;li&gt;greater.hpp&lt;/li&gt;
&lt;li&gt;greater_equal.hpp&lt;/li&gt;
&lt;li&gt;less.hpp&lt;/li&gt;
&lt;li&gt;less_equal.hpp&lt;/li&gt;
&lt;li&gt;not_equal.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config/&lt;ul&gt;
&lt;li&gt;limits.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;control.hpp&lt;/li&gt;
&lt;li&gt;control/&lt;ul&gt;
&lt;li&gt;deduce_d.hpp&lt;/li&gt;
&lt;li&gt;expr_if.hpp&lt;/li&gt;
&lt;li&gt;expr_iif.hpp&lt;/li&gt;
&lt;li&gt;if.hpp&lt;/li&gt;
&lt;li&gt;iif.hpp&lt;/li&gt;
&lt;li&gt;while.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;debug.hpp&lt;/li&gt;
&lt;li&gt;debug/&lt;ul&gt;
&lt;li&gt;assert.hpp&lt;/li&gt;
&lt;li&gt;line.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dec.hpp*&lt;/li&gt;
&lt;li&gt;empty.hpp*&lt;/li&gt;
&lt;li&gt;enum.hpp*&lt;/li&gt;
&lt;li&gt;enum_params.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp*&lt;/li&gt;
&lt;li&gt;expand.hpp*&lt;/li&gt;
&lt;li&gt;expr_if.hpp*&lt;/li&gt;
&lt;li&gt;facilities.hpp&lt;/li&gt;
&lt;li&gt;facilities/&lt;ul&gt;
&lt;li&gt;apply.hpp&lt;/li&gt;
&lt;li&gt;empty.hpp&lt;/li&gt;
&lt;li&gt;expand.hpp&lt;/li&gt;
&lt;li&gt;identity.hpp&lt;/li&gt;
&lt;li&gt;intercept.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for.hpp*&lt;/li&gt;
&lt;li&gt;identity.hpp*&lt;/li&gt;
&lt;li&gt;if.hpp*&lt;/li&gt;
&lt;li&gt;inc.hpp*&lt;/li&gt;
&lt;li&gt;iterate.hpp*&lt;/li&gt;
&lt;li&gt;iteration.hpp&lt;/li&gt;
&lt;li&gt;iteration/&lt;ul&gt;
&lt;li&gt;iterate.hpp&lt;/li&gt;
&lt;li&gt;local.hpp&lt;/li&gt;
&lt;li&gt;self.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;library.hpp&lt;/li&gt;
&lt;li&gt;limits.hpp*&lt;/li&gt;
&lt;li&gt;list.hpp&lt;/li&gt;
&lt;li&gt;list/&lt;ul&gt;
&lt;li&gt;adt.hpp&lt;/li&gt;
&lt;li&gt;append.hpp&lt;/li&gt;
&lt;li&gt;at.hpp&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical.hpp&lt;/li&gt;
&lt;li&gt;logical/&lt;ul&gt;
&lt;li&gt;and.hpp&lt;/li&gt;
&lt;li&gt;bitand.hpp&lt;/li&gt;
&lt;li&gt;bitnor.hpp&lt;/li&gt;
&lt;li&gt;bitor.hpp&lt;/li&gt;
&lt;li&gt;bitxor.hpp&lt;/li&gt;
&lt;li&gt;bool.hpp&lt;/li&gt;
&lt;li&gt;compl.hpp&lt;/li&gt;
&lt;li&gt;nor.hpp&lt;/li&gt;
&lt;li&gt;not.hpp&lt;/li&gt;
&lt;li&gt;or.hpp&lt;/li&gt;
&lt;li&gt;xor.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max.hpp*&lt;/li&gt;
&lt;li&gt;min.hpp*&lt;/li&gt;
&lt;li&gt;punctuation.hpp&lt;/li&gt;
&lt;li&gt;punctuation/&lt;ul&gt;
&lt;li&gt;comma.hpp&lt;/li&gt;
&lt;li&gt;comma_if.hpp&lt;/li&gt;
&lt;li&gt;paren.hpp&lt;/li&gt;
&lt;li&gt;paren_if.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat.hpp*&lt;/li&gt;
&lt;li&gt;repeat_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repetition.hpp&lt;/li&gt;
&lt;li&gt;repetition/&lt;ul&gt;
&lt;li&gt;deduce_r.hpp&lt;/li&gt;
&lt;li&gt;deduce_z.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;enum_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_params.hpp&lt;/li&gt;
&lt;li&gt;for.hpp&lt;/li&gt;
&lt;li&gt;repeat.hpp&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;selection.hpp&lt;/li&gt;
&lt;li&gt;selection/&lt;ul&gt;
&lt;li&gt;max.hpp&lt;/li&gt;
&lt;li&gt;min.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;seq/&lt;ul&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;subseq.hpp&lt;/li&gt;
&lt;li&gt;to_array.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;li&gt;slot/&lt;ul&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tuple.hpp&lt;/li&gt;
&lt;li&gt;tuple/&lt;ul&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;eat.hpp&lt;/li&gt;
&lt;li&gt;rem.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;to_list.hpp&lt;/li&gt;
&lt;li&gt;to_seq.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stringize.hpp&lt;/li&gt;
&lt;li&gt;while.hpp*&lt;/li&gt;
&lt;li&gt;wstringize.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;array_arithmetic.c&lt;/li&gt;
&lt;li&gt;catch_builtin.cpp&lt;/li&gt;
&lt;li&gt;delay.c&lt;/li&gt;
&lt;li&gt;duffs_device.c&lt;/li&gt;
&lt;li&gt;is_integral.cpp&lt;/li&gt;
&lt;li&gt;linear_fib.c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellanea&lt;ul&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;acknowledgements&lt;/li&gt;
&lt;li&gt;bibliography&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Preprocessor Library -- Boost.Preprocessorの翻訳ドキュメントを移植（完了） #17</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html"/>
      <id>9508ca477f5bf444087ffda77e0ec5f4456a5ea4:archive/boost_docs/libs/preprocessor.md</id>
      <updated>2017-05-07T00:04:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost Preprocessor Library&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;Topics&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html&#34;&gt;動機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/problems.html&#34;&gt;プリプロセッサに関する既知の問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html&#34;&gt;テクニック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/incompatible.html&#34;&gt;非互換性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/reentrancy.html&#34;&gt;reentrancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/local_iteration.html&#34;&gt;local iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/file_iteration.html&#34;&gt;file iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/evaluated_slots.html&#34;&gt;evaluated slots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminology&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/evaluated.html&#34;&gt;evaluated parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/named_external.html&#34;&gt;named external argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Types&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/arrays.html&#34;&gt;arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/lists.html&#34;&gt;lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/sequences.html&#34;&gt;sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/tuples.html&#34;&gt;tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add.html&#34;&gt;ADD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;ADD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/and.html&#34;&gt;AND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/apply.html&#34;&gt;APPLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_data.html&#34;&gt;ARRAY_DATA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_elem.html&#34;&gt;ARRAY_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_size.html&#34;&gt;ARRAY_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert.html&#34;&gt;ASSERT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert_msg.html&#34;&gt;ASSERT_MSG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;ASSIGN_SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitand.html&#34;&gt;BITAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitnor.html&#34;&gt;BITNOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitor.html&#34;&gt;BITOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitxor.html&#34;&gt;BITXOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bool.html&#34;&gt;BOOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma.html&#34;&gt;COMMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;COMMA_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/compl.html&#34;&gt;COMPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;DEC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_d.html&#34;&gt;DEDUCE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_r.html&#34;&gt;DEDUCE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_z.html&#34;&gt;DEDUCE_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div.html&#34;&gt;DIV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div_d.html&#34;&gt;DIV_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/empty.html&#34;&gt;EMPTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum.html&#34;&gt;ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params.html&#34;&gt;ENUM_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params_z.html&#34;&gt;ENUM_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params.html&#34;&gt;ENUM_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_a_default.html&#34;&gt;ENUM_PARAMS_WITH_A_DEFAULT*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_defaults.html&#34;&gt;ENUM_PARAMS_WITH_DEFAULTS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_z.html&#34;&gt;ENUM_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted.html&#34;&gt;ENUM_SHIFTED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params.html&#34;&gt;ENUM_SHIFTED_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params_z.html&#34;&gt;ENUM_SHIFTED_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_z.html&#34;&gt;ENUM_SHIFTED_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing.html&#34;&gt;ENUM_TRAILING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params_z.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params.html&#34;&gt;ENUM_TRAILING_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params_z.html&#34;&gt;ENUM_TRAILING_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_z.html&#34;&gt;ENUM_TRAILING_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_z.html&#34;&gt;ENUM_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal.html&#34;&gt;EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal_d.html&#34;&gt;EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expand.html&#34;&gt;EXPAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_if.html&#34;&gt;EXPR_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_iif.html&#34;&gt;EXPR_IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/filename_x.html&#34;&gt;FILENAME_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for_r.html&#34;&gt;FOR_&lt;em&gt;r&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_finish.html&#34;&gt;FRAME_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_flags.html&#34;&gt;FRAME_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_iteration.html&#34;&gt;FRAME_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_start.html&#34;&gt;FRAME_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater.html&#34;&gt;GREATER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_d.html&#34;&gt;GREATER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal.html&#34;&gt;GREATER_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal_d.html&#34;&gt;GREATER_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/identity.html&#34;&gt;IDENTITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/if.html&#34;&gt;IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iif.html&#34;&gt;IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;INC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/include_self.html&#34;&gt;INCLUDE_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/indirect_self.html&#34;&gt;INDIRECT_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/intercept.html&#34;&gt;INTERCEPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;IS_ITERATING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_selfish.html&#34;&gt;IS_SELFISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;ITERATION_DEPTH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_finish.html&#34;&gt;ITERATION_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;ITERATION_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_limits.html&#34;&gt;ITERATION_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;ITERATION_PARAMS_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_start.html&#34;&gt;ITERATION_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;LESS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;LESS_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;LESS_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;LESS_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_dim.html&#34;&gt;LIMIT_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_for.html&#34;&gt;LIMIT_FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html&#34;&gt;LIMIT_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.html&#34;&gt;LIMIT_ITERATION_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;LIMIT_MAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;LIMIT_REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html&#34;&gt;LIMIT_SLOT_COUNT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.html&#34;&gt;LIMIT_SLOT_SIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;LIMIT_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_while.html&#34;&gt;LIMIT_WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html&#34;&gt;LINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html&#34;&gt;LIST_APPEND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;LIST_APPEND_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;LIST_AT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;LIST_AT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;LIST_CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;LIST_CAT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;LIST_CONS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;LIST_ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;LIST_ENUM_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;LIST_FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;LIST_FILTER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;LIST_FIRST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;LIST_FIRST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;LIST_FIRST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;LIST_FOLD_LEFT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html&#34;&gt;LIST_FOLD_LEFT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html&#34;&gt;LIST_FOLD_LEFT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;LIST_FOLD_LEFT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d_old.html&#34;&gt;LIST_FOLD_LEFT_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;LIST_FOLD_RIGHT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.html&#34;&gt;LIST_FOLD_RIGHT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html&#34;&gt;LIST_FOLD_RIGHT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;LIST_FOLD_RIGHT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d_old.html&#34;&gt;LIST_FOLD_RIGHT_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;LIST_FOR_EACH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;LIST_FOR_EACH_I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;LIST_FOR_EACH_I_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;LIST_FOR_EACH_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;LIST_IS_CONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;LIST_IS_NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;LIST_NIL*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;LIST_REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;LIST_REST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;LIST_REST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;LIST_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;LIST_REVERSE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;LIST_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;LIST_SIZE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;LIST_TO_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;LIST_TO_TUPLE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;LIST_TRANSFORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;LIST_TRANSFORM_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;LOCAL_ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;LOCAL_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;LOCAL_MACRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;LPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;LPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;MAX_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;MIN_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;MOD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;MOD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;MUL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;NOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;NOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;NOT_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;NOT_EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_finish.html&#34;&gt;RELATIVE_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_flags.html&#34;&gt;RELATIVE_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html&#34;&gt;RELATIVE_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_start.html&#34;&gt;RELATIVE_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html&#34;&gt;REPEAT_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html&#34;&gt;REPEAT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html&#34;&gt;REPEAT_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;REPEAT_FROM_TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html&#34;&gt;REPEAT_FROM_TO_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html&#34;&gt;REPEAT_FROM_TO_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html&#34;&gt;REPEAT_FROM_TO_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;REPEAT_FROM_TO_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;REPEAT_FROM_TO_D_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;REPEAT_FROM_TO_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;REPEAT_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;RPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;RPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html&#34;&gt;SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html&#34;&gt;STRINGIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;SUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;SUB_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html&#34;&gt;TUPLE_EAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;TUPLE_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html&#34;&gt;TUPLE_REM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html&#34;&gt;TUPLE_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html&#34;&gt;TUPLE_TO_LIST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html&#34;&gt;VALUE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;WHILE_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;XOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Headers&lt;ul&gt;
&lt;li&gt;../&lt;ul&gt;
&lt;li&gt;preprocessor.hpp&lt;/li&gt;
&lt;li&gt;arithmetic.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arithmetic/&lt;ul&gt;
&lt;li&gt;add.hpp&lt;/li&gt;
&lt;li&gt;dec.hpp&lt;/li&gt;
&lt;li&gt;div.hpp&lt;/li&gt;
&lt;li&gt;inc.hpp&lt;/li&gt;
&lt;li&gt;mod.hpp&lt;/li&gt;
&lt;li&gt;mul.hpp&lt;/li&gt;
&lt;li&gt;sub.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array.hpp&lt;/li&gt;
&lt;li&gt;array/&lt;ul&gt;
&lt;li&gt;data.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assert_msg.hpp*&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;comma.hpp*&lt;/li&gt;
&lt;li&gt;comma_if.hpp*&lt;/li&gt;
&lt;li&gt;comparison.hpp&lt;/li&gt;
&lt;li&gt;comparison/&lt;ul&gt;
&lt;li&gt;equal.hpp&lt;/li&gt;
&lt;li&gt;greater.hpp&lt;/li&gt;
&lt;li&gt;greater_equal.hpp&lt;/li&gt;
&lt;li&gt;less.hpp&lt;/li&gt;
&lt;li&gt;less_equal.hpp&lt;/li&gt;
&lt;li&gt;not_equal.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config/&lt;ul&gt;
&lt;li&gt;limits.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;control.hpp&lt;/li&gt;
&lt;li&gt;control/&lt;ul&gt;
&lt;li&gt;deduce_d.hpp&lt;/li&gt;
&lt;li&gt;expr_if.hpp&lt;/li&gt;
&lt;li&gt;expr_iif.hpp&lt;/li&gt;
&lt;li&gt;if.hpp&lt;/li&gt;
&lt;li&gt;iif.hpp&lt;/li&gt;
&lt;li&gt;while.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;debug.hpp&lt;/li&gt;
&lt;li&gt;debug/&lt;ul&gt;
&lt;li&gt;assert.hpp&lt;/li&gt;
&lt;li&gt;line.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dec.hpp*&lt;/li&gt;
&lt;li&gt;empty.hpp*&lt;/li&gt;
&lt;li&gt;enum.hpp*&lt;/li&gt;
&lt;li&gt;enum_params.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp*&lt;/li&gt;
&lt;li&gt;expand.hpp*&lt;/li&gt;
&lt;li&gt;expr_if.hpp*&lt;/li&gt;
&lt;li&gt;facilities.hpp&lt;/li&gt;
&lt;li&gt;facilities/&lt;ul&gt;
&lt;li&gt;apply.hpp&lt;/li&gt;
&lt;li&gt;empty.hpp&lt;/li&gt;
&lt;li&gt;expand.hpp&lt;/li&gt;
&lt;li&gt;identity.hpp&lt;/li&gt;
&lt;li&gt;intercept.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for.hpp*&lt;/li&gt;
&lt;li&gt;identity.hpp*&lt;/li&gt;
&lt;li&gt;if.hpp*&lt;/li&gt;
&lt;li&gt;inc.hpp*&lt;/li&gt;
&lt;li&gt;iterate.hpp*&lt;/li&gt;
&lt;li&gt;iteration.hpp&lt;/li&gt;
&lt;li&gt;iteration/&lt;ul&gt;
&lt;li&gt;iterate.hpp&lt;/li&gt;
&lt;li&gt;local.hpp&lt;/li&gt;
&lt;li&gt;self.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;library.hpp&lt;/li&gt;
&lt;li&gt;limits.hpp*&lt;/li&gt;
&lt;li&gt;list.hpp&lt;/li&gt;
&lt;li&gt;list/&lt;ul&gt;
&lt;li&gt;adt.hpp&lt;/li&gt;
&lt;li&gt;append.hpp&lt;/li&gt;
&lt;li&gt;at.hpp&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical.hpp&lt;/li&gt;
&lt;li&gt;logical/&lt;ul&gt;
&lt;li&gt;and.hpp&lt;/li&gt;
&lt;li&gt;bitand.hpp&lt;/li&gt;
&lt;li&gt;bitnor.hpp&lt;/li&gt;
&lt;li&gt;bitor.hpp&lt;/li&gt;
&lt;li&gt;bitxor.hpp&lt;/li&gt;
&lt;li&gt;bool.hpp&lt;/li&gt;
&lt;li&gt;compl.hpp&lt;/li&gt;
&lt;li&gt;nor.hpp&lt;/li&gt;
&lt;li&gt;not.hpp&lt;/li&gt;
&lt;li&gt;or.hpp&lt;/li&gt;
&lt;li&gt;xor.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max.hpp*&lt;/li&gt;
&lt;li&gt;min.hpp*&lt;/li&gt;
&lt;li&gt;punctuation.hpp&lt;/li&gt;
&lt;li&gt;punctuation/&lt;ul&gt;
&lt;li&gt;comma.hpp&lt;/li&gt;
&lt;li&gt;comma_if.hpp&lt;/li&gt;
&lt;li&gt;paren.hpp&lt;/li&gt;
&lt;li&gt;paren_if.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat.hpp*&lt;/li&gt;
&lt;li&gt;repeat_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repetition.hpp&lt;/li&gt;
&lt;li&gt;repetition/&lt;ul&gt;
&lt;li&gt;deduce_r.hpp&lt;/li&gt;
&lt;li&gt;deduce_z.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;enum_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_params.hpp&lt;/li&gt;
&lt;li&gt;for.hpp&lt;/li&gt;
&lt;li&gt;repeat.hpp&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;selection.hpp&lt;/li&gt;
&lt;li&gt;selection/&lt;ul&gt;
&lt;li&gt;max.hpp&lt;/li&gt;
&lt;li&gt;min.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;seq/&lt;ul&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;subseq.hpp&lt;/li&gt;
&lt;li&gt;to_array.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;li&gt;slot/&lt;ul&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tuple.hpp&lt;/li&gt;
&lt;li&gt;tuple/&lt;ul&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;eat.hpp&lt;/li&gt;
&lt;li&gt;rem.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;to_list.hpp&lt;/li&gt;
&lt;li&gt;to_seq.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stringize.hpp&lt;/li&gt;
&lt;li&gt;while.hpp*&lt;/li&gt;
&lt;li&gt;wstringize.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;array_arithmetic.c&lt;/li&gt;
&lt;li&gt;catch_builtin.cpp&lt;/li&gt;
&lt;li&gt;delay.c&lt;/li&gt;
&lt;li&gt;duffs_device.c&lt;/li&gt;
&lt;li&gt;is_integral.cpp&lt;/li&gt;
&lt;li&gt;linear_fib.c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellanea&lt;ul&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;acknowledgements&lt;/li&gt;
&lt;li&gt;bibliography&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LESS -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/less.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LESS&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LESS&lt;/code&gt; マクロは 2つの値の大きさを比較する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LESS_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;BOOST_PP_LESS_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/less.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;BOOST_PP_LESS&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 0 に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;BOOST_PP_LESS&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 1 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LESS_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/less_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LESS_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LESS_D&lt;/code&gt; マクロは 2つの値の大きさを比較する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LESS_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;BOOST_PP_LESS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/less.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, _, num) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;BOOST_PP_LESS_D&lt;/a&gt;(d, num, 3)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LESS_EQUAL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/less_equal.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LESS_EQUAL&lt;/code&gt; マクロは 2つの値の同等または大きさを比較する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいか等しいならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PPWHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LESS_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;BOOST_PP_LESS_EQUAL_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 0 に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 1 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LESS_EQUAL_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/less_equal_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LESS_EQUAL_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LESS_EQUAL&lt;/code&gt; マクロは 2つの値の同等または大きさを比較する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LESS_EQUAL_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいか等しいならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, _, num) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;BOOST_PP_LESS_EQUAL_D&lt;/a&gt;(d, num, 4)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1, (2, (3, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_DIM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_dim.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_dim.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_DIM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_DIM&lt;/code&gt; マクロは有効な &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の最大次元数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_DIM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;3&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_FOR -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_for.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_for.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_FOR&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_FOR&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の最大反復回数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_FOR&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;256&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_ITERATION -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_iteration.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_ITERATION&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_ITERATION&lt;/code&gt; マクロは &lt;em&gt;ローカル&lt;/em&gt; と &lt;em&gt;ファイル&lt;/em&gt; の最大反復回数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_ITERATION&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;256&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_ITERATION_DIM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_ITERATION_DIM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_ITERATION_DIM&lt;/code&gt; マクロは &lt;em&gt;ファイル反復&lt;/em&gt; の最大の深さを定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_ITERATION_DIM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;5&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_MAG -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_mag.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; マクロは算術における入力と結果の大きさの最大値を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;256&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_REPEAT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_repeat.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; マクロは各 &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の次元でサポートされる最大反復回数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;256&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_SLOT_COUNT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_slot_count.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_SLOT_COUNT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_SLOT_COUNT&lt;/code&gt; マクロは有効な &lt;em&gt;評価済みスロット&lt;/em&gt; 数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_SLOT_COUNT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;5&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_SLOT_SIG -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_SLOT_SIG&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_SLOT_SIG&lt;/code&gt; マクロは &lt;em&gt;スロット&lt;/em&gt; メカニズムで評価できる重要な10進数字の数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_SLOT_SIG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;10&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_TUPLE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_tuple.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; マクロはライブラリによりサポートされる &lt;em&gt;タプル&lt;/em&gt; の最大サイズを定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;25&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIMIT_WHILE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_while.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/limit_while.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIMIT_WHILE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIMIT_WHILE&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の最大反復回数を定義する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIMIT_WHILE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;現在、このマクロは &lt;code&gt;256&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/config/limits.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LINE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/line.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LINE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LINE&lt;/code&gt; マクロは前処理出力でライン指令として符号化された注意を配置する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#line BOOST_PP_LINE(line, file)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;line&lt;/code&gt; :
    追跡している行の新しい行番号。
    あらかじめ定義されているマクロ &lt;code&gt;__LINE__&lt;/code&gt; は 広く使用されている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;file&lt;/code&gt; :
    通常は現在のファイル名。
    しかし、どんな有益なテキストでも機能するだろう。
    このテキストは内部で文字列化されるので、引用符は不必要である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし、マクロ &lt;code&gt;BOOST_PP_CONFIG_EXTENDED_LINE_INFO&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; と定義され、かつ &lt;code&gt;file-iteration&lt;/code&gt; が進行中であるならば、このマクロは &lt;code&gt;file-iteration&lt;/code&gt; の状態に関するデバッギング情報を自動的に挿入するだろう。
この情報は最後に内部の最多の反復を備えたすべての現在の反復値を示すだろう。&lt;/p&gt;
&lt;p&gt;エラーが同じソーステキストにおいて複数の反復に及んでいるかもしれないとき、この情報は役に立つ。
エラーが少しもないのを探すことはときどき決して簡単でない。
このマクロの使用はより簡単にこれを作成するための情報を提供できる。
たとえば、このようないくつかのエラーを得る代わりに：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;s&#34;&gt;&#34;file.hpp&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;;&#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&#34;file.hpp&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;improperly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invocation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このようなものを得るかもしれない･･･。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;s&#34;&gt;&#34;file.hpp [1]&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;;&#34;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&#34;file.hpp [5]&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;improperly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invocation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このエラーが同じソーステキスト複数の反復に及んでいるということは、すぐに明らかになる。
もしそうでなければ、同じエラーが各反復に生じるだろう。&lt;/p&gt;
&lt;p&gt;しかしながら、いくつかのコンパイルは実際にファイルでないファイル名を受け付けないので、注意されるに違いない。
それらのコンパイラは概して悪いフィル名に関する警告を出す。
これは、デバッグするとき &lt;em&gt;だけ&lt;/em&gt; 単に &lt;code&gt;BOOST_PP_CONFIG_EXTENDED_LINE_INFO&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; と定義することをよい考えとする。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;BOOST_PP_CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/debug/line.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// sample.cpp&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#if !defined(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;BOOST_PP_IS_ITERATING&lt;/a&gt;)&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;BOOST_PP_CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arithmetic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;BOOST_PP_ITERATION_PARAMS_1&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;sample.cpp&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// sample&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html&#34;&gt;BOOST_PP_LINE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 余分な丸括弧&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 丸括弧が不足している&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_APPEND -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_append.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_APPEND&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_APPEND&lt;/code&gt; マクロは 2つの &lt;em&gt;リスト&lt;/em&gt; を追加する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_APPEND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; :
    1つ目の &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; :
    2つ目の &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは 2つのリストを追加する。
たとえば、もし &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;(1, (2, (3, BOOST_PP_NIL)))&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt; が &lt;code&gt;(4, (5, BOOST_PP_NIL))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開されるだろう。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_APPEND_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;BOOST_PP_LIST_APPEND_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/append.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/append.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_APPENDe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (a, (b, (c, (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_APPEND_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_append_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_APPEND_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_APPEND_D&lt;/code&gt; マクロは 2つの &lt;em&gt;リスト&lt;/em&gt; を追加する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_APPEND_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; :
    1つ目の &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; :
    2つ目の &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは 2つのリストを追加する。
たとえば、もし &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;(1, (2, (3, BOOST_PP_NIL)))&lt;/code&gt;、 &lt;code&gt;b&lt;/code&gt; が &lt;code&gt;(4, (5, BOOST_PP_NIL))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開されるだろう。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html&#34;&gt;BOOST_PP_LIST_APPEND&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/append.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/append.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (2, (3, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, state)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;BOOST_PP_LIST_APPEND_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 0, state), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 2, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 2, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST_MULTIPLY(c, list) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        3, 0, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;BOOST_PP_WHILE&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            PRED, OP, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;, c, list) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;LIST_MULTIPLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1, (2, (3, (1, (2, (3, (1, (2, (3, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))))))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_AT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_at.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_AT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_AT&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の中の要素を抽出する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_AT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。
    この &lt;em&gt;リスト&lt;/em&gt; は少なくとも &lt;code&gt;index + 1&lt;/code&gt; 個の要素を所持していなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt; :
    抽出される要素の &lt;em&gt;リスト&lt;/em&gt; の中の位置（起点は 0）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_AT_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;BOOST_PP_LIST_AT_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/at.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/at.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;BOOST_PP_LIST_AT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// a に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;BOOST_PP_LIST_AT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// c に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_AT_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_at_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_AT_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_AT_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の中の要素を抽出する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_AT_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。
    この &lt;em&gt;リスト&lt;/em&gt; は少なくとも &lt;code&gt;index + 1&lt;/code&gt; 個の要素を所持していなければならない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt; :
    抽出される要素の &lt;em&gt;リスト&lt;/em&gt; の中の位置（起点は 0）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;BOOST_PP_LIST_AT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/at.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/at.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (7, (2, (0, (1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;BOOST_PP_LIST_AT_D&lt;/a&gt;(d, state, 0)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(d, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;(state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;BOOST_PP_WHILE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (0, (1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_CAT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_cat.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_CAT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_CAT&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の中のすべての要素を連結する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_CAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が連結される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;要素は、インデックス &lt;code&gt;0&lt;/code&gt; で始まり、左から右へ連結される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_CAT_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;BOOST_PP_LIST_CAT_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/cat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/cat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;BOOST_PP_LIST_CAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// abc に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_CAT_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_cat_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_CAT_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;The &lt;code&gt;BOOST_PP_LIST_CAT_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の中のすべての要素を連結する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_CAT_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が連結される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;要素は、インデックス &lt;code&gt;0&lt;/code&gt; で始まり、左から右へ連結される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;BOOST_PP_LIST_CAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/cat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LISTS \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ((a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ((d, (e, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            ((e, (f, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;BOOST_PP_LIST_CAT_D&lt;/a&gt;(d, x))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LISTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// _abcdef に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_CONS -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_cons.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_CONS&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_CONS&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; コンストラクタである。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_CONS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;head&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt; の中の要素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tail&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt; 、または &lt;code&gt;BOOST_PP_LIST_NIL&lt;/code&gt;、または &lt;code&gt;BOOST_PP_NIL&lt;/code&gt; のどれか 1つ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは新しい先頭を既存の &lt;em&gt;リスト&lt;/em&gt; に追加するか、または &lt;code&gt;BOOST_PP_LIST_NIL&lt;/code&gt; から &lt;em&gt;リスト&lt;/em&gt; を作成する。&lt;/p&gt;
&lt;p&gt;このマクロはもはや必要でない。
たとえば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_CONS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_CONS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;は、次の明示的な書き方がある：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このために、このマクロは廃止された。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;BOOST_PP_LIST_NIL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OLD \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        a, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            b, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                c, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;BOOST_PP_LIST_NIL&lt;/a&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NEW (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// a == a に展開される&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) == (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_ENUM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_enum.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_ENUM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_ENUM&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; をカンマ区切りリストに変換する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_ENUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    変換される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を、このマクロは作成するだろう。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_ENUM_R&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;BOOST_PP_LIST_ENUM_R&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/enum.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/enum.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (w, (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;BOOST_PP_LIST_ENUM&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// w, x, y, z に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_ENUM_R -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_enum_r.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_ENUM_R&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_ENUM_R&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; をカンマ区切りリストに変換する。
これは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_ENUM_R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    変換される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を、このマクロは作成するだろう。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;BOOST_PP_LIST_ENUM&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/enum.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/for.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/enum.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, state) [ &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;BOOST_PP_LIST_ENUM_R&lt;/a&gt;(r, state) ]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;BOOST_PP_FOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [x, y, z] [y, z] [z] に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FILTER -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_filter.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FILTER&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FILTER&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; を与えられた基準に従ってフィルターする。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FILTER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; :
    &lt;code&gt;pred (d, data, elem )&lt;/code&gt; 形式の 3項述語。
    この述語は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および &lt;em&gt;リスト&lt;/em&gt; 中の現在の要素を伴い、&lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;BOOST_PP_LIST_FILTER&lt;/code&gt; によって展開される。
    このマクロは &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までの範囲の整数値を返さなければならない。
    もしこの述語が特定の要素で 0以外に展開されるならば、その要素は結果の &lt;em&gt;リスト&lt;/em&gt; に含まれるだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;pred&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    フィルターされる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;pred&lt;/code&gt; を展開する。
これは、&lt;code&gt;pred&lt;/code&gt; が 0以外を返す各要素から新しい &lt;em&gt;リスト&lt;/em&gt; を作成する。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FILTER_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;BOOST_PP_LIST_FILTER_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (3, (2, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, data, elem) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/a&gt;(elem, data)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1, (3, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FILTER_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_filter_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FILTER_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FILTER_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; を与えられた基準に従ってフィルターする。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FILTER_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; :
    &lt;code&gt;pred (d, data, elem )&lt;/code&gt; 形式の 3項述語。
    この述語は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および &lt;em&gt;リスト&lt;/em&gt; 中の現在の要素を伴い、&lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;BOOST_PP_LIST_FILTER&lt;/code&gt; によって展開される。
    このマクロは &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までの範囲の整数値を返さなければならない。
    もしこの述語が特定の要素で 0以外に展開されるならば、その要素は結果の &lt;em&gt;リスト&lt;/em&gt; に含まれるだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;pred&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    フィルターされる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;pred&lt;/code&gt; を展開する。
これは、&lt;code&gt;pred&lt;/code&gt; が 0以外を返す各要素から新しい &lt;em&gt;リスト&lt;/em&gt; を作成する。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/less_equal.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define A (1, (2, (3, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define B (A, (A, (A, (A, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, data, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;BOOST_PP_LESS_EQUAL&lt;/a&gt;(x, data)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;BOOST_PP_LIST_FILTER_D&lt;/a&gt;(d, PRED, 2, x), state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((1, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((1, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((1, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((1, (2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FIRST -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_first.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FIRST&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FIRST&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の先頭に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FIRST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    空でない &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OLD \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        a, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            b, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                c, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;BOOST_PP_LIST_NIL&lt;/a&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NEW (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// a == a に展開される&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) == (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FIRST_N -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_first_n.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FIRST_N&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FIRST_N&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の先頭から &lt;em&gt;count&lt;/em&gt; 個の要素の  &lt;em&gt;リスト&lt;/em&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FIRST_N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    抽出する要素数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; の先頭から &lt;em&gt;count&lt;/em&gt; 個の要素を抽出し、それらを &lt;em&gt;リスト&lt;/em&gt; として返す。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FIRST_N_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;BOOST_PP_LIST_FIRST_N_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/first_n.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/first_n.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;BOOST_PP_LIST_FIRST_N&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FIRST_N_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_first_n_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FIRST_N_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FIRST_N&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の先頭から &lt;em&gt;count&lt;/em&gt; 個の要素の  &lt;em&gt;リスト&lt;/em&gt; に展開される。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FIRST_N_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    抽出する要素数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; の先頭から &lt;em&gt;count&lt;/em&gt; 個の要素を抽出し、それらを &lt;em&gt;リスト&lt;/em&gt; として返す。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;BOOST_PP_LIST_FIRST_N&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/first_n.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/first_n.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;BOOST_PP_LIST_FIRST_N_D&lt;/a&gt;(d, 2, x), state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), ((a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) , &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt; )))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_LEFT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_left.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を左から右へ折りたたむ（または蓄積する）。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// _abc に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_LEFT_2ND -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_2ND&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を左から右へ折りたたむ（または蓄積する）。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは廃止された。
代わりに &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/code&gt; を使うべきだ。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// _abc に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_LEFT_2ND_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_2ND_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を左から右へ折りたたむ（または蓄積する）。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/code&gt; によって取って代わられており、廃止された。
これは &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; への再突入を 1回許可するだけである。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_2ND_D&lt;/a&gt;(d, OP_2, _, x), state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP_2(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    (_abc , (_abc , (_abc , &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_LEFT_d -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_LEFT_d&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を左から右へ折りたたむ（または蓄積する）。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT_&lt;/a&gt; ## d(OP_2, _, x), state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP_2(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    (_abc, (_abc, (_abc, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_RIGHT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_right.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を右から左へ折りたたむ（または蓄積する）。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは以前持っていたものと同じシグネチャを持っていない。
引数は &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; と同じインタフェースを提供するために変更された。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// _cba に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_RIGHT_2ND -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を右から左へ折りたたむ（または蓄積する）。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは以前持っていたものと同じシグネチャを持っていない。
引数は &lt;code&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/code&gt; と同じインタフェースを提供するために変更された。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは廃止された。
代わりに &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/code&gt; を使うべきだ。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, BOOST_PP_NIL)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) BOOST_PP_CAT(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// _cba に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_RIGHT_2ND_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を右から左へ折りたたむ（または蓄積する）。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/code&gt; によって取って代わられており、廃止された。
これは &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; への再突入を 1回許可するだけである。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_2ND_D&lt;/a&gt;(d, OP_2, _, x), state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP_2(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    (_cba , (_cba , (_cba , &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOLD_RIGHT_d -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT_d&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の要素を右から左へ折りたたむ（または蓄積する）。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, state, elem )&lt;/code&gt; 形式の 3項演算。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために呼び出される―毎回新しい &lt;em&gt;状態&lt;/em&gt; を返す。
    この演算は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、現在の &lt;em&gt;状態&lt;/em&gt; および現在の要素を伴い &lt;code&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    折りたたみの初期状態。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    折りたたまれる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;リスト&lt;/em&gt; &lt;code&gt;(0, (1, (2, BOOST_PP_NIL)))&lt;/code&gt; のために、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT_&lt;/a&gt; ## d(OP_2, _, x), state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP_2(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(state, x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    (_cba, (_cba, (_cba, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のためにマクロを繰り返す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, data, elem )&lt;/code&gt; 形式の 3項マクロ。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を伴い &lt;code&gt;BOOST_PP_LIST_FOR_EACH&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および現在の要素を伴い展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; が各要素で実行される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、&lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、 これは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (w, (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, data, elem) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(elem, data)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;BOOST_PP_LIST_FOR_EACH&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// w_ x_ y_ z_ に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH_I -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each_i.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH_I&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH_I&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のためにマクロを繰り返す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH_I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, data, i, elem )&lt;/code&gt; 形式のマクロ。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を伴い &lt;code&gt;BOOST_PP_LIST_FOR_EACH&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; 、現在の要素のインデックスおよび現在の要素を伴い展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; が各要素で実行される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、&lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、 これは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each_i.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each_i.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (w, (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, data, i, elem) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(elem, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(data, i))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_I&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// w_0 x_1 y_2 z_3 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH_I_R -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のためにマクロを繰り返す。
これは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, data, i, elem )&lt;/code&gt; 形式のマクロ。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を伴い &lt;code&gt;BOOST_PP_LIST_FOR_EACH&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; 、現在の要素のインデックスおよび現在の要素を伴い展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される補助のデータ。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; が各要素で実行される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、&lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、 これは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_I&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each_i.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each_i.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/for.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO_2(r, data, i, elem) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(elem, i)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, state) [ &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_I_R&lt;/a&gt;(r, MACRO_2, _, state) ]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;BOOST_PP_FOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [x0 y1 z2] [y0 z1] [z0] に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH_PRODUCT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each_product.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT&lt;/code&gt; マクロはいくつかの &lt;em&gt;リスト&lt;/em&gt; の各デカルト積のためにマクロを繰り返す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, product )&lt;/code&gt; 形式の 2項マクロ。
    このマクロは &lt;em&gt;タプル&lt;/em&gt; 中のデカルト積を伴い &lt;code&gt;BOOST_PP_FOR_EACH_PRODUCT&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復および &lt;em&gt;タプル&lt;/em&gt; が含んでいるデカルト積を伴い展開される。
    この &lt;em&gt;タプル&lt;/em&gt; は &lt;code&gt;size&lt;/code&gt; 個の要素を持つだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; :
    &lt;em&gt;タプル&lt;/em&gt; のサイズ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; :
    デカルト積が得られる &lt;em&gt;リスト&lt;/em&gt; の &lt;em&gt;タプル&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、2つの &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; と &lt;code&gt;(x, (y, (z, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは次のシーケンスを生成するだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each_product.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each_product.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, product) product&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (a, x) (a, y) (a, z) (b, x) (b, y) (b, z) (c, x) (c, y) (c, z) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH_PRODUCT_R -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/code&gt; マクロはいくつかの &lt;em&gt;リスト&lt;/em&gt; の各デカルト積のためにマクロを繰り返す。
これは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, product )&lt;/code&gt; 形式の 2項マクロ。
    このマクロは &lt;em&gt;タプル&lt;/em&gt; 中のデカルト積を伴い &lt;code&gt;BOOST_PP_FOR_EACH_PRODUCT&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復および &lt;em&gt;タプル&lt;/em&gt; が含んでいるデカルト積を伴い展開される。
    この &lt;em&gt;タプル&lt;/em&gt; は &lt;code&gt;size&lt;/code&gt; 個の要素を持つだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; :
    &lt;em&gt;タプル&lt;/em&gt; のサイズ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; :
    デカルト積が得られる &lt;em&gt;リスト&lt;/em&gt; の &lt;em&gt;タプル&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、2つの &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; と &lt;code&gt;(x, (y, (z, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは次のシーケンスを生成するだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each_product.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each_product.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/for.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (x, (y, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, state)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(r, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    MACRO_I( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        r, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, state), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO_I(r, c, t) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        r, MACRO_P, 2, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(c), t), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(c), t) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO_P(r, product) product&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;BOOST_PP_FOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;L1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (x, x) (x, y) (y, x) (y, y) (a, a) (a, b) (b, a) (b, b) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_FOR_EACH_R -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_for_each_r.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のためにマクロを繰り返す。
これは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro (r, data, elem )&lt;/code&gt; 形式の 3項マクロ。
    このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を伴い &lt;code&gt;BOOST_PP_LIST_FOR_EACH&lt;/code&gt; によって展開される。
    これは、次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および現在の要素を伴い展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; が各要素で実行される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは繰り返しを作成する。
もし、&lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、 これは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;BOOST_PP_LIST_FOR_EACH&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/for_each.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/for.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO_2(r, data, elem) elem&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, state) [ &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;BOOST_PP_LIST_FOR_EACH_R&lt;/a&gt;(r, MACRO_2, _, state) ]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;BOOST_PP_FOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// [x y z] [y z] [z] に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_IS_CONS -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_is_cons.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_IS_CONS&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; が空でないかどうかを判断する述語である。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;em&gt;リスト&lt;/em&gt; が非空ならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 1 に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 0 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_IS_NIL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_is_nil.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_IS_NIL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_IS_NIL&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; が空かどうかを判断する述語である。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_IS_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;em&gt;リスト&lt;/em&gt; が空ならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;BOOST_PP_LIST_IS_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 0 に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;BOOST_PP_LIST_IS_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 1 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_NIL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_nil.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_NIL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_NIL&lt;/code&gt; マクロは空 &lt;em&gt;リスト&lt;/em&gt; コンストラクタである。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_NIL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; の終わりを表わす。&lt;/p&gt;
&lt;p&gt;このマクロは重要でない。
これは単に &lt;code&gt;BOOST_PP_NIL&lt;/code&gt; に展開される。
このために、このマクロは廃止された。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OLD \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        a, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            b, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                c, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;BOOST_PP_LIST_NIL&lt;/a&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NEW (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// a == a に展開される&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_RESTK&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) == (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_REST -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_rest.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_REST&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_REST&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の後部に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    非空 &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OLD \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        a, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            b, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;BOOST_PP_LIST_CONS&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                c, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;                &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;BOOST_PP_LIST_NIL&lt;/a&gt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NEW (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// a == a に展開される&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OLD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) == (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_REST_N -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_rest_n.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_REST_N&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_REST_N&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の先頭の &lt;code&gt;count&lt;/code&gt; 個の要素以外の &lt;em&gt;リスト&lt;/em&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REST_N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt; の先頭から削除する要素数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;code&gt;count&lt;/code&gt; 個の要素を &lt;em&gt;リスト&lt;/em&gt; の先頭から削除し、残りの要素を &lt;em&gt;リスト&lt;/em&gt; として返す。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_REST_N_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;BOOST_PP_LIST_REST_N_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/rest_n.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/rest_n.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (a, (b, (c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;BOOST_PP_LIST_REST_N&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_REST_N_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_REST_N_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_REST_N_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; の先頭の &lt;code&gt;count&lt;/code&gt; 個の要素以外の &lt;em&gt;リスト&lt;/em&gt; に展開される。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REST_N_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;em&gt;リスト&lt;/em&gt; の先頭から削除する要素数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    要素が抽出される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;code&gt;count&lt;/code&gt; 個の要素を &lt;em&gt;リスト&lt;/em&gt; の先頭から削除し、残りの要素を &lt;em&gt;リスト&lt;/em&gt; として返す。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;BOOST_PP_LIST_REST_N&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/rest_n.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/rest_n.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;BOOST_PP_LIST_REST_N_D&lt;/a&gt;(d, 2, x), state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), ((c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)), &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_REVERSE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_reverse.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_REVERSE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_REVERSE&lt;/code&gt; マクロは 逆順の &lt;em&gt;リスト&lt;/em&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REVERSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    逆順にされる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_REVERSE_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;BOOST_PP_LIST_REVERSE_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/reverse.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/reverse.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (0, (1, (2, (3, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;BOOST_PP_LIST_REVERSE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (3, (2, (1, (0, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_REVERSE_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_reverse_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_REVERSE_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_REVERSE_D&lt;/code&gt; マクロは 逆順の &lt;em&gt;リスト&lt;/em&gt; に展開される。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_REVERSE_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    逆順にされる &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;BOOST_PP_LIST_REVERSE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/reverse.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/reverse.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, (d, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (L1, (L1, (L1, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;BOOST_PP_LIST_REVERSE_D&lt;/a&gt;(d, x), state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((d, (c, (b, (a, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))), ((d, (c, (b, (a, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((d, (c, (b, (a, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))), &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_SIZE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_size.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_SIZE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_SIZE&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; のサイズに展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    サイズが計算される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_SIZE_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;BOOST_PP_LIST_SIZE_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/size.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/size.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (0, (1, (2, (3, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;BOOST_PP_LIST_SIZE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 4 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_SIZE_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_size_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_SIZE_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_SIZE_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; のサイズに展開される。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_SIZE_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    サイズが計算される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;BOOST_PP_LIST_SIZE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/size.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/add.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/size.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define L1 (a, (b, (c, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L2 (x, (y, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define L3 (p, (q, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (L1, (L2, (L3, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;BOOST_PP_ADD_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        d, state, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;BOOST_PP_LIST_SIZE_D&lt;/a&gt;(d, x) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 7 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_TO_TUPLE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_to_tuple.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_TO_TUPLE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_TO_TUPLE&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; を &lt;em&gt;タプル&lt;/em&gt; に変換する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_TO_TUPLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; :
    変換される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を生成するだろう。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header:&amp;lt;boost/preprocessor/list/to_tuple.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/to_tuple.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (w, (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;BOOST_PP_LIST_TO_TUPLE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (w, x, y, z) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_TO_TUPLE_R -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; を &lt;em&gt;タプル&lt;/em&gt; に変換する。
これは &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_FOR&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    変換される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;を生成するだろう。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;BOOST_PP_LIST_TO_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/to_tuple.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/to_tuple.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/for.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;BOOST_PP_LIST_IS_CONS&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;(state)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(r, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;BOOST_PP_LIST_TO_TUPLE_R&lt;/a&gt;(r, state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;BOOST_PP_FOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PRED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (x, y, z) (y, z) (z) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_TRANSFORM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_transform.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_TRANSFORM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_TRANSFORM&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を与えられた変形に従って変形する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_TRANSFORM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, data, elem )&lt;/code&gt; 形式の 3項述語。
    この変形は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および &lt;em&gt;リスト&lt;/em&gt; 中の現在の要素を伴い、&lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;BOOST_PP_LIST_TRANSFORM&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;pred&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    変形される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;op&lt;/code&gt; を展開する。
これは各呼び出しの結果から新しい &lt;em&gt;リスト&lt;/em&gt; を作成する。
たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中では使えなかったが、現在ではこのような制限はない。
しかし、そのような状況では &lt;code&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/code&gt; を使うほうがより能率的である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/transform.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/transform.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (3, (2, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, data, elem) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(elem)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;BOOST_PP_LIST_TRANSFORM&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (0, (2, (1, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LIST_TRANSFORM_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/list_transform_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/code&gt; マクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素を与えられた変形に従って変形する。
これは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 内で呼ばれる際には最も効率よく機能する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op (d, data, elem )&lt;/code&gt; 形式の 3項述語。
    この変形は、次の有効な &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; 反復、補助の &lt;em&gt;データ&lt;/em&gt; および &lt;em&gt;リスト&lt;/em&gt; 中の現在の要素を伴い、&lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;BOOST_PP_LIST_TRANSFORM&lt;/code&gt; によって展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;pred&lt;/code&gt; に渡される補助のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; :
    変形される &lt;em&gt;リスト&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;リスト&lt;/em&gt; 中の各要素のために &lt;code&gt;op&lt;/code&gt; を展開する。
これは各呼び出しの結果から新しい &lt;em&gt;リスト&lt;/em&gt; を作成する。
たとえば、もし &lt;em&gt;リスト&lt;/em&gt; が &lt;code&gt;(a, (b, (c, BOOST_PP_NIL)))&lt;/code&gt; ならば、このマクロは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;BOOST_PP_LIST_TRANSFORM&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/list/transform.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/inc.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_right.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/transform.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define A (1, (2, (3, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define B (A, (A, (A, (A, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP_T(d, data, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;BOOST_PP_INC&lt;/a&gt;(x)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) (&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;BOOST_PP_LIST_TRANSFORM_D&lt;/a&gt;(d, OP_T, 2, x), state)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;BOOST_PP_LIST_FOLD_RIGHT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))), ((2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    ((2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))), ((2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))),&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))))&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LOCAL_ITERATE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/local_iterate.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LOCAL_ITERATE&lt;/code&gt; マクロは &lt;em&gt;ローカル反復&lt;/em&gt; を開始する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include BOOST_PP_LOCAL_ITERATE()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;ユーザ定義マクロ &lt;code&gt;BOOST_PP_LOCAL_MACRO&lt;/code&gt; は、&lt;code&gt;BOOST_PP_LOCAL_LIMITS&lt;/code&gt; で指定された範囲の値を伴いこのマクロによって縦に展開される。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;BOOST_PP_LOCAL_LIMITS&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;BOOST_PP_LOCAL_MACRO&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/local.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/iteration/local.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;BOOST_PP_LOCAL_MACRO&lt;/a&gt;(n) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;&amp;gt; struct sample&amp;lt;n&amp;gt; { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        enum { value = n }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;BOOST_PP_LOCAL_LIMITS&lt;/a&gt; (1, 5)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/a&gt;()&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;1&amp;gt; { enum { value = 1 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;2&amp;gt; { enum { value = 2 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;3&amp;gt; { enum { value = 3 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;4&amp;gt; { enum { value = 4 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;5&amp;gt; { enum { value = 5 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LOCAL_LIMITS -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/local_limits.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LOCAL_LIMITS&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LOCAL_LIMITS&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_LOCAL_ITERATE&lt;/code&gt; によって使用されるユーザ定義 &lt;em&gt;名前付き外部引数&lt;/em&gt; である。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define BOOST_PP_LOCAL_LIMITS (start, finish)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt; :
    &lt;em&gt;ローカル反復&lt;/em&gt; の（包括的な）下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_ITERATION&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finish&lt;/code&gt; :
    &lt;em&gt;ローカル反復&lt;/em&gt; の（包括的な）上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_ITERATION&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;余白文字がマクロ識別子の後にあることに注意せよ。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;2&lt;/code&gt; 要素 &lt;em&gt;タプル&lt;/em&gt; に展開されなければならない。
この &lt;em&gt;タプル&lt;/em&gt; の要素は &lt;em&gt;ローカル反復&lt;/em&gt; の下限と上限を表わす。
&lt;code&gt;start&lt;/code&gt; も &lt;code&gt;finish&lt;/code&gt; も両方とも &lt;em&gt;評価済みパラメータ&lt;/em&gt; である。
これは単純な（&lt;code&gt;1 + 3&lt;/code&gt; のような）算術式などを含むことができることを意味する。&lt;/p&gt;
&lt;p&gt;This macro is automatically undefined for reuse by a call to &lt;code&gt;BOOST_PP_LOCAL_ITERATE&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html&#34;&gt;BOOST_PP_LIMIT_ITERATION&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/iteration/local.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;BOOST_PP_LOCAL_MACRO&lt;/a&gt;(n) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;&amp;gt; struct sample&amp;lt;n&amp;gt; { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        enum { value = n }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;BOOST_PP_LOCAL_LIMITS&lt;/a&gt; (1, 5)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/a&gt;()&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;1&amp;gt; { enum { value = 1 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;2&amp;gt; { enum { value = 2 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;3&amp;gt; { enum { value = 3 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;4&amp;gt; { enum { value = 4 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;5&amp;gt; { enum { value = 5 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LOCAL_MACRO -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/local_macro.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LOCAL_MACRO&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LOCAL_MACRO&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_LOCAL_ITERATE&lt;/code&gt; によって使用されるユーザ定義 &lt;em&gt;名前付き外部引数&lt;/em&gt; である。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define BOOST_PP_LOCAL_MACRO(n) ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; :
    &lt;em&gt;ローカル反復&lt;/em&gt; メカニズムから受け取った現在の反復値。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは自動的に再利用のために &lt;code&gt;BOOST_PP_LOCAL_ITERATE&lt;/code&gt; 呼び出しによって未定義にされる。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/iteration/local.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;BOOST_PP_LOCAL_MACRO&lt;/a&gt;(n) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt;&amp;gt; struct sample&amp;lt;n&amp;gt; { \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        enum { value = n }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    }; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;BOOST_PP_LOCAL_LIMITS&lt;/a&gt; (1, 5)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;BOOST_PP_LOCAL_ITERATE&lt;/a&gt;()&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;1&amp;gt; { enum { value = 1 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;2&amp;gt; { enum { value = 2 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;3&amp;gt; { enum { value = 3 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;4&amp;gt; { enum { value = 4 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;template&amp;lt;&amp;gt; struct sample&amp;lt;5&amp;gt; { enum { value = 5 }; };&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;に展開される&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LPAREN -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/lparen.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LPAREN&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LPAREN&lt;/code&gt; マクロは開き丸括弧に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LPAREN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;プリプロセッサは丸括弧をマクロ呼び出しではデリミタとして解釈する。
このため、丸括弧は特別な扱いを必要とする。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;BOOST_PP_RPAREN&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/punctuation/paren.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/punctuation/paren.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define X(x) x&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(p, x) X p x )&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;BOOST_PP_LPAREN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// abc に展開される&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define Y(x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;BOOST_PP_LPAREN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 10 に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_LPAREN_IF -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/lparen_if.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_LPAREN_IF&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_LPAREN_IF&lt;/code&gt; マクロは条件によって開き丸括弧に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_LPAREN_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cond&lt;/code&gt; :
    マクロが開き丸括弧に展開されるか、何もしないかを決定する条件。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;cond&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; に展開されるならば、このマクロは何にも展開されない。
そうでなければ、開き丸括弧に展開される。&lt;/p&gt;
&lt;p&gt;プリプロセッサは丸括弧をマクロ呼び出しではデリミタとして解釈する。
このため、丸括弧は特別な扱いを必要とする。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;BOOST_PP_RPAREN_IF&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/punctuation/paren_if.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/punctuation/paren_if.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(c, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;BOOST_PP_LPAREN_IF&lt;/a&gt;(c) x &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;BOOST_PP_RPAREN_IF&lt;/a&gt;(c)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// text に展開される&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (text) に展開される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MAX -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/max.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MAX&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MAX&lt;/code&gt; マクロは二つの引数のうち大きい方に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    第1のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    第2のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは二つの引数のうち大きい方を、または両方が等しければその値を返す。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で利用することが出来なかった。
この制約は今は存在しない。
しかし、より効率的にするには、そのような状況では &lt;code&gt;BOOST_PP_MAX_D&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;BOOST_PP_MAX_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/selection/max.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/selection/max.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;BOOST_PP_MAX&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;BOOST_PP_MAX&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MAX_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/max_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MAX_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MAX_D&lt;/code&gt; マクロは第2引数と第3引数のうち大きい方に展開される。
これは、最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MAX_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    第1のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    第2のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは二つの引数のうち大きい方を、または両方が等しければその値を返す。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;BOOST_PP_MAX&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/selection/max.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/selection/max.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (3, (5, (2, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;BOOST_PP_MAX_D&lt;/a&gt;(d, state, x)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST_MAX(list) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;(OP, 0, LIST)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;LIST_MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MIN -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/min.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MIN&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MIN&lt;/code&gt; マクロは二つの引数のうち小さい方に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    第1のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    第2のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは二つの引数のうち小さい方を、または両方が等しければその値を返す。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で利用することが出来なかった。
この制約は今は存在しない。
しかし、より効率的にするには、そのような状況では &lt;code&gt;BOOST_PP_MIN_D&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;BOOST_PP_MIN_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/selection/min.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/selection/min.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;BOOST_PP_MIN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;BOOST_PP_MIN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MIN_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/min_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MIN_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MIN_D&lt;/code&gt; マクロは第2引数と第3引数のうち小さい方に展開される。
これは、最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MIN_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    第1のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    第2のオペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは二つの引数のうち小さい方を、または両方が等しければその値を返す。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;BOOST_PP_MIN&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/selection/min.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/fold_left.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/selection/min.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (3, (5, (2, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;BOOST_PP_MIN_D&lt;/a&gt;(d, state, x)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST_MAX(list) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;BOOST_PP_LIST_FOLD_LEFT&lt;/a&gt;(OP, 20, LIST)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;LIST_MIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MOD -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/mod.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MOD&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MOD&lt;/code&gt; マクロは引数の余りに展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MOD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    演算の割られる方(分子)。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    演算の割る方(分母)。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で利用することが出来なかった。
この制約は今は存在しない。
しかし、より効率的にするには、そのような状況では &lt;code&gt;BOOST_PP_MOD_D&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;y&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; なら、結果は未定義である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;BOOST_PP_MOD_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/mod.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/mod.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;BOOST_PP_MOD&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MOD_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/mod_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MOD_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MOD_D&lt;/code&gt; マクロは第2引数と第3引数の余りに展開される。
これは、最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MOD_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    演算の割られる方(分子)。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    演算の割る方(分母)。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;y&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; なら、結果は未定義である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;BOOST_PP_MOD&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/div.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/mod.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/filter.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/logical/not.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (1, (2, (3, (4, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define EVEN_P(d, _, num) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;BOOST_PP_NOT&lt;/a&gt;(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;BOOST_PP_MOD_D&lt;/a&gt;(d, num, 2))&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define EVEN(list) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;(EVEN_P, nil, list)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;EVEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (2, (4, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define ODD_P(d, _, num) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;BOOST_PP_MOD_D&lt;/a&gt;(d, num, 2)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define ODD(list) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;BOOST_PP_LIST_FILTER&lt;/a&gt;(ODD_P, nil, list)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ODD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (1, (3, (5, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MUL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/mul.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MUL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MUL&lt;/code&gt; マクロは引数の積に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    演算での被乗数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    演算での乗数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の積が &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; より大きければ、結果は &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; になる。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で利用することが出来なかった。
この制約は今は存在しない。
しかし、より効率的にするには、そのような状況では &lt;code&gt;BOOST_PP_MUL_D&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいか等しいときに、最も効率的である。
しかし、この効率を得るためのマクロ呼び出しの前に二つの引数を実際に比較するほどの価値はない。
言い換えれば、 &lt;code&gt;x&lt;/code&gt; は2つのオペランドのうちより大きい(訳注: 小さい) &lt;em&gt;可能性が高い&lt;/em&gt; 値にすればよい。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;BOOST_PP_MUL_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/mul.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/mul.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;BOOST_PP_MUL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_MUL_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/mul_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_MUL_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_MUL_D&lt;/code&gt; マクロは第2引数と第3引数の積に展開される。
これは、最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_MUL_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    演算での被乗数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    演算での乗数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の積が &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; より大きければ、&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; になる。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;y&lt;/code&gt; より小さいか等しいときに、最も効率的である。
しかし、この効率を得るためのマクロ呼び出しの前に二つの引数を実際に比較するほどの価値はない。
言い換えれば、 &lt;code&gt;x&lt;/code&gt; は2つのオペランドのうちより大きい(訳注: 小さい) &lt;em&gt;可能性が高い&lt;/em&gt; 値にすればよい。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;BOOST_PP_MUL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/mul.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/mul.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, data) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 0, data)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 0, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, data), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;BOOST_PP_MUL_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            d, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 2, data), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// raise &#39;x&#39; to the &#39;n&#39;-th power&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define EXP(x, n) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 2, BOOST_PP_WHILE(PRED, OP, (n, x, 1)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;EXP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 16&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EXP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_NIL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/nil.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_NIL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_NIL&lt;/code&gt; 識別子はライブラリによって、非マクロを示すために予約されている。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_NIL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;この識別子は 定義されて &lt;em&gt;いない&lt;/em&gt; この目的は &lt;em&gt;マクロではないこと&lt;/em&gt; である。
&lt;em&gt;リスト&lt;/em&gt; を終了するためにも使われる。&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/list/adt.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define LIST (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;BOOST_PP_LIST_FIRST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to x&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;BOOST_PP_LIST_REST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_NOR -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/nor.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_NOR&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_NOR&lt;/code&gt; マクロはオペランドを否定論理和 &lt;em&gt;NOR&lt;/em&gt; に展開する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_NOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; :
    演算における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; :
    演算における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; と &lt;code&gt;q&lt;/code&gt; の両方が &lt;code&gt;0&lt;/code&gt; ならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ、 &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは否定論理和 &lt;code&gt;OR&lt;/code&gt; の演算を行う前に、それぞれのオペランドをブール値に変換する。
もしこの変換が不要なら、代わりに &lt;code&gt;BOOST_PP_BITNOR&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitnor.html&#34;&gt;BOOST_PP_BITNOR&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/logical/nor.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/logical/nor.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;BOOST_PP_NOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;BOOST_PP_NOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_NOT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/not.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_NOT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_NOT&lt;/code&gt; マクロはオペランドの論理否定 &lt;em&gt;NOT&lt;/em&gt; を行う。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_NOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; :
    変換される値。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; が非0なら、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;そうでなければ、&lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは論理否定 &lt;code&gt;OR&lt;/code&gt; の演算を行う前に、それぞれのオペランドをブール値に変換する。
もしこの変換が不要なら、代わりに &lt;code&gt;BOOST_PP_COMPL&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/compl.html&#34;&gt;BOOST_PP_COMPL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/logical/not.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/logical/not.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;BOOST_PP_NOT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;BOOST_PP_NOT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_NOT_EQUAL -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/not_equal.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_NOT_EQUAL&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_NOT_EQUAL&lt;/code&gt; マクロは二つの値の非等価性を比較する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_NOT_EQUAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が等しければ、このマクロは &lt;code&gt;0&lt;/code&gt; に展開される。
そうでなければ、&lt;code&gt;1&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で利用することは出来なかった。
この制限はもう存在しない。
なぜならこのマクロはもう、 &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; を使っていないからである。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;BOOST_PP_NOT_EQUAL_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/not_equal.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/not_equal.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;BOOST_PP_NOT_EQUAL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;BOOST_PP_NOT_EQUAL&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_NOT_EQUAL_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/not_equal_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_NOT_EQUAL_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_NOT_EQUAL&lt;/code&gt; マクロは二つの値の非等価性を比較する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_NOT_EQUAL_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    この引数は無視される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    比較における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; :
    比較における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が等しければ、このマクロは &lt;code&gt;0&lt;/code&gt; に展開される。
そうでなければ、&lt;code&gt;1&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在する。
代わりに &lt;code&gt;BOOST_PP_NOT_EQUAL&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;BOOST_PP_NOT_EQUAL&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/comparison/not_equal.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/comparison/equal.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;BOOST_PP_NOT_EQUAL_D&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;BOOST_PP_NOT_EQUAL_D&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_OR -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/or.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_OR&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_OR&lt;/code&gt; マクロは、そのオペランドの論理和 &lt;em&gt;OR&lt;/em&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_OR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; :
    演算における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; :
    演算における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; か &lt;code&gt;q&lt;/code&gt; が非0なら、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは論理和 &lt;em&gt;OR&lt;/em&gt; の演算を行う前に、それぞれのオペランドをブール値に変換する。
もしこの変換が不要なら、代わりに &lt;code&gt;BOOST_PP_BITOR&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitor.html&#34;&gt;BOOST_PP_BITOR&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/logical/or.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/logical/or.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;BOOST_PP_OR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;BOOST_PP_OR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RELATIVE_FINISH -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_finish.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/relative_finish.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RELATIVE_FINISH&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RELATIVE_FINISH&lt;/code&gt; マクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; の現在の深さと相対的なの深さの上限に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RELATIVE_FINISH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; :
    その上限が検索されるフレームの相対的な深さ。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_ITERATION_DEPTH() - 1&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; が進行中の時のみ有効である。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;i&lt;/code&gt; は現在のフレームより &lt;em&gt;外側の&lt;/em&gt; フレームの数として解釈される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/iterate.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RELATIVE_FLAGS -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_flags.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/relative_flags.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RELATIVE_FLAGS&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RELATIVE_FLAGS&lt;/code&gt; マクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; の現在の深さと相対的な深さに関連するフラグに展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RELATIVE_FLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; :
    そのフラグが検索されるフレームの相対的な深さ。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_ITERATION_DEPTH() - 1&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; が進行中の時のみ有効である。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;i&lt;/code&gt; は現在のフレームより &lt;em&gt;外側の&lt;/em&gt; フレームの数として解釈される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/iterate.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RELATIVE_ITERATION -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/relative_iteration.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RELATIVE_ITERATION&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RELATIVE_FLAGS&lt;/code&gt; マクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; の現在の深さと相対的な深さの反復値に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RELATIVE_ITERATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; :
    その反復値が検索されるフレームの相対的な深さ。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_ITERATION_DEPTH() - 1&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; が進行中の時のみ有効である。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;i&lt;/code&gt; は現在のフレームより &lt;em&gt;外側の&lt;/em&gt; フレームの数として解釈される。
それゆえ、 &lt;code&gt;BOOST_PP_RELATIVE_ITERATION(0)&lt;/code&gt; は &lt;code&gt;BOOST_PP_ITERATION()&lt;/code&gt; と等価である。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/iterate.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// file.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#if !&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;BOOST_PP_IS_ITERATING&lt;/a&gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE_H_&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE_H_&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preprocessor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hpp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;st&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;BOOST_PP_ITERATION_PARAMS_1&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iteration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;BOOST_PP_ITERATION_PARAMS_1&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0002&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#elif &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;BOOST_PP_ITERATION_DEPTH&lt;/a&gt;() == 1 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &amp;amp;&amp;amp; &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;BOOST_PP_ITERATION_FLAGS&lt;/a&gt;() == 0x0001 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_ITERATION_PARAMS_2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#elif &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;BOOST_PP_ITERATION_DEPTH&lt;/a&gt;() == 1 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &amp;amp;&amp;amp; &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;BOOST_PP_ITERATION_FLAGS&lt;/a&gt;() == 0x0002 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_ITERATION_PARAMS_2&lt;/span&gt; \
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; \
        &lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#elif &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;BOOST_PP_ITERATION_DEPTH&lt;/a&gt;() == 2 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &amp;amp;&amp;amp; &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_flags.html&#34;&gt;BOOST_PP_FRAME_FLAGS&lt;/a&gt;(1) == 0x0001 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOOST_PP_ITERATION_PARAMS_3&lt;/span&gt; \
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;file.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; \
        &lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;BOOST_PP_ITERATE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#else &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// used by both&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;previous:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html&#34;&gt;BOOST_PP_RELATIVE_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;current:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;BOOST_PP_ITERATION&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RELATIVE_START -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_start.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/relative_start.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RELATIVE_START&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RELATIVE_FINISH&lt;/code&gt; マクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; の現在の深さと相対的なの深さの下限に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RELATIVE_START&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; :
    その下限が検索されるフレームの相対的な深さ。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_ITERATION_DEPTH() - 1&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;em&gt;ファイル繰り返し&lt;/em&gt; が進行中の時のみ有効である。&lt;/p&gt;
&lt;p&gt;引数 &lt;code&gt;i&lt;/code&gt; は現在のフレームより &lt;em&gt;外側の&lt;/em&gt; フレームの数として解釈される。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/iteration/iterate.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; マクロは高速な横断的繰り返しを表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; を呼ぶ繰り返しの回数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、 利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している - 
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の中で再帰的に使うことは出来なかった。
この制限はもう存在しない。
ライブラリは自動的に、利用可能な次の繰り返しの深さを検出できる。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;BOOST_PP_REPEAT_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define DECL(z, n, text) text ## n = n;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DECL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_1ST -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_1st.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_1ST&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_1ST&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の1番目の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_1ST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; を呼び出す繰り返しの回数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT_1ST&lt;/code&gt; によって利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; 引数に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返しの次元を表す。
接尾辞 &lt;code&gt;_Z&lt;/code&gt; をもつ他のマクロの仲間は内部で &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; や &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; など。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンの利用は厳密には必要ではない。
しかし、 (&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;BOOST_PP_REPEAT_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define DECL(z, n, text) text ## n = n;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html&#34;&gt;BOOST_PP_REPEAT_1ST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DECL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_2ND -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_2nd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_2ND&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_2ND&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の2番目の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_2ND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; を呼び出す繰り返しの回数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT_2ND&lt;/code&gt; によって利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; 引数に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返しの次元を表す。
接尾辞 &lt;code&gt;_Z&lt;/code&gt; をもつ他のマクロの仲間は内部で &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; や &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; など。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンの利用は厳密には必要ではない。
しかし、 (&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;BOOST_PP_REPEAT_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define DECL(z, n, text) text ## n = n;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html&#34;&gt;BOOST_PP_REPEAT_2ND&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DECL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_3RD -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_3rd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_3RD&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_3RD&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の3番目の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_3RD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; を呼び出す繰り返しの回数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT_3RD&lt;/code&gt; によって利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; 引数に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返しの次元を表す。
接尾辞 &lt;code&gt;_Z&lt;/code&gt; をもつ他のマクロの仲間は内部で &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; や &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; など。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンの利用は厳密には必要ではない。
しかし、 (&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;BOOST_PP_REPEAT_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define DECL(z, n, text) text ## n = n;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html&#34;&gt;BOOST_PP_REPEAT_3RD&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DECL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; マクロは高速な横断的繰り返しの構築を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、
    利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、 &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、 (&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の中で再帰的に使うことは出来なかった。
この制限はもう存在しない。
ライブラリは自動的に、利用可能な次の繰り返しの深さを検出できる。&lt;/p&gt;
&lt;p&gt;このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; も利用している。
このため、 &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; にへの理想的な再入のために、このマクロの2つの変種がある。
つまり、 &lt;code&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/code&gt; と &lt;code&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/code&gt; である。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define DECL(z, n, text) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;(text, n) = n;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DECL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        expands to:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        int x5 = 5; int x6 = 6; int x7 = 7;&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        int x8 = 8; int x9 = 9;&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_1ST -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_1ST&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_1ST&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; の第1の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_1ST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、
    利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(z, n, data) (n)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_1ST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// expands to (1) (2) (3) (4) (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_2ND -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_2ND&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_2ND&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; の第2の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_2ND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(z, n, data) (n)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_2ND&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// expands to (1) (2) (3) (4) (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_3RD -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_3RD&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_3RD&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; の第3の次元を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_3RD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;このマクロは推奨されていない。
過去のバージョンとの互換性のためだけに存在している。
代わりに &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(z, n, data) (n)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_3RD&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// expands to (1) (2) (3) (4) (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/code&gt; マクロは高速な横断的繰り返しを構築する。
これは最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;z&lt;/code&gt; の値を、単純に別のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_D_z -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/code&gt; マクロは高速な横断的繰り返しの構築を表す。
これは最も効率的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; と &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D_z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;z&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の次元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; に渡される &lt;code&gt;z&lt;/code&gt; の値は利用可能な次の繰り返し次元を表す。
&lt;code&gt;_Z&lt;/code&gt; 接尾辞をもつ他のマクロとその仲間は内部で、&lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; を利用している -
例えば、 &lt;code&gt;BOOST_PP_ENUM_PARAMS&lt;/code&gt; と &lt;code&gt;BOOST_PP_ENUM_PARAMS_Z&lt;/code&gt; などである。
これらの &lt;code&gt;_Z&lt;/code&gt; バージョンを使うことは厳密には必要ではないが、(&lt;code&gt;macro&lt;/code&gt; に渡される) &lt;code&gt;z&lt;/code&gt; の値をこれらのマクロに渡すことで、最も効率的に &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; に再入することが出来る。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_FROM_TO_z -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_FROM_TO_z&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT_FROM_TO&lt;/code&gt; の繰り返しの構築への再入を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;z&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の次元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;first&lt;/code&gt; :
    繰り返しの下限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; :
    繰り返しの上限。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、
    利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;繰り返しの回数 (つまり、 &lt;code&gt;last - first&lt;/code&gt; は &lt;code&gt;BOOST_PP_LIMIT_REPEAT&lt;/code&gt; を越えてはならない。&lt;/p&gt;
&lt;p&gt;文字列結合を、プリプロセッサのトークン結合演算子ではなく、 &lt;code&gt;BOOST_PP_CAT&lt;/code&gt; で行わなければいけない時もある。
これは、 &lt;code&gt;z&lt;/code&gt; の値がマクロ呼び出しそのものである時に起こる。
マクロの展開を可能にするには遅延呼び出しが必要である。
そのような状況で、構文は次のようになる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_CAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_FROM_TO_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat_from_to.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define TEXT(z, n, data) n data&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(z, n, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;BOOST_PP_REPEAT_FROM_TO_&lt;/a&gt; ## z( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            1, 4, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            TEXT, xyz \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        expands to:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        (1 xyz 2 xyz 3 xyz)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        (1 xyz 2 xyz 3 xyz)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        (1 xyz 2 xyz 3 xyz)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_REPEAT_z -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/repeat_z.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_REPEAT_z&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_REPEAT_z&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の繰り返しの構築への再入を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;z&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; の次元。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;count&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; を呼び出す繰り返しの回数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;macro&lt;/code&gt; :
    &lt;code&gt;macro(z, n, data)&lt;/code&gt; という形の 3つ組の演算。
    このマクロは &lt;code&gt;BOOST_PP_REPEAT&lt;/code&gt; によって、
    利用可能な次の繰り返しの深さ、現在の繰り返し回数、付属の &lt;code&gt;data&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :
    &lt;code&gt;macro&lt;/code&gt; に渡される付属のデータ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは次のシーケンスに展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;文字列結合を、プリプロセッサのトークン結合演算子ではなく、 &lt;code&gt;BOOST_PP_CAT&lt;/code&gt; で行わなければいけない時もある。
これは、 &lt;code&gt;z&lt;/code&gt; の値がマクロ呼び出しそのものである時に起こる。
マクロの展開を可能にするには遅延呼び出しが必要である。
そのような状況で、構文は次のようになる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_CAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_REPEAT_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;macro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;BOOST_PP_LIMIT_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/inc.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/punctuation/comma_if.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/repetition/repeat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define TEXT(z, n, text) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;BOOST_PP_COMMA_IF&lt;/a&gt;(n) text&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define TEMPLATE(z, n, _) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;BOOST_PP_COMMA_IF&lt;/a&gt;(n) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    template&amp;lt; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;BOOST_PP_REPEAT_&lt;/a&gt; ## z( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;BOOST_PP_INC&lt;/a&gt;(n), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            TEXT, class \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &amp;gt; class T ## n \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;BOOST_PP_REPEAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TEMPLATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    expands to:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        template&amp;lt;class&amp;gt; class T0,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        template&amp;lt;class, class&amp;gt; class T1,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;        template&amp;lt;class, class, class&amp;gt; class T2&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RPAREN -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/rparen.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RPAREN&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RPAREN&lt;/code&gt; マクロは閉じ丸括弧に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RPAREN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;プリプロセッサは丸括弧をマクロ呼び出しではデリミタとして解釈する。
このため、丸括弧は特別な扱いを必要とする。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;BOOST_PP_LPAREN&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/punctuation/paren.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/facilities/empty.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/punctuation/paren.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define X(x) x&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define MACRO(x, p) X ( x p&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;BOOST_PP_RPAREN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to abc&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define Y(x)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/empty.html&#34;&gt;BOOST_PP_EMPTY&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;BOOST_PP_RPAREN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_RPAREN_IF -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/rparen_if.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_RPAREN_IF&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_RPAREN_IF&lt;/code&gt; マクロは条件によって閉じ丸括弧に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_RPAREN_IF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cond&lt;/code&gt; :
    マクロが閉じ丸括弧に展開されるか、何もしないかを決定する条件。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cond&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; に展開されれば、このマクロは何にも展開されない。
相でなければ、閉じ丸括弧に展開される。&lt;/p&gt;
&lt;p&gt;プリプロセッサは丸括弧をマクロ呼び出しではデリミタとして解釈する。
このため、丸括弧は特別な扱いを必要とする。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;BOOST_PP_LPAREN_IF&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/punctuation/paren_if.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/punctuation/paren_if.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(c, x) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;BOOST_PP_LPAREN_IF&lt;/a&gt;(c) x &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;BOOST_PP_RPAREN_IF&lt;/a&gt;(c)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to text&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_SLOT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/slot.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_SLOT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_SLOT&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_ASSIGN_SLOT&lt;/code&gt; によって前もって評価された値を取り出す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include BOOST_PP_SLOT(i)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; :
    取り出される &lt;em&gt;スロット&lt;/em&gt; のインデックス。
    この値は &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_SLOT_COUNT&lt;/code&gt; の範囲でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;使う前に、インデックス &lt;code&gt;i&lt;/code&gt; の &lt;em&gt;スロット&lt;/em&gt; は &lt;code&gt;BOOST_PP_ASSIGN_SLOT&lt;/code&gt; で割り当てられていなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;BOOST_PP_ASSIGN_SLOT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html&#34;&gt;BOOST_PP_LIMIT_SLOT_COUNT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/slot/slot.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/slot/slot.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define X() 4&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html&#34;&gt;BOOST_PP_VALUE&lt;/a&gt; 1 + 2 + 3 + X()&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;BOOST_PP_ASSIGN_SLOT&lt;/a&gt;(1)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#undef X&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html&#34;&gt;BOOST_PP_SLOT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_STRINGIZE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/stringize.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_STRINGIZE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_STRINGIZE&lt;/code&gt; マクロは、引数を展開した後に文字列化する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_STRINGIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; :
    リテラル文字列に変換されるテキスト。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;プリプロセッサ文字列化演算子 (&lt;code&gt;#&lt;/code&gt;) では引数を展開することは出来ない。
このマクロは文字列化の前に引数を展開することを可能にする。&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/stringize.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/cat.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/stringize.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html&#34;&gt;BOOST_PP_STRINGIZE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to &#34;ab&#34;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_SUB -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/sub.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_SUB&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_SUB&lt;/code&gt; マクロは引数の差に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_SUB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    引き算の被減数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    引き算の減数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x - y&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; より小さければ、演算結果は &lt;code&gt;0&lt;/code&gt; になる。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で使うことは出来なかったが、もはやそのような制限はない。
しかし、効率のためには、そのような状況では &lt;code&gt;BOOST_PP_SUB_D&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;BOOST_PP_SUB_D&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/sub.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/sub.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;BOOST_PP_SUB&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_SUB_D -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/sub_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_SUB_D&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_SUB_D&lt;/code&gt; マクロは第2引数と第3引数の差に展開される。
これは最も効率よく、&lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_SUB_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; :
    引き算の被減数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; :
    引き算の減数。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x - y&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; より小さければ、演算結果は &lt;code&gt;0&lt;/code&gt; になる。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;BOOST_PP_SUB&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/arithmetic/sub.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/sub.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, data) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, data)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;BOOST_PP_SUB_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            d, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, data), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            2 \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// decrement &#39;x&#39; by 2 &#39;n&#39; times&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define STRIDE(x, n) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, BOOST_PP_WHILE(PRED, OP, (n, x)))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;STRIDE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 6&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;STRIDE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_TUPLE_EAT -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/tuple_eat.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_TUPLE_EAT&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_TUPLE_EAT&lt;/code&gt; マクロは特定の大きさの &lt;em&gt;タプル&lt;/em&gt; を食うマクロに展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_TUPLE_EAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; :
    食われる &lt;em&gt;タプル&lt;/em&gt; の大きさ。
    有効な &lt;em&gt;タプル&lt;/em&gt; の大きさの範囲は、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 引数は &lt;em&gt;タプル&lt;/em&gt; の実際の大きさでなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/tuple/eat.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/if.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/eat.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(a, b) (a b)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define MACRO(n) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/if.html&#34;&gt;BOOST_PP_IF&lt;/a&gt;(n, OP, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html&#34;&gt;BOOST_PP_TUPLE_EAT&lt;/a&gt;(2))(1, 2)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to nothing&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MACRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (1, 2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_TUPLE_ELEM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/tuple_elem.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_TUPLE_ELEM&lt;/code&gt; マクロは &lt;em&gt;タプル&lt;/em&gt; から要素を展開する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; :
    &lt;em&gt;タプル&lt;/em&gt; の大きさ。
    有効な &lt;em&gt;タプル&lt;/em&gt; の大きさの範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; :
    展開される &lt;em&gt;タプル&lt;/em&gt; の要素へのゼロ基準のインデックス。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;size - 1&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; :
    要素が展開される &lt;em&gt;タプル&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 引数は &lt;em&gt;タプル&lt;/em&gt; の実際の大きさでなければならない。
&lt;code&gt;i&lt;/code&gt; は &lt;em&gt;タプル&lt;/em&gt; の大きさよりも小さくなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define TUPLE (a, b, c, d)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUPLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to a&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TUPLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_TUPLE_REM -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/tuple_rem.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_TUPLE_REM&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_TUPLE_REM&lt;/code&gt; マクロは特定の大きさの &lt;em&gt;タプル&lt;/em&gt; から丸括弧を取り除くマクロに展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_TUPLE_REM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; :
    丸括弧が取り除かれる &lt;em&gt;タプル&lt;/em&gt; の大きさ。
    有効な &lt;em&gt;タプル&lt;/em&gt; の大きさの範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; までである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 引数は &lt;em&gt;タプル&lt;/em&gt; の実際の大きさでなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/tuple/rem.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/rem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html&#34;&gt;BOOST_PP_TUPLE_REM&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to x, y, z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_TUPLE_REVERSE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/tuple_reverse.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_TUPLE_REVERSE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_TUPLE_REVERSE&lt;/code&gt; マクロは特定の大きさの &lt;em&gt;タプル&lt;/em&gt; を逆に並び替える。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_TUPLE_REVERSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; :
    並び替えられる &lt;em&gt;タプル&lt;/em&gt; の大きさ。
    有効な &lt;em&gt;タプル&lt;/em&gt; の大きさの範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; :
    並び替えられる &lt;em&gt;タプル&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 引数は &lt;em&gt;タプル&lt;/em&gt; の実際の大きさでなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/tuple/reverse.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/reverse.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html&#34;&gt;BOOST_PP_TUPLE_REVERSE&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to (z, y, x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_TUPLE_TO_LIST -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/tuple_to_list.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_TUPLE_TO_LIST&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_TUPLE_TO_LIST&lt;/code&gt; マクロは &lt;em&gt;タプル&lt;/em&gt; を &lt;em&gt;リスト&lt;/em&gt; に変換する。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_TUPLE_TO_LIST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; :
    変換される &lt;em&gt;タプル&lt;/em&gt; の大きさ。
    有効な &lt;em&gt;タプル&lt;/em&gt; の大きさの範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_TUPLE&lt;/code&gt; までである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tuple&lt;/code&gt; :
    変換される &lt;em&gt;タプル&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 引数は &lt;em&gt;タプル&lt;/em&gt; の実際の大きさでなければならない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;BOOST_PP_LIMIT_TUPLE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/tuple/to_list.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/to_list.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html&#34;&gt;BOOST_PP_TUPLE_TO_LIST&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// expands to (x, (y, (z, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;BOOST_PP_NIL&lt;/a&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_VALUE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/value.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_VALUE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_VALUE&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_ASSIGN_SLOT&lt;/code&gt; のための、ユーザ定義の &lt;em&gt;名前付けされた外部引数&lt;/em&gt; である。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define BOOST_PP_VALUE value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; :
    &lt;code&gt;BOOST_PP_ASSIGN_SLOT&lt;/code&gt; で評価される汎整数定数表現&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;BOOST_PP_ASSIGN_SLOT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_WHILE -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/while.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_WHILE&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; マクロはループの構築を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_WHILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; :
    &lt;code&gt;pred(d, state)&lt;/code&gt; という形の二項述語。
    この述語は &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; によって利用可能な次の繰り返し &lt;code&gt;d&lt;/code&gt; と現在の &lt;code&gt;state&lt;/code&gt; に展開される。
    この述語は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までの範囲の値に展開されなければならない。
    構築は、述語が &lt;code&gt;0&lt;/code&gt; を返すまでループし続ける。
    この述語が &lt;code&gt;0&lt;/code&gt; を返したとき、 &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; は現在の &lt;code&gt;state&lt;/code&gt; を返す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op(d, state)&lt;/code&gt; という形の二項演算。
    この演算は &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; によって利用可能な次の繰り返し &lt;code&gt;d&lt;/code&gt; と現在の &lt;code&gt;state&lt;/code&gt; に展開される。
    このマクロは &lt;code&gt;pred&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; を返すまで、新しい &lt;code&gt;state&lt;/code&gt; を生成しながら、繰り返し &lt;code&gt;state&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    初期状態。
    この引数はたいてい &lt;em&gt;タプル&lt;/em&gt; である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;code&gt;pred(d, state)&lt;/code&gt; が非 0 の間、&lt;code&gt;op(d, state)&lt;/code&gt; を繰り返す。
すなわち、次のように展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; と &lt;code&gt;op&lt;/code&gt; の両方に渡される &lt;code&gt;d&lt;/code&gt; の値は、利用可能な次の繰り返しを表す。
接尾辞 &lt;code&gt;_D&lt;/code&gt; を持つ他のマクロの仲間は内部で &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; を使っている。
例えば、 &lt;code&gt;BOOST_PP_ADD&lt;/code&gt; や &lt;code&gt;BOOST_PP_ADD_D&lt;/code&gt;である。
これらの &lt;code&gt;_D&lt;/code&gt; バージョンを使う必要は厳密にはないが、&lt;code&gt;d&lt;/code&gt; の値 (これは &lt;code&gt;pred&lt;/code&gt; や &lt;code&gt;op&lt;/code&gt; に渡される) をこれらのマクロに渡すことで、最大限効果的に &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; に再入できる。&lt;/p&gt;
&lt;p&gt;この &lt;code&gt;d&lt;/code&gt; の値を単純に他のマクロに渡すのではなく、直接使うためには、&lt;code&gt;BOOST_PP_WHILE_d&lt;/code&gt; を見よ。&lt;/p&gt;
&lt;p&gt;以前、このマクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の中で再帰的に使うことは出来なかった。
この制限はもう存在しない。
ライブラリは自動的に次の繰り返しを発見できるからである。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;BOOST_PP_WHILE_d&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/add.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(n, state) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, state)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    OP_D( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        d, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 0, state), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(2, 1, state) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP_D(d, res, c) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;BOOST_PP_ADD_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            d, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            res, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(c) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(c) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define SUMMATION(n) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        2, 0, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;BOOST_PP_WHILE&lt;/a&gt;(PRED, OP, (n, n)) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;SUMMATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 6&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SUMMATION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_WHILE_d -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/while_d.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_WHILE_d&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_WHILE_d&lt;/code&gt; マクロは &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; のループ構築への再入を表す。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_WHILE_&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;##&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; :
    利用可能な次の &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; の繰り返し。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pred&lt;/code&gt; :
    &lt;code&gt;pred(d, state)&lt;/code&gt; という形の二項述語。
    この述語は &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; によって、利用可能な次の繰り返し &lt;code&gt;d&lt;/code&gt; と現在の &lt;code&gt;state&lt;/code&gt; に展開される。
    この述語は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; までの範囲の値に展開されなければならない。
    構築は、述語が &lt;code&gt;0&lt;/code&gt; を返すまでループし続ける。
    この述語が &lt;code&gt;0&lt;/code&gt; を返したとき、 &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; は現在の &lt;code&gt;state&lt;/code&gt; を返す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;op&lt;/code&gt; :
    &lt;code&gt;op(d, state)&lt;/code&gt; という形の二項演算。
    この演算は &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; によって利用可能な次の繰り返し &lt;code&gt;d&lt;/code&gt; と現在の &lt;code&gt;state&lt;/code&gt; に展開される。
    このマクロは &lt;code&gt;pred&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; を返すまで、新しい &lt;code&gt;state&lt;/code&gt; を生成しながら、繰り返し &lt;code&gt;state&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; :
    初期状態。
    この引数はたいてい &lt;em&gt;タプル&lt;/em&gt; である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;このマクロは &lt;code&gt;pred(d, state)&lt;/code&gt; が非 0 の間、&lt;code&gt;op(d, state)&lt;/code&gt; を繰り返す。
すなわち、次のように展開される:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ある時は、プリプロセッサのトークンペースト演算子ではなく、&lt;code&gt;BOOST_PP_CAT&lt;/code&gt; で文字列結合をする必要があるかもしれない。
この時は &lt;code&gt;d&lt;/code&gt; の値はマクロ呼び出しそのものである。
これを展開するには遅延が必要である。
このような状況での構文は次のようになるだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_CAT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_WHILE_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;以前、 &lt;code&gt;d&lt;/code&gt; を直接 &lt;code&gt;BOOST_PP_WHILE&lt;/code&gt; につなげる (アンダースコアを挟まない) ことが可能だった。
これは現在ではサポートされていない。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;BOOST_PP_CAT&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;BOOST_PP_WHILE&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/add.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/arithmetic/dec.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/array/elem.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/array/size.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/control/while.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/tuple/elem.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define PRED(d, data) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, data)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP(d, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    OP_D( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        d, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 0, data), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 1, data), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;(3, 2, data) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define OP_D(d, res, i, array) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;BOOST_PP_ADD_D&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            d, res, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_elem.html&#34;&gt;BOOST_PP_ARRAY_ELEM&lt;/a&gt;(&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(i), array)), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;BOOST_PP_DEC&lt;/a&gt;(i), \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        array \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define ACCUMULATE_D(d, array) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;BOOST_PP_TUPLE_ELEM&lt;/a&gt;( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        3, 0, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;BOOST_PP_WHILE_&lt;/a&gt; ## d( \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            PRED, OP, \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;            (0, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_size.html&#34;&gt;BOOST_PP_ARRAY_SIZE&lt;/a&gt;(array), array) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;        ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    ) \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define ARRAY (4, (1, 2, 3, 4))&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;ACCUMULATE_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ARRAY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// expands to 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BOOST_PP_XOR -- Boost.Preprocessorの翻訳ドキュメントを移植（一部）</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html"/>
      <id>16a829d4e5d6dcf05b927aa35270eac8982dc6d8:archive/boost_docs/libs/preprocessor/ref/xor.md</id>
      <updated>2017-05-06T23:55:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;BOOST_PP_XOR&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;BOOST_PP_XOR&lt;/code&gt; マクロはオペランドの論理的排他和 &lt;em&gt;XOR&lt;/em&gt; に展開される。&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;BOOST_PP_XOR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; :
    演算における左オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; :
    演算における右オペランド。
    有効な値の範囲は &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt; まで。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Remarks&lt;/h2&gt;
&lt;p&gt;もし &lt;code&gt;p&lt;/code&gt; か &lt;code&gt;q&lt;/code&gt; が排他的に非 0 ならば、このマクロは &lt;code&gt;1&lt;/code&gt; に展開される。
そうでなければ &lt;code&gt;0&lt;/code&gt; に展開される。&lt;/p&gt;
&lt;p&gt;このマクロは論理的排他和 &lt;em&gt;XOR&lt;/em&gt; 演算を行う前に、それぞれのオペランドをブーリアンに変換する。
もしこの変換が不要なら、代わりに &lt;code&gt;BOOST_PP_BITXOR&lt;/code&gt; を使うこと。&lt;/p&gt;
&lt;h2&gt;See Also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitxor.html&#34;&gt;BOOST_PP_BITXOR&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;BOOST_PP_LIMIT_MAG&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Header: &amp;lt;boost/preprocessor/logical/xor.hpp&amp;gt;&lt;/p&gt;
&lt;h2&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/preprocessor/logical/xor.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;BOOST_PP_XOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;BOOST_PP_XOR&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// expands to 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Preprocessor Library -- Boost.Preprocessorリンク切れ修正</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html"/>
      <id>d16fc6704769c32bcf8681630ba751ad18b2e40e:archive/boost_docs/libs/preprocessor.md</id>
      <updated>2017-05-01T01:33:43+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost Preprocessor Library&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;Topics&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/motivation.html&#34;&gt;動機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/problems.html&#34;&gt;プリプロセッサに関する既知の問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/techniques.html&#34;&gt;テクニック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/incompatible.html&#34;&gt;非互換性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/reentrancy.html&#34;&gt;reentrancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/local_iteration.html&#34;&gt;local iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/file_iteration.html&#34;&gt;file iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/topics/evaluated_slots.html&#34;&gt;evaluated slots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminology&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/evaluated.html&#34;&gt;evaluated parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/terms/named_external.html&#34;&gt;named external argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Types&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/arrays.html&#34;&gt;arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/lists.html&#34;&gt;lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/sequences.html&#34;&gt;sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/data/tuples.html&#34;&gt;tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reference&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add.html&#34;&gt;ADD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/add_d.html&#34;&gt;ADD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/and.html&#34;&gt;AND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/apply.html&#34;&gt;APPLY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_data.html&#34;&gt;ARRAY_DATA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_elem.html&#34;&gt;ARRAY_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/array_size.html&#34;&gt;ARRAY_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert.html&#34;&gt;ASSERT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assert_msg.html&#34;&gt;ASSERT_MSG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/assign_slot.html&#34;&gt;ASSIGN_SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitand.html&#34;&gt;BITAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitnor.html&#34;&gt;BITNOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitor.html&#34;&gt;BITOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bitxor.html&#34;&gt;BITXOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/bool.html&#34;&gt;BOOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/cat.html&#34;&gt;CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma.html&#34;&gt;COMMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/comma_if.html&#34;&gt;COMMA_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/compl.html&#34;&gt;COMPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/config_extended_line_info.html&#34;&gt;CONFIG_EXTENDED_LINE_INFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/dec.html&#34;&gt;DEC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_d.html&#34;&gt;DEDUCE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_r.html&#34;&gt;DEDUCE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/deduce_z.html&#34;&gt;DEDUCE_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div.html&#34;&gt;DIV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/div_d.html&#34;&gt;DIV_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/empty.html&#34;&gt;EMPTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum.html&#34;&gt;ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params.html&#34;&gt;ENUM_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_binary_params_z.html&#34;&gt;ENUM_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params.html&#34;&gt;ENUM_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_a_default.html&#34;&gt;ENUM_PARAMS_WITH_A_DEFAULT*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_with_defaults.html&#34;&gt;ENUM_PARAMS_WITH_DEFAULTS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_params_z.html&#34;&gt;ENUM_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted.html&#34;&gt;ENUM_SHIFTED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params.html&#34;&gt;ENUM_SHIFTED_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_params_z.html&#34;&gt;ENUM_SHIFTED_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_shifted_z.html&#34;&gt;ENUM_SHIFTED_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing.html&#34;&gt;ENUM_TRAILING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_binary_params_z.html&#34;&gt;ENUM_TRAILING_BINARY_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params.html&#34;&gt;ENUM_TRAILING_PARAMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_params_z.html&#34;&gt;ENUM_TRAILING_PARAMS_Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_trailing_z.html&#34;&gt;ENUM_TRAILING_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/enum_z.html&#34;&gt;ENUM_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal.html&#34;&gt;EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/equal_d.html&#34;&gt;EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expand.html&#34;&gt;EXPAND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_if.html&#34;&gt;EXPR_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/expr_iif.html&#34;&gt;EXPR_IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/filename_x.html&#34;&gt;FILENAME_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for.html&#34;&gt;FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/for_r.html&#34;&gt;FOR_&lt;em&gt;r&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_finish.html&#34;&gt;FRAME_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_flags.html&#34;&gt;FRAME_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_iteration.html&#34;&gt;FRAME_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/frame_start.html&#34;&gt;FRAME_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater.html&#34;&gt;GREATER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_d.html&#34;&gt;GREATER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal.html&#34;&gt;GREATER_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/greater_equal_d.html&#34;&gt;GREATER_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/identity.html&#34;&gt;IDENTITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/if.html&#34;&gt;IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iif.html&#34;&gt;IIF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/inc.html&#34;&gt;INC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/include_self.html&#34;&gt;INCLUDE_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/indirect_self.html&#34;&gt;INDIRECT_SELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/intercept.html&#34;&gt;INTERCEPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_iterating.html&#34;&gt;IS_ITERATING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/is_selfish.html&#34;&gt;IS_SELFISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iterate.html&#34;&gt;ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration.html&#34;&gt;ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_depth.html&#34;&gt;ITERATION_DEPTH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_finish.html&#34;&gt;ITERATION_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_flags.html&#34;&gt;ITERATION_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_limits.html&#34;&gt;ITERATION_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_params_x.html&#34;&gt;ITERATION_PARAMS_&lt;em&gt;x&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/iteration_start.html&#34;&gt;ITERATION_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less.html&#34;&gt;LESS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_d.html&#34;&gt;LESS_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal.html&#34;&gt;LESS_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/less_equal_d.html&#34;&gt;LESS_EQUAL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_dim.html&#34;&gt;LIMIT_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_for.html&#34;&gt;LIMIT_FOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration.html&#34;&gt;LIMIT_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_iteration_dim.html&#34;&gt;LIMIT_ITERATION_DIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_mag.html&#34;&gt;LIMIT_MAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_repeat.html&#34;&gt;LIMIT_REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_count.html&#34;&gt;LIMIT_SLOT_COUNT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_slot_sig.html&#34;&gt;LIMIT_SLOT_SIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_tuple.html&#34;&gt;LIMIT_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/limit_while.html&#34;&gt;LIMIT_WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/line.html&#34;&gt;LINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append.html&#34;&gt;LIST_APPEND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_append_d.html&#34;&gt;LIST_APPEND_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at.html&#34;&gt;LIST_AT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_at_d.html&#34;&gt;LIST_AT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat.html&#34;&gt;LIST_CAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cat_d.html&#34;&gt;LIST_CAT_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_cons.html&#34;&gt;LIST_CONS*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum.html&#34;&gt;LIST_ENUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_enum_r.html&#34;&gt;LIST_ENUM_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter.html&#34;&gt;LIST_FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_filter_d.html&#34;&gt;LIST_FILTER_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first.html&#34;&gt;LIST_FIRST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n.html&#34;&gt;LIST_FIRST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_first_n_d.html&#34;&gt;LIST_FIRST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left.html&#34;&gt;LIST_FOLD_LEFT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd.html&#34;&gt;LIST_FOLD_LEFT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_2nd_d.html&#34;&gt;LIST_FOLD_LEFT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d.html&#34;&gt;LIST_FOLD_LEFT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_left_d_old.html&#34;&gt;LIST_FOLD_LEFT_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right.html&#34;&gt;LIST_FOLD_RIGHT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd.html&#34;&gt;LIST_FOLD_RIGHT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_2nd_d.html&#34;&gt;LIST_FOLD_RIGHT_2ND_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d.html&#34;&gt;LIST_FOLD_RIGHT_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_fold_right_d_old.html&#34;&gt;LIST_FOLD_RIGHT_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each.html&#34;&gt;LIST_FOR_EACH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i.html&#34;&gt;LIST_FOR_EACH_I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_i_r.html&#34;&gt;LIST_FOR_EACH_I_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product.html&#34;&gt;LIST_FOR_EACH_PRODUCT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_product_r.html&#34;&gt;LIST_FOR_EACH_PRODUCT_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_for_each_r.html&#34;&gt;LIST_FOR_EACH_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_cons.html&#34;&gt;LIST_IS_CONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_is_nil.html&#34;&gt;LIST_IS_NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_nil.html&#34;&gt;LIST_NIL*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest.html&#34;&gt;LIST_REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n.html&#34;&gt;LIST_REST_N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_rest_n_d.html&#34;&gt;LIST_REST_N_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse.html&#34;&gt;LIST_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_reverse_d.html&#34;&gt;LIST_REVERSE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size.html&#34;&gt;LIST_SIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_size_d.html&#34;&gt;LIST_SIZE_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple.html&#34;&gt;LIST_TO_TUPLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_to_tuple_r.html&#34;&gt;LIST_TO_TUPLE_R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform.html&#34;&gt;LIST_TRANSFORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/list_transform_d.html&#34;&gt;LIST_TRANSFORM_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_iterate.html&#34;&gt;LOCAL_ITERATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_limits.html&#34;&gt;LOCAL_LIMITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/local_macro.html&#34;&gt;LOCAL_MACRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen.html&#34;&gt;LPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/lparen_if.html&#34;&gt;LPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max.html&#34;&gt;MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/max_d.html&#34;&gt;MAX_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min.html&#34;&gt;MIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/min_d.html&#34;&gt;MIN_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod.html&#34;&gt;MOD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mod_d.html&#34;&gt;MOD_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul.html&#34;&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/mul_d.html&#34;&gt;MUL_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nil.html&#34;&gt;NIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/nor.html&#34;&gt;NOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not.html&#34;&gt;NOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal.html&#34;&gt;NOT_EQUAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/not_equal_d.html&#34;&gt;NOT_EQUAL_D*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/or.html&#34;&gt;OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_finish.html&#34;&gt;RELATIVE_FINISH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_flags.html&#34;&gt;RELATIVE_FLAGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_iteration.html&#34;&gt;RELATIVE_ITERATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/relative_start.html&#34;&gt;RELATIVE_START&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat.html&#34;&gt;REPEAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_1st.html&#34;&gt;REPEAT_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_2nd.html&#34;&gt;REPEAT_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_3rd.html&#34;&gt;REPEAT_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to.html&#34;&gt;REPEAT_FROM_TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_1st.html&#34;&gt;REPEAT_FROM_TO_1ST*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_2nd.html&#34;&gt;REPEAT_FROM_TO_2ND*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_3rd.html&#34;&gt;REPEAT_FROM_TO_3RD*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d.html&#34;&gt;REPEAT_FROM_TO_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_d_z.html&#34;&gt;REPEAT_FROM_TO_D_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_from_to_z.html&#34;&gt;REPEAT_FROM_TO_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/repeat_z.html&#34;&gt;REPEAT_&lt;em&gt;z&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen.html&#34;&gt;RPAREN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/rparen_if.html&#34;&gt;RPAREN_IF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/slot.html&#34;&gt;SLOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/stringize.html&#34;&gt;STRINGIZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub.html&#34;&gt;SUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/sub_d.html&#34;&gt;SUB_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_eat.html&#34;&gt;TUPLE_EAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_elem.html&#34;&gt;TUPLE_ELEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_rem.html&#34;&gt;TUPLE_REM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_reverse.html&#34;&gt;TUPLE_REVERSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/tuple_to_list.html&#34;&gt;TUPLE_TO_LIST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/value.html&#34;&gt;VALUE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while.html&#34;&gt;WHILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/while_d.html&#34;&gt;WHILE_&lt;em&gt;d&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/ref/xor.html&#34;&gt;XOR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Headers&lt;ul&gt;
&lt;li&gt;../&lt;ul&gt;
&lt;li&gt;preprocessor.hpp&lt;/li&gt;
&lt;li&gt;arithmetic.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;arithmetic/&lt;ul&gt;
&lt;li&gt;add.hpp&lt;/li&gt;
&lt;li&gt;dec.hpp&lt;/li&gt;
&lt;li&gt;div.hpp&lt;/li&gt;
&lt;li&gt;inc.hpp&lt;/li&gt;
&lt;li&gt;mod.hpp&lt;/li&gt;
&lt;li&gt;mul.hpp&lt;/li&gt;
&lt;li&gt;sub.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;array.hpp&lt;/li&gt;
&lt;li&gt;array/&lt;ul&gt;
&lt;li&gt;data.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assert_msg.hpp*&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;comma.hpp*&lt;/li&gt;
&lt;li&gt;comma_if.hpp*&lt;/li&gt;
&lt;li&gt;comparison.hpp&lt;/li&gt;
&lt;li&gt;comparison/&lt;ul&gt;
&lt;li&gt;equal.hpp&lt;/li&gt;
&lt;li&gt;greater.hpp&lt;/li&gt;
&lt;li&gt;greater_equal.hpp&lt;/li&gt;
&lt;li&gt;less.hpp&lt;/li&gt;
&lt;li&gt;less_equal.hpp&lt;/li&gt;
&lt;li&gt;not_equal.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config/&lt;ul&gt;
&lt;li&gt;limits.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;control.hpp&lt;/li&gt;
&lt;li&gt;control/&lt;ul&gt;
&lt;li&gt;deduce_d.hpp&lt;/li&gt;
&lt;li&gt;expr_if.hpp&lt;/li&gt;
&lt;li&gt;expr_iif.hpp&lt;/li&gt;
&lt;li&gt;if.hpp&lt;/li&gt;
&lt;li&gt;iif.hpp&lt;/li&gt;
&lt;li&gt;while.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;debug.hpp&lt;/li&gt;
&lt;li&gt;debug/&lt;ul&gt;
&lt;li&gt;assert.hpp&lt;/li&gt;
&lt;li&gt;line.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dec.hpp*&lt;/li&gt;
&lt;li&gt;empty.hpp*&lt;/li&gt;
&lt;li&gt;enum.hpp*&lt;/li&gt;
&lt;li&gt;enum_params.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp*&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp*&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp*&lt;/li&gt;
&lt;li&gt;expand.hpp*&lt;/li&gt;
&lt;li&gt;expr_if.hpp*&lt;/li&gt;
&lt;li&gt;facilities.hpp&lt;/li&gt;
&lt;li&gt;facilities/&lt;ul&gt;
&lt;li&gt;apply.hpp&lt;/li&gt;
&lt;li&gt;empty.hpp&lt;/li&gt;
&lt;li&gt;expand.hpp&lt;/li&gt;
&lt;li&gt;identity.hpp&lt;/li&gt;
&lt;li&gt;intercept.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for.hpp*&lt;/li&gt;
&lt;li&gt;identity.hpp*&lt;/li&gt;
&lt;li&gt;if.hpp*&lt;/li&gt;
&lt;li&gt;inc.hpp*&lt;/li&gt;
&lt;li&gt;iterate.hpp*&lt;/li&gt;
&lt;li&gt;iteration.hpp&lt;/li&gt;
&lt;li&gt;iteration/&lt;ul&gt;
&lt;li&gt;iterate.hpp&lt;/li&gt;
&lt;li&gt;local.hpp&lt;/li&gt;
&lt;li&gt;self.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;library.hpp&lt;/li&gt;
&lt;li&gt;limits.hpp*&lt;/li&gt;
&lt;li&gt;list.hpp&lt;/li&gt;
&lt;li&gt;list/&lt;ul&gt;
&lt;li&gt;adt.hpp&lt;/li&gt;
&lt;li&gt;append.hpp&lt;/li&gt;
&lt;li&gt;at.hpp&lt;/li&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logical.hpp&lt;/li&gt;
&lt;li&gt;logical/&lt;ul&gt;
&lt;li&gt;and.hpp&lt;/li&gt;
&lt;li&gt;bitand.hpp&lt;/li&gt;
&lt;li&gt;bitnor.hpp&lt;/li&gt;
&lt;li&gt;bitor.hpp&lt;/li&gt;
&lt;li&gt;bitxor.hpp&lt;/li&gt;
&lt;li&gt;bool.hpp&lt;/li&gt;
&lt;li&gt;compl.hpp&lt;/li&gt;
&lt;li&gt;nor.hpp&lt;/li&gt;
&lt;li&gt;not.hpp&lt;/li&gt;
&lt;li&gt;or.hpp&lt;/li&gt;
&lt;li&gt;xor.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max.hpp*&lt;/li&gt;
&lt;li&gt;min.hpp*&lt;/li&gt;
&lt;li&gt;punctuation.hpp&lt;/li&gt;
&lt;li&gt;punctuation/&lt;ul&gt;
&lt;li&gt;comma.hpp&lt;/li&gt;
&lt;li&gt;comma_if.hpp&lt;/li&gt;
&lt;li&gt;paren.hpp&lt;/li&gt;
&lt;li&gt;paren_if.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeat.hpp*&lt;/li&gt;
&lt;li&gt;repeat_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_2nd.hpp*&lt;/li&gt;
&lt;li&gt;repeat_from_to_3rd.hpp*&lt;/li&gt;
&lt;li&gt;repetition.hpp&lt;/li&gt;
&lt;li&gt;repetition/&lt;ul&gt;
&lt;li&gt;deduce_r.hpp&lt;/li&gt;
&lt;li&gt;deduce_z.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;enum_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_a_default.hpp&lt;/li&gt;
&lt;li&gt;enum_params_with_defaults.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted_params.hpp&lt;/li&gt;
&lt;li&gt;enum_shifted.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_binary_params.hpp&lt;/li&gt;
&lt;li&gt;enum_trailing_params.hpp&lt;/li&gt;
&lt;li&gt;for.hpp&lt;/li&gt;
&lt;li&gt;repeat.hpp&lt;/li&gt;
&lt;li&gt;repeat_from_to.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;selection.hpp&lt;/li&gt;
&lt;li&gt;selection/&lt;ul&gt;
&lt;li&gt;max.hpp&lt;/li&gt;
&lt;li&gt;min.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;seq/&lt;ul&gt;
&lt;li&gt;cat.hpp&lt;/li&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;enum.hpp&lt;/li&gt;
&lt;li&gt;filter.hpp&lt;/li&gt;
&lt;li&gt;first_n.hpp&lt;/li&gt;
&lt;li&gt;fold_left.hpp&lt;/li&gt;
&lt;li&gt;fold_right.hpp&lt;/li&gt;
&lt;li&gt;for_each.hpp&lt;/li&gt;
&lt;li&gt;for_each_i.hpp&lt;/li&gt;
&lt;li&gt;for_each_product.hpp&lt;/li&gt;
&lt;li&gt;insert.hpp&lt;/li&gt;
&lt;li&gt;pop_back.hpp&lt;/li&gt;
&lt;li&gt;pop_front.hpp&lt;/li&gt;
&lt;li&gt;push_back.hpp&lt;/li&gt;
&lt;li&gt;push_front.hpp&lt;/li&gt;
&lt;li&gt;remove.hpp&lt;/li&gt;
&lt;li&gt;replace.hpp&lt;/li&gt;
&lt;li&gt;rest_n.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;seq.hpp&lt;/li&gt;
&lt;li&gt;size.hpp&lt;/li&gt;
&lt;li&gt;subseq.hpp&lt;/li&gt;
&lt;li&gt;to_array.hpp&lt;/li&gt;
&lt;li&gt;to_tuple.hpp&lt;/li&gt;
&lt;li&gt;transform.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;li&gt;slot/&lt;ul&gt;
&lt;li&gt;slot.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tuple.hpp&lt;/li&gt;
&lt;li&gt;tuple/&lt;ul&gt;
&lt;li&gt;elem.hpp&lt;/li&gt;
&lt;li&gt;eat.hpp&lt;/li&gt;
&lt;li&gt;rem.hpp&lt;/li&gt;
&lt;li&gt;reverse.hpp&lt;/li&gt;
&lt;li&gt;to_list.hpp&lt;/li&gt;
&lt;li&gt;to_seq.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stringize.hpp&lt;/li&gt;
&lt;li&gt;while.hpp*&lt;/li&gt;
&lt;li&gt;wstringize.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/array_arithmetic.c&#34;&gt;array_arithmetic.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/catch_builtin.cpp&#34;&gt;catch_builtin.cpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/delay.c&#34;&gt;delay.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/duffs_device.c&#34;&gt;duffs_device.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/is_integral.cpp&#34;&gt;is_integral.cpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/examples/linear_fib.c&#34;&gt;linear_fib.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellanea&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/syntax.md.nolink&#34;&gt;syntax highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/acknowledgements.md.nolink&#34;&gt;acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor/bibliography.md.nolink&#34;&gt;bibliography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bellman_ford_shortest_paths -- cosmetics</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html"/>
      <id>b4d2718deea25f683d1a55dd026d1ed3c7ed3294:archive/boost_docs/libs/graph/bellman_ford_shortest_paths.md</id>
      <updated>2017-04-30T00:35:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;bellman_ford_shortest_paths&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bellman_ford_shortest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bgl_named_params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 名前無しパラメータバージョン&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WeightMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PredecessorMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DistanceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;BinaryFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bellman_ford_shortest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;n&#34;&gt;WeightMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PredecessorMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistanceMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;BinaryFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Bellman-Ford アルゴリズム [&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#bellman58&#34;&gt;4&lt;/a&gt;,&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ford62:_flows&#34;&gt;11&lt;/a&gt;,&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#lawler76:_comb_opt&#34;&gt;20&lt;/a&gt;,&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#clr90&#34;&gt;8&lt;/a&gt;] は、正と負の両方の辺の重みを持つグラフの単一始点の最短経路問題を解く。最短経路問題の定義のために、 章 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#shortest-paths-algorithms&#34;&gt;Shortest-Paths Algorithms&lt;/a&gt; を見なさい。 もし正の辺の重みを持つ最短経路問題を解く必要があるだけなら、Dijkstra の アルゴリズムがより効率的な代替手段を提供する。もし全ての辺の重みが 1 に等しいなら幅優先探索がより一層効率的な代替手段を提供する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bellman_ford_shortest_paths()&lt;/code&gt; 関数を呼ぶ前に、ユーザは始点に 0 の 距離を割り当て、他の全ての頂点に無限大の距離を割り当てなければならない。 Bellman-Ford アルゴリズムはグラフ中の全ての辺を通してループし、各辺に リラックス操作 (減らす操作) を適用することによって進められる。下記の擬似コード中で、 &lt;code&gt;v&lt;/code&gt; は &lt;code&gt;u&lt;/code&gt; の隣接頂点で、&lt;code&gt;w&lt;/code&gt; は辺にそれらの重みをマップし、 &lt;code&gt;d&lt;/code&gt; は今の所見られる各辺への最短経路の長さを記録する距離マップである。&lt;code&gt;p&lt;/code&gt; は各辺の親を記録する先行点マップで、それは結局最短経路木中で親となるであろう。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;RELAX(u, v, w, d, p)
  if (w(u,v) + d[u] &amp;lt; d[v]) 
    d[v] := w(u,v) + d[u]      辺をリラックスする (減らす) (u,v)
    p[v] := u
  else
    ...                        辺 (u,v) は リラックスされていない (減らされていない)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;アルゴリズムはグラフ中に負の閉路が存在しないならば、各辺への距離が可能な限り最小に減らされた事が保証された後にこのループを &lt;code&gt;|V|&lt;/code&gt; 回 繰り返す。もし負の閉路が存在するならば、グラフ中に適当に最小化されない 辺が存在する事になるだろう。つまり、&lt;code&gt;w(u,v) + d[u] &amp;lt; d[v]&lt;/code&gt; であるような 辺 &lt;code&gt;(u,v)&lt;/code&gt; が存在することになるだろう。 アルゴリズムは全ての辺が最小化されたかどうか最後に一回調べるためにグラフ中の辺をループし、もしよければ &lt;code&gt;true&lt;/code&gt; を返し、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;BELLMAN-FORD(G)
  for each vertex u in V        頂点 u の初期化
    d[u] := infinity
    p[u] := u
  end for
  for i := 1 to |V|-1
    for each edge (u,v) in E    辺 (u,v) の調査
      RELAX(u, v, w, d, p)
    end for
  end for
  for each edge (u,v) in E
    if (w(u,v) + d[u] &amp;lt; d[v])
      return (false, , )        辺 (u,v) は最小化されていない
    else
      ...                       辺 (u,v) は最小化されている
  end for
  return (true, p, d)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bellman_ford_shortest_paths()&lt;/code&gt; 関数から出力を得るための主な二つの選択が存在する。 ユーザが &lt;code&gt;distance_map()&lt;/code&gt; パラメータを通して距離プロパティ・マップを提供するならばグラフ中の始点から他の全ての頂点への最短距離は距離マップに記録されるだろう (もし関数が &lt;code&gt;true&lt;/code&gt; を返すなら)。 二番目の選択は最短経路木を &lt;code&gt;predecessor_map()&lt;/code&gt; に記録することである。 &lt;code&gt;V&lt;/code&gt; 中の各頂点 &lt;code&gt;u&lt;/code&gt; にとって、最短経路木中では &lt;code&gt;p[u]&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; の先行点になるだろう (ただし &lt;code&gt;p[u] = u&lt;/code&gt; でここに &lt;code&gt;u&lt;/code&gt; が始点 であるか、または始点からは到達不能な頂点である場合を除く)。 これらの二つの選択に加え、ユーザはアルゴリズムのイベント・ポイントのどれかの間、アクションを取れる独自のビジタをそこに提供することができる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;EdgeListGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型が &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;Edge List Graph&lt;/a&gt; のモデルの有向グラフまたは無向グラフでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;Size N&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の頂点の数。型 &lt;code&gt;Size&lt;/code&gt; は汎整数型でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;weight_map(WeightMap w)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の各辺の重み　(そして「長さ」もしくは「コスト」として知られる)。 &lt;code&gt;WeightMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ReadablePropertyMap.md.nolink&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。このプロパティ・マップのキー型はグラフの辺記述子でなければならない。重みマップの値型は距離マップの値型を伴った Addable でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(edge_weight, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;predecessor_map(PredecessorMap p_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先行点マップ (predecessor map) は最小全域木中に辺を記録する。 アルゴリズムの完了時に、&lt;code&gt;V&lt;/code&gt; 中の全ての &lt;code&gt;u&lt;/code&gt; のための辺 &lt;code&gt;(p[u],u)&lt;/code&gt; は最小全域木中にある。もし &lt;code&gt;p[u] = u&lt;/code&gt; なら &lt;code&gt;u&lt;/code&gt; は始点かまたは始点から到達不能な頂点である。 &lt;code&gt;PredecessorMap&lt;/code&gt; の型はキーと頂点の型がグラフの頂点記述子型と同じ &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dummy_property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN/OUT: &lt;code&gt;distance_map(DistanceMap d)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ &lt;code&gt;g&lt;/code&gt; 中の始点から各頂点への最短経路の重みは、このプロパティ・マップ中に記録される。&lt;code&gt;DistanceMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。プロパティ・マップのキー型は グラフの頂点記述子型でなければならず、距離マップの値型は &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;Less Than Comparable&lt;/a&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_distance, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(BellmanFordVisitor v)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビジタ・オブジェクトで、その型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman-Ford Visitor&lt;/a&gt; のモデルでなければならない。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;bellman_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_combine(BinaryFunction combine)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数オブジェクトはリラックス (減少) 段階中で、加算の役割を置き換える。 第一引数の型は距離マップの値型に一致していなければならず、第二引数の型は重みマップの値型に一致していなければならない。 結果型は距離マップの値型と同じでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト:&lt;code&gt;std::plus&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_compare(BinaryPredicate compare)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数オブジェクトはリラックス (減少) 段階中で、距離を比較する less-than (&lt;code&gt;&amp;lt;&lt;/code&gt;) 演算子の役割を置き換える。引数の型は距離マップの値型に一致していなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::less&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間複雑性は O(V E) である。&lt;/p&gt;
&lt;h2&gt;Visitor Event Points&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、グラフ中の各辺において &lt;code&gt;|V|&lt;/code&gt; 回呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_relaxed(e, g)&lt;/code&gt; は終点のための距離ラベルが減じられた時に呼び出される。頂点 &lt;code&gt;v&lt;/code&gt; のための最近のリラックス (減少) にあずかった 辺 &lt;code&gt;(u,v)&lt;/code&gt; は最短経路木の中にある辺である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_relaxed(e, g)&lt;/code&gt; は、もし終点のための距離ラベルが減じられなかった時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_minimized(e, g)&lt;/code&gt; は、アルゴリズムの第二段階の間、各辺が最小化されたかどうかの検査の間に呼び出される。もし辺が最小化されていればこの関数が呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_minimized(e, g)&lt;/code&gt; もまた、アルゴリズムの第二段階の間、各辺が最小化されたかどうかの検査の間に呼び出される。もし辺が最小化されていなければ、この関数が呼び出される。これはグラフ中に負の閉路が存在する時に起こる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;Bellman-Ford のアルゴリズムを用いた例が &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/examples/bellman-example.cpp.html&#34;&gt;examples/bellman-example.cpp&lt;/a&gt; 中にある。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われず ビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたは リファレンスによってこの状態をビジタに保持させる事を望むかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;mailto:takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bellman_visitor&lt;EventVisitorList&gt; -- cosmetics</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html"/>
      <id>b4d2718deea25f683d1a55dd026d1ed3c7ed3294:archive/boost_docs/libs/graph/bellman_visitor.md</id>
      <updated>2017-04-30T00:35:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;bellman_visitor&amp;lt;EventVisitorList&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このクラスは、(&lt;code&gt;std::pair&lt;/code&gt; を使って作られる) &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EventVisitor.html&#34;&gt;EventVisitor&lt;/a&gt; のリストを &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt; に変換するアダプタである。&lt;/p&gt;
&lt;h2&gt;モデル&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EventVisitorList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::pair&lt;/code&gt; で作られた &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EventVisitor.html&#34;&gt;EventVisitor&lt;/a&gt; のリスト。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;null_visitor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/bellman_ford_shortest_paths.hpp&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;p&gt;このクラスは &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt; に要求される全てのメンバ関数を実装している。それぞれの関数で、適切なイベントが EventVisitorList の中の &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/EventVisitor.html&#34;&gt;EventVisitor&lt;/a&gt; にディスパッチされる。&lt;/p&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class EventVisitorList&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bellman_visitor&amp;lt;EventVisitorList&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;make_bellman_visitor(EventVisitorList ev_list);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イベントビジタのリストを &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt; に適合させたものを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/visitor_concepts.md.nolink&#34;&gt;Visitorコンセプト&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イベントビジタ: &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/predecessor_recorder.md.nolink&#34;&gt;predecessor_recorder&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html&#34;&gt;distance_recorder&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/time_stamper.md.nolink&#34;&gt;time_stamper&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/property_writer.md.nolink&#34;&gt;property_writer&lt;/a&gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;mailto:gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breadth_first_visit -- cosmetics</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html"/>
      <id>b4d2718deea25f683d1a55dd026d1ed3c7ed3294:archive/boost_docs/libs/graph/breadth_first_visit.md</id>
      <updated>2017-04-30T00:35:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;breadth_first_visit&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;breadth_first_visit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertex_descriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bgl_named_params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFSVisitor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ColorMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;breadth_first_visit&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
   &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertex_descriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
   &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFSVisitor&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この関数はカラー・マーカーがアルゴリズム中で初期化されないことを除けば、基本的に &lt;code&gt;breadth_first_search()&lt;/code&gt; と同じである。 ユーザはアルゴリズムを呼ぶ前に全ての頂点の色が白色であることを確かめる責任がある。この違いでグラフの型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;Vertex List Graph&lt;/a&gt; である代わりに &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;Incidence Graph&lt;/a&gt; であることのみが要求される。 さらにこの違いはカラー・プロパティ・マップ中のより多くの柔軟性を考慮に入れている。例えば頂点上の部分的な関数を実装するだけのマップを使うことができる。そしてそれは探索がグラフのごく一部にしか及ばない場合、より良い空間効率であることができる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/breadth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;IncidenceGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有向グラフまたは無向グラフ。グラフの型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;Incidence Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索が開始される始点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(BFSVisitor vis)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS Visitor&lt;/a&gt; コンセプトで指定されたイベント・ポイントで呼び出されるビジタ・オブジェクト。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;bfs_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap color)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならなく、そのキー型はグラフの頂点記述子型でなければならなく、カラー・マップの値型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt; をモデルとしなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_color, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL: &lt;code&gt;buffer(Buffer&amp;amp; Q)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;頂点が発見される順序を決定するために使用されるキュー。 もしFIFO キューが使われると、巡回は通常の BFS 順序付けに従う。 他の型のキューも使用できるが、巡回順序は異なる。 例えば Dijkstra のアルゴリズムは優先度付きキューを用いて実装することができる。 &lt;code&gt;Buffer&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt; のモデルでなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;boost::queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E) である。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(v, g)&lt;/code&gt; は、探索の開始前に各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt; は、各頂点においてそれがキューから削除される時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、各頂点のあらゆる出辺において、 頂点がキューから削除された後で直ちに呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt;に加えて辺が木の辺の場合に呼び出される。辺 &lt;code&gt;e&lt;/code&gt; の終点はこの時に発見される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(u, g)&lt;/code&gt; は、アルゴリズムが初めて頂点 &lt;code&gt;u&lt;/code&gt; に通った時に呼び出される。始点に近い全ての頂点が発見されており、始点から遠方に離れた頂点はまだ発見されていない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.non_tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt; に 加えて辺が木の辺でない場合に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.gray_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が灰色に色づけされている場合に呼び出される。 灰色は頂点が現在キュー中にある印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.black_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が黒色に色づけされている場合に呼び出される。 黒色は頂点がもはやキュー中にはない印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、 &lt;code&gt;u&lt;/code&gt; の全ての出辺が調べられ、全ての隣接頂点が発見された後で呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;breadth_first_search()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;bfs_visitor&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;depth_first_search()&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;mailto:takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>depth_first_visit -- cosmetics</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html"/>
      <id>b4d2718deea25f683d1a55dd026d1ed3c7ed3294:archive/boost_docs/libs/graph/depth_first_visit.md</id>
      <updated>2017-04-30T00:35:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;depth_first_visit&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ColorMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depth_first_visit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertex_descriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ColorMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この関数は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#dfs-algorithm&#34;&gt;depth-firstパターン&lt;/a&gt; を使って、始点 &lt;code&gt;s&lt;/code&gt; と同じ連結成分中にある全ての頂点を訪れる。時々単独で有用ではあるが、この関数の主な目的は &lt;code&gt;depth_first_search()&lt;/code&gt; の実装のためにある。&lt;/p&gt;
&lt;p&gt;ユーザによって提供される &lt;code&gt;DFSVisitor&lt;/code&gt; はアルゴリズムの内側の各イベント・ポイントで行われるアクションを決定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ColorMap&lt;/code&gt; は訪れられた頂点の過程を保持するためにアルゴリズムによって使われる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/depth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN &lt;code&gt;IncidenceGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有向グラフまたは無向グラフ。グラフの型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.md.nolink&#34;&gt;Incidence Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索が開始される始点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;DFSVisitor visitor&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS Visitor&lt;/a&gt; コンセプトで指定されるイベント・ポイントで呼び出されるビジタ・オブジェクト。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL: &lt;code&gt;ColorMap color&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならず、かつキー型はグラフの頂点記述子型でなければならず、またカラー・マップの値型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;Color Value&lt;/a&gt; をモデルとしなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E) である。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたは リファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;mailto:takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dijkstra_shortest_paths -- cosmetics</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html"/>
      <id>b4d2718deea25f683d1a55dd026d1ed3c7ed3294:archive/boost_docs/libs/graph/dijkstra_shortest_paths.md</id>
      <updated>2017-04-30T00:35:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;dijkstra_shortest_paths&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertex_descriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bgl_named_params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 名前なしパラメータバージョン&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;DijkstraVisitor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PredecessorMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistanceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WeightMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IndexMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;Compare&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;Combine&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistInf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistZero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vertex_descriptor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
   &lt;span class=&#34;n&#34;&gt;PredecessorMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predecessor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistanceMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WeightMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
   &lt;span class=&#34;n&#34;&gt;IndexMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;Compare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;Combine&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistInf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DistZero&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zero&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;DijkstraVisitor&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このアルゴリズム [&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#dijkstra59&#34;&gt;10&lt;/a&gt;,&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#clr90&#34;&gt;8&lt;/a&gt;] は、全ての辺の重みが負でない場合の、重みづけされた有向グラフまたは無向グラフの単一始点の最短経路問題を解く。いくつかの辺の重みが負である場合は Bellman-Ford のアルゴリズムを使いなさい。全ての辺の重みが 1 に等しい時は Dijkstra のアルゴリズムの代わりに幅優先探索を使いなさい。最短経路問題の定義のために、最短経路問題のいくつかの背景 についての章 &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#shortest-path-algorithms&#34;&gt;Shortest-Paths Algorithms&lt;/a&gt; を見なさい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt; 関数から出力を得るための主な二つの選択が存在する。&lt;code&gt;distance_map()&lt;/code&gt; パラメータを通して距離プロパティ・ マップを提供するならば、グラフ中の始点から他の全ての頂点への最短距離は距離マップに記録されるだろう。さらに最短経路木を先行点マップ (predecessor map) に記録することができる。その場合 &lt;code&gt;V&lt;/code&gt; 中の各頂点 &lt;code&gt;u&lt;/code&gt; にとって、最短経路木中では &lt;code&gt;p[u]&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; の先行点になるだろう (ただし &lt;code&gt;p[u] = u&lt;/code&gt; でここに &lt;code&gt;u&lt;/code&gt; が始点であるかまたは始点からは到達不能な頂点である場合を除く)。 これらの二つの選択に加え、ユーザはアルゴリズムのイベント・ポイントのどれかの間アクションを取れる独自のビジタを提供することができる。&lt;/p&gt;
&lt;p&gt;Dijkstra のアルゴリズムは最短経路を知っている頂点集合 &lt;code&gt;S&lt;/code&gt; を反復的に「育てる」ことによって、始点から他の頂点への全ての最短経路を発見する。アルゴリズムの各段階で、&lt;code&gt;S&lt;/code&gt; に追加される次の頂点は優先度付きキューによって決定される。キューは、距離ラベルによって優先された &lt;code&gt;V - S&lt;/code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html#note_1&#34;&gt;[1]&lt;/a&gt; 中に頂点を含む。そして距離ラベルとはいまの所見られる各頂点への最短経路の長さである。それから優先度付きキューの先頭にある頂点 &lt;code&gt;u&lt;/code&gt; が &lt;code&gt;S&lt;/code&gt; に加えられ、その各先行辺はリラックス (距離が減らされる) される。つまり、もし &lt;code&gt;u&lt;/code&gt; への距離に出辺 &lt;code&gt;(u,v)&lt;/code&gt; の重みを加えた結果が &lt;code&gt;v&lt;/code&gt; の 距離ラベルより小さいなら、頂点 &lt;code&gt;v&lt;/code&gt; の評価された距離は減らされる。 それからアルゴリズムは元に戻り、優先度付きキューの先頭の次の頂点の処理をする。優先度付きキューが空になった時にアルゴリズムは終了する。&lt;/p&gt;
&lt;p&gt;アルゴリズムは各頂点がどの集合中にあるかの過程を保持するためにカラー・マーカー (白色、灰色、そして黒色) を使う。黒色に色づけされた頂点は &lt;code&gt;S&lt;/code&gt; 中にある。 白色または灰色に色づけされた頂点は &lt;code&gt;V-S&lt;/code&gt; 中にある。白色の頂点はまだ発見されていず、灰色の頂点は優先度付きキュー中にある。デフォルトでは、グラフ中の各頂点のためのカラー・マーカーを格納するための配列を割り当てる。&lt;code&gt;color_map()&lt;/code&gt; パラメータによって独自の記憶域と色へのアクセスを提供することができる。&lt;/p&gt;
&lt;p&gt;下記の擬似コードは Dijkstra の単一始点の最短経路アルゴリズムである。 &lt;code&gt;w&lt;/code&gt; は辺の重み、&lt;code&gt;d&lt;/code&gt; は距離ラベル、そして &lt;code&gt;p&lt;/code&gt; は最短経路木を符号化するのに使われる各頂点の先行点である。&lt;code&gt;Q&lt;/code&gt; は減少キー操作 (DECREASE-KEY operation) を備える優先度付きキューである。ビジタのイベント・ポイントは右側のラベルによって示されている。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;DIJKSTRA(G, s, w)
  for each vertex u in V           頂点 u の初期化
    d[u] := infinity 
    p[u] := u 
    color[u] := WHITE
  end for
  color[s] := GRAY 
  d[s] := 0 
  INSERT(Q, s)                     頂点 s の発見
  while (Q != Ø)
    u := EXTRACT-MIN(Q)            頂点 u の調査
    S := S U { u }
    for each vertex v in Adj[u]    辺 (u,v) の調査
      if (w(u,v) + d[u] &amp;lt; d[v])
        d[v] := w(u,v) + d[u]      辺 (u,v) はリラックスされた (減らされた)
        p[v] := u 
        if (color[v] = WHITE) 
          color[v] := GRAY
          INSERT(Q, v)             頂点 v の発見
        else if (color[v] = GRAY)
          DECREASE-KEY(Q, v)
      else
        ...                        辺 (u,v) はリラックスされない (減らされない)
    end for
    color[u] := BLACK              頂点 u の終了
  end while
  return (d, p)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/dijkstra_shortest_paths.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;const VertexListGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムが適用されるグラフオブジェクト。&lt;code&gt;VertexListGraph&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.md.nolink&#34;&gt;Vertex List Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;始点。全ての距離はこの頂点から計算される。そして最短経路木はこの頂点を根とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;weight_map(WeightMap w_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の各辺の重みまたは「長さ」。重みは全て非負でなければならず、辺の一つが負であればアルゴリズムは &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/exception.html#negative_edge&#34;&gt;negative_edge&lt;/a&gt;&lt;/code&gt; 例外を投げる。&lt;code&gt;WeightMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。グラフの辺記述子型は重みマップのキー型として使用できる必要がある。このマップの値型は距離マップの値型と同じでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(edge_weight, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_index_map(VertexIndexMap i_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは各頂点を &lt;code&gt;[0, num_vertices(g))&lt;/code&gt; の範囲において整数にマップする。これは辺がリラックスされた (減らされた) 時、ヒープ・データ構造を効率よく更新するのに必要である。&lt;code&gt;VertexIndexMap&lt;/code&gt; は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。マップの値型は汎整数型でなければならない。グラフの頂点記述子型はマップのキー型として使用できる必要がある。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_index, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;predecessor_map(PredecessorMap p_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先行点マップ (predecessor map) は最小全域木中に辺を記録する。アルゴリズムの完了時に、&lt;code&gt;V&lt;/code&gt; 中の全ての &lt;code&gt;u&lt;/code&gt; のための辺 &lt;code&gt;(p[u],u)&lt;/code&gt; は最小全域木中にある。もし &lt;code&gt;p[u] = u&lt;/code&gt; なら &lt;code&gt;u&lt;/code&gt; は始点かまたは始点から到達不能な頂点である。 &lt;code&gt;PredecessorMap&lt;/code&gt; の型はキーと頂点の型がグラフの頂点記述子型と同じ &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; でなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dummy_property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;distance_map(DistanceMap d_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ &lt;code&gt;g&lt;/code&gt; 中の始点 &lt;code&gt;s&lt;/code&gt; から各頂点への最短経路の重みは、このプロパティ・マップ中に記録される。最短経路の重みは、最短経路に沿った辺の重みの和である。&lt;code&gt;DistanceMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。グラフの頂点記述子型は距離マップのキー型として使用できる必要がある。距離マップの値型は &lt;code&gt;combine&lt;/code&gt; 関数オブジェクトと単位要素のための &lt;code&gt;zero&lt;/code&gt; オブジェクトから作られた &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/Monoid.md.nolink&#34;&gt;Monoid&lt;/a&gt; の要素型である。さらに距離の値型は &lt;code&gt;compare&lt;/code&gt; 関数オブジェクトによって提供される &lt;a href=&#34;http://www.sgi.com/tech/stl/StrictWeakOrdering.html&#34; target=&#34;_blank&#34;&gt;StrictWeakOrdering&lt;/a&gt; の順序付けを持っていなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;WeightMap&lt;/code&gt; の値型の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/iterator_property_map.md.nolink&#34;&gt;iterator_property_map&lt;/a&gt;&lt;/code&gt; で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_compare(CompareFunction cmp)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数はどの頂点が始点により近いか決定するために距離を比較するのに使われる。&lt;code&gt;CompareFunction&lt;/code&gt; の型は &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;Binary Predicate&lt;/a&gt; のモデルでなければならず、&lt;code&gt;DistanceMap&lt;/code&gt; プロパティ・ マップの値型に一致する引数型を持たなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::less&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_combine(CombineFunction cmb)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数は道の距離を計算するために、距離を結合するのに使われる。 &lt;code&gt;CombineFunction&lt;/code&gt; の型は &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;Binary Function&lt;/a&gt; のモデルでなければならない。二項関数の第一引数の型は &lt;code&gt;DistanceMap&lt;/code&gt; プロパティ・マップの値型に一致していなければならず、 第二引数の型は &lt;code&gt;WeightMap&lt;/code&gt; プロパティ・マップの値型に一致していなければならない。結果型は距離の値型と同じでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::plus&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_inf(D inf)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inf&lt;/code&gt; オブジェクトは &lt;code&gt;D&lt;/code&gt; オブジェクトのどの値よりも最も大きく なければならない。すなわち、&lt;code&gt;d != inf&lt;/code&gt; の場合どれでも &lt;code&gt;compare(d, inf) == true&lt;/code&gt; でなければならない。 &lt;code&gt;D&lt;/code&gt; の型は &lt;code&gt;DistanceMap&lt;/code&gt; の値型である。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::numeric_limits&amp;lt;D&amp;gt;::max()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_zero(D zero)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zero&lt;/code&gt; の値は距離の値と &lt;code&gt;combine&lt;/code&gt; 関数オブジェクトによって 作られた &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/Monoid.md.nolink&#34;&gt;Monoid&lt;/a&gt; のための単一要素でなければならない。&lt;code&gt;D&lt;/code&gt; の型は &lt;code&gt;DistanceMap&lt;/code&gt; の値型である。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;D()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap c_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは頂点に印をつけるためにアルゴリズムの実行の間使われる。頂点は白色から始めて、それがキュー中に挿入された時に灰色になる。それからそれがキューから取り除かれた時に黒色になる。アルゴリズムの終了時に、始点から到達可能な頂点は黒色に色づけされている。その他の全ての頂点は白色のままである。&lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。頂点記述子はマップのキー型として使用できる必要があり、マップの値型は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;Color Value&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;default_color_type&lt;/code&gt; の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/iterator_property_map.md.nolink&#34;&gt;iterator_property_map&lt;/a&gt;&lt;/code&gt; で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;visitor(DijkstraVisitor v)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズム内の一定のイベント・ポイントの間に起こしたいアクションを指定するのに使いなさい。&lt;code&gt;DijkstraVisitor&lt;/code&gt; は &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;Dijkstra Visitor&lt;/a&gt; コンセプトのモデルでなければならない。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html#note_2&#34;&gt;[2]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dijkstra_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O((V + E) log V) か、もし全ての頂点が始点から到達可能ならちょうど O(E log V) になる。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(u, g)&lt;/code&gt; は、アルゴリズムの開始前に各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt; は、頂点が優先度付きキューから取り除かれ、集合 &lt;code&gt;S&lt;/code&gt; に加えられた時に呼び出される。この時点で &lt;code&gt;(p[u],u)&lt;/code&gt; は最短経路木の辺であることが分かるので &lt;code&gt;d[u] = delta(s,u) = d[p[u]] + w(p[u],u)&lt;/code&gt; である。さらに、調査された頂点の距離は単調増加 &lt;code&gt;d[u1] &amp;lt;= d[u2] &amp;lt;= d[un]&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、頂点の各出辺において、頂点が集合 &lt;code&gt;S&lt;/code&gt; に加えられた後で直ちに呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_relaxed(e, g)&lt;/code&gt; は、辺 &lt;code&gt;(u,v)&lt;/code&gt; において、もし &lt;code&gt;d[u] + w(u,v) &amp;lt; d[v]&lt;/code&gt; であるなら呼び出される。頂点 &lt;code&gt;v&lt;/code&gt; のための最近のリラックス (減少) にあずかった辺 &lt;code&gt;(u,v)&lt;/code&gt; は最短経路木の中にある辺である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(v, g)&lt;/code&gt; は、頂点 &lt;code&gt;v&lt;/code&gt; において、&lt;code&gt;(u,v)&lt;/code&gt; が調査されて &lt;code&gt;v&lt;/code&gt; が白色である時に呼び出される。頂点が発見されていれば灰色に色づけされており、各到達可能な頂点はきっかり一度発見されるからである。これは頂点が優先度付きキューに挿入される時にも言える。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_relaxed(e, g)&lt;/code&gt; は、もし辺がリラックスされない (上を見よ) なら呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、頂点の出辺が全て調査された後に呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/examples/dijkstra-example.cpp.html&#34;&gt;examples/dijkstra-example.cpp&lt;/a&gt; を見よ。これは Dijkstra のアルゴリズムの使用例である。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ここで使われているアルゴリズムは全ての &lt;code&gt;V - S&lt;/code&gt; 頂点を一度に優先度付きキュー中に置かないことによって、わずかなスペースを節約している。その代わり、発見された &lt;code&gt;V - S&lt;/code&gt; 中のこれらの頂点だけであり、それゆえ無限より少ない距離を持っている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html#note_2&#34; name=&#34;note_2&#34;&gt;[2]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;mailto:takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>