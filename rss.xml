<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2015-04-07T14:32:00.965244</updated>
  <id>517612fd-faad-42ae-93a4-52294b54286a</id>

  
    <entry>
      <title>Boost 1.58.0リリースノート -- Boost 1.58.0リリースノート： Asioを追加</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>d906efa0209afccf3bcda0c0c2caaf58492893f8:document/version/1_58_0.md</id>
      <updated>2015-04-07 14:31:30 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10744&#34; target=&#34;_blank&#34;&gt;#10744&lt;/a&gt; Windowsの&lt;code&gt;ConnextEx&lt;/code&gt;関数によって生成されるエラー値を、他の環境でも使えるようマッピングした&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;BOOST_ASIO_DISABLE_CONNECTEX&lt;/code&gt;を追加した。これを使用することによって、&lt;code&gt;ConnectEx&lt;/code&gt;を明示的に無効にできる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10624&#34; target=&#34;_blank&#34;&gt;#10624&lt;/a&gt; &lt;code&gt;windows::object_handle&lt;/code&gt;の競合状態を修正。これは、破棄に対する操作待ちで起きていた。&lt;/li&gt;
&lt;li&gt;FreeBSD環境でのIPv6アドレスの構文解析を修正。末尾にスコープIDが付いているときに、変換時に&lt;code&gt;EINVAL&lt;/code&gt;が原因で失敗していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9465&#34; target=&#34;_blank&#34;&gt;#9465&lt;/a&gt;, &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11070&#34; target=&#34;_blank&#34;&gt;#11070&lt;/a&gt; Asioのデフォルト可視性を使用した際に起こる、共有ライブラリの可視性問題について回避策を導入。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10828&#34; target=&#34;_blank&#34;&gt;#10828&lt;/a&gt; メモリ内のキーを読み込む際に、パスワードのコールバックを呼び出すようSSLラッパーを変更。&lt;/li&gt;
&lt;li&gt;SSLのエラーキューが各操作の前にクリアした際に起こる、SSLエラーの誤報を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;が擬似的(spurious)に「短く読み込んだ(short read)」エラーを出力する可能性があったバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10088&#34; target=&#34;_blank&#34;&gt;#10088&lt;/a&gt; SSLエンジンの冗長なヌルポインタチェックを削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10690&#34; target=&#34;_blank&#34;&gt;#10690&lt;/a&gt; TLS v1.1と1.2を無効にするオプションを追加&lt;/li&gt;
&lt;li&gt;非推奨だったOpenSSLの&lt;code&gt;ERR_remove_state&lt;/code&gt;関数の使用を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8835&#34; target=&#34;_blank&#34;&gt;#8835&lt;/a&gt;, &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10884&#34; target=&#34;_blank&#34;&gt;#10884&lt;/a&gt; ClangでのC++11機能の欠陥を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10982&#34; target=&#34;_blank&#34;&gt;#10982&lt;/a&gt; g++での、C++11の&lt;code&gt;std::addressof&lt;/code&gt;の欠陥を修正&lt;/li&gt;
&lt;li&gt;マルチキャストのテストでの、&lt;code&gt;join_group&lt;/code&gt;の失敗を非致命的に変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11116&#34; target=&#34;_blank&#34;&gt;#11116&lt;/a&gt; AsioのテストをBoost.Testから分離した&lt;/li&gt;
&lt;li&gt;チュートリアルで、結果をフラッシュするために&lt;code&gt;std::endl&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;Clangのinteger sanitizerで報告された、符号なし整数のオーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yield_context&lt;/code&gt;を使用した非同期操作で、ムーブのみ可能な型を返せるようにした&lt;/li&gt;
&lt;li&gt;初期化関数から完了ハンドラを再入的(reentrant)に呼び出せるようにするため、&lt;code&gt;yield_context&lt;/code&gt;を変更した&lt;/li&gt;
&lt;li&gt;最新のWindows SDKで動作するように、Windows Runtimeの検出方法を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;num_segments&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリのセグメント数を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;string&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効正に関するメッセージで埋める。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;enum&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効性に関する値を設定する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjoint&lt;/code&gt;と&lt;code&gt;intersects&lt;/code&gt;に、以下のジオメトリの組み合わせサポートを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;segment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;box&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;に、&lt;code&gt;linestring&lt;/code&gt;のためのflat-endサポートを追加。&lt;ul&gt;
&lt;li&gt;Buffer now supports flat-ends for linestrings with a bend close to the start (such that buffered segment crosses flat-end).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;のパフォーマンスを大幅に向上させた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Polygon&lt;/code&gt;の&lt;code&gt;Partition&lt;/code&gt;のパフォーマンスを大幅に向上させた。全てのオーバーレイ操作が改善する可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8379&#34; target=&#34;_blank&#34;&gt;#8379&lt;/a&gt; 行列式の比較結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10108&#34; target=&#34;_blank&#34;&gt;#10108&lt;/a&gt; ジオメトリの一つの点にtouchする特定の状況において、オーバーレイ操作がエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10201&#34; target=&#34;_blank&#34;&gt;#10201&lt;/a&gt; 座標系の比較に、別な関数を使用する提案(wontfix : 問題はあるけれど、いまは修正できない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10467&#34; target=&#34;_blank&#34;&gt;#10467&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10863&#34; target=&#34;_blank&#34;&gt;#10863&lt;/a&gt; テンプレートパラメータ名がtermios.hの&lt;code&gt;B0&lt;/code&gt;マクロと衝突している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10640&#34; target=&#34;_blank&#34;&gt;#10640&lt;/a&gt; CCW Polygonにおいて、&lt;code&gt;buffer()&lt;/code&gt;の結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10666&#34; target=&#34;_blank&#34;&gt;#10666&lt;/a&gt; MSVCコンパイラの警告C4127 : 「条件式が定数になっている」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10747&#34; target=&#34;_blank&#34;&gt;#10747&lt;/a&gt; 再スケジューリングが、areal/arealの設定操作が原因でエラーになっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10770&#34; target=&#34;_blank&#34;&gt;#10770&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;が巨大な距離、もしくはrough round joinで失敗する。失敗する場所は、凹所(concavities)の交差しないところ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10658&#34; target=&#34;_blank&#34;&gt;#10658&lt;/a&gt; &lt;code&gt;sym_difference&lt;/code&gt;が、&lt;code&gt;int&lt;/code&gt;のポリゴンに対して間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10835&#34; target=&#34;_blank&#34;&gt;#10835&lt;/a&gt; &lt;code&gt;multilinestring&lt;/code&gt;と&lt;code&gt;polygon&lt;/code&gt;の&lt;code&gt;difference&lt;/code&gt;が、間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10861&#34; target=&#34;_blank&#34;&gt;#10861&lt;/a&gt; &lt;code&gt;Rtree&lt;/code&gt;の&lt;code&gt;Value&lt;/code&gt;がポインタを含む&lt;code&gt;pair&lt;/code&gt;もしくは&lt;code&gt;tuple&lt;/code&gt;であり、&lt;code&gt;Geometry&lt;/code&gt;デフォルト比較の&lt;code&gt;equal_to&lt;/code&gt;を使用している場合に、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10887&#34; target=&#34;_blank&#34;&gt;#10887&lt;/a&gt; &lt;code&gt;Linear&lt;/code&gt;/&lt;code&gt;MultiPolygon&lt;/code&gt;の&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10890&#34; target=&#34;_blank&#34;&gt;#10890&lt;/a&gt; &lt;code&gt;Point&lt;/code&gt;/&lt;code&gt;Segment&lt;/code&gt;の&lt;code&gt;disjoint()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10904&#34; target=&#34;_blank&#34;&gt;#10904&lt;/a&gt; &lt;code&gt;relate_cartesian_segments&lt;/code&gt;戦略において、最上位次元のセグメントの計算が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10912&#34; target=&#34;_blank&#34;&gt;#10912&lt;/a&gt; &lt;code&gt;Areal&lt;/code&gt;/&lt;code&gt;Areal&lt;/code&gt;の&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10951&#34; target=&#34;_blank&#34;&gt;#10951&lt;/a&gt; WindowsのIntelコンパイラにおいて、&lt;code&gt;/bigobj&lt;/code&gt;フラグを設定するとテストに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10957&#34; target=&#34;_blank&#34;&gt;#10957&lt;/a&gt; 様々な関係操作において、アサーションが失敗し、不正な結果を出力する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10958&#34; target=&#34;_blank&#34;&gt;#10958&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt;と&lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;dijoint()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10959&#34; target=&#34;_blank&#34;&gt;#10959&lt;/a&gt; &lt;code&gt;no_rescale_policy&lt;/code&gt;を使用すると、&lt;code&gt;get_turns()&lt;/code&gt;がアサーションに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10960&#34; target=&#34;_blank&#34;&gt;#10960&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。turnが不足している。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10961&#34; target=&#34;_blank&#34;&gt;#10961&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。linear spikeのtrunが不正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11112&#34; target=&#34;_blank&#34;&gt;#11112&lt;/a&gt; Solarisプラットフォームのマクロ名との衝突により、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11121&#34; target=&#34;_blank&#34;&gt;#11121&lt;/a&gt; 整数座標系(integral coordinates)の&lt;code&gt;difference()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;、&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipolygon&lt;/code&gt;の距離の計算でのバグを修正(point内部のarealジオメトリを誤って検出していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten_iterator&lt;/code&gt;の代入演算子で、アクセス違反するバグを修正&lt;/li&gt;
&lt;li&gt;Cartesian segment-segmentの交差戦略のバグを修正。ひとつのセグメントの点への縮退(degenerate)が、ほかへの縮退をしないセグメントと同一線上にあるときに起こる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centroid()&lt;/code&gt;のバグを修正。たとえばゼロ面積のようなものを計算したときに、非決定的な結果になる&lt;/li&gt;
&lt;li&gt;限られたポイント数のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正。&lt;/li&gt;
&lt;li&gt;鋭いコーナーの周りにある限られたポイント数のround joinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;ポイント数を追加するround endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のflat endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きな負のバッファ距離のinterior ringでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;input rangeが空である場合に、&lt;code&gt;closing_iterator&lt;/code&gt;が動作しないバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring&lt;/code&gt;を含む閉じたシンプルなlinestringがハンドリングされない、&lt;code&gt;is_simple&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の、イテレータの組もしくはRangeを受け取るコンストラクタ(パッキングアルゴリズム)のバグを修正。破棄済みの一時オブジェクトへの参照を使用していた。これは、&lt;code&gt;distance()&lt;/code&gt;と&lt;code&gt;comparable_distance()&lt;/code&gt;にも影響する。このバグは、&lt;code&gt;rtree&lt;/code&gt;もしくは&lt;code&gt;distance()&lt;/code&gt;アルゴリズムで、アサーション失敗やセグメンテーションフォルトなど、予期しない動作をする可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;count()&lt;/code&gt;メンバ関数のバグを修正。破棄済みの一時オブジェクトの参照を使用していた。このバグが起こると、大きの場合に&lt;code&gt;0&lt;/code&gt;が返る。&lt;/li&gt;
&lt;li&gt;Rangeのハンドリング関係のバグを修正。いくつかのアルゴリズムで、非コンテナのRangeをジオメトリとして扱った場合に、コンパイルが通ってしまうことを防止する(Samuel Debionneに感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11148&#34; target=&#34;_blank&#34;&gt;ticket 11148&lt;/a&gt; 属性値集合に多くの属性値が挿入された際に &lt;code&gt;attribute_value_set::size()&lt;/code&gt; が正しくない挙動をしていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの改善および、IO操作とヘッダファイルについての記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none_t&lt;/code&gt;は即値の&lt;code&gt;0&lt;/code&gt;から変換できなくなった。これは&lt;code&gt;optional&amp;lt;rational&amp;lt;int&amp;gt;&amp;gt; oi = 0&lt;/code&gt;の様な例で値を格納していないoptionalのオブジェクトが生成されるのを防ぐためである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/code&gt;を定義することでムーヴセマンティックスを無効化できるようにした。これは&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10399&#34; target=&#34;_blank&#34;&gt;ticket 10399&lt;/a&gt;のためのワークアラウンドである&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10825&#34; target=&#34;_blank&#34;&gt;ticket 10825&lt;/a&gt; &lt;code&gt;optional_io.hpp&lt;/code&gt;のインクルードを忘れていた際に、&lt;code&gt;optional&lt;/code&gt;をストリームに渡すとリンクタイムエラーとなっていたのをコンパイルエラーとするように改良&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11087&#34; target=&#34;_blank&#34;&gt;ticket 11087&lt;/a&gt; &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;T&lt;/code&gt;に代入若しくは変換できない場合に&lt;code&gt;optional&amp;lt;U&amp;gt;&lt;/code&gt;を&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;に代入できてしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10839&#34; target=&#34;_blank&#34;&gt;ticket 10839&lt;/a&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;の値をmoveできなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.58.0リリースノート -- fix typo</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>6166d59837e0d79f93d29cb2c9197a401ef46bf8:document/version/1_58_0.md</id>
      <updated>2015-04-06 15:01:11 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;num_segments&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリのセグメント数を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;string&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効正に関するメッセージで埋める。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;enum&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効性に関する値を設定する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjoint&lt;/code&gt;と&lt;code&gt;intersects&lt;/code&gt;に、以下のジオメトリの組み合わせサポートを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;segment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;box&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;に、&lt;code&gt;linestring&lt;/code&gt;のためのflat-endサポートを追加。&lt;ul&gt;
&lt;li&gt;Buffer now supports flat-ends for linestrings with a bend close to the start (such that buffered segment crosses flat-end).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;のパフォーマンスを大幅に向上させた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Polygon&lt;/code&gt;の&lt;code&gt;Partition&lt;/code&gt;のパフォーマンスを大幅に向上させた。全てのオーバーレイ操作が改善する可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8379&#34; target=&#34;_blank&#34;&gt;#8379&lt;/a&gt; 行列式の比較結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10108&#34; target=&#34;_blank&#34;&gt;#10108&lt;/a&gt; ジオメトリの一つの点にtouchする特定の状況において、オーバーレイ操作がエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10201&#34; target=&#34;_blank&#34;&gt;#10201&lt;/a&gt; 座標系の比較に、別な関数を使用する提案(wontfix : 問題はあるけれど、いまは修正できない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10467&#34; target=&#34;_blank&#34;&gt;#10467&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10863&#34; target=&#34;_blank&#34;&gt;#10863&lt;/a&gt; テンプレートパラメータ名がtermios.hの&lt;code&gt;B0&lt;/code&gt;マクロと衝突している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10640&#34; target=&#34;_blank&#34;&gt;#10640&lt;/a&gt; CCW Polygonにおいて、&lt;code&gt;buffer()&lt;/code&gt;の結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10666&#34; target=&#34;_blank&#34;&gt;#10666&lt;/a&gt; MSVCコンパイラの警告C4127 : 「条件式が定数になっている」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10747&#34; target=&#34;_blank&#34;&gt;#10747&lt;/a&gt; 再スケジューリングが、areal/arealの設定操作が原因でエラーになっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10770&#34; target=&#34;_blank&#34;&gt;#10770&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;が巨大な距離、もしくはrough round joinで失敗する。失敗する場所は、凹所(concavities)の交差しないところ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10658&#34; target=&#34;_blank&#34;&gt;#10658&lt;/a&gt; &lt;code&gt;sym_difference&lt;/code&gt;が、&lt;code&gt;int&lt;/code&gt;のポリゴンに対して間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10835&#34; target=&#34;_blank&#34;&gt;#10835&lt;/a&gt; &lt;code&gt;multilinestring&lt;/code&gt;と&lt;code&gt;polygon&lt;/code&gt;の&lt;code&gt;difference&lt;/code&gt;が、間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10861&#34; target=&#34;_blank&#34;&gt;#10861&lt;/a&gt; &lt;code&gt;Rtree&lt;/code&gt;の&lt;code&gt;Value&lt;/code&gt;がポインタを含む&lt;code&gt;pair&lt;/code&gt;もしくは&lt;code&gt;tuple&lt;/code&gt;であり、&lt;code&gt;Geometry&lt;/code&gt;デフォルト比較の&lt;code&gt;equal_to&lt;/code&gt;を使用している場合に、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10887&#34; target=&#34;_blank&#34;&gt;#10887&lt;/a&gt; &lt;code&gt;Linear&lt;/code&gt;/&lt;code&gt;MultiPolygon&lt;/code&gt;の&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10890&#34; target=&#34;_blank&#34;&gt;#10890&lt;/a&gt; &lt;code&gt;Point&lt;/code&gt;/&lt;code&gt;Segment&lt;/code&gt;の&lt;code&gt;disjoint()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10904&#34; target=&#34;_blank&#34;&gt;#10904&lt;/a&gt; &lt;code&gt;relate_cartesian_segments&lt;/code&gt;戦略において、最上位次元のセグメントの計算が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10912&#34; target=&#34;_blank&#34;&gt;#10912&lt;/a&gt; &lt;code&gt;Areal&lt;/code&gt;/&lt;code&gt;Areal&lt;/code&gt;の&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10951&#34; target=&#34;_blank&#34;&gt;#10951&lt;/a&gt; WindowsのIntelコンパイラにおいて、&lt;code&gt;/bigobj&lt;/code&gt;フラグを設定するとテストに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10957&#34; target=&#34;_blank&#34;&gt;#10957&lt;/a&gt; 様々な関係操作において、アサーションが失敗し、不正な結果を出力する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10958&#34; target=&#34;_blank&#34;&gt;#10958&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt;と&lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;dijoint()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10959&#34; target=&#34;_blank&#34;&gt;#10959&lt;/a&gt; &lt;code&gt;no_rescale_policy&lt;/code&gt;を使用すると、&lt;code&gt;get_turns()&lt;/code&gt;がアサーションに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10960&#34; target=&#34;_blank&#34;&gt;#10960&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。turnが不足している。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10961&#34; target=&#34;_blank&#34;&gt;#10961&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。linear spikeのtrunが不正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11112&#34; target=&#34;_blank&#34;&gt;#11112&lt;/a&gt; Solarisプラットフォームのマクロ名との衝突により、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11121&#34; target=&#34;_blank&#34;&gt;#11121&lt;/a&gt; 整数座標系(integral coordinates)の&lt;code&gt;difference()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;、&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipolygon&lt;/code&gt;の距離の計算でのバグを修正(point内部のarealジオメトリを誤って検出していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten_iterator&lt;/code&gt;の代入演算子で、アクセス違反するバグを修正&lt;/li&gt;
&lt;li&gt;Cartesian segment-segmentの交差戦略のバグを修正。ひとつのセグメントの点への縮退(degenerate)が、ほかへの縮退をしないセグメントと同一線上にあるときに起こる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centroid()&lt;/code&gt;のバグを修正。たとえばゼロ面積のようなものを計算したときに、非決定的な結果になる&lt;/li&gt;
&lt;li&gt;限られたポイント数のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正。&lt;/li&gt;
&lt;li&gt;鋭いコーナーの周りにある限られたポイント数のround joinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;ポイント数を追加するround endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のflat endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きな負のバッファ距離のinterior ringでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;input rangeが空である場合に、&lt;code&gt;closing_iterator&lt;/code&gt;が動作しないバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring&lt;/code&gt;を含む閉じたシンプルなlinestringがハンドリングされない、&lt;code&gt;is_simple&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の、イテレータの組もしくはRangeを受け取るコンストラクタ(パッキングアルゴリズム)のバグを修正。破棄済みの一時オブジェクトへの参照を使用していた。これは、&lt;code&gt;distance()&lt;/code&gt;と&lt;code&gt;comparable_distance()&lt;/code&gt;にも影響する。このバグは、&lt;code&gt;rtree&lt;/code&gt;もしくは&lt;code&gt;distance()&lt;/code&gt;アルゴリズムで、アサーション失敗やセグメンテーションフォルトなど、予期しない動作をする可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;count()&lt;/code&gt;メンバ関数のバグを修正。破棄済みの一時オブジェクトの参照を使用していた。このバグが起こると、大きの場合に&lt;code&gt;0&lt;/code&gt;が返る。&lt;/li&gt;
&lt;li&gt;Rangeのハンドリング関係のバグを修正。いくつかのアルゴリズムで、非コンテナのRangeをジオメトリとして扱った場合に、コンパイルが通ってしまうことを防止する(Samuel Debionneに感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11148&#34; target=&#34;_blank&#34;&gt;ticket 11148&lt;/a&gt; 属性値集合に多くの属性値が挿入された際に &lt;code&gt;attribute_value_set::size()&lt;/code&gt; が正しくない挙動をしていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの改善および、IO操作とヘッダファイルについての記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none_t&lt;/code&gt;は即値の&lt;code&gt;0&lt;/code&gt;から変換できなくなった。これは&lt;code&gt;optional&amp;lt;rational&amp;lt;int&amp;gt;&amp;gt; oi = 0&lt;/code&gt;の様な例で値を格納していないoptionalのオブジェクトが生成されるのを防ぐためである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/code&gt;を定義することでムーヴセマンティックスを無効化できるようにした。これは&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10399&#34; target=&#34;_blank&#34;&gt;ticket 10399&lt;/a&gt;のためのワークアラウンドである&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10825&#34; target=&#34;_blank&#34;&gt;ticket 10825&lt;/a&gt; &lt;code&gt;optional_io.hpp&lt;/code&gt;のインクルードを忘れていた際に、&lt;code&gt;optional&lt;/code&gt;をストリームに渡すとリンクタイムエラーとなっていたのをコンパイルエラーとするように改良&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11087&#34; target=&#34;_blank&#34;&gt;ticket 11087&lt;/a&gt; &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;T&lt;/code&gt;に代入若しくは変換できない場合に&lt;code&gt;optional&amp;lt;U&amp;gt;&lt;/code&gt;を&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;に代入できてしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10839&#34; target=&#34;_blank&#34;&gt;ticket 10839&lt;/a&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;の値をmoveできなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.58.0リリースノート -- Boost 1.58.0リリースノート： Geometryを追加</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>194cf753081ec0306f220e87bf3558dd71c90b5a:document/version/1_58_0.md</id>
      <updated>2015-04-06 14:49:35 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;num_segments&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリのセグメント数を返す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;string&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効正に関するメッセージで埋める。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;アルゴリズムに、新たなオーバーロードを追加。これは2番目の引数で&lt;code&gt;enum&lt;/code&gt;の参照を受け取り、ジオメトリの有効性と無効性に関する値を設定する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjoint&lt;/code&gt;と&lt;code&gt;intersects&lt;/code&gt;に、以下のジオメトリの組み合わせサポートを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;segment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;box&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;に、&lt;code&gt;linestring&lt;/code&gt;のためのflat-endサポートを追加。&lt;ul&gt;
&lt;li&gt;Buffer now supports flat-ends for linestrings with a bend close to the start (such that buffered segment crosses flat-end).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt;のパフォーマンスを大幅に向上させた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Polygon&lt;/code&gt;の&lt;code&gt;Partition&lt;/code&gt;のパフォーマンスを大幅に向上させた。全てのオーバーレイ操作が改善する可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8379&#34; target=&#34;_blank&#34;&gt;#8379&lt;/a&gt; 行列式の比較結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10108&#34; target=&#34;_blank&#34;&gt;#10108&lt;/a&gt; ジオメトリの一つの点にtouchする特定の状況において、オーバーレイ操作がエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10201&#34; target=&#34;_blank&#34;&gt;#10201&lt;/a&gt; 座標系の比較に、別な関数を使用する提案(wontfix : 問題はあるけれど、いまは修正できない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10467&#34; target=&#34;_blank&#34;&gt;#10467&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10863&#34; target=&#34;_blank&#34;&gt;#10863&lt;/a&gt; テンプレートパラメータ名がtermios.hの&lt;code&gt;B0&lt;/code&gt;マクロと衝突している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10640&#34; target=&#34;_blank&#34;&gt;#10640&lt;/a&gt; CCW Polygonにおいて、&lt;code&gt;buffer()&lt;/code&gt;の結果が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10666&#34; target=&#34;_blank&#34;&gt;#10666&lt;/a&gt; MSVCコンパイラの警告C4127 : 「条件式が定数になっている」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10747&#34; target=&#34;_blank&#34;&gt;#10747&lt;/a&gt; 再スケジューリングが、areal/arealの設定操作が原因でエラーになっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10770&#34; target=&#34;_blank&#34;&gt;#10770&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;が巨大な距離、もしくはrough round joinで失敗する。失敗する場所は、凹所(concavities)の交差しないところ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10658&#34; target=&#34;_blank&#34;&gt;#10658&lt;/a&gt; &lt;code&gt;sym_difference&lt;/code&gt;が、&lt;code&gt;int&lt;/code&gt;のポリゴンに対して間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10835&#34; target=&#34;_blank&#34;&gt;#10835&lt;/a&gt; &lt;code&gt;multilinestring&lt;/code&gt;と&lt;code&gt;polygon&lt;/code&gt;の&lt;code&gt;difference&lt;/code&gt;が、間違った結果を生成する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10861&#34; target=&#34;_blank&#34;&gt;#10861&lt;/a&gt; &lt;code&gt;Rtree&lt;/code&gt;の&lt;code&gt;Value&lt;/code&gt;がポインタを含む&lt;code&gt;pair&lt;/code&gt;もしくは&lt;code&gt;tuple&lt;/code&gt;であり、&lt;code&gt;Geometry&lt;/code&gt;デフォルト比較の&lt;code&gt;equal_to&lt;/code&gt;を使用している場合に、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10887&#34; target=&#34;_blank&#34;&gt;#10887&lt;/a&gt; &lt;code&gt;Linear&lt;/code&gt;/&lt;code&gt;MultiPolygon&lt;/code&gt;の&lt;code&gt;wdithin()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10890&#34; target=&#34;_blank&#34;&gt;#10890&lt;/a&gt; &lt;code&gt;Point&lt;/code&gt;/&lt;code&gt;Segment&lt;/code&gt;の&lt;code&gt;disjoint()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10904&#34; target=&#34;_blank&#34;&gt;#10904&lt;/a&gt; &lt;code&gt;relate_cartesian_segments&lt;/code&gt;戦略において、最上位次元のセグメントの計算が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10912&#34; target=&#34;_blank&#34;&gt;#10912&lt;/a&gt; &lt;code&gt;Areal&lt;/code&gt;/&lt;code&gt;Areal&lt;/code&gt;の&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;relate()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10951&#34; target=&#34;_blank&#34;&gt;#10951&lt;/a&gt; WindowsのIntelコンパイラにおいて、&lt;code&gt;/bigobj&lt;/code&gt;フラグを設定するとテストに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10957&#34; target=&#34;_blank&#34;&gt;#10957&lt;/a&gt; 様々な関係操作において、アサーションが失敗し、不正な結果を出力する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10958&#34; target=&#34;_blank&#34;&gt;#10958&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt;と&lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;dijoint()&lt;/code&gt;が、不正な結果になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10959&#34; target=&#34;_blank&#34;&gt;#10959&lt;/a&gt; &lt;code&gt;no_rescale_policy&lt;/code&gt;を使用すると、&lt;code&gt;get_turns()&lt;/code&gt;がアサーションに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10960&#34; target=&#34;_blank&#34;&gt;#10960&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。turnが不足している。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10961&#34; target=&#34;_blank&#34;&gt;#10961&lt;/a&gt; &lt;code&gt;L&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;の&lt;code&gt;get_turns()&lt;/code&gt;が不正な結果になる。linear spikeのtrunが不正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11112&#34; target=&#34;_blank&#34;&gt;#11112&lt;/a&gt; Solarisプラットフォームのマクロ名との衝突により、コンパイルエラーになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11121&#34; target=&#34;_blank&#34;&gt;#11121&lt;/a&gt; 整数座標系(integral coordinates)の&lt;code&gt;difference()&lt;/code&gt;が不正な結果になる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;、&lt;code&gt;multipoint&lt;/code&gt;/&lt;code&gt;multipolygon&lt;/code&gt;の距離の計算でのバグを修正(point内部のarealジオメトリを誤って検出していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten_iterator&lt;/code&gt;の代入演算子で、アクセス違反するバグを修正&lt;/li&gt;
&lt;li&gt;Cartesian segment-segmentの交差戦略のバグを修正。ひとつのセグメントの点への縮退(degenerate)が、ほかへの縮退をしないセグメントと同一線上にあるときに起こる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centroid()&lt;/code&gt;のバグを修正。たとえばゼロ面積のようなものを計算したときに、非決定的な結果になる&lt;/li&gt;
&lt;li&gt;限られたポイント数のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正。&lt;/li&gt;
&lt;li&gt;鋭いコーナーの周りにある限られたポイント数のround joinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のjoinでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;ポイント数を追加するround endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きなバッファ距離のflat endでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;大きな負のバッファ距離のinterior ringでの、&lt;code&gt;buffer&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;input rangeが空である場合に、&lt;code&gt;closing_iterator&lt;/code&gt;が動作しないバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring&lt;/code&gt;を含む閉じたシンプルなlinestringがハンドリングされない、&lt;code&gt;is_simple&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の、イテレータの組もしくはRangeを受け取るコンストラクタ(パッキングアルゴリズム)のバグを修正。破棄済みの一時オブジェクトへの参照を使用していた。これは、&lt;code&gt;distance()&lt;/code&gt;と&lt;code&gt;comparable_distance()&lt;/code&gt;にも影響する。このバグは、&lt;code&gt;rtree&lt;/code&gt;もしくは&lt;code&gt;distance()&lt;/code&gt;アルゴリズムで、アサーション失敗やセグメンテーションフォルトなど、予期しない動作をする可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;count()&lt;/code&gt;メンバ関数のバグを修正。破棄済みの一時オブジェクトの参照を使用していた。このバグが起こると、大きの場合に&lt;code&gt;0&lt;/code&gt;が返る。&lt;/li&gt;
&lt;li&gt;Rangeのハンドリング関係のバグを修正。いくつかのアルゴリズムで、非コンテナのRangeをジオメトリとして扱った場合に、コンパイルが通ってしまうことを防止する(Samuel Debionneに感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11148&#34; target=&#34;_blank&#34;&gt;ticket 11148&lt;/a&gt; 属性値集合に多くの属性値が挿入された際に &lt;code&gt;attribute_value_set::size()&lt;/code&gt; が正しくない挙動をしていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの改善および、IO操作とヘッダファイルについての記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none_t&lt;/code&gt;は即値の&lt;code&gt;0&lt;/code&gt;から変換できなくなった。これは&lt;code&gt;optional&amp;lt;rational&amp;lt;int&amp;gt;&amp;gt; oi = 0&lt;/code&gt;の様な例で値を格納していないoptionalのオブジェクトが生成されるのを防ぐためである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/code&gt;を定義することでムーヴセマンティックスを無効化できるようにした。これは&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10399&#34; target=&#34;_blank&#34;&gt;ticket 10399&lt;/a&gt;のためのワークアラウンドである&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10825&#34; target=&#34;_blank&#34;&gt;ticket 10825&lt;/a&gt; &lt;code&gt;optional_io.hpp&lt;/code&gt;のインクルードを忘れていた際に、&lt;code&gt;optional&lt;/code&gt;をストリームに渡すとリンクタイムエラーとなっていたのをコンパイルエラーとするように改良&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11087&#34; target=&#34;_blank&#34;&gt;ticket 11087&lt;/a&gt; &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;T&lt;/code&gt;に代入若しくは変換できない場合に&lt;code&gt;optional&amp;lt;U&amp;gt;&lt;/code&gt;を&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;に代入できてしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10839&#34; target=&#34;_blank&#34;&gt;ticket 10839&lt;/a&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;の値をmoveできなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>計算幾何 -- Merge pull request #31 from rydotyosh/patch-2
</title>
      <link href="http://boostjp.github.io/tips/geometry.html"/>
      <id>26f0cea5b7d1c984bafb4e1e9fa510435a4b1e5b:tips/geometry.md</id>
      <updated>2015-04-04 19:56:18 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;計算幾何&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;計算幾何は、&lt;a href=&#34;http://www.boost.org/libs/geometry/index.html&#34; target=&#34;_blank&#34;&gt;Boost Geometry Library&lt;/a&gt;によって提供される。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34; name=&#34;disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が互いに素かを判定するには、&lt;code&gt;boost::geometry::disjoint()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;disjoint()&lt;/code&gt;関数は、2つの図形が重なりあっていなければ&lt;code&gt;true&lt;/code&gt;、重なり合っていたら&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;同士が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// A. &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+  b&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B. not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   b  |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   +--+---+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +---+--+   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;と&lt;code&gt;point_xy&lt;/code&gt;が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           b&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |  b   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34; name=&#34;intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が交点を持っているかを判定するには、&lt;code&gt;boost::geometry::intersects()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;2つの線が交わっているかの判定：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  line2&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ---+---- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っている&lt;/span&gt;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line2&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っていない&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34; name=&#34;within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形がもう一方の図形の内側にあるかを判定するには、&lt;code&gt;boost::geometry::within()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;within()&lt;/code&gt;関数は、第1引数の図形が、第2引数の図形の完全な内側にあれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点が四角形内にあるかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometry.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point top_left(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point bottom_right(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box   box(top_left, bottom_right);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;within&lt;/span&gt;(p, box)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;in&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;out&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;in
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34; name=&#34;equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が空間的に等しいかを判定するには、&lt;code&gt;boost::geometry::equals()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;図形の形が同じでも位置が異なれば&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;以下は、三角形からなる四角形と、四角形が等しいか判定する処理：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/adapted/boost_tuple.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

BOOST_GEOMETRY_REGISTER_BOOST_TUPLE_CS(cs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cartesian)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// poly&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ae    d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// | +   |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   + |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// b     c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (0,0)&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       (3,3)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple_list_of(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;(poly, box);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (result) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34; name=&#34;area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の面積を計算するには、&lt;code&gt;boost::geometry::area()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;以下は、四角形と三角形の面積を計算する例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box x(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// polygon&lt;/span&gt;
    {
        polygon x;
        bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(x) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
4.5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34; name=&#34;centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の中心座標を計算するには、&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;か、&lt;code&gt;boost::geometry::return_centroid&amp;lt;Point&amp;gt;()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;関数は、中心座標の点を第2引数で参照として返し、&lt;code&gt;boost::geometry::return_centroid()&lt;/code&gt;関数は、中心座標の点を戻り値で返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return_centroid()&lt;/code&gt;関数は、テンプレート引数でPoint Conceptの型を指定する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三角形の中心座標を求める(&lt;code&gt;centroid&lt;/code&gt;を使用)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    point p;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;centroid&lt;/span&gt;(poly, p);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;return_centroid&lt;/code&gt;を使った場合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_centroid&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34; name=&#34;convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の凸包を計算するには、&lt;code&gt;boost::geometry::convex_hull()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数で図形を渡すと、第2引数で参照として凸包の図形が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    polygon hull;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;convex_hull&lt;/span&gt;(poly, hull);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;polygon: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hull: &#34;&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(hull) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;polygon: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
hull: (((2, 1.3), (2.4, 1.7), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/convex_hull.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑色部分が入力した図形。点線部分が計算された凸包図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34; name=&#34;distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の距離を計算するには、&lt;code&gt;boost::geometry::distance()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;distance()&lt;/code&gt;関数は、図形間の最短距離を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点と点の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point a(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(a, b);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点と三角形の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(p, poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34; name=&#34;difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の差を計算するには、&lt;code&gt;boost::geometry::difference()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の差が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bx - poly&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;difference&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された差の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/difference.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;difference()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34; name=&#34;union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の和を計算するには、&lt;code&gt;boost::geometry::union_()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の和が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;union_&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された和の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/union_.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;union_()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;p&gt;注：&lt;code&gt;union_()&lt;/code&gt;関数の名前がアンダーバーで終わっているのは、&lt;code&gt;union&lt;/code&gt;がC++言語仕様において予約語と定められているためである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34; name=&#34;intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の共通部分を計算するには、&lt;code&gt;boost::geometry::intersection()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の共通部分が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersection&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された共通部分の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/intersection.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;intersection()&lt;/code&gt;で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34; name=&#34;envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の包絡線を計算するには、&lt;code&gt;boost::geometry::envelope()&lt;/code&gt;を計算する。&lt;/p&gt;
&lt;p&gt;第1引数として渡した図形の包絡線が、Box Conceptの型として第2引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    box bx;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;envelope&lt;/span&gt;(poly, bx);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;計算された包絡線の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/envelope.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;envelope()&lt;/code&gt;で計算された包絡線。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;boost::geometry::return_envelope&amp;lt;Box&amp;gt;()&lt;/code&gt;を使用すれば、参照ではなく戻り値として包絡線が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_envelope&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34; name=&#34;length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の長さを計算するには、線の場合には&lt;code&gt;boost::geometry::length()&lt;/code&gt;関数を使用し、三角形の場合には&lt;code&gt;boost::geometry::perimeter()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;線の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;length&lt;/span&gt;(line);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15.1127
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三角形の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;perimeter&lt;/span&gt;(poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;13.6569
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34; name=&#34;reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を逆向きにするには、&lt;code&gt;boost::geometry::reverse()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;reverse&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, 1), (3, 3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34; name=&#34;simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を単純化するには、&lt;code&gt;boost::geometry::simplify()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 : 単純化する元となる図形&lt;/li&gt;
&lt;li&gt;第2引数 : 出力先変数への参照&lt;/li&gt;
&lt;li&gt;第3引数 : 単純化の距離&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;線を単純化する例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        ;

    linestring result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;simplify&lt;/span&gt;(line, result, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((3, 3), (3.8, 4), (6, 6), (4, 9), (5, 8), (7, 7))
((3, 3), (6, 6), (4, 9), (7, 7))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/simplify.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が元となった図形。オレンジの点線が&lt;code&gt;simplify()&lt;/code&gt;によって単純化された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34; name=&#34;unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;重複した点を削除するには、&lt;code&gt;boost::geometry::unique()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;unique&lt;/span&gt;(line);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((0, 0), (1, 1), (3, 3), (1, 1))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34; name=&#34;translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を平行移動するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数で、&lt;code&gt;translate_transformer&lt;/code&gt;戦略ポリシーを使用して移動量を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1.5, 1.5)移動する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : xの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : yの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : zの移動量(省略可)&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;translate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((1.5, 1.5), (4.5, 4.5), (4.5, 1.5), (1.5, 1.5)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34; name=&#34;scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を拡大縮小するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;scale_transformer&lt;/code&gt;戦略ポリシーを使用して拡大率を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3倍に拡大する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 倍率&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;scale_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (9, 9), (9, 0), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34; name=&#34;rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を回転するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;rotate_transformer&lt;/code&gt;戦略ポリシーを使用して回転する角度を指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotate_transformer&lt;/code&gt;のテンプレート引数で、角度の単位を選択できる。デグリ：&lt;code&gt;boost::geometry::degree&lt;/code&gt;、ラジアン：&lt;code&gt;boost::geometry::radian&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;回転は、原点(0, 0)を中心に時計回りに行われる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rotate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point, point, &lt;span style=&#34;color:#ff0000&#34;&gt;bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;degree&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;90.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, -3), (1.83691e-016, -3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/rotate.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が回転前、オレンジの点線が回転後の図形。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
    <entry>
      <title>計算幾何 -- サンプルコード(intersection)の色を変更。</title>
      <link href="http://boostjp.github.io/tips/geometry.html"/>
      <id>246926e51aacb316a0c5719f2d6d0f20bfcd084e:tips/geometry.md</id>
      <updated>2015-04-04 19:45:37 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;計算幾何&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;計算幾何は、&lt;a href=&#34;http://www.boost.org/libs/geometry/index.html&#34; target=&#34;_blank&#34;&gt;Boost Geometry Library&lt;/a&gt;によって提供される。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34; name=&#34;disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が互いに素かを判定するには、&lt;code&gt;boost::geometry::disjoint()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;disjoint()&lt;/code&gt;関数は、2つの図形が重なりあっていなければ&lt;code&gt;true&lt;/code&gt;、重なり合っていたら&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;同士が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// A. &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+  b&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B. not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   b  |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   +--+---+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +---+--+   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;と&lt;code&gt;point_xy&lt;/code&gt;が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           b&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |  b   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34; name=&#34;intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が交点を持っているかを判定するには、&lt;code&gt;boost::geometry::intersects()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;2つの線が交わっているかの判定：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  line2&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ---+---- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っている&lt;/span&gt;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line2&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っていない&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34; name=&#34;within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形がもう一方の図形の内側にあるかを判定するには、&lt;code&gt;boost::geometry::within()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;within()&lt;/code&gt;関数は、第1引数の図形が、第2引数の図形の完全な内側にあれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点が四角形内にあるかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometry.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point top_left(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point bottom_right(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box   box(top_left, bottom_right);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;within&lt;/span&gt;(p, box)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;in&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;out&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;in
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34; name=&#34;equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が空間的に等しいかを判定するには、&lt;code&gt;boost::geometry::equals()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;図形の形が同じでも位置が異なれば&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;以下は、三角形からなる四角形と、四角形が等しいか判定する処理：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/adapted/boost_tuple.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

BOOST_GEOMETRY_REGISTER_BOOST_TUPLE_CS(cs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cartesian)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// poly&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ae    d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// | +   |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   + |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// b     c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (0,0)&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       (3,3)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple_list_of(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;(poly, box);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (result) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34; name=&#34;area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の面積を計算するには、&lt;code&gt;boost::geometry::area()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;以下は、四角形と三角形の面積を計算する例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box x(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// polygon&lt;/span&gt;
    {
        polygon x;
        bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(x) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
4.5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34; name=&#34;centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の中心座標を計算するには、&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;か、&lt;code&gt;boost::geometry::return_centroid&amp;lt;Point&amp;gt;()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;関数は、中心座標の点を第2引数で参照として返し、&lt;code&gt;boost::geometry::return_centroid()&lt;/code&gt;関数は、中心座標の点を戻り値で返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return_centroid()&lt;/code&gt;関数は、テンプレート引数でPoint Conceptの型を指定する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三角形の中心座標を求める(&lt;code&gt;centroid&lt;/code&gt;を使用)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    point p;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;centroid&lt;/span&gt;(poly, p);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;return_centroid&lt;/code&gt;を使った場合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_centroid&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34; name=&#34;convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の凸包を計算するには、&lt;code&gt;boost::geometry::convex_hull()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数で図形を渡すと、第2引数で参照として凸包の図形が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    polygon hull;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;convex_hull&lt;/span&gt;(poly, hull);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;polygon: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hull: &#34;&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(hull) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;polygon: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
hull: (((2, 1.3), (2.4, 1.7), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/convex_hull.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑色部分が入力した図形。点線部分が計算された凸包図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34; name=&#34;distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の距離を計算するには、&lt;code&gt;boost::geometry::distance()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;distance()&lt;/code&gt;関数は、図形間の最短距離を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点と点の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point a(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(a, b);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点と三角形の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(p, poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34; name=&#34;difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の差を計算するには、&lt;code&gt;boost::geometry::difference()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の差が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bx - poly&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;difference&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された差の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/difference.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;difference()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34; name=&#34;union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の和を計算するには、&lt;code&gt;boost::geometry::union_()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の和が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;union_&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された和の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/union_.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;union_()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;p&gt;注：&lt;code&gt;union_()&lt;/code&gt;関数の名前がアンダーバーで終わっているのは、&lt;code&gt;union&lt;/code&gt;がC++言語仕様において予約語と定められているためである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34; name=&#34;intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の共通部分を計算するには、&lt;code&gt;boost::geometry::intersection()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の共通部分が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersection&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;計算された共通部分の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/intersection.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;intersection()&lt;/code&gt;で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34; name=&#34;envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の包絡線を計算するには、&lt;code&gt;boost::geometry::envelope()&lt;/code&gt;を計算する。&lt;/p&gt;
&lt;p&gt;第1引数として渡した図形の包絡線が、Box Conceptの型として第2引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    box bx;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;envelope&lt;/span&gt;(poly, bx);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;計算された包絡線の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/envelope.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;envelope()&lt;/code&gt;で計算された包絡線。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;boost::geometry::return_envelope&amp;lt;Box&amp;gt;()&lt;/code&gt;を使用すれば、参照ではなく戻り値として包絡線が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_envelope&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34; name=&#34;length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の長さを計算するには、線の場合には&lt;code&gt;boost::geometry::length()&lt;/code&gt;関数を使用し、三角形の場合には&lt;code&gt;boost::geometry::perimeter()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;線の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;length&lt;/span&gt;(line);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15.1127
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三角形の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;perimeter&lt;/span&gt;(poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;13.6569
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34; name=&#34;reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を逆向きにするには、&lt;code&gt;boost::geometry::reverse()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;reverse&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, 1), (3, 3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34; name=&#34;simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を単純化するには、&lt;code&gt;boost::geometry::simplify()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 : 単純化する元となる図形&lt;/li&gt;
&lt;li&gt;第2引数 : 出力先変数への参照&lt;/li&gt;
&lt;li&gt;第3引数 : 単純化の距離&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;線を単純化する例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        ;

    linestring result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;simplify&lt;/span&gt;(line, result, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((3, 3), (3.8, 4), (6, 6), (4, 9), (5, 8), (7, 7))
((3, 3), (6, 6), (4, 9), (7, 7))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/simplify.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が元となった図形。オレンジの点線が&lt;code&gt;simplify()&lt;/code&gt;によって単純化された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34; name=&#34;unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;重複した点を削除するには、&lt;code&gt;boost::geometry::unique()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;unique&lt;/span&gt;(line);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((0, 0), (1, 1), (3, 3), (1, 1))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34; name=&#34;translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を平行移動するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数で、&lt;code&gt;translate_transformer&lt;/code&gt;戦略ポリシーを使用して移動量を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1.5, 1.5)移動する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : xの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : yの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : zの移動量(省略可)&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;translate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((1.5, 1.5), (4.5, 4.5), (4.5, 1.5), (1.5, 1.5)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34; name=&#34;scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を拡大縮小するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;scale_transformer&lt;/code&gt;戦略ポリシーを使用して拡大率を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3倍に拡大する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 倍率&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;scale_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (9, 9), (9, 0), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34; name=&#34;rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を回転するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;rotate_transformer&lt;/code&gt;戦略ポリシーを使用して回転する角度を指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotate_transformer&lt;/code&gt;のテンプレート引数で、角度の単位を選択できる。デグリ：&lt;code&gt;boost::geometry::degree&lt;/code&gt;、ラジアン：&lt;code&gt;boost::geometry::radian&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;回転は、原点(0, 0)を中心に時計回りに行われる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rotate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point, point, &lt;span style=&#34;color:#ff0000&#34;&gt;bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;degree&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;90.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, -3), (1.83691e-016, -3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/rotate.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が回転前、オレンジの点線が回転後の図形。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>らいどっと</name>
        <email>ryogo.yoshimura@gmail.com</email>
      </author>
    </entry>
  
</feed>