<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2014-12-10T17:02:05.227664</updated>
  <id>f73ac5ee-bc7a-461b-95c7-dbdc4501b01a</id>

  
    <entry>
      <title>Negators -- Boost.Functional : Negatorsを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html"/>
      <id>af3876aff4114b123e715c0cd553746d626a4b30:archive/boost_docs/libs/functional/negators.md</id>
      <updated>2014-12-10 17:01:54 +0900</updated>
      
        <content type="html">&lt;h1&gt;Negators&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準 (§20.3.5) 由来のネゲータアダプタの両方の強化バージョンを提供する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unary_negate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_negate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に対応するヘルパ関数も提供する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このライブラリのネゲータは標準バージョンを二つの方法で改良する。&lt;/p&gt;
&lt;p&gt;適合関数オブジェクトではなく関数を否定する時、それらは &lt;code&gt;ptr_fun&lt;/code&gt; の必要を回避するために、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html&#34;&gt;function object traits&lt;/a&gt; を用いる。&lt;/p&gt;
&lt;p&gt;それらは引数や適合された関数に渡す引数を宣言する最上の方法を決するため、Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;call traits&lt;/a&gt; を用いる。(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html#arguments&#34;&gt;下記&lt;/a&gt;参照)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/usage&#34; name=&#34;usage&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使い型は標準ネゲータと同様である。例えば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;bad&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Foo &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;foo) { ... }
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(c.begin(), c.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(bad));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/arguments&#34; name=&#34;arguments&#34;&gt;Argument Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ 標準 (§20.3.5) は unary negate をこのように定義 している。(binary negate も似ている):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unary_negate&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; unary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type,&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; unary_negate(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred);
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; が参照であった場合、 &lt;code&gt;operator()&lt;/code&gt; の引数の型は参照の参照になることに注意しなさい。これは、現在の C++ では非合法である。(ただし &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)。&lt;/p&gt;
&lt;p&gt;しかしながら、もし代わりに &lt;code&gt;operator()&lt;/code&gt; を &lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; を変更せずにそのまま採用して定義すると、それが値型であった場合不必要に非効率になってしまう。それは引数が二度コピーされることによる。一度は &lt;code&gt;unary_negate&lt;/code&gt; の &lt;code&gt;operator()&lt;/code&gt; を呼ぶ時、さらに適合された関数で &lt;code&gt;operator()&lt;/code&gt; を呼ぶ時にもう一度である。&lt;/p&gt;
&lt;p&gt;つまり&lt;code&gt;operator()&lt;/code&gt; を宣言する望ましい方法は、 &lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; が参照であるか否かに依 る。もしそれが参照であれば、単純に &lt;code&gt;argument_type&lt;/code&gt; として宣言したいし、それが値であれば &lt;code&gt;const argument_type&amp;amp;&lt;/code&gt; として宣言したいのである。&lt;/p&gt;
&lt;p&gt;Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; クラステンプレートは &lt;code&gt;param_type&lt;/code&gt; &lt;code&gt;typedef&lt;/code&gt; を含んでいて、それは部分特 殊化版を用いて正確にこの判断を行う。&lt;code&gt;operator()&lt;/code&gt; を 以下のように宣言することによって。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; call_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

我々は望ましい結果を引き出した - 参照の参照を生み出すことなく、効率性を得たのだ。実のところ、実際の宣言は関数オブジェクト特性を使うためもう少し複雑である。しかし効果は同様である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/limitations&#34; name=&#34;limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;この関数オブジェクト特性の両方と call traits はこの改良を実現するために使われる関数オブジェクト特性と &lt;code&gt;call_traits&lt;/code&gt; の両方が部分特殊化版に頼っているので、この改良は部分特殊化版の機能を持つコンパイラでのみ有効である。 そうでないコンパイラでは、このライブラリのネゲータは標準内のそれらと非常に似た振る舞いをする - 関数に適合するために &lt;code&gt;ptr_fun&lt;/code&gt; が必要であるし、参照の参照は避けられないだろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Function Object Traits -- Boost.Functional  : Function Object Traitsを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html"/>
      <id>0b74481c9208ce36326e28edc87e38f4df86f8ab:archive/boost_docs/libs/functional/function_traits.md</id>
      <updated>2014-12-10 16:31:04 +0900</updated>
      
        <content type="html">&lt;h1&gt;Function Object Traits&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは関数と関数オブジェクトのための、二つの特性クラステンプレートを提供します:&lt;/p&gt;
&lt;p&gt;| Type | Contents | Description |
| &lt;code&gt;template &amp;lt;typename T&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;struct unary_traits&lt;/code&gt; | &lt;code&gt;function_type&lt;/code&gt; | 関数や関数オブジェクト自身の型 (例えば &lt;code&gt;T&lt;/code&gt;)。 |
| | &lt;code&gt;param_type&lt;/code&gt;    | 関数や関数オブジェクトをパラメータとして渡すために使われるべき型。 |
| | &lt;code&gt;result_type&lt;/code&gt;   | 関数や関数オブジェクトの返り値の型。 |
| | &lt;code&gt;argument_type&lt;/code&gt; | 関数や関数オブジェクトの引数の型。 |
| &lt;code&gt;template &amp;lt;typename T&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;struct binary_traits&lt;/code&gt; | &lt;code&gt;function_type&lt;/code&gt; | 関数や関数オブジェクト自身の型 (例えば &lt;code&gt;T&lt;/code&gt;)。 |
| | &lt;code&gt;param_type&lt;/code&gt;  | 関数や関数オブジェクトをパラメータとして渡すために使われるべき型。 |
| | &lt;code&gt;result_type&lt;/code&gt; | 関数や関数オブジェクトの返り値の型。 |
| | &lt;code&gt;first_argument_type&lt;/code&gt;  | 関数や関数オブジェクトの第一引数の型。 |
| | &lt;code&gt;second_argument_type&lt;/code&gt; | 関数や関数オブジェクトの第二引数の型。 |&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unary_traits&lt;/code&gt; は一引数を取る関数と適合一引数関数オブジェクト (例えば &lt;code&gt;std::unary_function&lt;/code&gt; を継承したクラス) や、同様の &lt;code&gt;typedef&lt;/code&gt; がなされたクラス)のどちらかとともに実体化されなければならない。(C++ 標準の §20.3.1 を参照せよ)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;binary_traits&lt;/code&gt; は二引数を取る関数と適合二引数関数オブジェクト (例えば &lt;code&gt;std::binary_function&lt;/code&gt; を継承したクラス) や、同様の &lt;code&gt;typedef&lt;/code&gt; がなされたクラス)のどちらかとともに実体化されなければならない。(C++ 標準の §20.3.1 を参照せよ)&lt;/p&gt;
&lt;p&gt;これらのテンプレートのもっとも一般的な使い方は、関数オブジェクトアダプタ内で、関数オブジェクトと同様に普通の関数を適合させることである。普段例えば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type
&lt;/pre&gt;&lt;/div&gt;

と書く所ならどこでも、代わりに&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unary_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Operation&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;argument_type
&lt;/pre&gt;&lt;/div&gt;

と書くだけで良い。&lt;/p&gt;
&lt;h2&gt;Additional Types Defined&lt;/h2&gt;
&lt;p&gt;標準の返り値と引数の &lt;code&gt;typedef&lt;/code&gt; に加えて、これらの特性テンプレートは二つの型を定義する。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;function_type&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;これは関数や関数オブジェクトの型である。そして、宣言の中で以下のように使われる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unary_negate&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
  &lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; unary_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Predicate&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;function_type pred;
};
&lt;/pre&gt;&lt;/div&gt;

もしこの &lt;code&gt;typedef&lt;/code&gt; がなければ、&lt;code&gt;unary_negate&lt;/code&gt;を関数型とともに実体化させることができる方法で、&lt;code&gt;pred&lt;/code&gt;を宣言することはできないだろう。(C++ 標準の §14.3.1 ¶3 を参照せよ)&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;param_type&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;これは関数や関数オブジェクトを他の関数に引数として渡すのに最適な型である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unary_negate&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
{
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; unary_negate(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; unary_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Predicate&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type x)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
        pred(x)
    {}
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;

関数オブジェクトは定数参照で渡され、関数ポインタは値渡しされる。&lt;/p&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;このライブラリは全てのアダプタ関数オブジェクトでこれらの特性を利用していて、理論的には、&lt;code&gt;ptr_fun&lt;/code&gt;を廃止されるようにする。しかし、サードパーティのアダプタは多分このメカニズムを利用しないだろうし、&lt;code&gt;ptr_fun&lt;/code&gt;は未だ必要である。このライブラリは標準関数ポインタアダプタの改善バージョンを提供する。&lt;/p&gt;
&lt;p&gt;これらの特性テンプレートも、テンプレートの部分特殊化版を提供できないコンパイラでは動かないだろう。これらのコンパイラでは、特性テンプレートは適合関数オブジェクトでのみ実体化され、このライブラリの関数オブジェクトとももに用いる場合でさえ、&lt;code&gt;ptr_fun&lt;/code&gt;を使う必要があるだろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>各ライブラリの翻訳ドキュメント -- Boost.Functional : トップページを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs.html"/>
      <id>69b4866542be3da30bb997d61e29ddde60ad2328:archive/boost_docs/libs.md</id>
      <updated>2014-12-10 16:21:11 +0900</updated>
      
        <content type="html">&lt;h1&gt;各ライブラリの翻訳ドキュメント&lt;/h1&gt;
&lt;p&gt;ここでは、Boost 1.31.0時点での各ライブラリの翻訳ドキュメントを掲載する。&lt;/p&gt;
&lt;p&gt;最新バージョンへの追従は行っていないことに注意されたし。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ライブラリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array.html&#34;&gt;array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL に準拠した定数サイズの配列のラッパコンテナ。Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;bind&lt;/a&gt; and &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数、オブジェクト、ポインタ、メンバ関数のための汎用的なバインダ。 Peter Dimov 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/compatibility.html&#34;&gt;compatibility&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準に準拠しないプラットフォームでのライブラリの利用に役立つ。Ralf Grosse-Kunstleve and Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/compose.html&#34;&gt;compose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL の為の関数合成アダプタ Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html&#34;&gt;concept_check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックプログラミングのためのツール群。 Jeremy Siek 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion.html&#34;&gt;conversion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数学的、多相的、辞書的キャスト Dave Abrahams and Kevlin Henney 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;date_time&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付/時間ライブラリ Jeff Garland 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html&#34;&gt;disjoint_sets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;互いに素な集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format.html&#34;&gt;format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型安全な printf 風の書式化操作。Samuel Krempp 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;遅延呼び出し及びコールバックのための関数オブジェクトラッパ。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional.html&#34;&gt;functional&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機能強化された関数オブジェクトアダプタ。 Mark Rodgers 作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Improved Function Object Adapters -- Boost.Functional : トップページを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional.html"/>
      <id>69b4866542be3da30bb997d61e29ddde60ad2328:archive/boost_docs/libs/functional.md</id>
      <updated>2014-12-10 16:21:11 +0900</updated>
      
        <content type="html">&lt;h1&gt;Improved Function Object Adapters&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/functional/&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/functional/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準ライブラリの関数オブジェクトアダプタ(セクション 20.3.5 から 20.3.8)を強化する。この強化は主に二つの変更を行う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我々は、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html#refref&#34;&gt;参照の参照&lt;/a&gt; 問題を回避し、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html#args&#34;&gt;引数渡し&lt;/a&gt; の効率を良くするために、Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; テンプレートを使う。&lt;/li&gt;
&lt;li&gt;我々は、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html&#34;&gt;&lt;code&gt;ptr_fun&lt;/code&gt;&lt;/a&gt; の必要性を回避するために、このライブラリのアダプタとともに、ふたつの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html&#34;&gt;function object traits&lt;/a&gt; を使う。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;p&gt;このヘッダは以下の関数・クラステンプレートを含む:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分類&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html&#34;&gt;Function object traits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unary_traits&lt;/code&gt;&lt;br /&gt; &lt;code&gt;binary_traits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトや関数の引数型を決定するために使われる。&lt;code&gt;ptr_fun&lt;/code&gt;の必要性を除去する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html&#34;&gt;Negators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unary_negate&lt;/code&gt;&lt;br /&gt; &lt;code&gt;binary_negate&lt;/code&gt;&lt;br /&gt; &lt;code&gt;not1&lt;/code&gt;&lt;br /&gt; &lt;code&gt;not2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準のセクション 20.3.5 に基づく。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html&#34;&gt;Binders&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;binder1st&lt;/code&gt;&lt;br /&gt; &lt;code&gt;binder2nd&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bind1st&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bind2nd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準のセクション 20.3.6 に基づく。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html&#34;&gt;Adapters for pointers to functions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pointer_to_unary_function&lt;/code&gt;&lt;br /&gt; &lt;code&gt;pointer_to_binary_function&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptr_fun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準のセクション 20.3.7 に基づく。このライブラリとともに使用する場合はバインダやネゲータは関数に適合できるので不要である。しかし、サードパーティのアダプタに必要とされるかもしれない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html&#34;&gt;Adapters for pointers to member functions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mem_fun_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;mem_fun1_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;const_mem_fun_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;const_mem_fun1_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;mem_fun_ref_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;mem_fun1_ref_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;const_mem_fun_ref_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;const_mem_fun1_ref_t&lt;/code&gt;&lt;br /&gt; &lt;code&gt;mem_fun&lt;/code&gt;&lt;br /&gt; &lt;code&gt;mem_fun_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準のセクション 20.3.8 に基づく。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;これらのアダプタの使い方は標準関数オブジェクトアダプタの使い方にとてもよく似ている。唯一の違いは、&lt;code&gt;std::&lt;/code&gt; の代わりに &lt;code&gt;boost::&lt;/code&gt; と書く必要があることだけである。そうすればあなたの頭痛は軽減される。&lt;/p&gt;
&lt;p&gt;例えば、あなたが &lt;code&gt;set_name&lt;/code&gt; 関数を持つ&lt;code&gt;Person&lt;/code&gt;クラスを持っていると考えてほしい:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Person&lt;/span&gt;
{
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set_name(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;name);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;

あなたは以下のように書くことによって、コレクション &lt;code&gt;c&lt;/code&gt; 中の &lt;code&gt;Person&lt;/code&gt; の束を改名できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.begin(), c.end(), 
              boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set_name), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Fred&#34;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

もし代わりに標準アダプタが使われていれば、このコードは普通、コンパイルに失敗する。それは、&lt;code&gt;set_name&lt;/code&gt; が参照引数を取るからである。何故こうなるかを解明したければ、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html#refref&#34;&gt;バインダのドキュメント&lt;/a&gt; の中のコメントを参照するとよい。&lt;/p&gt;
&lt;h2&gt;Compiler Compatibility&lt;/h2&gt;
&lt;p&gt;このヘッダと &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_test.cpp.html&#34;&gt;テストプログラム&lt;/a&gt; は以下のコンパイラでコンパイルされる:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コンパイラ&lt;/th&gt;
&lt;th&gt;コメント&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Borland C++Builder 4 Update 2&lt;/td&gt;
&lt;td&gt;既知の問題はない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Borland C++ 5.5&lt;/td&gt;
&lt;td&gt;既知の問題はない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g++ 2.95.2&lt;/td&gt;
&lt;td&gt;既知の問題はない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft Visual C++ Service Pack 3&lt;/td&gt;
&lt;td&gt;コンパイラが部分特殊化版を欠いているため、このライブラリは標準アダプタによって提供されるより、少しだけしか多くの機能を提供しない。&lt;br /&gt; ・参照の参照問題を回避するための &lt;code&gt;call_traits&lt;/code&gt; メカニズムが使えない。それゆえ、このライブラリのアダプタはより少ない状況でしか使えないだろう。&lt;br /&gt; ・関数の引数や返り値型を特定するための &lt;code&gt;function_traits&lt;/code&gt; メカニズムが使えない。それゆえ、関数を適合させるため、&lt;code&gt;ptr_fun&lt;/code&gt; が引き続き必要になる。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Future Directions&lt;/h2&gt;
&lt;p&gt;このライブラリの第一目的は、できる限り多くの標準ライブラリの互換性を 持つ、参照の参照問題に対する解である。これによって本や雑誌で読む技術を 今日のたくさんのコンパイラで使うことができる。&lt;/p&gt;
&lt;p&gt;長期的には、より良い解は以下のようなものだろう:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;幾人かの Boost のメンバは式テンプレートのライブラリを作成し ている。これらによって、関数の結合や適合が自然な文法で行えるだろう。 これは新しい技術なので、それが熟して、有名なコンパイラに広くサポートされるまでに時間がかかるかもしれないが、大きな成功となるだろう。それまでは、この functional.hpp ライブラリがギャップを埋める。&lt;/li&gt;
&lt;li&gt;標準委員会はテンプレートの実体化に際して参照の参照問題が起きることを認識していて、標準を修正する気になっている( &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Author&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/mark_rodgers.htm&#34; target=&#34;_blank&#34;&gt;Mark Rodgers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/john_maddock.htm&#34; target=&#34;_blank&#34;&gt;John Maddock&lt;/a&gt; for suggesting the mechanism that allowed the function objects traits to work correctly. &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jens_maurer.htm&#34; target=&#34;_blank&#34;&gt;Jens Maurer&lt;/a&gt; provided invaluable feedback during the &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/more/formal_review_process.htm&#34; target=&#34;_blank&#34;&gt;formal review process&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>libs/functional/function_test.cpp -- Boost.Functional : トップページを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/function_test.cpp.html"/>
      <id>69b4866542be3da30bb997d61e29ddde60ad2328:archive/boost_docs/libs/functional/function_test.cpp.md</id>
      <updated>2014-12-10 16:21:11 +0900</updated>
      
        <content type="html">&lt;h1&gt;libs/functional/function_test.cpp&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Tests for the Boost functional.hpp header file&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Note that functional.hpp relies on partial specialisation to be&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// effective.  If your compiler lacks this feature, very few of the&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// tests would compile, and so have been excluded from the test.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Copyright (c) 2000&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Cadenza New Zealand Ltd&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission to use, copy, modify, distribute and sell this software&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// and its documentation for any purpose is hereby granted without&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fee, provided that the above copyright notice appears in all copies&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// and that both the copyright notice and this permission notice&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// appear in supporting documentation.  Cadenza New Zealand Ltd makes&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// no representations about the suitability of this software for any&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// purpose.  It is provided &#34;as is&#34; without express or implied&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// warranty.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// $Id: function_test.cpp,v 1.2 2001/09/22 11:52:24 johnmaddock Exp $&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// $Log: function_test.cpp,v $&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Revision 1.2  2001/09/22 11:52:24  johnmaddock&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Intel C++ fixes: no void return types supported.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Revision 1.1.1.1  2000/07/07 16:04:18  beman&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1.16.1 initial CVS checkin&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Revision 1.3  2000/06/26 09:44:01  mark&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Updated following feedback from Jens Maurer.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Revision 1.2  2000/05/17 08:31:45  mark&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Added extra tests now that function traits work correctly.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// For compilers with no support for partial specialisation,&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// excluded tests that won&#39;t work.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Revision 1.1  2000/05/07 09:14:41  mark&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Initial revision&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------------------------------------------------------&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// To demonstrate what the boosted function object adapters do for&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// you, try compiling with USE_STD defined.  This will endeavour to&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// use the standard function object adapters, but is likely to result&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// in numerous errors due to the fact that you cannot have references&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// to references.&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifdef USE_STD&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#define boost std&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#else&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/functional.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Person&lt;/span&gt;
{
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Person() {}
    Person(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;n) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; name(n) {}

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;get_name() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; name; }
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; }
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set_name(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;n) { name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; n; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string clear_name() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; name; name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ret; }
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; do_something(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; {}

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_fred() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Fred&#34;&lt;/span&gt;; }

  &lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt;
{
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_equal(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;s1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;s2)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; s2;
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_betty(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;s)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; do_set_name(Person &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;name)
    {
        p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;set_name(name);
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; do_set_name_ref(Person &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;name)
    {
        p.set_name(name);
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1;
    v1.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Fred&#34;&lt;/span&gt;);
    v1.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Wilma&#34;&lt;/span&gt;);
    v1.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Barney&#34;&lt;/span&gt;);
    v1.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cv1(v1.begin(), v1.end());

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2;
    v2.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Fred&#34;&lt;/span&gt;);
    v2.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Wilma&#34;&lt;/span&gt;);
    v2.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Barney&#34;&lt;/span&gt;);
    v2.push_back(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;);

    Person person;
    Person &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; person;

    Person &lt;span style=&#34;color: #0000FF&#34;&gt;fred&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Fred&#34;&lt;/span&gt;);
    Person &lt;span style=&#34;color: #0000FF&#34;&gt;wilma&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Wilma&#34;&lt;/span&gt;);
    Person &lt;span style=&#34;color: #0000FF&#34;&gt;barney&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Barney&#34;&lt;/span&gt;);
    Person &lt;span style=&#34;color: #0000FF&#34;&gt;betty&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; v3;
    v3.push_back(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;fred);
    v3.push_back(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;wilma);
    v3.push_back(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;barney);
    v3.push_back(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;betty);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cv3(v3.begin(), v3.end());
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Person&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; v3c(v3.begin(), v3.end());

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;os &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION) &amp;amp;&amp;amp; !defined(__ICL)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// unary_traits, unary_negate&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(is_betty));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v1.begin(), v1.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_fred)));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// binary_traits, binary_negate&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not2(is_equal), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not2(is_equal), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pointer_to_unary_function&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(is_betty)));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// binary_traits, bind1st, bind2nd&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(is_equal, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v2.begin(), v2.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(is_equal, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Betty&#34;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pointer_to_binary_function, bind1st&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(do_set_name), &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(do_set_name_ref), person));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(do_set_name_ref), r));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// binary_traits&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(do_set_name, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(do_set_name_ref, person));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(do_set_name_ref, r));
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// const_mem_fun_t&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v3.begin(), v3.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get_name));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(cv3.begin(), cv3.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get_name));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v3c.begin(), v3c.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get_name));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// const_mem_fun_ref_t&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v1.begin(), v1.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get_name));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(cv1.begin(), cv1.end(),
                   std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get_name));

&lt;span style=&#34;color: #BC7A00&#34;&gt;#ifndef BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// const_mem_fun1_t, bind2nd&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v3.begin(), v3.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v3.begin(), v3.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print), os));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// const_mem_fun1_ref_t, bind2nd&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v1.begin(), v1.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v1.begin(), v1.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print), os));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// mem_fun1_t, bind1st&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set_name), &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// mem_fun1_ref_t, bind1st&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set_name), person));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v2.begin(), v2.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;set_name), r));
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// mem_fun_t&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v3.begin(), v3.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;clear_name));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// mem_fun_ref_t&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transform(v1.begin(), v1.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;),
                   boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;clear_name));    

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Header `&lt;boost/function.hpp&gt;` -- Boost.Function : FAQを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/function.html"/>
      <id>8c046698c88d93e44f47d0eb44294020d8a920ce:archive/boost_docs/libs/function.md</id>
      <updated>2014-12-08 16:35:52 +0900</updated>
      
        <content type="html">&lt;h1&gt;Header &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/doc/html/function.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/doc/html/function.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダファイル &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt; に含まれるのは、関数オブジェクトのラッパとなるクラステンプレート群である。 Boost.Function の概念はコールバックを一般化したものだ。 Boost.Function は以下の点で関数ポインタと共通の特徴をもっている。 1 つは、何らかの実装によって呼び出される「呼び出しのインタフェース」 (例: 2 つの &lt;code&gt;int&lt;/code&gt; 型引数を取り、 &lt;code&gt;float&lt;/code&gt; を返す関数) を定義していること。もう 1 つは、呼び出される実装をプログラム実行中に変更できる事だ。&lt;/p&gt;
&lt;p&gt;一般に、遅延呼び出しやコールバックを実現するために関数ポインタを使うあらゆる場面で、代わりに Boost.Function を使用できる。そして、それによって呼ばれる側の実装はぐっと自由になる。呼ばれる側にはあらゆる「互換性のある」関数オブジェクト (や関数ポインタ) が指定できる。「互換性がある」とは、 Boost.Function に渡した引数が、対象となる関数オブジェクトの引数に変換できるということだ(訳注：戻り値にも互換性が必要)。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#compatibility-note&#34;&gt;Compatibility Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html&#34;&gt;Reference manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#function-vs-function-pointers&#34;&gt;Boost.Function vs. Function Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#design-rationale&#34;&gt;Design rationale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/compatibility-note&#34; name=&#34;compatibility-note&#34;&gt;Compatibility Note&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function は、インタフェースを小さく、分かりやすくするために、一部が再設計された。昔の Boost.Function にあった、いくつかのめったに (または決して) 使われない機能は推奨されなくなり、近々削除される。以下に推奨されなくなった機能とその理由、それに伴うコードの修正法をリストアップする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::function&lt;/code&gt; クラステンプレートの文法が変更された。以前は&lt;code&gt;boost::function&amp;lt;int, float, double, std::string&amp;gt;&lt;/code&gt;のように書いたが、 &lt;code&gt;boost::function&amp;lt;int (float, double, std::string)&amp;gt;&lt;/code&gt;のような、より自然な書き方になった。戻り値と全ての引数の型が、 1 つの関数型のパラメータに収まる事になったのだ。残りのテンプレートパラメータ (&lt;code&gt;Allocator&lt;/code&gt;など) が、この関数型パラメータの後に続く。
    この変更への対応は、コンパイラに依存する。あなたのコンパイラがテンプレートの部分特殊化版をサポートし、関数型をパース (これは大抵 OK) できるなら、新しい文法を使うようにソースを修正してもいいし (推奨) 、文法が変わっていない&lt;code&gt;functionN&lt;/code&gt; クラスを直接使ってもいい。あなたのコンパイラがテンプレートの部分特殊化版か関数型をサポートしていなければ、&lt;code&gt;functionN&lt;/code&gt;クラスを使う必要がある。&lt;code&gt;functionN&lt;/code&gt;クラスを使うように修正するのは簡単で、クラス名の最後に引数の数を加えるだけだ (例: &lt;code&gt;boost::function&amp;lt;void, int, int&amp;gt;&lt;/code&gt; を &lt;code&gt;boost::function2&amp;lt;void, int, int&amp;gt;&lt;/code&gt; に変更) 。
    &lt;code&gt;boost::function&lt;/code&gt; クラステンプレートの古い文法のサポートはしばらく続くが、いつかは削除される。削除した方がエラーメッセージが分かりやすくなり、リンク互換性が良くなるからだ。&lt;/li&gt;
&lt;li&gt;呼び出しポリシーのテンプレートパラメータ (&lt;code&gt;Policy&lt;/code&gt;) は推奨されておらず、将来削除される。この機能はめったに使われないので、代替となる機能は無い。&lt;/li&gt;
&lt;li&gt;ミックスインのテンプレートパラメータ (&lt;code&gt;Mixin&lt;/code&gt;) は推奨されておらず、将来削除される。この機能はめったに使われないので、代替となる機能は無い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; メソッドは推奨されておらず、将来削除される。代わりに代入演算子を使えば良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい文法に移行し、推奨されない機能を削除するためには、 &lt;code&gt;BOOST_FUNCTION_NO_DEPRECATED&lt;/code&gt; プリプロセサマクロを定義する。このマクロを定義すると、推奨されない全ての機能が使えなくなる。 &lt;code&gt;BOOST_FUNCTION_NO_DEPRECATED&lt;/code&gt; を使ってコンパイルされたプログラムなら、推奨されない機能が削除されても大丈夫だ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function-vs-function-pointers&#34; name=&#34;function-vs-function-pointers&#34;&gt;Boost.Function vs. Function Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function には関数ポインタに比べていくつかの利点がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Function は、任意の互換性がある関数オブジェクトを格納できる (関数ポインタは全く同じシグネチャを持つ関数しか受け付けない) 。&lt;/li&gt;
&lt;li&gt;Boost.Function は、引数の束縛などの関数オブジェクトを作り出すライブラリと共用できる。&lt;/li&gt;
&lt;li&gt;Boost.Function を使えば、空の関数オブジェクトの呼び出しを、デバッグ時に簡単に検出できる。&lt;/li&gt;
&lt;li&gt;Boost.Function では、それぞれの呼び出しの前後に、ある操作を実行するように指定できる。例えば、同期用の基本命令を関数型の一部にすることができる(訳注：この機能 (呼び出しポリシー) は推奨されておらず、将来削除される)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そしてもちろん、関数ポインタにも Boost.Function に比べていくつかの利点がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタはサイズが小さい (関数ポインタはポインタ 1 つ、 Boost.Function はポインタ 3 つ) 。&lt;/li&gt;
&lt;li&gt;関数ポインタは高速だ (Boost.Function は関数ポインタを通した呼び出しを 2 回する可能性がある) 。&lt;/li&gt;
&lt;li&gt;関数ポインタは C のライブラリと下位互換性がある。&lt;/li&gt;
&lt;li&gt;エラーメッセージが読みやすい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上 2 つのリストは Darin Adler のコメントを編集したものである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/performance&#34; name=&#34;performance&#34;&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Function object wrapper size&lt;/h3&gt;
&lt;p&gt;関数オブジェクトのラッパのサイズは 2 つの関数ポインタと、 1 つの関数ポインタまたはデータのポインタ (の大きい方) のサイズになる。一般的な 32 ビットプラットフォームでは、 1 つのラッパ当たり 12 バイトになる。さらに、対象となる関数オブジェクトがヒープに割り当てられる。&lt;/p&gt;
&lt;h3&gt;Copying efficiency&lt;/h3&gt;
&lt;p&gt;関数オブジェクトのラッパのコピーによって、格納された関数オブジェクトのコピーのためにメモリ割り当てが発生する。デフォルトのアロケータを、もっと速いカスタムアロケータで置換することもできる。また、関数オブジェクトのラッパが、対象となる関数オブジェクトの「参照」を格納するように指定できる (&lt;code&gt;ref&lt;/code&gt;を使用) 。これは関数オブジェクトのコピーが酷く高価な場合に有効だ。&lt;/p&gt;
&lt;h3&gt;Invocation efficiency&lt;/h3&gt;
&lt;p&gt;適切なインライン化を行うコンパイラならば、関数オブジェクトの呼び出しによって、関数ポインタを通した呼び出しが 1 回行われる。非メンバ関数ポインタの呼び出しならば、その関数ポインタの呼び出しに加えて、もう 1 回の呼び出しが行われる (コンパイラがとても強力な関数をまたいだ分析を行うならば別だが) 。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/portability&#34; name=&#34;portability&#34;&gt;Portability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function は、できるだけ移植性を高めるように、できるだけ多くのコンパイラ (C++ 標準準拠度が低いものも含む) をサポートするように設計されている。以下のコンパイラは &lt;code&gt;boost::function&lt;/code&gt;に含まれる全てのテストケースに合格した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 2.95.3&lt;/li&gt;
&lt;li&gt;GCC 3.0&lt;/li&gt;
&lt;li&gt;SGI MIPSpro 7.3.0&lt;/li&gt;
&lt;li&gt;Borland C++ 5.5.1&lt;/li&gt;
&lt;li&gt;Comeau C++ 4.2.45.2&lt;/li&gt;
&lt;li&gt;Metrowerks Codewarrior 6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下のコンパイラでも &lt;code&gt;boost::function&lt;/code&gt;を使えるが、いくつか問題がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 6.0 (service pack 5): アロケータはサポートされない。 &lt;code&gt;boost::function&lt;/code&gt; クラステンプレートにいくつか問題がある ( &lt;code&gt;boost::functionN&lt;/code&gt; の方は動作するようだ) 。&lt;/li&gt;
&lt;li&gt;Intel C++ 5.0: アロケータはサポートされない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あなたのコンパイラが上のリストになければ、 &lt;code&gt;boost::function&lt;/code&gt; ライブラリを使えるかチェックするための小さなテスト群があるので、これを使える。標準に準拠したコンパイラなら、修正無しでコードをコンパイルできるはずだが、問題が起きたらバグレポートを送ってほしい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/design-rationale&#34; name=&#34;design-rationale&#34;&gt;Design rationale&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Combatting virtual function bloat&lt;/h3&gt;
&lt;p&gt;多くのコンパイラでは、仮想関数の使用によって「コードの膨張」が起きがちである。クラスが仮想関数を持つ場合、オブジェクトの型を分類する補助関数を作る必要がある。私達の経験では、多くの &lt;code&gt;boost::function&lt;/code&gt; オブジェクトが使われると、この補助関数が実行可能ファイルのサイズを大きく膨張させる。&lt;/p&gt;
&lt;p&gt;Boost.Function では、仮想関数の代わりに非メンバ関数を使った、代わりの等価なアプローチをとっている。 Boost.Function オブジェクトが関数オブジェクトを呼び出すためには、本質的に 2 つのポインタを持つ必要がある。所有する関数オブジェクトへの &lt;code&gt;void&lt;/code&gt; ポインタと、関数オブジェクトの「呼び出し役」への &lt;code&gt;void&lt;/code&gt; ポインタ (関数ポインタが代入される) だ。 Boost.Function が提供する、引数と戻り値の変換は、この呼び出し役が実行する。第 3 のポインタは「管理者」と呼ばれる非メンバ関数を指す。これは関数オブジェクトのコピーと破棄を扱う。この方法はタイプセーフだ。なぜなら、関数オブジェクトを実際に扱う関数である呼び出し役と管理者は、関数オブジェクトの型を知らされてインスタンス化されるので、入ってくる &lt;code&gt;void&lt;/code&gt; ポインタ (関数オブジェクトへのポインタ) を、正しい型に安全にキャストできるからだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;たくさんの人がこのライブラリの作成に参加した。 William Kempf 、 Jesse Jones 、 Karl Nelson は、ライブラリのインタフェースと守備範囲を、他のライブラリとは独立したものにする上で大きな助けになってくれた。 John Maddock は公式なレビューをやってくれた。他にもたくさんの人がレビューをして、インタフェース、実装、ドキュメントについて優れたコメントを寄せてくれた。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Douglas Gregor&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;このドキュメントの対象: Boost Version 1.29.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boost::function FAQ -- Boost.Function : FAQを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/function/faq.html"/>
      <id>8c046698c88d93e44f47d0eb44294020d8a920ce:archive/boost_docs/libs/function/faq.md</id>
      <updated>2014-12-08 16:35:52 +0900</updated>
      
        <content type="html">&lt;h1&gt;boost::function FAQ&lt;/h1&gt;
&lt;h2&gt;Q: &lt;code&gt;void&lt;/code&gt; ポインタを見かけたが、これはタイプセーフなのか？&lt;/h2&gt;
&lt;p&gt;はい。 &lt;code&gt;boost::function&lt;/code&gt; は &lt;code&gt;void&lt;/code&gt; ポインタや、戻り値も引数もない関数ポインタを使っているが、タイプセーフだ。関数ポインタや関数オブジェクトを管理/実行する関数の中には、全ての型の情報が書き込まれている。 &lt;code&gt;void&lt;/code&gt; ポインタや &lt;code&gt;void&lt;/code&gt; 関数ポインタが指す本当の型を知らされてインスタンス化されるのは、これらの管理/実行用関数だけなのだ。 &lt;code&gt;void&lt;/code&gt; ポインタと &lt;code&gt;void&lt;/code&gt; 関数ポインタの両方が必要な理由は、オブジェクトへのポインタと &lt;code&gt;void&lt;/code&gt; ポインタは互いに安全にキャストでき、異なる型の関数ポインタ同士も安全にキャストできることだ (ただし、異なる型で関数ポインタを呼び出してはならない) 。&lt;/p&gt;
&lt;h2&gt;Q: なぜ &lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; の回避手段を取っているのか？ C++ では許されているはずだ！&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; は C++ 標準で許されている。以下はこれを使ったコードの一部だ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;();
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;g&lt;/span&gt;() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f(); }
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; を使わない理由の 1 つとして、全てのコンパイラが &lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; をサポートしているわけではないことが挙げられる。実際には、このちょっとした機能をサポートするコンパイラはごく一部だ。さらに、 &lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; を使わないことで、 &lt;code&gt;boost::function&lt;/code&gt; はもっと柔軟になった。以下の例を考えてみよう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;do_something&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f;
f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; do_something;
&lt;/pre&gt;&lt;/div&gt;

この &lt;code&gt;boost::function&lt;/code&gt; の使い方が有効なのは、 &lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; が使われていないからだ。 &lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; を使うと、以下のコードと同等の不正なコードをコンパイルしようとすることになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;();
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;g&lt;/span&gt;() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f(); }
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;void&lt;/code&gt; の &lt;code&gt;return&lt;/code&gt; を使わないことで、 &lt;code&gt;boost::function&lt;/code&gt; は戻り値を飲み込めるようになる、というのが本質なのだ。このことは、「ぴったり一致しないパラメータを持つ関数や関数オブジェクトを代入/実行できる」こととも一貫している。&lt;/p&gt;
&lt;h2&gt;Q: なぜ (関数を) コピーするのか？&lt;/h2&gt;
&lt;p&gt;2000 年の 11 ～ 12 月に、コピー vs. 参照の論争が長々と繰り広げられた。その結果、コピーの方が予測しやすいセマンティクスになるという結論になった。私はここでその議論を蒸し返すつもりはない。コピーが不適当な場合は、参照カウント式アロケータを使えばよい。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Douglas Gregor&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:39:27 EDT 2002&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;このドキュメントの対象: Boost Version 1.29.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Function Reference Manual -- 脚注のアンカーを設定</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/function/reference.html"/>
      <id>eacba182e052e1e910cdd0d34df61c612906a878:archive/boost_docs/libs/function/reference.md</id>
      <updated>2014-12-08 15:56:15 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost.Function Reference Manual&lt;/h1&gt;
&lt;h2&gt;Header &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt; synopsis&lt;/h2&gt;
&lt;p&gt;以下で、 &lt;code&gt;MAX_ARGS&lt;/code&gt; は実装定義の定数であり、 Boost.Function でサポートされる引数の数の最大値 (少なくとも 10) である。このドキュメント中で参照される &lt;code&gt;MAX_ARGS&lt;/code&gt; 定数は、ライブラリ中で直接的には定義されていない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;function_base&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined safe_bool;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [0, MAX_ARGS] の範囲の全ての N について&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
           ...
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;function_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;functionN&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; function_base, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Mixin
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ResultType result_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#note&#34;&gt;[1]&lt;/a&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Policy     policy_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Mixin      mixin_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Allocator  allocator_type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 argument_type;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 1 の場合&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 first_argument_type;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 2 の場合&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg2 second_argument_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 2 の場合&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 arg1_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg2 arg2_type;
             .
             .
             .
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ArgN argN_type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { arity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; N };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;functionN&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
    functionN(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 代入&lt;/span&gt;
    functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;swap&lt;/span&gt;(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clear&lt;/span&gt;();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool 型の文脈&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; safe_bool() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 呼び出し&lt;/span&gt;
    result_type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Arg1 a1, Arg2 a2, ..., ArgN aN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ResultType,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
           ...
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;,
            functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [0, MAX_ARGS] の範囲の全ての N について&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型: ResultType (Arg1, Arg2, ..., ArgN)&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;function_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築&lt;/span&gt;
    function();
    function(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    function(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 代入&lt;/span&gt;
    function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;,
            function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/definitions&#34; name=&#34;definitions&#34;&gt;定義&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引数型 &lt;code&gt;Arg1&lt;/code&gt;, &lt;code&gt;Arg2&lt;/code&gt;, ..., &lt;code&gt;ArgN&lt;/code&gt; と戻り値型 &lt;code&gt;ResultType&lt;/code&gt; に対して、該当する以下の関数が適格な時、関数オブジェクト &lt;code&gt;f&lt;/code&gt; は「 互換性がある 」という。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型が void 以外の場合&lt;/span&gt;
ResultType &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;(Arg1 arg1, Arg2 arg2, ..., ArgN argN)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f(arg1, arg2, ..., argN);
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型が void の場合&lt;/span&gt;
ResultType &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;(Arg1 arg1, Arg2 arg2, ..., ArgN argN)
{
  f(arg1, arg2, ..., argN);
}
&lt;/pre&gt;&lt;/div&gt;

メンバ関数ポインタには、特別な規定がある。メンバ関数ポインタは関数オブジェクトではないが、 Boost.Function は内部的にメンバ関数ポインタを関数オブジェクトに作り変える。 &lt;code&gt;R (X::*mf)(Arg1, Arg2, ..., ArgN) cv-quals&lt;/code&gt; の形のメンバ関数ポインタは、以下のように関数呼出し演算子をオーバロードした関数オブジェクトに作り変えられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; P&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
R &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(cv&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;quals P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, Arg1 arg1, Arg2 arg2, ..., ArgN argN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;x).&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;mf(arg1, arg2, ..., argN);
}
&lt;/pre&gt;&lt;/div&gt;

- &lt;code&gt;F&lt;/code&gt; が関数ポインタであるか、 &lt;code&gt;boost::is_stateless&amp;lt;T&amp;gt;&lt;/code&gt; が真の時、 &lt;code&gt;F&lt;/code&gt; 型の関数オブジェクト &lt;code&gt;f&lt;/code&gt; は「 状態を持たない 」という。状態を持たない関数オブジェクトの Boost.Function での構築/コピーは発生せず、例外は起きず、記憶域の割り当ても起きない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Class &lt;code&gt;function_base&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラス &lt;code&gt;function_base&lt;/code&gt; は全ての Boost.Function オブジェクトに共通する基底クラスだ。 &lt;code&gt;function_base&lt;/code&gt; 型のオブジェクトが直接作られることはないだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: 関数オブジェクトを格納していれば &lt;code&gt;true&lt;/code&gt; 、そうでなければ &lt;code&gt;false&lt;/code&gt; 。
- 例外: 例外を起こさない。&lt;/p&gt;
&lt;h2&gt;Class template &lt;code&gt;functionN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;functionN&lt;/code&gt; は実際には、 &lt;code&gt;function0&lt;/code&gt;, &lt;code&gt;function1&lt;/code&gt;, ... と、ある実装定義の最大値まで続く、関連するクラス群である。以下の文では、 &lt;code&gt;N&lt;/code&gt; はパラメータの数、 &lt;code&gt;f&lt;/code&gt; は暗黙のオブジェクトパラメータを表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;functionN&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
&lt;/pre&gt;&lt;/div&gt;

- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;f.empty()&lt;/code&gt;
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;functionN(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーを格納する。 &lt;code&gt;g.empty()&lt;/code&gt; ならば &lt;code&gt;f&lt;/code&gt; も空になる。 &lt;code&gt;f&lt;/code&gt; のミックスインは、 &lt;code&gt;g&lt;/code&gt; のミックスインからコピーされる。
- 例外: &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーや &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F g, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g&lt;/code&gt; は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;互換性がある&lt;/a&gt;関数オブジェクトであること。
- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; のコピーを格納する。 &lt;code&gt;g&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きず、 &lt;code&gt;g&lt;/code&gt; が状態を持たない関数オブジェクトならば、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g.get()&lt;/code&gt; は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;互換性がある&lt;/a&gt;関数オブジェクトであること。
- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;g.get()&lt;/code&gt; が空でなければ、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; (&lt;code&gt;g.get()&lt;/code&gt;のコピーではない) を格納する。 &lt;code&gt;g.get()&lt;/code&gt; が空ならば、 &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt; が真となる。
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーを格納する。 &lt;code&gt;g.empty()&lt;/code&gt; ならば、 &lt;code&gt;f&lt;/code&gt; も空になる。 &lt;code&gt;f&lt;/code&gt; のミックスインには &lt;code&gt;g&lt;/code&gt; のミックスインが代入される。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;g&lt;/code&gt; が&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;状態を持たない&lt;/a&gt;関数オブジェクトを格納しているか、 &lt;code&gt;g&lt;/code&gt; が関数オブジェクトへの参照を格納してる場合は、例外を起こさない。ただし、 &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトのコピーで例外が起きた場合を除く。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g&lt;/code&gt; は互換性がある関数オブジェクトであること。
- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; のコピーを格納する。 &lt;code&gt;g&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;g&lt;/code&gt; が状態を持たない関数オブジェクトを格納していれば、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g.get()&lt;/code&gt; が互換性がある関数オブジェクトであること。
- 事後条件: &lt;code&gt;g.get()&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g.get()&lt;/code&gt; ( &lt;code&gt;g.get()&lt;/code&gt; のコピーではない) を格納する。 &lt;code&gt;g.get()&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;this&lt;/code&gt; が格納していた関数オブジェクトの破棄で例外が起きた場合のみ、例外を起こす。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;*this = g&lt;/code&gt;
- 注意: この関数の使用は推奨されない。この関数は Boost.Function の将来のバージョンで削除される。代わりに代入演算子を使って欲しい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;*this = g&lt;/code&gt;
- 注意: この関数の使用は推奨されない。この関数は Boost.Function の将来のバージョンで削除される。代わりに代入演算子を使って欲しい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;swap&lt;/span&gt;(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトを交換し、 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; のミックスインを交換する。
- 例外: 例外は発生しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clear&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;!empty()&lt;/code&gt;ならば、格納する関数オブジェクトを破棄する。
- 事後条件: &lt;code&gt;empty()&lt;/code&gt;が真になる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; safe_bool() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;!empty()&lt;/code&gt;と等価な&lt;code&gt;safe_bool&lt;/code&gt; 。
- 例外: 例外は発生しない。
- 注意: &lt;code&gt;safe_bool&lt;/code&gt; 型は bool 型が予想される場所 (例: &lt;code&gt;if&lt;/code&gt; の条件) に使用できる。しかし、 &lt;code&gt;bool&lt;/code&gt; 型で起きる暗黙の型変換 (例: &lt;code&gt;int&lt;/code&gt;型への変換) は許されない。これによってユーザの間違いの元を減らせることがある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;
- 例外: 例外は発生しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;result_type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Arg1 a1, Arg2 a2, ..., ArgN aN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: !empty()
- 作用: 以下で、 &lt;code&gt;target&lt;/code&gt; は格納された関数オブジェクトである。 &lt;code&gt;target&lt;/code&gt; 変数には &lt;code&gt;const&lt;/code&gt; 修飾子や &lt;code&gt;volatile&lt;/code&gt; 修飾子が付いていない (ので、関数呼出し演算子に &lt;code&gt;const&lt;/code&gt; 修飾子や &lt;code&gt;volatile&lt;/code&gt; 修飾子が付いている必要はない) 。
    1. &lt;code&gt;policy_type policy;&lt;/code&gt;
    2. &lt;code&gt;policy.precall(this);&lt;/code&gt;
    3. &lt;code&gt;target(a1, a2, ..., aN);&lt;/code&gt;
    4. &lt;code&gt;policy.postcall(this);&lt;/code&gt;
- 戻り値: &lt;code&gt;target&lt;/code&gt; の戻り値。
- 注意: 呼び出しポリシーは推奨されなくなり、今後のリリースで削除される。&lt;/p&gt;
&lt;h2&gt;Class template &lt;code&gt;function&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;function&lt;/code&gt; は、番号付きクラステンプレート &lt;code&gt;function0&lt;/code&gt;, &lt;code&gt;function1&lt;/code&gt;, ... の薄いラッパである。 &lt;code&gt;MAX_ARGS&lt;/code&gt; までの引数を受け付ける。 &lt;code&gt;N&lt;/code&gt; 個の引数を渡されれば、 &lt;code&gt;functionN&lt;/code&gt; (引数 &lt;code&gt;N&lt;/code&gt; 個専用のクラス) から派生する。&lt;/p&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;function&lt;/code&gt; のメンバ関数のセマンティクスは、全て &lt;code&gt;functionN&lt;/code&gt; オブジェクトと同じである。ただし、 &lt;code&gt;function&lt;/code&gt; オブジェクトの正しいコピーコンストラクトやコピーの代入のために、追加のメンバ関数を定義している。&lt;/p&gt;
&lt;h3&gt;Operations&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ResultType,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
         ...
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; f,
          functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f.swap(g);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; f,
          function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f.swap(g);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/note&#34; name=&#34;note&#34;&gt;脚注&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] : コンパイラが &lt;code&gt;void&lt;/code&gt; 型の &lt;code&gt;return&lt;/code&gt; をサポートしていない場合、 &lt;code&gt;ReturnType&lt;/code&gt; に &lt;code&gt;void&lt;/code&gt; を指定すると、 Boost.Function オブジェクトの &lt;code&gt;result_type&lt;/code&gt; は実装依存になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Douglas Gregor&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:40:09 EDT 2002&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;このドキュメントの対象: Boost Version 1.29.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>