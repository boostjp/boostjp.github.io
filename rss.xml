<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-11-14T10:48:39.881026</updated>
  <id>5b7eb001-5e60-480c-8b2a-1b61f5059b86</id>

  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Outcomeを追加 (close #512)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>985d6306411ac1c3133c7b498ef9ddcb3023d580:document/version/1_75_0.md</id>
      <updated>2020-11-14T19:47:08+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;来年、Boostの3リリース後がv2.1ブランチの最終リリースとなる。Boost 1.76以降、v2.2ブランチがデフォルトになる。このブランチでは、v2.1に対するいくつかの大きな破壊的変更がある。詳細はドキュメントを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ADL検出のイベントフックを、ポリシー指定のイベントフックに置き換えた。これは脆弱性 (だれかがなにか変更した際に、フックが静かに自己無効化する)、コンパイラのバグ (コンパイラ設定の違いによるフックの間違いや、一部のフックだけが検出されるなど)、およびエンドユーザーが使用することがむずかしいなどが理由。ポリシー指定のイベントフックは、下位互換性のためにデフォルトでADL検出フックにできる。そのためには、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;マクロの値を&lt;code&gt;2020&lt;/code&gt;未満に設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/code&gt;設定を改善。古いGCCは&lt;code&gt;bool&lt;/code&gt;ベースのコンセプト構文をもっていたが、新しいGCCは標準に準拠する。しかし、レガシー構文と準拠構文がどのようなときに使用できるのか十分に理解できていなかったために、GCCに指定するオプションによってコンパイルに失敗していた。新しいロジックでは、GCC 8以前は常にレガシー構文を使用する。それ以外の場合、GCCがC++20モード以降である場合に限り、準拠構文を使用する。これにより、GCCでのコーナーケースのビルド失敗が解決されることを期待している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeは現在、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルに成功するはずである。Boost.ExceptionのメンテナであるEmilのおかげで、グローバルにC++に例外が無効にされてもコンパイルできるようになった。ただしその場合、&lt;code&gt;boost::exception_ptr&lt;/code&gt;を使用することはできない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; コルーチンのサポートでは、C++20標準で要求されているにも関わらず、&lt;code&gt;final_suspend()&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;ではなかった。これは修正されたが、コンパイラが&lt;code&gt;noop_coroutine&lt;/code&gt;を実装している場合に限る。さらに、&lt;code&gt;noop_coroutine&lt;/code&gt;が使用可能な場合は、はるかに効率的なコルーチンハンドルを使用して&lt;code&gt;await_suspend()&lt;/code&gt;の変種を返す。これによりコード生成とコンテキストスイッチのパフォーマンスが大幅に向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Preprocessorを追加 (close #513)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>d9e83bd5417c2a03c232c76d9d747ca32262aff4:document/version/1_75_0.md</id>
      <updated>2020-11-14T19:23:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : VMDを追加 (close #515)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>36cb36a7f1767adb3ae505310462850d5fbca0c3:document/version/1_75_0.md</id>
      <updated>2020-11-14T18:37:34+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Systemを追加 (close #514)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>61c03d0a37e8ba79e8b970c82bf148dfb13b8b24:document/version/1_75_0.md</id>
      <updated>2020-11-14T18:26:06+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Filesystemを追加 (close #504)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>0df176d380cbaff8fd061abba3587e71b4cad6da:document/version/1_75_0.md</id>
      <updated>2020-11-14T17:49:19+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>