<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-02-03T23:04:09.901899</updated>
  <id>32aee9c5-7741-4d24-a045-8d5d359751e3</id>

  
    <entry>
      <title>Boostを使用しているプロジェクト -- Boostを使用しているプロジェクトのページにNghttp2を追加</title>
      <link href="https://boostjp.github.io/used_project.html"/>
      <id>9753066e4bd320ffc0a8ce422535112816c63ee0:used_project.md</id>
      <updated>2017-01-30 00:27:04 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostを使用しているプロジェクト&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;見つけたら書いていってください。&lt;/p&gt;
&lt;p&gt;Boostのどのライブラリを使用しているかも書くとさらにGood！Boostを使用したコードの参考にしてください。&lt;/p&gt;
&lt;h2&gt;公式情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_shrink.html&#34; target=&#34;_blank&#34;&gt;商用製品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_open.html&#34; target=&#34;_blank&#34;&gt;オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/uses_inhouse.html&#34; target=&#34;_blank&#34;&gt;会社&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://think-async.com/Asio/WhoIsUsingAsio&#34; target=&#34;_blank&#34;&gt;Boost.Asioを使用しているプロジェクト&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.osgeo.org/ggl/wiki/WhoUsesGGL&#34; target=&#34;_blank&#34;&gt;Boost.Geometry(旧名GGL)を使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/graph/doc/users.html&#34; target=&#34;_blank&#34;&gt;Boost.Graphを使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;boostjp&lt;/h2&gt;
&lt;h3&gt;オープンソースライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt; [&lt;a href=&#34;https://github.com/mongodb/mongo&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
データベースライブラリ。
Boost.Any, Boost.Asio, Boost.Bind, Boost.Filesystem, Boost.Function, Boost.ProgramOptions, Boost.SmartPtr, Boost.Spirit, Boost.Thread, Boost.Tuple, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://libcinder.org/&#34; target=&#34;_blank&#34;&gt;Cinder&lt;/a&gt;
アーティスティック系ライブラリ。
Boost.SmartPtr, Boost.Threadなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vrac.iastate.edu/%7Edkabala/OpenSGToolbox/&#34; target=&#34;_blank&#34;&gt;OpenSGToolbox&lt;/a&gt; [&lt;a href=&#34;https://github.com/djkabala/OpenSGToolbox&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
アーティスティック系ライブラリであるOpenSGの拡張ライブラリ。UI, FieldContainerEditor, Lua, ParticleSystem, ParticleTrail, 物理演算, サウンド, TextDom, ビデオ, Octree, AStarなどの機能がある。
Boost.Any, Boost.Assign, Boost.Bind, Boost.Filesystem, Boost.Format, Boost.LexicalCast, Boost.Random, Boost.Signals2, Boost.SmartPtr, Boost.StringAlgo, Boost.Xpressive, Boost.Functionなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.webtoolkit.eu/wt/&#34; target=&#34;_blank&#34;&gt;Wt&lt;/a&gt;
Web アプリケーションフレームワーク。Boost.Any, Boost.Array, Boost.Asio, Boost.Bind, Boost.DateTime, Boost.Filesystem, Boost.Function, Boost.Intrusive, Boost.Lambda, Boost.LexicalCast, Boost.Noncopyable, Boost.Optional, Boost.Pool, Boost.ProgramOptions, Boost.Regex, Boost.Ref, Boost.Range, Boost.Signals2, Boost.SmartPtr, Boost.Spirit, Boost.StringAlgo, Boost.Test, Boost.Thread, Boost.Tokenizer, Boost.Tuple, Boost.TypeTraits, Boost.uBlas, Boost.Unordered, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stlab.adobe.com/group__asl__home.html&#34; target=&#34;_blank&#34;&gt;Adobe Source Libraries&lt;/a&gt;
クロスプラットフォームのGUI構築とそれに付随するユーティリティライブラリ群。
GUI構築にAdam,Eveという2つの独自言語を採用しており、ウィジェット間依存関係、GUIレイアウトとロジックの記述をそれぞれと完全に分離できる。
少なくとも Boost.Utility,Function,Signals,Range,Bind,TypeTraits,ConceptCheck,MPL,FunctionTypes,Noncopyable,Fusion,Operators,Iterator,Array,Any,Tuple,SharedPtr,Integer,StaticAssert を使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nghttp2.org/&#34; target=&#34;_blank&#34;&gt;Nghttp2&lt;/a&gt;
通信プロトコルHTTPの最新版であるHTTP/2の実装を提供するCライブラリおよびアプリケーションプログラム。
C APIだけでなく、Boost.Asioベースの高水準なC++ APIが用意されている: &lt;a href=&#34;https://nghttp2.org/documentation/libnghttp2_asio.html&#34; target=&#34;_blank&#34;&gt;libnghttp2_asio: High level HTTP/2 C++ library&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;オープンソースソフトウェア&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dynamomd.org/&#34; target=&#34;_blank&#34;&gt;DynamO&lt;/a&gt; [&lt;a href=&#34;https://github.com/toastedcrumpets/DynamO&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
イベント駆動シミュレータ。
Boost.Array, Boost.CircularBuffer, Boost.DateTime, Boost.Foreach, Boost.Function, Boost.Iostreams, Boost.LexicalCast, Boost.Math, Boost.ProgramOptions, Boost.Random, Boost.SmartPtr, Boost.Tokenizer, Boost.Tuple, Boost.Unorderedなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aptitude
Debian系Linuxディストリビューションで使用されているパッケージ管理システムaptの対話的フロントエンド。
Boost.Iostreamsを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.phusionpassenger.com/&#34; target=&#34;_blank&#34;&gt;Phusion Passenger&lt;/a&gt;
Ruby, Python, Node.jsのウェブアプリケーションフレームワークを動作されるアプリケーションサーバー。mod_rails, mod_rackなどとも呼ばれる。既存のウェブサーバー（Apacheまたはnginx）のモジュールとして動作するほか、単体でもHTTPサーバーとして動作する。
&lt;a href=&#34;https://github.com/phusion/passenger/blob/master/dev/copy_boost_headers&#34; target=&#34;_blank&#34;&gt;dev/copy_boost_headers&lt;/a&gt;を見る限り、Boost.Thread、Boost.DateTime、Boost.SmartPtr、Boost.Function、Boost.Bindあたりを使用している模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/hiphop-php&#34; target=&#34;_blank&#34;&gt;Hiphop for PHP&lt;/a&gt;
PHPのソースコードからC++ソースコードを生成するトランスレータ。これ自体もC++で書かれており、Boostも使用されている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mosh.mit.edu/&#34; target=&#34;_blank&#34;&gt;Mosh: the mobile shell&lt;/a&gt;
SSHの置き換えを狙う端末アプリケーション。回線切断からの再接続やローカルエコーにより、SSHと比べ高信頼・快適な環境を売りにしている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mapnik.org/&#34; target=&#34;_blank&#34;&gt;Mapnik&lt;/a&gt;
地図データの扱い、描画に関するライブラリ。&lt;a href=&#34;https://github.com/mapnik/mapnik/blob/master/INSTALL.md&#34; target=&#34;_blank&#34;&gt;INSTALL.md&lt;/a&gt;より、Filesystem、System、Thread、Regex、ProgramOptionsを使用していることの記載あり。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ja.libreoffice.org/&#34; target=&#34;_blank&#34;&gt;LibreOffice&lt;/a&gt;
オフィススイート（文書作成、表計算、プレゼンテーション、etc.）。ver.4.0.1(2013/03/07)時点でのBoost使用状況をソースコードから&lt;a href=&#34;https://gist.github.com/usagi/5108142&#34; target=&#34;_blank&#34;&gt;抽出して見る&lt;/a&gt;とArray、DateTime、Foreach、Preprocessor、Random、SmartPtr、Spirit、UnorderedMapなど使われている。ver.4のCalcからはRANDOM()にBoost.Randomを用いたメルセンヌツイスターを&lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=33365&#34; target=&#34;_blank&#34;&gt;採用&lt;/a&gt;するなどBoostの利用も広まっている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www-jp.mysql.com/&#34; target=&#34;_blank&#34;&gt;MySQL&lt;/a&gt;
リレーショナルデータベース管理システム (RDBMS)。オープンソースのRDBMSにおいて、人気がある製品の1つである。
GIS関係の実装においてBoost.Geometoryを使用している。
参考: &lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/04/28/131514&#34; target=&#34;_blank&#34;&gt;MySQLの実装にBoost.Geometryが使われはじめた - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;商用製品&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://shade3d.jp/&#34; target=&#34;_blank&#34;&gt;Shade&lt;/a&gt;
e-frontier社 3DCG作成ソフト。
プラグイン用SDKにBoostを含む。
Boost.TypeTraits、Boost.MPLなどを使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.penguin-aqua.jp/archives/2145&#34; target=&#34;_blank&#34;&gt;長崎ペンギン水族館バーチャルシアター&lt;/a&gt;
3Dシアター。立体視CG描画のための3DエンジンにBoostを使用。
アセット管理にBoost.Filesystem、Boost.SmartPtr、Boost.Flyweight。
キャラクターの動きにBoost.Context、Boost.Random。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;会社&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aiming-inc.com/ja&#34; target=&#34;_blank&#34;&gt;株式会社Aiming&lt;/a&gt;
オンラインゲームのサーバー開発にBoost.Any、Boost.Array、Boost.Foreach、Boost.Format、Boost.Function、Boost.LexicalCast、Boost.Multi-Index、Boost.Optional、Boost.Regex、Boost.Spirit、Boost.StringAlgo、Boost.Tokenizer、Boost.Utility、Boost.Xpressiveなどを使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yusuke Ichinohe</name>
        <email>yusuke.ichinohe@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リソースを自動的に解放する -- tips/smart_ptr：マークアップを修正</title>
      <link href="https://boostjp.github.io/tips/smart_ptr.html"/>
      <id>1aa0844dc8264084c34e3998e52b96911ee8cbee:tips/smart_ptr.md</id>
      <updated>2017-01-26 09:54:48 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;リソースを自動的に解放する&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;リソースを自動的に解放するには、「スマートポインタ」と呼ばれるクラスを使用する。スマートポインタとは、&lt;code&gt;new&lt;/code&gt;のように動的に確保したオブジェクトへのポインタを保持して、自動的に解放するものである。また、通常のポインタのように利用することが可能である。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#no-share-smart-pointer&#34;&gt;共有しないオブジェクトのスマートポインタ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#share-smart-pointer&#34;&gt;参照カウント方式のスマートポインタ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#avoid-usage-shared-ptr&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;で避けること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#customize-release-behavior-shared-ptr&#34;&gt;解放の方法を自分で決める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#weak-reference&#34;&gt;弱い参照&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#intrusive-pointer&#34;&gt;侵入型参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#no-share-smart-pointer&#34; name=&#34;no-share-smart-pointer&#34;&gt;共有しないオブジェクトのスマートポインタ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;共有する必要がない&lt;code&gt;new&lt;/code&gt;で確保したオブジェクト、例えばローカルスコープで&lt;code&gt;new&lt;/code&gt;と&lt;code&gt;delete&lt;/code&gt;を使うような状況では、&lt;code&gt;scoped_ptr&lt;/code&gt;、&lt;code&gt;scoped_array&lt;/code&gt;を使うことができる。&lt;code&gt;scoped_ptr&lt;/code&gt;について、以下の点に注意する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;同士のコピーは不可&lt;/li&gt;
&lt;li&gt;標準コンテナで保持できない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new []&lt;/code&gt;で確保した配列を保持することはできない&lt;/li&gt;
&lt;li&gt;不完全型や&lt;code&gt;void&lt;/code&gt;をテンプレート引数に与えることはできない&lt;/li&gt;
&lt;li&gt;解放の方法を自分で決めることはできない共有する必要がない&lt;code&gt;new []&lt;/code&gt;で確保したオブジェクトを保持する場合は&lt;code&gt;scoped_array&lt;/code&gt;を使う。デリーターがどうしても必要な場合はBoost.Interprocessの&lt;code&gt;scoped_ptr&lt;/code&gt;/&lt;code&gt;scoeped_array&lt;/code&gt;を使用すると良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;のサンプル：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/scoped_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::scoped_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// ポインタと同じように使うことが出来る&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;// ここでpが自動的にdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scoped_array&lt;/code&gt;サンプル：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/scoped_array.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::scoped_array&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 通常の配列のように使うことが出来る&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;// ここでpが自動的にdelete []される&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#share-smart-pointer&#34; name=&#34;share-smart-pointer&#34;&gt;参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;は主に動的に割り当てられてたオブジェクトへのポインタを保持して、&lt;code&gt;shared_ptr&lt;/code&gt;内部の参照カウントによって管理するものである。確保したオブジェクトを指す最後の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄またはリセットされるときに解放される。&lt;code&gt;shared_ptr&lt;/code&gt;は以下のことが可能である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標準コンテナで保持すること&lt;/li&gt;
&lt;li&gt;テンプレート引数に不完全型や&lt;code&gt;void&lt;/code&gt;を与えること&lt;/li&gt;
&lt;li&gt;自分で解放の方法を決めること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T*&lt;/code&gt;から&lt;code&gt;U*&lt;/code&gt;に暗黙の型変換が可能なとき、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;U&amp;gt;&lt;/code&gt;の暗黙の変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;の暗黙の変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;T const&amp;gt;&lt;/code&gt;の暗黙の変換&lt;code&gt;new []&lt;/code&gt;によって確保されたオブジェクトは&lt;code&gt;shared_array&lt;/code&gt;を使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// ポインタのように使うことが出来る&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// p1はp0と同じオブジェクトを指すshared_ptr&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// STLで保持することも可能&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;// ここでp0もp1もvecも破棄されてp0で確保したオブジェクトがdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
3
3
destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#avoid-usage-shared-ptr&#34; name=&#34;avoid-usage-shared-ptr&#34;&gt;shared_ptrで避けること&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;名前のない一時的な&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは使わないほうがよい。次の例を考える。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 例外を送出する可能性がある関数&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bad()&lt;/code&gt;関数では関数の引数が評価される順序が不定である。&lt;code&gt;new int( 2 )&lt;/code&gt;、&lt;code&gt;g()&lt;/code&gt;の順に評価されたとき、&lt;code&gt;g()&lt;/code&gt;が例外を送出すると&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタが呼ばれなくなり、確保したオブジェクトが解放されなくなってしまう。したがって、&lt;code&gt;ok()&lt;/code&gt;関数のように名前のあるスマートポインタに格納するとよい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#customize-release-behavior-shared-ptr&#34; name=&#34;customize-release-behavior-shared-ptr&#34;&gt;解放の方法を自分で決める&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;shared_array&lt;/code&gt;は解放の方法を指定することが出来る。これによって&lt;code&gt;delete&lt;/code&gt;以外の解放するための関数の使用やそもそも解放しないことも可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;free_deleter&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;call deleter&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;free_deleter&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;// ここでdeleteの代わりにfree_deleterのoperator()が呼び出される&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
call deleter
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#weak-reference&#34; name=&#34;weak-reference&#34;&gt;弱い参照&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&lt;/code&gt;は&lt;code&gt;shared_ptr&lt;/code&gt;に対する弱い参照で、&lt;code&gt;shared_ptr&lt;/code&gt;の参照カウントを上げ下げせずにオブジェクトを指すものである。&lt;code&gt;weak_ptr&lt;/code&gt;単独で用いられることはない。オブジェクトへのアクセスは&lt;code&gt;weak_ptr&lt;/code&gt;の&lt;code&gt;lock()&lt;/code&gt;メンバ関数、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタによって対応する&lt;code&gt;shared_ptr&lt;/code&gt;を得ることで可能である。&lt;code&gt;shared_ptr&lt;/code&gt;が破棄されていた場合における動作は、&lt;code&gt;lock()&lt;/code&gt;メンバ関数の場合は空の&lt;code&gt;shared_ptr&lt;/code&gt;を返し、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタの場合は&lt;code&gt;bad_weak_ptr&lt;/code&gt;例外を送出する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/&lt;span style=&#34;color:#ff0000&#34;&gt;weak_ptr&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;weak_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// shared_ptrのオブジェクトがあるかないか&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;lock&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;deleted&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// ここで解放する&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// shared_ptrのオブジェクトがあるかないか&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;lock&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;deleted&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実験結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://boostjp.github.io/tips/smart_ptr.html#intrusive-smart-pointer&#34; name=&#34;intrusive-smart-pointer&#34;&gt;侵入型参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;intrusive_ptr&lt;/code&gt;はユーザがオブジェクトの参照カウンタを上げ下げしなければならないようなときに適用できる。オブジェクトに対応する&lt;code&gt;intrusive_ptr_add_ref()&lt;/code&gt;関数、&lt;code&gt;intrusive_ptr_release()&lt;/code&gt;関数を定義することによって、&lt;code&gt;intrusive_ptr&lt;/code&gt;が自動的に参照カウンタの上げ下げを行う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/intrusive_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hoge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;object&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;cnt_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;exist&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;friend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intrusive_ptr_add_ref&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intrusive_ptr_release&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 第2引数はコンストラクト時に参照カウントを増加させるかどうか&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::intrusive_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hoge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hoge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// コンテナに入れても大丈夫&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost::intrusive_ptr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hoge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;// ここでvecとptrが破棄され、それぞれobjectのreleaseが呼ばれてdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;exist
destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>らいどっと</name>
        <email>ryogo.yoshimura@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.63.0リリースノート -- Boost 1.63.0リリースノート翻訳 : リリース後のBoost.Atomicのパッチを記載</title>
      <link href="https://boostjp.github.io/document/version/1_63_0.html"/>
      <id>7d2eaa34252ee6a088518701b5a7366fedcebedd:document/version/1_63_0.md</id>
      <updated>2017-01-12 17:35:18 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.63.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_63_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_63_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_63_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_63_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;リリース後のパッチ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Atomic&lt;ul&gt;
&lt;li&gt;GCC 4.7より古いバージョンおよびその互換コンパイラで、32ビット x86に対して64ビットアトミック操作をすると、不正なコードを生成する問題を生成。この問題は、コミット &lt;a href=&#34;https://github.com/boostorg/atomic/commit/a67cc1b055cf09f371e2eca544884634a1ccc886&#34; target=&#34;_blank&#34;&gt;boostorg/atomic a67cc1b&lt;/a&gt;で修正されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17に準拠した静的な定数メンバ変数、&lt;code&gt;atomic&amp;lt;T&amp;gt;::is_always_lock_free&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;この定数はその特殊化が常にロックフリーなアトミックで実装されているかどうかを示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x86でのOracle Studioのサポートを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12534&#34; target=&#34;_blank&#34;&gt;Trac #12534&lt;/a&gt; GCC環境で&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;をインクルードしたあとに&lt;code&gt;flat_map&lt;/code&gt;をインスタンス化するとコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12577&#34; target=&#34;_blank&#34;&gt;Trac #12577&lt;/a&gt; &lt;code&gt;-fsanitize=undefined&lt;/code&gt;オプションで判明した&lt;code&gt;pair.hpp&lt;/code&gt;のヌル参照の実行時警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/40&#34; target=&#34;_blank&#34;&gt;GitHub #40&lt;/a&gt; &lt;code&gt;copy_move_algo.hpp&lt;/code&gt;のパラメータ型を修正 : &lt;code&gt;iterator_traits::difference_type&lt;/code&gt; -&amp;gt; &lt;code&gt;allocator_traits::size_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; &lt;code&gt;do_allocate()&lt;/code&gt;関数内での到達しないコードを回避&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11687&#34; target=&#34;_blank&#34;&gt;#11687&lt;/a&gt; Xcode (Apple clang) 6以降で&lt;code&gt;thread_local&lt;/code&gt;キーワードが使えないため、代わりに&lt;code&gt;boost::thread_specific_ptr&lt;/code&gt;を使いたいという問題。対応しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12114&#34; target=&#34;_blank&#34;&gt;#12114&lt;/a&gt; iOSのarm64環境で浮動小数点演算が正しく行われなくなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12411&#34; target=&#34;_blank&#34;&gt;#12411&lt;/a&gt; Visual StudioのO2最適化でFPUレジスタが保持されない問題を修正 (ほかのアーキテクチャも修正)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12551&#34; target=&#34;_blank&#34;&gt;#12551&lt;/a&gt; arm64環境でunkown directiveでビルドエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;ontop関数のシグニチャをリダクション&lt;/li&gt;
&lt;li&gt;プライベートなfcontext APIのユニットテストを追加&lt;/li&gt;
&lt;li&gt;ucontextとfcontextのパフォーマンステストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unbounded_channel&lt;/code&gt;と&lt;code&gt;bounded_channel&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;新たなクラス&lt;code&gt;buffered_channel&lt;/code&gt;と&lt;code&gt;unbuffered_channel&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::vector&lt;/code&gt;のバギーなコンストラクタを修正 (Lee Clagettに感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUSION_ADAPT*&lt;/code&gt;と&lt;code&gt;BOOST_FUISON_DEFINE*&lt;/code&gt;は空の構造体に適用できるようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6592&#34; target=&#34;_blank&#34;&gt;#6592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUSION_DEFINE*&lt;/code&gt;はムーヴ構築とムーヴ代入が出来るようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10099&#34; target=&#34;_blank&#34;&gt;#10099&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;のアダプタを追加 (Mateusz Łoskotに感謝) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8241&#34; target=&#34;_blank&#34;&gt;#8241&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;一時オブジェクトを返す警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;Intersection : 結果が正しくなるよう修正 (まだ完全ではないので作業中だが、より正しくなった)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したチケット&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12289&#34; target=&#34;_blank&#34;&gt;#12289&lt;/a&gt; &lt;code&gt;std::cout&lt;/code&gt;関係の警告とコンパイルエラーを回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12412&#34; target=&#34;_blank&#34;&gt;#12412&lt;/a&gt; 地理的なPointとBoxでの&lt;code&gt;covered_by()&lt;/code&gt;が不正な結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12413&#34; target=&#34;_blank&#34;&gt;#12413&lt;/a&gt; &lt;code&gt;rtree::remove()&lt;/code&gt;が地理的なPointに対して正しく動作しない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12499&#34; target=&#34;_blank&#34;&gt;Trac #12499&lt;/a&gt; メモリアロケーションに失敗する問題を修正。Boost.Moveの強制インライン化によって解決&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; ライブラリのユーザーがデフォルトのtempフォルダを提供できるように拡張ポイントを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; &lt;code&gt;xsi_key(key_t)&lt;/code&gt;コンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12556&#34; target=&#34;_blank&#34;&gt;Trac #12556&lt;/a&gt; &lt;code&gt;member_value_traits.hpp&lt;/code&gt;に不足していたインクルードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一般的な変更&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;以前のリリースで非推奨とした&lt;code&gt;type_info_wrapper&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;テキストファイルシンクバックエンドから現在のファイル名を取得する方法を追加&lt;ul&gt;
&lt;li&gt;ファイル名は&lt;code&gt;get_current_file_name&lt;/code&gt;メンバ関数で取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;バージョン21以前のAndroid APIでコンパイルエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;ストリーミング演算子（訳註: &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;と&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;のこと）がスカラー型とenumを値で受け取るように修正&lt;ul&gt;
&lt;li&gt;これにより静的定数とビットフィールドを直接フォーマットストリームに渡すことが出来るようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11998&#34; target=&#34;_blank&#34;&gt;#11998&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;syslog APIの自動検出機構を修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12600&#34; target=&#34;_blank&#34;&gt;#12600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UDPを基にしたsyslogバックエンドの実装について、RFC3164に準拠するようにメッセージフォーマットを変更した&lt;/li&gt;
&lt;li&gt;テキストファイルシンクバックエンドにインストールしたファイルクローズハンドラは、ファイルが開かれていないのであれば呼ばれないようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他の詳細な変更については&lt;a href=&#34;http://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/21&#34; target=&#34;_blank&#34;&gt;GitHub Issue #21&lt;/a&gt; &lt;code&gt;-fsanitize=undefined&lt;/code&gt;オプションによって発見した未定義動作を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#metaparse&#34; name=&#34;metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_METAPARSE_STRING&lt;/code&gt;の実装を改善&lt;ul&gt;
&lt;li&gt;文字列長の最大を2048に増やした (Boostヘッダを生成するスクリプトで再生成した)&lt;/li&gt;
&lt;li&gt;文字列長の制限をコンパイル単位で変更できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的なアダプティブソートアルゴリズムのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_FORCEINLINE&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しく2つのin-placeコンストラクタを追加。これらは&lt;code&gt;emplace()&lt;/code&gt;関数と同様の動作をする。以下のひとつめのコンストラクタは、値を含んだ状態(noneじゃない状態)でオブジェクトを構築する。ふたつめのコンストラクタは、&lt;code&gt;bool&lt;/code&gt;の条件が&lt;code&gt;true&lt;/code&gt;の場合にのみ、値を含んだ状態をオブジェクトを構築する：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;in_place_init_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;in_place_init_if_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::optional&lt;/code&gt;と同様に、&lt;code&gt;optional&lt;/code&gt;を未初期化状態にする&lt;code&gt;o = {}&lt;/code&gt;構文を許可&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12203&#34; target=&#34;_blank&#34;&gt;#12203&lt;/a&gt; &lt;code&gt;optional&amp;lt;optional&amp;lt;T&amp;gt;&amp;amp;&amp;gt;&lt;/code&gt;の初期化を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12563&#34; target=&#34;_blank&#34;&gt;#12563&lt;/a&gt; &lt;code&gt;optional&lt;/code&gt;のコンストラクタをSFINAEフレンドリーにした。これにより、&lt;code&gt;std::tuple&lt;/code&gt;との相互作用が修正される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多くのモジュールがC++11の可変長テンプレートをサポートした&lt;/li&gt;
&lt;li&gt;返り値の型の推論に失敗していたのを修正&lt;/li&gt;
&lt;li&gt;未使用の警告を抑制&lt;/li&gt;
&lt;li&gt;二引数の数学関数で引数が足りなかったエラーを修正&lt;/li&gt;
&lt;li&gt;古いコンパイラ用の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#python&#34; name=&#34;python&#34;&gt;Python&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的なC++11の機能として、&lt;code&gt;std::shared_ptr&lt;/code&gt;と&lt;code&gt;std::unique_ptr&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;NumPy&lt;/a&gt;をラップする拡張APIを組み込んだ&lt;/li&gt;
&lt;li&gt;廃止済みのいくつかの機能を削除した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.4&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロによる文字列同士の比較に、コンテナ用の比較オプションである &lt;code&gt;per_element&lt;/code&gt; (要素同士の比較) と &lt;code&gt;lexicographic&lt;/code&gt; (辞書順比較) をoptional modifierとして使用できるようにした。 &lt;code&gt;BOOST_TEST(&#34;aaa&#34; == &#34;aaa&#34;, boost::test_tools::lexicographic());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12531&#34; target=&#34;_blank&#34;&gt;#12531&lt;/a&gt; 実行するテストケースをフィルタして指定するオプションの区切り文字を、コロン &lt;code&gt;:&lt;/code&gt; からアンダースコア &lt;code&gt;_&lt;/code&gt; に変更。これは、名前空間のようにコロンを含むテストケースを列挙できなかったための変更である。 &lt;code&gt;--run_test=&#34;ns::X&#34;_&#34;ns::Y&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/103&#34; target=&#34;_blank&#34;&gt;GitHub PR #103&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/test/pull/104&#34; target=&#34;_blank&#34;&gt;GitHub PR #104&lt;/a&gt; インデント関係のGCCの警告を黙らせた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/105&#34; target=&#34;_blank&#34;&gt;GitHub PR #105&lt;/a&gt; GCC6での未使用変数による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11756&#34; target=&#34;_blank&#34;&gt;#11756&lt;/a&gt; C++03以下のターゲット環境向けに、C++11の&lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;のマクロを使用していたために起きていたコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11907&#34; target=&#34;_blank&#34;&gt;#11907&lt;/a&gt; &lt;code&gt;std::string&lt;/code&gt;同士の比較が、場合によってコレクションの比較と見なされたりスカラ型の比較と見なされたりするため、状況によってテストの出力が異なる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12339&#34; target=&#34;_blank&#34;&gt;#12339&lt;/a&gt; カラー出力に点滅文字(blink element)を使用するのをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12506&#34; target=&#34;_blank&#34;&gt;#12506&lt;/a&gt; &lt;code&gt;report_sink&lt;/code&gt;のドキュメントの誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12507&#34; target=&#34;_blank&#34;&gt;#12507&lt;/a&gt; &lt;code&gt;--report_sink&lt;/code&gt;オプションが動作しなくなっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12530&#34; target=&#34;_blank&#34;&gt;#12530&lt;/a&gt; テストを走らせずにBoost.Testのバージョンを取得する&lt;code&gt;--version&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12531&#34; target=&#34;_blank&#34;&gt;#12531&lt;/a&gt; &lt;code&gt;--run_test&lt;/code&gt;オプションに、コロンを含むテスト名が指定できない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#type-index&#34; name=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;のエミュレーションを行う&lt;code&gt;runtime_cast&lt;/code&gt;を追加(実装したChris Gloverに感謝)&lt;ul&gt;
&lt;li&gt;詳細については&lt;a href=&#34;http://www.boost.org/doc/libs/1_63_0/doc/html/boost_typeindex_header_reference.html#header.boost.type_index.runtime_cast_hpp&#34; target=&#34;_blank&#34;&gt;runtime_cast reference&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTTIの内部実装を&lt;code&gt;std::size_t&lt;/code&gt;から&lt;code&gt;unsigned int&lt;/code&gt;に変更することで、よりプラットフォーム非依存にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;検査の警告を修正&lt;/li&gt;
&lt;li&gt;物理化学(physico-chemical)の定数を更新。2014年CODATA推奨値にした&lt;/li&gt;
&lt;li&gt;biotを正しく10アンペアとして定義&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代入時の例外安全性の問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12459&#34; target=&#34;_blank&#34;&gt;#12459&lt;/a&gt; &lt;code&gt;std::allocator_traits&lt;/code&gt;が使用可能なときには使用するようにし、現代的なrebindスタイルをサポートした&lt;/li&gt;
&lt;li&gt;いくつかのアロケータを伝搬させるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert()&lt;/code&gt;/&lt;code&gt;emplace_hint()&lt;/code&gt;でヒントイテレータを使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントのさまざまな部分を改善した&lt;/li&gt;
&lt;li&gt;引数をとらないコンストラクタを非&lt;code&gt;explicit&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;その他の詳細については &lt;a href=&#34;http://www.boost.org/libs/unordered/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 3.8.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;Intel: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++14: 16.0, 17.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 7.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4, 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 3.8.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0, 7.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++1z: 6.1.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++14: 16.0, 17.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 7.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4, 6.2&lt;/li&gt;
&lt;li&gt;GCC,C++14: 6.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- リンク切れになっている箇所のURLを更新</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html"/>
      <id>8b8d2cf8e4b22434d926050376f4b6c01d1407b5:archive/boost_docs/libs/date_time/references.md</id>
      <updated>2017-01-03 20:14:36 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;参考文献&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下に挙げるのは、日付・時間ドメインに関するリファレンスと情報元である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#date-references&#34;&gt;Date Calendar References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#time-reference&#34;&gt;Time References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#other-cpp-libs&#34;&gt;Other C/C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#java-libs&#34;&gt;JAVA Date-Time Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#script-lang-libs&#34;&gt;Scriping Language Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#related-commerical-fanciful-pages&#34;&gt;関連する商業的かつ想像力に富んだページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#resolution-precision-accuracy&#34;&gt;分解能, 精度, 正確度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#date-references&#34; name=&#34;date-references&#34;&gt;Date Calendar References&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ISO 8601 日付・時間の標準 -- &lt;a href=&#34;http://www.cl.cam.ac.uk/~mgk25/iso-time.html&#34; target=&#34;_blank&#34;&gt;Markus Kuhnによるまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;書籍『&lt;a href=&#34;http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/&#34; target=&#34;_blank&#34;&gt;Calendrical Calculations&lt;/a&gt;』 著者 Reingold &amp;amp; Dershowitz&lt;/li&gt;
&lt;li&gt;Calendar FAQ by Claus T?dering [&lt;a href=&#34;http://www.pauahtun.org/CalendarFAQ/cal/calendar24.html&#34; target=&#34;_blank&#34;&gt;html&lt;/a&gt;][&lt;a href=&#34;http://www.pauahtun.org/CalendarFAQ/cal/calendar24.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Calendar zone &lt;a href=&#34;http://www.calendarzone.com/&#34; target=&#34;_blank&#34;&gt;http://www.calendarzone.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/xmlschema-2/#dateTime&#34; target=&#34;_blank&#34;&gt;date timeのXMLスキーマ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Will Lindenの&lt;a href=&#34;http://www.ecben.net/calendar.shtml&#34; target=&#34;_blank&#34;&gt;Calendar Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www21.brinkster.com/lonwolve/melt/index.htm&#34; target=&#34;_blank&#34;&gt;XMAS calendar melt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#time-reference&#34; name=&#34;time-reference&#34;&gt;Time References&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Martin Folwerの時間パターン&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aw.com/cseng/titles/0-201-89542-0/apsupp/events2-1.html&#34; target=&#34;_blank&#34;&gt;Recurring Events for Calendars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patterns for things that &lt;a href=&#34;http://martinfowler.com/ap2/timeNarrative.html&#34; target=&#34;_blank&#34;&gt;Change with time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アメリカ国立研究所の標準とテクノロジー &lt;a href=&#34;http://nist.time.gov/exhibits.html&#34; target=&#34;_blank&#34;&gt;Time Exhibits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ntp.org/&#34; target=&#34;_blank&#34;&gt;NTP.org&lt;/a&gt;のネットワーク時間プロトコル&lt;/li&gt;
&lt;li&gt;US Navy &lt;a href=&#34;http://tycho.usno.navy.mil/systime.html&#34; target=&#34;_blank&#34;&gt;Systems of Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bipm.fr/enus/5_Scientific/c_time/time_1.html&#34; target=&#34;_blank&#34;&gt;国際原子時(International Atomic Time)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.jp/document/9.6/html/datatype-datetime.html&#34; target=&#34;_blank&#34;&gt;8.5. 日付/時刻データ型&lt;/a&gt; PostgreSQLユーザーガイド&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#other-cpp-libs&#34; name=&#34;other-cpp-libs&#34;&gt;Other C/C++ Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cplusplus.com/ref/ctime/index.html&#34; target=&#34;_blank&#34;&gt;ctime C&lt;/a&gt; Standard library reference at cplusplus.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cl.cam.ac.uk/~mgk25/c-time/&#34; target=&#34;_blank&#34;&gt;XTime C extension&lt;/a&gt; proposal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://david.tribble.com/text/c0xcalendar.html#author-info&#34; target=&#34;_blank&#34;&gt;Another C library extension&lt;/a&gt; proposal by David Tribble&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cr.yp.to/libtai.html&#34; target=&#34;_blank&#34;&gt;libTAI&lt;/a&gt; is a C based time library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twinsun.com/tz/tz-link.htm&#34; target=&#34;_blank&#34;&gt;Time Zone&lt;/a&gt; Database C library for managing timezones/places&lt;/li&gt;
&lt;li&gt;International Components for Unicode by IBM (open source)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateCalendar.html&#34; target=&#34;_blank&#34;&gt;Calendar Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateTime.html&#34; target=&#34;_blank&#34;&gt;Date Time Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateTimezone.html&#34; target=&#34;_blank&#34;&gt;Time Zone Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/formatDateTime.html&#34; target=&#34;_blank&#34;&gt;Date-Time Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ringside.arc.nasa.gov/www/toolkits/julian_13/aareadme.html&#34; target=&#34;_blank&#34;&gt;Julian Library in C by Mark Showalter -- NASA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#java-libs&#34; name=&#34;java-libs&#34;&gt;JAVA Date &amp;amp; Time Library Quick Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/util/Calendar.html&#34; target=&#34;_blank&#34;&gt;クラスCalendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/util/GregorianCalendar.html&#34; target=&#34;_blank&#34;&gt;クラスGregorianCalendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/util/Date.html&#34; target=&#34;_blank&#34;&gt;クラスDate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/sql/Time.html&#34; target=&#34;_blank&#34;&gt;クラスjava.sql.Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/text/DateFormatSymbols.html&#34; target=&#34;_blank&#34;&gt;クラスDateFormatSymbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/text/DateFormat.html&#34; target=&#34;_blank&#34;&gt;クラスDateFormat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/text/SimpleDateFormat.html&#34; target=&#34;_blank&#34;&gt;クラスSimpleDateFormat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/util/SimpleTimeZone.html&#34; target=&#34;_blank&#34;&gt;クラスSimpleTimeZone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#script-lang-libs&#34; name=&#34;script-lang-libs&#34;&gt;Scripting Language Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A python date library &lt;a href=&#34;http://www.lemburg.com/files/python/mxDateTime.html&#34; target=&#34;_blank&#34;&gt;MX Date Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl date-time&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/Catalog/Data_and_Data_Type/Date/&#34; target=&#34;_blank&#34;&gt;Date-Time packages at CPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/doc/TWEGNER/Date-Calc-4.3-bin56Mac/Calc.pm&#34; target=&#34;_blank&#34;&gt;Date::Calc&lt;/a&gt; at CPAN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/doc/MORTY/DateConvert-0.16/Convert.pm&#34; target=&#34;_blank&#34;&gt;Date::Convert&lt;/a&gt; calendar conversions at CPAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A PHP library &lt;a href=&#34;http://vlib.activefish.com/docs/vlibDate.html&#34; target=&#34;_blank&#34;&gt;Vlib Date Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#related-commerical-fanciful-pages&#34; name=&#34;related-commerical-fanciful-pages&#34;&gt;関連する商業的かつ想像力に富んだページ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.leapsecond.com/java/gpsclock.htm&#34; target=&#34;_blank&#34;&gt;Leapsecond.com time&lt;/a&gt; page&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.worldtimeserver.com/&#34; target=&#34;_blank&#34;&gt;World Time Server / TZ database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.longnow.org/10kclock/clock.htm&#34; target=&#34;_blank&#34;&gt;10000 year clock&lt;/a&gt; at Long Now Foundation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timezonesforpcs.com/&#34; target=&#34;_blank&#34;&gt;Timezones for PCs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#resolution-precision-accuracy&#34; name=&#34;resolution-precision-accuracy&#34;&gt;Resolution, Precision, and Accuracy&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Definitions with pictures from &lt;a href=&#34;http://metrologyforum.tm.agilent.com/specs.shtml&#34; target=&#34;_blank&#34;&gt;Agilent Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another set of pictures from &lt;a href=&#34;http://www.teamlabs.com/catalog/performance.asp&#34; target=&#34;_blank&#34;&gt;Team Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Definitions from &lt;a href=&#34;http://www.solent.ac.uk/hydrography/notes/errorthe/accuracy.htm&#34; target=&#34;_blank&#34;&gt;Southampton Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Definitions from &lt;a href=&#34;http://www.newport.com/Support/Tutorials/OptoMech/om4a.asp&#34; target=&#34;_blank&#34;&gt;Newport Corporation&lt;/a&gt; in the context of instrumentation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;mailto:jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2014 &lt;a href=&#34;mailto:faithandbrave@gmail.com&#34;&gt;Akira Takahashi&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yusuke Ichinohe</name>
        <email>yusuke.ichinohe@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.56.0リリースノート -- リンク切れになっている箇所のURLを更新</title>
      <link href="https://boostjp.github.io/document/version/1_56_0.html"/>
      <id>8b8d2cf8e4b22434d926050376f4b6c01d1407b5:document/version/1_56_0.md</id>
      <updated>2017-01-03 20:14:36 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.56.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;モジュール化&lt;/h2&gt;
&lt;p&gt;Boostのバージョン管理を、Subversionから、Gitのサブモジュールを使用するシステムに移行した。ディレクトリの構成が、以前と少し異なる。&lt;/p&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新モジュール&lt;/h2&gt;
&lt;p&gt;以下のモジュールは、既存のコードから抽出されたもの。ヘッダのパスは今までと同じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assert&lt;ul&gt;
&lt;li&gt;カスタマイズ可能なassertマクロ。Peter Dimovによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core&lt;ul&gt;
&lt;li&gt;他のライブラリから使用される、最小の依存関係を持つコアユーティリティ。Peter Dimov、Glen Fernandes、Andrey Semashevによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lexical_Cast&lt;ul&gt;
&lt;li&gt;Kevlin Henney氏による、テキストと整数間の汎用的な変換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throw_Exception&lt;ul&gt;
&lt;li&gt;Emil Dotchevski氏による、Boostから例外を送出するための一般的なインフラストラクチャ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WinApi&lt;ul&gt;
&lt;li&gt;Boost内部で使用する、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;を必要としない宣言。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/align.html&#34; target=&#34;_blank&#34;&gt;Align&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Glen Fernandes氏による、メモリアラインメントの関数、アロケータ、アダプタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/boost_typeindex.html&#34; target=&#34;_blank&#34;&gt;Type_Index&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Antony Polukhin氏による、実行時とコンパイル時両方で使用できる、コピー可能なtype info。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#assign&#34;&gt;Assign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#mpl&#34;&gt;MPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#tti&#34;&gt;TTI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;非推奨ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TR1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなアキュムレータとして、&lt;code&gt;rolling_variance&lt;/code&gt;と&lt;code&gt;rolling_moment&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照関係の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9215&#34; target=&#34;_blank&#34;&gt;#9215&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9462&#34; target=&#34;_blank&#34;&gt;#9462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coroutineの新しいインタフェースで&lt;code&gt;boost::asio::spawn()&lt;/code&gt;が動かなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9442&#34; target=&#34;_blank&#34;&gt;#9442&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9928&#34; target=&#34;_blank&#34;&gt;#9928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;のデストラクタによるクリーンナップ処理が走ったとき、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;のコルーチンが正しくアンワインド(スタック巻き戻しによるスタック内のデストラクタ呼び出し)されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9731&#34; target=&#34;_blank&#34;&gt;#9731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::wrap()&lt;/code&gt;と&lt;code&gt;strand::wrap()&lt;/code&gt;によって生成されるハンドラのための継続フックの移譲を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9741&#34; target=&#34;_blank&#34;&gt;#9741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;接続志向IPソケットのために、WindowsのI/O完了ポートバックエンドに、使用可能なら&lt;code&gt;ConnectEx()&lt;/code&gt;関数を使用するようにした。&lt;/li&gt;
&lt;li&gt;非Windows(および非IOCP Windows)環境において、&lt;code&gt;io_service&lt;/code&gt;のインスタンスひとつに付き、ひとつの条件変数を使用するよう変更した。これによって、&lt;code&gt;run_one()&lt;/code&gt;が複数スレッドから呼ばれる際の、潜在的な競合状態を解決した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono&lt;/code&gt;と&lt;code&gt;std::chrono&lt;/code&gt;のクロックをベースにしてタイムアウト時間を計算する際の整数オーバーフローを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9662&#34; target=&#34;_blank&#34;&gt;#9662&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9778&#34; target=&#34;_blank&#34;&gt;#9778&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;kqueueバックエンドの&lt;code&gt;EV_CLEAR&lt;/code&gt;ハンドリングに、さらに変更を加えた。Mac OS Xの&lt;code&gt;close()&lt;/code&gt;システムコールがハングするケースがあったため。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolver_query_base::flags::operator~&lt;/code&gt;の実装で無限再帰が起こっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9548&#34; target=&#34;_blank&#34;&gt;#9548&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;膨大な数のソケットを使うWindows上で&lt;code&gt;select&lt;/code&gt;リアクタがより効率的に動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9528&#34; target=&#34;_blank&#34;&gt;#9528&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのGCCで起きるtype aliasingの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9550&#34; target=&#34;_blank&#34;&gt;#9550&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アドレスサニタイザーの警告を回避するために、バッファのテストをコンパイル時のみ走らせるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のWindowsバージョンで、&lt;code&gt;GetQueuedCompletionStatus()&lt;/code&gt;のタイムアウトワークアラウンドを無効にした(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/9d13af49f80f2f12e3b99c9c8b4219b0c4bfe8eb&#34; target=&#34;_blank&#34;&gt;9d13af4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスを使用する際の、文字列ベースのスコープIDをサポートした&lt;/li&gt;
&lt;li&gt;IPv6マルチキャストグループのジョインに、明示的に指定されなければアドレスのスコープIDを使用するよう変更した&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスのテストがMac OS XとBSD環境で失敗していたので修正&lt;/li&gt;
&lt;li&gt;GCCで無名enumを使用すると発生する問題のワークアラウンドを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10042&#34; target=&#34;_blank&#34;&gt;#10042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsの&lt;code&gt;HANDLE&lt;/code&gt;バックエンドを、&lt;code&gt;ERROR_MORE_DATA&lt;/code&gt;を無視するよう巻き戻した。代わりに、他のもの(&lt;code&gt;error_code&lt;/code&gt;を使うか、&lt;code&gt;system_error&lt;/code&gt;例外の送出)を使ってエラーを伝搬するようにし、転送されたバイト数が返るようにした。部分的なメッセージを処理する必要がある場合は、&lt;code&gt;error_code&lt;/code&gt;のオーバーロードを使用すること(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10034&#34; target=&#34;_blank&#34;&gt;#10034&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_set&lt;/code&gt;の実装に含まれるシグナル番号チェックでの、&lt;a href=&#34;http://ja.wikipedia.org/wiki/Off-by-one%E3%82%A8%E3%83%A9%E3%83%BC&#34; target=&#34;_blank&#34;&gt;off-by-oneエラー&lt;/a&gt;を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9324&#34; target=&#34;_blank&#34;&gt;#9324&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Crayコンパイラで動くように、SSE2を組み込み関数ではなくインラインアセンブラを使用するようにした&lt;/li&gt;
&lt;li&gt;最新のVisual C++とWindows SDKで非推奨マークが付いているWinsockの機能を使用停止(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/cc9730e493c015e8ae089da1b8438fb6477710f7&#34; target=&#34;_blank&#34;&gt;cc9730e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのGCCで単体テストを通すためのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;多くのドキュメントの細かい部分を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9605&#34; target=&#34;_blank&#34;&gt;#9605&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9771&#34; target=&#34;_blank&#34;&gt;#9771&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#assign&#34; name=&#34;assign&#34;&gt;Assign&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11での曖昧さを解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3073&#34; target=&#34;_blank&#34;&gt;#3073&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリを再設計した。内部的なリファクタリングのほか、さまざまなバグの修正、機能テストマクロの不適切な値やオーバーフローハンドリングの割り込みといったことも含む。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory_order&lt;/code&gt;列挙型の値を変更した。列挙型の値はインタフェースの一部ではないが、ユーザーのインタフェースとして使用する場合、ABIが壊れる可能性がある。&lt;/li&gt;
&lt;li&gt;MSVCのWindows x64向けに、128ビットのアトミック操作を実装した。ターゲットCPUにcmpxchg16b命令が存在していることを想定している。初期のいくつかのAMD CPUはこの命令をサポートしていない。そのようなターゲットのためには、&lt;code&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/code&gt;マクロを定義する。&lt;/li&gt;
&lt;li&gt;実験的に、MSVCのWindows ARMターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;実験的に、GCCのDEC Alphaターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;GCCのARMv6とそれ以降のサポートを改善した。全てのアトミック操作を、CASベースのループの代わりに、アセンブラブロックで実装した。ARMv7で64ビット操作をサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_FLAG_INIT&lt;/code&gt;マクロと&lt;code&gt;atomic_flag&lt;/code&gt;の初期化の、オプショナルなサポートを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8158&#34; target=&#34;_blank&#34;&gt;#8158&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;デフォルトコンストラクタによる初期化に依存する。以下の記事を参照：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25490513807/constant-initialization&#34; target=&#34;_blank&#34;&gt;Constant Initialization - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPARCv9ターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9446&#34; target=&#34;_blank&#34;&gt;#9446&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;PowerPCターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9447&#34; target=&#34;_blank&#34;&gt;#9447&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;x86とx86-64に対するClangでのいくつかの互換性問題を修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9610&#34; target=&#34;_blank&#34;&gt;#9610&lt;/a&gt;、&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9842&#34; target=&#34;_blank&#34;&gt;#9842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのIA64プラットフォームに特化したコードを削除した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11のアロケータモデルをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9970&#34; target=&#34;_blank&#34;&gt;#9970&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5012&#34; target=&#34;_blank&#34;&gt;#5012&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLMallocベースの拡張アロケータを追加&lt;ul&gt;
&lt;li&gt;参照：「&lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/04/21/141406&#34; target=&#34;_blank&#34;&gt;Boost.Containerにrealloc相当の機能が入る予定&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::allocator&amp;lt;T, 2&amp;gt;&lt;/code&gt;を使用することで(2はバージョン)、&lt;code&gt;vector&lt;/code&gt;の内部実装に&lt;code&gt;realloc()&lt;/code&gt;相当の機能が使われるようになる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::node_allocator&lt;/code&gt;を追加。これは、シンプルな分離ストレージのアロケータ。明示的に要求しない限り、システムにメモリを返さない、Boost.Poolと同じようなアプローチをとっている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::adaptive_pool&lt;/code&gt;を追加。これは、&lt;code&gt;node_allocator&lt;/code&gt;が低コストでシステムにメモリを返せるようにするためのもの。&lt;/li&gt;
&lt;li&gt;これらの機能を使うには、Boost.Containerのビルドが必要。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーベースの順序付き連想コンテナのカスタマイズ性を改善した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(multi)map&lt;/code&gt;および&lt;code&gt;(multi)set&lt;/code&gt;の実装に、AVL tree、Scapegoat tree、Splay treeを使用できるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS2005でcontainer/memory_util.hppをインクルードしたあとに&lt;code&gt;swap()&lt;/code&gt;を使うとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9338&#34; target=&#34;_blank&#34;&gt;#9338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize()&lt;/code&gt;のパフォーマンス問題を解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9637&#34; target=&#34;_blank&#34;&gt;#9637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;の構築を最適化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9648&#34; target=&#34;_blank&#34;&gt;#9648&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_vector&lt;/code&gt;のイテレータから&lt;code&gt;iterator_range&lt;/code&gt;を作れない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9801&#34; target=&#34;_blank&#34;&gt;#9801&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize(size, default_init)&lt;/code&gt;のドキュメントでvalue initializedされると書かれていたので、default initializedに修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9915&#34; target=&#34;_blank&#34;&gt;#9915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほとんどのコンテナの代入演算子で、アロケータの伝搬が間違っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9916&#34; target=&#34;_blank&#34;&gt;#9916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;の中で、重複メモリ範囲で&lt;code&gt;memcpy()&lt;/code&gt;を行っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9955&#34; target=&#34;_blank&#34;&gt;#9955&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;：&lt;code&gt;fcontext_t&lt;/code&gt;型を、構造体から、&lt;code&gt;void*&lt;/code&gt;の別名に変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fcontext_t&lt;/code&gt;型に関連する&lt;code&gt;make_fcontext()&lt;/code&gt;関数のシグニチャの一部が、&lt;code&gt;fcontext_t*&lt;/code&gt;から&lt;code&gt;fcontext_t&lt;/code&gt;に変わる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux環境において、コンテキストに使用するスタックがexecutable stackではないことを示すマーカーを付けた。これにより、executable stackを作る権限が必要なくなる。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8826&#34; target=&#34;_blank&#34;&gt;#8826&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;iOSとWindows 8環境において、Boost.Contextの例外を捕捉できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9437&#34; target=&#34;_blank&#34;&gt;#9437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;x32 ABIをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9445&#34; target=&#34;_blank&#34;&gt;#9445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64leをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9522&#34; target=&#34;_blank&#34;&gt;#9522&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64 le/beの、エンディアン周りのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9743&#34; target=&#34;_blank&#34;&gt;#9743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OS X + clangに対するx86のバグ修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9774&#34; target=&#34;_blank&#34;&gt;#9774&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symmetric_coroutine&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;Boost.Coroutineがサポートするアーキテクチャのリストを、ドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9551&#34; target=&#34;_blank&#34;&gt;#9551&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数スレッドで&lt;code&gt;pull_coroutine&lt;/code&gt;を使用する際に発生する、&lt;code&gt;protected_stack_allocator&lt;/code&gt;での競合状態を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9355&#34; target=&#34;_blank&#34;&gt;#9355&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;POSIX実装のstack_allocator内で&lt;code&gt;mmap&lt;/code&gt;のエラーチェックをしていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9734&#34; target=&#34;_blank&#34;&gt;#9734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap&lt;/code&gt;後に&lt;code&gt;memset&lt;/code&gt;で0を埋める必要はなかったので削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9735&#34; target=&#34;_blank&#34;&gt;#9735&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;coroutineのイテレータが&lt;code&gt;const&lt;/code&gt;修飾版の&lt;code&gt;operator==&lt;/code&gt;を持っていなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9760&#34; target=&#34;_blank&#34;&gt;#9760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap()&lt;/code&gt;の戻り値を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10070&#34; target=&#34;_blank&#34;&gt;#10070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected_stack_allocator&lt;/code&gt;でファイル記述子は必要なかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10157&#34; target=&#34;_blank&#34;&gt;#10157&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HP ux上で、&lt;code&gt;pthread_getcpuclockid()&lt;/code&gt;が定義されていないために、コンパイルエラーになる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6918&#34; target=&#34;_blank&#34;&gt;#6918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで起動時に&lt;code&gt;steady_clock::now()&lt;/code&gt;を呼ぶと、アサーション失敗になる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8006&#34; target=&#34;_blank&#34;&gt;#8006&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrono::process_cpu_clock&lt;/code&gt;のtime pointでの1000の係数が、Linux上で間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9337&#34; target=&#34;_blank&#34;&gt;#9337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clock::time_point&lt;/code&gt;の出力フォーマットが{real;user;system}の3つになっているはずが、V2ではrealのみが出力されていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9342&#34; target=&#34;_blank&#34;&gt;#9342&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono::floor()&lt;/code&gt;／&lt;code&gt;round()&lt;/code&gt;に負のdurationを渡した結果が間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9419&#34; target=&#34;_blank&#34;&gt;#9419&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_clock&lt;/code&gt;がMac OS X向けに定義されていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9698&#34; target=&#34;_blank&#34;&gt;#9698&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::this_thread::sleep_for()&lt;/code&gt;が、Win32上でときどき、すぐに返ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9720&#34; target=&#34;_blank&#34;&gt;#9720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windowsを使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9859&#34; target=&#34;_blank&#34;&gt;#9859&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Solaris上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーをが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9918&#34; target=&#34;_blank&#34;&gt;#9918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;の静的メンバ関数が&lt;code&gt;constexpr&lt;/code&gt;実装になっていなかった場合にコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9811&#34; target=&#34;_blank&#34;&gt;#9811&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clocks&lt;/code&gt;が32ビット環境でオーバーフローする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10069&#34; target=&#34;_blank&#34;&gt;#10069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;QNX上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10151&#34; target=&#34;_blank&#34;&gt;#10151&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34; name=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタのサポートを追加&lt;/li&gt;
&lt;li&gt;MSVC2013の警告を修正&lt;/li&gt;
&lt;li&gt;C++11の最小アロケータ要件をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;仕様に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数テンプレートを使用した、&lt;code&gt;flyweight&amp;lt;T&amp;gt;&lt;/code&gt;で&lt;code&gt;T::T()&lt;/code&gt;への完全転送をサポートした。(以前まではエミュレーションをしていた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;を受け取るコンストラクタと代入演算子をサポート。元となる型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数として使用する。&lt;/li&gt;
&lt;li&gt;DLLモジュール間の静的初期化で発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9553&#34; target=&#34;_blank&#34;&gt;#9553&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス関係の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FusionをGPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;buffer()&lt;/code&gt;を追加。これは、ジオメトリの膨張／収縮(inflating/deflating)を行う。(&lt;code&gt;buffer()&lt;/code&gt;アルゴリズム自体は以前からあったが、Boxを大きくするのみだった。)&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;remove_spikes()&lt;/code&gt;を追加。これは、Ring、Polygon、もしくはMulti Polygonからスパイクを削除するアルゴリズム。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;point_on_surface()&lt;/code&gt;を追加。このアルゴリズムは、Polygonのサーフェイス(インテリア)上のPointを生成する。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_simple()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従ってシンプルなら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_valid()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従って適格なら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;crosses()&lt;/code&gt;を追加。このアルゴリズムは、OGC標準に従って空間的関係をチェックする。&lt;/li&gt;
&lt;li&gt;集合演算アルゴリズム(&lt;code&gt;difference()&lt;/code&gt;, &lt;code&gt;intersection()&lt;/code&gt;, &lt;code&gt;sym_difference()&lt;/code&gt;, &lt;code&gt;union_()&lt;/code&gt;)に対して、入力としてPointと見なせる型の組、および線形ジオメトリをサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance()&lt;/code&gt;アルゴリズムと&lt;code&gt;comparable_distance()&lt;/code&gt;アルゴリズムを、全てのジオメトリの組み合わせに対応した。&lt;/li&gt;
&lt;li&gt;空間関係のアルゴリズム(&lt;code&gt;covered_by()&lt;/code&gt;, &lt;code&gt;touches()&lt;/code&gt;, &lt;code&gt;within()&lt;/code&gt;, etc...)に、線形ジオメトリと面積ジオメトリのサポートを追加。&lt;/li&gt;
&lt;li&gt;様々なアルゴリズムの入力ジオメトリとして、&lt;code&gt;boost::variant&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;に、インデックス付きセグメントのサポートを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;nearest()&lt;/code&gt;に、述語のサポートを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重なっているポリゴンに対する多くのアルゴリズムの結果がおかしくなる問題を、&lt;code&gt;disjoint()&lt;/code&gt;の実装に&lt;code&gt;point_on_surface()&lt;/code&gt;を使用することで解決した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8310&#34; target=&#34;_blank&#34;&gt;#8310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自己交差がないポリゴンから自己交差が作られてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9081&#34; target=&#34;_blank&#34;&gt;#9081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;make_qbk.pyの実行がエラーになってドキュメント生成に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9245&#34; target=&#34;_blank&#34;&gt;#9245&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(sym_)difference()&lt;/code&gt;が成功しない問題を、堅牢な型への再スケーリングによって修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9563&#34; target=&#34;_blank&#34;&gt;#9563&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほぼ水平のSegmentに対してwinding戦略を付けた&lt;code&gt;within()&lt;/code&gt;の実行結果がおかしい問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9628&#34; target=&#34;_blank&#34;&gt;#9628&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スパイクのみのポリゴンの、スパイクを削除するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9871&#34; target=&#34;_blank&#34;&gt;#9871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WKTのドキュメントがなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9947&#34; target=&#34;_blank&#34;&gt;#9947&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LinestringとBoxに対するdifferenceがintersectionを返す問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10019&#34; target=&#34;_blank&#34;&gt;#10019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;boost/geometry/arithmetic.hppのコンセプトチェックがおかしかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10077&#34; target=&#34;_blank&#34;&gt;#10077&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intersects(polygon)&lt;/code&gt;が自己交差のPointを返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;が、OGC標準の非シンプルなジオメトリに対して不正な結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touches()&lt;/code&gt;が、CCW面積ジオメトリに対して正しく動作していなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のnearestクエリが、非デカルト(cartesian)座標系において間違った結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;にInterprocessのアロケータを使うと、いくつかのケースでクラッシュしていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 6.0向けのワークアラウンドをいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_combine()&lt;/code&gt;の継続的な改善。これは、以前からドキュメント化されていたアルゴリズムの変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Linux上で&lt;code&gt;message_queue&lt;/code&gt;がデッドロックする問題を修正(#Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのコンピュータではCommon AppDataのレジストリが空であるため、Interprocessが動かない問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9226&#34; target=&#34;_blank&#34;&gt;#9226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WaitForSingleObject(mutex)&lt;/code&gt;を呼び出しているところで、&lt;code&gt;WAIT_ABANDONED&lt;/code&gt;をハンドリングするよう修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9284&#34; target=&#34;_blank&#34;&gt;#9284&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CreateMutex()&lt;/code&gt;を呼び出しているところで、失敗値を&lt;code&gt;winapi::invalid_handle_value(-1)&lt;/code&gt;と比較していたが、実際の失敗値は&lt;code&gt;NULL&lt;/code&gt;なので、比較する値を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9285&#34; target=&#34;_blank&#34;&gt;#9285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timed_wait&lt;/code&gt;が寿命切れをチェックしていなかったので修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9288&#34; target=&#34;_blank&#34;&gt;#9288&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AndroidはXSI共有メモリオブジェクトをサポートしていないので、ワークアラウンドを修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9408&#34; target=&#34;_blank&#34;&gt;#9408&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_external_buffer&lt;/code&gt;オブジェクトの構築でクラッシュする問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9729&#34; target=&#34;_blank&#34;&gt;#9729&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsでイベントログが破損しているとbooststampの生成に失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9767&#34; target=&#34;_blank&#34;&gt;#9767&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Android NDK GCC 4.8でコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9835&#34; target=&#34;_blank&#34;&gt;#9835&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで共有フォルダが使用可能でない場合に、&lt;code&gt;get_tmp_base_dir()&lt;/code&gt;が失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9911&#34; target=&#34;_blank&#34;&gt;#9911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init_atomic_func()&lt;/code&gt;と&lt;code&gt;fini_atomic_func()&lt;/code&gt;での、変数の未初期化警告を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9946&#34; target=&#34;_blank&#34;&gt;#9946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_manager::find(unique_instance_t*)&lt;/code&gt;がコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10011&#34; target=&#34;_blank&#34;&gt;#10011&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cray C++ Compilerのサポートを追加(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/2&#34; target=&#34;_blank&#34;&gt;#2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW環境のために、&lt;code&gt;interprocess_exception&lt;/code&gt;例外を送出する部分を修正。エラー内容の取得とthrowを同一行に書くと、&lt;code&gt;GetLastError()&lt;/code&gt;がリセットされてしまうため、2行に分離した(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/3&#34; target=&#34;_blank&#34;&gt;#3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;message_queue&lt;/code&gt;に、&lt;code&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/code&gt;オプションを追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock()&lt;/code&gt;の&lt;code&gt;(timed_)lock&lt;/code&gt;コードをリファクタリングし、統一化した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable&lt;/code&gt;のデストラクタの挙動として、POSIXのセマンティクスを許可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/code&gt;オプションを追加。これは、共有メモリオブジェクトの実装としてメモリマップドファイルが使われた場合に、使用する共有ディレクトリの場所を指定するためのもの。&lt;/li&gt;
&lt;li&gt;他のライブラリと同じように、&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;をサポートした。これが定義されている場合、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;や他のWindows SDKの構造体を使用し、そうでなければ、重いヘッダーの負担を軽減する構造体を定義して使用する。(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory&lt;/code&gt;に&lt;code&gt;get_size()&lt;/code&gt;メンバ関数を追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenによって生成されるリファレンスを改善し、先行宣言のヘッダーを修正、更新した。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&lt;/span&gt; 1.55.0で導入したABIレギュレッションを修正した。主にMSVCコンパイラ周りで。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 以前から非推奨としていた機能を削除した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;xxx_dont_splay()&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;splay_set_base_hook&lt;/code&gt;と&lt;code&gt;splay_set_member_hook&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splaytree_algorithms&lt;/code&gt;の関数の追加パラメータ「&lt;code&gt;bool splay = true&lt;/code&gt;」を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Visual Studio 2010/2012で&lt;code&gt;has_member_function_callable_with_construct_impl&lt;/code&gt;がコンパイルエラーになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9332&#34; target=&#34;_blank&#34;&gt;#9332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list_impl::iterator_to()&lt;/code&gt;メンバ関数内で使用する&lt;code&gt;value_traits&lt;/code&gt;を、ステートフルにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9650&#34; target=&#34;_blank&#34;&gt;#9650&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のSun CC CompilerでIntrusiveのコンパイルができなくなっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9746&#34; target=&#34;_blank&#34;&gt;#9736&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;safe_link(or auto_unlink)を付けたintrusive listが、解放後のメモリを操作していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9940&#34; target=&#34;_blank&#34;&gt;#9940&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9949&#34; target=&#34;_blank&#34;&gt;#9949&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_cast&lt;/code&gt;の使用をやめた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9948&#34; target=&#34;_blank&#34;&gt;#9948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトフックから派生しない場合の、侵入フックのテストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9961&#34; target=&#34;_blank&#34;&gt;#9961&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーの再バランスコードの冗長な代入を回避して、最適化した&lt;/li&gt;
&lt;li&gt;64ビット環境の&lt;code&gt;suggested_upper_bucket_count()&lt;/code&gt;と&lt;code&gt;suggested_lower_bucket_count()&lt;/code&gt;用に、64ビットの素数値を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いSun CC Compilerのworkaroundを削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;try_lexical_convert()&lt;/code&gt;関数を追加。この関数は変換失敗時に&lt;code&gt;false&lt;/code&gt;を返し、出力パラメータの型にDefault Constructibleを要求しない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6700&#34; target=&#34;_blank&#34;&gt;#6700&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;先頭が0の文字列を&lt;code&gt;bool&lt;/code&gt;に変換する処理を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9659&#34; target=&#34;_blank&#34;&gt;#9659&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Boost 1.47.0まで&lt;code&gt;boost::lexical_cast&amp;lt;bool&amp;gt;(&#34;00&#34;)&lt;/code&gt;は成功し&lt;code&gt;false&lt;/code&gt;を返していたが、それ以降で&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外を送出していた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より小さなバイナリを生成し、コンパイラの作業をよりシンプルにする変更を行った(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9046&#34; target=&#34;_blank&#34;&gt;#9046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;このライブラリを、Boost Conversion Libraryから分離した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8991&#34; target=&#34;_blank&#34;&gt;#8991&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;全体的な変更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsターゲットにおいて、このライブラリはデフォルトでWindows XP向けにコンパイルするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;record&lt;/code&gt;と&lt;code&gt;record_view&lt;/code&gt;の添字演算子に&lt;code&gt;attribute_name&lt;/code&gt;引数を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;で、一時オブジェクトを出力できるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9389&#34; target=&#34;_blank&#34;&gt;#9389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フォーマット文字列に、名前付きスコープの関数名とソースファイル名を入れられるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9263&#34; target=&#34;_blank&#34;&gt;#9263&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;named scope formatterに、不完全および空のmarkerのサポートを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9123&#34; target=&#34;_blank&#34;&gt;#9123&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不完全な名前付きスコープリストのデフォルトの出力フォーマットを変更した：末尾のスコープ区切り文字を省略するようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::regex&lt;/code&gt;のサポートを追加。&lt;/li&gt;
&lt;li&gt;Boost.Logのデフォルトで、Boost.Regexを内部的な正規表現に使用するようにした。この正規表現バックエンドは、マクロで変更できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;バグ修正：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AVX2を有効にしたCPU(たとえばIntelのHaswell)での&lt;code&gt;dump&lt;/code&gt;マニピュレータを修正&lt;/li&gt;
&lt;li&gt;ロガークラスの&lt;code&gt;get_attribute()&lt;/code&gt;メンバ関数のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;同期／非同期sinkフロントエンドの&lt;code&gt;locked_backend()&lt;/code&gt;関数の実装で発生していたデータ競合を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block_on_overflow&lt;/code&gt;戦略を使用した非同期sinkの&lt;code&gt;enqueue()&lt;/code&gt;メンバ関数での、ロギングスレッドの無限ブロックを修正より詳細な変更は、ChangeLogを参照：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; メンテナンス用の機能を、libs/math/include_privateディレクトリ以下に移動した。影響を受けるヘッダは以下：&lt;ul&gt;
&lt;li&gt;boost/math/tools/test_data.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/remez.hpp&lt;/li&gt;
&lt;li&gt;boost/math/constants/generate.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/solve.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/test.hpp&lt;/li&gt;
&lt;li&gt;もしこれらの機能を引き続き使いたい場合は、libs/math/include_privateディレクトリへのパスを通せばよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 分布関数と特殊関数が、overflow errorを吐き出す変わりに、正の無限大の値を返すよう修正し、ドキュメントに挙動を明記した。これまでoverflow errorが発生したときのデフォルトの動作は&lt;code&gt;std::overflow_error&lt;/code&gt;例外の送出だったが、例外を送出するかしないかは、関数ごとに違っていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10111&#34; target=&#34;_blank&#34;&gt;#10111&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;影響がある特殊関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inv()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影響がある分布関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pareto_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beta_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;round()&lt;/code&gt;と&lt;code&gt;trunc()&lt;/code&gt;の引数として、整数を受け取れるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10066&#34; target=&#34;_blank&#34;&gt;#10066&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;0階導関数(zero derivative)をハンドリングするよう、Halleyのイテレーションを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10046&#34; target=&#34;_blank&#34;&gt;#10046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;geometric distribution (幾何分布)の内部処理で、渡されたポリシーを使っていない箇所があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9833&#34; target=&#34;_blank&#34;&gt;#9833&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;negative binomial distribution (負の二項分布)のコーナーケースを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9834&#34; target=&#34;_blank&#34;&gt;#9834&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OSでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;スターリングの近似を使うために、&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;の精度を任意に変更できる&lt;code&gt;bernoulli_numbers&lt;/code&gt;を追加(Nikhar Agrawal氏作)&lt;/li&gt;
&lt;li&gt;ベッセル関数の最初の導関数を追加(Anton Bikineev氏作)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_j_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_i_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_k_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_bessel_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Studentのt分布のサンプルコードにあったバグを修正。sample meanの透過性テストも一緒に修正。&lt;/li&gt;
&lt;li&gt;より良いルート探索コードに使えるmax_iterパラメータをドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9225&#34; target=&#34;_blank&#34;&gt;#9225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;型の定数を有効／無効にするオプションを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9240&#34; target=&#34;_blank&#34;&gt;#9240&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベッセルのI0とI1における、負数のハンドリングを整理した(それと、もう使っていないコードを削除した)。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9512&#34; target=&#34;_blank&#34;&gt;#9512&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;に非常に小さい値が渡された場合でもハンドリングできるよう修正した。これらはspuriousオーバーフローを生成しないようになった。(Rocco Romeoに感謝)&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9672&#34; target=&#34;_blank&#34;&gt;#9672 Laplace distribution(ラプラス分布)のPDFとCDFがdomain error例外を送出する&lt;/a&gt;」ランダムな変量(variate)を無限にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rising_factorial&lt;/code&gt;、&lt;code&gt;falling_factorial&lt;/code&gt;、&lt;code&gt;tgamma_delta_ratio&lt;/code&gt;にあったいくつかのコーナーケースを修正した。Rocco Romeoに感謝。&lt;/li&gt;
&lt;li&gt;使っていなかった定数&lt;code&gt;pow23_four_minus_pi&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;マクロを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;MSVC向けの設定マクロがundefされていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9482&#34; target=&#34;_blank&#34;&gt;#9482&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;BOOST_RV_REF_START&lt;/code&gt;というマクロが記載されていたが、&lt;code&gt;BOOST_RV_REF_BEG&lt;/code&gt;の間違いだったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9045&#34; target=&#34;_blank&#34;&gt;#9045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アラインメント指定された型に対して、Boost.Moveが自前実装している&lt;code&gt;is_convertible&lt;/code&gt;がコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8420&#34; target=&#34;_blank&#34;&gt;#8420&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#mpl&#34; name=&#34;mpl&#34;&gt;MPL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::mpl::for_each&lt;/code&gt;を、GPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator()&lt;/code&gt;がCollectionコンセプトをチェックしているが、実際にはRandomAccessCollectionを要求していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5664&#34; target=&#34;_blank&#34;&gt;#5664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual C++ 2010デバッグモードでのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4874&#34; target=&#34;_blank&#34;&gt;#4874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fortran_storage_ordering&lt;/code&gt;のサンプルコードが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コンセプトが&lt;code&gt;detail&lt;/code&gt;名前空間に置かれていたので、&lt;code&gt;detail&lt;/code&gt;の外に出した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++標準文書へのリンクが壊れていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9212&#34; target=&#34;_blank&#34;&gt;#9212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの-Wundefオプションで発生する&lt;code&gt;BOOST_MULTI_ARRAY_NO_GENERATORS&lt;/code&gt;関係の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8368&#34; target=&#34;_blank&#34;&gt;#8368&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;erase(iterator)のオーバーロードが、次を指すイテレータを返す必要があるためにパフォーマンスが遅かった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4264&#34; target=&#34;_blank&#34;&gt;#4264&lt;/a&gt;を参照)。&lt;a href=&#34;http://lwg.github.io/issues/lwg-closed.html#579&#34; target=&#34;_blank&#34;&gt;LWG issue #579&lt;/a&gt;の解決策に基いて、ひとつ以上の要素メモリを使用することを犠牲にして、eraseのインタフェースを維持したままこの問題を解決した。実際には、非順序連想コンテナに対する計算量の要件は、hashed indicesで以下のように改善した：&lt;ul&gt;
&lt;li&gt;与えられた要素の削除を、無条件に定数時間にした&lt;/li&gt;
&lt;li&gt;最悪ケースの計算量はO(n)ではなく、O(n&lt;sub&gt;dist&lt;/sub&gt;)となる。n&lt;sub&gt;dist&lt;/sub&gt;は、そのインデックスにおける要素数とは同等でない数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hashed indiciesの&lt;code&gt;iterator&lt;/code&gt;と&lt;code&gt;local iterator&lt;/code&gt;の内部表現が、新しいデータ構造に依存して変更される。これはシリアライズに影響を与えるため、対応するシリアライズのバージョンが0から1に上がる。hashed indiciesの&lt;code&gt;(local) iterator&lt;/code&gt;を含む古いアーカイブは、1.56.0のBoost.Multi-Indexに読み込める。&lt;/li&gt;
&lt;li&gt;hashed indiciesに&lt;code&gt;reserve&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;hashed indiciesの等値／非等値のチェックを、C++標準規格の[unord.req]仕様に合わせた。&lt;/li&gt;
&lt;li&gt;Boost.Multi-Indexの&lt;code&gt;public&lt;/code&gt;インタフェースを、&lt;code&gt;noexcept&lt;/code&gt;に対応した。(&lt;code&gt;noexcept&lt;/code&gt;が使用可能なコンパイラで)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;への挿入失敗のパフォーマンスを改善した。&lt;/li&gt;
&lt;li&gt;MSVC 7.0以前のサポートを目的とした内部コードを削除した。この修正によって、コンパイル時間がわずかに速くなる可能性がある。&lt;/li&gt;
&lt;li&gt;右辺値を挿入できなかったバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9665&#34; target=&#34;_blank&#34;&gt;#9665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/code&gt;に対応し、名前空間修飾なしのプレースホルダーを直接使用しないように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9798&#34; target=&#34;_blank&#34;&gt;#9798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス上の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#multi-precision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数型から&lt;code&gt;rational&lt;/code&gt;への変換を&lt;code&gt;implicit&lt;/code&gt;にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10082&#34; target=&#34;_blank&#34;&gt;#10082&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked_cpp_rational&lt;/code&gt; typedefの定義を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の、文字列からの代入でのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2進浮動小数点のバックエンドとして、&lt;code&gt;cpp_bin_float&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の文字列からの代入で発生するバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;符号がクリアされない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVCのコンパイラintrinsicをインクルードするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9336&#34; target=&#34;_blank&#34;&gt;#9336&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9432&#34; target=&#34;_blank&#34;&gt;#9432&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gmp_rational&lt;/code&gt;をムーブコピーできるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9497&#34; target=&#34;_blank&#34;&gt;#9497&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numeric_limits&lt;/code&gt;の値のリストをドキュメントに追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#odeint&#34; name=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;適切な代数と操作を自動検出するディスパッチャーを追加&lt;/li&gt;
&lt;li&gt;Eigen、Boost.Multiarray、Boost.MPI、Boost.Compute、Blaze、NT2のサポートを追加&lt;/li&gt;
&lt;li&gt;代数インタフェースを、algebra.norm_inf関数を使用するよう変更した&lt;/li&gt;
&lt;li&gt;ODEの解をイテレートするためのイテレータを追加。これは、積分(integrate)関数の代わりに使用できる。&lt;/li&gt;
&lt;li&gt;Velocity-Verletメソッドを追加&lt;/li&gt;
&lt;li&gt;小さなバグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照のサポートを追加。&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;が、ムーブ可能でコピー不可な&lt;code&gt;T&lt;/code&gt;型を扱えるようになった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;を改善した。(ムーブ操作を使うようにした)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace()&lt;/code&gt;メンバ関数を追加。これは &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1841&#34; target=&#34;_blank&#34;&gt;#1841&lt;/a&gt; でリクエストされたもの。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;をムーブ可能にした。&lt;code&gt;std::move_if_noexcept&lt;/code&gt;と組み合わせられる、条件付きの&lt;code&gt;noexcept&lt;/code&gt;仕様にした。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; プラットフォームがサポートしていれば、safe boolイディオムの代わりに&lt;code&gt;explicit operator bool()&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4227&#34; target=&#34;_blank&#34;&gt;#4227&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;オブジェクトを誤って不適切にシリアライズしないように、&lt;code&gt;operator&amp;lt;&amp;lt;(ostream&amp;amp;, optional const&amp;amp;)&lt;/code&gt;の先行宣言を定義した。&lt;/li&gt;
&lt;li&gt;非推奨なメンバ関数である&lt;code&gt;reset()&lt;/code&gt;の使用を、サンプルコードから削除した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9005&#34; target=&#34;_blank&#34;&gt;#9005&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;との比較では、&lt;code&gt;T&lt;/code&gt;にEqualityComparableを要求しないようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&amp;lt;T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;を明確に禁止した。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;への一時オブジェクトの束縛を、明確に禁止した。&lt;/li&gt;
&lt;li&gt;包含している値にアクセスする新たな手段として、&lt;code&gt;value()&lt;/code&gt;、&lt;code&gt;value_or()&lt;/code&gt;、&lt;code&gt;value_or_eval()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントを更新し、再編した。チュートリアルとクイックガイドの項を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34; name=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数マクロを使用する場合のタプル機能を、配列機能と一致するものとして追加した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全てのグループ間でのヘルプメッセージの縦位置を合わせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6114&#34; target=&#34;_blank&#34;&gt;#6114&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ハイフン区切りされたオプション名が、エラーメッセージ内で切り捨てられる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8009&#34; target=&#34;_blank&#34;&gt;#8009&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_regex&amp;lt;&amp;gt;::mark_count()&lt;/code&gt;の挙動を、ドキュメントに一致するよう修正した。&lt;code&gt;basic_regex&amp;lt;&amp;gt;::subexpression(n)&lt;/code&gt;も同様に、一致するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8903&#34; target=&#34;_blank&#34;&gt;#8903&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9283&#34; target=&#34;_blank&#34;&gt;#9283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ロケールによって生成された照合文字列へのnul埋め込みが失敗した場合の、照合コードのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9451&#34; target=&#34;_blank&#34;&gt;#9451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threadライブラリの非推奨なミューテックスを使っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9461&#34; target=&#34;_blank&#34;&gt;#9461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不正なUTF-8シーケンスの、より良いチェッカーを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9473&#34; target=&#34;_blank&#34;&gt;#9473&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34; name=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;のオーバーロードを更新し、C++言語規格に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&#34; target=&#34;_blank&#34;&gt;N3939&lt;/a&gt;で提案されている配列型(&lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;T[N]&lt;/code&gt;)に対応した。&lt;/li&gt;
&lt;li&gt;C++標準の欠陥レポート&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&#34; target=&#34;_blank&#34;&gt;LWG #2070&lt;/a&gt;に対応し、&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;におけるスカラ型と配列型の実装を修正した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7446&#34; target=&#34;_blank&#34;&gt;#7446&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_all()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7447&#34; target=&#34;_blank&#34;&gt;#7447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async()&lt;/code&gt;関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7448&#34; target=&#34;_blank&#34;&gt;#7448&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;並行キューとして、&lt;code&gt;sync_queue&lt;/code&gt;と&lt;code&gt;sync_bounded_queue&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8274&#34; target=&#34;_blank&#34;&gt;#8274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool&lt;/code&gt; executorを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8513&#34; target=&#34;_blank&#34;&gt;#8513&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latch&lt;/code&gt;クラスを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8518&#34; target=&#34;_blank&#34;&gt;#8518&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;／&lt;code&gt;shared_future&lt;/code&gt;の&lt;code&gt;then()&lt;/code&gt;メンバ関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8516&#34; target=&#34;_blank&#34;&gt;#8516&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_lock_guard()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9058&#34; target=&#34;_blank&#34;&gt;#9058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;動的なexecutorと、executorアダプタを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9571&#34; target=&#34;_blank&#34;&gt;#9571&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsの64ビット環境上で、&lt;code&gt;GetTickCount()&lt;/code&gt;関数の代わりに、&lt;code&gt;GetTickCount64()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_thread&lt;/code&gt;がmsvc-12.0でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9333&#34; target=&#34;_blank&#34;&gt;#9333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;intel-linux-14.0.1上で&lt;code&gt;scoped_thread&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9341&#34; target=&#34;_blank&#34;&gt;#9341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、&lt;code&gt;async(Executor, ...)&lt;/code&gt;のコンパイルに失敗する問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9366&#34; target=&#34;_blank&#34;&gt;#9366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、executorのテストを通した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9402&#34; target=&#34;_blank&#34;&gt;#9402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_future&lt;/code&gt;のテストを通した(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9404&#34; target=&#34;_blank&#34;&gt;#9404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchronizationドキュメントの細かい修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9471&#34; target=&#34;_blank&#34;&gt;#9471&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future_waiter::add()&lt;/code&gt;がクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9535&#34; target=&#34;_blank&#34;&gt;#9535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock_for()&lt;/code&gt;に0ミリ秒を指定した場合、Windows上でプログラムが終了しない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9618&#34; target=&#34;_blank&#34;&gt;#9618&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスのデストラクタの説明が不明瞭だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9625&#34; target=&#34;_blank&#34;&gt;#9625&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスに、アンドキュメントな&lt;code&gt;public&lt;/code&gt;メンバ関数&lt;code&gt;start_thread()&lt;/code&gt;があったので、&lt;code&gt;private&lt;/code&gt;に移動(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9632&#34; target=&#34;_blank&#34;&gt;#9632&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW上で、&lt;code&gt;boost::thread::physical_concurrency()&lt;/code&gt;関数がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9673&#34; target=&#34;_blank&#34;&gt;#9673&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;にBoost.DateTimeの無限時間を指定すると、意図と違ってすぐに目覚めてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9708&#34; target=&#34;_blank&#34;&gt;#9708&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future::then()&lt;/code&gt;に指定した関数が、2回呼ばれてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9711&#34; target=&#34;_blank&#34;&gt;#9711&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&lt;code&gt;&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windows&lt;/code&gt;を使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9867&#34; target=&#34;_blank&#34;&gt;#9867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;のドキュメントの誤字を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10008&#34; target=&#34;_blank&#34;&gt;#10008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;内でヌルポインタにアクセスする可能性があったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10058&#34; target=&#34;_blank&#34;&gt;#10058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の右辺値参照エミュレーションでの可変引数バージョンがコンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10125&#34; target=&#34;_blank&#34;&gt;#10125&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の&lt;code&gt;(Function, once_flag&amp;amp;)&lt;/code&gt;のオーバーロードを非推奨化(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10126&#34; target=&#34;_blank&#34;&gt;#10126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのgcc上の&lt;code&gt;pthread_delay_np()&lt;/code&gt;関数はパラメータが異なっているため、コンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10147&#34; target=&#34;_blank&#34;&gt;#10147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PowerPC上での&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が常に0を返していたので、修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10155&#34; target=&#34;_blank&#34;&gt;#10155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;と&lt;code&gt;when_all()&lt;/code&gt;に&lt;code&gt;inline&lt;/code&gt;を付け忘れていて、シンボルの重複定義でリンクエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10184&#34; target=&#34;_blank&#34;&gt;#10184&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#tti&#34; name=&#34;tti&#34;&gt;TTI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Solaris Studio C++ compilerのサポートを強化した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9441&#34; target=&#34;_blank&#34;&gt;#9441&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テンプレート引数としてクラスではない型が渡される、全ての状況をサポートした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9444&#34; target=&#34;_blank&#34;&gt;#9444&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小さなドキュメントと警告の修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9377&#34; target=&#34;_blank&#34;&gt;#9377&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9719&#34; target=&#34;_blank&#34;&gt;#9719&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;整数のバケットに、常に素数を使用するようにした。連続した整数を挿入するときのパフォーマンスを改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9282&#34; target=&#34;_blank&#34;&gt;#9282&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11標準仕様に基づき、アロケータのみを使用してメモリ確保するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのコンポーネントを、Boost.Coreモジュールに移動した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty_deleter&lt;/code&gt;を非推奨とした。代わりにBoost.Coreの&lt;code&gt;null_deleter&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base_from_member&lt;/code&gt;ユーティリティで、左辺値参照のメンバ型をサポートした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7577&#34; target=&#34;_blank&#34;&gt;#7577&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#uuid&#34; name=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的なC++11機能のサポートを追加。&lt;/li&gt;
&lt;li&gt;SSE最適化バージョンの関数を実装した。これには、&lt;code&gt;swap&lt;/code&gt;や比較演算子も含まれる。SSE版は、コンパイラによって自動的に有効になるが、明示的に有効／無効を設定できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8509&#34; target=&#34;_blank&#34;&gt;#8509&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_UUID_NO_SIMD&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE2&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE3&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE41&lt;/code&gt;のいずれかをdefineする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8495&#34; target=&#34;_blank&#34;&gt;#8495&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8697&#34; target=&#34;_blank&#34;&gt;#8697&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PLAT_*&lt;/code&gt;のプラットフォーム定義に、MinGWとWindowsのバリエーションを追加。&lt;/li&gt;
&lt;li&gt;Windows 8のモバイルデバイスをターゲットとするWindowsで、ARMアーキテクチャを検出できるようにした。&lt;/li&gt;
&lt;li&gt;64ビットARMの検出を改善。&lt;/li&gt;
&lt;li&gt;オペレーティング・システムとして、iOSの検出を追加。&lt;/li&gt;
&lt;li&gt;いくつかのプラットフォームでのエンディアン検出を改善。&lt;/li&gt;
&lt;li&gt;プラットフォームとコンパイラを検出するための、エミュレーション機能を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; サポートしているコンパイラでは、可変引数テンプレートを使用するようにした。これによってバイナリが小さくなり、コンパイル速度も改善することを期待できるが、いくつかのケースで既存のメタプログラミングコードを破壊する可能性がある。とくに、&lt;code&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_PARAMS.html&#34; target=&#34;_blank&#34;&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&#34; target=&#34;_blank&#34;&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/a&gt;&lt;/code&gt;が使われなくなったことについて注意が必要だ。可変引数テンプレートを使用する場合、&lt;code&gt;BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES&lt;/code&gt;が無効になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic_get()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9479&#34; target=&#34;_blank&#34;&gt;#9479&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブのみ可能な型をビジターから返せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;variant::swap()&lt;/code&gt;を最適化し、&lt;code&gt;move_swap()&lt;/code&gt;との曖昧さを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2839&#34; target=&#34;_blank&#34;&gt;#2839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブ代入演算子、デフォルトコンストラクタ、ムーブコンストラクタに条件付きの&lt;code&gt;noexcept&lt;/code&gt;を追加し、&lt;code&gt;variant&lt;/code&gt;を&lt;code&gt;move_if_noexcept()&lt;/code&gt;フレンドリーにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fvisibility=hidden&lt;/code&gt;フラグが設定されていても、例外をモジュール間で見えるようにした。&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3020&#34; target=&#34;_blank&#34;&gt;#3020&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;＜ライブラリ名＞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt; (必要であれば分類分けをする)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/0&#34; target=&#34;_blank&#34;&gt;#0&lt;/a&gt;) (←svn.boost.orgのissuesへのリンク)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/0&#34; target=&#34;_blank&#34;&gt;r0&lt;/a&gt;) (←svn.boost.orgのcommitへのリンク)&lt;b&gt;バグ修正&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;： 赤文字+ボールドではっきりと分かるように&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&lt;/span&gt;： これも赤文字で&lt;/li&gt;
&lt;li&gt;[訳注] 本家ノートの記述が不十分であると考えるときは、適宜注釈を入れる&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://blog.example.com/path/to/references&#34; target=&#34;_blank&#34;&gt;必要であれば外部の文献へのリンクを挿入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 5.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++14, libc++: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.9.0, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1, 13.0, 12.1, 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, ARM: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, x86: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yusuke Ichinohe</name>
        <email>yusuke.ichinohe@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostを使用しているプロジェクト -- リンク切れになっている箇所のURLを更新</title>
      <link href="https://boostjp.github.io/used_project.html"/>
      <id>8b8d2cf8e4b22434d926050376f4b6c01d1407b5:used_project.md</id>
      <updated>2017-01-03 20:14:36 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostを使用しているプロジェクト&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;見つけたら書いていってください。&lt;/p&gt;
&lt;p&gt;Boostのどのライブラリを使用しているかも書くとさらにGood！Boostを使用したコードの参考にしてください。&lt;/p&gt;
&lt;h2&gt;公式情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_shrink.html&#34; target=&#34;_blank&#34;&gt;商用製品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_open.html&#34; target=&#34;_blank&#34;&gt;オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/uses_inhouse.html&#34; target=&#34;_blank&#34;&gt;会社&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://think-async.com/Asio/WhoIsUsingAsio&#34; target=&#34;_blank&#34;&gt;Boost.Asioを使用しているプロジェクト&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.osgeo.org/ggl/wiki/WhoUsesGGL&#34; target=&#34;_blank&#34;&gt;Boost.Geometry(旧名GGL)を使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/graph/doc/users.html&#34; target=&#34;_blank&#34;&gt;Boost.Graphを使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;boostjp&lt;/h2&gt;
&lt;h3&gt;オープンソースライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt; [&lt;a href=&#34;https://github.com/mongodb/mongo&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
データベースライブラリ。
Boost.Any, Boost.Asio, Boost.Bind, Boost.Filesystem, Boost.Function, Boost.ProgramOptions, Boost.SmartPtr, Boost.Spirit, Boost.Thread, Boost.Tuple, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://libcinder.org/&#34; target=&#34;_blank&#34;&gt;Cinder&lt;/a&gt;
アーティスティック系ライブラリ。
Boost.SmartPtr, Boost.Threadなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vrac.iastate.edu/%7Edkabala/OpenSGToolbox/&#34; target=&#34;_blank&#34;&gt;OpenSGToolbox&lt;/a&gt; [&lt;a href=&#34;https://github.com/djkabala/OpenSGToolbox&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
アーティスティック系ライブラリであるOpenSGの拡張ライブラリ。UI, FieldContainerEditor, Lua, ParticleSystem, ParticleTrail, 物理演算, サウンド, TextDom, ビデオ, Octree, AStarなどの機能がある。
Boost.Any, Boost.Assign, Boost.Bind, Boost.Filesystem, Boost.Format, Boost.LexicalCast, Boost.Random, Boost.Signals2, Boost.SmartPtr, Boost.StringAlgo, Boost.Xpressive, Boost.Functionなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.webtoolkit.eu/wt/&#34; target=&#34;_blank&#34;&gt;Wt&lt;/a&gt;
Web アプリケーションフレームワーク。Boost.Any, Boost.Array, Boost.Asio, Boost.Bind, Boost.DateTime, Boost.Filesystem, Boost.Function, Boost.Intrusive, Boost.Lambda, Boost.LexicalCast, Boost.Noncopyable, Boost.Optional, Boost.Pool, Boost.ProgramOptions, Boost.Regex, Boost.Ref, Boost.Range, Boost.Signals2, Boost.SmartPtr, Boost.Spirit, Boost.StringAlgo, Boost.Test, Boost.Thread, Boost.Tokenizer, Boost.Tuple, Boost.TypeTraits, Boost.uBlas, Boost.Unordered, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stlab.adobe.com/group__asl__home.html&#34; target=&#34;_blank&#34;&gt;Adobe Source Libraries&lt;/a&gt;
クロスプラットフォームのGUI構築とそれに付随するユーティリティライブラリ群。
GUI構築にAdam,Eveという2つの独自言語を採用しており、ウィジェット間依存関係、GUIレイアウトとロジックの記述をそれぞれと完全に分離できる。
少なくとも Boost.Utility,Function,Signals,Range,Bind,TypeTraits,ConceptCheck,MPL,FunctionTypes,Noncopyable,Fusion,Operators,Iterator,Array,Any,Tuple,SharedPtr,Integer,StaticAssert を使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;オープンソースソフトウェア&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dynamomd.org/&#34; target=&#34;_blank&#34;&gt;DynamO&lt;/a&gt; [&lt;a href=&#34;https://github.com/toastedcrumpets/DynamO&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
イベント駆動シミュレータ。
Boost.Array, Boost.CircularBuffer, Boost.DateTime, Boost.Foreach, Boost.Function, Boost.Iostreams, Boost.LexicalCast, Boost.Math, Boost.ProgramOptions, Boost.Random, Boost.SmartPtr, Boost.Tokenizer, Boost.Tuple, Boost.Unorderedなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aptitude
Debian系Linuxディストリビューションで使用されているパッケージ管理システムaptの対話的フロントエンド。
Boost.Iostreamsを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.phusionpassenger.com/&#34; target=&#34;_blank&#34;&gt;Phusion Passenger&lt;/a&gt;
Ruby, Python, Node.jsのウェブアプリケーションフレームワークを動作されるアプリケーションサーバー。mod_rails, mod_rackなどとも呼ばれる。既存のウェブサーバー（Apacheまたはnginx）のモジュールとして動作するほか、単体でもHTTPサーバーとして動作する。
&lt;a href=&#34;https://github.com/phusion/passenger/blob/master/dev/copy_boost_headers&#34; target=&#34;_blank&#34;&gt;dev/copy_boost_headers&lt;/a&gt;を見る限り、Boost.Thread、Boost.DateTime、Boost.SmartPtr、Boost.Function、Boost.Bindあたりを使用している模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/hiphop-php&#34; target=&#34;_blank&#34;&gt;Hiphop for PHP&lt;/a&gt;
PHPのソースコードからC++ソースコードを生成するトランスレータ。これ自体もC++で書かれており、Boostも使用されている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mosh.mit.edu/&#34; target=&#34;_blank&#34;&gt;Mosh: the mobile shell&lt;/a&gt;
SSHの置き換えを狙う端末アプリケーション。回線切断からの再接続やローカルエコーにより、SSHと比べ高信頼・快適な環境を売りにしている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mapnik.org/&#34; target=&#34;_blank&#34;&gt;Mapnik&lt;/a&gt;
地図データの扱い、描画に関するライブラリ。&lt;a href=&#34;https://github.com/mapnik/mapnik/blob/master/INSTALL.md&#34; target=&#34;_blank&#34;&gt;INSTALL.md&lt;/a&gt;より、Filesystem、System、Thread、Regex、ProgramOptionsを使用していることの記載あり。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ja.libreoffice.org/&#34; target=&#34;_blank&#34;&gt;LibreOffice&lt;/a&gt;
オフィススイート（文書作成、表計算、プレゼンテーション、etc.）。ver.4.0.1(2013/03/07)時点でのBoost使用状況をソースコードから&lt;a href=&#34;https://gist.github.com/usagi/5108142&#34; target=&#34;_blank&#34;&gt;抽出して見る&lt;/a&gt;とArray、DateTime、Foreach、Preprocessor、Random、SmartPtr、Spirit、UnorderedMapなど使われている。ver.4のCalcからはRANDOM()にBoost.Randomを用いたメルセンヌツイスターを&lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=33365&#34; target=&#34;_blank&#34;&gt;採用&lt;/a&gt;するなどBoostの利用も広まっている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www-jp.mysql.com/&#34; target=&#34;_blank&#34;&gt;MySQL&lt;/a&gt;
リレーショナルデータベース管理システム (RDBMS)。オープンソースのRDBMSにおいて、人気がある製品の1つである。
GIS関係の実装においてBoost.Geometoryを使用している。
参考: &lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/04/28/131514&#34; target=&#34;_blank&#34;&gt;MySQLの実装にBoost.Geometryが使われはじめた - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;商用製品&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://shade3d.jp/&#34; target=&#34;_blank&#34;&gt;Shade&lt;/a&gt;
e-frontier社 3DCG作成ソフト。
プラグイン用SDKにBoostを含む。
Boost.TypeTraits、Boost.MPLなどを使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.penguin-aqua.jp/archives/2145&#34; target=&#34;_blank&#34;&gt;長崎ペンギン水族館バーチャルシアター&lt;/a&gt;
3Dシアター。立体視CG描画のための3DエンジンにBoostを使用。
アセット管理にBoost.Filesystem、Boost.SmartPtr、Boost.Flyweight。
キャラクターの動きにBoost.Context、Boost.Random。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;会社&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aiming-inc.com/ja&#34; target=&#34;_blank&#34;&gt;株式会社Aiming&lt;/a&gt;
オンラインゲームのサーバー開発にBoost.Any、Boost.Array、Boost.Foreach、Boost.Format、Boost.Function、Boost.LexicalCast、Boost.Multi-Index、Boost.Optional、Boost.Regex、Boost.Spirit、Boost.StringAlgo、Boost.Tokenizer、Boost.Utility、Boost.Xpressiveなどを使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yusuke Ichinohe</name>
        <email>yusuke.ichinohe@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.63.0リリースノート -- Boost 1.63.0リリースノート : Testを追加 (close #126)</title>
      <link href="https://boostjp.github.io/document/version/1_63_0.html"/>
      <id>c725e4ad318733915f1e4885010f820d68f477e1:document/version/1_63_0.md</id>
      <updated>2016-12-16 16:17:41 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.63.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_63_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_63_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_63_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_63_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17に準拠した静的な定数メンバ変数、&lt;code&gt;atomic&amp;lt;T&amp;gt;::is_always_lock_free&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;この定数はその特殊化が常にロックフリーなアトミックで実装されているかどうかを示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x86でのOracle Studioのサポートを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12534&#34; target=&#34;_blank&#34;&gt;Trac #12534&lt;/a&gt; GCC環境で&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;をインクルードしたあとに&lt;code&gt;flat_map&lt;/code&gt;をインスタンス化するとコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12577&#34; target=&#34;_blank&#34;&gt;Trac #12577&lt;/a&gt; &lt;code&gt;-fsanitize=undefined&lt;/code&gt;オプションで判明した&lt;code&gt;pair.hpp&lt;/code&gt;のヌル参照の実行時警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/40&#34; target=&#34;_blank&#34;&gt;GitHub #40&lt;/a&gt; &lt;code&gt;copy_move_algo.hpp&lt;/code&gt;のパラメータ型を修正 : &lt;code&gt;iterator_traits::difference_type&lt;/code&gt; -&amp;gt; &lt;code&gt;allocator_traits::size_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; &lt;code&gt;do_allocate()&lt;/code&gt;関数内での到達しないコードを回避&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11687&#34; target=&#34;_blank&#34;&gt;#11687&lt;/a&gt; Xcode (Apple clang) 6以降で&lt;code&gt;thread_local&lt;/code&gt;キーワードが使えないため、代わりに&lt;code&gt;boost::thread_specific_ptr&lt;/code&gt;を使いたいという問題。対応しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12114&#34; target=&#34;_blank&#34;&gt;#12114&lt;/a&gt; iOSのarm64環境で浮動小数点演算が正しく行われなくなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12411&#34; target=&#34;_blank&#34;&gt;#12411&lt;/a&gt; Visual StudioのO2最適化でFPUレジスタが保持されない問題を修正 (ほかのアーキテクチャも修正)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12551&#34; target=&#34;_blank&#34;&gt;#12551&lt;/a&gt; arm64環境でunkown directiveでビルドエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;ontop関数のシグニチャをリダクション&lt;/li&gt;
&lt;li&gt;プライベートなfcontext APIのユニットテストを追加&lt;/li&gt;
&lt;li&gt;ucontextとfcontextのパフォーマンステストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unbounded_channel&lt;/code&gt;と&lt;code&gt;bounded_channel&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;新たなクラス&lt;code&gt;buffered_channel&lt;/code&gt;と&lt;code&gt;unbuffered_channel&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::vector&lt;/code&gt;のバギーなコンストラクタを修正 (Lee Clagettに感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUSION_ADAPT*&lt;/code&gt;と&lt;code&gt;BOOST_FUISON_DEFINE*&lt;/code&gt;は空の構造体に適用できるようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6592&#34; target=&#34;_blank&#34;&gt;#6592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUSION_DEFINE*&lt;/code&gt;はムーヴ構築とムーヴ代入が出来るようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10099&#34; target=&#34;_blank&#34;&gt;#10099&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;のアダプタを追加 (Mateusz Łoskotに感謝) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8241&#34; target=&#34;_blank&#34;&gt;#8241&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;一時オブジェクトを返す警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;Intersection : 結果が正しくなるよう修正 (まだ完全ではないので作業中だが、より正しくなった)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したチケット&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12289&#34; target=&#34;_blank&#34;&gt;#12289&lt;/a&gt; &lt;code&gt;std::cout&lt;/code&gt;関係の警告とコンパイルエラーを回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12412&#34; target=&#34;_blank&#34;&gt;#12412&lt;/a&gt; 地理的なPointとBoxでの&lt;code&gt;covered_by()&lt;/code&gt;が不正な結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12413&#34; target=&#34;_blank&#34;&gt;#12413&lt;/a&gt; &lt;code&gt;rtree::remove()&lt;/code&gt;が地理的なPointに対して正しく動作しない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12499&#34; target=&#34;_blank&#34;&gt;Trac #12499&lt;/a&gt; メモリアロケーションに失敗する問題を修正。Boost.Moveの強制インライン化によって解決&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; ライブラリのユーザーがデフォルトのtempフォルダを提供できるように拡張ポイントを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; &lt;code&gt;xsi_key(key_t)&lt;/code&gt;コンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12556&#34; target=&#34;_blank&#34;&gt;Trac #12556&lt;/a&gt; &lt;code&gt;member_value_traits.hpp&lt;/code&gt;に不足していたインクルードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一般的な変更&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;以前のリリースで非推奨とした&lt;code&gt;type_info_wrapper&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;テキストファイルシンクバックエンドから現在のファイル名を取得する方法を追加&lt;ul&gt;
&lt;li&gt;ファイル名は&lt;code&gt;get_current_file_name&lt;/code&gt;メンバ関数で取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;バージョン21以前のAndroid APIでコンパイルエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;ストリーミング演算子（訳註: &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;と&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;のこと）がスカラー型とenumを値で受け取るように修正&lt;ul&gt;
&lt;li&gt;これにより静的定数とビットフィールドを直接フォーマットストリームに渡すことが出来るようになった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11998&#34; target=&#34;_blank&#34;&gt;#11998&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;syslog APIの自動検出機構を修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12600&#34; target=&#34;_blank&#34;&gt;#12600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UDPを基にしたsyslogバックエンドの実装について、RFC3164に準拠するようにメッセージフォーマットを変更した&lt;/li&gt;
&lt;li&gt;テキストファイルシンクバックエンドにインストールしたファイルクローズハンドラは、ファイルが開かれていないのであれば呼ばれないようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他の詳細な変更については&lt;a href=&#34;http://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/21&#34; target=&#34;_blank&#34;&gt;GitHub Issue #21&lt;/a&gt; &lt;code&gt;-fsanitize=undefined&lt;/code&gt;オプションによって発見した未定義動作を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#metaparse&#34; name=&#34;metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_METAPARSE_STRING&lt;/code&gt;の実装を改善&lt;ul&gt;
&lt;li&gt;文字列長の最大を2048に増やした (Boostヘッダを生成するスクリプトで再生成した)&lt;/li&gt;
&lt;li&gt;文字列長の制限をコンパイル単位で変更できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的なアダプティブソートアルゴリズムのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_FORCEINLINE&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しく2つのin-placeコンストラクタを追加。これらは&lt;code&gt;emplace()&lt;/code&gt;関数と同様の動作をする。以下のひとつめのコンストラクタは、値を含んだ状態(noneじゃない状態)でオブジェクトを構築する。ふたつめのコンストラクタは、&lt;code&gt;bool&lt;/code&gt;の条件が&lt;code&gt;true&lt;/code&gt;の場合にのみ、値を含んだ状態をオブジェクトを構築する：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;in_place_init_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;in_place_init_if_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::optional&lt;/code&gt;と同様に、&lt;code&gt;optional&lt;/code&gt;を未初期化状態にする&lt;code&gt;o = {}&lt;/code&gt;構文を許可&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12203&#34; target=&#34;_blank&#34;&gt;#12203&lt;/a&gt; &lt;code&gt;optional&amp;lt;optional&amp;lt;T&amp;gt;&amp;amp;&amp;gt;&lt;/code&gt;の初期化を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12563&#34; target=&#34;_blank&#34;&gt;#12563&lt;/a&gt; &lt;code&gt;optional&lt;/code&gt;のコンストラクタをSFINAEフレンドリーにした。これにより、&lt;code&gt;std::tuple&lt;/code&gt;との相互作用が修正される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多くのモジュールがC++11の可変長テンプレートをサポートした&lt;/li&gt;
&lt;li&gt;返り値の型の推論に失敗していたのを修正&lt;/li&gt;
&lt;li&gt;未使用の警告を抑制&lt;/li&gt;
&lt;li&gt;二引数の数学関数で引数が足りなかったエラーを修正&lt;/li&gt;
&lt;li&gt;古いコンパイラ用の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#python&#34; name=&#34;python&#34;&gt;Python&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的なC++11の機能として、&lt;code&gt;std::shared_ptr&lt;/code&gt;と&lt;code&gt;std::unique_ptr&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;NumPy&lt;/a&gt;をラップする拡張APIを組み込んだ&lt;/li&gt;
&lt;li&gt;廃止済みのいくつかの機能を削除した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.4&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロによる文字列同士の比較に、コンテナ用の比較オプションである &lt;code&gt;per_element&lt;/code&gt; (要素同士の比較) と &lt;code&gt;lexicographic&lt;/code&gt; (辞書順比較) をoptional modifierとして使用できるようにした。 &lt;code&gt;BOOST_TEST(&#34;aaa&#34; == &#34;aaa&#34;, boost::test_tools::lexicographic());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12531&#34; target=&#34;_blank&#34;&gt;#12531&lt;/a&gt; 実行するテストケースをフィルタして指定するオプションの区切り文字を、コロン &lt;code&gt;:&lt;/code&gt; からアンダースコア &lt;code&gt;_&lt;/code&gt; に変更。これは、名前空間のようにコロンを含むテストケースを列挙できなかったための変更である。 &lt;code&gt;--run_test=&#34;ns::X&#34;_&#34;ns::Y&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/103&#34; target=&#34;_blank&#34;&gt;GitHub PR #103&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/test/pull/104&#34; target=&#34;_blank&#34;&gt;GitHub PR #104&lt;/a&gt; インデント関係のGCCの警告を黙らせた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/105&#34; target=&#34;_blank&#34;&gt;GitHub PR #105&lt;/a&gt; GCC6での未使用変数による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11756&#34; target=&#34;_blank&#34;&gt;#11756&lt;/a&gt; C++03以下のターゲット環境向けに、C++11の&lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;のマクロを使用していたために起きていたコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11907&#34; target=&#34;_blank&#34;&gt;#11907&lt;/a&gt; &lt;code&gt;std::string&lt;/code&gt;同士の比較が、場合によってコレクションの比較と見なされたりスカラ型の比較と見なされたりするため、状況によってテストの出力が異なる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12339&#34; target=&#34;_blank&#34;&gt;#12339&lt;/a&gt; カラー出力に点滅文字(blink element)を使用するのをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12506&#34; target=&#34;_blank&#34;&gt;#12506&lt;/a&gt; &lt;code&gt;report_sink&lt;/code&gt;のドキュメントの誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12507&#34; target=&#34;_blank&#34;&gt;#12507&lt;/a&gt; &lt;code&gt;--report_sink&lt;/code&gt;オプションが動作しなくなっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12530&#34; target=&#34;_blank&#34;&gt;#12530&lt;/a&gt; テストを走らせずにBoost.Testのバージョンを取得する&lt;code&gt;--version&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12531&#34; target=&#34;_blank&#34;&gt;#12531&lt;/a&gt; &lt;code&gt;--run_test&lt;/code&gt;オプションに、コロンを含むテスト名が指定できない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#type-index&#34; name=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;のエミュレーションを行う&lt;code&gt;runtime_cast&lt;/code&gt;を追加(実装したChris Gloverに感謝)&lt;ul&gt;
&lt;li&gt;詳細については&lt;a href=&#34;http://www.boost.org/doc/libs/1_63_0/doc/html/boost_typeindex_header_reference.html#header.boost.type_index.runtime_cast_hpp&#34; target=&#34;_blank&#34;&gt;runtime_cast reference&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTTIの内部実装を&lt;code&gt;std::size_t&lt;/code&gt;から&lt;code&gt;unsigned int&lt;/code&gt;に変更することで、よりプラットフォーム非依存にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;検査の警告を修正&lt;/li&gt;
&lt;li&gt;物理化学(physico-chemical)の定数を更新。2014年CODATA推奨値にした&lt;/li&gt;
&lt;li&gt;biotを正しく10アンペアとして定義&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代入時の例外安全性の問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12459&#34; target=&#34;_blank&#34;&gt;#12459&lt;/a&gt; &lt;code&gt;std::allocator_traits&lt;/code&gt;が使用可能なときには使用するようにし、現代的なrebindスタイルをサポートした&lt;/li&gt;
&lt;li&gt;いくつかのアロケータを伝搬させるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert()&lt;/code&gt;/&lt;code&gt;emplace_hint()&lt;/code&gt;でヒントイテレータを使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントのさまざまな部分を改善した&lt;/li&gt;
&lt;li&gt;引数をとらないコンストラクタを非&lt;code&gt;explicit&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;その他の詳細については &lt;a href=&#34;http://www.boost.org/libs/unordered/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 3.8.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;Intel: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++14: 16.0, 17.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 7.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4, 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8.1&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 3.8.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0, 7.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++1z: 6.1.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 16.0, 17.0&lt;/li&gt;
&lt;li&gt;Intel, C++14: 16.0, 17.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 7.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4, 6.2&lt;/li&gt;
&lt;li&gt;GCC,C++14: 6.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>