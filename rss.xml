<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-07-14T13:56:54.014202</updated>
  <id>fdf431fd-4a2a-43ac-aac2-b6e88a45dd83</id>

  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : Variantを追加 (close #492)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>28bde1e7f2afad6ccdad086a2bc570dadfc1ad66:document/version/1_74_0.md</id>
      <updated>2020-07-14T22:54:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_74_0.md b/document/version/1_74_0.md
index 5955717..3f4e93b 100644
--- a/document/version/1_74_0.md
+++ b/document/version/1_74_0.md
@@ -45,6 +45,7 @@
 - [Stacetrace](#stacktrace)
 - [System](#system)
 - [TypeTraits](#type-traits)
+- [Variant](#variant)
 - [Variant2](#variant2)
 - [Wave](#wave)
 - [YAP](#yap)
@@ -342,6 +343,13 @@
     - `is_unscoped_enum`
 
 
+## &amp;lt;a id=&amp;#34;variant&amp;#34; href=&amp;#34;#variant&amp;#34;&amp;gt;Variant&amp;lt;/a&amp;gt;
+
+- [GitHub #78](https://github.com/boostorg/variant/issues/78) `override`が不足していることによる警告を修正 (EugeneZelenko氏に感謝)
+- [GitHub #79](https://github.com/boostorg/variant/pull/79) Embarcaderoコンパイラ向けの修正
+- [GitHub #80](https://github.com/boostorg/variant/pull/80) 非推奨ヘッダを使用することによる警告を回避するために、ヘッダ位置を更新 (Andrey Semashev氏に感謝)
+
+
 ## &amp;lt;a id=&amp;#34;variant2&amp;#34; href=&amp;#34;#variant2&amp;#34;&amp;gt;Variant2&amp;lt;/a&amp;gt;
 
 - `visit`に派生型のサポートを追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : LexicalCastを追加 (close #490)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>e1f290a112422de4ae655148afcd44ee3c1675bc:document/version/1_74_0.md</id>
      <updated>2020-07-14T22:51:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_74_0.md b/document/version/1_74_0.md
index 7d6a620..5955717 100644
--- a/document/version/1_74_0.md
+++ b/document/version/1_74_0.md
@@ -34,6 +34,7 @@
 - [Flyweight](#flyweight)
 - [Format](#format)
 - [Heap](#heap)
+- [LexicalCast](#lexical-cast)
 - [Mp11](#mp11)
 - [Multi-index](#multi-index)
 - [Nowide](#nowide)
@@ -255,6 +256,12 @@
 - アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)
 
 
+## &amp;lt;a id=&amp;#34;lexical-cast&amp;#34; href=&amp;#34;#lexical-cast&amp;#34;&amp;gt;LexicalCast&amp;lt;/a&amp;gt;
+
+- [GitHub #35](https://github.com/boostorg/lexical_cast/pull/35), [GitHub #34](https://github.com/boostorg/lexical_cast/issues/34) `override`が不足していることによる警告を修正 (EugeneZelenko氏に感謝)
+- Embarcaderoコンパイラ向けの修正 (Edward Diener氏に感謝)
+
+
 ## &amp;lt;a id=&amp;#34;mp11&amp;#34; href=&amp;#34;#mp11&amp;#34;&amp;gt;Mp11&amp;lt;/a&amp;gt;
 
 - 大きい`N`での`mp_with_index&amp;lt;N&amp;gt;`のコンパイルパフォーマンスを改善
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : DLLを追加 (close #489)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>8fa71eda9168af42a04cf9fee78cb2058dd78f30:document/version/1_74_0.md</id>
      <updated>2020-07-14T22:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_74_0.md b/document/version/1_74_0.md
index 54a1785..7d6a620 100644
--- a/document/version/1_74_0.md
+++ b/document/version/1_74_0.md
@@ -29,6 +29,7 @@
 - [Bimap](#bimap)
 - [Config](#config)
 - [Core](#core)
+- [DLL](#dll)
 - [Endian](#endian)
 - [Flyweight](#flyweight)
 - [Format](#format)
@@ -224,6 +225,13 @@
     - その他
 
 
+## &amp;lt;a id=&amp;#34;dll&amp;#34; href=&amp;#34;#dll&amp;#34;&amp;gt;DLL&amp;lt;/a&amp;gt;
+
+- `library_info`が空の共有オブジェクト (shared object) で動作するよう複数箇所を修正
+- [GitHub #28](https://github.com/boostorg/dll/issues/28) C++98とC++11モードでのコンパイルを修正
+- [GitHub #37](https://github.com/boostorg/dll/pull/37) `smart_library`のマングリングを修正 (XiaLiChao82氏に感謝)
+
+
 ## &amp;lt;a id=&amp;#34;endian&amp;#34; href=&amp;#34;#endian&amp;#34;&amp;gt;Endian&amp;lt;/a&amp;gt;
 
 - `endian_reverse`でのスコープ付き列挙型を有効にした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : Stacktraceを追加 (close #491)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>cedce5241fe381443bda1066ce00a6248d398398:document/version/1_74_0.md</id>
      <updated>2020-07-13T14:51:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_74_0.md b/document/version/1_74_0.md
index a291c84..54a1785 100644
--- a/document/version/1_74_0.md
+++ b/document/version/1_74_0.md
@@ -40,6 +40,7 @@
 - [PolyCollection](#poly-collection)
 - [Polygon](#polygon)
 - [SmartPtr](#smart-ptr)
+- [Stacetrace](#stacktrace)
 - [System](#system)
 - [TypeTraits](#type-traits)
 - [Variant2](#variant2)
@@ -305,6 +306,11 @@
 - `weak_ptr`に、`boost::hash`サポートと、`std::hash`と`std::equal_to`の特殊化を追加
 
 
+## &amp;lt;a id=&amp;#34;stacktrace&amp;#34; href=&amp;#34;#stacktrace&amp;#34;&amp;gt;Stacktrace&amp;lt;/a&amp;gt;
+
+- [GitHub #91](https://github.com/boostorg/stacktrace/pull/91) `-fno-exceptions`でコンパイルした際のビルドエラーを修正 (Jeremiah Rodriguez氏に感謝)
+
+
 ## &amp;lt;a id=&amp;#34;system&amp;#34; href=&amp;#34;#system&amp;#34;&amp;gt;System&amp;lt;/a&amp;gt;
 
 - `operator bool()`が`value() != 0`の代わりに`failed()`を返すようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : Asioを追加 (close #487)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>ca8103e8d7d384ca8bb11def220d3d38b8be10dc:document/version/1_74_0.md</id>
      <updated>2020-07-13T14:41:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_74_0.md b/document/version/1_74_0.md
index 8f811a6..a291c84 100644
--- a/document/version/1_74_0.md
+++ b/document/version/1_74_0.md
@@ -24,6 +24,7 @@
 
 ## 更新ライブラリ
 
+- [Asio](#asio)
 - [Beast](#beast)
 - [Bimap](#bimap)
 - [Config](#config)
@@ -51,6 +52,104 @@
 - [Boostbook](#boostbook)
 
 
+## &amp;lt;a id=&amp;#34;asio&amp;#34; href=&amp;#34;#asio&amp;#34;&amp;gt;Asio&amp;lt;/a&amp;gt;
+
+- 標準に提案されたexecutorを実装して追加
+    - [P0443r13](http://wg21.link/P0443r13), [P1348r0](http://wg21.link/P1348r0), [P1393r0](http://wg21.link/P1393r0)
+- AsioのI/O機能に、標準に提案されたexecutorへのサポートを追加
+    - Asioのexecutorが、標準に提案されたexecutorの要件を満たすようになった。これらは、Networking TSのexecutorの要件も引き続き満たす
+    - すべてのI/Oオブジェクト、非同期操作、およびユーティリティは、新たに標準に提案されたexecutorおよびNetworking TSのexecutorと相互運用できる
+    - 型の別名`any_io_executor`は、すべてのI/Oオブジェクトに対するデフォルトの実行時多態的executorとして導入された。これはデフォルトで`execution::any_executor&amp;lt;&amp;gt;`テンプレートとなる。下位互換が必要な場合は、`BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT`を定義することで古い`asio::executor`多態ラッパーが代わりに使用される
+    - `BOOST_ASIO_NO_TS_EXECUTORS`を定義することで、既存のNetworking TSモデルexecutorのサポートを無効化できる
+- `basic_waitable_timer`に、変換ムーブ構築と代入を追加。これにより、executorの型が変換可能であれば異なるタイマー型間でもムーブによる変換ができるようになる。例として：
+    ```cpp
+    basic_waitable_timer&amp;lt;
+      clock_type,
+      traits_type,
+      io_context::executor_type
+    &amp;gt; timer1(my_io_context);
+
+    basic_waitable_timer&amp;lt;
+      clock_type,
+      traits_type,
+      any_io_executor // 多態ラッパー
+    &amp;gt; timer2(std::move(timer1));
+    ```
+
+- GCC 10でC++20コルーチンを有効化
+- `co_spawn`に、await可能なものを起動するオーバーロードを追加。以下のように記述できる：
+    ```cpp
+    co_spawn(executor,
+      echo(std::move(socket)),
+      detached);
+    ```
+
+    - 以前まで書き方は以下：
+    ```cpp
+    co_spawn(executor,
+      [socket = std::move(socket)]() mutable
+      {
+        return echo(std::move(socket));
+      },
+      detached);
+    ```
+
+- executor型の間で変換をできるようにするために、`use_awaitable_t`のデフォルトexecutorアダプタに、新たなコンストラクタオーバーロードを追加
+- メンバ`as_default_on()`と`as_default_on_t&amp;lt;&amp;gt;`を追加することによる、デフォルト完了トークンとしての`detached_t`の使用サポートを追加
+- `ssl::stream&amp;lt;&amp;gt;`にムーブコンストラクタを追加
+- `ssl::stream&amp;lt;&amp;gt;`の書き込み操作を変更し、gather-write buffer sequenceを線形化した
+- `BOOST_ASIO_NO_DEPRECATED`が定義された際の、非推奨化された`asio_handler_invoke`, `asio_handler_allocate`, and `asio_handler_deallocate`フックのコンパイル時検出を追加した
+- いくつかのパフォーマンス最適化を実装
+    - `recvmsg`の代わりに`recv`、`sendmsg`の代わりに`send`、`readv`の代わりに`read`、`writev`の代わりに`write`を使用するよう単一バッファ操作を特殊化
+    - 多態ラッパー`executor`の参照カウントによるオーバーヘッドを軽減
+    - システムコールのラッパーから早期にreturnするようにし、エラーパスがある場合のみ`errno`とエラーコードにアクセスするようにした
+    - 「ネイティブ」のI/O executor (`io_context::exeutor_type`など) が検出された場合に、追加の最適化を適用するようにした
+- ハンドラを追跡 (tracking) するためにsource locationのサポートを追加。新たなマクロ`BOOST_ASIO_HANDLER_LOCATION((file_name, line, function_name))`を使用してハンドラ追跡メカニズムにソース位置を伝えることができる。このマクロは、スタックに配置されるオブジェクトを宣言する。また、位置情報をともなって非同期操作を起動すると、非同期操作の開始を表す`[^n*m]`行のまえに`[*&amp;lt;action&amp;gt;] [^n^m]`行を使用して出力する。例として、
+    ```
+    @asio|1589423304.861944|&amp;gt;7|ec=system:0,bytes_transferred=5
+    @asio|1589423304.861952|7^8|in &amp;#39;async_write&amp;#39; (./../../../include/asio/impl/write.hpp:330)
+    @asio|1589423304.861952|7^8|called from &amp;#39;do_write&amp;#39; (handler_tracking/async_tcp_echo_server.cpp:62)
+    @asio|1589423304.861952|7^8|called from &amp;#39;operator()&amp;#39; (handler_tracking/async_tcp_echo_server.cpp:51)
+    @asio|1589423304.861952|7*8|socket@0x7ff61c008230.async_send
+    @asio|1589423304.861975|.8|non_blocking_send,ec=system:0,bytes_transferred=5
+    @asio|1589423304.861980|&amp;lt;7|
+    ```
+
+    - `std::source_location`もしくは`std::experimental::source_location`が利用可能な場合、`use_awaitable_t` も新たに作られた非同期操作ごとにハンドラ追跡にソース位置を出力する (デフォルト構築もしくはデフォルトの完了トークンとして使用された場合)。`use_awaitable_t`オブジェクトも、位置情報をともなって明示的に構築することもできる。
+- handlerviz.plツールのさまざまな改善を実装
+    - グラフの下部に、保留中のハンドラノードを赤色で追加
+    - (SVG向けに) 辺ラベルのツールチップにソース位置を表示
+    - 関連する制御フローを垂直に保つための順序強制のために、非表示のノードを使用するようにした
+- ハンドラを追跡して「生きている (live)」ハンドラのリストを生成して出力するhandlerlive.plツールを追加。生きているとは、保留中 (pending) の非同期操作に関連付けられたハンドラ、もしくは現在実行中のハンドラ。例として、以下のいずれかの形式で実行する：
+    ```
+    cat output.txt | perl handlerlive.pl
+    perl handerlive.pl &amp;lt; output.txt
+    perl handlerlive.pl output.txt
+    ```
+
+- handlertree.plツールを追加。これは指定されたハンドラ (nominated handlers) から生成されたツリーのイベントのみを含むよう、ハンドラ追跡をフィルタして出力する。例として、ハンドラ`123`と`456`およびそれらの先行タスク (predecessors) に関連付けられたイベントのみが含まれるよう出力をフィルタするには、以下のいずれかのようにする：
+    ```
+    cat output.txt | perl handlertree.pl 123 456
+    perl handlertree.pl 123 456 &amp;lt; output.txt
+    ```
+
+- これらのツールは組み合わせて使用できる：
+    ```
+    cat output.txt | \
+      perl handlertree.pl `perl handlerlive.pl output.txt` | \
+      perl handlerviz.pl | \
+      dot -Tsvg &amp;gt; output.svg
+    ```
+
+- clangベースのEmbarcadero C++コンパイラの変更を追加
+- 複数スレッドが並行にWindows I/O完了ポートバックエンドを初期化する際に発生する可能性のあったデッドロックを修正
+- 左辺値を渡されたコピー完了ハンドラで`async_compose`が動作するよう修正
+- `co_spawn`の完了シグニチャ推論を修正
+- `executor_binder`の実装から、spuriousな`Executor`基本クラスを削除
+- ドキュメントとサンプルコードのさまざまな修正と改善
+- 詳細は[Revision History](https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html)を参照
+
+
 ## &amp;lt;a id=&amp;#34;beast&amp;#34; href=&amp;#34;#beast&amp;#34;&amp;gt;Beast&amp;lt;/a&amp;gt;
 
 - AsioのAPIが変更された。詳細はAsioのリリースノートを参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>