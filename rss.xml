<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-03-13T04:43:02.067018</updated>
  <id>86babb24-2a54-4c16-ba5d-fd08dcba9cf7</id>

  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Type-Indexを追加 (close #350)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>384b2a514283e33d96f9561cad962f1e685b400e:document/version/1_70_0.md</id>
      <updated>2019-03-13T13:39:04+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/histogram/&#34; target=&#34;_blank&#34;&gt;Histogram&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14向けの、便利なインタフェースを持つ高速で拡張可能な多次元ヒストグラム。作者Hans Dembinski&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#type-index&#34;&gt;Type-Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;大きいアップデート&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&#34; target=&#34;_blank&#34;&gt;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&lt;/a&gt; ページの☆マークが付いているところが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;助力求む！&lt;ul&gt;
&lt;li&gt;Beastを使っている会社の方は、どのように使用しているのかを&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;から教えてほしい&lt;/li&gt;
&lt;li&gt;バグ、機能リクエスト、その他フィードバックは、&lt;a href=&#34;https://github.com/boostorg/beast/issues/new&#34; target=&#34;_blank&#34;&gt;こちらから報告&lt;/a&gt;してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;C++ Slack Workspace&lt;/a&gt;の #beast チャンネルと #boost チャンネルに参加してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34; target=&#34;_blank&#34;&gt;リポジトリ&lt;/a&gt;への☆も忘れずに！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;チュートリアルをさらに充実させ、活かせるコードを増やした&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html&#34; target=&#34;_blank&#34;&gt;Networking Refresher&lt;/a&gt;はゼロから教える&lt;/li&gt;
&lt;li&gt;[Asynchronous Echo (非同期Echo)]((https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html)の例を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html&#34; target=&#34;_blank&#34;&gt;Detect SSL (SSL検知)&lt;/a&gt;の合成操作チュートリアルを更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi&#34; target=&#34;_blank&#34;&gt;websocket-chat-multi&lt;/a&gt;は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi/chat_client.html&#34; target=&#34;_blank&#34;&gt;JavaScriptのブラウザクライアント&lt;/a&gt;と組み合わせたマルチスレッドのチャットサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html&#34; target=&#34;_blank&#34;&gt;basic_stream&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html&#34; target=&#34;_blank&#34;&gt;tcp_stream&lt;/a&gt;&lt;/code&gt;は、以下を提供する：&lt;ul&gt;
&lt;li&gt;タイムアウト： 期限切れに対して&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html&#34; target=&#34;_blank&#34;&gt;error::timeout&lt;/a&gt;&lt;/code&gt;を使用して、&lt;code&gt;async_read_some&lt;/code&gt;、&lt;code&gt;async_write_some&lt;/code&gt;で検知する&lt;/li&gt;
&lt;li&gt;トラフィックシェーピング (Traffic-shaping) ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html&#34; target=&#34;_blank&#34;&gt;unlimited&lt;/a&gt;&lt;/code&gt;もしくはユーザー定義のための&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html&#34; target=&#34;_blank&#34;&gt;RatePolicyコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html&#34; target=&#34;_blank&#34;&gt;P1322R0&lt;/a&gt;を使用して、ソケットに直接strandを置けるようにした。呼び出し側で&lt;code&gt;bind_executor&lt;/code&gt;は必要ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本クラス群&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html&#34; target=&#34;_blank&#34;&gt;async_base&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html&#34; target=&#34;_blank&#34;&gt;stable_async_base&lt;/a&gt;&lt;/code&gt;は、全ての合成操作ボイラープレートをハンドリングできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html&#34; target=&#34;_blank&#34;&gt;ssl_stream&lt;/a&gt;&lt;/code&gt;は、flat write optimizationを使用して、ムーブ可能かつ代入可能にした&lt;/li&gt;
&lt;li&gt;全ての非同期操作は、Coroutines TSとの効率的な統合のためにAsioの&lt;code&gt;async_initiate&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;コンパイルの高速化のためには、&lt;code&gt;BOOST_BEAST_SPLIT_COMPILATION&lt;/code&gt;をdefineして&lt;code&gt;boost/beast/src.hpp&lt;/code&gt;を.cppファイルでインクルードすること&lt;/li&gt;
&lt;li&gt;完全な変更点は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;リリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/21&#34; target=&#34;_blank&#34;&gt;GitHub #21&lt;/a&gt; 新たなマクロ&lt;code&gt;BOOST_DLL_USE_STD_FS&lt;/code&gt;を追加。これを値1でdefineすると、C++17標準の&lt;code&gt;std::filesystem::path&lt;/code&gt;、&lt;code&gt;std::system_error&lt;/code&gt;、&lt;code&gt;std::error_code&lt;/code&gt;を使用するようになる。例外の型が&lt;code&gt;boost::system::system_error&lt;/code&gt;から&lt;code&gt;std::system_error&lt;/code&gt;に変わるので、&lt;code&gt;catch&lt;/code&gt;節を必ず更新すること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 動的読み込み可能かの検出と装飾ロジック (decoration logic) を大幅に書き直した。これにより、読み込み失敗した際により正確なエラーが報告されるようになった。プラットフォームに関連したクエリや検出を行わず、ライブラリへの修飾パス (decorated path) を返す&lt;code&gt;shared_library::decorate()&lt;/code&gt;関数を追加した。より良い結果を得るためには、&lt;code&gt;shared_library::load()&lt;/code&gt;関数と、&lt;code&gt;shared_library&lt;/code&gt;クラスのコンストラクタを使用することを推奨する (作業してくれたLoïc Touraine氏に多大な感謝)&lt;/li&gt;
&lt;li&gt;CI強化、ドキュメント更新、誤字修正、移植性に関する多くの修正と整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 32-bit ARM向けのビルドを修正 (修正を提供してくれたIvan Ponomarev氏に感謝 &lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字修正、警告修正、更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#type-index&#34; id=&#34;type-index&#34;&gt;Type-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/28&#34; target=&#34;_blank&#34;&gt;Github #28&lt;/a&gt; GHS C++コンパイラのサポートを追加 (パッチを提供してくれたBrandon Castellano氏に多大な感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 文字列と型の比較を最適化 (パッチを提供してくれたAndrey Semashev氏に多大な感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; clang-winでのコンパイルを修正 (パッチを提供してくれたPeter Dimov氏に多大な感謝)&lt;/li&gt;
&lt;li&gt;CIを強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整理と内部的な改善。Nikita Kniazev氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub #56&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/57&#34; target=&#34;_blank&#34;&gt;GitHub #57&lt;/a&gt;)、Louis Dionne氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub #51&lt;/a&gt;)に感謝&lt;/li&gt;
&lt;li&gt;CIを強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : DLLを追加 (close #348)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>2703adaa9e981ea880fae87de325ab8006b01cdd:document/version/1_70_0.md</id>
      <updated>2019-03-13T13:33:48+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/histogram/&#34; target=&#34;_blank&#34;&gt;Histogram&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14向けの、便利なインタフェースを持つ高速で拡張可能な多次元ヒストグラム。作者Hans Dembinski&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;大きいアップデート&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&#34; target=&#34;_blank&#34;&gt;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&lt;/a&gt; ページの☆マークが付いているところが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;助力求む！&lt;ul&gt;
&lt;li&gt;Beastを使っている会社の方は、どのように使用しているのかを&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;から教えてほしい&lt;/li&gt;
&lt;li&gt;バグ、機能リクエスト、その他フィードバックは、&lt;a href=&#34;https://github.com/boostorg/beast/issues/new&#34; target=&#34;_blank&#34;&gt;こちらから報告&lt;/a&gt;してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;C++ Slack Workspace&lt;/a&gt;の #beast チャンネルと #boost チャンネルに参加してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34; target=&#34;_blank&#34;&gt;リポジトリ&lt;/a&gt;への☆も忘れずに！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;チュートリアルをさらに充実させ、活かせるコードを増やした&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html&#34; target=&#34;_blank&#34;&gt;Networking Refresher&lt;/a&gt;はゼロから教える&lt;/li&gt;
&lt;li&gt;[Asynchronous Echo (非同期Echo)]((https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html)の例を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html&#34; target=&#34;_blank&#34;&gt;Detect SSL (SSL検知)&lt;/a&gt;の合成操作チュートリアルを更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi&#34; target=&#34;_blank&#34;&gt;websocket-chat-multi&lt;/a&gt;は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi/chat_client.html&#34; target=&#34;_blank&#34;&gt;JavaScriptのブラウザクライアント&lt;/a&gt;と組み合わせたマルチスレッドのチャットサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html&#34; target=&#34;_blank&#34;&gt;basic_stream&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html&#34; target=&#34;_blank&#34;&gt;tcp_stream&lt;/a&gt;&lt;/code&gt;は、以下を提供する：&lt;ul&gt;
&lt;li&gt;タイムアウト： 期限切れに対して&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html&#34; target=&#34;_blank&#34;&gt;error::timeout&lt;/a&gt;&lt;/code&gt;を使用して、&lt;code&gt;async_read_some&lt;/code&gt;、&lt;code&gt;async_write_some&lt;/code&gt;で検知する&lt;/li&gt;
&lt;li&gt;トラフィックシェーピング (Traffic-shaping) ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html&#34; target=&#34;_blank&#34;&gt;unlimited&lt;/a&gt;&lt;/code&gt;もしくはユーザー定義のための&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html&#34; target=&#34;_blank&#34;&gt;RatePolicyコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html&#34; target=&#34;_blank&#34;&gt;P1322R0&lt;/a&gt;を使用して、ソケットに直接strandを置けるようにした。呼び出し側で&lt;code&gt;bind_executor&lt;/code&gt;は必要ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本クラス群&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html&#34; target=&#34;_blank&#34;&gt;async_base&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html&#34; target=&#34;_blank&#34;&gt;stable_async_base&lt;/a&gt;&lt;/code&gt;は、全ての合成操作ボイラープレートをハンドリングできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html&#34; target=&#34;_blank&#34;&gt;ssl_stream&lt;/a&gt;&lt;/code&gt;は、flat write optimizationを使用して、ムーブ可能かつ代入可能にした&lt;/li&gt;
&lt;li&gt;全ての非同期操作は、Coroutines TSとの効率的な統合のためにAsioの&lt;code&gt;async_initiate&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;コンパイルの高速化のためには、&lt;code&gt;BOOST_BEAST_SPLIT_COMPILATION&lt;/code&gt;をdefineして&lt;code&gt;boost/beast/src.hpp&lt;/code&gt;を.cppファイルでインクルードすること&lt;/li&gt;
&lt;li&gt;完全な変更点は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;リリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/21&#34; target=&#34;_blank&#34;&gt;GitHub #21&lt;/a&gt; 新たなマクロ&lt;code&gt;BOOST_DLL_USE_STD_FS&lt;/code&gt;を追加。これを値1でdefineすると、C++17標準の&lt;code&gt;std::filesystem::path&lt;/code&gt;、&lt;code&gt;std::system_error&lt;/code&gt;、&lt;code&gt;std::error_code&lt;/code&gt;を使用するようになる。例外の型が&lt;code&gt;boost::system::system_error&lt;/code&gt;から&lt;code&gt;std::system_error&lt;/code&gt;に変わるので、&lt;code&gt;catch&lt;/code&gt;節を必ず更新すること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 動的読み込み可能かの検出と装飾ロジック (decoration logic) を大幅に書き直した。これにより、読み込み失敗した際により正確なエラーが報告されるようになった。プラットフォームに関連したクエリや検出を行わず、ライブラリへの修飾パス (decorated path) を返す&lt;code&gt;shared_library::decorate()&lt;/code&gt;関数を追加した。より良い結果を得るためには、&lt;code&gt;shared_library::load()&lt;/code&gt;関数と、&lt;code&gt;shared_library&lt;/code&gt;クラスのコンストラクタを使用することを推奨する (作業してくれたLoïc Touraine氏に多大な感謝)&lt;/li&gt;
&lt;li&gt;CI強化、ドキュメント更新、誤字修正、移植性に関する多くの修正と整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 32-bit ARM向けのビルドを修正 (修正を提供してくれたIvan Ponomarev氏に感謝 &lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字修正、警告修正、更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整理と内部的な改善。Nikita Kniazev氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub #56&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/57&#34; target=&#34;_blank&#34;&gt;GitHub #57&lt;/a&gt;)、Louis Dionne氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub #51&lt;/a&gt;)に感謝&lt;/li&gt;
&lt;li&gt;CIを強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Variantを追加 (close #351)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>26331da1eb921f56bb7fb195a690a4ad4e030528:document/version/1_70_0.md</id>
      <updated>2019-03-12T16:04:53+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/histogram/&#34; target=&#34;_blank&#34;&gt;Histogram&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14向けの、便利なインタフェースを持つ高速で拡張可能な多次元ヒストグラム。作者Hans Dembinski&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;大きいアップデート&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&#34; target=&#34;_blank&#34;&gt;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&lt;/a&gt; ページの☆マークが付いているところが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;助力求む！&lt;ul&gt;
&lt;li&gt;Beastを使っている会社の方は、どのように使用しているのかを&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;から教えてほしい&lt;/li&gt;
&lt;li&gt;バグ、機能リクエスト、その他フィードバックは、&lt;a href=&#34;https://github.com/boostorg/beast/issues/new&#34; target=&#34;_blank&#34;&gt;こちらから報告&lt;/a&gt;してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;C++ Slack Workspace&lt;/a&gt;の #beast チャンネルと #boost チャンネルに参加してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34; target=&#34;_blank&#34;&gt;リポジトリ&lt;/a&gt;への☆も忘れずに！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;チュートリアルをさらに充実させ、活かせるコードを増やした&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html&#34; target=&#34;_blank&#34;&gt;Networking Refresher&lt;/a&gt;はゼロから教える&lt;/li&gt;
&lt;li&gt;[Asynchronous Echo (非同期Echo)]((https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html)の例を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html&#34; target=&#34;_blank&#34;&gt;Detect SSL (SSL検知)&lt;/a&gt;の合成操作チュートリアルを更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi&#34; target=&#34;_blank&#34;&gt;websocket-chat-multi&lt;/a&gt;は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi/chat_client.html&#34; target=&#34;_blank&#34;&gt;JavaScriptのブラウザクライアント&lt;/a&gt;と組み合わせたマルチスレッドのチャットサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html&#34; target=&#34;_blank&#34;&gt;basic_stream&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html&#34; target=&#34;_blank&#34;&gt;tcp_stream&lt;/a&gt;&lt;/code&gt;は、以下を提供する：&lt;ul&gt;
&lt;li&gt;タイムアウト： 期限切れに対して&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html&#34; target=&#34;_blank&#34;&gt;error::timeout&lt;/a&gt;&lt;/code&gt;を使用して、&lt;code&gt;async_read_some&lt;/code&gt;、&lt;code&gt;async_write_some&lt;/code&gt;で検知する&lt;/li&gt;
&lt;li&gt;トラフィックシェーピング (Traffic-shaping) ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html&#34; target=&#34;_blank&#34;&gt;unlimited&lt;/a&gt;&lt;/code&gt;もしくはユーザー定義のための&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html&#34; target=&#34;_blank&#34;&gt;RatePolicyコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html&#34; target=&#34;_blank&#34;&gt;P1322R0&lt;/a&gt;を使用して、ソケットに直接strandを置けるようにした。呼び出し側で&lt;code&gt;bind_executor&lt;/code&gt;は必要ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本クラス群&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html&#34; target=&#34;_blank&#34;&gt;async_base&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html&#34; target=&#34;_blank&#34;&gt;stable_async_base&lt;/a&gt;&lt;/code&gt;は、全ての合成操作ボイラープレートをハンドリングできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html&#34; target=&#34;_blank&#34;&gt;ssl_stream&lt;/a&gt;&lt;/code&gt;は、flat write optimizationを使用して、ムーブ可能かつ代入可能にした&lt;/li&gt;
&lt;li&gt;全ての非同期操作は、Coroutines TSとの効率的な統合のためにAsioの&lt;code&gt;async_initiate&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;コンパイルの高速化のためには、&lt;code&gt;BOOST_BEAST_SPLIT_COMPILATION&lt;/code&gt;をdefineして&lt;code&gt;boost/beast/src.hpp&lt;/code&gt;を.cppファイルでインクルードすること&lt;/li&gt;
&lt;li&gt;完全な変更点は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;リリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 32-bit ARM向けのビルドを修正 (修正を提供してくれたIvan Ponomarev氏に感謝 &lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字修正、警告修正、更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整理と内部的な改善。Nikita Kniazev氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub #56&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/57&#34; target=&#34;_blank&#34;&gt;GitHub #57&lt;/a&gt;)、Louis Dionne氏 (&lt;a href=&#34;https://github.com/boostorg/variant/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub #51&lt;/a&gt;)に感謝&lt;/li&gt;
&lt;li&gt;CIを強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Stacktraceを追加 (#351)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>e051aa9b178cbeab370fa4533d3fb290a72abac8:document/version/1_70_0.md</id>
      <updated>2019-03-12T15:56:33+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/histogram/&#34; target=&#34;_blank&#34;&gt;Histogram&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14向けの、便利なインタフェースを持つ高速で拡張可能な多次元ヒストグラム。作者Hans Dembinski&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;大きいアップデート&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&#34; target=&#34;_blank&#34;&gt;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&lt;/a&gt; ページの☆マークが付いているところが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;助力求む！&lt;ul&gt;
&lt;li&gt;Beastを使っている会社の方は、どのように使用しているのかを&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;から教えてほしい&lt;/li&gt;
&lt;li&gt;バグ、機能リクエスト、その他フィードバックは、&lt;a href=&#34;https://github.com/boostorg/beast/issues/new&#34; target=&#34;_blank&#34;&gt;こちらから報告&lt;/a&gt;してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;C++ Slack Workspace&lt;/a&gt;の #beast チャンネルと #boost チャンネルに参加してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34; target=&#34;_blank&#34;&gt;リポジトリ&lt;/a&gt;への☆も忘れずに！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;チュートリアルをさらに充実させ、活かせるコードを増やした&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html&#34; target=&#34;_blank&#34;&gt;Networking Refresher&lt;/a&gt;はゼロから教える&lt;/li&gt;
&lt;li&gt;[Asynchronous Echo (非同期Echo)]((https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html)の例を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html&#34; target=&#34;_blank&#34;&gt;Detect SSL (SSL検知)&lt;/a&gt;の合成操作チュートリアルを更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi&#34; target=&#34;_blank&#34;&gt;websocket-chat-multi&lt;/a&gt;は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi/chat_client.html&#34; target=&#34;_blank&#34;&gt;JavaScriptのブラウザクライアント&lt;/a&gt;と組み合わせたマルチスレッドのチャットサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html&#34; target=&#34;_blank&#34;&gt;basic_stream&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html&#34; target=&#34;_blank&#34;&gt;tcp_stream&lt;/a&gt;&lt;/code&gt;は、以下を提供する：&lt;ul&gt;
&lt;li&gt;タイムアウト： 期限切れに対して&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html&#34; target=&#34;_blank&#34;&gt;error::timeout&lt;/a&gt;&lt;/code&gt;を使用して、&lt;code&gt;async_read_some&lt;/code&gt;、&lt;code&gt;async_write_some&lt;/code&gt;で検知する&lt;/li&gt;
&lt;li&gt;トラフィックシェーピング (Traffic-shaping) ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html&#34; target=&#34;_blank&#34;&gt;unlimited&lt;/a&gt;&lt;/code&gt;もしくはユーザー定義のための&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html&#34; target=&#34;_blank&#34;&gt;RatePolicyコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html&#34; target=&#34;_blank&#34;&gt;P1322R0&lt;/a&gt;を使用して、ソケットに直接strandを置けるようにした。呼び出し側で&lt;code&gt;bind_executor&lt;/code&gt;は必要ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本クラス群&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html&#34; target=&#34;_blank&#34;&gt;async_base&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html&#34; target=&#34;_blank&#34;&gt;stable_async_base&lt;/a&gt;&lt;/code&gt;は、全ての合成操作ボイラープレートをハンドリングできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html&#34; target=&#34;_blank&#34;&gt;ssl_stream&lt;/a&gt;&lt;/code&gt;は、flat write optimizationを使用して、ムーブ可能かつ代入可能にした&lt;/li&gt;
&lt;li&gt;全ての非同期操作は、Coroutines TSとの効率的な統合のためにAsioの&lt;code&gt;async_initiate&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;コンパイルの高速化のためには、&lt;code&gt;BOOST_BEAST_SPLIT_COMPILATION&lt;/code&gt;をdefineして&lt;code&gt;boost/beast/src.hpp&lt;/code&gt;を.cppファイルでインクルードすること&lt;/li&gt;
&lt;li&gt;完全な変更点は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;リリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS 32-bit ARM向けのビルドを修正 (修正を提供してくれたIvan Ponomarev氏に感謝 &lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字修正、警告修正、更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Histogramを追加 (close #347)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>e8c7b9fba3ea8b394695a6d07b0864a3c50b9d31:document/version/1_70_0.md</id>
      <updated>2019-03-12T15:15:41+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/histogram/&#34; target=&#34;_blank&#34;&gt;Histogram&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++14向けの、便利なインタフェースを持つ高速で拡張可能な多次元ヒストグラム。作者Hans Dembinski&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;大きいアップデート&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&#34; target=&#34;_blank&#34;&gt;https://www.boost.org/libs/beast/doc/html/beast/quickref.html&lt;/a&gt; ページの☆マークが付いているところが重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;助力求む！&lt;ul&gt;
&lt;li&gt;Beastを使っている会社の方は、どのように使用しているのかを&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;から教えてほしい&lt;/li&gt;
&lt;li&gt;バグ、機能リクエスト、その他フィードバックは、&lt;a href=&#34;https://github.com/boostorg/beast/issues/new&#34; target=&#34;_blank&#34;&gt;こちらから報告&lt;/a&gt;してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cppalliance.org/slack/&#34; target=&#34;_blank&#34;&gt;C++ Slack Workspace&lt;/a&gt;の #beast チャンネルと #boost チャンネルに参加してほしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast&#34; target=&#34;_blank&#34;&gt;リポジトリ&lt;/a&gt;への☆も忘れずに！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;チュートリアルをさらに充実させ、活かせるコードを増やした&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html&#34; target=&#34;_blank&#34;&gt;Networking Refresher&lt;/a&gt;はゼロから教える&lt;/li&gt;
&lt;li&gt;[Asynchronous Echo (非同期Echo)]((https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html)の例を更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html&#34; target=&#34;_blank&#34;&gt;Detect SSL (SSL検知)&lt;/a&gt;の合成操作チュートリアルを更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi&#34; target=&#34;_blank&#34;&gt;websocket-chat-multi&lt;/a&gt;は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/example/websocket/server/chat-multi/chat_client.html&#34; target=&#34;_blank&#34;&gt;JavaScriptのブラウザクライアント&lt;/a&gt;と組み合わせたマルチスレッドのチャットサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html&#34; target=&#34;_blank&#34;&gt;basic_stream&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html&#34; target=&#34;_blank&#34;&gt;tcp_stream&lt;/a&gt;&lt;/code&gt;は、以下を提供する：&lt;ul&gt;
&lt;li&gt;タイムアウト： 期限切れに対して&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html&#34; target=&#34;_blank&#34;&gt;error::timeout&lt;/a&gt;&lt;/code&gt;を使用して、&lt;code&gt;async_read_some&lt;/code&gt;、&lt;code&gt;async_write_some&lt;/code&gt;で検知する&lt;/li&gt;
&lt;li&gt;トラフィックシェーピング (Traffic-shaping) ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html&#34; target=&#34;_blank&#34;&gt;simple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html&#34; target=&#34;_blank&#34;&gt;unlimited&lt;/a&gt;&lt;/code&gt;もしくはユーザー定義のための&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html&#34; target=&#34;_blank&#34;&gt;RatePolicyコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html&#34; target=&#34;_blank&#34;&gt;P1322R0&lt;/a&gt;を使用して、ソケットに直接strandを置けるようにした。呼び出し側で&lt;code&gt;bind_executor&lt;/code&gt;は必要ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本クラス群&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html&#34; target=&#34;_blank&#34;&gt;async_base&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html&#34; target=&#34;_blank&#34;&gt;stable_async_base&lt;/a&gt;&lt;/code&gt;は、全ての合成操作ボイラープレートをハンドリングできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html&#34; target=&#34;_blank&#34;&gt;ssl_stream&lt;/a&gt;&lt;/code&gt;は、flat write optimizationを使用して、ムーブ可能かつ代入可能にした&lt;/li&gt;
&lt;li&gt;全ての非同期操作は、Coroutines TSとの効率的な統合のためにAsioの&lt;code&gt;async_initiate&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;コンパイルの高速化のためには、&lt;code&gt;BOOST_BEAST_SPLIT_COMPILATION&lt;/code&gt;をdefineして&lt;code&gt;boost/beast/src.hpp&lt;/code&gt;を.cppファイルでインクルードすること&lt;/li&gt;
&lt;li&gt;完全な変更点は、&lt;a href=&#34;https://www.boost.org/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;リリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>