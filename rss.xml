<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2025-02-21T14:42:02.988806</updated>
  <id>a349017e-811e-451b-8c3b-23a776d618b3</id>

  
    <entry>
      <title>Boost 1.87.0リリースノート -- 1.87.0 : Optionalを追加</title>
      <link href="https://boostjp.github.io/document/version/1_87_0.html"/>
      <id>191d498a55eecab7874b77c8f1dbc16858c01b0d:document/version/1_87_0.md</id>
      <updated>2024-12-27T12:51:04+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.87.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_87_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_87_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/parser&#34; target=&#34;_blank&#34;&gt;Parser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;パーサー構築のフレームワーク。作者Zach Laine氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#process&#34;&gt;Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;byte spanとそのシーケンスを、バッファシーケンスとして使用できるサポートを追加。これにより、&lt;code&gt;async_read&lt;/code&gt;などのI/O操作に直接渡すことができる&lt;/li&gt;
&lt;li&gt;非同期操作がエラーなしで完了したかどうかをテストできるgeneric dispositionのサポートを追加。これには&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;exception_ptr&lt;/code&gt;が含まれるが、&lt;code&gt;disposition_traits&lt;/code&gt;クラステンプレートの特殊化によってユーザー定義の型に拡張できる。標準型の&lt;code&gt;std::error_code&lt;/code&gt;と&lt;code&gt;std::exception_ptr&lt;/code&gt;がディスポジションとして認識される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::use_future&lt;/code&gt;完了トークン、&lt;code&gt;boost::asio::awaitable&amp;lt;&amp;gt;&lt;/code&gt;ベースのコルーチン、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;、&lt;code&gt;boost::asio::experimental::cancellation_condition&lt;/code&gt;にディスポジションサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution_context::service_maker&lt;/code&gt;抽象基底クラスを追加。&lt;code&gt;service_maker&lt;/code&gt;はexecution contextのコンストラクタに渡されるオブジェクトで、コンテキスト構築時にサービスを追加できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::config&lt;/code&gt;を追加。execution contextに関連する設定パラメータにアクセスできる。このクラスはAsioの内部、またはAsioの上に構築されるライブラリやユーザー提供の抽象化での使用を意図しており、特定の最適化の有効化/無効化などの動作を微調整するために使用される。&lt;code&gt;boost::asio::config_from_env&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_concurrency_hint&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_string&lt;/code&gt;などの具体的な設定ソースを&lt;code&gt;io_context&lt;/code&gt;または&lt;code&gt;thread_pool&lt;/code&gt;のコンストラクタに渡すことができる&lt;/li&gt;
&lt;li&gt;Asioの&lt;code&gt;io_context&lt;/code&gt;と&lt;code&gt;thread_pool&lt;/code&gt;実装で認識される初期設定パラメータセットを追加&lt;/li&gt;
&lt;li&gt;以前に非推奨だった機能をいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object&lt;/code&gt;と&lt;code&gt;deadline_timer&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;associating binderに右辺値修飾の&lt;code&gt;operator()&lt;/code&gt;オーバーロードを追加。&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;ムーブ専用型を返す関数の&lt;code&gt;spawn()&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;コンセプトサポートを必要としないよう&lt;code&gt;co_composed&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;epollリアクターがfork後に通常のfile descriptorを再登録しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::detail::engine&lt;/code&gt;ムーブ代入のリークを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING&lt;/code&gt;が定義されている場合のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;Clang 19を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool::join()&lt;/code&gt;を変更し、&lt;code&gt;thread_pool::attach()&lt;/code&gt;で後に追加されるスレッドを確実に停止するようにした&lt;/li&gt;
&lt;li&gt;ストリーム指向操作で使用される&lt;code&gt;io_uring_prep_write_fixed&lt;/code&gt;と&lt;code&gt;io_uring_prep_read_fixed&lt;/code&gt;に渡されるオフセットを修正&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; アトミック待機状態リストのメモリ再確保時の初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APIの変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_fields::insert()&lt;/code&gt;に&lt;code&gt;error_code&lt;/code&gt;オーバーロードを追加&lt;/li&gt;
&lt;li&gt;permessage-deflateの状態を照会するための&lt;code&gt;websocket::stream::get_status&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;タイムアウト時に&lt;code&gt;bad_executor&lt;/code&gt;例外を引き起こす&lt;code&gt;http::basic_stream&lt;/code&gt;内の&lt;code&gt;net::dispatch&lt;/code&gt;呼び出しでのムーブ後使用を修正&lt;/li&gt;
&lt;li&gt;初期化関数内の変更操作を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teardown_tcp_op&lt;/code&gt;でのキャンセル処理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_finish_impl&lt;/code&gt;を呼び出す前に&lt;code&gt;basic_parser&lt;/code&gt;の&lt;code&gt;state_&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;関数から&lt;code&gt;static&lt;/code&gt;指定子を削除&lt;/li&gt;
&lt;li&gt;テストでの&lt;code&gt;-Wattributes&lt;/code&gt;警告に対処&lt;/li&gt;
&lt;li&gt;テストでの到達不能コード警告に対処&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beast::http&lt;/code&gt;名前空間の型の前方宣言ヘッダーを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::parser&lt;/code&gt;が&lt;code&gt;error_code&lt;/code&gt;オーバーロードを使用した&lt;code&gt;basic_fields::insert()&lt;/code&gt;を使用できるよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;に&lt;code&gt;header_limit_&lt;/code&gt;をトレーラーヘッダーに適用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;が&lt;code&gt;http::error::header_limit&lt;/code&gt;をより早く返すように改善&lt;/li&gt;
&lt;li&gt;モジュラーBoostビルド構造のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Jackarain, Saleh Hatefinya, René Ferdinand Rivera Morell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#charconv&#34; id=&#34;charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__ibm128&lt;/code&gt;をlong double formatとして使用するPPC64LE アーキテクチャのサポートを修正&lt;/li&gt;
&lt;li&gt;Windows ARM64プラットフォームでの組み込み関数の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::float128_t&lt;/code&gt;または&lt;code&gt;__float128&lt;/code&gt;を使用した固定小数点の指定精度でのフォーマットを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cobalt&#34; id=&#34;cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_executor&lt;/code&gt;で定数参照を返す要件を削除&lt;/li&gt;
&lt;li&gt;実験的/構成を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_array.hpp&lt;/code&gt;を追加（Ruben Perez Hidalgo氏の貢献）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;と&lt;code&gt;small_vector&lt;/code&gt;に&lt;code&gt;stored_size&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;バグ/問題を修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/261&#34; target=&#34;_blank&#34;&gt;GitHub #261&lt;/a&gt; 終端イテレータは参照できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;small_vectorで&lt;/code&gt;flat_map::extract_sequence`を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.84.0で発表されたように、Windows 10より前のバージョンはサポートされなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/325&#34; target=&#34;_blank&#34;&gt;GitHub #325&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;が&lt;code&gt;GetFinalPathNameByHandleW&lt;/code&gt; WinAPI関数に基づくようになった。副次的効果として、ドライブ文字は大文字に変換され、結果のパスの相互運用性が向上した&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;canonical&lt;/code&gt;は、入力パスに末尾のディレクトリ区切り文字 (trailing directory separator)がある場合でも、結果のパスに末尾のディレクトリ区切り文字を生成しなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/326&#34; target=&#34;_blank&#34;&gt;GitHub #326&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;コンストラクタまたはメンバ関数が、&lt;code&gt;path&lt;/code&gt;に変換可能なユーザー定義型の引数と1つ以上の&lt;code&gt;Source&lt;/code&gt;型で呼び出された場合、デフォルトで&lt;code&gt;path&lt;/code&gt;への変換が選択されるようになった。これにより一部の引数変換のあいまいさが解消される可能性があるが、変換パスが最適でない場合もある。異なる変換パスが必要な場合、ユーザーには明示的な型キャストの使用を推奨される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/328&#34; target=&#34;_blank&#34;&gt;GitHub #328&lt;/a&gt; FreeBSD 9以前の&lt;code&gt;dirfd&lt;/code&gt;がマクロである場合の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドシナリオで優れたパフォーマンスを提供する、Boost.Unorderedの並行コンテナに基づく&lt;code&gt;concurrent_factory&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; 以前に例外送出しないとドキュメントに記載されていた&lt;code&gt;boost::flyweight&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を付与&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;コードの一部で&lt;code&gt;typedef&lt;/code&gt;の代わりに&lt;code&gt;using&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;コードの一部でエイリアスを使用してメタ関数を現代化&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;CMakeカバレッジの完全化（GitHub Actionsのcmakeテストを追加）&lt;/li&gt;
&lt;li&gt;ドキュメントワークフローの改善&lt;/li&gt;
&lt;li&gt;QtとWxWidgetsの例を更新&lt;/li&gt;
&lt;li&gt;C++17と23に備えて列挙を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重大な変更&lt;ul&gt;
&lt;li&gt;非推奨のリスケーリングコードを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1309&#34; target=&#34;_blank&#34;&gt;GitHub #1309&lt;/a&gt; 一部のqbkインクルードの不足を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1226&#34; target=&#34;_blank&#34;&gt;GitHub #1226&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1326&#34; target=&#34;_blank&#34;&gt;GitHub #1326&lt;/a&gt; ringに対するextra roundを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1293&#34; target=&#34;_blank&#34;&gt;GitHub #1293&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1294&#34; target=&#34;_blank&#34;&gt;GitHub #1294&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1295&#34; target=&#34;_blank&#34;&gt;GitHub #1295&lt;/a&gt; クラスター化されていないリングを通過する処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/893&#34; target=&#34;_blank&#34;&gt;GitHub #893&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1299&#34; target=&#34;_blank&#34;&gt;GitHub #1299&lt;/a&gt; 和演算の条件でのブロッキングリングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1342&#34; target=&#34;_blank&#34;&gt;GitHub #1342&lt;/a&gt; touchとの組み合わせでのstart turnを破棄を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1288&#34; target=&#34;_blank&#34;&gt;GitHub #1288&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1345&#34; target=&#34;_blank&#34;&gt;GitHub #1345&lt;/a&gt; （不完全な）touchの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1279&#34; target=&#34;_blank&#34;&gt;GitHub #1279&lt;/a&gt; &lt;code&gt;covered_by&lt;/code&gt;の不正確な結果を修正&lt;/li&gt;
&lt;li&gt;エラーと警告の各種修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/issues/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; &lt;code&gt;function_output_iterator&lt;/code&gt;が&lt;code&gt;std::output_iterator&lt;/code&gt;コンセプトに準拠するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boostの依存関係を11から7に削減。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/containers/*.hpp&amp;gt;&lt;/code&gt;ヘッダーを非推奨にした。2011年にはBoost.Containerの元ソースを参照していたが、現在はメンテナンスされていない。長期的な移行として、Boost.Interprocessはこれらのヘッダーを互換性のために維持してきた。将来のBoostリリースで削除される&lt;/li&gt;
&lt;li&gt;Cygwinのいくつかの回避策を追加。リグレッションテストがCygwin64で動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ABI破壊的変更&lt;/strong&gt;: &lt;code&gt;segment_manager&lt;/code&gt;が、オーバーアラインされた型をサポートし、既存のバグを修正する新しい実装を使用。Boost 1.87より前のABIを取得するには、Boost.Interprocessヘッダーをインクルードする前に&lt;code&gt;BOOST_INTERPROCESS_SEGMENT_MANAGER_ABI&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;として定義すること&lt;/li&gt;
&lt;li&gt;バグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; &lt;code&gt;shared_memory_object&lt;/code&gt;で&lt;code&gt;EINTR&lt;/code&gt;を処理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/173&#34; target=&#34;_blank&#34;&gt;GitHub #173&lt;/a&gt; 管理共有メモリセグメントの値が整列されていない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; &lt;code&gt;managed_windows_shared_memory&lt;/code&gt;が破壊時にクラッシュ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; &lt;code&gt;char_wchar_holder&lt;/code&gt;の代入演算子で&lt;code&gt;m_is_wide&lt;/code&gt;が不足/誤用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;boost::interprocess::ipcdetail::sync_handles::obtain_mutex&lt;/code&gt;のバグ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/215&#34; target=&#34;_blank&#34;&gt;GitHub #215&lt;/a&gt; SPARC 32ビットでboost/interprocess/segment_managerのアラインメント問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; &lt;code&gt;managed_map_file&lt;/code&gt;の&lt;code&gt;find_or_construct&lt;/code&gt;がキャッシュアラインメントされたメモリを返さない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/230&#34; target=&#34;_blank&#34;&gt;GitHub #230&lt;/a&gt; MinGWで&lt;code&gt;interprocess::ipcdetail::intermodule_singleton&lt;/code&gt;が動作しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; &lt;code&gt;get_current_process_creation_time&lt;/code&gt;の浮動小数点の不正確さにより&lt;code&gt;intermodule_singleton&lt;/code&gt;の失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接的なシリアライズ&lt;/li&gt;
&lt;li&gt;Boost.JSON型のGDBプリティプリンタを追加&lt;/li&gt;
&lt;li&gt;構造体への変換で不明なキーを無視&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;の例外ラッピング動作を簡素化&lt;/li&gt;
&lt;li&gt;非推奨のinitializer listの動作を削除&lt;/li&gt;
&lt;li&gt;非推奨の型エイリアスを削除&lt;/li&gt;
&lt;li&gt;MinGW ARM64での正確な64ビット乗算を使用&lt;/li&gt;
&lt;li&gt;サイズの異なるタプルでの&lt;code&gt;parse_into&lt;/code&gt;の処理を修正&lt;/li&gt;
&lt;li&gt;シーケンスの許容サイズより大きな入力サイズをチェック&lt;/li&gt;
&lt;li&gt;GCC 14での&lt;code&gt;value_ref&lt;/code&gt;のセグメンテーション違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexical_cast&#34; id=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Integerへの依存性を削除し、コンパイル時間を短縮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Threadの同期プリミティブをC++標準ライブラリの同等物と置き換えた。これにより、マルチスレッドのパフォーマンスが向上する可能性があるが、ユーザー側での影響もある&lt;ul&gt;
&lt;li&gt;Boost.Threadのスレッド割り込み機能はサポートされなくなった。Boost.Logは、Boost.Threadによってスレッド割り込みを実装するために使用される &lt;code&gt;thread_interrupted&lt;/code&gt; 例外に対して特別な処理を行わなくなった。この例外は他の任意の例外と同様に扱われる&lt;ul&gt;
&lt;li&gt;とくに、ユーザー指定の例外ハンドラが &lt;code&gt;thread_interrupted&lt;/code&gt; のペンディング例外で呼び出されることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timed wait操作について、タイムアウトは現在&lt;code&gt;std::chrono&lt;/code&gt;の時間単位を使用している。これは、&lt;code&gt;bounded_ordering_queue&lt;/code&gt; クラスと &lt;code&gt;unbounded_ordering_queue&lt;/code&gt; クラスがサポートする &lt;code&gt;ordering_window&lt;/code&gt; という名前付きパラメータが、Boost.DateTimeの &lt;code&gt;boost::posix_time::time_duration&lt;/code&gt; ではなく &lt;code&gt;std::chrono::duration&lt;/code&gt; の値を期待することを意味している&lt;/li&gt;
&lt;li&gt;スレッド同期プリミティブによって示されるエラーの場合、Boost.Threadの例外型の代わりに &lt;code&gt;std::system_error&lt;/code&gt; 例外が送出される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strictest_lock&lt;/code&gt; にC++標準ライブラリのlock型のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;多数の特殊関数および分布が、CUDA（NVCCおよびNVRTC）およびSYCLをサポートするようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1163&#34; target=&#34;_blank&#34;&gt;GitHub #1163&lt;/a&gt; mapairy distribution、holtsmark distributionおよびsaspoint5 distributionを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1159&#34; target=&#34;_blank&#34;&gt;GitHub #1159&lt;/a&gt; landau distributionを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1169&#34; target=&#34;_blank&#34;&gt;GitHub #1169&lt;/a&gt; beta quantileにおける予期しない例外を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのバグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/56&#34; target=&#34;_blank&#34;&gt;Git Issue #56&lt;/a&gt; std型の前方宣言が、一部のプラットフォームでコンパイルエラーを引き起こす&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_lambda&lt;/code&gt;を追加（提供者：Joaquin M Lopez Munoz氏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float128&lt;/code&gt; をtrivially copyableにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt; を非GNUモードでも浮動小数点型とみなすよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;実験的なAPIへの破壊的変更&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;でのスレッドセーフティ機能が再設計され、ユーザーの経験によって見つかったいくつかの設計の欠陥を克服した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_safe&lt;/code&gt;という&lt;code&gt;bool&lt;/code&gt;オプションが&lt;code&gt;pool_params&lt;/code&gt;に追加され、デフォルトでは&lt;code&gt;false&lt;/code&gt;に設定されている。設定すると、一部のプール関数が挙動を変更して並行に安全に使用できるようになる。これは内部で&lt;code&gt;strand&lt;/code&gt;を作成し、必要なときにそれにディスパッチし、cancel signalを再配線することで機能する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_params::thread_safe&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合、通常のAsio executorのセマンティクスが適用され、オーバーヘッドはない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_executor_params&lt;/code&gt;は削除され、&lt;code&gt;pool_params::connection_executor&lt;/code&gt;と&lt;code&gt;pool_params::thread_safe&lt;/code&gt;に置き換えられた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool::async_get_connection&lt;/code&gt;の組み込みタイムアウト機能が完全に削除された。この関数は現在、個々の操作のキャンセルをサポートしており、同じ機能は&lt;code&gt;asio::cancel_after&lt;/code&gt;を使用することで達成できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の破棄をすると、ほかのAsio I/Oオブジェクトと同様に、未処理の非同期操作がキャンセルされる。これによりリソースのリークが防止される&lt;/li&gt;
&lt;li&gt;利用可能なコネクションがまだない状態で&lt;code&gt;async_get_connection&lt;/code&gt;操作がキャンセルされた場合、操作は現在、プールの状態に応じて一貫して&lt;code&gt;client_errc::pool_not_running&lt;/code&gt;、&lt;code&gt;client_errc::no_connection_available&lt;/code&gt;、または&lt;code&gt;client_errc::pool_cancelled&lt;/code&gt;で失敗する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_errc::timeout&lt;/code&gt;と&lt;code&gt;client_errc::cancelled&lt;/code&gt;が削除された&lt;/li&gt;
&lt;li&gt;プールが実行中でない状態で&lt;code&gt;async_get_connection&lt;/code&gt;を呼び出すとすぐには失敗せず、&lt;code&gt;async_run&lt;/code&gt;の呼び出しを待つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は所有型を返すようになった。これにより、&lt;code&gt;with_params&lt;/code&gt;と共に遅延非同期操作で使用することが安全になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は別のヘッダー、&lt;code&gt;boost/mysql/sequence.hpp&lt;/code&gt;に移動された&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;、クライアント側のSQLフォーマット（&lt;code&gt;format_sql&lt;/code&gt;および&lt;code&gt;with_params&lt;/code&gt;を含む）、および&lt;code&gt;connection_pool&lt;/code&gt;を安定したAPIに昇格させた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;とそのエイリアスである&lt;code&gt;tcp_connection&lt;/code&gt;、&lt;code&gt;tcp_ssl_connection&lt;/code&gt;、および&lt;code&gt;unix_connection&lt;/code&gt;の代わりに使用する新規コードとして、&lt;code&gt;any_connection&lt;/code&gt;が推奨される&lt;/li&gt;
&lt;li&gt;クエリテンプレート文字列とパラメータを包括する新しい &lt;code&gt;ExecutionRequest&lt;/code&gt; である &lt;code&gt;with_params&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics&lt;/code&gt;を追加した。これは同期的に例外を送出する関数の動作と一致するように、非同期関数によって送出される例外に &lt;code&gt;diagnostics&lt;/code&gt; オブジェクトを含むアダプタ完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics(asio::deferred)&lt;/code&gt;は現在、&lt;code&gt;any_connection&lt;/code&gt;と&lt;code&gt;connection_pool&lt;/code&gt;のすべての操作のデフォルトの完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の非同期関数は現在、操作ごとのキャンセルをサポートしている&lt;/li&gt;
&lt;li&gt;すべての非同期操作は現在、&lt;code&gt;asio::cancel_after&lt;/code&gt;、&lt;code&gt;asio::cancel_at&lt;/code&gt;および同様の完了トークンをサポートしている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;と&lt;code&gt;any_connection&lt;/code&gt;は現在、即時の完全性をトークンの即時エグゼキュータ (immediate executor) を介してディスパッチする&lt;/li&gt;
&lt;li&gt;以前に接続されていない&lt;code&gt;any_connection&lt;/code&gt;を使用しようとするとクラッシュする問題を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field&lt;/code&gt;の潜在的に例外送出可能なコンストラクタから間違った&lt;code&gt;noexcept&lt;/code&gt;指定子を削除した&lt;/li&gt;
&lt;li&gt;設定されたバッファサイズの制限を超える可能性があった書き込みバッファサイズの問題を修正した&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを大幅に更新し、新しい推奨されるベストプラクティスを反映させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt; C++03のサポートを削除した。C++11以上を要求するようになった。少なくとも一部のC++11の機能が必要となる&lt;/li&gt;
&lt;li&gt;Boost.Utilityへの依存関係を削除&lt;/li&gt;
&lt;li&gt;Boost.Predefへの依存関係を削除&lt;/li&gt;
&lt;li&gt;Boost.StaticAssertへの依存関係を削除&lt;/li&gt;
&lt;li&gt;Boost.Moveへの依存関係を削除&lt;/li&gt;
&lt;li&gt;一部の関係演算の実装をわずかに高速化した&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;警告&lt;/strong&gt; 将来のリリースでは、&lt;code&gt;std::ranges::range&amp;lt;optional&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になるように、&lt;code&gt;optional&lt;/code&gt;にRangeインターフェースを導入する予定。これは、&lt;code&gt;std::ranges::range&lt;/code&gt;のような、述語に基づいて決定を下すプログラムのオーバーロード解決に影響を与える可能性がある&lt;/li&gt;
&lt;li&gt;タグ&lt;code&gt;in_place_init&lt;/code&gt;と&lt;code&gt;in_place_init_if&lt;/code&gt;が&lt;code&gt;inline constexpr&lt;/code&gt;になり、その結果、実行ファイルのフットプリントが小さくなった。これは&lt;a href=&#34;https://github.com/boostorg/optional/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt;の問題を解決する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/171&#34; target=&#34;_blank&#34;&gt;GitHub #171&lt;/a&gt; &lt;code&gt;boost::pfr::for_each_field_with_name&lt;/code&gt;関数が追加された (&lt;a href=&#34;https://github.com/Baduit&#34; target=&#34;_blank&#34;&gt;Lena&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/120&#34; target=&#34;_blank&#34;&gt;GitHub #120&lt;/a&gt; 大きなサイズと小さなフィールド数を持つ構造体のコンパイル時間が大幅に改善された (&lt;a href=&#34;https://github.com/runer112&#34; target=&#34;_blank&#34;&gt;Zachary Wassall&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;ディレクティブを修正&lt;/li&gt;
&lt;li&gt;C++20モジュールへの初期サポートを追加した。詳細はドキュメントを参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/pfr/pull/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; core_name14_disabled.hpp内の未使用変数の警告を修正 (&lt;a href=&#34;https://github.com/anarthal&#34; target=&#34;_blank&#34;&gt;Anarthal (Rubén Pérez)&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;C++17における集成体内のフィールド数のデフォルト制限を100から200に引き上げた&lt;/li&gt;
&lt;li&gt;GCCが&lt;code&gt;-Wundefined-var-template&lt;/code&gt;を認識していないことに関する警告を修正&lt;/li&gt;
&lt;li&gt;複数の軽微なコンパイル時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#process&#34; id=&#34;process&#34;&gt;Process&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(v2) Windowsでの&lt;code&gt;async_wait&lt;/code&gt;のキャンセルを実装した&lt;/li&gt;
&lt;li&gt;(v2) &lt;code&gt;FORCE_DISABLE_CLOSE_RANGE&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;(v2) ext: BSDおよびSolarisの複数のext修正&lt;/li&gt;
&lt;li&gt;(v2) 未使用の &lt;code&gt;ext&lt;/code&gt; 関数が現在コンパイルされ、 &lt;code&gt;operation_not_supported&lt;/code&gt; エラーが与えられるようになった（IOSを含む）&lt;/li&gt;
&lt;li&gt;(v2) 複数のリンクを修正&lt;/li&gt;
&lt;li&gt;(v2) リンクされたライブラリからfilesystemが削除された - 使用されるfilesystemライブラリの機能としては、ヘッダーファイルに実装があるもののみとなった&lt;/li&gt;
&lt;li&gt;(v1) 1.88に対する非推奨通知を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了し、C++11のコンパイラが必要となる。これにはGCC 4.8以降、またはMSVC 14.0以降が含まれる&lt;/li&gt;
&lt;li&gt;マクロ &lt;code&gt;BOOST_SP_ENABLE_DEBUG_HOOKS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_STD_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_QUICK_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_SPINLOCK&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_PTHREADS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_SPINLOCK&lt;/code&gt;、および&lt;code&gt;BOOST_SP_USE_PTHREADS&lt;/code&gt;により有効化される機能は非推奨となり、将来のリリースでそのサポートは削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;boost::stacktrace_from_exception&lt;/code&gt;のCMakeターゲットが追加された (&lt;a href=&#34;https://github.com/void-mian&#34; target=&#34;_blank&#34;&gt;int mian&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; MSVCでの静的ビルド時に&lt;code&gt;boost_stacktrace_impl_return_nullptr&lt;/code&gt;をエクスポートしないようにした (&lt;a href=&#34;https://github.com/huangqinjin&#34; target=&#34;_blank&#34;&gt;huangqinjin&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;Windows OSでclangを使用した際の、&lt;code&gt;ole32.lib&lt;/code&gt;と&lt;code&gt;Dbgeng.lib&lt;/code&gt;の自動リンクを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメントで欠落していた名前空間を修正した (&lt;a href=&#34;https://github.com/meastp&#34; target=&#34;_blank&#34;&gt;Mats Taraldsvik&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/178&#34; target=&#34;_blank&#34;&gt;GitHub #178&lt;/a&gt; &lt;code&gt;std::exception&lt;/code&gt; のインクルード不足を修正した (&lt;a href=&#34;https://github.com/jschueller&#34; target=&#34;_blank&#34;&gt;Julien Schueller&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/175&#34; target=&#34;_blank&#34;&gt;GitHub #175&lt;/a&gt; GCCが報告した型の変換エラーを修正した (&lt;a href=&#34;https://github.com/jplcz&#34; target=&#34;_blank&#34;&gt;agent_J&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; CLIからB2の&lt;code&gt;from_exception&lt;/code&gt;機能を使用できるようにした (&lt;a href=&#34;https://github.com/grisumbras]氏に感謝&#34; target=&#34;_blank&#34;&gt;Dmitry Arkhipov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stl_interfaces&#34; id=&#34;stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/71&#34; target=&#34;_blank&#34;&gt;GitHub #71&lt;/a&gt; シーケンスコンテナ &lt;code&gt;swap&lt;/code&gt; の誤って記録された要件を正しくした。期待される戻り値は &lt;code&gt;bool&lt;/code&gt; ではなく &lt;code&gt;void&lt;/code&gt; である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/65&#34; target=&#34;_blank&#34;&gt;GitHub #65&lt;/a&gt; &lt;code&gt;view_adaptor.hpp&lt;/code&gt;のアダプターのデータメンバーに &lt;code&gt;[[no_unique_address]]&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; ClangとMSVCの最近のバージョンで &lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt; を介してサポートをアドバタイズしていない &lt;code&gt;this&lt;/code&gt; の推論を可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/348&#34; target=&#34;_blank&#34;&gt;GitHub #348&lt;/a&gt; ダミー条件に対するclang tidyのサポートを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/431&#34; target=&#34;_blank&#34;&gt;GitHub #431&lt;/a&gt; clangでの動的リンクを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;並行ノードベースコンテナ &lt;code&gt;boost::concurrent_node_map&lt;/code&gt; と &lt;code&gt;boost::concurrent_node_set&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;並行コンテナに &lt;code&gt;insert_and_visit(x, f1, f2)&lt;/code&gt; および類似の操作を追加した。これは、挿入直後に要素を訪問することを可能にする（対照的に、 &lt;code&gt;insert_or_visit(x, f)&lt;/code&gt; は、挿入が行われなかった場合にのみ要素を訪問する）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/265&#34; target=&#34;_blank&#34;&gt;GitHub #265&lt;/a&gt; 要素の安全な可変変更を可能にするため、特定の &lt;code&gt;boost::concurrent_flat_set&lt;/code&gt; 操作内で訪問を排他的にロック&lt;/li&gt;
&lt;li&gt;Visual Studio Natvisでは、任意のファンシーなポインタ型をサポートした。このことは、適切なNatvisカスタマイズポイント &#34;Intrinsic&#34; 関数がファンシーポインタ型自体に対して書かれている限り、任意のファンシーポインタ型に適用できる&lt;/li&gt;
&lt;li&gt;すべてのコンテナとイテレータにGDBのプリティプリンタが追加されました。ファンシーポインタを使用するアロケータを持つコンテナに対しては、ファンシーポインタ型そのものに対して適切なプリティプリンタが書かれている場合にのみ、これらは機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/277&#34; target=&#34;_blank&#34;&gt;GitHub #277&lt;/a&gt; オープンアドレッシングコンテナに対する &lt;code&gt;std::initializer_list&lt;/code&gt; への代入の問題を修正した&lt;/li&gt;
&lt;li&gt;接続コンテナの &lt;code&gt;std::initializer_list&lt;/code&gt; オーバーロードの &lt;code&gt;insert_{and|or}_[c]visit&lt;/code&gt; にコピー不可能なコールバックを渡すことができるようにした。これは内部的にコールバックの &lt;code&gt;std::reference_wrapper&lt;/code&gt; をイテレーターペアのオーバーロードに渡す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/856&#34; target=&#34;_blank&#34;&gt;GitHub #856&lt;/a&gt; 機能追加: &lt;code&gt;set_params&lt;/code&gt;が&lt;code&gt;encoding_opts&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/857&#34; target=&#34;_blank&#34;&gt;GitHub #857&lt;/a&gt; リファクタリング: APIから非推奨のvariant2エイリアスを除外&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/864&#34; target=&#34;_blank&#34;&gt;GitHub #864&lt;/a&gt; リファクタリング: &lt;code&gt;query_rule&lt;/code&gt;に一貫した解釈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.86で間違って削除した &lt;code&gt;constexpr uuid&lt;/code&gt; を構築する機能を復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt;：C++20と空の文字列化パラメータでのセグメンテーション違反を修正 (&lt;a href=&#34;https://github.com/jwnhy&#34; target=&#34;_blank&#34;&gt;Lu HongYi&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/222&#34; target=&#34;_blank&#34;&gt;GitHub #222&lt;/a&gt;：含まれるファイルの最初の行が空白の場合に行ディレクティブがない問題を修正 (&lt;a href=&#34;https://github.com/njnobles&#34; target=&#34;_blank&#34;&gt;Nick Nobles&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ビルドの改善（モジュールビルドのサポートを含む) (&lt;a href=&#34;https://github.com/grafikrobot&#34; target=&#34;_blank&#34;&gt;René Rivera&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.87.0リリースノート -- 1.87.0: Stacktraceの追加分に対応</title>
      <link href="https://boostjp.github.io/document/version/1_87_0.html"/>
      <id>bd1564c287f572e6b241d27c85071eb24508f640:document/version/1_87_0.md</id>
      <updated>2024-12-10T19:21:22+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.87.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_87_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_87_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/parser&#34; target=&#34;_blank&#34;&gt;Parser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;パーサー構築のフレームワーク。作者Zach Laine氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#process&#34;&gt;Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;byte spanとそのシーケンスを、バッファシーケンスとして使用できるサポートを追加。これにより、&lt;code&gt;async_read&lt;/code&gt;などのI/O操作に直接渡すことができる&lt;/li&gt;
&lt;li&gt;非同期操作がエラーなしで完了したかどうかをテストできるgeneric dispositionのサポートを追加。これには&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;exception_ptr&lt;/code&gt;が含まれるが、&lt;code&gt;disposition_traits&lt;/code&gt;クラステンプレートの特殊化によってユーザー定義の型に拡張できる。標準型の&lt;code&gt;std::error_code&lt;/code&gt;と&lt;code&gt;std::exception_ptr&lt;/code&gt;がディスポジションとして認識される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::use_future&lt;/code&gt;完了トークン、&lt;code&gt;boost::asio::awaitable&amp;lt;&amp;gt;&lt;/code&gt;ベースのコルーチン、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;、&lt;code&gt;boost::asio::experimental::cancellation_condition&lt;/code&gt;にディスポジションサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution_context::service_maker&lt;/code&gt;抽象基底クラスを追加。&lt;code&gt;service_maker&lt;/code&gt;はexecution contextのコンストラクタに渡されるオブジェクトで、コンテキスト構築時にサービスを追加できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::config&lt;/code&gt;を追加。execution contextに関連する設定パラメータにアクセスできる。このクラスはAsioの内部、またはAsioの上に構築されるライブラリやユーザー提供の抽象化での使用を意図しており、特定の最適化の有効化/無効化などの動作を微調整するために使用される。&lt;code&gt;boost::asio::config_from_env&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_concurrency_hint&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_string&lt;/code&gt;などの具体的な設定ソースを&lt;code&gt;io_context&lt;/code&gt;または&lt;code&gt;thread_pool&lt;/code&gt;のコンストラクタに渡すことができる&lt;/li&gt;
&lt;li&gt;Asioの&lt;code&gt;io_context&lt;/code&gt;と&lt;code&gt;thread_pool&lt;/code&gt;実装で認識される初期設定パラメータセットを追加&lt;/li&gt;
&lt;li&gt;以前に非推奨だった機能をいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object&lt;/code&gt;と&lt;code&gt;deadline_timer&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;associating binderに右辺値修飾の&lt;code&gt;operator()&lt;/code&gt;オーバーロードを追加。&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;ムーブ専用型を返す関数の&lt;code&gt;spawn()&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;コンセプトサポートを必要としないよう&lt;code&gt;co_composed&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;epollリアクターがfork後に通常のfile descriptorを再登録しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::detail::engine&lt;/code&gt;ムーブ代入のリークを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING&lt;/code&gt;が定義されている場合のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;Clang 19を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool::join()&lt;/code&gt;を変更し、&lt;code&gt;thread_pool::attach()&lt;/code&gt;で後に追加されるスレッドを確実に停止するようにした&lt;/li&gt;
&lt;li&gt;ストリーム指向操作で使用される&lt;code&gt;io_uring_prep_write_fixed&lt;/code&gt;と&lt;code&gt;io_uring_prep_read_fixed&lt;/code&gt;に渡されるオフセットを修正&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; アトミック待機状態リストのメモリ再確保時の初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APIの変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_fields::insert()&lt;/code&gt;に&lt;code&gt;error_code&lt;/code&gt;オーバーロードを追加&lt;/li&gt;
&lt;li&gt;permessage-deflateの状態を照会するための&lt;code&gt;websocket::stream::get_status&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;タイムアウト時に&lt;code&gt;bad_executor&lt;/code&gt;例外を引き起こす&lt;code&gt;http::basic_stream&lt;/code&gt;内の&lt;code&gt;net::dispatch&lt;/code&gt;呼び出しでのムーブ後使用を修正&lt;/li&gt;
&lt;li&gt;初期化関数内の変更操作を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teardown_tcp_op&lt;/code&gt;でのキャンセル処理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_finish_impl&lt;/code&gt;を呼び出す前に&lt;code&gt;basic_parser&lt;/code&gt;の&lt;code&gt;state_&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;関数から&lt;code&gt;static&lt;/code&gt;指定子を削除&lt;/li&gt;
&lt;li&gt;テストでの&lt;code&gt;-Wattributes&lt;/code&gt;警告に対処&lt;/li&gt;
&lt;li&gt;テストでの到達不能コード警告に対処&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beast::http&lt;/code&gt;名前空間の型の前方宣言ヘッダーを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::parser&lt;/code&gt;が&lt;code&gt;error_code&lt;/code&gt;オーバーロードを使用した&lt;code&gt;basic_fields::insert()&lt;/code&gt;を使用できるよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;に&lt;code&gt;header_limit_&lt;/code&gt;をトレーラーヘッダーに適用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;が&lt;code&gt;http::error::header_limit&lt;/code&gt;をより早く返すように改善&lt;/li&gt;
&lt;li&gt;モジュラーBoostビルド構造のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Jackarain, Saleh Hatefinya, René Ferdinand Rivera Morell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#charconv&#34; id=&#34;charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__ibm128&lt;/code&gt;をlong double formatとして使用するPPC64LE アーキテクチャのサポートを修正&lt;/li&gt;
&lt;li&gt;Windows ARM64プラットフォームでの組み込み関数の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::float128_t&lt;/code&gt;または&lt;code&gt;__float128&lt;/code&gt;を使用した固定小数点の指定精度でのフォーマットを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cobalt&#34; id=&#34;cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_executor&lt;/code&gt;で定数参照を返す要件を削除&lt;/li&gt;
&lt;li&gt;実験的/構成を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_array.hpp&lt;/code&gt;を追加（Ruben Perez Hidalgo氏の貢献）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;と&lt;code&gt;small_vector&lt;/code&gt;に&lt;code&gt;stored_size&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;バグ/問題を修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/261&#34; target=&#34;_blank&#34;&gt;GitHub #261&lt;/a&gt; 終端イテレータは参照できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;small_vectorで&lt;/code&gt;flat_map::extract_sequence`を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.84.0で発表されたように、Windows 10より前のバージョンはサポートされなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/325&#34; target=&#34;_blank&#34;&gt;GitHub #325&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;が&lt;code&gt;GetFinalPathNameByHandleW&lt;/code&gt; WinAPI関数に基づくようになった。副次的効果として、ドライブ文字は大文字に変換され、結果のパスの相互運用性が向上した&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;canonical&lt;/code&gt;は、入力パスに末尾のディレクトリ区切り文字 (trailing directory separator)がある場合でも、結果のパスに末尾のディレクトリ区切り文字を生成しなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/326&#34; target=&#34;_blank&#34;&gt;GitHub #326&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;コンストラクタまたはメンバ関数が、&lt;code&gt;path&lt;/code&gt;に変換可能なユーザー定義型の引数と1つ以上の&lt;code&gt;Source&lt;/code&gt;型で呼び出された場合、デフォルトで&lt;code&gt;path&lt;/code&gt;への変換が選択されるようになった。これにより一部の引数変換のあいまいさが解消される可能性があるが、変換パスが最適でない場合もある。異なる変換パスが必要な場合、ユーザーには明示的な型キャストの使用を推奨される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/328&#34; target=&#34;_blank&#34;&gt;GitHub #328&lt;/a&gt; FreeBSD 9以前の&lt;code&gt;dirfd&lt;/code&gt;がマクロである場合の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドシナリオで優れたパフォーマンスを提供する、Boost.Unorderedの並行コンテナに基づく&lt;code&gt;concurrent_factory&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; 以前に例外送出しないとドキュメントに記載されていた&lt;code&gt;boost::flyweight&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を付与&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;コードの一部で&lt;code&gt;typedef&lt;/code&gt;の代わりに&lt;code&gt;using&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;コードの一部でエイリアスを使用してメタ関数を現代化&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;CMakeカバレッジの完全化（GitHub Actionsのcmakeテストを追加）&lt;/li&gt;
&lt;li&gt;ドキュメントワークフローの改善&lt;/li&gt;
&lt;li&gt;QtとWxWidgetsの例を更新&lt;/li&gt;
&lt;li&gt;C++17と23に備えて列挙を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重大な変更&lt;ul&gt;
&lt;li&gt;非推奨のリスケーリングコードを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1309&#34; target=&#34;_blank&#34;&gt;GitHub #1309&lt;/a&gt; 一部のqbkインクルードの不足を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1226&#34; target=&#34;_blank&#34;&gt;GitHub #1226&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1326&#34; target=&#34;_blank&#34;&gt;GitHub #1326&lt;/a&gt; ringに対するextra roundを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1293&#34; target=&#34;_blank&#34;&gt;GitHub #1293&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1294&#34; target=&#34;_blank&#34;&gt;GitHub #1294&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1295&#34; target=&#34;_blank&#34;&gt;GitHub #1295&lt;/a&gt; クラスター化されていないリングを通過する処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/893&#34; target=&#34;_blank&#34;&gt;GitHub #893&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1299&#34; target=&#34;_blank&#34;&gt;GitHub #1299&lt;/a&gt; 和演算の条件でのブロッキングリングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1342&#34; target=&#34;_blank&#34;&gt;GitHub #1342&lt;/a&gt; touchとの組み合わせでのstart turnを破棄を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1288&#34; target=&#34;_blank&#34;&gt;GitHub #1288&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1345&#34; target=&#34;_blank&#34;&gt;GitHub #1345&lt;/a&gt; （不完全な）touchの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1279&#34; target=&#34;_blank&#34;&gt;GitHub #1279&lt;/a&gt; &lt;code&gt;covered_by&lt;/code&gt;の不正確な結果を修正&lt;/li&gt;
&lt;li&gt;エラーと警告の各種修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/issues/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; &lt;code&gt;function_output_iterator&lt;/code&gt;が&lt;code&gt;std::output_iterator&lt;/code&gt;コンセプトに準拠するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boostの依存関係を11から7に削減。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/containers/*.hpp&amp;gt;&lt;/code&gt;ヘッダーを非推奨にした。2011年にはBoost.Containerの元ソースを参照していたが、現在はメンテナンスされていない。長期的な移行として、Boost.Interprocessはこれらのヘッダーを互換性のために維持してきた。将来のBoostリリースで削除される&lt;/li&gt;
&lt;li&gt;Cygwinのいくつかの回避策を追加。リグレッションテストがCygwin64で動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ABI破壊的変更&lt;/strong&gt;: &lt;code&gt;segment_manager&lt;/code&gt;が、オーバーアラインされた型をサポートし、既存のバグを修正する新しい実装を使用。Boost 1.87より前のABIを取得するには、Boost.Interprocessヘッダーをインクルードする前に&lt;code&gt;BOOST_INTERPROCESS_SEGMENT_MANAGER_ABI&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;として定義すること&lt;/li&gt;
&lt;li&gt;バグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; &lt;code&gt;shared_memory_object&lt;/code&gt;で&lt;code&gt;EINTR&lt;/code&gt;を処理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/173&#34; target=&#34;_blank&#34;&gt;GitHub #173&lt;/a&gt; 管理共有メモリセグメントの値が整列されていない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; &lt;code&gt;managed_windows_shared_memory&lt;/code&gt;が破壊時にクラッシュ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; &lt;code&gt;char_wchar_holder&lt;/code&gt;の代入演算子で&lt;code&gt;m_is_wide&lt;/code&gt;が不足/誤用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;boost::interprocess::ipcdetail::sync_handles::obtain_mutex&lt;/code&gt;のバグ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/215&#34; target=&#34;_blank&#34;&gt;GitHub #215&lt;/a&gt; SPARC 32ビットでboost/interprocess/segment_managerのアラインメント問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; &lt;code&gt;managed_map_file&lt;/code&gt;の&lt;code&gt;find_or_construct&lt;/code&gt;がキャッシュアラインメントされたメモリを返さない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/230&#34; target=&#34;_blank&#34;&gt;GitHub #230&lt;/a&gt; MinGWで&lt;code&gt;interprocess::ipcdetail::intermodule_singleton&lt;/code&gt;が動作しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; &lt;code&gt;get_current_process_creation_time&lt;/code&gt;の浮動小数点の不正確さにより&lt;code&gt;intermodule_singleton&lt;/code&gt;の失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接的なシリアライズ&lt;/li&gt;
&lt;li&gt;Boost.JSON型のGDBプリティプリンタを追加&lt;/li&gt;
&lt;li&gt;構造体への変換で不明なキーを無視&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;の例外ラッピング動作を簡素化&lt;/li&gt;
&lt;li&gt;非推奨のinitializer listの動作を削除&lt;/li&gt;
&lt;li&gt;非推奨の型エイリアスを削除&lt;/li&gt;
&lt;li&gt;MinGW ARM64での正確な64ビット乗算を使用&lt;/li&gt;
&lt;li&gt;サイズの異なるタプルでの&lt;code&gt;parse_into&lt;/code&gt;の処理を修正&lt;/li&gt;
&lt;li&gt;シーケンスの許容サイズより大きな入力サイズをチェック&lt;/li&gt;
&lt;li&gt;GCC 14での&lt;code&gt;value_ref&lt;/code&gt;のセグメンテーション違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexical_cast&#34; id=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Integerへの依存性を削除し、コンパイル時間を短縮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Threadの同期プリミティブをC++標準ライブラリの同等物と置き換えた。これにより、マルチスレッドのパフォーマンスが向上する可能性があるが、ユーザー側での影響もある&lt;ul&gt;
&lt;li&gt;Boost.Threadのスレッド割り込み機能はサポートされなくなった。Boost.Logは、Boost.Threadによってスレッド割り込みを実装するために使用される &lt;code&gt;thread_interrupted&lt;/code&gt; 例外に対して特別な処理を行わなくなった。この例外は他の任意の例外と同様に扱われる&lt;ul&gt;
&lt;li&gt;とくに、ユーザー指定の例外ハンドラが &lt;code&gt;thread_interrupted&lt;/code&gt; のペンディング例外で呼び出されることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timed wait操作について、タイムアウトは現在&lt;code&gt;std::chrono&lt;/code&gt;の時間単位を使用している。これは、&lt;code&gt;bounded_ordering_queue&lt;/code&gt; クラスと &lt;code&gt;unbounded_ordering_queue&lt;/code&gt; クラスがサポートする &lt;code&gt;ordering_window&lt;/code&gt; という名前付きパラメータが、Boost.DateTimeの &lt;code&gt;boost::posix_time::time_duration&lt;/code&gt; ではなく &lt;code&gt;std::chrono::duration&lt;/code&gt; の値を期待することを意味している&lt;/li&gt;
&lt;li&gt;スレッド同期プリミティブによって示されるエラーの場合、Boost.Threadの例外型の代わりに &lt;code&gt;std::system_error&lt;/code&gt; 例外が送出される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strictest_lock&lt;/code&gt; にC++標準ライブラリのlock型のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;多数の特殊関数および分布が、CUDA（NVCCおよびNVRTC）およびSYCLをサポートするようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1163&#34; target=&#34;_blank&#34;&gt;GitHub #1163&lt;/a&gt; mapairy distribution、holtsmark distributionおよびsaspoint5 distributionを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1159&#34; target=&#34;_blank&#34;&gt;GitHub #1159&lt;/a&gt; landau distributionを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1169&#34; target=&#34;_blank&#34;&gt;GitHub #1169&lt;/a&gt; beta quantileにおける予期しない例外を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのバグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/56&#34; target=&#34;_blank&#34;&gt;Git Issue #56&lt;/a&gt; std型の前方宣言が、一部のプラットフォームでコンパイルエラーを引き起こす&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_lambda&lt;/code&gt;を追加（提供者：Joaquin M Lopez Munoz氏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float128&lt;/code&gt; をtrivially copyableにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt; を非GNUモードでも浮動小数点型とみなすよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;実験的なAPIへの破壊的変更&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;でのスレッドセーフティ機能が再設計され、ユーザーの経験によって見つかったいくつかの設計の欠陥を克服した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_safe&lt;/code&gt;という&lt;code&gt;bool&lt;/code&gt;オプションが&lt;code&gt;pool_params&lt;/code&gt;に追加され、デフォルトでは&lt;code&gt;false&lt;/code&gt;に設定されている。設定すると、一部のプール関数が挙動を変更して並行に安全に使用できるようになる。これは内部で&lt;code&gt;strand&lt;/code&gt;を作成し、必要なときにそれにディスパッチし、cancel signalを再配線することで機能する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_params::thread_safe&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合、通常のAsio executorのセマンティクスが適用され、オーバーヘッドはない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_executor_params&lt;/code&gt;は削除され、&lt;code&gt;pool_params::connection_executor&lt;/code&gt;と&lt;code&gt;pool_params::thread_safe&lt;/code&gt;に置き換えられた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool::async_get_connection&lt;/code&gt;の組み込みタイムアウト機能が完全に削除された。この関数は現在、個々の操作のキャンセルをサポートしており、同じ機能は&lt;code&gt;asio::cancel_after&lt;/code&gt;を使用することで達成できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の破棄をすると、ほかのAsio I/Oオブジェクトと同様に、未処理の非同期操作がキャンセルされる。これによりリソースのリークが防止される&lt;/li&gt;
&lt;li&gt;利用可能なコネクションがまだない状態で&lt;code&gt;async_get_connection&lt;/code&gt;操作がキャンセルされた場合、操作は現在、プールの状態に応じて一貫して&lt;code&gt;client_errc::pool_not_running&lt;/code&gt;、&lt;code&gt;client_errc::no_connection_available&lt;/code&gt;、または&lt;code&gt;client_errc::pool_cancelled&lt;/code&gt;で失敗する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_errc::timeout&lt;/code&gt;と&lt;code&gt;client_errc::cancelled&lt;/code&gt;が削除された&lt;/li&gt;
&lt;li&gt;プールが実行中でない状態で&lt;code&gt;async_get_connection&lt;/code&gt;を呼び出すとすぐには失敗せず、&lt;code&gt;async_run&lt;/code&gt;の呼び出しを待つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は所有型を返すようになった。これにより、&lt;code&gt;with_params&lt;/code&gt;と共に遅延非同期操作で使用することが安全になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は別のヘッダー、&lt;code&gt;boost/mysql/sequence.hpp&lt;/code&gt;に移動された&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;、クライアント側のSQLフォーマット（&lt;code&gt;format_sql&lt;/code&gt;および&lt;code&gt;with_params&lt;/code&gt;を含む）、および&lt;code&gt;connection_pool&lt;/code&gt;を安定したAPIに昇格させた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;とそのエイリアスである&lt;code&gt;tcp_connection&lt;/code&gt;、&lt;code&gt;tcp_ssl_connection&lt;/code&gt;、および&lt;code&gt;unix_connection&lt;/code&gt;の代わりに使用する新規コードとして、&lt;code&gt;any_connection&lt;/code&gt;が推奨される&lt;/li&gt;
&lt;li&gt;クエリテンプレート文字列とパラメータを包括する新しい &lt;code&gt;ExecutionRequest&lt;/code&gt; である &lt;code&gt;with_params&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics&lt;/code&gt;を追加した。これは同期的に例外を送出する関数の動作と一致するように、非同期関数によって送出される例外に &lt;code&gt;diagnostics&lt;/code&gt; オブジェクトを含むアダプタ完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics(asio::deferred)&lt;/code&gt;は現在、&lt;code&gt;any_connection&lt;/code&gt;と&lt;code&gt;connection_pool&lt;/code&gt;のすべての操作のデフォルトの完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の非同期関数は現在、操作ごとのキャンセルをサポートしている&lt;/li&gt;
&lt;li&gt;すべての非同期操作は現在、&lt;code&gt;asio::cancel_after&lt;/code&gt;、&lt;code&gt;asio::cancel_at&lt;/code&gt;および同様の完了トークンをサポートしている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;と&lt;code&gt;any_connection&lt;/code&gt;は現在、即時の完全性をトークンの即時エグゼキュータ (immediate executor) を介してディスパッチする&lt;/li&gt;
&lt;li&gt;以前に接続されていない&lt;code&gt;any_connection&lt;/code&gt;を使用しようとするとクラッシュする問題を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field&lt;/code&gt;の潜在的に例外送出可能なコンストラクタから間違った&lt;code&gt;noexcept&lt;/code&gt;指定子を削除した&lt;/li&gt;
&lt;li&gt;設定されたバッファサイズの制限を超える可能性があった書き込みバッファサイズの問題を修正した&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを大幅に更新し、新しい推奨されるベストプラクティスを反映させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/171&#34; target=&#34;_blank&#34;&gt;GitHub #171&lt;/a&gt; &lt;code&gt;boost::pfr::for_each_field_with_name&lt;/code&gt;関数が追加された (&lt;a href=&#34;https://github.com/Baduit&#34; target=&#34;_blank&#34;&gt;Lena&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/120&#34; target=&#34;_blank&#34;&gt;GitHub #120&lt;/a&gt; 大きなサイズと小さなフィールド数を持つ構造体のコンパイル時間が大幅に改善された (&lt;a href=&#34;https://github.com/runer112&#34; target=&#34;_blank&#34;&gt;Zachary Wassall&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;ディレクティブを修正&lt;/li&gt;
&lt;li&gt;C++20モジュールへの初期サポートを追加した。詳細はドキュメントを参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/pfr/pull/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; core_name14_disabled.hpp内の未使用変数の警告を修正 (&lt;a href=&#34;https://github.com/anarthal&#34; target=&#34;_blank&#34;&gt;Anarthal (Rubén Pérez)&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;C++17における集成体内のフィールド数のデフォルト制限を100から200に引き上げた&lt;/li&gt;
&lt;li&gt;GCCが&lt;code&gt;-Wundefined-var-template&lt;/code&gt;を認識していないことに関する警告を修正&lt;/li&gt;
&lt;li&gt;複数の軽微なコンパイル時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#process&#34; id=&#34;process&#34;&gt;Process&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(v2) Windowsでの&lt;code&gt;async_wait&lt;/code&gt;のキャンセルを実装した&lt;/li&gt;
&lt;li&gt;(v2) &lt;code&gt;FORCE_DISABLE_CLOSE_RANGE&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;(v2) ext: BSDおよびSolarisの複数のext修正&lt;/li&gt;
&lt;li&gt;(v2) 未使用の &lt;code&gt;ext&lt;/code&gt; 関数が現在コンパイルされ、 &lt;code&gt;operation_not_supported&lt;/code&gt; エラーが与えられるようになった（IOSを含む）&lt;/li&gt;
&lt;li&gt;(v2) 複数のリンクを修正&lt;/li&gt;
&lt;li&gt;(v2) リンクされたライブラリからfilesystemが削除された - 使用されるfilesystemライブラリの機能としては、ヘッダーファイルに実装があるもののみとなった&lt;/li&gt;
&lt;li&gt;(v1) 1.88に対する非推奨通知を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了し、C++11のコンパイラが必要となる。これにはGCC 4.8以降、またはMSVC 14.0以降が含まれる&lt;/li&gt;
&lt;li&gt;マクロ &lt;code&gt;BOOST_SP_ENABLE_DEBUG_HOOKS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_STD_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_QUICK_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_SPINLOCK&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_PTHREADS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_SPINLOCK&lt;/code&gt;、および&lt;code&gt;BOOST_SP_USE_PTHREADS&lt;/code&gt;により有効化される機能は非推奨となり、将来のリリースでそのサポートは削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;boost::stacktrace_from_exception&lt;/code&gt;のCMakeターゲットが追加された (&lt;a href=&#34;https://github.com/void-mian&#34; target=&#34;_blank&#34;&gt;int mian&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; MSVCでの静的ビルド時に&lt;code&gt;boost_stacktrace_impl_return_nullptr&lt;/code&gt;をエクスポートしないようにした (&lt;a href=&#34;https://github.com/huangqinjin&#34; target=&#34;_blank&#34;&gt;huangqinjin&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;Windows OSでclangを使用した際の、&lt;code&gt;ole32.lib&lt;/code&gt;と&lt;code&gt;Dbgeng.lib&lt;/code&gt;の自動リンクを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメントで欠落していた名前空間を修正した (&lt;a href=&#34;https://github.com/meastp&#34; target=&#34;_blank&#34;&gt;Mats Taraldsvik&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/178&#34; target=&#34;_blank&#34;&gt;GitHub #178&lt;/a&gt; &lt;code&gt;std::exception&lt;/code&gt; のインクルード不足を修正した (&lt;a href=&#34;https://github.com/jschueller&#34; target=&#34;_blank&#34;&gt;Julien Schueller&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/175&#34; target=&#34;_blank&#34;&gt;GitHub #175&lt;/a&gt; GCCが報告した型の変換エラーを修正した (&lt;a href=&#34;https://github.com/jplcz&#34; target=&#34;_blank&#34;&gt;agent_J&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; CLIからB2の&lt;code&gt;from_exception&lt;/code&gt;機能を使用できるようにした (&lt;a href=&#34;https://github.com/grisumbras]氏に感謝&#34; target=&#34;_blank&#34;&gt;Dmitry Arkhipov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stl_interfaces&#34; id=&#34;stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/71&#34; target=&#34;_blank&#34;&gt;GitHub #71&lt;/a&gt; シーケンスコンテナ &lt;code&gt;swap&lt;/code&gt; の誤って記録された要件を正しくした。期待される戻り値は &lt;code&gt;bool&lt;/code&gt; ではなく &lt;code&gt;void&lt;/code&gt; である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/65&#34; target=&#34;_blank&#34;&gt;GitHub #65&lt;/a&gt; &lt;code&gt;view_adaptor.hpp&lt;/code&gt;のアダプターのデータメンバーに &lt;code&gt;[[no_unique_address]]&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; ClangとMSVCの最近のバージョンで &lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt; を介してサポートをアドバタイズしていない &lt;code&gt;this&lt;/code&gt; の推論を可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/348&#34; target=&#34;_blank&#34;&gt;GitHub #348&lt;/a&gt; ダミー条件に対するclang tidyのサポートを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/431&#34; target=&#34;_blank&#34;&gt;GitHub #431&lt;/a&gt; clangでの動的リンクを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;並行ノードベースコンテナ &lt;code&gt;boost::concurrent_node_map&lt;/code&gt; と &lt;code&gt;boost::concurrent_node_set&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;並行コンテナに &lt;code&gt;insert_and_visit(x, f1, f2)&lt;/code&gt; および類似の操作を追加した。これは、挿入直後に要素を訪問することを可能にする（対照的に、 &lt;code&gt;insert_or_visit(x, f)&lt;/code&gt; は、挿入が行われなかった場合にのみ要素を訪問する）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/265&#34; target=&#34;_blank&#34;&gt;GitHub #265&lt;/a&gt; 要素の安全な可変変更を可能にするため、特定の &lt;code&gt;boost::concurrent_flat_set&lt;/code&gt; 操作内で訪問を排他的にロック&lt;/li&gt;
&lt;li&gt;Visual Studio Natvisでは、任意のファンシーなポインタ型をサポートした。このことは、適切なNatvisカスタマイズポイント &#34;Intrinsic&#34; 関数がファンシーポインタ型自体に対して書かれている限り、任意のファンシーポインタ型に適用できる&lt;/li&gt;
&lt;li&gt;すべてのコンテナとイテレータにGDBのプリティプリンタが追加されました。ファンシーポインタを使用するアロケータを持つコンテナに対しては、ファンシーポインタ型そのものに対して適切なプリティプリンタが書かれている場合にのみ、これらは機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/277&#34; target=&#34;_blank&#34;&gt;GitHub #277&lt;/a&gt; オープンアドレッシングコンテナに対する &lt;code&gt;std::initializer_list&lt;/code&gt; への代入の問題を修正した&lt;/li&gt;
&lt;li&gt;接続コンテナの &lt;code&gt;std::initializer_list&lt;/code&gt; オーバーロードの &lt;code&gt;insert_{and|or}_[c]visit&lt;/code&gt; にコピー不可能なコールバックを渡すことができるようにした。これは内部的にコールバックの &lt;code&gt;std::reference_wrapper&lt;/code&gt; をイテレーターペアのオーバーロードに渡す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/856&#34; target=&#34;_blank&#34;&gt;GitHub #856&lt;/a&gt; 機能追加: &lt;code&gt;set_params&lt;/code&gt;が&lt;code&gt;encoding_opts&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/857&#34; target=&#34;_blank&#34;&gt;GitHub #857&lt;/a&gt; リファクタリング: APIから非推奨のvariant2エイリアスを除外&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/864&#34; target=&#34;_blank&#34;&gt;GitHub #864&lt;/a&gt; リファクタリング: &lt;code&gt;query_rule&lt;/code&gt;に一貫した解釈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.86で間違って削除した &lt;code&gt;constexpr uuid&lt;/code&gt; を構築する機能を復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt;：C++20と空の文字列化パラメータでのセグメンテーション違反を修正 (&lt;a href=&#34;https://github.com/jwnhy&#34; target=&#34;_blank&#34;&gt;Lu HongYi&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/222&#34; target=&#34;_blank&#34;&gt;GitHub #222&lt;/a&gt;：含まれるファイルの最初の行が空白の場合に行ディレクティブがない問題を修正 (&lt;a href=&#34;https://github.com/njnobles&#34; target=&#34;_blank&#34;&gt;Nick Nobles&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ビルドの改善（モジュールビルドのサポートを含む) (&lt;a href=&#34;https://github.com/grafikrobot&#34; target=&#34;_blank&#34;&gt;René Rivera&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.87.0リリースノート -- 1.87.0 : 目次を作成</title>
      <link href="https://boostjp.github.io/document/version/1_87_0.html"/>
      <id>c2e39928785f3c8246e00920d4297c4738ee70eb:document/version/1_87_0.md</id>
      <updated>2024-12-06T23:05:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.87.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_87_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_87_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/parser&#34; target=&#34;_blank&#34;&gt;Parser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;パーサー構築のフレームワーク。作者Zach Laine氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#process&#34;&gt;Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;byte spanとそのシーケンスを、バッファシーケンスとして使用できるサポートを追加。これにより、&lt;code&gt;async_read&lt;/code&gt;などのI/O操作に直接渡すことができる&lt;/li&gt;
&lt;li&gt;非同期操作がエラーなしで完了したかどうかをテストできるgeneric dispositionのサポートを追加。これには&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;exception_ptr&lt;/code&gt;が含まれるが、&lt;code&gt;disposition_traits&lt;/code&gt;クラステンプレートの特殊化によってユーザー定義の型に拡張できる。標準型の&lt;code&gt;std::error_code&lt;/code&gt;と&lt;code&gt;std::exception_ptr&lt;/code&gt;がディスポジションとして認識される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::use_future&lt;/code&gt;完了トークン、&lt;code&gt;boost::asio::awaitable&amp;lt;&amp;gt;&lt;/code&gt;ベースのコルーチン、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;、&lt;code&gt;boost::asio::experimental::cancellation_condition&lt;/code&gt;にディスポジションサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution_context::service_maker&lt;/code&gt;抽象基底クラスを追加。&lt;code&gt;service_maker&lt;/code&gt;はexecution contextのコンストラクタに渡されるオブジェクトで、コンテキスト構築時にサービスを追加できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::config&lt;/code&gt;を追加。execution contextに関連する設定パラメータにアクセスできる。このクラスはAsioの内部、またはAsioの上に構築されるライブラリやユーザー提供の抽象化での使用を意図しており、特定の最適化の有効化/無効化などの動作を微調整するために使用される。&lt;code&gt;boost::asio::config_from_env&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_concurrency_hint&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_string&lt;/code&gt;などの具体的な設定ソースを&lt;code&gt;io_context&lt;/code&gt;または&lt;code&gt;thread_pool&lt;/code&gt;のコンストラクタに渡すことができる&lt;/li&gt;
&lt;li&gt;Asioの&lt;code&gt;io_context&lt;/code&gt;と&lt;code&gt;thread_pool&lt;/code&gt;実装で認識される初期設定パラメータセットを追加&lt;/li&gt;
&lt;li&gt;以前に非推奨だった機能をいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object&lt;/code&gt;と&lt;code&gt;deadline_timer&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;associating binderに右辺値修飾の&lt;code&gt;operator()&lt;/code&gt;オーバーロードを追加。&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;ムーブ専用型を返す関数の&lt;code&gt;spawn()&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;コンセプトサポートを必要としないよう&lt;code&gt;co_composed&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;epollリアクターがfork後に通常のfile descriptorを再登録しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::detail::engine&lt;/code&gt;ムーブ代入のリークを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING&lt;/code&gt;が定義されている場合のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;Clang 19を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool::join()&lt;/code&gt;を変更し、&lt;code&gt;thread_pool::attach()&lt;/code&gt;で後に追加されるスレッドを確実に停止するようにした&lt;/li&gt;
&lt;li&gt;ストリーム指向操作で使用される&lt;code&gt;io_uring_prep_write_fixed&lt;/code&gt;と&lt;code&gt;io_uring_prep_read_fixed&lt;/code&gt;に渡されるオフセットを修正&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; アトミック待機状態リストのメモリ再確保時の初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APIの変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_fields::insert()&lt;/code&gt;に&lt;code&gt;error_code&lt;/code&gt;オーバーロードを追加&lt;/li&gt;
&lt;li&gt;permessage-deflateの状態を照会するための&lt;code&gt;websocket::stream::get_status&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;タイムアウト時に&lt;code&gt;bad_executor&lt;/code&gt;例外を引き起こす&lt;code&gt;http::basic_stream&lt;/code&gt;内の&lt;code&gt;net::dispatch&lt;/code&gt;呼び出しでのムーブ後使用を修正&lt;/li&gt;
&lt;li&gt;初期化関数内の変更操作を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teardown_tcp_op&lt;/code&gt;でのキャンセル処理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_finish_impl&lt;/code&gt;を呼び出す前に&lt;code&gt;basic_parser&lt;/code&gt;の&lt;code&gt;state_&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;関数から&lt;code&gt;static&lt;/code&gt;指定子を削除&lt;/li&gt;
&lt;li&gt;テストでの&lt;code&gt;-Wattributes&lt;/code&gt;警告に対処&lt;/li&gt;
&lt;li&gt;テストでの到達不能コード警告に対処&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beast::http&lt;/code&gt;名前空間の型の前方宣言ヘッダーを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::parser&lt;/code&gt;が&lt;code&gt;error_code&lt;/code&gt;オーバーロードを使用した&lt;code&gt;basic_fields::insert()&lt;/code&gt;を使用できるよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;に&lt;code&gt;header_limit_&lt;/code&gt;をトレーラーヘッダーに適用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;が&lt;code&gt;http::error::header_limit&lt;/code&gt;をより早く返すように改善&lt;/li&gt;
&lt;li&gt;モジュラーBoostビルド構造のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Jackarain, Saleh Hatefinya, René Ferdinand Rivera Morell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#charconv&#34; id=&#34;charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__ibm128&lt;/code&gt;をlong double formatとして使用するPPC64LE アーキテクチャのサポートを修正&lt;/li&gt;
&lt;li&gt;Windows ARM64プラットフォームでの組み込み関数の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::float128_t&lt;/code&gt;または&lt;code&gt;__float128&lt;/code&gt;を使用した固定小数点の指定精度でのフォーマットを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cobalt&#34; id=&#34;cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_executor&lt;/code&gt;で定数参照を返す要件を削除&lt;/li&gt;
&lt;li&gt;実験的/構成を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_array.hpp&lt;/code&gt;を追加（Ruben Perez Hidalgo氏の貢献）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;と&lt;code&gt;small_vector&lt;/code&gt;に&lt;code&gt;stored_size&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;バグ/問題を修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/261&#34; target=&#34;_blank&#34;&gt;GitHub #261&lt;/a&gt; 終端イテレータは参照できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;small_vectorで&lt;/code&gt;flat_map::extract_sequence`を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.84.0で発表されたように、Windows 10より前のバージョンはサポートされなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/325&#34; target=&#34;_blank&#34;&gt;GitHub #325&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;が&lt;code&gt;GetFinalPathNameByHandleW&lt;/code&gt; WinAPI関数に基づくようになった。副次的効果として、ドライブ文字は大文字に変換され、結果のパスの相互運用性が向上した&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;canonical&lt;/code&gt;は、入力パスに末尾のディレクトリ区切り文字 (trailing directory separator)がある場合でも、結果のパスに末尾のディレクトリ区切り文字を生成しなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/326&#34; target=&#34;_blank&#34;&gt;GitHub #326&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;コンストラクタまたはメンバ関数が、&lt;code&gt;path&lt;/code&gt;に変換可能なユーザー定義型の引数と1つ以上の&lt;code&gt;Source&lt;/code&gt;型で呼び出された場合、デフォルトで&lt;code&gt;path&lt;/code&gt;への変換が選択されるようになった。これにより一部の引数変換のあいまいさが解消される可能性があるが、変換パスが最適でない場合もある。異なる変換パスが必要な場合、ユーザーには明示的な型キャストの使用を推奨される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/328&#34; target=&#34;_blank&#34;&gt;GitHub #328&lt;/a&gt; FreeBSD 9以前の&lt;code&gt;dirfd&lt;/code&gt;がマクロである場合の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドシナリオで優れたパフォーマンスを提供する、Boost.Unorderedの並行コンテナに基づく&lt;code&gt;concurrent_factory&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; 以前に例外送出しないとドキュメントに記載されていた&lt;code&gt;boost::flyweight&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を付与&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;コードの一部で&lt;code&gt;typedef&lt;/code&gt;の代わりに&lt;code&gt;using&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;コードの一部でエイリアスを使用してメタ関数を現代化&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;CMakeカバレッジの完全化（GitHub Actionsのcmakeテストを追加）&lt;/li&gt;
&lt;li&gt;ドキュメントワークフローの改善&lt;/li&gt;
&lt;li&gt;QtとWxWidgetsの例を更新&lt;/li&gt;
&lt;li&gt;C++17と23に備えて列挙を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重大な変更&lt;ul&gt;
&lt;li&gt;非推奨のリスケーリングコードを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1309&#34; target=&#34;_blank&#34;&gt;GitHub #1309&lt;/a&gt; 一部のqbkインクルードの不足を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1226&#34; target=&#34;_blank&#34;&gt;GitHub #1226&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1326&#34; target=&#34;_blank&#34;&gt;GitHub #1326&lt;/a&gt; ringに対するextra roundを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1293&#34; target=&#34;_blank&#34;&gt;GitHub #1293&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1294&#34; target=&#34;_blank&#34;&gt;GitHub #1294&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1295&#34; target=&#34;_blank&#34;&gt;GitHub #1295&lt;/a&gt; クラスター化されていないリングを通過する処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/893&#34; target=&#34;_blank&#34;&gt;GitHub #893&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1299&#34; target=&#34;_blank&#34;&gt;GitHub #1299&lt;/a&gt; 和演算の条件でのブロッキングリングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1342&#34; target=&#34;_blank&#34;&gt;GitHub #1342&lt;/a&gt; touchとの組み合わせでのstart turnを破棄を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1288&#34; target=&#34;_blank&#34;&gt;GitHub #1288&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1345&#34; target=&#34;_blank&#34;&gt;GitHub #1345&lt;/a&gt; （不完全な）touchの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1279&#34; target=&#34;_blank&#34;&gt;GitHub #1279&lt;/a&gt; &lt;code&gt;covered_by&lt;/code&gt;の不正確な結果を修正&lt;/li&gt;
&lt;li&gt;エラーと警告の各種修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/issues/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; &lt;code&gt;function_output_iterator&lt;/code&gt;が&lt;code&gt;std::output_iterator&lt;/code&gt;コンセプトに準拠するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boostの依存関係を11から7に削減。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/containers/*.hpp&amp;gt;&lt;/code&gt;ヘッダーを非推奨にした。2011年にはBoost.Containerの元ソースを参照していたが、現在はメンテナンスされていない。長期的な移行として、Boost.Interprocessはこれらのヘッダーを互換性のために維持してきた。将来のBoostリリースで削除される&lt;/li&gt;
&lt;li&gt;Cygwinのいくつかの回避策を追加。リグレッションテストがCygwin64で動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ABI破壊的変更&lt;/strong&gt;: &lt;code&gt;segment_manager&lt;/code&gt;が、オーバーアラインされた型をサポートし、既存のバグを修正する新しい実装を使用。Boost 1.87より前のABIを取得するには、Boost.Interprocessヘッダーをインクルードする前に&lt;code&gt;BOOST_INTERPROCESS_SEGMENT_MANAGER_ABI&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;として定義すること&lt;/li&gt;
&lt;li&gt;バグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; &lt;code&gt;shared_memory_object&lt;/code&gt;で&lt;code&gt;EINTR&lt;/code&gt;を処理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/173&#34; target=&#34;_blank&#34;&gt;GitHub #173&lt;/a&gt; 管理共有メモリセグメントの値が整列されていない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; &lt;code&gt;managed_windows_shared_memory&lt;/code&gt;が破壊時にクラッシュ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; &lt;code&gt;char_wchar_holder&lt;/code&gt;の代入演算子で&lt;code&gt;m_is_wide&lt;/code&gt;が不足/誤用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;boost::interprocess::ipcdetail::sync_handles::obtain_mutex&lt;/code&gt;のバグ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/215&#34; target=&#34;_blank&#34;&gt;GitHub #215&lt;/a&gt; SPARC 32ビットでboost/interprocess/segment_managerのアラインメント問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; &lt;code&gt;managed_map_file&lt;/code&gt;の&lt;code&gt;find_or_construct&lt;/code&gt;がキャッシュアラインメントされたメモリを返さない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/230&#34; target=&#34;_blank&#34;&gt;GitHub #230&lt;/a&gt; MinGWで&lt;code&gt;interprocess::ipcdetail::intermodule_singleton&lt;/code&gt;が動作しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; &lt;code&gt;get_current_process_creation_time&lt;/code&gt;の浮動小数点の不正確さにより&lt;code&gt;intermodule_singleton&lt;/code&gt;の失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接的なシリアライズ&lt;/li&gt;
&lt;li&gt;Boost.JSON型のGDBプリティプリンタを追加&lt;/li&gt;
&lt;li&gt;構造体への変換で不明なキーを無視&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;の例外ラッピング動作を簡素化&lt;/li&gt;
&lt;li&gt;非推奨のinitializer listの動作を削除&lt;/li&gt;
&lt;li&gt;非推奨の型エイリアスを削除&lt;/li&gt;
&lt;li&gt;MinGW ARM64での正確な64ビット乗算を使用&lt;/li&gt;
&lt;li&gt;サイズの異なるタプルでの&lt;code&gt;parse_into&lt;/code&gt;の処理を修正&lt;/li&gt;
&lt;li&gt;シーケンスの許容サイズより大きな入力サイズをチェック&lt;/li&gt;
&lt;li&gt;GCC 14での&lt;code&gt;value_ref&lt;/code&gt;のセグメンテーション違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexical_cast&#34; id=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Integerへの依存性を削除し、コンパイル時間を短縮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Threadの同期プリミティブをC++標準ライブラリの同等物と置き換えた。これにより、マルチスレッドのパフォーマンスが向上する可能性があるが、ユーザー側での影響もある&lt;ul&gt;
&lt;li&gt;Boost.Threadのスレッド割り込み機能はサポートされなくなった。Boost.Logは、Boost.Threadによってスレッド割り込みを実装するために使用される &lt;code&gt;thread_interrupted&lt;/code&gt; 例外に対して特別な処理を行わなくなった。この例外は他の任意の例外と同様に扱われる&lt;ul&gt;
&lt;li&gt;とくに、ユーザー指定の例外ハンドラが &lt;code&gt;thread_interrupted&lt;/code&gt; のペンディング例外で呼び出されることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timed wait操作について、タイムアウトは現在&lt;code&gt;std::chrono&lt;/code&gt;の時間単位を使用している。これは、&lt;code&gt;bounded_ordering_queue&lt;/code&gt; クラスと &lt;code&gt;unbounded_ordering_queue&lt;/code&gt; クラスがサポートする &lt;code&gt;ordering_window&lt;/code&gt; という名前付きパラメータが、Boost.DateTimeの &lt;code&gt;boost::posix_time::time_duration&lt;/code&gt; ではなく &lt;code&gt;std::chrono::duration&lt;/code&gt; の値を期待することを意味している&lt;/li&gt;
&lt;li&gt;スレッド同期プリミティブによって示されるエラーの場合、Boost.Threadの例外型の代わりに &lt;code&gt;std::system_error&lt;/code&gt; 例外が送出される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strictest_lock&lt;/code&gt; にC++標準ライブラリのlock型のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;多数の特殊関数および分布が、CUDA（NVCCおよびNVRTC）およびSYCLをサポートするようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1163&#34; target=&#34;_blank&#34;&gt;GitHub #1163&lt;/a&gt; mapairy distribution、holtsmark distributionおよびsaspoint5 distributionを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1159&#34; target=&#34;_blank&#34;&gt;GitHub #1159&lt;/a&gt; landau distributionを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1169&#34; target=&#34;_blank&#34;&gt;GitHub #1169&lt;/a&gt; beta quantileにおける予期しない例外を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのバグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/56&#34; target=&#34;_blank&#34;&gt;Git Issue #56&lt;/a&gt; std型の前方宣言が、一部のプラットフォームでコンパイルエラーを引き起こす&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_lambda&lt;/code&gt;を追加（提供者：Joaquin M Lopez Munoz氏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float128&lt;/code&gt; をtrivially copyableにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt; を非GNUモードでも浮動小数点型とみなすよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;実験的なAPIへの破壊的変更&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;でのスレッドセーフティ機能が再設計され、ユーザーの経験によって見つかったいくつかの設計の欠陥を克服した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_safe&lt;/code&gt;という&lt;code&gt;bool&lt;/code&gt;オプションが&lt;code&gt;pool_params&lt;/code&gt;に追加され、デフォルトでは&lt;code&gt;false&lt;/code&gt;に設定されている。設定すると、一部のプール関数が挙動を変更して並行に安全に使用できるようになる。これは内部で&lt;code&gt;strand&lt;/code&gt;を作成し、必要なときにそれにディスパッチし、cancel signalを再配線することで機能する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_params::thread_safe&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合、通常のAsio executorのセマンティクスが適用され、オーバーヘッドはない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_executor_params&lt;/code&gt;は削除され、&lt;code&gt;pool_params::connection_executor&lt;/code&gt;と&lt;code&gt;pool_params::thread_safe&lt;/code&gt;に置き換えられた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool::async_get_connection&lt;/code&gt;の組み込みタイムアウト機能が完全に削除された。この関数は現在、個々の操作のキャンセルをサポートしており、同じ機能は&lt;code&gt;asio::cancel_after&lt;/code&gt;を使用することで達成できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の破棄をすると、ほかのAsio I/Oオブジェクトと同様に、未処理の非同期操作がキャンセルされる。これによりリソースのリークが防止される&lt;/li&gt;
&lt;li&gt;利用可能なコネクションがまだない状態で&lt;code&gt;async_get_connection&lt;/code&gt;操作がキャンセルされた場合、操作は現在、プールの状態に応じて一貫して&lt;code&gt;client_errc::pool_not_running&lt;/code&gt;、&lt;code&gt;client_errc::no_connection_available&lt;/code&gt;、または&lt;code&gt;client_errc::pool_cancelled&lt;/code&gt;で失敗する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_errc::timeout&lt;/code&gt;と&lt;code&gt;client_errc::cancelled&lt;/code&gt;が削除された&lt;/li&gt;
&lt;li&gt;プールが実行中でない状態で&lt;code&gt;async_get_connection&lt;/code&gt;を呼び出すとすぐには失敗せず、&lt;code&gt;async_run&lt;/code&gt;の呼び出しを待つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は所有型を返すようになった。これにより、&lt;code&gt;with_params&lt;/code&gt;と共に遅延非同期操作で使用することが安全になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は別のヘッダー、&lt;code&gt;boost/mysql/sequence.hpp&lt;/code&gt;に移動された&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;、クライアント側のSQLフォーマット（&lt;code&gt;format_sql&lt;/code&gt;および&lt;code&gt;with_params&lt;/code&gt;を含む）、および&lt;code&gt;connection_pool&lt;/code&gt;を安定したAPIに昇格させた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;とそのエイリアスである&lt;code&gt;tcp_connection&lt;/code&gt;、&lt;code&gt;tcp_ssl_connection&lt;/code&gt;、および&lt;code&gt;unix_connection&lt;/code&gt;の代わりに使用する新規コードとして、&lt;code&gt;any_connection&lt;/code&gt;が推奨される&lt;/li&gt;
&lt;li&gt;クエリテンプレート文字列とパラメータを包括する新しい &lt;code&gt;ExecutionRequest&lt;/code&gt; である &lt;code&gt;with_params&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics&lt;/code&gt;を追加した。これは同期的に例外を送出する関数の動作と一致するように、非同期関数によって送出される例外に &lt;code&gt;diagnostics&lt;/code&gt; オブジェクトを含むアダプタ完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics(asio::deferred)&lt;/code&gt;は現在、&lt;code&gt;any_connection&lt;/code&gt;と&lt;code&gt;connection_pool&lt;/code&gt;のすべての操作のデフォルトの完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の非同期関数は現在、操作ごとのキャンセルをサポートしている&lt;/li&gt;
&lt;li&gt;すべての非同期操作は現在、&lt;code&gt;asio::cancel_after&lt;/code&gt;、&lt;code&gt;asio::cancel_at&lt;/code&gt;および同様の完了トークンをサポートしている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;と&lt;code&gt;any_connection&lt;/code&gt;は現在、即時の完全性をトークンの即時エグゼキュータ (immediate executor) を介してディスパッチする&lt;/li&gt;
&lt;li&gt;以前に接続されていない&lt;code&gt;any_connection&lt;/code&gt;を使用しようとするとクラッシュする問題を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field&lt;/code&gt;の潜在的に例外送出可能なコンストラクタから間違った&lt;code&gt;noexcept&lt;/code&gt;指定子を削除した&lt;/li&gt;
&lt;li&gt;設定されたバッファサイズの制限を超える可能性があった書き込みバッファサイズの問題を修正した&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを大幅に更新し、新しい推奨されるベストプラクティスを反映させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/171&#34; target=&#34;_blank&#34;&gt;GitHub #171&lt;/a&gt; &lt;code&gt;boost::pfr::for_each_field_with_name&lt;/code&gt;関数が追加された (&lt;a href=&#34;https://github.com/Baduit&#34; target=&#34;_blank&#34;&gt;Lena&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/120&#34; target=&#34;_blank&#34;&gt;GitHub #120&lt;/a&gt; 大きなサイズと小さなフィールド数を持つ構造体のコンパイル時間が大幅に改善された (&lt;a href=&#34;https://github.com/runer112&#34; target=&#34;_blank&#34;&gt;Zachary Wassall&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;ディレクティブを修正&lt;/li&gt;
&lt;li&gt;C++20モジュールへの初期サポートを追加した。詳細はドキュメントを参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/pfr/pull/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; core_name14_disabled.hpp内の未使用変数の警告を修正 (&lt;a href=&#34;https://github.com/anarthal&#34; target=&#34;_blank&#34;&gt;Anarthal (Rubén Pérez)&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;C++17における集成体内のフィールド数のデフォルト制限を100から200に引き上げた&lt;/li&gt;
&lt;li&gt;GCCが&lt;code&gt;-Wundefined-var-template&lt;/code&gt;を認識していないことに関する警告を修正&lt;/li&gt;
&lt;li&gt;複数の軽微なコンパイル時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#process&#34; id=&#34;process&#34;&gt;Process&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(v2) Windowsでの&lt;code&gt;async_wait&lt;/code&gt;のキャンセルを実装した&lt;/li&gt;
&lt;li&gt;(v2) &lt;code&gt;FORCE_DISABLE_CLOSE_RANGE&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;(v2) ext: BSDおよびSolarisの複数のext修正&lt;/li&gt;
&lt;li&gt;(v2) 未使用の &lt;code&gt;ext&lt;/code&gt; 関数が現在コンパイルされ、 &lt;code&gt;operation_not_supported&lt;/code&gt; エラーが与えられるようになった（IOSを含む）&lt;/li&gt;
&lt;li&gt;(v2) 複数のリンクを修正&lt;/li&gt;
&lt;li&gt;(v2) リンクされたライブラリからfilesystemが削除された - 使用されるfilesystemライブラリの機能としては、ヘッダーファイルに実装があるもののみとなった&lt;/li&gt;
&lt;li&gt;(v1) 1.88に対する非推奨通知を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了し、C++11のコンパイラが必要となる。これにはGCC 4.8以降、またはMSVC 14.0以降が含まれる&lt;/li&gt;
&lt;li&gt;マクロ &lt;code&gt;BOOST_SP_ENABLE_DEBUG_HOOKS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_STD_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_QUICK_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_SPINLOCK&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_PTHREADS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_SPINLOCK&lt;/code&gt;、および&lt;code&gt;BOOST_SP_USE_PTHREADS&lt;/code&gt;により有効化される機能は非推奨となり、将来のリリースでそのサポートは削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;boost::stacktrace_from_exception&lt;/code&gt;のCMakeターゲットが追加された (&lt;a href=&#34;https://github.com/void-mian&#34; target=&#34;_blank&#34;&gt;int mian&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; MSVCでの静的ビルド時に&lt;code&gt;boost_stacktrace_impl_return_nullptr&lt;/code&gt;をエクスポートしないようにした (&lt;a href=&#34;https://github.com/huangqinjin&#34; target=&#34;_blank&#34;&gt;huangqinjin&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;Windows OSでclangを使用した際の、&lt;code&gt;ole32.lib&lt;/code&gt;と&lt;code&gt;Dbgeng.lib&lt;/code&gt;の自動リンクを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメントで欠落していた名前空間を修正した (&lt;a href=&#34;https://github.com/meastp&#34; target=&#34;_blank&#34;&gt;Mats Taraldsvik&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/178&#34; target=&#34;_blank&#34;&gt;GitHub #178&lt;/a&gt; &lt;code&gt;std::exception&lt;/code&gt; のインクルード不足を修正した (&lt;a href=&#34;https://github.com/jschueller&#34; target=&#34;_blank&#34;&gt;Julien Schueller&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/175&#34; target=&#34;_blank&#34;&gt;GitHub #175&lt;/a&gt; GCCが報告した型の変換エラーを修正した (&lt;a href=&#34;https://github.com/jplcz&#34; target=&#34;_blank&#34;&gt;agent_J&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stl_interfaces&#34; id=&#34;stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/71&#34; target=&#34;_blank&#34;&gt;GitHub #71&lt;/a&gt; シーケンスコンテナ &lt;code&gt;swap&lt;/code&gt; の誤って記録された要件を正しくした。期待される戻り値は &lt;code&gt;bool&lt;/code&gt; ではなく &lt;code&gt;void&lt;/code&gt; である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/65&#34; target=&#34;_blank&#34;&gt;GitHub #65&lt;/a&gt; &lt;code&gt;view_adaptor.hpp&lt;/code&gt;のアダプターのデータメンバーに &lt;code&gt;[[no_unique_address]]&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; ClangとMSVCの最近のバージョンで &lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt; を介してサポートをアドバタイズしていない &lt;code&gt;this&lt;/code&gt; の推論を可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/348&#34; target=&#34;_blank&#34;&gt;GitHub #348&lt;/a&gt; ダミー条件に対するclang tidyのサポートを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/431&#34; target=&#34;_blank&#34;&gt;GitHub #431&lt;/a&gt; clangでの動的リンクを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;並行ノードベースコンテナ &lt;code&gt;boost::concurrent_node_map&lt;/code&gt; と &lt;code&gt;boost::concurrent_node_set&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;並行コンテナに &lt;code&gt;insert_and_visit(x, f1, f2)&lt;/code&gt; および類似の操作を追加した。これは、挿入直後に要素を訪問することを可能にする（対照的に、 &lt;code&gt;insert_or_visit(x, f)&lt;/code&gt; は、挿入が行われなかった場合にのみ要素を訪問する）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/265&#34; target=&#34;_blank&#34;&gt;GitHub #265&lt;/a&gt; 要素の安全な可変変更を可能にするため、特定の &lt;code&gt;boost::concurrent_flat_set&lt;/code&gt; 操作内で訪問を排他的にロック&lt;/li&gt;
&lt;li&gt;Visual Studio Natvisでは、任意のファンシーなポインタ型をサポートした。このことは、適切なNatvisカスタマイズポイント &#34;Intrinsic&#34; 関数がファンシーポインタ型自体に対して書かれている限り、任意のファンシーポインタ型に適用できる&lt;/li&gt;
&lt;li&gt;すべてのコンテナとイテレータにGDBのプリティプリンタが追加されました。ファンシーポインタを使用するアロケータを持つコンテナに対しては、ファンシーポインタ型そのものに対して適切なプリティプリンタが書かれている場合にのみ、これらは機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/277&#34; target=&#34;_blank&#34;&gt;GitHub #277&lt;/a&gt; オープンアドレッシングコンテナに対する &lt;code&gt;std::initializer_list&lt;/code&gt; への代入の問題を修正した&lt;/li&gt;
&lt;li&gt;接続コンテナの &lt;code&gt;std::initializer_list&lt;/code&gt; オーバーロードの &lt;code&gt;insert_{and|or}_[c]visit&lt;/code&gt; にコピー不可能なコールバックを渡すことができるようにした。これは内部的にコールバックの &lt;code&gt;std::reference_wrapper&lt;/code&gt; をイテレーターペアのオーバーロードに渡す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/856&#34; target=&#34;_blank&#34;&gt;GitHub #856&lt;/a&gt; 機能追加: &lt;code&gt;set_params&lt;/code&gt;が&lt;code&gt;encoding_opts&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/857&#34; target=&#34;_blank&#34;&gt;GitHub #857&lt;/a&gt; リファクタリング: APIから非推奨のvariant2エイリアスを除外&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/864&#34; target=&#34;_blank&#34;&gt;GitHub #864&lt;/a&gt; リファクタリング: &lt;code&gt;query_rule&lt;/code&gt;に一貫した解釈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.86で間違って削除した &lt;code&gt;constexpr uuid&lt;/code&gt; を構築する機能を復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt;：C++20と空の文字列化パラメータでのセグメンテーション違反を修正 (&lt;a href=&#34;https://github.com/jwnhy&#34; target=&#34;_blank&#34;&gt;Lu HongYi&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/222&#34; target=&#34;_blank&#34;&gt;GitHub #222&lt;/a&gt;：含まれるファイルの最初の行が空白の場合に行ディレクティブがない問題を修正 (&lt;a href=&#34;https://github.com/njnobles&#34; target=&#34;_blank&#34;&gt;Nick Nobles&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ビルドの改善（モジュールビルドのサポートを含む) (&lt;a href=&#34;https://github.com/grafikrobot&#34; target=&#34;_blank&#34;&gt;René Rivera&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リリースノート -- 1.87.0のリリースノートを追加。Asioまで</title>
      <link href="https://boostjp.github.io/document/version.html"/>
      <id>22d5473ff3d0b0df6cd4d45d53ac305402b18999:document/version.md</id>
      <updated>2024-12-06T19:32:32+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、Boostの各バージョンのリリースノートを翻訳、情報補完したドキュメントです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;version/template.html&#34;&gt;雛形ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;version/1_87_0.html&#34;&gt;1.87.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_86_0.html&#34;&gt;1.86.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_85_0.html&#34;&gt;1.85.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_84_0.html&#34;&gt;1.84.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_83_0.html&#34;&gt;1.83.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_82_0.html&#34;&gt;1.82.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_81_0.html&#34;&gt;1.81.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_80_0.html&#34;&gt;1.80.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_79_0.html&#34;&gt;1.79.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_78_0.html&#34;&gt;1.78.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_77_0.html&#34;&gt;1.77.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_76_0.html&#34;&gt;1.76.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_75_0.html&#34;&gt;1.75.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_74_0.html&#34;&gt;1.74.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_73_0.html&#34;&gt;1.73.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_72_0.html&#34;&gt;1.72.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_71_0.html&#34;&gt;1.71.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_70_0.html&#34;&gt;1.70.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_69_0.html&#34;&gt;1.69.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_68_0.html&#34;&gt;1.68.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_67_0.html&#34;&gt;1.67.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_66_0.html&#34;&gt;1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_65_1.html&#34;&gt;1.65.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_65_0.html&#34;&gt;1.65.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_64_0.html&#34;&gt;1.64.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_63_0.html&#34;&gt;1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_62_0.html&#34;&gt;1.62.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_61_0.html&#34;&gt;1.61.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_60_0.html&#34;&gt;1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_59_0.html&#34;&gt;1.59.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_58_0.html&#34;&gt;1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_57_0.html&#34;&gt;1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_56_0.html&#34;&gt;1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_55_0.html&#34;&gt;1.55.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_54_0.html&#34;&gt;1.54.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_53_0.html&#34;&gt;1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_52_0.html&#34;&gt;1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_51_0.html&#34;&gt;1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_50_0.html&#34;&gt;1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_49_0.html&#34;&gt;1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_48_0.html&#34;&gt;1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_47_0.html&#34;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_46_1.html&#34;&gt;1.46.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_46_0.html&#34;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;version/1_45_0.html&#34;&gt;1.45.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.87.0リリースノート -- 1.87.0のリリースノートを追加。Asioまで</title>
      <link href="https://boostjp.github.io/document/version/1_87_0.html"/>
      <id>22d5473ff3d0b0df6cd4d45d53ac305402b18999:document/version/1_87_0.md</id>
      <updated>2024-12-06T19:32:32+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.87.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_87_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_87_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_87_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/parser&#34; target=&#34;_blank&#34;&gt;Parser&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;パーサー構築のフレームワーク。作者Zach Laine氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#two&#34;&gt;Two&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#three&#34;&gt;Three&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;byte spanとそのシーケンスを、バッファシーケンスとして使用できるサポートを追加。これにより、&lt;code&gt;async_read&lt;/code&gt;などのI/O操作に直接渡すことができる&lt;/li&gt;
&lt;li&gt;非同期操作がエラーなしで完了したかどうかをテストできるgeneric dispositionのサポートを追加。これには&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;exception_ptr&lt;/code&gt;が含まれるが、&lt;code&gt;disposition_traits&lt;/code&gt;クラステンプレートの特殊化によってユーザー定義の型に拡張できる。標準型の&lt;code&gt;std::error_code&lt;/code&gt;と&lt;code&gt;std::exception_ptr&lt;/code&gt;がディスポジションとして認識される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::use_future&lt;/code&gt;完了トークン、&lt;code&gt;boost::asio::awaitable&amp;lt;&amp;gt;&lt;/code&gt;ベースのコルーチン、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;、&lt;code&gt;boost::asio::experimental::cancellation_condition&lt;/code&gt;にディスポジションサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution_context::service_maker&lt;/code&gt;抽象基底クラスを追加。&lt;code&gt;service_maker&lt;/code&gt;はexecution contextのコンストラクタに渡されるオブジェクトで、コンテキスト構築時にサービスを追加できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::asio::config&lt;/code&gt;を追加。execution contextに関連する設定パラメータにアクセスできる。このクラスはAsioの内部、またはAsioの上に構築されるライブラリやユーザー提供の抽象化での使用を意図しており、特定の最適化の有効化/無効化などの動作を微調整するために使用される。&lt;code&gt;boost::asio::config_from_env&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_concurrency_hint&lt;/code&gt;、&lt;code&gt;boost::asio::config_from_string&lt;/code&gt;などの具体的な設定ソースを&lt;code&gt;io_context&lt;/code&gt;または&lt;code&gt;thread_pool&lt;/code&gt;のコンストラクタに渡すことができる&lt;/li&gt;
&lt;li&gt;Asioの&lt;code&gt;io_context&lt;/code&gt;と&lt;code&gt;thread_pool&lt;/code&gt;実装で認識される初期設定パラメータセットを追加&lt;/li&gt;
&lt;li&gt;以前に非推奨だった機能をいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object&lt;/code&gt;と&lt;code&gt;deadline_timer&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;associating binderに右辺値修飾の&lt;code&gt;operator()&lt;/code&gt;オーバーロードを追加。&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;ムーブ専用型を返す関数の&lt;code&gt;spawn()&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;コンセプトサポートを必要としないよう&lt;code&gt;co_composed&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;epollリアクターがfork後に通常のfile descriptorを再登録しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::detail::engine&lt;/code&gt;ムーブ代入のリークを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING&lt;/code&gt;が定義されている場合のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;Clang 19を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool::join()&lt;/code&gt;を変更し、&lt;code&gt;thread_pool::attach()&lt;/code&gt;で後に追加されるスレッドを確実に停止するようにした&lt;/li&gt;
&lt;li&gt;ストリーム指向操作で使用される&lt;code&gt;io_uring_prep_write_fixed&lt;/code&gt;と&lt;code&gt;io_uring_prep_read_fixed&lt;/code&gt;に渡されるオフセットを修正&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; アトミック待機状態リストのメモリ再確保時の初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;APIの変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_fields::insert()&lt;/code&gt;に&lt;code&gt;error_code&lt;/code&gt;オーバーロードを追加&lt;/li&gt;
&lt;li&gt;permessage-deflateの状態を照会するための&lt;code&gt;websocket::stream::get_status&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;タイムアウト時に&lt;code&gt;bad_executor&lt;/code&gt;例外を引き起こす&lt;code&gt;http::basic_stream&lt;/code&gt;内の&lt;code&gt;net::dispatch&lt;/code&gt;呼び出しでのムーブ後使用を修正&lt;/li&gt;
&lt;li&gt;初期化関数内の変更操作を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teardown_tcp_op&lt;/code&gt;でのキャンセル処理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_finish_impl&lt;/code&gt;を呼び出す前に&lt;code&gt;basic_parser&lt;/code&gt;の&lt;code&gt;state_&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;関数から&lt;code&gt;static&lt;/code&gt;指定子を削除&lt;/li&gt;
&lt;li&gt;テストでの&lt;code&gt;-Wattributes&lt;/code&gt;警告に対処&lt;/li&gt;
&lt;li&gt;テストでの到達不能コード警告に対処&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beast::http&lt;/code&gt;名前空間の型の前方宣言ヘッダーを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::parser&lt;/code&gt;が&lt;code&gt;error_code&lt;/code&gt;オーバーロードを使用した&lt;code&gt;basic_fields::insert()&lt;/code&gt;を使用できるよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;に&lt;code&gt;header_limit_&lt;/code&gt;をトレーラーヘッダーに適用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_parser&lt;/code&gt;が&lt;code&gt;http::error::header_limit&lt;/code&gt;をより早く返すように改善&lt;/li&gt;
&lt;li&gt;モジュラーBoostビルド構造のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Jackarain, Saleh Hatefinya, René Ferdinand Rivera Morell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#charconv&#34; id=&#34;charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__ibm128&lt;/code&gt;をlong double formatとして使用するPPC64LE アーキテクチャのサポートを修正&lt;/li&gt;
&lt;li&gt;Windows ARM64プラットフォームでの組み込み関数の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::float128_t&lt;/code&gt;または&lt;code&gt;__float128&lt;/code&gt;を使用した固定小数点の指定精度でのフォーマットを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cobalt&#34; id=&#34;cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_executor&lt;/code&gt;で定数参照を返す要件を削除&lt;/li&gt;
&lt;li&gt;実験的/構成を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_array.hpp&lt;/code&gt;を追加（Ruben Perez Hidalgo氏の貢献）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;と&lt;code&gt;small_vector&lt;/code&gt;に&lt;code&gt;stored_size&lt;/code&gt;オプションを追加&lt;/li&gt;
&lt;li&gt;バグ/問題を修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/261&#34; target=&#34;_blank&#34;&gt;GitHub #261&lt;/a&gt; 終端イテレータは参照できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/288&#34; target=&#34;_blank&#34;&gt;GitHub #288&lt;/a&gt; &lt;code&gt;small_vectorで&lt;/code&gt;flat_map::extract_sequence`を使用する際のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.84.0で発表されたように、Windows 10より前のバージョンはサポートされなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/325&#34; target=&#34;_blank&#34;&gt;GitHub #325&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;が&lt;code&gt;GetFinalPathNameByHandleW&lt;/code&gt; WinAPI関数に基づくようになった。副次的効果として、ドライブ文字は大文字に変換され、結果のパスの相互運用性が向上した&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;canonical&lt;/code&gt;は、入力パスに末尾のディレクトリ区切り文字 (trailing directory separator)がある場合でも、結果のパスに末尾のディレクトリ区切り文字を生成しなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/326&#34; target=&#34;_blank&#34;&gt;GitHub #326&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;コンストラクタまたはメンバ関数が、&lt;code&gt;path&lt;/code&gt;に変換可能なユーザー定義型の引数と1つ以上の&lt;code&gt;Source&lt;/code&gt;型で呼び出された場合、デフォルトで&lt;code&gt;path&lt;/code&gt;への変換が選択されるようになった。これにより一部の引数変換のあいまいさが解消される可能性があるが、変換パスが最適でない場合もある。異なる変換パスが必要な場合、ユーザーには明示的な型キャストの使用を推奨される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/328&#34; target=&#34;_blank&#34;&gt;GitHub #328&lt;/a&gt; FreeBSD 9以前の&lt;code&gt;dirfd&lt;/code&gt;がマクロである場合の回避策を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドシナリオで優れたパフォーマンスを提供する、Boost.Unorderedの並行コンテナに基づく&lt;code&gt;concurrent_factory&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/flyweight/issues/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; 以前に例外送出しないとドキュメントに記載されていた&lt;code&gt;boost::flyweight&lt;/code&gt;操作に&lt;code&gt;noexcept&lt;/code&gt;を付与&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;コードの一部で&lt;code&gt;typedef&lt;/code&gt;の代わりに&lt;code&gt;using&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;コードの一部でエイリアスを使用してメタ関数を現代化&lt;/li&gt;
&lt;li&gt;モジュラービルド構造のサポートを追加&lt;/li&gt;
&lt;li&gt;CMakeカバレッジの完全化（GitHub Actionsのcmakeテストを追加）&lt;/li&gt;
&lt;li&gt;ドキュメントワークフローの改善&lt;/li&gt;
&lt;li&gt;QtとWxWidgetsの例を更新&lt;/li&gt;
&lt;li&gt;C++17と23に備えて列挙を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重大な変更&lt;ul&gt;
&lt;li&gt;非推奨のリスケーリングコードを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1309&#34; target=&#34;_blank&#34;&gt;GitHub #1309&lt;/a&gt; 一部のqbkインクルードの不足を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1226&#34; target=&#34;_blank&#34;&gt;GitHub #1226&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1326&#34; target=&#34;_blank&#34;&gt;GitHub #1326&lt;/a&gt; ringに対するextra roundを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1293&#34; target=&#34;_blank&#34;&gt;GitHub #1293&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1294&#34; target=&#34;_blank&#34;&gt;GitHub #1294&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1295&#34; target=&#34;_blank&#34;&gt;GitHub #1295&lt;/a&gt; クラスター化されていないリングを通過する処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/893&#34; target=&#34;_blank&#34;&gt;GitHub #893&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1299&#34; target=&#34;_blank&#34;&gt;GitHub #1299&lt;/a&gt; 和演算の条件でのブロッキングリングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1342&#34; target=&#34;_blank&#34;&gt;GitHub #1342&lt;/a&gt; touchとの組み合わせでのstart turnを破棄を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1288&#34; target=&#34;_blank&#34;&gt;GitHub #1288&lt;/a&gt; &lt;a href=&#34;https://github.com/boostorg/geometry/issues/1345&#34; target=&#34;_blank&#34;&gt;GitHub #1345&lt;/a&gt; （不完全な）touchの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1279&#34; target=&#34;_blank&#34;&gt;GitHub #1279&lt;/a&gt; &lt;code&gt;covered_by&lt;/code&gt;の不正確な結果を修正&lt;/li&gt;
&lt;li&gt;エラーと警告の各種修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iterator/issues/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; &lt;code&gt;function_output_iterator&lt;/code&gt;が&lt;code&gt;std::output_iterator&lt;/code&gt;コンセプトに準拠するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boostの依存関係を11から7に削減。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/containers/*.hpp&amp;gt;&lt;/code&gt;ヘッダーを非推奨にした。2011年にはBoost.Containerの元ソースを参照していたが、現在はメンテナンスされていない。長期的な移行として、Boost.Interprocessはこれらのヘッダーを互換性のために維持してきた。将来のBoostリリースで削除される&lt;/li&gt;
&lt;li&gt;Cygwinのいくつかの回避策を追加。リグレッションテストがCygwin64で動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ABI破壊的変更&lt;/strong&gt;: &lt;code&gt;segment_manager&lt;/code&gt;が、オーバーアラインされた型をサポートし、既存のバグを修正する新しい実装を使用。Boost 1.87より前のABIを取得するには、Boost.Interprocessヘッダーをインクルードする前に&lt;code&gt;BOOST_INTERPROCESS_SEGMENT_MANAGER_ABI&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;として定義すること&lt;/li&gt;
&lt;li&gt;バグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; &lt;code&gt;shared_memory_object&lt;/code&gt;で&lt;code&gt;EINTR&lt;/code&gt;を処理&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/173&#34; target=&#34;_blank&#34;&gt;GitHub #173&lt;/a&gt; 管理共有メモリセグメントの値が整列されていない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; &lt;code&gt;managed_windows_shared_memory&lt;/code&gt;が破壊時にクラッシュ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; &lt;code&gt;char_wchar_holder&lt;/code&gt;の代入演算子で&lt;code&gt;m_is_wide&lt;/code&gt;が不足/誤用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;boost::interprocess::ipcdetail::sync_handles::obtain_mutex&lt;/code&gt;のバグ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/215&#34; target=&#34;_blank&#34;&gt;GitHub #215&lt;/a&gt; SPARC 32ビットでboost/interprocess/segment_managerのアラインメント問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; &lt;code&gt;managed_map_file&lt;/code&gt;の&lt;code&gt;find_or_construct&lt;/code&gt;がキャッシュアラインメントされたメモリを返さない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/230&#34; target=&#34;_blank&#34;&gt;GitHub #230&lt;/a&gt; MinGWで&lt;code&gt;interprocess::ipcdetail::intermodule_singleton&lt;/code&gt;が動作しない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; &lt;code&gt;get_current_process_creation_time&lt;/code&gt;の浮動小数点の不正確さにより&lt;code&gt;intermodule_singleton&lt;/code&gt;の失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接的なシリアライズ&lt;/li&gt;
&lt;li&gt;Boost.JSON型のGDBプリティプリンタを追加&lt;/li&gt;
&lt;li&gt;構造体への変換で不明なキーを無視&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;の例外ラッピング動作を簡素化&lt;/li&gt;
&lt;li&gt;非推奨のinitializer listの動作を削除&lt;/li&gt;
&lt;li&gt;非推奨の型エイリアスを削除&lt;/li&gt;
&lt;li&gt;MinGW ARM64での正確な64ビット乗算を使用&lt;/li&gt;
&lt;li&gt;サイズの異なるタプルでの&lt;code&gt;parse_into&lt;/code&gt;の処理を修正&lt;/li&gt;
&lt;li&gt;シーケンスの許容サイズより大きな入力サイズをチェック&lt;/li&gt;
&lt;li&gt;GCC 14での&lt;code&gt;value_ref&lt;/code&gt;のセグメンテーション違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexical_cast&#34; id=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Integerへの依存性を削除し、コンパイル時間を短縮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Threadの同期プリミティブをC++標準ライブラリの同等物と置き換えた。これにより、マルチスレッドのパフォーマンスが向上する可能性があるが、ユーザー側での影響もある&lt;ul&gt;
&lt;li&gt;Boost.Threadのスレッド割り込み機能はサポートされなくなった。Boost.Logは、Boost.Threadによってスレッド割り込みを実装するために使用される &lt;code&gt;thread_interrupted&lt;/code&gt; 例外に対して特別な処理を行わなくなった。この例外は他の任意の例外と同様に扱われる&lt;ul&gt;
&lt;li&gt;とくに、ユーザー指定の例外ハンドラが &lt;code&gt;thread_interrupted&lt;/code&gt; のペンディング例外で呼び出されることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timed wait操作について、タイムアウトは現在&lt;code&gt;std::chrono&lt;/code&gt;の時間単位を使用している。これは、&lt;code&gt;bounded_ordering_queue&lt;/code&gt; クラスと &lt;code&gt;unbounded_ordering_queue&lt;/code&gt; クラスがサポートする &lt;code&gt;ordering_window&lt;/code&gt; という名前付きパラメータが、Boost.DateTimeの &lt;code&gt;boost::posix_time::time_duration&lt;/code&gt; ではなく &lt;code&gt;std::chrono::duration&lt;/code&gt; の値を期待することを意味している&lt;/li&gt;
&lt;li&gt;スレッド同期プリミティブによって示されるエラーの場合、Boost.Threadの例外型の代わりに &lt;code&gt;std::system_error&lt;/code&gt; 例外が送出される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strictest_lock&lt;/code&gt; にC++標準ライブラリのlock型のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;多数の特殊関数および分布が、CUDA（NVCCおよびNVRTC）およびSYCLをサポートするようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1163&#34; target=&#34;_blank&#34;&gt;GitHub #1163&lt;/a&gt; mapairy distribution、holtsmark distributionおよびsaspoint5 distributionを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1159&#34; target=&#34;_blank&#34;&gt;GitHub #1159&lt;/a&gt; landau distributionを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1169&#34; target=&#34;_blank&#34;&gt;GitHub #1169&lt;/a&gt; beta quantileにおける予期しない例外を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのバグを修正：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/56&#34; target=&#34;_blank&#34;&gt;Git Issue #56&lt;/a&gt; std型の前方宣言が、一部のプラットフォームでコンパイルエラーを引き起こす&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_lambda&lt;/code&gt;を追加（提供者：Joaquin M Lopez Munoz氏）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float128&lt;/code&gt; をtrivially copyableにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt; を非GNUモードでも浮動小数点型とみなすよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;実験的なAPIへの破壊的変更&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;でのスレッドセーフティ機能が再設計され、ユーザーの経験によって見つかったいくつかの設計の欠陥を克服した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_safe&lt;/code&gt;という&lt;code&gt;bool&lt;/code&gt;オプションが&lt;code&gt;pool_params&lt;/code&gt;に追加され、デフォルトでは&lt;code&gt;false&lt;/code&gt;に設定されている。設定すると、一部のプール関数が挙動を変更して並行に安全に使用できるようになる。これは内部で&lt;code&gt;strand&lt;/code&gt;を作成し、必要なときにそれにディスパッチし、cancel signalを再配線することで機能する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_params::thread_safe&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合、通常のAsio executorのセマンティクスが適用され、オーバーヘッドはない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_executor_params&lt;/code&gt;は削除され、&lt;code&gt;pool_params::connection_executor&lt;/code&gt;と&lt;code&gt;pool_params::thread_safe&lt;/code&gt;に置き換えられた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool::async_get_connection&lt;/code&gt;の組み込みタイムアウト機能が完全に削除された。この関数は現在、個々の操作のキャンセルをサポートしており、同じ機能は&lt;code&gt;asio::cancel_after&lt;/code&gt;を使用することで達成できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の破棄をすると、ほかのAsio I/Oオブジェクトと同様に、未処理の非同期操作がキャンセルされる。これによりリソースのリークが防止される&lt;/li&gt;
&lt;li&gt;利用可能なコネクションがまだない状態で&lt;code&gt;async_get_connection&lt;/code&gt;操作がキャンセルされた場合、操作は現在、プールの状態に応じて一貫して&lt;code&gt;client_errc::pool_not_running&lt;/code&gt;、&lt;code&gt;client_errc::no_connection_available&lt;/code&gt;、または&lt;code&gt;client_errc::pool_cancelled&lt;/code&gt;で失敗する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_errc::timeout&lt;/code&gt;と&lt;code&gt;client_errc::cancelled&lt;/code&gt;が削除された&lt;/li&gt;
&lt;li&gt;プールが実行中でない状態で&lt;code&gt;async_get_connection&lt;/code&gt;を呼び出すとすぐには失敗せず、&lt;code&gt;async_run&lt;/code&gt;の呼び出しを待つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は所有型を返すようになった。これにより、&lt;code&gt;with_params&lt;/code&gt;と共に遅延非同期操作で使用することが安全になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;は別のヘッダー、&lt;code&gt;boost/mysql/sequence.hpp&lt;/code&gt;に移動された&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;、クライアント側のSQLフォーマット（&lt;code&gt;format_sql&lt;/code&gt;および&lt;code&gt;with_params&lt;/code&gt;を含む）、および&lt;code&gt;connection_pool&lt;/code&gt;を安定したAPIに昇格させた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;とそのエイリアスである&lt;code&gt;tcp_connection&lt;/code&gt;、&lt;code&gt;tcp_ssl_connection&lt;/code&gt;、および&lt;code&gt;unix_connection&lt;/code&gt;の代わりに使用する新規コードとして、&lt;code&gt;any_connection&lt;/code&gt;が推奨される&lt;/li&gt;
&lt;li&gt;クエリテンプレート文字列とパラメータを包括する新しい &lt;code&gt;ExecutionRequest&lt;/code&gt; である &lt;code&gt;with_params&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics&lt;/code&gt;を追加した。これは同期的に例外を送出する関数の動作と一致するように、非同期関数によって送出される例外に &lt;code&gt;diagnostics&lt;/code&gt; オブジェクトを含むアダプタ完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_diagnostics(asio::deferred)&lt;/code&gt;は現在、&lt;code&gt;any_connection&lt;/code&gt;と&lt;code&gt;connection_pool&lt;/code&gt;のすべての操作のデフォルトの完了トークンである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection_pool&lt;/code&gt;の非同期関数は現在、操作ごとのキャンセルをサポートしている&lt;/li&gt;
&lt;li&gt;すべての非同期操作は現在、&lt;code&gt;asio::cancel_after&lt;/code&gt;、&lt;code&gt;asio::cancel_at&lt;/code&gt;および同様の完了トークンをサポートしている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;と&lt;code&gt;any_connection&lt;/code&gt;は現在、即時の完全性をトークンの即時エグゼキュータ (immediate executor) を介してディスパッチする&lt;/li&gt;
&lt;li&gt;以前に接続されていない&lt;code&gt;any_connection&lt;/code&gt;を使用しようとするとクラッシュする問題を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field&lt;/code&gt;の潜在的に例外送出可能なコンストラクタから間違った&lt;code&gt;noexcept&lt;/code&gt;指定子を削除した&lt;/li&gt;
&lt;li&gt;設定されたバッファサイズの制限を超える可能性があった書き込みバッファサイズの問題を修正した&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを大幅に更新し、新しい推奨されるベストプラクティスを反映させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/171&#34; target=&#34;_blank&#34;&gt;GitHub #171&lt;/a&gt; &lt;code&gt;boost::pfr::for_each_field_with_name&lt;/code&gt;関数が追加された (&lt;a href=&#34;https://github.com/Baduit&#34; target=&#34;_blank&#34;&gt;Lena&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/120&#34; target=&#34;_blank&#34;&gt;GitHub #120&lt;/a&gt; 大きなサイズと小さなフィールド数を持つ構造体のコンパイル時間が大幅に改善された (&lt;a href=&#34;https://github.com/runer112&#34; target=&#34;_blank&#34;&gt;Zachary Wassall&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pragma&lt;/code&gt;ディレクティブを修正&lt;/li&gt;
&lt;li&gt;C++20モジュールへの初期サポートを追加した。詳細はドキュメントを参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/pfr/pull/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; core_name14_disabled.hpp内の未使用変数の警告を修正 (&lt;a href=&#34;https://github.com/anarthal&#34; target=&#34;_blank&#34;&gt;Anarthal (Rubén Pérez)&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;C++17における集成体内のフィールド数のデフォルト制限を100から200に引き上げた&lt;/li&gt;
&lt;li&gt;GCCが&lt;code&gt;-Wundefined-var-template&lt;/code&gt;を認識していないことに関する警告を修正&lt;/li&gt;
&lt;li&gt;複数の軽微なコンパイル時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#process&#34; id=&#34;process&#34;&gt;Process&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(v2) Windowsでの&lt;code&gt;async_wait&lt;/code&gt;のキャンセルを実装した&lt;/li&gt;
&lt;li&gt;(v2) &lt;code&gt;FORCE_DISABLE_CLOSE_RANGE&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;(v2) ext: BSDおよびSolarisの複数のext修正&lt;/li&gt;
&lt;li&gt;(v2) 未使用の &lt;code&gt;ext&lt;/code&gt; 関数が現在コンパイルされ、 &lt;code&gt;operation_not_supported&lt;/code&gt; エラーが与えられるようになった（IOSを含む）&lt;/li&gt;
&lt;li&gt;(v2) 複数のリンクを修正&lt;/li&gt;
&lt;li&gt;(v2) リンクされたライブラリからfilesystemが削除された - 使用されるfilesystemライブラリの機能としては、ヘッダーファイルに実装があるもののみとなった&lt;/li&gt;
&lt;li&gt;(v1) 1.88に対する非推奨通知を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了し、C++11のコンパイラが必要となる。これにはGCC 4.8以降、またはMSVC 14.0以降が含まれる&lt;/li&gt;
&lt;li&gt;マクロ &lt;code&gt;BOOST_SP_ENABLE_DEBUG_HOOKS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_STD_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_QUICK_ALLOCATOR&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_SPINLOCK&lt;/code&gt;、&lt;code&gt;BOOST_AC_USE_PTHREADS&lt;/code&gt;、&lt;code&gt;BOOST_SP_USE_SPINLOCK&lt;/code&gt;、および&lt;code&gt;BOOST_SP_USE_PTHREADS&lt;/code&gt;により有効化される機能は非推奨となり、将来のリリースでそのサポートは削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;boost::stacktrace_from_exception&lt;/code&gt;のCMakeターゲットが追加された (&lt;a href=&#34;https://github.com/void-mian&#34; target=&#34;_blank&#34;&gt;int mian&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; MSVCでの静的ビルド時に&lt;code&gt;boost_stacktrace_impl_return_nullptr&lt;/code&gt;をエクスポートしないようにした (&lt;a href=&#34;https://github.com/huangqinjin&#34; target=&#34;_blank&#34;&gt;huangqinjin&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;Windows OSでclangを使用した際の、&lt;code&gt;ole32.lib&lt;/code&gt;と&lt;code&gt;Dbgeng.lib&lt;/code&gt;の自動リンクを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメントで欠落していた名前空間を修正した (&lt;a href=&#34;https://github.com/meastp&#34; target=&#34;_blank&#34;&gt;Mats Taraldsvik&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/178&#34; target=&#34;_blank&#34;&gt;GitHub #178&lt;/a&gt; &lt;code&gt;std::exception&lt;/code&gt; のインクルード不足を修正した (&lt;a href=&#34;https://github.com/jschueller&#34; target=&#34;_blank&#34;&gt;Julien Schueller&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/175&#34; target=&#34;_blank&#34;&gt;GitHub #175&lt;/a&gt; GCCが報告した型の変換エラーを修正した (&lt;a href=&#34;https://github.com/jplcz&#34; target=&#34;_blank&#34;&gt;agent_J&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stl_interfaces&#34; id=&#34;stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/71&#34; target=&#34;_blank&#34;&gt;GitHub #71&lt;/a&gt; シーケンスコンテナ &lt;code&gt;swap&lt;/code&gt; の誤って記録された要件を正しくした。期待される戻り値は &lt;code&gt;bool&lt;/code&gt; ではなく &lt;code&gt;void&lt;/code&gt; である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/issues/65&#34; target=&#34;_blank&#34;&gt;GitHub #65&lt;/a&gt; &lt;code&gt;view_adaptor.hpp&lt;/code&gt;のアダプターのデータメンバーに &lt;code&gt;[[no_unique_address]]&lt;/code&gt; を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stl_interfaces/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; ClangとMSVCの最近のバージョンで &lt;code&gt;__cpp_explicit_this_parameter&lt;/code&gt; を介してサポートをアドバタイズしていない &lt;code&gt;this&lt;/code&gt; の推論を可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/348&#34; target=&#34;_blank&#34;&gt;GitHub #348&lt;/a&gt; ダミー条件に対するclang tidyのサポートを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/431&#34; target=&#34;_blank&#34;&gt;GitHub #431&lt;/a&gt; clangでの動的リンクを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;並行ノードベースコンテナ &lt;code&gt;boost::concurrent_node_map&lt;/code&gt; と &lt;code&gt;boost::concurrent_node_set&lt;/code&gt; を追加&lt;/li&gt;
&lt;li&gt;並行コンテナに &lt;code&gt;insert_and_visit(x, f1, f2)&lt;/code&gt; および類似の操作を追加した。これは、挿入直後に要素を訪問することを可能にする（対照的に、 &lt;code&gt;insert_or_visit(x, f)&lt;/code&gt; は、挿入が行われなかった場合にのみ要素を訪問する）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/265&#34; target=&#34;_blank&#34;&gt;GitHub #265&lt;/a&gt; 要素の安全な可変変更を可能にするため、特定の &lt;code&gt;boost::concurrent_flat_set&lt;/code&gt; 操作内で訪問を排他的にロック&lt;/li&gt;
&lt;li&gt;Visual Studio Natvisでは、任意のファンシーなポインタ型をサポートした。このことは、適切なNatvisカスタマイズポイント &#34;Intrinsic&#34; 関数がファンシーポインタ型自体に対して書かれている限り、任意のファンシーポインタ型に適用できる&lt;/li&gt;
&lt;li&gt;すべてのコンテナとイテレータにGDBのプリティプリンタが追加されました。ファンシーポインタを使用するアロケータを持つコンテナに対しては、ファンシーポインタ型そのものに対して適切なプリティプリンタが書かれている場合にのみ、これらは機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/277&#34; target=&#34;_blank&#34;&gt;GitHub #277&lt;/a&gt; オープンアドレッシングコンテナに対する &lt;code&gt;std::initializer_list&lt;/code&gt; への代入の問題を修正した&lt;/li&gt;
&lt;li&gt;接続コンテナの &lt;code&gt;std::initializer_list&lt;/code&gt; オーバーロードの &lt;code&gt;insert_{and|or}_[c]visit&lt;/code&gt; にコピー不可能なコールバックを渡すことができるようにした。これは内部的にコールバックの &lt;code&gt;std::reference_wrapper&lt;/code&gt; をイテレーターペアのオーバーロードに渡す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#url&#34; id=&#34;url&#34;&gt;URL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/856&#34; target=&#34;_blank&#34;&gt;GitHub #856&lt;/a&gt; 機能追加: &lt;code&gt;set_params&lt;/code&gt;が&lt;code&gt;encoding_opts&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/857&#34; target=&#34;_blank&#34;&gt;GitHub #857&lt;/a&gt; リファクタリング: APIから非推奨のvariant2エイリアスを除外&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/url/issues/864&#34; target=&#34;_blank&#34;&gt;GitHub #864&lt;/a&gt; リファクタリング: &lt;code&gt;query_rule&lt;/code&gt;に一貫した解釈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.86で間違って削除した &lt;code&gt;constexpr uuid&lt;/code&gt; を構築する機能を復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt;：C++20と空の文字列化パラメータでのセグメンテーション違反を修正 (&lt;a href=&#34;https://github.com/jwnhy&#34; target=&#34;_blank&#34;&gt;Lu HongYi&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/222&#34; target=&#34;_blank&#34;&gt;GitHub #222&lt;/a&gt;：含まれるファイルの最初の行が空白の場合に行ディレクティブがない問題を修正 (&lt;a href=&#34;https://github.com/njnobles&#34; target=&#34;_blank&#34;&gt;Nick Nobles&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ビルドの改善（モジュールビルドのサポートを含む) (&lt;a href=&#34;https://github.com/grafikrobot&#34; target=&#34;_blank&#34;&gt;René Rivera&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.86.0リリースノート -- 1.86.0 : Claudeのメッセージを削除</title>
      <link href="https://boostjp.github.io/document/version/1_86_0.html"/>
      <id>1cfaf2d8f34303218ffaea5fa91b9b21475edd25:document/version/1_86_0.md</id>
      <updated>2024-11-28T18:09:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.86.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_86_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_86_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_86_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_86_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compat&#34;&gt;Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#crc&#34;&gt;CRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lexicalcast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#leaf&#34;&gt;Leaf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#process&#34;&gt;Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#boostbook&#34;&gt;BoostBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default_completion_token&lt;/code&gt;トレイトのプライマリテンプレートを変更し、デフォルトの完了トークンとして&lt;code&gt;deferred&lt;/code&gt;を選択するようにした。その結果、ほとんどの非同期操作の開始関数は、デフォルトで遅延非同期操作を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_completion_condition&lt;/code&gt;トレイトを追加し、&lt;code&gt;async_read&lt;/code&gt;、&lt;code&gt;async_read_at&lt;/code&gt;、&lt;code&gt;async_write&lt;/code&gt;、&lt;code&gt;async_write_at&lt;/code&gt;のオーバーロードに不足していたデフォルト完了トークンを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_connect_condition&lt;/code&gt;トレイトを追加し、完了トークンがデフォルトの場合に&lt;code&gt;async_connect&lt;/code&gt;のオーバーロードを曖昧さ解消するために使用した&lt;/li&gt;
&lt;li&gt;完了トークンアダプタ&lt;code&gt;as_tuple&lt;/code&gt;、&lt;code&gt;bind_allocator&lt;/code&gt;、&lt;code&gt;bind_cancellation_slot&lt;/code&gt;、&lt;code&gt;bind_executor&lt;/code&gt;、&lt;code&gt;bind_immediate_executor&lt;/code&gt;、&lt;code&gt;redirect_error&lt;/code&gt;を拡張し、部分的な完了トークンアダプタとして使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel_after&lt;/code&gt;と&lt;code&gt;cancel_at&lt;/code&gt;完了トークンアダプタを追加した&lt;/li&gt;
&lt;li&gt;すべての完了トークンアダプタを変更し、適応中に非同期操作のI/Oエグゼキュータが正しく伝播されることを保証した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;co_composed&lt;/code&gt;を&lt;code&gt;experimental&lt;/code&gt;名前空間から移動した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;composed&lt;/code&gt;を追加した。これは、状態を持つ実装から開始関数オブジェクトを作成する。&lt;code&gt;co_composed&lt;/code&gt;に似ていますが、C++20コルーチンではなく通常の関数オブジェクト用である&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detached&lt;/code&gt;完了トークンを変更し、複数の完了シグネチャを持つ非同期操作で動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_initiate&lt;/code&gt;を変更し、完了シグネチャの空の可変長リストを許可した。これは、非同期操作が完了しないことを示す&lt;/li&gt;
&lt;li&gt;完了トークンの型を自動的に推論する&lt;code&gt;async_initiate&lt;/code&gt;のオーバーロードを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_immediate&lt;/code&gt;を追加した。これは、利用可能な場合は関連する即時エグゼキュータを使用して、即座に完了する単純な非同期操作を実装する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;associator&lt;/code&gt;トレイトのSFINAEベースの部分特殊化を有効にした&lt;/li&gt;
&lt;li&gt;いくつかのバグ修正、コンパイラ/プラットフォーム互換性の改善、および軽微な最適化を行った&lt;/li&gt;
&lt;li&gt;ドキュメントと例のさまざまな更新&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近のOpenBSDバージョンでは&lt;code&gt;syscall(2)&lt;/code&gt;のサポートが削除されたため、OpenBSDでは&lt;code&gt;&lt;a href=&#34;https://man.openbsd.org/OpenBSD-6.2/futex.2&#34; target=&#34;_blank&#34;&gt;futex(2)&lt;/a&gt;&lt;/code&gt;システムコールを使用するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API変更&lt;ul&gt;
&lt;li&gt;HTTPステータスコード418「I&#39;m a teapot」を追加した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_size_hint_db()&lt;/code&gt;での縮小変換を修正&lt;/li&gt;
&lt;li&gt;デフォルトの完了トークンを使用する際にあいまいになるオーバーロードを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::basic_fields&lt;/code&gt;のムーブ代入演算子における誤配置された&lt;code&gt;static_assert&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;WebSocketの部分的な書き込み操作での&lt;code&gt;bytes_transferred&lt;/code&gt;のアンダーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;websocket::stream::read_size_hint()&lt;/code&gt;が&lt;code&gt;read_message_max&lt;/code&gt;を超えないようにした&lt;/li&gt;
&lt;li&gt;テストにおける様々な警告を修正&lt;/li&gt;
&lt;li&gt;例におけるSSLシャットダウン操作のエラー処理を修正&lt;/li&gt;
&lt;li&gt;zlibにおけるフォールスルーケースの注釈付け&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::ops::transfer_op&lt;/code&gt;での期限切れタイマーの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test::basic_stream&lt;/code&gt;コンストラクタオーバーロードのあいまいさを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::parser&lt;/code&gt;での最終チャンクの部分的な解析を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server_flex_awaitable&lt;/code&gt;例での上品なシャットダウン&lt;/li&gt;
&lt;li&gt;awaitableの例を簡略化&lt;/li&gt;
&lt;li&gt;fuzzingターゲットを追加&lt;/li&gt;
&lt;li&gt;一部の例での不要な&lt;code&gt;std::bind&lt;/code&gt;の使用を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_stream&lt;/code&gt;が&lt;code&gt;flat_stream&lt;/code&gt;を使用しないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssl_stream&lt;/code&gt;と&lt;code&gt;flat_stream&lt;/code&gt;を非推奨としてマーク&lt;/li&gt;
&lt;li&gt;スニペットと例で&lt;code&gt;net::ssl::stream&lt;/code&gt;を正規 (canonical) であるとした&lt;/li&gt;
&lt;li&gt;「SSL/TLSシャットダウン手順 (SSL/TLS Shutdown Procedure)」セクションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;tyler92, Ruslan Zakirov, Orgad Shaneh, Alexander Kernozhitsky&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#charconv&#34; id=&#34;charconv&#34;&gt;Charconv&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PPC64LEアーキテクチャのサポートを修正&lt;/li&gt;
&lt;li&gt;Alpine linuxのような、&lt;code&gt;&amp;lt;quadmath.h&amp;gt;&lt;/code&gt;ヘッダは提供するがコンパイル済みライブラリは提供しないプラットフォームのサポートを修正&lt;/li&gt;
&lt;li&gt;整数型の&lt;code&gt;from_chars&lt;/code&gt;での最初の文字パターンマッチングを修正&lt;/li&gt;
&lt;li&gt;10より大きい基数の整数のオーバーフロー検出を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::float16_t&lt;/code&gt;と&lt;code&gt;std::bfloat16_t&lt;/code&gt;の変換形式を使用する代わりにネイティブサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#cobalt&#34; id=&#34;cobalt&#34;&gt;Cobalt&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asio::cancel_after&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;asioのデフォルトトークンである&lt;code&gt;asio::deferred&lt;/code&gt;を&lt;code&gt;co_await&lt;/code&gt;可能にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noop&lt;/code&gt;ユーティリティを追加&lt;/li&gt;
&lt;li&gt;スタックフルコルーチン/ファイバーの実験的サポートを追加&lt;/li&gt;
&lt;li&gt;チャネルとコルーチン型の移動可能性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#compat&#34; id=&#34;compat&#34;&gt;Compat&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bind_front.hpp&lt;/code&gt;、&lt;code&gt;bind_back.hpp&lt;/code&gt;、&lt;code&gt;invoke.hpp&lt;/code&gt;、&lt;code&gt;mem_fn.hpp&lt;/code&gt;、&lt;code&gt;integer_sequence.hpp&lt;/code&gt;、&lt;code&gt;type_traits.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_ref.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下のバグ/問題を修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/285&#34; target=&#34;_blank&#34;&gt;GitHub #285: &#34;devector&amp;lt;&amp;gt;::push_front&lt;code&gt;が&lt;/code&gt;clear()`後にアサート失敗する&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/280&#34; target=&#34;_blank&#34;&gt;GitHub #280: &#34;いくつかのコンテナが、ムーブ代入時にムーブ不可能な型をサポートしていない&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/279&#34; target=&#34;_blank&#34;&gt;GitHub #279: &#34;&lt;code&gt;small_vector&lt;/code&gt;がスタック空間の使用に戻れない&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/277&#34; target=&#34;_blank&#34;&gt;GitHub #277: &#34;boost::static_assertへの依存を削除&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/275&#34; target=&#34;_blank&#34;&gt;GitHub #275: &#34;カスタムキー比較を使用するとコンパイルに失敗する&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/273&#34; target=&#34;_blank&#34;&gt;GitHub #273: &#34;&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;vector&lt;/code&gt;が追加時にクラッシュする（メモリ破壊）&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/269&#34; target=&#34;_blank&#34;&gt;GitHub #269: &#34;&lt;code&gt;flat_multimap::emplace&lt;/code&gt;がGCCで要素をソートしない&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/266&#34; target=&#34;_blank&#34;&gt;GitHub #266: &#34;32ビットで&lt;code&gt;small_vector&amp;lt;T&amp;gt;&lt;/code&gt;がスタック上で誤整列している&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/259&#34; target=&#34;_blank&#34;&gt;GitHub #259: &#34;グローバル変数&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/245&#34; target=&#34;_blank&#34;&gt;GitHub #245: &#34;&lt;code&gt;flat_tree::insert&lt;/code&gt; ordered rangeがソートを主張しない&#34;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/241&#34; target=&#34;_blank&#34;&gt;GitHub #241: &#34;&lt;code&gt;flat_map&lt;/code&gt;は&lt;code&gt;std::map&lt;/code&gt;と同じインターフェースをサポートすべき&#34;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ポインタが指定された範囲内にあるかをチェックする&lt;code&gt;pointer_in_range&lt;/code&gt;関数テンプレートを含む&lt;code&gt;boost/core/pointer_in_range.hpp&lt;/code&gt;ヘッダを追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; 抽象クラスの&lt;code&gt;type_name&lt;/code&gt;を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/issues/173&#34; target=&#34;_blank&#34;&gt;GitHub #173&lt;/a&gt; ネイティブ&lt;code&gt;wchar_t&lt;/code&gt;型が無効化されたMSVCでの&lt;code&gt;boost/core/type_name.hpp&lt;/code&gt;のコンパイルエラーを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/175&#34; target=&#34;_blank&#34;&gt;GitHub PR #175&lt;/a&gt; ネストされたクラスで&lt;code&gt;empty_value&lt;/code&gt;を使用した際にコンパイルエラーを引き起こすMSVCの&lt;a href=&#34;https://developercommunity.visualstudio.com/t/Compiler-bug:-Incorrect-C2247-and-C2248/10690025&#34; target=&#34;_blank&#34;&gt;バグ&lt;/a&gt;に対する回避策を追加した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#crc&#34; id=&#34;crc&#34;&gt;CRC&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了。C++11コンパイラが必要となる (これにはGCC 4.6以降、MSVC 10.0 (VS 2010)以降が含まれる)&lt;/li&gt;
&lt;li&gt;Array、Config、Integer、TypeTraitsへの依存関係を削除した。このライブラリは現在スタンドアロンである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_empty&lt;/code&gt;操作が、同時に行われるファイルシステムの変更からより良く保護されるようになった&lt;/li&gt;
&lt;li&gt;POSIXシステムで、通常ファイルやディレクトリ以外のファイルに対して&lt;code&gt;is_empty&lt;/code&gt;を呼び出した場合、エラーを示すようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; Windowsで、シンボリックリンクではなくシンボリックリンクが参照するファイルに対して動作する&lt;code&gt;file_size&lt;/code&gt;と&lt;code&gt;is_empty&lt;/code&gt;を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; &lt;code&gt;directory_entry::refresh&lt;/code&gt;は、エントリが参照するファイルが存在しない場合に例外を投げなくなった。これにより&lt;code&gt;directory_entry::status&lt;/code&gt;と&lt;code&gt;directory_entry::symlink_status&lt;/code&gt;、およびそれらに基づくメンバ関数が、同等のスタンドアロン操作と同様に振る舞うようになった。ファイルが存在しないという事実は、対応する&lt;code&gt;directory_entry::refresh&lt;/code&gt;オーバーロードが返す&lt;code&gt;error_code&lt;/code&gt;を通じて、あるいは&lt;code&gt;directory_entry::status&lt;/code&gt;または&lt;code&gt;directory_entry::symlink_status&lt;/code&gt;呼び出しが返すファイルタイプが&lt;code&gt;file_type::file_not_found&lt;/code&gt;であるかをテストすることで確認できる&lt;/li&gt;
&lt;li&gt;入力パスが相対パスの場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;が呼び出しで指定されたベースパスではなく現在のパスに対してパス要素の存在をテストする問題を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/311&#34; target=&#34;_blank&#34;&gt;GitHub #311&lt;/a&gt; Windowsで、入力パスが&lt;code&gt;&#34;..&#34;&lt;/code&gt;で始まる場合に&lt;code&gt;weakly_canonical&lt;/code&gt;が不正な結果パスを生成する問題を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了。C++11コンパイラが必要となる (これにはGCC 4.7以降、MSVC 12.0 (VS 2013)以降が含まれる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#function&#34; id=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.TypeTraitsへの依存を削除した&lt;/li&gt;
&lt;li&gt;1.85で誤って削除した&lt;code&gt;argN_type&lt;/code&gt;型定義を復活させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/747&#34; target=&#34;_blank&#34;&gt;GitHub PR #747&lt;/a&gt; &lt;code&gt;istream_device&lt;/code&gt;と&lt;code&gt;ostream_device&lt;/code&gt;クラスに&lt;code&gt;tell()&lt;/code&gt;と&lt;code&gt;error()&lt;/code&gt;関数を追加しました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/726&#34; target=&#34;_blank&#34;&gt;GitHub PR #726&lt;/a&gt; &lt;code&gt;color_converted_view&lt;/code&gt;関数でカスタムカラーコンバータを無視しないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/745&#34; target=&#34;_blank&#34;&gt;GitHub PR #745&lt;/a&gt; WinAPIの&lt;code&gt;min()&lt;/code&gt;と&lt;code&gt;max()&lt;/code&gt;マクロとの競合に対する回避策を追加した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/743&#34; target=&#34;_blank&#34;&gt;GitHub PR #743&lt;/a&gt; GILでの&lt;code&gt;boost::filesystem&lt;/code&gt;の使用が、CMakeオプション&lt;code&gt;BOOST_GIL_USE_BOOST_FILESYSTEM&lt;/code&gt;で設定可能になりました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/723&#34; target=&#34;_blank&#34;&gt;GitHub PR #723&lt;/a&gt; &lt;code&gt;convolve_2d&lt;/code&gt;での畳み込みを修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/725&#34; target=&#34;_blank&#34;&gt;GitHub PR #725&lt;/a&gt; 暗くなるのを避けるためにガウシアン2Dカーネルを正規化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/746&#34; target=&#34;_blank&#34;&gt;GitHub PR #746&lt;/a&gt; &lt;code&gt;std::wstring&lt;/code&gt;パスのパス文字列変換関数でのバッファサイズの誤りを修正し、&lt;code&gt;std::wstring&lt;/code&gt;パスを使用するI/O関連関数でのバッファオーバーフローを回避した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Christoph Gringmuth, Christopher Kormanyos, nicolacandussi, Dirk Stolle, Olzhas Zhumabek&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#graph&#34; id=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート: C++14が新しい最小標準となった。これは（少なくともC++11への）依存関係によって決定された部分もあるし、選択による部分もある。古い標準のサポートが必要な場合は、メンテナーに連絡してほしい&lt;/li&gt;
&lt;li&gt;Boost.Regexへの直接的な依存を削除した&lt;/li&gt;
&lt;li&gt;共通ヘッダを明示的にインクルードしていないことによる複数のコンパイルエラーを修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;: ドキュメントを修正し、&lt;code&gt;vertex_max_invariant&lt;/code&gt;パラメータを無視して上限を安価に計算するようにし、Associative Property Mapのバグを修正し、最大不変量のサイズに対する線形から g1 のサイズに対する線形に空間効率を改善した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boykov_kolmogorov_max_flow&lt;/code&gt;: 名前付きパラメータのオーバーロードを修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adj_list_edge_iterator&lt;/code&gt;: 初期化されていない可能性のある警告を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hawick_circuits&lt;/code&gt;: 探索の深さを任意に制限するパラメータを追加し、潜在的に最適でない答えを早期に返すようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjoint_sets&lt;/code&gt;: セット代表の冗長な検索を削除することで、&lt;code&gt;link_sets&lt;/code&gt;のパフォーマンスを改善した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maximum_adjacency_search&lt;/code&gt;: リファクタリングとより多くのテストを行った&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;: &lt;code&gt;BOOST_ATTRIBUTE_NO_UNIQUE_ADDRESS&lt;/code&gt;を使用して無駄なスペースを削除した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;labeled_graph&lt;/code&gt;: ラベルも実際に削除するように&lt;code&gt;remove_labeled_vertex&lt;/code&gt;を修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r_c_shortest_paths&lt;/code&gt;: 単一解のバリアントが常に最短パスを返さないバグを修正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;: スタックオーバーフロー（oss-fuzz issue 66719）と非キーワードサブグラフの解析を修正した&lt;/li&gt;
&lt;li&gt;その他多数の改善: リンク切れ、typoの修正など&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下のバグを修正した:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/191&#34; target=&#34;_blank&#34;&gt;GitHub #191 (&#34;&lt;code&gt;vectorstream&lt;/code&gt;: &lt;code&gt;INT_MAX&lt;/code&gt;より大きいファイルサイズをサポート&#34;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/198&#34; target=&#34;_blank&#34;&gt;GitHub #198 (&#34;&lt;code&gt;offset_ptr&lt;/code&gt;のドキュメントの軽微な修正&#34;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/202&#34; target=&#34;_blank&#34;&gt;GitHub #202 (&#34;&lt;code&gt;message_queue&lt;/code&gt;を匿名メモリにマップすることを許可&#34;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/207&#34; target=&#34;_blank&#34;&gt;GitHub #207 (&#34;cmake: システムライブラリをリンク&#34;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/214&#34; target=&#34;_blank&#34;&gt;GitHub #214 (&#34;Doc: GitHubリンクを修正&#34;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt; コメント内の無効なUTF-8文字のバグを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 5.0未満のサポートは非推奨となり、Boost 1.88.0でサポート終了する&lt;/li&gt;
&lt;li&gt;例外を投げるアクセサ関数に&lt;code&gt;source_location&lt;/code&gt;パラメータが追加された&lt;/li&gt;
&lt;li&gt;無効なUTF-16サロゲートペアを許容し、&lt;a href=&#34;https://simonsapin.github.io/wtf-8/&#34; target=&#34;_blank&#34;&gt;WTF-8&lt;/a&gt;を生成するパースオプションを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system::result&lt;/code&gt;を返すアクセサ関数を追加した&lt;/li&gt;
&lt;li&gt;直接パースにおける欠落したエラーケースを処理するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexicalcast&#34; id=&#34;lexicalcast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1つ以上の&lt;code&gt;\0&lt;/code&gt;文字を含む&lt;code&gt;std::basic_string_view&lt;/code&gt;と&lt;code&gt;boost::basic_string_view&lt;/code&gt;の変換を修正した。この問題は1.85.0で導入された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#leaf&#34; id=&#34;leaf&#34;&gt;Leaf&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose_diagnostic_info&lt;/code&gt;の実装を最適化した&lt;/li&gt;
&lt;li&gt;バグ修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class result&amp;lt;&amp;gt;&lt;/code&gt;に&lt;code&gt;[[nodiscard]]&lt;/code&gt;を追加した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#locale&#34; id=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conv::utf_to_utf&lt;/code&gt;でカスタムアロケータのサポートを追加した&lt;/li&gt;
&lt;li&gt;デフォルトでは例をビルドしないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; MinGW-w64でCMakeを使用してイベントログリソースファイルをコンパイルする際の&lt;code&gt;windres.exe&lt;/code&gt;の問題に対する回避策を追加した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1143&#34; target=&#34;_blank&#34;&gt;GitHub #1143&lt;/a&gt; 無限大でのベッセル関数の結果を修正した&lt;/li&gt;
&lt;li&gt;非中心T分布の数値的安定性を改善した。&lt;a href=&#34;https://github.com/scipy/scipy/issues/20693&#34; target=&#34;_blank&#34;&gt;scipy20693&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;無限大での&lt;code&gt;float_next&lt;/code&gt;/&lt;code&gt;float_prior&lt;/code&gt;の動作を修正した&lt;/li&gt;
&lt;li&gt;非中心ベータ分布での不要なアンダーフローを防止した。&lt;a href=&#34;https://github.com/scipy/scipy/issues/20693&#34; target=&#34;_blank&#34;&gt;scipy20693&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Heuman Lambdaの精度を改善した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/issues/1120&#34; target=&#34;_blank&#34;&gt;GitHub #1120&lt;/a&gt; 歪正規分布の根の発見を改善した&lt;/li&gt;
&lt;li&gt;多くの軽微な修正とコードカバレッジの改善を行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/618&#34; target=&#34;_blank&#34;&gt;GitHub #618&lt;/a&gt; 超大きな数値で&lt;code&gt;eval_convert_to()&lt;/code&gt;が終了しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sinc&lt;/code&gt;の実装をBoost.Mathの動作に合わせて修正した&lt;/li&gt;
&lt;li&gt;cpp_intの剰余演算でのゼロ除算を修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/626&#34; target=&#34;_blank&#34;&gt;GitHub #626&lt;/a&gt; 128ビットを超える整数のアンダーフロー動作の一貫性を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;長い間非推奨だった関数&lt;code&gt;query&lt;/code&gt;、&lt;code&gt;start_query&lt;/code&gt;、&lt;code&gt;execute_statement&lt;/code&gt;、&lt;code&gt;start_statement_execution&lt;/code&gt;（および非同期版）を削除した&lt;/li&gt;
&lt;li&gt;実験的APIへの破壊的変更:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;identifier&lt;/code&gt;クラス（クライアント側SQLフォーマット）が削除された。代わりに新しいフォーマット指定子機能を使用すること&lt;/li&gt;
&lt;li&gt;カスタムフォーマッタに必要なインターフェースが、新しいフォーマット指定子APIに対応するよう変更された&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection::async_connect&lt;/code&gt;は、その&lt;code&gt;connect_params&lt;/code&gt;引数が操作完了まで保持されることを要求するようになった&lt;code&gt;const connect_params*&lt;/code&gt;を取るオーバーロードは削除された&lt;/li&gt;
&lt;li&gt;MySQLの文字セット名にNULL文字を含めることができないため、&lt;code&gt;character_set::name&lt;/code&gt;は&lt;code&gt;string_view&lt;/code&gt;ではなく&lt;code&gt;const char*&lt;/code&gt;になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;の内部バッファは64MBに制限されるようになった。それ以上の大きな行の読み書きが必要な場合は、&lt;code&gt;any_connection_params::max_buffer_size&lt;/code&gt;を増やすこと。&lt;code&gt;connection&lt;/code&gt;とそのヘルパー型定義は制限されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any_connection_params::initial_read_buffer_size&lt;/code&gt;を&lt;code&gt;initial_buffer_size&lt;/code&gt;に名前変更した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pool_params::initial_read_buffer_size&lt;/code&gt;を&lt;code&gt;initial_buffer_size&lt;/code&gt;に名前変更した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しい実験的API: pipelines。パイプラインは複数のリクエストを1つのネットワークパケットにまとめることで効率を向上させることがでる。パイプラインはテキストクエリの実行、ステートメントの準備、実行、クローズ、セッション状態のリセット、接続の文字セットの設定に使用できる&lt;/li&gt;
&lt;li&gt;クライアント側SQLフォーマットが範囲をそのままサポートするようになった。新しい&lt;code&gt;sequence&lt;/code&gt;関数を使用してフォーマットをさらにカスタマイズできます。バッチ挿入やバッチ検索などのユースケースがこの機能を使用して大幅に簡素化できる&lt;/li&gt;
&lt;li&gt;クライアント側SQLフォーマットが値のフォーマット方法を変更するフォーマット指定子をサポートするようになった。&lt;code&gt;{:i}&lt;/code&gt;は文字列を動的SQLの識別子としてフォーマットし、&lt;code&gt;{:r}&lt;/code&gt;はエスケープされていない生の出力を行う&lt;/li&gt;
&lt;li&gt;静的インターフェース（&lt;code&gt;static_results&lt;/code&gt;と&lt;code&gt;static_execution_state&lt;/code&gt;）がBoost.Pfr型を&lt;code&gt;pfr_by_name&lt;/code&gt;と&lt;code&gt;pfr_by_position&lt;/code&gt;を使用してサポートするようになった。そのような型をサポートするために&lt;code&gt;underlying_row_t&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;と&lt;code&gt;datetime&lt;/code&gt;がC++20の&lt;code&gt;std::chrono::local_time&lt;/code&gt;から構築され、変換できるようになった&lt;/li&gt;
&lt;li&gt;接続の内部バッファに制限を設定できる&lt;code&gt;any_connection_params::max_buffer_size&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;致命的（接続を閉じて再開する必要がある）エラーコードと非致命的エラーコードを区別できる&lt;code&gt;is_fatal_error&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Formattable&lt;/code&gt;コンセプトを満たす任意の型を参照できる型消去された参照型&lt;code&gt;formattable_ref&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;異なる翻訳単位で&lt;code&gt;asio::coroutine&lt;/code&gt;を使用する他のコードと一緒にBoost.MySQLを使用した際にリリースビルドでクラッシュを引き起こす可能性があったMSVCでのODR違反を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#odeint&#34; id=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/odeint/issues/82&#34; target=&#34;_blank&#34;&gt;GitHub #82&lt;/a&gt; 依存関係を減らすためのCMakeオプション&lt;code&gt;BOOST_NUMERIC_ODEINT_NO_ADAPTORS&lt;/code&gt;を追加した&lt;/li&gt;
&lt;li&gt;MPIのCMake検出を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#process&#34; id=&#34;process&#34;&gt;Process&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;古いboost.processをv1サブフォルダとインラインネームスペースに移動した。&lt;code&gt;process/*.hpp&lt;/code&gt; v1ヘッダを非推奨にした&lt;/li&gt;
&lt;li&gt;v2をコンパイルライブラリに変更した&lt;/li&gt;
&lt;li&gt;alpine linux / muslでの使用を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; Windows用の任意の例外からスタックトレースを生成する機能を大きく追加した&lt;code&gt;std::stacktrace::from_current_exception()&lt;/code&gt;がWindows プラットフォームで動作するようになった。実装に貢献してくれた&lt;a href=&#34;https://github.com/huangqinjin&#34; target=&#34;_blank&#34;&gt;huangqinjin&lt;/a&gt;氏に大変感謝する&lt;ul&gt;
&lt;li&gt;現在、POSIXとWindowsの両方で、&lt;code&gt;from_current_exception()&lt;/code&gt;関数は例外がスローされた時点でのスタックトレースがキャプチャされたかのように、現在の例外オブジェクトのスタックトレースを返す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; めったに使用されないWindows SDKヘッダの包含を修正した。これによりWindows SDKを使用する他のコードとの競合が発生する可能性があった。この問題を修正してくれた&lt;a href=&#34;https://github.com/mabrarov&#34; target=&#34;_blank&#34;&gt;Marat Abrarov&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ビルドオプション&lt;code&gt;boost.stacktrace.from_exception&lt;/code&gt;がMacOSで正しく動作するようになった。修正してくれた&lt;a href=&#34;https://github.com/pdimov&#34; target=&#34;_blank&#34;&gt;Peter Dimov&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; アサート式のtypoを修正しました。バグ報告をしてくれた&lt;a href=&#34;https://github.com/Ukilele&#34; target=&#34;_blank&#34;&gt;Kilian Henneberger&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/141&#34; target=&#34;_blank&#34;&gt;GitHub #141&lt;/a&gt; シャドウイング警告を修正。バグ報告をしてくれた&lt;a href=&#34;https://github.com/nigels-com&#34; target=&#34;_blank&#34;&gt;Nigel Stewart&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/114&#34; target=&#34;_blank&#34;&gt;GitHub #114&lt;/a&gt; AIX用の&lt;code&gt;dladdr&lt;/code&gt;の最小限のサポートを追加。実装に貢献してくれたClément Chigot氏に大変感謝する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; プラットフォーム上で最もサポートされているBoost.Stacktraceの実装を参照するCMakeエイリアス&lt;code&gt;Boost::stacktrace&lt;/code&gt;を追加した。この機能を提供してくれた&lt;a href=&#34;https://github.com/leha-bot&#34; target=&#34;_blank&#34;&gt;Alex&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;CMakeの大幅な改善: 多数の修正、多くの新しいテストの追加、CIの改善。。すべての改善に貢献してくれた&lt;a href=&#34;https://github.com/pdimov&#34; target=&#34;_blank&#34;&gt;Peter Dimov&lt;/a&gt;氏に大変感謝する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; プロセスが&lt;code&gt;PATH&lt;/code&gt;経由で検索される場合のaddr2lineの動作を修正た。バグ報告をしてくれた&lt;a href=&#34;https://github.com/Schreischildkroete&#34; target=&#34;_blank&#34;&gt;Schreischildkroete&lt;/a&gt;氏と修正してくれた&lt;a href=&#34;https://github.com/j-jr-richter&#34; target=&#34;_blank&#34;&gt;Jens Richter&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンフィグレーションステップでの&lt;code&gt;-Wundef&lt;/code&gt;を修正した&lt;/li&gt;
&lt;li&gt;MSVCでの到達不能な&lt;code&gt;return&lt;/code&gt;のコンパイルエラーを修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;memory_resource&amp;gt;&lt;/code&gt;ヘッダが利用可能な場合に、コンテナの&lt;code&gt;pmr&lt;/code&gt;エイリアスを追加した。エイリアス&lt;code&gt;boost::unordered::pmr::[container]&lt;/code&gt;は、&lt;code&gt;std::pmr::polymorphic_allocator&lt;/code&gt;アロケータ型を持つ&lt;code&gt;boost::unordered::[container]&lt;/code&gt;を参照する&lt;/li&gt;
&lt;li&gt;オープンアドレッシングと並行コンテナが、ハッシュ関数の品質に影響される統計的メトリクスを内部で計算して提供するようになった。この機能はグローバルマクロ&lt;code&gt;BOOST_UNORDERED_ENABLE_STATS&lt;/code&gt;で有効化される&lt;/li&gt;
&lt;li&gt;アバランチングハッシュ関数は、埋め込まれた&lt;code&gt;value&lt;/code&gt;定数が&lt;code&gt;true&lt;/code&gt;に設定された&lt;code&gt;is_avalanching&lt;/code&gt;型定義でマークする必要がある（通常、&lt;code&gt;is_avalanching&lt;/code&gt;を&lt;code&gt;std::true_type&lt;/code&gt;として定義する）。&lt;code&gt;using is_avalanching = void&lt;/code&gt;は後方互換性のために許可されているが、非推奨である&lt;/li&gt;
&lt;li&gt;コンテナとイテレータのVisual Studio Natvisフレームワークのカスタムビジュアライゼーションを追加した。これは生ポインタを使用するアロケータを持つすべてのコンテナで動作する。このリリースでは、アロケータがファンシーポインタを使用する場合、コンテナとイテレータはサポートされない。これは後のリリースで対応される可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#uuid&#34; id=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メジャーアップデート&lt;/li&gt;
&lt;li&gt;C++03のサポートを終了。C++11コンパイラが必要となる (これにはGCC 4.8以降、MSVC 14.0 (VS 2015)以降、MinGW-w64が含まれる)&lt;/li&gt;
&lt;li&gt;Boostの依存関係の数を39（合計）からわずか5に減らした&lt;/li&gt;
&lt;li&gt;新しい&lt;a href=&#34;https://datatracker.ietf.org/doc/rfc9562/&#34; target=&#34;_blank&#34;&gt;RFC 9562&lt;/a&gt;を反映するように更新した&lt;/li&gt;
&lt;li&gt;時間ベースのUUID生成器を追加した&lt;/li&gt;
&lt;li&gt;その他の多く改善があります。&lt;a href=&#34;https://www.boost.org/doc/libs/1_85_0/libs/uuid/doc/html/uuid.html#changes&#34; target=&#34;_blank&#34;&gt;変更履歴&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vsprintfの1つの使用をより安全なvsnprintfに置き換えた&lt;/li&gt;
&lt;li&gt;バグ修正:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/197&#34; target=&#34;_blank&#34;&gt;GitHub #197&lt;/a&gt;: 不適切な符号付きオーバーフロー処理（未定義動作と欠落した除算チェック）を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_USE_WINAPI_VERSION&lt;/code&gt; CMakeオプションを追加した。これにより、ユーザーはBoostがターゲットとするWindowsのバージョンを指定できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#boostbook&#34; id=&#34;boostbook&#34;&gt;BoostBook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DTDを更新: &lt;code&gt;constructor&lt;/code&gt;、&lt;code&gt;copy-assignment&lt;/code&gt;、&lt;code&gt;destructor&lt;/code&gt;要素が&lt;code&gt;method-group&lt;/code&gt;要素内で許可されるようになった&lt;/li&gt;
&lt;li&gt;Doxygen生成ドキュメントに多くの修正と改善:&lt;ul&gt;
&lt;li&gt;Doxygen生成の列挙型値初期化子での重複等号を修正した&lt;/li&gt;
&lt;li&gt;関数引数のアルファベット順ソートを無効にした。新しい&lt;code&gt;boost.sort.params&lt;/code&gt;XSLパラメータを1に設定することで、ソートを再度有効にできる&lt;/li&gt;
&lt;li&gt;カスタムクラスメンバーのグループ化のサポートを追加した。Doxygenタグ&lt;code&gt;@name&lt;/code&gt;と&lt;code&gt;@{&lt;/code&gt;/&lt;code&gt;@}&lt;/code&gt;を参照&lt;/li&gt;
&lt;li&gt;クラス、メソッド、列挙型、変数などへのDoxygenリファレンスのサポートを追加した（&lt;code&gt;@ref&lt;/code&gt;タグを参照）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@remark&lt;/code&gt;と&lt;code&gt;@important&lt;/code&gt;タグのサポートを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@parblock&lt;/code&gt;タグのサポートを追加した。これは単一の段落を引数として期待するタグ（例：&lt;code&gt;@returns&lt;/code&gt;）の下に複数の段落を配置するのに使用できる&lt;/li&gt;
&lt;li&gt;実装の詳細を参照するテンプレートパラメータのデフォルトが、関数パラメータのデフォルトと同様に隠蔽されるようになった&lt;/li&gt;
&lt;li&gt;名前のない列挙型の表示を改善した。&lt;code&gt;@0&lt;/code&gt;のような合成名を表示する代わりに、名前は省略されるか、列挙型ドキュメントへのリンクを導入するために必要な場合は&lt;code&gt;[unnamed]&lt;/code&gt;になる&lt;/li&gt;
&lt;li&gt;&#34;See Also&#34;（&lt;code&gt;@sa&lt;/code&gt;）ブロックを&#34;Returns&#34;と同様にインラインで表示するように変更した&lt;/li&gt;
&lt;li&gt;複数の例外仕様（&lt;code&gt;@throws&lt;/code&gt;）の表示を修正した&lt;/li&gt;
&lt;li&gt;投げる動作の自由形式の説明のサポートを追加しました。&lt;code&gt;@throws&lt;/code&gt;タグの後の例外タイプが&lt;code&gt;&#34;~&#34;&lt;/code&gt;の場合、例外型は出力から省略され、以下の説明が&#34;Throws&#34;セクションに直接表示される&lt;/li&gt;
&lt;li&gt;戻り値の型とテンプレートパラメータの冗長なスペースを削除した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/doc/libs/release/tools/build/doc/html/index.html#b2.history&#34; target=&#34;_blank&#34;&gt;B2バージョン5.2.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>