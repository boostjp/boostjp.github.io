<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-12-10T14:04:22.637221</updated>
  <id>17d4c963-f41b-45b5-88c6-a6d790a551a1</id>

  
    <entry>
      <title>Boost 1.xx.0リリースノート -- リリースノートの雛形 : タブをスペースに修正</title>
      <link href="https://boostjp.github.io/document/version/template.html"/>
      <id>33caf257e8450a8113a37ca5a6c39680684b642f:document/version/template.md</id>
      <updated>2019-12-09T17:08:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.xx.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_xx_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_xx_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_xx_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_xx_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#one&#34;&gt;One&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#two&#34;&gt;Two&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#three&#34;&gt;Three&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#one&#34; id=&#34;One&#34;&gt;One&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;blahblahblah&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#two&#34; id=&#34;Two&#34;&gt;Two&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt; ticket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/XXX/pull/XX&#34; target=&#34;_blank&#34;&gt;pull request XX&lt;/a&gt; GitHub PR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#three&#34; id=&#34;Three&#34;&gt;Three&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: &lt;code&gt;boost::xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trailing &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Someone&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : テスト済みコンパイラを追加</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>e10cddcb1529cd2f76e56235d7e3e63705f60846:document/version/1_72_0.md</id>
      <updated>2019-12-09T17:08:02+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/309&#34; target=&#34;_blank&#34;&gt;GitHub #309&lt;/a&gt; GSoC 2019: 画像を縮小するLanczos resampling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; GSoC 2019: バイナリ閾値化 (binary thresholding)、逆バイナリ閾値化 (inverted binary thresholding)、切り詰め閾値化 (truncation thresholding) の機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; GSoC 2019: Otsu thresholding method&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/315&#34; target=&#34;_blank&#34;&gt;GitHub #315&lt;/a&gt; Adaptive thresholdingに、周辺域のmeanもしくはgaussian-weighted sumを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/350&#34; target=&#34;_blank&#34;&gt;GitHub #350&lt;/a&gt; GSoC 2019: Harrisレスポンス計算 (non-maximum filteringをともなわないコーナー検出)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; GSoC 2019: Hessianコーナー検出&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/361&#34; target=&#34;_blank&#34;&gt;GitHub #361&lt;/a&gt; GSoC 2019: 数値拡張に2Dカーネルの型として、&lt;code&gt;kernel_2d&lt;/code&gt;と&lt;code&gt;kernel_2d_fixed&lt;/code&gt;を定義&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/367&#34; target=&#34;_blank&#34;&gt;GitHub #367&lt;/a&gt; GSoC 2019: 2D convolutionの関数として&lt;code&gt;convolve_2d&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: Box filteringとしてaverage filterを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: normalized mean filterをベースにしたブラー関数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/392&#34; target=&#34;_blank&#34;&gt;GitHub #392&lt;/a&gt; GSoC 2019: Sobel and Scharr operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/393&#34; target=&#34;_blank&#34;&gt;GitHub #393&lt;/a&gt; GSoC 2019: 画像のノイズ除去のためのMedian filter&lt;/li&gt;
&lt;li&gt;継続的に新たなテストを追加し、全体的なテストカバレッジを大幅に改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; &lt;code&gt;cached_location_t&lt;/code&gt;の目的をドキュメント化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/347&#34; target=&#34;_blank&#34;&gt;GitHub #347&lt;/a&gt; 数値拡張に、&lt;code&gt;convolve_rows&lt;/code&gt;と&lt;code&gt;convolve_cols&lt;/code&gt;を便利に使うための&lt;code&gt;convolve_1d&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/386&#34; target=&#34;_blank&#34;&gt;GitHub #386&lt;/a&gt; 数値拡張に、画像境界の拡張 (image boundary extension) のため&lt;code&gt;extend_boundary&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/404&#34; target=&#34;_blank&#34;&gt;GitHub #404&lt;/a&gt; プロジェクトのリリースノートとして&lt;code&gt;RELEASES.md&lt;/code&gt;をメンテナンスした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/302&#34; target=&#34;_blank&#34;&gt;GitHub #302&lt;/a&gt; コア機能と拡張を含む全てのテストを&lt;code&gt;/test&lt;/code&gt;ディレクトリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.MPLをBoost.MP11で置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.TypeTraitsの使用をやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/296&#34; target=&#34;_blank&#34;&gt;GitHub #296&lt;/a&gt; GCC &amp;lt;= 4.8のサポートをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/403&#34; target=&#34;_blank&#34;&gt;GitHub #403&lt;/a&gt; 未使用の&lt;code&gt;include/boost/gil/version.hpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/273&#34; target=&#34;_blank&#34;&gt;GitHub #273&lt;/a&gt; デフォルト初期化された&lt;code&gt;channel&lt;/code&gt;と&lt;code&gt;pixel&lt;/code&gt;オブジェクトの未初期化値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt; &lt;code&gt;std::is_trivially_default_constructible&lt;/code&gt;の特殊化による未定義動作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/385&#34; target=&#34;_blank&#34;&gt;GitHub #385&lt;/a&gt; 不正なヘッダをもつPNGを読むとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;多くの型にRule of Threeを適用 (デストラクタ、コピーコンストラクタ、コピー代入演算子)&lt;/li&gt;
&lt;li&gt;非推奨だった、暗黙定義されるコピーコンストラクタとコピー代入演算子を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超幾何関数 (Hypergeometric functions) として、1F0、0F1、2F0、1F1、pFqを追加&lt;/li&gt;
&lt;li&gt;ヤコビ多項式 (Jacobi polynomial) と導関数 (derivatives) の評価を追加&lt;/li&gt;
&lt;li&gt;ゲーゲンバウアー多項式 (Gegenbauer polynomial) と導関数の評価を追加&lt;/li&gt;
&lt;li&gt;カーディナルB-スプライン曲線 (Cardinal B-Splines) と導関数を多項式として追加&lt;/li&gt;
&lt;li&gt;カーディナル三角補間 (Cardinal Trigonometric Interpolation) を追加&lt;/li&gt;
&lt;li&gt;小区分 (sub-section) の統計を追加&lt;/li&gt;
&lt;li&gt;1標本t検定 (One Sample Student&#39;s T Test) を追加&lt;/li&gt;
&lt;li&gt;正規性のために、アンダーソン–ダーリング検定 (Anderson Darling test) を追加&lt;/li&gt;
&lt;li&gt;自動訂正のために、リュング・ボックス検定 (Ljung Box test) を追加&lt;/li&gt;
&lt;li&gt;ランダムなシーケンスのために、ラン検定 (Runs test) を追加&lt;/li&gt;
&lt;li&gt;ヘッダ&lt;code&gt;boost/math/tools/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/tools/bivariate_statistics.hpp&lt;/code&gt;を非推奨化し、&lt;code&gt;boost/math/statistics/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/statistics/bivariate_statistics.hpp&lt;/code&gt;を推奨&lt;/li&gt;
&lt;li&gt;経験累積分布 (Empirical CDF distribution) を追加&lt;/li&gt;
&lt;li&gt;ランチョス近似 (Lanczos approximation) を通常の精度で使用するすべての関数に適用できるように、多精度ガンマ関数で使用されるスターリング近似 (Sterling approximation) を作り直した。また、Lanczos近似を10進数100桁精度まで拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;で大きな更新をし、GCCとClang 9以降もしくは&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;を使用できるコンパイラで、&lt;code&gt;cpp_int&lt;/code&gt;と&lt;code&gt;float128&lt;/code&gt;の算術演算を完全に&lt;code&gt;constexpr&lt;/code&gt;化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; 可変精度&lt;code&gt;mpf_float&lt;/code&gt;で、正しい精度を選択しようしとしてテールスピン (tailspin) に陥るバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.12&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断 (Mikhail Pilin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;Issue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/206&#34; target=&#34;_blank&#34;&gt;GitHub #206&lt;/a&gt; コンパイル時に無効化されたテストが、JUNITのログで正しく処理されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; テンプレートタイプに複数のパラメータが含まれている場合に、名前によるフィルタテストができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; 非推奨の&lt;code&gt;std::random_shuffle&lt;/code&gt;を使用しないよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/227&#34; target=&#34;_blank&#34;&gt;GitHub #227&lt;/a&gt; &lt;code&gt;report_error&lt;/code&gt;に、printfフォーマットのチェック属性を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; OpenBSDに&lt;code&gt;SI_ASYNCIO&lt;/code&gt;と&lt;code&gt;SI_MESGQ&lt;/code&gt;がなかったので存在チェックを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/232&#34; target=&#34;_blank&#34;&gt;GitHub #232&lt;/a&gt; Windowsでのタイムアウトを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Disjoint Sets（互いに素な集合） -- Merge pull request #418 from KisaragiEffective/patch-1</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html"/>
      <id>3c2928a6d49526727c0a39ec491c1c546e75a856:archive/boost_docs/libs/disjoint_sets.md</id>
      <updated>2019-12-09T12:24:34+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Disjoint Sets（互いに素な集合）&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/disjoint_sets/disjoint_sets.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/disjoint_sets/disjoint_sets.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このクラスは、互いに素な集合（素集合）の演算に 順位による和集合 および パス圧縮 を提供する。disjoint-sets のデータ構造は、素集合の S = {S&lt;sub&gt;1&lt;/sub&gt;, S&lt;sub&gt;2&lt;/sub&gt;, ..., S&lt;sub&gt;k&lt;/sub&gt;} というコレクションを維持する。 各集合は、集合のいくつかの要素である 代表値 によって識別される。 集合は、Parent プロパティマップの中の符号化された有向木によって表わされる。 2つの発見的手法: 「順位による和集合」 および 「パス圧縮」 は、 演算を高速化するのに使われる  [&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#tarjan83&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#clr90&#34;&gt;2&lt;/a&gt;]。&lt;/p&gt;
&lt;h2&gt;Where Defined&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;boost/disjoint_sets.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Template Parameters&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Rank&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値型が整数型で、キー型が集合の要素型と等しい &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;ReadWritePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Parent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;ReadWritePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルで、かつ、キー型および値型は集合の要素型と等しくなければならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FindCompress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表値の検索およびパス圧縮関数オブジェクトのうちの 1つであるべきだ。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;disjoint_sets&lt;/code&gt; に対する典型的な使用法の手本は &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/kruskal_minimum_spanning_tree.md.nolink&#34;&gt;kruskal_minimum_spanning_tree()&lt;/a&gt;&lt;/code&gt; アルゴリズムで見ることができる。 この例では、&lt;code&gt;union_set()&lt;/code&gt; の代わりに &lt;code&gt;link()&lt;/code&gt; を呼び出す。 なぜなら、&lt;code&gt;u&lt;/code&gt; および &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;find_set()&lt;/code&gt; から得られ、したがって、既にそれら集合の代表値であるからだ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;disjoint_sets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Members&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メンバ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disjoint_sets(Rank r, Parent p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disjoint_sets(const disjoint_sets&amp;amp; x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void make_set(Element x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Element x&lt;/code&gt; を含む単集合を作成する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void link(Element x, Element y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; で表わされる 2つの集合を結合する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void union_set(Element x, Element y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; を含む 2つの集合を結合する。 これは、&lt;code&gt;link(find_set(x),find_set(y))&lt;/code&gt; に相当する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;Element find_set(Element x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;x&lt;/code&gt; を含む集合のための代表値を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class ElementIterator&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;std::size_t count_sets(ElementIterator first, ElementIterator last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;素集合の個数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class ElementIterator&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void compress_sets(ElementIterator first, ElementIterator last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべての要素の親がその代表値であるように親ツリーを平滑化する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Complexity&lt;/h2&gt;
&lt;p&gt;時間計算量は、O(m alpha(m,n)) である。alpha は逆アッカーマン関数、 m は disjoint-set の演算（&lt;code&gt;make_set()&lt;/code&gt;、&lt;code&gt;find_set()&lt;/code&gt;、および &lt;code&gt;link()&lt;/code&gt;）の総数、n は要素数である。 alpha 関数はとても遅く、log 関数よりもはるかに遅くなる。&lt;/p&gt;
&lt;p&gt;参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/incremental_connected_components.md.nolink&#34;&gt;incremental_connected_components()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このクラスは、順位および親のプロパティのための記憶領域を内部で管理する。 記憶領域は、要素IDにより索引付けされた配列の中にある。ゆえに、ID および InverseID ファンクタを必要とする。 順位および親のプロパティは、構築中に初期化される、 したがって、各要素は自動的に集合の中にある（従って、このクラスのオブジェクトを &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/incremental_components.md.nolink#sec:initialize-incremental-components&#34;&gt;initialize_incremental_components()&lt;/a&gt;&lt;/code&gt; 関数で初期化することは必要でない。）。 このクラスは、頂点プロパティを格納する場所を提供しない &lt;code&gt;edge_list&lt;/code&gt; グラフの（動的）接続している構成要素を計算する場合に特に有用である。&lt;/p&gt;
&lt;h2&gt;Template Parameters&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0からN（集合中の要素の総数）までの整数に要素を対応付ける &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;ReadablePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::identity_property_map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;InverseID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素に整数を対応付ける &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;ReadablePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::identity_property_map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FindCompress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表値の検索およびパス圧縮関数オブジェクトのうちの 1つであるべきだ。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;representative_with_full_path_compression&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Members&lt;/h2&gt;
&lt;p&gt;このクラスは、以下のメンバだけでなく &lt;code&gt;disjoint_sets&lt;/code&gt; のすべてのメンバも持っている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                           &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                           &lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;コンストラクタ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ElementIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;normalize_sets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ElementIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ElementIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;各集合の代表値が最も小さな ID を備えた要素になるように代表値を再整理する。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事後条件: &lt;code&gt;v &amp;gt;= parent[v]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事前条件: 素集合の構造は圧縮されていなければならない。 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;representative_with_path_halving&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは、要素 &lt;code&gt;x&lt;/code&gt; と同じ構成要素のための代表的な頂点を検索するファンクタである。 代表値木を横断している間、ファンクタは、さらに木の高さを短くするためにパス二分技術を適用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;representative_with_full_path_compression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは、要素 &lt;code&gt;x&lt;/code&gt; が属する集合のための代表的な要素を検索するファンクタである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:jsiek@lsc.nd.edu&#34;&gt;jsiek@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lsc.nd.edu/~llee1&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:llee1@lsc.nd.edu&#34;&gt;llee1@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lsc.nd.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:lums@lsc.nd.edu&#34;&gt;lums@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 IKOMA Yoshiki &lt;a href=&#34;mailto:ikoma@mb.i-chubu.ne.jp&#34;&gt;ikoma@mb.i-chubu.ne.jp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Disjoint Sets（互いに素な集合） -- Update disjoint_sets.md</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html"/>
      <id>3f267d06e0788123287714b76d3bda5cd77c4732:archive/boost_docs/libs/disjoint_sets.md</id>
      <updated>2019-12-09T12:23:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Disjoint Sets（互いに素な集合）&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/disjoint_sets/disjoint_sets.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/disjoint_sets/disjoint_sets.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このクラスは、互いに素な集合（素集合）の演算に 順位による和集合 および パス圧縮 を提供する。disjoint-sets のデータ構造は、素集合の S = {S&lt;sub&gt;1&lt;/sub&gt;, S&lt;sub&gt;2&lt;/sub&gt;, ..., S&lt;sub&gt;k&lt;/sub&gt;} というコレクションを維持する。 各集合は、集合のいくつかの要素である 代表値 によって識別される。 集合は、Parent プロパティマップの中の符号化された有向木によって表わされる。 2つの発見的手法: 「順位による和集合」 および 「パス圧縮」 は、 演算を高速化するのに使われる  [&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#tarjan83&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#clr90&#34;&gt;2&lt;/a&gt;]。&lt;/p&gt;
&lt;h2&gt;Where Defined&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;boost/disjoint_sets.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Template Parameters&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Rank&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値型が整数型で、キー型が集合の要素型と等しい &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;ReadWritePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Parent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.md.nolink&#34;&gt;ReadWritePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルで、かつ、キー型および値型は集合の要素型と等しくなければならない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FindCompress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表値の検索およびパス圧縮関数オブジェクトのうちの 1つであるべきだ。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;disjoint_sets&lt;/code&gt; に対する典型的な使用法の手本は &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/kruskal_minimum_spanning_tree.md.nolink&#34;&gt;kruskal_minimum_spanning_tree()&lt;/a&gt;&lt;/code&gt; アルゴリズムで見ることができる。 この例では、&lt;code&gt;union_set()&lt;/code&gt; の代わりに &lt;code&gt;link()&lt;/code&gt; を呼び出す。 なぜなら、&lt;code&gt;u&lt;/code&gt; および &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;find_set()&lt;/code&gt; から得られ、したがって、既にそれら集合の代表値であるからだ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;disjoint_sets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vertices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Members&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メンバ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disjoint_sets(Rank r, Parent p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disjoint_sets(const disjoint_sets&amp;amp; x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void make_set(Element x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Element x&lt;/code&gt; を含む単集合を作成する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void link(Element x, Element y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; で表わされる 2つの集合を結合する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void union_set(Element x, Element y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; を含む 2つの集合を結合する。 これは、&lt;code&gt;link(find_set(x),find_set(y))&lt;/code&gt; に相当する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Element&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;Element find_set(Element x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素 &lt;code&gt;x&lt;/code&gt; を含む集合のための代表値を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class ElementIterator&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;std::size_t count_sets(ElementIterator first, ElementIterator last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;素集合の個数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class ElementIterator&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void compress_sets(ElementIterator first, ElementIterator last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべての要素の親がその代表値であるように親ツリーを平滑化する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Complexity&lt;/h2&gt;
&lt;p&gt;時間計算量は、O(m alpha(m,n)) である。alpha は逆アッカーマン関数、 m は disjoint-set の演算（&lt;code&gt;make_set()&lt;/code&gt;、&lt;code&gt;find_set()&lt;/code&gt;、および &lt;code&gt;link()&lt;/code&gt;）の総数、n は要素数である。 alpha 関数はとても遅く、log 関数よりもはるかに遅くなる。&lt;/p&gt;
&lt;p&gt;参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/incremental_connected_components.md.nolink&#34;&gt;incremental_connected_components()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FindCompress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このクラスは、順位および親のプロパティのための記憶領域を内部で管理する。 記憶領域は、要素IDにより索引付けされた配列の中にある。ゆえに、ID および InverseID ファンクタを必要とする。 順位および親のプロパティは、構築中に初期化される、 したがって、各要素は自動的に集合の中にある（従って、このクラスのオブジェクトを &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph/incremental_components.md.nolink#sec:initialize-incremental-components&#34;&gt;initialize_incremental_components()&lt;/a&gt;&lt;/code&gt; 関数で初期化することは必要でない。）。 このクラスは、頂点プロパティを格納する場所を提供しない &lt;code&gt;edge_list&lt;/code&gt; グラフの（動的）接続している構成要素を計算する場合に特に有用である。&lt;/p&gt;
&lt;h2&gt;Template Parameters&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0からN（集合中の要素の総数）までの整数に要素を対応付ける &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;ReadablePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::identity_property_map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;InverseID&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素に整数を対応付ける &lt;code&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.md.nolink&#34;&gt;ReadablePropertyMap&lt;/a&gt;&lt;/code&gt; のモデルでなければならない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::identity_property_map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FindCompress&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代表値の検索およびパス圧縮関数オブジェクトのうちの 1つであるべきだ。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;representative_with_full_path_compression&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Members&lt;/h2&gt;
&lt;p&gt;このクラスは、以下のメンバだけでなく &lt;code&gt;disjoint_sets&lt;/code&gt; のすべてのメンバも持っている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                           &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
                           &lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InverseID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;コンストラクタ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ElementIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disjoint_sets_with_storage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;normalize_sets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ElementIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ElementIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;各集合の代表値が最も小さな ID を備えた要素になるように代表値を再整理する。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事後条件: &lt;code&gt;v &amp;gt;= parent[v]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事前条件: 素集合の構造は圧縮されていなければならない。 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;representative_with_path_halving&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは、要素 &lt;code&gt;x&lt;/code&gt; と同じ構成要素のための代表的な頂点を検索するファンクタである。 代表値木を横断している間、ファンクタは、さらに木の高さを短くするためにパス二分技術を適用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;representative_with_full_path_compression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは、要素 &lt;code&gt;x&lt;/code&gt; が属する集合のための代表的な要素を検索するファンクタである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:jsiek@lsc.nd.edu&#34;&gt;jsiek@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lsc.nd.edu/~llee1&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:llee1@lsc.nd.edu&#34;&gt;llee1@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lsc.nd.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;mailto:lums@lsc.nd.edu&#34;&gt;lums@lsc.nd.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 IKOMA Yoshiki &lt;a href=&#34;mailto:ikoma@mb.i-chubu.ne.jp&#34;&gt;ikoma@mb.i-chubu.ne.jp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>KisaragiEffective</name>
        <email>48310258+KisaragiEffective@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Multiprecisionを追加 (close #417)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>03fe7c3cafafcca06c957ffa94f81fe741dc5d76:document/version/1_72_0.md</id>
      <updated>2019-12-05T16:54:53+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/309&#34; target=&#34;_blank&#34;&gt;GitHub #309&lt;/a&gt; GSoC 2019: 画像を縮小するLanczos resampling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; GSoC 2019: バイナリ閾値化 (binary thresholding)、逆バイナリ閾値化 (inverted binary thresholding)、切り詰め閾値化 (truncation thresholding) の機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; GSoC 2019: Otsu thresholding method&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/315&#34; target=&#34;_blank&#34;&gt;GitHub #315&lt;/a&gt; Adaptive thresholdingに、周辺域のmeanもしくはgaussian-weighted sumを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/350&#34; target=&#34;_blank&#34;&gt;GitHub #350&lt;/a&gt; GSoC 2019: Harrisレスポンス計算 (non-maximum filteringをともなわないコーナー検出)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; GSoC 2019: Hessianコーナー検出&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/361&#34; target=&#34;_blank&#34;&gt;GitHub #361&lt;/a&gt; GSoC 2019: 数値拡張に2Dカーネルの型として、&lt;code&gt;kernel_2d&lt;/code&gt;と&lt;code&gt;kernel_2d_fixed&lt;/code&gt;を定義&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/367&#34; target=&#34;_blank&#34;&gt;GitHub #367&lt;/a&gt; GSoC 2019: 2D convolutionの関数として&lt;code&gt;convolve_2d&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: Box filteringとしてaverage filterを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: normalized mean filterをベースにしたブラー関数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/392&#34; target=&#34;_blank&#34;&gt;GitHub #392&lt;/a&gt; GSoC 2019: Sobel and Scharr operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/393&#34; target=&#34;_blank&#34;&gt;GitHub #393&lt;/a&gt; GSoC 2019: 画像のノイズ除去のためのMedian filter&lt;/li&gt;
&lt;li&gt;継続的に新たなテストを追加し、全体的なテストカバレッジを大幅に改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; &lt;code&gt;cached_location_t&lt;/code&gt;の目的をドキュメント化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/347&#34; target=&#34;_blank&#34;&gt;GitHub #347&lt;/a&gt; 数値拡張に、&lt;code&gt;convolve_rows&lt;/code&gt;と&lt;code&gt;convolve_cols&lt;/code&gt;を便利に使うための&lt;code&gt;convolve_1d&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/386&#34; target=&#34;_blank&#34;&gt;GitHub #386&lt;/a&gt; 数値拡張に、画像境界の拡張 (image boundary extension) のため&lt;code&gt;extend_boundary&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/404&#34; target=&#34;_blank&#34;&gt;GitHub #404&lt;/a&gt; プロジェクトのリリースノートとして&lt;code&gt;RELEASES.md&lt;/code&gt;をメンテナンスした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/302&#34; target=&#34;_blank&#34;&gt;GitHub #302&lt;/a&gt; コア機能と拡張を含む全てのテストを&lt;code&gt;/test&lt;/code&gt;ディレクトリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.MPLをBoost.MP11で置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.TypeTraitsの使用をやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/296&#34; target=&#34;_blank&#34;&gt;GitHub #296&lt;/a&gt; GCC &amp;lt;= 4.8のサポートをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/403&#34; target=&#34;_blank&#34;&gt;GitHub #403&lt;/a&gt; 未使用の&lt;code&gt;include/boost/gil/version.hpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/273&#34; target=&#34;_blank&#34;&gt;GitHub #273&lt;/a&gt; デフォルト初期化された&lt;code&gt;channel&lt;/code&gt;と&lt;code&gt;pixel&lt;/code&gt;オブジェクトの未初期化値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt; &lt;code&gt;std::is_trivially_default_constructible&lt;/code&gt;の特殊化による未定義動作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/385&#34; target=&#34;_blank&#34;&gt;GitHub #385&lt;/a&gt; 不正なヘッダをもつPNGを読むとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;多くの型にRule of Threeを適用 (デストラクタ、コピーコンストラクタ、コピー代入演算子)&lt;/li&gt;
&lt;li&gt;非推奨だった、暗黙定義されるコピーコンストラクタとコピー代入演算子を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超幾何関数 (Hypergeometric functions) として、1F0、0F1、2F0、1F1、pFqを追加&lt;/li&gt;
&lt;li&gt;ヤコビ多項式 (Jacobi polynomial) と導関数 (derivatives) の評価を追加&lt;/li&gt;
&lt;li&gt;ゲーゲンバウアー多項式 (Gegenbauer polynomial) と導関数の評価を追加&lt;/li&gt;
&lt;li&gt;カーディナルB-スプライン曲線 (Cardinal B-Splines) と導関数を多項式として追加&lt;/li&gt;
&lt;li&gt;カーディナル三角補間 (Cardinal Trigonometric Interpolation) を追加&lt;/li&gt;
&lt;li&gt;小区分 (sub-section) の統計を追加&lt;/li&gt;
&lt;li&gt;1標本t検定 (One Sample Student&#39;s T Test) を追加&lt;/li&gt;
&lt;li&gt;正規性のために、アンダーソン–ダーリング検定 (Anderson Darling test) を追加&lt;/li&gt;
&lt;li&gt;自動訂正のために、リュング・ボックス検定 (Ljung Box test) を追加&lt;/li&gt;
&lt;li&gt;ランダムなシーケンスのために、ラン検定 (Runs test) を追加&lt;/li&gt;
&lt;li&gt;ヘッダ&lt;code&gt;boost/math/tools/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/tools/bivariate_statistics.hpp&lt;/code&gt;を非推奨化し、&lt;code&gt;boost/math/statistics/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/statistics/bivariate_statistics.hpp&lt;/code&gt;を推奨&lt;/li&gt;
&lt;li&gt;経験累積分布 (Empirical CDF distribution) を追加&lt;/li&gt;
&lt;li&gt;ランチョス近似 (Lanczos approximation) を通常の精度で使用するすべての関数に適用できるように、多精度ガンマ関数で使用されるスターリング近似 (Sterling approximation) を作り直した。また、Lanczos近似を10進数100桁精度まで拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;で大きな更新をし、GCCとClang 9以降もしくは&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;を使用できるコンパイラで、&lt;code&gt;cpp_int&lt;/code&gt;と&lt;code&gt;float128&lt;/code&gt;の算術演算を完全に&lt;code&gt;constexpr&lt;/code&gt;化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; 可変精度&lt;code&gt;mpf_float&lt;/code&gt;で、正しい精度を選択しようしとしてテールスピン (tailspin) に陥るバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.12&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断 (Mikhail Pilin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;Issue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/206&#34; target=&#34;_blank&#34;&gt;GitHub #206&lt;/a&gt; コンパイル時に無効化されたテストが、JUNITのログで正しく処理されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; テンプレートタイプに複数のパラメータが含まれている場合に、名前によるフィルタテストができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; 非推奨の&lt;code&gt;std::random_shuffle&lt;/code&gt;を使用しないよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/227&#34; target=&#34;_blank&#34;&gt;GitHub #227&lt;/a&gt; &lt;code&gt;report_error&lt;/code&gt;に、printfフォーマットのチェック属性を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; OpenBSDに&lt;code&gt;SI_ASYNCIO&lt;/code&gt;と&lt;code&gt;SI_MESGQ&lt;/code&gt;がなかったので存在チェックを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/232&#34; target=&#34;_blank&#34;&gt;GitHub #232&lt;/a&gt; Windowsでのタイムアウトを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>