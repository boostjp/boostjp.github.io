<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2021-03-07T14:39:52.649889</updated>
  <id>ee671f8b-76cd-47d9-b9a9-2ba04b128f53</id>

  
    <entry>
      <title>Rational Numbers -- Merge pull request #528 from Jumpaku/patch-1</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/rational/rational.html"/>
      <id>b570180b22746b1e39826c46cb99e6d1be946edc:archive/boost_docs/libs/rational/rational.md</id>
      <updated>2021-02-27T08:06:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/rational/rational.md b/archive/boost_docs/libs/rational/rational.md
index adaf24e..0180bde 100644
--- a/archive/boost_docs/libs/rational/rational.md
+++ b/archive/boost_docs/libs/rational/rational.md
@@ -305,8 +305,8 @@ Float rational_cast(const rational&amp;lt;Int&amp;gt;&amp;amp; src)
 	このほかに、コンストラクタ・代入・０との比較が行われるが、これらの負荷は剰余演算に比べると、取るに足らないものである。
 - `lcm()` 関数は、本質的に `gcd()` を算出した後、２回の乗算と（１回の）除算を行うものである。
 - 加算と減算は複雑である。
-	加算と減算には基本要素となる整数型上で、平均して２回の `gcm()` 、３回の除算、３回の乗算と１回の加算が必要である。
-- 乗算と除算には、２回の ``gcd()、２回の乗算、そして、４回の除算が必要である。
+	加算と減算には基本要素となる整数型上で、平均して２回の `gcd()` 、３回の除算、３回の乗算と１回の加算が必要である。
+- 乗算と除算には、２回の `gcd()` 、２回の乗算、そして、４回の除算が必要である。
 - 比較演算子の実行には、最悪の場合、２回の `gcd()` , ２回の乗算、４回の除算、そして比較が必要である。
 	しかしながら、`int` タイプにおける比較演算のコストが低い（そして、０との比較はさらに低コストである）と仮定すると、比較演算のオーバーヘッドを下げることのできる特別なケースがいくつか存在する。
 	特に、 `==` と `!=` の実行時間は、基本要素となる整数型の比較時間程度のコストで終了する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Rational Numbers -- fix: Fix typo (gcm -&gt; gcd, ``gcd() -&gt; `gcd()`)</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/rational/rational.html"/>
      <id>f4b35897f119e7b9724dc9ccf7336774c0c427f8:archive/boost_docs/libs/rational/rational.md</id>
      <updated>2021-02-27T07:52:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/rational/rational.md b/archive/boost_docs/libs/rational/rational.md
index adaf24e..0180bde 100644
--- a/archive/boost_docs/libs/rational/rational.md
+++ b/archive/boost_docs/libs/rational/rational.md
@@ -305,8 +305,8 @@ Float rational_cast(const rational&amp;lt;Int&amp;gt;&amp;amp; src)
 	このほかに、コンストラクタ・代入・０との比較が行われるが、これらの負荷は剰余演算に比べると、取るに足らないものである。
 - `lcm()` 関数は、本質的に `gcd()` を算出した後、２回の乗算と（１回の）除算を行うものである。
 - 加算と減算は複雑である。
-	加算と減算には基本要素となる整数型上で、平均して２回の `gcm()` 、３回の除算、３回の乗算と１回の加算が必要である。
-- 乗算と除算には、２回の ``gcd()、２回の乗算、そして、４回の除算が必要である。
+	加算と減算には基本要素となる整数型上で、平均して２回の `gcd()` 、３回の除算、３回の乗算と１回の加算が必要である。
+- 乗算と除算には、２回の `gcd()` 、２回の乗算、そして、４回の除算が必要である。
 - 比較演算子の実行には、最悪の場合、２回の `gcd()` , ２回の乗算、４回の除算、そして比較が必要である。
 	しかしながら、`int` タイプにおける比較演算のコストが低い（そして、０との比較はさらに低コストである）と仮定すると、比較演算のオーバーヘッドを下げることのできる特別なケースがいくつか存在する。
 	特に、 `==` と `!=` の実行時間は、基本要素となる整数型の比較時間程度のコストで終了する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Jumpaku</name>
        <email>Jumpaku@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>循環バッファ -- Merge pull request #527 from KisaragiEffective/patch-2</title>
      <link href="https://boostjp.github.io/tips/circular_buffer.html"/>
      <id>c7a166555ffdeb7e95fe76c753241a543f274a61:tips/circular_buffer.md</id>
      <updated>2021-02-26T15:26:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/circular_buffer.md b/tips/circular_buffer.md
index cc7a44a..8689fef 100644
--- a/tips/circular_buffer.md
+++ b/tips/circular_buffer.md
@@ -309,7 +309,7 @@ int main()
     // --------------------------------------------------------------------------
     // 循環バッファのメモリアドレスイメージ
     //  ___ ___ ___ ___ ___
-    // |_H_|_G_|_F_|_E_|_G_|
+    // |_H_|_G_|_F_|_E_|_D_|
     // --------------------------------------------------------------------------
     std::for_each( c_buf.begin(), c_buf.end(), ( std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; ));
     std::cout &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>循環バッファ -- Update circular_buffer.md</title>
      <link href="https://boostjp.github.io/tips/circular_buffer.html"/>
      <id>8f68bb8cc0ec628c5098035127a556891fe03d2a:tips/circular_buffer.md</id>
      <updated>2021-02-26T14:39:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/circular_buffer.md b/tips/circular_buffer.md
index cc7a44a..8689fef 100644
--- a/tips/circular_buffer.md
+++ b/tips/circular_buffer.md
@@ -309,7 +309,7 @@ int main()
     // --------------------------------------------------------------------------
     // 循環バッファのメモリアドレスイメージ
     //  ___ ___ ___ ___ ___
-    // |_H_|_G_|_F_|_E_|_G_|
+    // |_H_|_G_|_F_|_E_|_D_|
     // --------------------------------------------------------------------------
     std::for_each( c_buf.begin(), c_buf.end(), ( std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt; &amp;#39; &amp;#39; ));
     std::cout &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>KisaragiEffective</name>
        <email>48310258+KisaragiEffective@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Geometryの注意書きを追加</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>3db981e161bcdb013580fb649fe95819b05f6dd9:document/version/1_75_0.md</id>
      <updated>2021-02-03T15:47:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 1afdaa6..756a6c1 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -44,6 +44,7 @@
 - [Container](#container)
 - [Endian](#endian)
 - [Filesystem](#filesystem)
+- [Geometry](#geometry)
 - [GIL](#gil)
 - [Histogram](#histogram)
 - [Interprocess](#interprocess)
@@ -172,6 +173,11 @@
 - [GitHub #167](https://github.com/boostorg/filesystem/issues/167) Windowsにおいて、`space()`が既存ファイルを識別できない場合に、エラーを返すようにした
 
 
+## &amp;lt;a id=&amp;#34;geometry&amp;#34; href=&amp;#34;#geometry&amp;#34;&amp;gt;Geometry&amp;lt;/a&amp;gt;
+
+- 警告 : 1.73.0で通知されたC++03の非推奨に続いて、1.75.0以降には優秀なC++14コンパイラが必要となる
+
+
 ## &amp;lt;a id=&amp;#34;gil&amp;#34; href=&amp;#34;#gil&amp;#34;&amp;gt;GIL&amp;lt;/a&amp;gt;
 
 - &amp;lt;span style=&amp;#34;color:red;&amp;#34;&amp;gt;**破壊的変更**&amp;lt;/span&amp;gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>