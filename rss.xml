<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-12-01T06:43:31.658602</updated>
  <id>cc3b2ec3-9726-4df1-aec1-1d70f9b7c7bb</id>

  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Asioを追加 (close #521)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>4f3ffd53b8e29fc0a44985b91ad568663435268d:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:41:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 7a7cc23..27afed2 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -34,6 +34,7 @@
 
 ## 更新ライブラリ
 
+- [Asio](#asio)
 - [Atomic](#atomic)
 - [Beast](#beast)
 - [Container](#container)
@@ -54,6 +55,53 @@
 - [VMD](#vmd)
 - [Wave](#wave)
 
+
+## &amp;lt;a id=&amp;#34;asio&amp;#34; href=&amp;#34;#asio&amp;#34;&amp;gt;Asio&amp;lt;/a&amp;gt;
+
+- WindowsでUNIXドメインソケットのサポートを有効化。Windows 10以降、UNIXドメインソケット (別名ローカルソケット) は`connect_pair`関数を除いて (`operation_not_supported`エラーになる) サポートされる
+- `ip::basic_resolver`にexecutorから変換するコンストラクタと代入演算子を追加
+- polymorphic executorと (非推奨の) ハンドラ呼び出しフックに互換性を追加
+- 完了トークンアダプタ`experimental::as_single`を追加。これを使用することによって、完了ハンドラの引数をひとつに結合できるようになる。単一パラメータをもつ完了シグニチャの場合、引数はそのまま渡される。2つ以上のパラメータの場合、引数はタプルに結合される。`as_single`アダプタは、以下のように`use_awaitable`や構造化束縛と組み合わせて使用できる：
+    ```cpp
+    auto [e, n] = co_await socket.async_read_some(
+      boost::asio::buffer(data), as_single(use_awaitable));
+    ```
+
+    - また、以下のようにデフォルトの完了トークンとしても使用できる：
+    ```cpp
+    using default_token = as_single_t&amp;lt;use_awaitable_t&amp;lt;&amp;gt;&amp;gt;;
+    using tcp_socket = default_token::as_default_on_t&amp;lt;tcp::socket&amp;gt;;
+    // ...
+    awaitable&amp;lt;void&amp;gt; do_read(tcp_socket socket)
+    {
+      // ...
+      auto [e, n] = co_await socket.async_read_some(boost::asio::buffer(data));
+      // ...
+    }
+    ```
+
+- `_POSIX_VERSION`を使用してサポート状況を検出することにより、`MSG_NOSIGNAL`がより多くのプラットフォームで動作するようサポートを追加
+- Windowsでlibpthreadを使用してコンパイルする機能を追加
+- Intel C++ Compilerのワークアラウンドを追加
+- カスタムexecutorをもたないハンドラの検出と最適化をさらに追加
+- Windows環境でのタイマーキャンセル時のロック集中を減らした
+- パフォーマンスに測定可能な影響があったため、以前削除したヌルポインタチェックを復活させた
+- `any_executor`をRTTIのない環境でビルドできるようサポートを修正
+- `thread_pool`の単体テストがRTTIのない環境で動作するよう修正
+- WindowsのClangでのC++20コルーチンの互換性を修正
+- Windowsランタイムのいくつかの互換性問題を修正
+- `asio::query`の追加によって起こったシャドウ名の警告を修正
+- Linuxでの「logical ‘or’ of equal expressions」警告を修正
+- switch文でのフォールスルー警告を修正
+- 不足していた`push/pop_options.hpp`のインクルードを追加
+- 「zero-as-null-pointer-constant (値ゼロをヌルポインタ定数として使用している)」警告を修正
+- カンマ演算子の警告を修正
+- selectリアクタがWindowsでどのようなときに使用されるのかを明確にするために、ドキュメントを更新
+- `any_executor`の比較と変換で曖昧さが発生する可能性があった問題を修正
+- MSVC 19.8での非実験的なC++20コルーチンの検出を追加
+- uClibcとの互換性を修正
+
+
 ## &amp;lt;a id=&amp;#34;atomic&amp;#34; href=&amp;#34;#atomic&amp;#34;&amp;gt;Atomic&amp;lt;/a&amp;gt;
 
 - 内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : LEAFの説明を追加</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>a37aec5183e39b65300920771fef80260961b747:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:08:44+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;ul&gt;
&lt;li&gt;C++11のみを要求する高速なコンパイル&lt;/li&gt;
&lt;li&gt;アロケータサポートをともなう、かんたんで現代的なAPI&lt;/li&gt;
&lt;li&gt;Boostを必要としないコンパイルのための&lt;code&gt;BOOST_JSON_STANDALONE&lt;/code&gt;定義&lt;/li&gt;
&lt;li&gt;オプションとしてライブラリのリンクを必要としないヘッダオンリーモード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;ul&gt;
&lt;li&gt;依存ライブラリがない、小さな単一ヘッダフォーマット&lt;/li&gt;
&lt;li&gt;最大効率で設計した (&#34;happy&#34;パスと&#34;sad&#34;パスがある)&lt;/li&gt;
&lt;li&gt;ペイロードが重い場合でも、動的メモリ確保を行わない&lt;/li&gt;
&lt;li&gt;任意のエラー型をO(1)で転送する (コールスタックの深さに関係なく)&lt;/li&gt;
&lt;li&gt;例外処理の有無に関わらず使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; 即値定数をともなうビット (論理) 操作で間違った命令列が生成されるためにAArch64ターゲットでコンパイルエラーになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;detect_ssl&lt;/code&gt;内での未使用パラメータの警告を抑制&lt;/li&gt;
&lt;li&gt;Websocketのサンプルコードを、TLS接続でSNIを設定するよう更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2023&#34; target=&#34;_blank&#34;&gt;GitHub #2023&lt;/a&gt; &lt;code&gt;websocket&lt;/code&gt;の&lt;code&gt;async_shutdown&lt;/code&gt;が、ベースとなるTLS転送をシャットダウンするよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2011&#34; target=&#34;_blank&#34;&gt;GitHub #2011&lt;/a&gt; &lt;code&gt;append_existing&lt;/code&gt;フラグをつけたファイルを開く操作が、POSIX環境で正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2039&#34; target=&#34;_blank&#34;&gt;GitHub #2039&lt;/a&gt; Windowsのビルドで、Filesystemライブラリの要求に従ってbcryptライブラリをリンクするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2063&#34; target=&#34;_blank&#34;&gt;GitHub #2063&lt;/a&gt; &lt;code&gt;advanced_server_flex&lt;/code&gt;サンプルコードでのロジックエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/1582&#34; target=&#34;_blank&#34;&gt;GitHub #1582&lt;/a&gt; MSVCでの到達しないコードによるエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2070&#34; target=&#34;_blank&#34;&gt;GitHub #2070&lt;/a&gt; &lt;code&gt;body_limit&lt;/code&gt;が空のときのhttp bodyの振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2065&#34; target=&#34;_blank&#34;&gt;GitHub #2065&lt;/a&gt; ゼロ幅書き込みが要求された際の&lt;code&gt;basic_stream&lt;/code&gt;の振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2080&#34; target=&#34;_blank&#34;&gt;GitHub #2080&lt;/a&gt; Sec-* HTTPヘッダの&lt;code&gt;enum&lt;/code&gt;表現を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2085&#34; target=&#34;_blank&#34;&gt;GitHub #2085&lt;/a&gt; &lt;code&gt;fields::set()&lt;/code&gt;に対する&lt;code&gt;nullptr&lt;/code&gt;の暗黙キャストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2029&#34; target=&#34;_blank&#34;&gt;GitHub #2029&lt;/a&gt; &lt;code&gt;basic_stream&lt;/code&gt;のC++20でのテストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Beast内でAsioのハンドラトラッキングを有効にするためのマクロ&lt;code&gt;BOOST_ASIO_ENABLE_HANDLER_TRACKING&lt;/code&gt;を定義。詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/overview/core/handler_tracking.html&#34; target=&#34;_blank&#34;&gt;asio handler tracking&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Bishop-Fox 2020セキュリティアセットを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; Windowsにおいて、&lt;code&gt;space()&lt;/code&gt;が既存ファイルを識別できない場合に、エラーを返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axis::variable{{0, 1, inf}}.value(1)&lt;/code&gt;がNaNではなく1を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::variable&lt;/code&gt;のコンストラクタは、ひとつの値がNaNである場合に&lt;code&gt;std::invalid_argument&lt;/code&gt;例外を送出するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/histogram/axis/traits.hpp&amp;gt;&lt;/code&gt;の前に&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;をインクルードした場合に発生するGCCのバグ (gcc-10.xのupstreamで修正される) に対するワークアラウンドを実装&lt;/li&gt;
&lt;li&gt;最新コンパイラバージョンでのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;C++20標準でコンパイルした際に発生する警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator::mean&lt;/code&gt;と&lt;code&gt;accumulator::weighted_mean&lt;/code&gt;の値 (value) と分散 (variance) を要求されたがaccumulatorにそれらを計算するための十分なエントリがない場合の、未定義動作をドキュメント化&lt;/li&gt;
&lt;li&gt;axisのメタデータをなぜ等値比較でチェックするのかの論理的根拠の説明を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/125&#34; target=&#34;_blank&#34;&gt;GitHub #125&lt;/a&gt; ログファイルのローテーションでの、(&lt;code&gt;set_target_file_name_pattern()&lt;/code&gt;メンバ関数で設定したパターンに基づく) ターゲットファイル名を生成する際の&lt;code&gt;text_file_backend&lt;/code&gt;バックエンドで使用されるカウンターを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/128&#34; target=&#34;_blank&#34;&gt;GitHub #128&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;の&lt;code&gt;basic_sink_frontend&lt;/code&gt;のバージョンカウンタを&lt;code&gt;atomic&lt;/code&gt;に置き換え&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; &lt;code&gt;asynchronous_sink&lt;/code&gt;フロントエンドで、フロントエンドによる&lt;code&gt;run&lt;/code&gt;の呼び出しが内部の専用スレッドではなくユーザースレッドから行われた場合に発生する可能性のあった、&lt;code&gt;flush&lt;/code&gt;と&lt;code&gt;run&lt;/code&gt;の間での競合を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;宣言&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; C++20で&lt;code&gt;optional&amp;lt;std::filesystem::path&amp;gt;&lt;/code&gt;が壊れていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;来年、Boostの3リリース後がv2.1ブランチの最終リリースとなる。Boost 1.76以降、v2.2ブランチがデフォルトになる。このブランチでは、v2.1に対するいくつかの大きな破壊的変更がある。詳細はドキュメントを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ADL検出のイベントフックを、ポリシー指定のイベントフックに置き換えた。これは脆弱性 (だれかがなにか変更した際に、フックが静かに自己無効化する)、コンパイラのバグ (コンパイラ設定の違いによるフックの間違いや、一部のフックだけが検出されるなど)、およびエンドユーザーが使用することがむずかしいなどが理由。ポリシー指定のイベントフックは、下位互換性のためにデフォルトでADL検出フックにできる。そのためには、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;マクロの値を&lt;code&gt;2020&lt;/code&gt;未満に設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/code&gt;設定を改善。古いGCCは&lt;code&gt;bool&lt;/code&gt;ベースのコンセプト構文をもっていたが、新しいGCCは標準に準拠する。しかし、レガシー構文と準拠構文がどのようなときに使用できるのか十分に理解できていなかったために、GCCに指定するオプションによってコンパイルに失敗していた。新しいロジックでは、GCC 8以前は常にレガシー構文を使用する。それ以外の場合、GCCがC++20モード以降である場合に限り、準拠構文を使用する。これにより、GCCでのコーナーケースのビルド失敗が解決されることを期待している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeは現在、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルに成功するはずである。Boost.ExceptionのメンテナであるEmilのおかげで、グローバルにC++に例外が無効にされてもコンパイルできるようになった。ただしその場合、&lt;code&gt;boost::exception_ptr&lt;/code&gt;を使用することはできない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; コルーチンのサポートでは、C++20標準で要求されているにも関わらず、&lt;code&gt;final_suspend()&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;ではなかった。これは修正されたが、コンパイラが&lt;code&gt;noop_coroutine&lt;/code&gt;を実装している場合に限る。さらに、&lt;code&gt;noop_coroutine&lt;/code&gt;が使用可能な場合は、はるかに効率的なコルーチンハンドルを使用して&lt;code&gt;await_suspend()&lt;/code&gt;の変種を返す。これによりコード生成とコンテキストスイッチのパフォーマンスが大幅に向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在使用しているプリプロセッサが標準C++に準拠しているかプリプロセッサかを識別するためのマクロ&lt;code&gt;BOOST_PP_IS_STANDARD()&lt;/code&gt;を追加。このライブラリは広く正しく動作するが、最新のデフォルトVC++プリプロセッサを含むさまざまなワークアラウンドが必要になるプリプロセッサは、標準準拠のプリプロセッサとは見なされない。しかし、GCC、Clang、およびVS2019の新しいデフォルトではないプリプロセッサを含むほとんどのプリプロセッサは標準準拠のプリプロセッサである&lt;/li&gt;
&lt;li&gt;標準C++準拠のプリプロセッサにおいて、&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;標準C++準拠のプリプロセッサにおいて、&lt;code&gt;FOR&lt;/code&gt;と&lt;code&gt;WHILE&lt;/code&gt;のイテレーション数の最大値を指定することを許可するために、&lt;code&gt;r&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;からはじまるユーザー定義マクロのイテレーション数は、以前のリリースでそうしたように2ではなく1からはじまる。ユーザー定義マクロ内でそのようなイテレーション数が使用されている場合に破壊的変更が起こる可能性があるが (おそらくそうはならない)、最大数で数値・論理演算をする際に、ユーザー定義マクロで最大数を指定できるようにするために、いくつかの不可解なバグを修正する必要があった。標準C++準拠ではないプリプロセッサにおいて、それらには通常、最大数でのループ実行を許可しない制限があり、脆弱なプリプロセッサに破壊的変更は加えないほうがいいと考えたため、この変更は行わなかった。また、いくつかの難解なバグを修正し、ユーザー定義マクロの呼び出しによる最大数を提供する。&lt;code&gt;r&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;開始のマクロのイテレーション数が実際には何であるかについてドキュメント化されていないため、この変更を行うことができると考えた。これはイテレーション数がインクリメントされるだけだ&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;宇宙船演算子&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;を含むC++20トークンを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/94&#34; target=&#34;_blank&#34;&gt;GitHub #94&lt;/a&gt; 再スキャン時の&lt;code&gt;__LINE__&lt;/code&gt;と&lt;code&gt;__FILE__&lt;/code&gt;の間違った振る舞いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Preprocessorのベータ後変更を追加 #513</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>2b2bb5155d6d7e6a5d9b253f2f5b24bb10ee6fc1:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:03:03+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;ul&gt;
&lt;li&gt;C++11のみを要求する高速なコンパイル&lt;/li&gt;
&lt;li&gt;アロケータサポートをともなう、かんたんで現代的なAPI&lt;/li&gt;
&lt;li&gt;Boostを必要としないコンパイルのための&lt;code&gt;BOOST_JSON_STANDALONE&lt;/code&gt;定義&lt;/li&gt;
&lt;li&gt;オプションとしてライブラリのリンクを必要としないヘッダオンリーモード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; 即値定数をともなうビット (論理) 操作で間違った命令列が生成されるためにAArch64ターゲットでコンパイルエラーになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;detect_ssl&lt;/code&gt;内での未使用パラメータの警告を抑制&lt;/li&gt;
&lt;li&gt;Websocketのサンプルコードを、TLS接続でSNIを設定するよう更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2023&#34; target=&#34;_blank&#34;&gt;GitHub #2023&lt;/a&gt; &lt;code&gt;websocket&lt;/code&gt;の&lt;code&gt;async_shutdown&lt;/code&gt;が、ベースとなるTLS転送をシャットダウンするよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2011&#34; target=&#34;_blank&#34;&gt;GitHub #2011&lt;/a&gt; &lt;code&gt;append_existing&lt;/code&gt;フラグをつけたファイルを開く操作が、POSIX環境で正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2039&#34; target=&#34;_blank&#34;&gt;GitHub #2039&lt;/a&gt; Windowsのビルドで、Filesystemライブラリの要求に従ってbcryptライブラリをリンクするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2063&#34; target=&#34;_blank&#34;&gt;GitHub #2063&lt;/a&gt; &lt;code&gt;advanced_server_flex&lt;/code&gt;サンプルコードでのロジックエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/1582&#34; target=&#34;_blank&#34;&gt;GitHub #1582&lt;/a&gt; MSVCでの到達しないコードによるエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2070&#34; target=&#34;_blank&#34;&gt;GitHub #2070&lt;/a&gt; &lt;code&gt;body_limit&lt;/code&gt;が空のときのhttp bodyの振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2065&#34; target=&#34;_blank&#34;&gt;GitHub #2065&lt;/a&gt; ゼロ幅書き込みが要求された際の&lt;code&gt;basic_stream&lt;/code&gt;の振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2080&#34; target=&#34;_blank&#34;&gt;GitHub #2080&lt;/a&gt; Sec-* HTTPヘッダの&lt;code&gt;enum&lt;/code&gt;表現を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2085&#34; target=&#34;_blank&#34;&gt;GitHub #2085&lt;/a&gt; &lt;code&gt;fields::set()&lt;/code&gt;に対する&lt;code&gt;nullptr&lt;/code&gt;の暗黙キャストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2029&#34; target=&#34;_blank&#34;&gt;GitHub #2029&lt;/a&gt; &lt;code&gt;basic_stream&lt;/code&gt;のC++20でのテストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Beast内でAsioのハンドラトラッキングを有効にするためのマクロ&lt;code&gt;BOOST_ASIO_ENABLE_HANDLER_TRACKING&lt;/code&gt;を定義。詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/overview/core/handler_tracking.html&#34; target=&#34;_blank&#34;&gt;asio handler tracking&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Bishop-Fox 2020セキュリティアセットを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; Windowsにおいて、&lt;code&gt;space()&lt;/code&gt;が既存ファイルを識別できない場合に、エラーを返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axis::variable{{0, 1, inf}}.value(1)&lt;/code&gt;がNaNではなく1を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::variable&lt;/code&gt;のコンストラクタは、ひとつの値がNaNである場合に&lt;code&gt;std::invalid_argument&lt;/code&gt;例外を送出するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/histogram/axis/traits.hpp&amp;gt;&lt;/code&gt;の前に&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;をインクルードした場合に発生するGCCのバグ (gcc-10.xのupstreamで修正される) に対するワークアラウンドを実装&lt;/li&gt;
&lt;li&gt;最新コンパイラバージョンでのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;C++20標準でコンパイルした際に発生する警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator::mean&lt;/code&gt;と&lt;code&gt;accumulator::weighted_mean&lt;/code&gt;の値 (value) と分散 (variance) を要求されたがaccumulatorにそれらを計算するための十分なエントリがない場合の、未定義動作をドキュメント化&lt;/li&gt;
&lt;li&gt;axisのメタデータをなぜ等値比較でチェックするのかの論理的根拠の説明を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/125&#34; target=&#34;_blank&#34;&gt;GitHub #125&lt;/a&gt; ログファイルのローテーションでの、(&lt;code&gt;set_target_file_name_pattern()&lt;/code&gt;メンバ関数で設定したパターンに基づく) ターゲットファイル名を生成する際の&lt;code&gt;text_file_backend&lt;/code&gt;バックエンドで使用されるカウンターを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/128&#34; target=&#34;_blank&#34;&gt;GitHub #128&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;の&lt;code&gt;basic_sink_frontend&lt;/code&gt;のバージョンカウンタを&lt;code&gt;atomic&lt;/code&gt;に置き換え&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; &lt;code&gt;asynchronous_sink&lt;/code&gt;フロントエンドで、フロントエンドによる&lt;code&gt;run&lt;/code&gt;の呼び出しが内部の専用スレッドではなくユーザースレッドから行われた場合に発生する可能性のあった、&lt;code&gt;flush&lt;/code&gt;と&lt;code&gt;run&lt;/code&gt;の間での競合を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;宣言&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; C++20で&lt;code&gt;optional&amp;lt;std::filesystem::path&amp;gt;&lt;/code&gt;が壊れていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;来年、Boostの3リリース後がv2.1ブランチの最終リリースとなる。Boost 1.76以降、v2.2ブランチがデフォルトになる。このブランチでは、v2.1に対するいくつかの大きな破壊的変更がある。詳細はドキュメントを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ADL検出のイベントフックを、ポリシー指定のイベントフックに置き換えた。これは脆弱性 (だれかがなにか変更した際に、フックが静かに自己無効化する)、コンパイラのバグ (コンパイラ設定の違いによるフックの間違いや、一部のフックだけが検出されるなど)、およびエンドユーザーが使用することがむずかしいなどが理由。ポリシー指定のイベントフックは、下位互換性のためにデフォルトでADL検出フックにできる。そのためには、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;マクロの値を&lt;code&gt;2020&lt;/code&gt;未満に設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/code&gt;設定を改善。古いGCCは&lt;code&gt;bool&lt;/code&gt;ベースのコンセプト構文をもっていたが、新しいGCCは標準に準拠する。しかし、レガシー構文と準拠構文がどのようなときに使用できるのか十分に理解できていなかったために、GCCに指定するオプションによってコンパイルに失敗していた。新しいロジックでは、GCC 8以前は常にレガシー構文を使用する。それ以外の場合、GCCがC++20モード以降である場合に限り、準拠構文を使用する。これにより、GCCでのコーナーケースのビルド失敗が解決されることを期待している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeは現在、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルに成功するはずである。Boost.ExceptionのメンテナであるEmilのおかげで、グローバルにC++に例外が無効にされてもコンパイルできるようになった。ただしその場合、&lt;code&gt;boost::exception_ptr&lt;/code&gt;を使用することはできない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; コルーチンのサポートでは、C++20標準で要求されているにも関わらず、&lt;code&gt;final_suspend()&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;ではなかった。これは修正されたが、コンパイラが&lt;code&gt;noop_coroutine&lt;/code&gt;を実装している場合に限る。さらに、&lt;code&gt;noop_coroutine&lt;/code&gt;が使用可能な場合は、はるかに効率的なコルーチンハンドルを使用して&lt;code&gt;await_suspend()&lt;/code&gt;の変種を返す。これによりコード生成とコンテキストスイッチのパフォーマンスが大幅に向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現在使用しているプリプロセッサが標準C++に準拠しているかプリプロセッサかを識別するためのマクロ&lt;code&gt;BOOST_PP_IS_STANDARD()&lt;/code&gt;を追加。このライブラリは広く正しく動作するが、最新のデフォルトVC++プリプロセッサを含むさまざまなワークアラウンドが必要になるプリプロセッサは、標準準拠のプリプロセッサとは見なされない。しかし、GCC、Clang、およびVS2019の新しいデフォルトではないプリプロセッサを含むほとんどのプリプロセッサは標準準拠のプリプロセッサである&lt;/li&gt;
&lt;li&gt;標準C++準拠のプリプロセッサにおいて、&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;標準C++準拠のプリプロセッサにおいて、&lt;code&gt;FOR&lt;/code&gt;と&lt;code&gt;WHILE&lt;/code&gt;のイテレーション数の最大値を指定することを許可するために、&lt;code&gt;r&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;からはじまるユーザー定義マクロのイテレーション数は、以前のリリースでそうしたように2ではなく1からはじまる。ユーザー定義マクロ内でそのようなイテレーション数が使用されている場合に破壊的変更が起こる可能性があるが (おそらくそうはならない)、最大数で数値・論理演算をする際に、ユーザー定義マクロで最大数を指定できるようにするために、いくつかの不可解なバグを修正する必要があった。標準C++準拠ではないプリプロセッサにおいて、それらには通常、最大数でのループ実行を許可しない制限があり、脆弱なプリプロセッサに破壊的変更は加えないほうがいいと考えたため、この変更は行わなかった。また、いくつかの難解なバグを修正し、ユーザー定義マクロの呼び出しによる最大数を提供する。&lt;code&gt;r&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;開始のマクロのイテレーション数が実際には何であるかについてドキュメント化されていないため、この変更を行うことができると考えた。これはイテレーション数がインクリメントされるだけだ&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;宇宙船演算子&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;を含むC++20トークンを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/94&#34; target=&#34;_blank&#34;&gt;GitHub #94&lt;/a&gt; 再スキャン時の&lt;code&gt;__LINE__&lt;/code&gt;と&lt;code&gt;__FILE__&lt;/code&gt;の間違った振る舞いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Filesystemのベータ後変更を記載 #504</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>b2400ea4446ff5172847f54b9d78fca858188954:document/version/1_75_0.md</id>
      <updated>2020-11-27T16:25:22+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;ul&gt;
&lt;li&gt;C++11のみを要求する高速なコンパイル&lt;/li&gt;
&lt;li&gt;アロケータサポートをともなう、かんたんで現代的なAPI&lt;/li&gt;
&lt;li&gt;Boostを必要としないコンパイルのための&lt;code&gt;BOOST_JSON_STANDALONE&lt;/code&gt;定義&lt;/li&gt;
&lt;li&gt;オプションとしてライブラリのリンクを必要としないヘッダオンリーモード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; 即値定数をともなうビット (論理) 操作で間違った命令列が生成されるためにAArch64ターゲットでコンパイルエラーになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;detect_ssl&lt;/code&gt;内での未使用パラメータの警告を抑制&lt;/li&gt;
&lt;li&gt;Websocketのサンプルコードを、TLS接続でSNIを設定するよう更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2023&#34; target=&#34;_blank&#34;&gt;GitHub #2023&lt;/a&gt; &lt;code&gt;websocket&lt;/code&gt;の&lt;code&gt;async_shutdown&lt;/code&gt;が、ベースとなるTLS転送をシャットダウンするよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2011&#34; target=&#34;_blank&#34;&gt;GitHub #2011&lt;/a&gt; &lt;code&gt;append_existing&lt;/code&gt;フラグをつけたファイルを開く操作が、POSIX環境で正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2039&#34; target=&#34;_blank&#34;&gt;GitHub #2039&lt;/a&gt; Windowsのビルドで、Filesystemライブラリの要求に従ってbcryptライブラリをリンクするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2063&#34; target=&#34;_blank&#34;&gt;GitHub #2063&lt;/a&gt; &lt;code&gt;advanced_server_flex&lt;/code&gt;サンプルコードでのロジックエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/1582&#34; target=&#34;_blank&#34;&gt;GitHub #1582&lt;/a&gt; MSVCでの到達しないコードによるエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2070&#34; target=&#34;_blank&#34;&gt;GitHub #2070&lt;/a&gt; &lt;code&gt;body_limit&lt;/code&gt;が空のときのhttp bodyの振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2065&#34; target=&#34;_blank&#34;&gt;GitHub #2065&lt;/a&gt; ゼロ幅書き込みが要求された際の&lt;code&gt;basic_stream&lt;/code&gt;の振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2080&#34; target=&#34;_blank&#34;&gt;GitHub #2080&lt;/a&gt; Sec-* HTTPヘッダの&lt;code&gt;enum&lt;/code&gt;表現を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2085&#34; target=&#34;_blank&#34;&gt;GitHub #2085&lt;/a&gt; &lt;code&gt;fields::set()&lt;/code&gt;に対する&lt;code&gt;nullptr&lt;/code&gt;の暗黙キャストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2029&#34; target=&#34;_blank&#34;&gt;GitHub #2029&lt;/a&gt; &lt;code&gt;basic_stream&lt;/code&gt;のC++20でのテストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Beast内でAsioのハンドラトラッキングを有効にするためのマクロ&lt;code&gt;BOOST_ASIO_ENABLE_HANDLER_TRACKING&lt;/code&gt;を定義。詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/overview/core/handler_tracking.html&#34; target=&#34;_blank&#34;&gt;asio handler tracking&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Bishop-Fox 2020セキュリティアセットを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; Windowsにおいて、&lt;code&gt;space()&lt;/code&gt;が既存ファイルを識別できない場合に、エラーを返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axis::variable{{0, 1, inf}}.value(1)&lt;/code&gt;がNaNではなく1を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::variable&lt;/code&gt;のコンストラクタは、ひとつの値がNaNである場合に&lt;code&gt;std::invalid_argument&lt;/code&gt;例外を送出するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/histogram/axis/traits.hpp&amp;gt;&lt;/code&gt;の前に&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;をインクルードした場合に発生するGCCのバグ (gcc-10.xのupstreamで修正される) に対するワークアラウンドを実装&lt;/li&gt;
&lt;li&gt;最新コンパイラバージョンでのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;C++20標準でコンパイルした際に発生する警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator::mean&lt;/code&gt;と&lt;code&gt;accumulator::weighted_mean&lt;/code&gt;の値 (value) と分散 (variance) を要求されたがaccumulatorにそれらを計算するための十分なエントリがない場合の、未定義動作をドキュメント化&lt;/li&gt;
&lt;li&gt;axisのメタデータをなぜ等値比較でチェックするのかの論理的根拠の説明を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/125&#34; target=&#34;_blank&#34;&gt;GitHub #125&lt;/a&gt; ログファイルのローテーションでの、(&lt;code&gt;set_target_file_name_pattern()&lt;/code&gt;メンバ関数で設定したパターンに基づく) ターゲットファイル名を生成する際の&lt;code&gt;text_file_backend&lt;/code&gt;バックエンドで使用されるカウンターを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/128&#34; target=&#34;_blank&#34;&gt;GitHub #128&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;の&lt;code&gt;basic_sink_frontend&lt;/code&gt;のバージョンカウンタを&lt;code&gt;atomic&lt;/code&gt;に置き換え&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; &lt;code&gt;asynchronous_sink&lt;/code&gt;フロントエンドで、フロントエンドによる&lt;code&gt;run&lt;/code&gt;の呼び出しが内部の専用スレッドではなくユーザースレッドから行われた場合に発生する可能性のあった、&lt;code&gt;flush&lt;/code&gt;と&lt;code&gt;run&lt;/code&gt;の間での競合を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;宣言&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; C++20で&lt;code&gt;optional&amp;lt;std::filesystem::path&amp;gt;&lt;/code&gt;が壊れていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;来年、Boostの3リリース後がv2.1ブランチの最終リリースとなる。Boost 1.76以降、v2.2ブランチがデフォルトになる。このブランチでは、v2.1に対するいくつかの大きな破壊的変更がある。詳細はドキュメントを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ADL検出のイベントフックを、ポリシー指定のイベントフックに置き換えた。これは脆弱性 (だれかがなにか変更した際に、フックが静かに自己無効化する)、コンパイラのバグ (コンパイラ設定の違いによるフックの間違いや、一部のフックだけが検出されるなど)、およびエンドユーザーが使用することがむずかしいなどが理由。ポリシー指定のイベントフックは、下位互換性のためにデフォルトでADL検出フックにできる。そのためには、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;マクロの値を&lt;code&gt;2020&lt;/code&gt;未満に設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/code&gt;設定を改善。古いGCCは&lt;code&gt;bool&lt;/code&gt;ベースのコンセプト構文をもっていたが、新しいGCCは標準に準拠する。しかし、レガシー構文と準拠構文がどのようなときに使用できるのか十分に理解できていなかったために、GCCに指定するオプションによってコンパイルに失敗していた。新しいロジックでは、GCC 8以前は常にレガシー構文を使用する。それ以外の場合、GCCがC++20モード以降である場合に限り、準拠構文を使用する。これにより、GCCでのコーナーケースのビルド失敗が解決されることを期待している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeは現在、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルに成功するはずである。Boost.ExceptionのメンテナであるEmilのおかげで、グローバルにC++に例外が無効にされてもコンパイルできるようになった。ただしその場合、&lt;code&gt;boost::exception_ptr&lt;/code&gt;を使用することはできない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; コルーチンのサポートでは、C++20標準で要求されているにも関わらず、&lt;code&gt;final_suspend()&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;ではなかった。これは修正されたが、コンパイラが&lt;code&gt;noop_coroutine&lt;/code&gt;を実装している場合に限る。さらに、&lt;code&gt;noop_coroutine&lt;/code&gt;が使用可能な場合は、はるかに効率的なコルーチンハンドルを使用して&lt;code&gt;await_suspend()&lt;/code&gt;の変種を返す。これによりコード生成とコンテキストスイッチのパフォーマンスが大幅に向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;宇宙船演算子&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;を含むC++20トークンを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/94&#34; target=&#34;_blank&#34;&gt;GitHub #94&lt;/a&gt; 再スキャン時の&lt;code&gt;__LINE__&lt;/code&gt;と&lt;code&gt;__FILE__&lt;/code&gt;の間違った振る舞いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Histogramを追加 (close #520)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>69bead9ef863449f0abd5d3f2af14983e6351cfa:document/version/1_75_0.md</id>
      <updated>2020-11-26T05:21:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.75.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_75_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_75_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_75_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/json/&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; C++11でのJSONの解析、シリアライズ、DOMのライブラリ (作者Vinnie FalcoとKrystian Stasiowski)&lt;ul&gt;
&lt;li&gt;C++11のみを要求する高速なコンパイル&lt;/li&gt;
&lt;li&gt;アロケータサポートをともなう、かんたんで現代的なAPI&lt;/li&gt;
&lt;li&gt;Boostを必要としないコンパイルのための&lt;code&gt;BOOST_JSON_STANDALONE&lt;/code&gt;定義&lt;/li&gt;
&lt;li&gt;オプションとしてライブラリのリンクを必要としないヘッダオンリーモード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/leaf/&#34; target=&#34;_blank&#34;&gt;LEAF&lt;/a&gt; C++11での軽量なエラーハンドリングライブラリ (作者Emil Dotchevski)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/pfr/&#34; target=&#34;_blank&#34;&gt;PFR&lt;/a&gt; ユーザー定義型に対するマクロやボイラープレートコードを必要としないリフレクションのライブラリ (作者Antony Polukhin)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/41&#34; target=&#34;_blank&#34;&gt;GitHub #41&lt;/a&gt; 即値定数をともなうビット (論理) 操作で間違った命令列が生成されるためにAArch64ターゲットでコンパイルエラーになる可能性があった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;detect_ssl&lt;/code&gt;内での未使用パラメータの警告を抑制&lt;/li&gt;
&lt;li&gt;Websocketのサンプルコードを、TLS接続でSNIを設定するよう更新&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2023&#34; target=&#34;_blank&#34;&gt;GitHub #2023&lt;/a&gt; &lt;code&gt;websocket&lt;/code&gt;の&lt;code&gt;async_shutdown&lt;/code&gt;が、ベースとなるTLS転送をシャットダウンするよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2011&#34; target=&#34;_blank&#34;&gt;GitHub #2011&lt;/a&gt; &lt;code&gt;append_existing&lt;/code&gt;フラグをつけたファイルを開く操作が、POSIX環境で正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2039&#34; target=&#34;_blank&#34;&gt;GitHub #2039&lt;/a&gt; Windowsのビルドで、Filesystemライブラリの要求に従ってbcryptライブラリをリンクするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2063&#34; target=&#34;_blank&#34;&gt;GitHub #2063&lt;/a&gt; &lt;code&gt;advanced_server_flex&lt;/code&gt;サンプルコードでのロジックエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/1582&#34; target=&#34;_blank&#34;&gt;GitHub #1582&lt;/a&gt; MSVCでの到達しないコードによるエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2070&#34; target=&#34;_blank&#34;&gt;GitHub #2070&lt;/a&gt; &lt;code&gt;body_limit&lt;/code&gt;が空のときのhttp bodyの振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2065&#34; target=&#34;_blank&#34;&gt;GitHub #2065&lt;/a&gt; ゼロ幅書き込みが要求された際の&lt;code&gt;basic_stream&lt;/code&gt;の振る舞いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2080&#34; target=&#34;_blank&#34;&gt;GitHub #2080&lt;/a&gt; Sec-* HTTPヘッダの&lt;code&gt;enum&lt;/code&gt;表現を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2085&#34; target=&#34;_blank&#34;&gt;GitHub #2085&lt;/a&gt; &lt;code&gt;fields::set()&lt;/code&gt;に対する&lt;code&gt;nullptr&lt;/code&gt;の暗黙キャストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2029&#34; target=&#34;_blank&#34;&gt;GitHub #2029&lt;/a&gt; &lt;code&gt;basic_stream&lt;/code&gt;のC++20でのテストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Beast内でAsioのハンドラトラッキングを有効にするためのマクロ&lt;code&gt;BOOST_ASIO_ENABLE_HANDLER_TRACKING&lt;/code&gt;を定義。詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/overview/core/handler_tracking.html&#34; target=&#34;_blank&#34;&gt;asio handler tracking&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;Bishop-Fox 2020セキュリティアセットを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな&lt;code&gt;devector&lt;/code&gt;コンテナを追加。double-ended (両端) なvectorの実装であり、後方だけでなく前方にもcapacityがあり、先頭に償却定数時間で要素の挿入ができる&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; ツリーベースのコンテナで、ムーブのみできる要素型のムーブ操作がコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/156&#34; target=&#34;_blank&#34;&gt;GitHub #156&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;にもたせるアロケータとして16ビットの&lt;code&gt;difference_type&lt;/code&gt;を設定するとコンパイルできない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/157&#34; target=&#34;_blank&#34;&gt;GitHub #157&lt;/a&gt; 不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/159&#34; target=&#34;_blank&#34;&gt;GitHub #159&lt;/a&gt; &lt;code&gt;pmr::monotonic_buffer_resource&lt;/code&gt;で一度に大きなメモリアロケートを行うとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;uses_allocator&lt;/code&gt;には&lt;code&gt;remove_cvref_t&lt;/code&gt;した型を渡す必要があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt; x86のMSVCで&lt;code&gt;small_vector&lt;/code&gt;を値渡しするとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/161&#34; target=&#34;_blank&#34;&gt;GitHUb #161&lt;/a&gt; コンストラクタ&lt;code&gt;polymorphic_allocator(memory_resource*)&lt;/code&gt;にヌルポインタを渡すとデフォルトのメモリリソースが使われる非標準の拡張を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/163&#34; target=&#34;_blank&#34;&gt;GitHub #163&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;を&lt;code&gt;container_rebind&lt;/code&gt;できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/165&#34; target=&#34;_blank&#34;&gt;GitHub #165&lt;/a&gt; &lt;code&gt;memory_resource&lt;/code&gt;のインラインメンバが共有ライブラリでリンクエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/166&#34; target=&#34;_blank&#34;&gt;GitHub #166&lt;/a&gt; ヘッダに記載されているcopyrightの文字エンコーディングを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/167&#34; target=&#34;_blank&#34;&gt;GitHub #167&lt;/a&gt; GCC 4.4で起きていた&#34;error: the address of &#39;msg&#39; will always evaluate as &#39;true&#39; warning&#34;という警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/169&#34; target=&#34;_blank&#34;&gt;GitHub #169&lt;/a&gt; clang11で&lt;code&gt;dlmalloc_ext_2_8_6.c&lt;/code&gt;をビルドするとfloodで警告がでる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#endian&#34; id=&#34;endian&#34;&gt;endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_arithmetic&lt;/code&gt;が&lt;code&gt;endian_buffer&lt;/code&gt;を継承しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENDIAN_NO_CTORS&lt;/code&gt;が定義された際、アライメントされていない&lt;code&gt;endian_buffer&lt;/code&gt;と&lt;code&gt;endian_arithmetic&lt;/code&gt;はC++03のPODとなり、&lt;code&gt;__attribute__((packed))&lt;/code&gt;が有効になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt; &lt;strong&gt;新機能&lt;/strong&gt; ファイルの生成日時を取得する&lt;code&gt;creation_time&lt;/code&gt;操作を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_write_time(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;-1&lt;/code&gt;の代わりに&lt;code&gt;std::time_t&lt;/code&gt;が表現できる最小値に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hard_link_count(p, ec)&lt;/code&gt;操作が失敗した際の戻り値を、&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;static_cast&amp;lt;uintmax_t&amp;gt;(-1)&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;POSIXシステムで、&lt;code&gt;file_size&lt;/code&gt;に指定したパスが非通常ファイル (non-regular file) に解決された場合、エラーコードとして&lt;code&gt;errc::function_not_supported&lt;/code&gt;を提示するようにした。これまでは&lt;code&gt;errc::operation_not_permitted&lt;/code&gt;が報告されていた&lt;/li&gt;
&lt;li&gt;Linuxにおいて、多くの操作内で可能な場合は&lt;code&gt;statx&lt;/code&gt;システムコールを使用するようにした。これにより、ファイルシステムから照会される情報量を減らし、パフォーマンスを向上できる。&lt;code&gt;statx&lt;/code&gt;システムコールはLinux 4.11カーネルで導入された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/160&#34; target=&#34;_blank&#34;&gt;GitHub #160&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの一部のメンバ関数の戻り値型から、&lt;code&gt;const&lt;/code&gt;修飾を削除した。これまではこの問題により、呼び出し側でムーブ構築とムーブ代入が妨げられる可能性があった&lt;/li&gt;
&lt;li&gt;OpenBSD 4.4以降で、ファイルシステムの容量 (space) を取得するために&lt;code&gt;statvfs&lt;/code&gt;システムコールを使用するようにした (&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/162&#34; target=&#34;_blank&#34;&gt;GitHub #162&lt;/a&gt;によって考えついた)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 次のリリースでGCC 5のサポートを終了する予定。サポートするC++の下限バージョンもC++11からC++14に変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axis::variable{{0, 1, inf}}.value(1)&lt;/code&gt;がNaNではなく1を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::variable&lt;/code&gt;のコンストラクタは、ひとつの値がNaNである場合に&lt;code&gt;std::invalid_argument&lt;/code&gt;例外を送出するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/histogram/axis/traits.hpp&amp;gt;&lt;/code&gt;の前に&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;をインクルードした場合に発生するGCCのバグ (gcc-10.xのupstreamで修正される) に対するワークアラウンドを実装&lt;/li&gt;
&lt;li&gt;最新コンパイラバージョンでのいくつかの警告を修正&lt;/li&gt;
&lt;li&gt;C++20標準でコンパイルした際に発生する警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator::mean&lt;/code&gt;と&lt;code&gt;accumulator::weighted_mean&lt;/code&gt;の値 (value) と分散 (variance) を要求されたがaccumulatorにそれらを計算するための十分なエントリがない場合の、未定義動作をドキュメント化&lt;/li&gt;
&lt;li&gt;axisのメタデータをなぜ等値比較でチェックするのかの論理的根拠の説明を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/issues/127&#34; target=&#34;_blank&#34;&gt;GitHub #127&lt;/a&gt; 1.74.0の&lt;code&gt;basic_managed_shared_memory&lt;/code&gt;が静的アサーションで失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; MSVCでの条件分岐付きの代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; 空の制御文による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_BSR_INTRINSIC&lt;/code&gt;での不正なキャストを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/125&#34; target=&#34;_blank&#34;&gt;GitHub #125&lt;/a&gt; ログファイルのローテーションでの、(&lt;code&gt;set_target_file_name_pattern()&lt;/code&gt;メンバ関数で設定したパターンに基づく) ターゲットファイル名を生成する際の&lt;code&gt;text_file_backend&lt;/code&gt;バックエンドで使用されるカウンターを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/128&#34; target=&#34;_blank&#34;&gt;GitHub #128&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;の&lt;code&gt;basic_sink_frontend&lt;/code&gt;のバージョンカウンタを&lt;code&gt;atomic&lt;/code&gt;に置き換え&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; &lt;code&gt;asynchronous_sink&lt;/code&gt;フロントエンドで、フロントエンドによる&lt;code&gt;run&lt;/code&gt;の呼び出しが内部の専用スレッドではなくユーザースレッドから行われた場合に発生する可能性のあった、&lt;code&gt;flush&lt;/code&gt;と&lt;code&gt;run&lt;/code&gt;の間での競合を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; 未使用変数の警告を抑制するために、&lt;code&gt;void&lt;/code&gt;へのキャストは汎用的な方法ではなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_pairwise_fold&lt;/code&gt;を追加 (Barry Revzin氏による推奨)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;mp_invoke&lt;/code&gt;を削除。代わりに&lt;code&gt;mp_invoke_q&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;宣言&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; C++20で&lt;code&gt;optional&amp;lt;std::filesystem::path&amp;gt;&lt;/code&gt;が壊れていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;来年、Boostの3リリース後がv2.1ブランチの最終リリースとなる。Boost 1.76以降、v2.2ブランチがデフォルトになる。このブランチでは、v2.1に対するいくつかの大きな破壊的変更がある。詳細はドキュメントを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ADL検出のイベントフックを、ポリシー指定のイベントフックに置き換えた。これは脆弱性 (だれかがなにか変更した際に、フックが静かに自己無効化する)、コンパイラのバグ (コンパイラ設定の違いによるフックの間違いや、一部のフックだけが検出されるなど)、およびエンドユーザーが使用することがむずかしいなどが理由。ポリシー指定のイベントフックは、下位互換性のためにデフォルトでADL検出フックにできる。そのためには、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;マクロの値を&lt;code&gt;2020&lt;/code&gt;未満に設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/code&gt;設定を改善。古いGCCは&lt;code&gt;bool&lt;/code&gt;ベースのコンセプト構文をもっていたが、新しいGCCは標準に準拠する。しかし、レガシー構文と準拠構文がどのようなときに使用できるのか十分に理解できていなかったために、GCCに指定するオプションによってコンパイルに失敗していた。新しいロジックでは、GCC 8以前は常にレガシー構文を使用する。それ以外の場合、GCCがC++20モード以降である場合に限り、準拠構文を使用する。これにより、GCCでのコーナーケースのビルド失敗が解決されることを期待している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Boost.Outcomeは現在、&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義された状態でもコンパイルに成功するはずである。Boost.ExceptionのメンテナであるEmilのおかげで、グローバルにC++に例外が無効にされてもコンパイルできるようになった。ただしその場合、&lt;code&gt;boost::exception_ptr&lt;/code&gt;を使用することはできない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/236&#34; target=&#34;_blank&#34;&gt;GitHub #236&lt;/a&gt; コルーチンのサポートでは、C++20標準で要求されているにも関わらず、&lt;code&gt;final_suspend()&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;ではなかった。これは修正されたが、コンパイラが&lt;code&gt;noop_coroutine&lt;/code&gt;を実装している場合に限る。さらに、&lt;code&gt;noop_coroutine&lt;/code&gt;が使用可能な場合は、はるかに効率的なコルーチンハンドルを使用して&lt;code&gt;await_suspend()&lt;/code&gt;の変種を返す。これによりコード生成とコンテキストスイッチのパフォーマンスが大幅に向上する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20対応のために、&lt;code&gt;event_comparison_type&lt;/code&gt;, &lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;, &lt;code&gt;voronoi_predicates&lt;/code&gt;を修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__VA_OPT__&lt;/code&gt;をもつC++20モードでの可変引数データで、可変引数サイズが正しく0になるようサポート&lt;ul&gt;
&lt;li&gt;これは、このC++20モードでは空の配列、空のリスト、空の可変引数の間での変換が有効になったことも意味する&lt;/li&gt;
&lt;li&gt;エンドユーザーは、このライブラリでの空の可変引数データの詳細について、「variadic macros (可変引数マクロ)」トピックの「C++20 Support For Variadic Macros (可変引数マクロのC++20サポート)」パートで読むことができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config/limits.hpp&lt;/code&gt;で定義されるいくつかの制限を、翻訳単位 (TU, Translation Unit) でより高い値に変更できるようにした。エンドユーザーは「limitations (制限)」トピックを読んで、どの制限を変更できるかを理解する必要がある&lt;/li&gt;
&lt;li&gt;あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム固有のヘッダ&lt;code&gt;windows_error.hpp&lt;/code&gt;, &lt;code&gt;linux_error.hpp&lt;/code&gt;, &lt;code&gt;cygwin_error.hpp&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generic_category()&lt;/code&gt;と&lt;code&gt;system_category()&lt;/code&gt;の古い名前 (&lt;code&gt;get_generic_category()&lt;/code&gt;, &lt;code&gt;get_posix_category()&lt;/code&gt;, &lt;code&gt;posix_category()&lt;/code&gt;, &lt;code&gt;errno_ecat()&lt;/code&gt;, &lt;code&gt;get_system_category()&lt;/code&gt;, &lt;code&gt;native_ecat()&lt;/code&gt;) を非推奨化。将来のリリースで削除する予定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;を非推奨化。将来のリリースで削除する予定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;の&lt;code&gt;operator bool()&lt;/code&gt;を以前の&lt;code&gt;value() != 0&lt;/code&gt;の意味に戻した。次のリリースでは&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;標準ヘッダとの相互運用性がさらに向上する予定なので、この変更は&lt;code&gt;std::error_condition&lt;/code&gt;との互換性のために行われる。ただしこの変更は&lt;code&gt;error_code::failed&lt;/code&gt;には影響せず、それはいまだ健在である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同じ理由で、バッファをとるバージョンの&lt;code&gt;error_condition::message()&lt;/code&gt;のオーバーロードを非推奨化。&lt;code&gt;error_code::message()&lt;/code&gt;には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。&lt;code&gt;BOOST_PP_LIMIT_MAG&lt;/code&gt;によって最大値を指定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_VMD_IS_GENERAL_IDENTIFIER&lt;/code&gt;マクロが追加され、識別子 (identifier) を固有識別子 (specific identifier) として登録しなくても、VMD識別子構文にマッチするプリプロセッサトークンを表す入力の構文解析のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;宇宙船演算子&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;を含むC++20トークンを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/94&#34; target=&#34;_blank&#34;&gt;GitHub #94&lt;/a&gt; 再スキャン時の&lt;code&gt;__LINE__&lt;/code&gt;と&lt;code&gt;__FILE__&lt;/code&gt;の間違った振る舞いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>