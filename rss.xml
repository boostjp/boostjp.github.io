<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2021-09-23T14:40:05.770433</updated>
  <id>bd5ff69e-9c6f-4727-a574-d454b6a239c0</id>

  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0 : Asioを追加</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>3edf1f862403766546a8e9c9782766f056b5f444:document/version/1_77_0.md</id>
      <updated>2021-08-13T12:29:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;個々の非同期操作のキャンセルをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;associator&lt;/code&gt;トレイトを追加。ジェネリックな転送アソシエータとして使用する&lt;/li&gt;
&lt;li&gt;Asioに実装されているすべての非同期操作を変更し、それらの完了ハンドラを右辺値参照として呼び出すようにした。これにより、右辺値参照修飾を関数呼び出し演算子に追加できる (&lt;code&gt;R operator()(Args...) &amp;amp;&amp;amp;;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;非同期操作に複数の完了シグニチャのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awaitable&amp;lt;&amp;gt;&lt;/code&gt;に&lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;と&lt;code&gt;operator||&lt;/code&gt;を追加。これによって、コルーチンを並列にtrivially awaitedできるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::as_tuple&lt;/code&gt;完了トークンアダプタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::append&lt;/code&gt;完了トークンアダプタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::prepend&lt;/code&gt;完了トークンアダプタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::deferred&lt;/code&gt;完了トークンを追加。これは非同期操作の遅延実行を許可する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::parallel_group&lt;/code&gt;クラスと&lt;code&gt;experimental::make_parallel_group&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::promise&lt;/code&gt;を追加。これは非同期操作の即時実行 (eager execution) と同期を許可する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::coro&lt;/code&gt;クラステンプレートを追加。これは非同期の待機 (&lt;code&gt;co_await&lt;/code&gt;) と生成 (&lt;code&gt;co_yield&lt;/code&gt;) の両方を組み合わせる機能をもつC++20コルーチンのプリミティブ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;にムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;co_spawn&lt;/code&gt;のコルーチンの最初のステップをexecutorに&lt;code&gt;dispatch&lt;/code&gt;するよう変更&lt;/li&gt;
&lt;li&gt;非同期操作で使用する際の、&lt;code&gt;any_executor&lt;/code&gt;と&lt;code&gt;any_io_executor&lt;/code&gt;の追加の最適化を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awaitable&amp;lt;&amp;gt;&lt;/code&gt;に&lt;code&gt;nodiscard&lt;/code&gt;属性を追加&lt;/li&gt;
&lt;li&gt;デフォルトのリサイクルアロケータで、キャッシュされるスロットの数を増やした&lt;/li&gt;
&lt;li&gt;over-alignedな型をサポートするために、アライメント要件を尊重するようデフォルトのアロケータの動作を変更&lt;/li&gt;
&lt;li&gt;結果の文字列が常に逆の名前解決で初期化されるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_awaitable_t::executor_with_default&lt;/code&gt;での再帰的なテンプレートインスタンス化の問題を修正&lt;/li&gt;
&lt;li&gt;対象のexecutorの基づいて正しく結果を返すよう&lt;code&gt;any_io_executor&lt;/code&gt;の等値比較演算子を修正&lt;/li&gt;
&lt;li&gt;ムーブ元のexecutorを使用しないよう&lt;code&gt;strand&amp;lt;&amp;gt;&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;コンパイラの機能を検出する際に、GCCのテストがClangで使用されないよう修正&lt;/li&gt;
&lt;li&gt;MSVCに同梱されているClangでコルーチンのサポートを無効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OPENSSL_NO_SSL_INTERN&lt;/code&gt;が定義されている場合の、最近のLibreSSLとの互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;posix::basic_stream_descriptor&lt;/code&gt;のムーブ操作が、非デフォルトのexecutorで動作するよう修正&lt;/li&gt;
&lt;li&gt;より詳細な更新内容は、&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;ライブラリのリリースノート&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このメンテナンスアップデートは、小さなバグ修正と、CI報告の更新を含む&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2139&#34; target=&#34;_blank&#34;&gt;GitHub #2139&lt;/a&gt; &lt;code&gt;test_stream&lt;/code&gt;に、executorをrebindする機能を追加&lt;/li&gt;
&lt;li&gt;WebSocketのasync shutdownでの未使用変数の警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2124&#34; target=&#34;_blank&#34;&gt;GitHub #2124&lt;/a&gt; Beastで浮動小数点数のサポートを要求しないようにした&lt;/li&gt;
&lt;li&gt;すべての操作においてcommon buffers typeを使用することにより、websocketyのコンパイルされたコードのサイズを削減&lt;/li&gt;
&lt;li&gt;HTTP Parserの間違った使い方の検出を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2140&#34; target=&#34;_blank&#34;&gt;GitHub #2140&lt;/a&gt; ライブラリのメタデータにcxxstdタグを追加&lt;/li&gt;
&lt;li&gt;Drone CIに移行&lt;/li&gt;
&lt;li&gt;ドキュメントの小さな書式を改善&lt;/li&gt;
&lt;li&gt;CMLは、in-treeビルド中に必要なBoost Thread Libraryを見つけられるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt; riscv32ターゲットのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_intersperse&lt;/code&gt;, &lt;code&gt;mp_split&lt;/code&gt;, &lt;code&gt;mp_join&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;衝突数を減らし&lt;code&gt;boost::pfr::hash_value()&lt;/code&gt;の品質を向上させるため、MurMur Hashベース実装の&lt;code&gt;hash_combine()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;Visual Studio 2017のC++14モードをサポート (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;inspect toolによって発見した問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; &lt;code&gt;include/boost/pfr/detail/fields_count.hpp&lt;/code&gt;内の不要なセミコロンの削除など、いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;継承型のコンパイル時アサートを追加 (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;コピー省略が保証されている場合の、ムーブ不能なフィールドをもつ集成体のリフレクションが可能になった&lt;/li&gt;
&lt;li&gt;スペルミスを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34; id=&#34;property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスリリース&lt;/li&gt;
&lt;li&gt;CIでのコンパイラのカバレッジを拡張&lt;/li&gt;
&lt;li&gt;CMakeLists.txtでのBoostの互換性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;から&lt;code&gt;std::error_category&lt;/code&gt;への変換演算子を改善し、&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;が必要なくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;の比較演算子をメンバ関数の代わりにインラインのfriendにした (↑の変更の副作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;は実際にオブジェクトのインスタンス化が必要になるまで&lt;code&gt;generic_category()&lt;/code&gt;の呼び出しを遅らせるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;と&lt;code&gt;error_condition::message&lt;/code&gt;を非推奨ではなくした。また、&lt;code&gt;operator bool()&lt;/code&gt;も&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;system categoryにおいてオブジェクトのインスタンス化を回避するために&lt;code&gt;generic_category()&lt;/code&gt;を呼び出すのをやめた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_error_condition&lt;/code&gt;で返される値は、いくつかのケースでsystem categoryではなくgeneric categoryに変わる場合がある。これは、入力となるsystem categoryの&lt;code&gt;error_code&lt;/code&gt;に合致する&lt;code&gt;errc_t&lt;/code&gt;がない場合にPOSIX環境で起こる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;std::error_code&lt;/code&gt;の相互運用性を大幅に改善した。&lt;code&gt;std::error_code&lt;/code&gt;から&lt;code&gt;boost::system::error_code&lt;/code&gt;を構築できるようになり、&lt;code&gt;std::error_code&amp;amp;&lt;/code&gt;をとる関数に&lt;code&gt;boost::system::error_code&lt;/code&gt;を渡せるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;にストリーム入力演算子&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; メモリ確保なくUUID文字列を書き込むための&lt;code&gt;to_chars()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のバージョン4.6.1をリリース&lt;/li&gt;
&lt;li&gt;cygwin64でのb2エンジンのビルドを修正 (René Ferdinand Rivera Morell氏に感謝)&lt;/li&gt;
&lt;li&gt;compiler execからのclang toolsetのバージョン検出を修正 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0 : BeastとPropertyTreeを追加</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>2921f73311e7fc0d0c7b90dc4e35917e83465bf9:document/version/1_77_0.md</id>
      <updated>2021-08-10T11:56:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このメンテナンスアップデートは、小さなバグ修正と、CI報告の更新を含む&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/issues/2139&#34; target=&#34;_blank&#34;&gt;GitHub #2139&lt;/a&gt; &lt;code&gt;test_stream&lt;/code&gt;に、executorをrebindする機能を追加&lt;/li&gt;
&lt;li&gt;WebSocketのasync shutdownでの未使用変数の警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2124&#34; target=&#34;_blank&#34;&gt;GitHub #2124&lt;/a&gt; Beastで浮動小数点数のサポートを要求しないようにした&lt;/li&gt;
&lt;li&gt;すべての操作においてcommon buffers typeを使用することにより、websocketyのコンパイルされたコードのサイズを削減&lt;/li&gt;
&lt;li&gt;HTTP Parserの間違った使い方の検出を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/pull/2140&#34; target=&#34;_blank&#34;&gt;GitHub #2140&lt;/a&gt; ライブラリのメタデータにcxxstdタグを追加&lt;/li&gt;
&lt;li&gt;Drone CIに移行&lt;/li&gt;
&lt;li&gt;ドキュメントの小さな書式を改善&lt;/li&gt;
&lt;li&gt;CMLは、in-treeビルド中に必要なBoost Thread Libraryを見つけられるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt; riscv32ターゲットのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_intersperse&lt;/code&gt;, &lt;code&gt;mp_split&lt;/code&gt;, &lt;code&gt;mp_join&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;衝突数を減らし&lt;code&gt;boost::pfr::hash_value()&lt;/code&gt;の品質を向上させるため、MurMur Hashベース実装の&lt;code&gt;hash_combine()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;Visual Studio 2017のC++14モードをサポート (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;inspect toolによって発見した問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; &lt;code&gt;include/boost/pfr/detail/fields_count.hpp&lt;/code&gt;内の不要なセミコロンの削除など、いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;継承型のコンパイル時アサートを追加 (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;コピー省略が保証されている場合の、ムーブ不能なフィールドをもつ集成体のリフレクションが可能になった&lt;/li&gt;
&lt;li&gt;スペルミスを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#property-tree&#34; id=&#34;property-tree&#34;&gt;PropertyTree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスリリース&lt;/li&gt;
&lt;li&gt;CIでのコンパイラのカバレッジを拡張&lt;/li&gt;
&lt;li&gt;CMakeLists.txtでのBoostの互換性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;から&lt;code&gt;std::error_category&lt;/code&gt;への変換演算子を改善し、&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;が必要なくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;の比較演算子をメンバ関数の代わりにインラインのfriendにした (↑の変更の副作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;は実際にオブジェクトのインスタンス化が必要になるまで&lt;code&gt;generic_category()&lt;/code&gt;の呼び出しを遅らせるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;と&lt;code&gt;error_condition::message&lt;/code&gt;を非推奨ではなくした。また、&lt;code&gt;operator bool()&lt;/code&gt;も&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;system categoryにおいてオブジェクトのインスタンス化を回避するために&lt;code&gt;generic_category()&lt;/code&gt;を呼び出すのをやめた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_error_condition&lt;/code&gt;で返される値は、いくつかのケースでsystem categoryではなくgeneric categoryに変わる場合がある。これは、入力となるsystem categoryの&lt;code&gt;error_code&lt;/code&gt;に合致する&lt;code&gt;errc_t&lt;/code&gt;がない場合にPOSIX環境で起こる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;std::error_code&lt;/code&gt;の相互運用性を大幅に改善した。&lt;code&gt;std::error_code&lt;/code&gt;から&lt;code&gt;boost::system::error_code&lt;/code&gt;を構築できるようになり、&lt;code&gt;std::error_code&amp;amp;&lt;/code&gt;をとる関数に&lt;code&gt;boost::system::error_code&lt;/code&gt;を渡せるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;にストリーム入力演算子&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; メモリ確保なくUUID文字列を書き込むための&lt;code&gt;to_chars()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のバージョン4.6.1をリリース&lt;/li&gt;
&lt;li&gt;cygwin64でのb2エンジンのビルドを修正 (René Ferdinand Rivera Morell氏に感謝)&lt;/li&gt;
&lt;li&gt;compiler execからのclang toolsetのバージョン検出を修正 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0リリースノート : 残りを追加</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>bbc2f3fa95560e7bbae6faf037f114d6eba6e513:document/version/1_77_0.md</id>
      <updated>2021-08-02T12:49:17+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/pull/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt; riscv32ターゲットのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_intersperse&lt;/code&gt;, &lt;code&gt;mp_split&lt;/code&gt;, &lt;code&gt;mp_join&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;衝突数を減らし&lt;code&gt;boost::pfr::hash_value()&lt;/code&gt;の品質を向上させるため、MurMur Hashベース実装の&lt;code&gt;hash_combine()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;Visual Studio 2017のC++14モードをサポート (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;inspect toolによって発見した問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; &lt;code&gt;include/boost/pfr/detail/fields_count.hpp&lt;/code&gt;内の不要なセミコロンの削除など、いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;継承型のコンパイル時アサートを追加 (Denis Mikhailov &lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;@denzor200&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;コピー省略が保証されている場合の、ムーブ不能なフィールドをもつ集成体のリフレクションが可能になった&lt;/li&gt;
&lt;li&gt;スペルミスを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;から&lt;code&gt;std::error_category&lt;/code&gt;への変換演算子を改善し、&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;が必要なくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_category&lt;/code&gt;の比較演算子をメンバ関数の代わりにインラインのfriendにした (↑の変更の副作用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;は実際にオブジェクトのインスタンス化が必要になるまで&lt;code&gt;generic_category()&lt;/code&gt;の呼び出しを遅らせるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition::failed&lt;/code&gt;と&lt;code&gt;error_condition::message&lt;/code&gt;を非推奨ではなくした。また、&lt;code&gt;operator bool()&lt;/code&gt;も&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;system categoryにおいてオブジェクトのインスタンス化を回避するために&lt;code&gt;generic_category()&lt;/code&gt;を呼び出すのをやめた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_error_condition&lt;/code&gt;で返される値は、いくつかのケースでsystem categoryではなくgeneric categoryに変わる場合がある。これは、入力となるsystem categoryの&lt;code&gt;error_code&lt;/code&gt;に合致する&lt;code&gt;errc_t&lt;/code&gt;がない場合にPOSIX環境で起こる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;std::error_code&lt;/code&gt;の相互運用性を大幅に改善した。&lt;code&gt;std::error_code&lt;/code&gt;から&lt;code&gt;boost::system::error_code&lt;/code&gt;を構築できるようになり、&lt;code&gt;std::error_code&amp;amp;&lt;/code&gt;をとる関数に&lt;code&gt;boost::system::error_code&lt;/code&gt;を渡せるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_condition&lt;/code&gt;にストリーム入力演算子&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/pull/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; メモリ確保なくUUID文字列を書き込むための&lt;code&gt;to_chars()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のバージョン4.6.1をリリース&lt;/li&gt;
&lt;li&gt;cygwin64でのb2エンジンのビルドを修正 (René Ferdinand Rivera Morell氏に感謝)&lt;/li&gt;
&lt;li&gt;compiler execからのclang toolsetのバージョン検出を修正 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0 : Filesystemの追加に対応</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>6d9dd410918376010c7c0b2d5b135b79297d7ae7:document/version/1_77_0.md</id>
      <updated>2021-08-01T23:12:26+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/201&#34; target=&#34;_blank&#34;&gt;GitHub #201&lt;/a&gt; Windowsでは、ファイルシステムに存在しない要素が入力パスに含まれているが、後続のドットドット (&lt;code&gt;&#34;..&#34;&lt;/code&gt;) 要素によってキャンセルされた場合に、&lt;code&gt;weakly_canonical&lt;/code&gt;がエラーで失敗することがなくなった。例として&lt;code&gt;weakly_canonical(&#34;C:\\a\\..&#34;)&lt;/code&gt;は失敗していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リリースノート -- 1.77.0リリースノート : 7割くらい書いた</title>
      <link href="https://boostjp.github.io/document/version.html"/>
      <id>27e3227281d5bbb641bb109cda000288d708d20c:document/version.md</id>
      <updated>2021-08-01T22:23:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、Boostの各バージョンのリリースノートを翻訳、情報補完したドキュメントです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html&#34;&gt;雛形ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html&#34;&gt;1.77.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_76_0.html&#34;&gt;1.76.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_75_0.html&#34;&gt;1.75.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html&#34;&gt;1.74.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html&#34;&gt;1.73.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html&#34;&gt;1.72.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html&#34;&gt;1.71.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html&#34;&gt;1.70.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_69_0.html&#34;&gt;1.69.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_68_0.html&#34;&gt;1.68.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_67_0.html&#34;&gt;1.67.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html&#34;&gt;1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html&#34;&gt;1.65.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_0.html&#34;&gt;1.65.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html&#34;&gt;1.64.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html&#34;&gt;1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_62_0.html&#34;&gt;1.62.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_61_0.html&#34;&gt;1.61.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_60_0.html&#34;&gt;1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_59_0.html&#34;&gt;1.59.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_58_0.html&#34;&gt;1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_57_0.html&#34;&gt;1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html&#34;&gt;1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_55_0.html&#34;&gt;1.55.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_54_0.html&#34;&gt;1.54.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_53_0.html&#34;&gt;1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_52_0.html&#34;&gt;1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_51_0.html&#34;&gt;1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_50_0.html&#34;&gt;1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_49_0.html&#34;&gt;1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_48_0.html&#34;&gt;1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_47_0.html&#34;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_1.html&#34;&gt;1.46.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_0.html&#34;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_45_0.html&#34;&gt;1.45.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.77.0リリースノート -- 1.77.0リリースノート : 7割くらい書いた</title>
      <link href="https://boostjp.github.io/document/version/1_77_0.html"/>
      <id>27e3227281d5bbb641bb109cda000288d708d20c:document/version/1_77_0.md</id>
      <updated>2021-08-01T22:23:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.77.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_77_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_77_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_77_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/describe&#34; target=&#34;_blank&#34;&gt;Describe&lt;/a&gt; C++14のリフレクションライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;このライブラリは、列挙子と、構造体・クラスのメンバを記述するためのマクロ、およびそれらの情報を照会するプリミティブを提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/lambda2&#34; target=&#34;_blank&#34;&gt;Lambda2&lt;/a&gt; C++14の、依存ライブラリのない、シングルヘッダのラムダライブラリ (作者Peter Dimov)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_1 + 5&lt;/code&gt;, &lt;code&gt;_1 % 2 == 0&lt;/code&gt;, &lt;code&gt;_1 &amp;gt; _2&lt;/code&gt;, or &lt;code&gt;_1 == &#39; &#39; || _1 == &#39;\t&#39;&lt;/code&gt;のような式を介して単純な関数オブジェクトを構築する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34;&gt;Filsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::anys::basic_any&lt;/code&gt;を追加。これはカスタマイズ可能なSmall Object Optimizationを備えたデータ型で、&lt;code&gt;ValueType&lt;/code&gt;要件を満たす任意の型のインスタンスを保持できる (Ruslan Arutyunyan &lt;a href=&#34;https://github.com/rarutyun&#34; target=&#34;_blank&#34;&gt;@rarutyun&lt;/a&gt;氏に多大な感謝)。これが本当に必要かどうかがわからない方は、代わりに&lt;code&gt;boost::any&lt;/code&gt;を使用してほしい&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アトミック参照オブジェクトを構築するために、&lt;code&gt;make_atomic_ref()&lt;/code&gt;、&lt;code&gt;make_ipc_atomic_ref()&lt;/code&gt;ファクトリ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic_ref&lt;/code&gt;クラスと&lt;code&gt;ipc_atomic_ref&lt;/code&gt;クラスにC++17のテンプレート引数推論ガイドを追加し、コンストラクタ引数から推論できる場合にテンプレート引数を省略できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::implicit_cast&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/issues/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; 壊れたリンクを修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/pull/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;をMac OS 10.4以下と互換性をもつよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::dll::library_info&lt;/code&gt;での、不正な形式のELFの実行時チェックを強化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.symtab&lt;/code&gt;が空もしくは不足している場合に、&lt;code&gt;boost::dll::library_info&lt;/code&gt;は&lt;code&gt;.dynsym&lt;/code&gt; ELFセクションから情報を使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; インポート可能な&lt;code&gt;boost::dll::library_info&lt;/code&gt;内のprotectedなELFシンボルをリスト化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; POSIX環境での&lt;code&gt;wchar_t&lt;/code&gt;から&lt;code&gt;char&lt;/code&gt;への不要な変換をなくした (Vladislav Shchapov氏に感謝)&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boost.Filesystem v4の導入&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;この新しいバージョンでは、v3で非推奨だった機能を削除し、C++17のstd::filesystemライブラリとの互換性を高めることを目的としたAPI変更も行う。差異は &lt;strong&gt;v3&lt;/strong&gt; タグと &lt;strong&gt;v4&lt;/strong&gt; タグを使用してリリースノートとドキュメントきに記載されており、セクション内でもまとめられている&lt;/li&gt;
&lt;li&gt;ユーザーは、コンパイル時に&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt;マクロの値を3か4にすることでバージョンを選択できる。ライブラリのバージョンごとにBoost.Filesystemをコンパイルする必要はない。ひとつのバイナリでv3とv4の両方がサポートされる&lt;/li&gt;
&lt;li&gt;細かな差異によるバグが発生する可能性があるため、ユーザーは同じアプリケーションでv3とv4の両方を使用しないようにする必要がある&lt;/li&gt;
&lt;li&gt;現在はv3がデフォルト。将来のリリースではv4がデフォルトになり、最終的にはv3は削除される&lt;/li&gt;
&lt;li&gt;v4は機能するがまだ作業中であり、将来的にAPIに大きな変更が行われる可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/194&#34; target=&#34;_blank&#34;&gt;GitHub #194&lt;/a&gt; &lt;code&gt;path::filename&lt;/code&gt;、&lt;code&gt;path::stem&lt;/code&gt;、および&lt;code&gt;path::extension&lt;/code&gt;はパスがこれらのコンポーネントのみで構成される場合に、パスのルート名・ルートディレクトリをファイル名と見なさなくなった&lt;ul&gt;
&lt;li&gt;例としてWindowsでは&lt;code&gt;path(&#34;C:&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;C:&#34;&lt;/code&gt;を返すために使用され、&lt;code&gt;path(&#34;C:\\&#34;).filename()&lt;/code&gt;は&lt;code&gt;&#34;\\&#34;&lt;/code&gt;を返すために使用されたが、これらは空のパスを返すようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;v4&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; &lt;code&gt;path::stem&lt;/code&gt;と&lt;code&gt;path::extension&lt;/code&gt;はドットではじまり、ほかのドットがないファイル名と拡張子として扱わなくなった。ドットではじまるファイル名は通常、拡張子が空のファイル名として扱われる。先頭のドットは、ほとんどのUNIX系システムで隠しファイルを表すために使用される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : Windowsでのパスのさまざまなプレフィックスのサポートを改善&lt;ul&gt;
&lt;li&gt;ローカルデバイスサフィックス (&lt;code&gt;&#34;\\.\&#34;&lt;/code&gt;) のサポートとNTパスプレフィックス (&lt;code&gt;&#34;\??\&#34;&lt;/code&gt;) の実験的サポートを追加&lt;/li&gt;
&lt;li&gt;プレフィックスは、パスのルート名に含まれる&lt;/li&gt;
&lt;li&gt;v3でプレフィックスを使用すると意外な結果になってしまう可能性があるため注意 (例として&lt;code&gt;path(&#34;\\\\.\\&#34;).stem() == &#34;\\\\&#34;&lt;/code&gt;)。プレフィックスはv4でのみ使用することを推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正規化されたパスに複数のドット (&lt;code&gt;&#34;.&#34;&lt;/code&gt;) が残ってしまういくつかのケースを排除するために、&lt;code&gt;path::lexically_normal&lt;/code&gt;の実装をやり直した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/172&#34; target=&#34;_blank&#34;&gt;GitHub #172&lt;/a&gt; Linuxでのシステムコール&lt;code&gt;statx&lt;/code&gt;と&lt;code&gt;getrandom&lt;/code&gt;の実行時検出を追加。これはsyscallがコンパイル時に存在するが実行時に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する場合に役立つ (たとえば、ホストで使用可能であってもsyscallを制限するDockerコンテナ内など)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : ライブラリのビルド時にさまざまなシステムAPIの使用を無効化するサポートを追加&lt;ul&gt;
&lt;li&gt;これは特定のAPIがライブラリのコンフィグレーションスクリプトでは存在するものとして検出されたが、なんらかの理由で使用してはならない場合 (たとえば実行時検出がターゲットシステムで機能しない場合など) に役立つ&lt;/li&gt;
&lt;li&gt;詳細はライブラリドキュメントのコンフィグレーションマクロの説明を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/186&#34; target=&#34;_blank&#34;&gt;GitHub #186&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;操作にオプションとして&lt;code&gt;copy_options::synchronize_data&lt;/code&gt;と&lt;code&gt;copy_options::synchronize&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;これらを使用すると、書き込まれたデータと属性と永続ストレージと同期できる。これらはパフォーマンスとしては高価になるが、コピーされたデータの信頼性を確保できる&lt;/li&gt;
&lt;li&gt;Boost 1.74.0以降では、POSIXシステムで暗黙的にデータ同期を実行していたことに注意。このリリースでは、より多くのプラットフォームのサポートが追加され、呼び出し元が明示的に要求できるようにし、デフォルトではデータ同期が無効になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部で発行された一部のシステムコールの、POSIXでの&lt;code&gt;EINTR&lt;/code&gt;エラーコードの処理を追加。とくに&lt;code&gt;close&lt;/code&gt;では&lt;code&gt;EINTR&lt;/code&gt;が無視される可能性があり、HP-UXではfile descriptorがリークする可能性がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、特定のファイルシステムがそれらのシステムコールをサポートしておらず、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックすることを示すエラーコードの処理を追加した。これにより、&lt;a href=&#34;https://www.ecryptfs.org/&#34; target=&#34;_blank&#34;&gt;eCryptFS&lt;/a&gt;および場合によってはほかのファイルシステムで失敗する&lt;code&gt;copy_file&lt;/code&gt;が修正されるはずである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file_range&lt;/code&gt;システムコールはこれまでLinux 5.3以降でのみ有効になっていたが、Linuxカーネル4.5以降から使用されるようにした。&lt;code&gt;copy_file_range&lt;/code&gt;がファイルシステム間でファイルのコピーに失敗した場合、&lt;code&gt;copy_file&lt;/code&gt;の実装は&lt;code&gt;sendfile&lt;/code&gt;または&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループにフォールバックする&lt;/li&gt;
&lt;li&gt;Linuxのシステムコール&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;に基づく&lt;code&gt;copy_file&lt;/code&gt;の実装は、生成されたコンテンツを含むファイルを含むことがわかっているファイルシステムでは使用されないようにした。これらのシステムコールはそのようなファイルと互換性がなく、コピーするとファイルサイズがゼロになる。代わりに、一般的な&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループが使用される。現在、ブラックリストに登録されているファイルシステムは以下：procfs, sysfs, tracefs, debugfs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;ループに基づく&lt;code&gt;copy_file&lt;/code&gt;の実装では、一時ストレージに使用されるバッファの最大サイズを増やし、より最適なパフォーマンスを得られるようターゲットとなるファイルシステムのブロックサイズを考慮に入れるようにした&lt;/li&gt;
&lt;li&gt;Windows CEでは、プロセスの現在のパスを取得するために&lt;code&gt;current_path&lt;/code&gt;を使用した場合に、ルートパスを正常に返す代わりに、エラーで失敗させるようにした。このプラットフォームはcurrent pathをサポートしていない。current pathの変更は、以前のこのライブラリのバージョンでも同様に失敗していた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;で、ルートより上のディレクトリをシンボリックリンクで参照してしまう問題を修正。これはシンボリックリンクが元のパスと異なるルートをもつ絶対パスに解決してしまった場合に起きていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canonical&lt;/code&gt;に、コール中に解決できるシンボリックリンクの最台数制限をもたせた。その制限は現在のところ、少なくとも40となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsでは、&lt;code&gt;canonical&lt;/code&gt;と&lt;code&gt;weakly_canonical&lt;/code&gt;は、結果となるパスのルートディレクトリの区切り文字に&lt;code&gt;path::preferred_separator&lt;/code&gt;を使用するようにした。これにより、Windows APIがUNCパスおよびWin32ファイルシステムプレフィックス (&lt;code&gt;&#34;\\?\&#34;&lt;/code&gt;) ではじまるパスで汎用区切り文字 (&lt;code&gt;&#34;/&#34;&lt;/code&gt;) を処理しないために発生する「ファイルが見つかりません」エラーが修正される&lt;/li&gt;
&lt;li&gt;&lt;em&gt;新機能&lt;/em&gt; : &lt;code&gt;weakly_canonical&lt;/code&gt;に&lt;code&gt;base&lt;/code&gt;パスを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/187&#34; target=&#34;_blank&#34;&gt;GitHub #187&lt;/a&gt; Windowsの&lt;code&gt;read_symlink&lt;/code&gt;で再解析ポイントのハンドリングを正しくした。この操作は、いくつかのマウントポイント (例として&lt;a href=&#34;https://www.box.com/&#34; target=&#34;_blank&#34;&gt;Box&lt;/a&gt;のクラウドストレージドライバによって生成されたもの) および空の印刷名 (print name) をもつディレクトリのジャンクションポイントで、空のパスを返す。新しい実装では再解析ポイントの代替名を解析し、そこからWin32パスを再構築するよう試みる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; Windowsでは、&lt;code&gt;boost/filesystem/fstream.hpp&lt;/code&gt;で提供されるファイルのストリームは、標準ライブラリがワイド文字でパスを開くことをサポートしている場合に、libc++のバージョン7.0以降でワイド文字パスを使用する&lt;/li&gt;
&lt;li&gt;Windowsでは、Windowsが&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development&#34; target=&#34;_blank&#34;&gt;開発者モード&lt;/a&gt;で構成されている場合、シンボリックリンクの生成に昇格された特権は必要なくなった&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラでは、Boost.Filesystemの内部で使用されるグローバルオブジェクトは、ユーザーのグローバルデストラクタが呼び出されたあとに破棄されるようになった。これにより、プログラムの終了段階でBoost.Filesystemの機能を呼び出せるようになった。これはとくに文字コード変換で起き、&lt;code&gt;path::imbue&lt;/code&gt;によるパスのロケール変更に影響する。サポートされるコンパイラは、MSVC、GCC、Clangのほか、&lt;code&gt;#pragma section&lt;/code&gt; (MSVC互換コンパイラ) もしくは &lt;code&gt;__attribute__ ((init_priority))&lt;/code&gt; (GCC互換コンパイラ) によるプログラム初期化順序のカスタマイズをサポートするコンパイラが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;に&lt;code&gt;TupleLike&lt;/code&gt;型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_to&lt;/code&gt;と&lt;code&gt;value_from&lt;/code&gt;に&lt;code&gt;std::array&lt;/code&gt;とそれに似た型のサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;から&lt;code&gt;string_view&lt;/code&gt;への暗黙の型変換演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;をjson型で特殊化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;と&lt;code&gt;key_value_pair&lt;/code&gt;のアロケーションエラーを修正&lt;/li&gt;
&lt;li&gt;空の範囲をもつイテレータのペアから&lt;code&gt;array&lt;/code&gt;を構築する際にクラッシュする問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_77_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;の表現可能な範囲外な値をもつ浮動小数点数の&lt;code&gt;int&lt;/code&gt;への代入を修正&lt;/li&gt;
&lt;li&gt;GitHub Actions CIによる追加のテストを開始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>