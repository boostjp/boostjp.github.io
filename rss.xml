<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-12-07T14:38:04.957288</updated>
  <id>6031904a-9056-4809-ae97-88c697f3a8bd</id>

  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Asioの追加に対応 #521</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>5bd1371d26821f2b65ce06cb3c023bbf410ac340:document/version/1_75_0.md</id>
      <updated>2020-12-04T15:49:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 9ba4568..af88d1d 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -103,6 +103,7 @@
 - `any_executor`の比較と変換で曖昧さが発生する可能性があった問題を修正
 - MSVC 19.8での非実験的なC++20コルーチンの検出を追加
 - uClibcとの互換性を修正
+- 古いC++バージョンもしくは標準準拠度の低いC++コンパイラを対象にする場合の、Networking TS executorの`strand&amp;lt;&amp;gt;`アダプトを修正
 
 
 ## &amp;lt;a id=&amp;#34;atomic&amp;#34; href=&amp;#34;#atomic&amp;#34;&amp;gt;Atomic&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : テスト済みコンパイラを記載 (close #525)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>e36d09f85f549f7d626bd493417f6caf6c002285:document/version/1_75_0.md</id>
      <updated>2020-12-02T15:05:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 7e742f0..9ba4568 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -294,46 +294,70 @@
 主要なテストコンパイラ:
 
 - Linux:
-    - Clang:
-    - GCC:
-    - Intel:
-    - QCC:
+    - Clang: 3.0, 4.0.1, 6.0.1
+    - Clang, C++0x: 3.0
+    - Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
+    - Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
+    - Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
+    - GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
+    - GCC, C++0x: 4.4.7
+    - GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
+    - GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
+    - GCC, C++17: 7.3.0, 8.0.1
+    - Intel, C++14: 18.0
 - OS X:
-    - Apple Clang:
-    - GCC:
-    - Intel:
+    - Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
+    - Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
+    - Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
+    - Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
+    - Apple Clang, C++1z: 9.0.0
+    - Apple Clang, C++2a: 10.0.0, 11.0.0
 - Windows:
-    - GCC, mingw:
-    - Visual C++:
+    - GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
+    - GCC, C++0x: 4.6.4
+    - GCC, C++11: 4.7.3, 4.8.1, 4.9.3
+    - GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
+    - GCC, C++17: 7.1.0, 7.2.0, 7.3.0
+    - Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
 - FreeBSD:
-    - GCC:
-- QNX:
-    - QCC:
+    - Clang: 4.0.0
+    - Clang, C++11: 4.0.0
+    - Clang, C++14: 4.0.0
+    - Clang, C++1z: 4.0.0
 
 追加で含まれるテストコンパイラ:
 
 - Linux:
-    - Clang:
-    - GCC:
-    - GCC, C++11:
-    - GCC, C++14:
-    - Intel:
-    - Intel, C++11:
+    - Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
+    - Clang, C++0x: 3.0
+    - Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
+    - Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0
+    - Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
+    - GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
+    - GCC, C++0x: 4.4.7
+    - GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
+    - GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
+    - GCC, C++17: 7.3.0, 8.0.1
+    - Intel, C++14: 18.0
 - OS X:
-    - Apple Clang:
-    - Apple Clang, C++11:
-    - Apple Clang, C++14:
-    - Clang:
-    - Clang, C++11:
-    - GCC:
-    - Intel:
+    - Apple Clang: 9.0.0, 9.1.0, 10.0.0
+    - Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
+    - Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
+    - Apple Clang, C++17: 9.1.0, 10.0.0
+    - Apple Clang, C++1z: 9.0.0
+    - Apple Clang, C++2a: 10.0.0
 - Windows:
-    - GCC, mingw:
-    - Visual C++:
+    - GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
+    - GCC, C++0x: 4.6.4
+    - GCC, C++11: 4.7.3, 4.8.1, 4.9.3
+    - GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
+    - GCC, C++17: 7.1.0, 7.2.0, 7.3.0
+    - Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
 - FreeBSD:
-    - GCC:
-- QNX:
-    - QCC:
+    - Clang: 4.0.0
+    - Clang, C++11: 4.0.0
+    - Clang, C++14: 4.0.0
+    - Clang, C++1z: 4.0.0
 
 ## 翻訳
 [Akira Takahashi](https://github.com/faithandbrave)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : RationalとSignals2を追加</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>9e3360c9ef6abd478dab615a07dc432720aaacb6:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:59:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 2e626bd..7e742f0 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -51,6 +51,8 @@
 - [Outcome](#outcome)
 - [Polygon](#polygon)
 - [Preprocessor](#preprocessor)
+- [Rational](#rational)
+- [Signals2](#signals2)
 - [System](#system)
 - [uBLAS](#ublas)
 - [VMD](#vmd)
@@ -251,6 +253,16 @@
 - あらゆるコンパイラで可変引数マクロが動作することを想定するよう更新した。表面上では、これがC++11以上を要求するようになったように思えるだろうが、GCC、Clang、VC++を含むほとんどの主要コンパイラは、C++98 / C++03に厳密には準拠しないが、C++98 / C++03モードでの可変引数マクロもサポートする
 
 
+## &amp;lt;a id=&amp;#34;rational&amp;#34; href=&amp;#34;#rational&amp;#34;&amp;gt;Rational&amp;lt;/a&amp;gt;
+
+- 新たなC++20の`operator==`書き換えルールで壊れないよう、関係演算子を修正
+
+
+## &amp;lt;a id=&amp;#34;signals2&amp;#34; href=&amp;#34;#signals2&amp;#34;&amp;gt;Signals2&amp;lt;/a&amp;gt;
+
+- C++20標準モードでのコンパイルを修正するために、C++アロケータモデルのサポートを正しくした (Glen Fernandes氏とConrad Poelman氏)
+
+
 ## &amp;lt;a id=&amp;#34;system&amp;#34; href=&amp;#34;#system&amp;#34;&amp;gt;System&amp;lt;/a&amp;gt;
 
 - プラットフォーム固有のヘッダ`windows_error.hpp`, `linux_error.hpp`, `cygwin_error.hpp`を非推奨化。将来のリリースで削除する予定
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : uBLASを追加 (close #524)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>415981309c4f6d9d91cd16275ede222db3285b06:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:56:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 27afed2..2e626bd 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -52,6 +52,7 @@
 - [Polygon](#polygon)
 - [Preprocessor](#preprocessor)
 - [System](#system)
+- [uBLAS](#ublas)
 - [VMD](#vmd)
 - [Wave](#wave)
 
@@ -259,6 +260,11 @@
 - 同じ理由で、バッファをとるバージョンの`error_condition::message()`のオーバーロードを非推奨化。`error_code::message()`には影響しない
 
 
+## &amp;lt;a id=&amp;#34;ublas&amp;#34; href=&amp;#34;#ublas&amp;#34;&amp;gt;uBLAS&amp;lt;/a&amp;gt;
+
+- C++20標準モードでのコンパイルを修正するために、C++アロケータモデルのサポートを正しくした (Glen Fernandes氏とConrad Poelman氏)
+
+
 ## &amp;lt;a id=&amp;#34;vmd&amp;#34; href=&amp;#34;#vmd&amp;#34;&amp;gt;VMD&amp;lt;/a&amp;gt;
 
 - VMDでの数値の構文解析が更新され、エンドユーザーがプリプロセッサライブラリの数値の制限 (最大値) を変更できるようにした。`BOOST_PP_LIMIT_MAG`によって最大値を指定できる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.75.0リリースノート -- 1.75.0リリースノート : Asioを追加 (close #521)</title>
      <link href="https://boostjp.github.io/document/version/1_75_0.html"/>
      <id>4f3ffd53b8e29fc0a44985b91ad568663435268d:document/version/1_75_0.md</id>
      <updated>2020-12-01T15:41:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/document/version/1_75_0.md b/document/version/1_75_0.md
index 7a7cc23..27afed2 100644
--- a/document/version/1_75_0.md
+++ b/document/version/1_75_0.md
@@ -34,6 +34,7 @@
 
 ## 更新ライブラリ
 
+- [Asio](#asio)
 - [Atomic](#atomic)
 - [Beast](#beast)
 - [Container](#container)
@@ -54,6 +55,53 @@
 - [VMD](#vmd)
 - [Wave](#wave)
 
+
+## &amp;lt;a id=&amp;#34;asio&amp;#34; href=&amp;#34;#asio&amp;#34;&amp;gt;Asio&amp;lt;/a&amp;gt;
+
+- WindowsでUNIXドメインソケットのサポートを有効化。Windows 10以降、UNIXドメインソケット (別名ローカルソケット) は`connect_pair`関数を除いて (`operation_not_supported`エラーになる) サポートされる
+- `ip::basic_resolver`にexecutorから変換するコンストラクタと代入演算子を追加
+- polymorphic executorと (非推奨の) ハンドラ呼び出しフックに互換性を追加
+- 完了トークンアダプタ`experimental::as_single`を追加。これを使用することによって、完了ハンドラの引数をひとつに結合できるようになる。単一パラメータをもつ完了シグニチャの場合、引数はそのまま渡される。2つ以上のパラメータの場合、引数はタプルに結合される。`as_single`アダプタは、以下のように`use_awaitable`や構造化束縛と組み合わせて使用できる：
+    ```cpp
+    auto [e, n] = co_await socket.async_read_some(
+      boost::asio::buffer(data), as_single(use_awaitable));
+    ```
+
+    - また、以下のようにデフォルトの完了トークンとしても使用できる：
+    ```cpp
+    using default_token = as_single_t&amp;lt;use_awaitable_t&amp;lt;&amp;gt;&amp;gt;;
+    using tcp_socket = default_token::as_default_on_t&amp;lt;tcp::socket&amp;gt;;
+    // ...
+    awaitable&amp;lt;void&amp;gt; do_read(tcp_socket socket)
+    {
+      // ...
+      auto [e, n] = co_await socket.async_read_some(boost::asio::buffer(data));
+      // ...
+    }
+    ```
+
+- `_POSIX_VERSION`を使用してサポート状況を検出することにより、`MSG_NOSIGNAL`がより多くのプラットフォームで動作するようサポートを追加
+- Windowsでlibpthreadを使用してコンパイルする機能を追加
+- Intel C++ Compilerのワークアラウンドを追加
+- カスタムexecutorをもたないハンドラの検出と最適化をさらに追加
+- Windows環境でのタイマーキャンセル時のロック集中を減らした
+- パフォーマンスに測定可能な影響があったため、以前削除したヌルポインタチェックを復活させた
+- `any_executor`をRTTIのない環境でビルドできるようサポートを修正
+- `thread_pool`の単体テストがRTTIのない環境で動作するよう修正
+- WindowsのClangでのC++20コルーチンの互換性を修正
+- Windowsランタイムのいくつかの互換性問題を修正
+- `asio::query`の追加によって起こったシャドウ名の警告を修正
+- Linuxでの「logical ‘or’ of equal expressions」警告を修正
+- switch文でのフォールスルー警告を修正
+- 不足していた`push/pop_options.hpp`のインクルードを追加
+- 「zero-as-null-pointer-constant (値ゼロをヌルポインタ定数として使用している)」警告を修正
+- カンマ演算子の警告を修正
+- selectリアクタがWindowsでどのようなときに使用されるのかを明確にするために、ドキュメントを更新
+- `any_executor`の比較と変換で曖昧さが発生する可能性があった問題を修正
+- MSVC 19.8での非実験的なC++20コルーチンの検出を追加
+- uClibcとの互換性を修正
+
+
 ## &amp;lt;a id=&amp;#34;atomic&amp;#34; href=&amp;#34;#atomic&amp;#34;&amp;gt;Atomic&amp;lt;/a&amp;gt;
 
 - 内部のロックプールで使用するアドレス探索アルゴリズムのSSE2とSSE4.1版を実装した。これにより、競合が激しいケースでの待機 (wait) と通知 (notify) の操作がパフォーマンス向上する可能性がある
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>