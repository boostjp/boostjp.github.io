<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2016-08-19T12:19:03.784565</updated>
  <id>40e159fb-98ce-4e4b-841d-64155eab5e64</id>

  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>0f2625979d9f57f023fe106c09dcb54f5e18ccdd:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:19:00 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- コードの開きバッククォートがなかったので追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>865fdde9d94aa9db1c7bda5138cec25b8deee354:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:18:50 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `last_value` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/last_value.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;last_value&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/last_value.hpp&#34; target=&#34;_blank&#34;&gt;boost/last_value.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// void は禁止&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事前条件&lt;/strong&gt;: &lt;code&gt;first != last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 最後のイテレータを参照外しした結果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;void_call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 値は無意味だが &lt;code&gt;void&lt;/code&gt; ではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: &lt;code&gt;void&lt;/code&gt; を戻す関数は、しばしば関数オブジェクトを構成するシステムに多くの回避手段を要求する。
    そこで &lt;code&gt;void&lt;/code&gt; を戻すことを避け、代わりに関数オブジェクトを容易に適合させうる、実装依存の無意味な値を戻すことに決定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:17 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `last_value` -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/last_value.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;last_value&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/last_value.hpp&#34; target=&#34;_blank&#34;&gt;boost/last_value.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// void は禁止&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事前条件&lt;/strong&gt;: &lt;code&gt;first != last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 最後のイテレータを参照外しした結果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;void_call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 値は無意味だが &lt;code&gt;void&lt;/code&gt; ではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: &lt;code&gt;void&lt;/code&gt; を戻す関数は、しばしば関数オブジェクトを構成するシステムに多くの回避手段を要求する。
    そこで &lt;code&gt;void&lt;/code&gt; を戻すことを避け、代わりに関数オブジェクトを容易に適合させうる、実装依存の無意味な値を戻すことに決定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:17 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- パースエラーを修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>203a45dd03ce1f8107adf06f844a4962a79622cf:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-19 12:09:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt; -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html"/>
      <id>526a6ae595cec0eb80e211825c05d6d804484f95:archive/boost_docs/libs/signals/reference/signal.md</id>
      <updated>2016-08-19 12:07:12 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;boost/signal.hpp&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signal.hpp&#34; target=&#34;_blank&#34;&gt;boost/signal.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;signal&lt;/code&gt; クラステンプレートの仕様では、二つの正整数 &lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; が使われている。
前者はスロットに受け渡すことが出来る関数のパラメタ最大数を、後者は所与の実体化されたシグナルに対する関数のパラメタ数を記述する。
&lt;code&gt;BOOST_SIGNALS_MAX_ARGS&lt;/code&gt; は、実装によってサポートされる実引数の最大値を定義するプリプロセッサのマクロとして、ヘッダ中に存在している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Function type R (T1, T2, ..., TN)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Signature&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signalN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SlotFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html&#34;&gt;signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GroupCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;#constructor&#34;&gt;explicit signal(const Combiner&amp;amp; combiner = Combiner(), const GroupCompare&amp;amp; group_compare = GroupCompare());&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;combiner&lt;/code&gt; と &lt;code&gt;group_compare&lt;/code&gt; で基底クラスを初期化する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:29 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>526a6ae595cec0eb80e211825c05d6d804484f95:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:07:12 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>