<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2015-04-20T19:07:44.613763</updated>
  <id>679e687d-ce08-45a4-a88f-a36f725d9f72</id>

  
    <entry>
      <title>Boost.勉強会 #17 東京 -- Boost.勉強会 #17のタイムテーブルを更新。発表者が埋まった。</title>
      <link href="http://boostjp.github.io/study_meeting/study17.html"/>
      <id>1ec1ce2ad44b4cf6eb580f2e7915f1165e1e0428:study_meeting/study17.md</id>
      <updated>2015-04-20 19:07:39 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.勉強会 #17 東京&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2015/05/30(土) 11:00〜18:00&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;株式会社インターネットイニシアティブ (IIJ) 本社&lt;/li&gt;
&lt;li&gt;〒102-0071 東京都千代田区富士見2-10-2 飯田橋グラン・ブルーム 13F&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/14355/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #17 東京 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催者&amp;amp;スタッフ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;高橋 晶(@cpp_akira)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;発表内容&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:30〜&lt;/td&gt;
&lt;td&gt;開場&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00〜11:10&lt;/td&gt;
&lt;td&gt;オープニング。Boost.勉強会について。会場の諸注意&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:10〜11:40&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.54.0-1.58.0&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:00〜12:30&lt;/td&gt;
&lt;td&gt;(確認中)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/mikiemon_h&#34; target=&#34;_blank&#34;&gt;mikiemon_h&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:30〜13:45&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:45〜14:15&lt;/td&gt;
&lt;td&gt;Siv3D &amp;amp; C++ を使ったメディアアート・ゲームプログラミングの楽しみ方(仮)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/Reputeless&#34; target=&#34;_blank&#34;&gt;Reputeless&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:30〜15:00&lt;/td&gt;
&lt;td&gt;Boost.Logとfluentdで始めるログ活用術（仮）&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/termoshtt&#34; target=&#34;_blank&#34;&gt;termoshtt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:15〜15:45&lt;/td&gt;
&lt;td&gt;odeint or Google Test(仮)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/rydotyosh&#34; target=&#34;_blank&#34;&gt;rydotyosh&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:00〜16:30&lt;/td&gt;
&lt;td&gt;MessagePack for C++関係の話(仮)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/redboltz&#34; target=&#34;_blank&#34;&gt;redboltz&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:45〜17:15&lt;/td&gt;
&lt;td&gt;Boost.Containerの特徴&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30〜18:00&lt;/td&gt;
&lt;td&gt;C++11やEmscriptenと付き合って１年間の振り返り(仮)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/kou_yeung&#34; target=&#34;_blank&#34;&gt;kou_yeung&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/paosidufygthrj&#34; target=&#34;_blank&#34;&gt;paosidufygthrj&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 -- Boost.勉強会 #17 東京のページを作成</title>
      <link href="http://boostjp.github.io/study_meeting.html"/>
      <id>9fd3ffe16effc4958a7e52ef7d2b872e064aed16:study_meeting.md</id>
      <updated>2015-04-20 15:05:22 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.勉強会&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;という、C++の有名なライブラリ群を中心とした、C++全般の勉強会です。&lt;/p&gt;
&lt;p&gt;Boostに限らず、C++全般の話、QtやOpenCVのような他のライブラリ、自分が作ったプログラムの紹介、その他C++プログラマに知っておいてもらいたいことの紹介(データ構造やアルゴリズム、イディオム、プログラムの設計やデザインパターン、他の言語での考え方やアプローチ)など、幅広いテーマを扱っています。 &lt;/p&gt;
&lt;p&gt;このページでは、開催履歴やネタ帳を置いていきます。&lt;/p&gt;
&lt;h2&gt;Boost.勉強会の主催者は誰？&lt;/h2&gt;
&lt;p&gt;Boost.勉強会は、各地のやる気のある人が主催しています。&lt;/p&gt;
&lt;p&gt;「自分のいる地域でもBoost.勉強会を開催したい」という方や、「自分が開催している勉強会をBoost.勉強会という名前にしたい」という方は、&lt;a href=&#34;https://groups.google.com/group/boostjp&#34; target=&#34;_blank&#34;&gt;boostjp Google Group&lt;/a&gt;や、Twitterの&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;ハッシュタグでご相談ください。 &lt;/p&gt;
&lt;p&gt;各地の主催者は、&lt;a href=&#34;http://boostjp.github.io/the-team.html&#34;&gt;運営メンバページ&lt;/a&gt;に記載してあります。&lt;/p&gt;
&lt;h2&gt;英語表記&lt;/h2&gt;
&lt;p&gt;Boost.勉強会の英語表記は「Boost.StudyMeeting」です。英語圏でもぜひBoost.勉強会を紹介してください。&lt;/p&gt;
&lt;h2&gt;その他、Boost.勉強会情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/idea.html&#34;&gt;ネタ帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;↑みんな書いてね！&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/reversed_index.html&#34;&gt;ライブラリ逆引き&lt;/a&gt; (どの回でどのライブラリが誰によって発表されたかの表）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/code_of_conduct.html&#34;&gt;行動規範&lt;/a&gt; (Boost.勉強会の参加者に守ってほしいこと)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;開催予定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study17.html&#34;&gt;Boost.勉強会 #17 東京 (2015/05/30(土))&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;開催履歴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study1.html&#34;&gt;Boost.勉強会 #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study2.html&#34;&gt;Boost.勉強会 #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study3.html&#34;&gt;Boost.勉強会 #3 関西&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-nagoya.html&#34;&gt;Boost.忘年会 2010@名古屋(2010/12/04(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-sapporo.html&#34;&gt;Boost.忘年会 2010@札幌(2010/12/10(金))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-tokyo.html&#34;&gt;Boost.忘年会 2010@東京(2010/12/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/10128&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2010@関西(2010/12/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study4.html&#34;&gt;Boost.勉強会 #4 東京&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study5.html&#34;&gt;Boost.勉強会 #5 名古屋(2011/5/14)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study6.html&#34;&gt;Boost.勉強会 #6 札幌 (2011/11/05(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study7.html&#34;&gt;Boost.勉強会 #7 東京 (2011/12/03(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study8.html&#34;&gt;Boost.勉強会 #8 大阪 (2012/02/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study9.html&#34;&gt;Boost.勉強会 #9 つくば (2012/05/26(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study10.html&#34;&gt;Boost.勉強会 #10 東京(2012/07/28(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study11.html&#34;&gt;Boost.勉強会 #11 東京(2013/06/01(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study12.html&#34;&gt;Boost.勉強会 #12 大阪(2013/06/22(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study13.html&#34;&gt;Boost.勉強会 #13 仙台(2013/10/19)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study14.html&#34;&gt;Boost.勉強会 #14 東京 (2014/03/01(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study15.html&#34;&gt;Boost.勉強会 #15 札幌 (2014/05/24(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study16.html&#34;&gt;Boost.勉強会 #16 大阪 (2014/09/20(土))&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #17 東京 -- Boost.勉強会 #17 東京のページを作成</title>
      <link href="http://boostjp.github.io/study_meeting/study17.html"/>
      <id>9fd3ffe16effc4958a7e52ef7d2b872e064aed16:study_meeting/study17.md</id>
      <updated>2015-04-20 15:05:22 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.勉強会 #17 東京&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2015/05/30(土) 11:00〜18:00&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;株式会社インターネットイニシアティブ (IIJ) 本社&lt;/li&gt;
&lt;li&gt;〒102-0071 東京都千代田区富士見2-10-2 飯田橋グラン・ブルーム 13F&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/14355/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #17 東京 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催者&amp;amp;スタッフ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;高橋 晶(@cpp_akira)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;発表内容&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:30〜&lt;/td&gt;
&lt;td&gt;開場&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00〜11:10&lt;/td&gt;
&lt;td&gt;オープニング。Boost.勉強会について。会場の諸注意&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:10〜11:40&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.54.0-1.58.0&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:00〜12:30&lt;/td&gt;
&lt;td&gt;(募集中)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:30〜13:45&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:45〜14:15&lt;/td&gt;
&lt;td&gt;(募集中)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:30〜15:00&lt;/td&gt;
&lt;td&gt;(募集中)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:15〜15:45&lt;/td&gt;
&lt;td&gt;(募集中)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:00〜16:30&lt;/td&gt;
&lt;td&gt;(MessagePack for C++関係の話)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/redboltz&#34; target=&#34;_blank&#34;&gt;redboltz&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:45〜17:15&lt;/td&gt;
&lt;td&gt;Boost.Containerの特徴&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;cpp_akira&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30〜18:00&lt;/td&gt;
&lt;td&gt;C++11やEmscriptenと付き合って１年間の振り返り(仮)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://twitter.com/kou_yeung&#34; target=&#34;_blank&#34;&gt;kou_yeung&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/paosidufygthrj&#34; target=&#34;_blank&#34;&gt;paosidufygthrj&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 -- Boost.勉強会の行動規範を追加。</title>
      <link href="http://boostjp.github.io/study_meeting.html"/>
      <id>0c5e5cf1d8351f2331e93f7616fe1174b688d2f7:study_meeting.md</id>
      <updated>2015-04-10 15:13:02 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.勉強会&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;という、C++の有名なライブラリ群を中心とした、C++全般の勉強会です。&lt;/p&gt;
&lt;p&gt;Boostに限らず、C++全般の話、QtやOpenCVのような他のライブラリ、自分が作ったプログラムの紹介、その他C++プログラマに知っておいてもらいたいことの紹介(データ構造やアルゴリズム、イディオム、プログラムの設計やデザインパターン、他の言語での考え方やアプローチ)など、幅広いテーマを扱っています。 &lt;/p&gt;
&lt;p&gt;このページでは、開催履歴やネタ帳を置いていきます。&lt;/p&gt;
&lt;h2&gt;Boost.勉強会の主催者は誰？&lt;/h2&gt;
&lt;p&gt;Boost.勉強会は、各地のやる気のある人が主催しています。&lt;/p&gt;
&lt;p&gt;「自分のいる地域でもBoost.勉強会を開催したい」という方や、「自分が開催している勉強会をBoost.勉強会という名前にしたい」という方は、&lt;a href=&#34;https://groups.google.com/group/boostjp&#34; target=&#34;_blank&#34;&gt;boostjp Google Group&lt;/a&gt;や、Twitterの&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;ハッシュタグでご相談ください。 &lt;/p&gt;
&lt;p&gt;各地の主催者は、&lt;a href=&#34;http://boostjp.github.io/the-team.html&#34;&gt;運営メンバページ&lt;/a&gt;に記載してあります。&lt;/p&gt;
&lt;h2&gt;英語表記&lt;/h2&gt;
&lt;p&gt;Boost.勉強会の英語表記は「Boost.StudyMeeting」です。英語圏でもぜひBoost.勉強会を紹介してください。&lt;/p&gt;
&lt;h2&gt;その他、Boost.勉強会情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/idea.html&#34;&gt;ネタ帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;↑みんな書いてね！&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/reversed_index.html&#34;&gt;ライブラリ逆引き&lt;/a&gt; (どの回でどのライブラリが誰によって発表されたかの表）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/code_of_conduct.html&#34;&gt;行動規範&lt;/a&gt; (Boost.勉強会の参加者に守ってほしいこと)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;開催予定&lt;/h3&gt;
&lt;h3&gt;開催履歴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study1.html&#34;&gt;Boost.勉強会 #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study2.html&#34;&gt;Boost.勉強会 #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study3.html&#34;&gt;Boost.勉強会 #3 関西&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-nagoya.html&#34;&gt;Boost.忘年会 2010@名古屋(2010/12/04(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-sapporo.html&#34;&gt;Boost.忘年会 2010@札幌(2010/12/10(金))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/year-end-party2010-tokyo.html&#34;&gt;Boost.忘年会 2010@東京(2010/12/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/10128&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2010@関西(2010/12/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study4.html&#34;&gt;Boost.勉強会 #4 東京&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study5.html&#34;&gt;Boost.勉強会 #5 名古屋(2011/5/14)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study6.html&#34;&gt;Boost.勉強会 #6 札幌 (2011/11/05(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study7.html&#34;&gt;Boost.勉強会 #7 東京 (2011/12/03(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study8.html&#34;&gt;Boost.勉強会 #8 大阪 (2012/02/11(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study9.html&#34;&gt;Boost.勉強会 #9 つくば (2012/05/26(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study10.html&#34;&gt;Boost.勉強会 #10 東京(2012/07/28(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study11.html&#34;&gt;Boost.勉強会 #11 東京(2013/06/01(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study12.html&#34;&gt;Boost.勉強会 #12 大阪(2013/06/22(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study13.html&#34;&gt;Boost.勉強会 #13 仙台(2013/10/19)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study14.html&#34;&gt;Boost.勉強会 #14 東京 (2014/03/01(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study15.html&#34;&gt;Boost.勉強会 #15 札幌 (2014/05/24(土))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/study_meeting/study16.html&#34;&gt;Boost.勉強会 #16 大阪 (2014/09/20(土))&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>行動規範(Code of Conduct) -- Boost.勉強会の行動規範を追加。</title>
      <link href="http://boostjp.github.io/study_meeting/code_of_conduct.html"/>
      <id>0c5e5cf1d8351f2331e93f7616fe1174b688d2f7:study_meeting/code_of_conduct.md</id>
      <updated>2015-04-10 15:13:02 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;行動規範(Code of Conduct)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、Boost.勉強会の参加者がどのような振る舞いをすべきかを記述します。その目的は、参加者間のトラブル防止です。&lt;/p&gt;
&lt;p&gt;Boost.勉強会の参加者に守ってほしいことは、簡潔にまとめると以下の2点です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;周りの人々への配慮をしましょう。&lt;/li&gt;
&lt;li&gt;技術交流の場にふさわしい行動をしましょう。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boost.勉強会には、様々なバックグラウンドを持つ人々が参加します。デリケートな問題に配慮し、過度な意見の押し付けととられる行動は控えてください。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostライブラリのビルド方法 -- ヘッダーオンリーで十分な場合向けに b2 headers の解説をちょこっと追加</title>
      <link href="http://boostjp.github.io/howtobuild.html"/>
      <id>2411cc43591ef05ba685a2da341089c8724426c2:howtobuild.md</id>
      <updated>2015-04-09 12:07:43 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostライブラリのビルド方法&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここではBoostライブラリのビルド方法について説明します。&lt;/p&gt;
&lt;p&gt;Windowsとそれ以外に分けて説明します。また、LinuxではBoostライブラリがディストリビューションによって提供されていることがありますが、ここではビルド方法のみを扱います。&lt;/p&gt;
&lt;p&gt;1.47.0からbjamだけではなく、b2も生成されるようになりました。また、公式がbjamからb2での説明に切り替わっています。なので、こちらもそれに合わせることにします。&lt;/p&gt;
&lt;h2&gt;ダウンロード&lt;/h2&gt;
&lt;p&gt;現在の最新バージョンは、以下からダウンロードできます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/download/#live&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/download/#live&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;開発バージョンは、Githubから取得できます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github から clone する場合、具体的には &lt;a href=&#34;https://github.com/boostorg/boost&#34; target=&#34;_blank&#34;&gt;boostorg/boost&lt;/a&gt; を clone し、実際の Boost ライブラリ群は &lt;code&gt;git submodule&lt;/code&gt; で扱います。新たに clone する場合は次のように &lt;code&gt;--recursive&lt;/code&gt; オプションを付けて clone します。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git clone --recursive git@github.com:boostorg/boost.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;もし、 &lt;code&gt;--recursive&lt;/code&gt; せずに clone した場合や、&lt;code&gt;checkout&lt;/code&gt; に伴い必要な場合には次のようにします。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;cd boost
git submodule --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Windowsの場合&lt;/h2&gt;
&lt;p&gt;手順はここ(&lt;a href=&#34;http://www.boost.org/doc/libs/release/more/getting_started/windows.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/more/getting_started/windows.html&lt;/a&gt;)に書かれていますのでそれを翻訳します。&lt;/p&gt;
&lt;p&gt;解凍したディレクトリに移動します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; cd (解凍したディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; bootstrap.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;すると、b2.exe,bjam.exeが生成されます。&lt;/p&gt;
&lt;p&gt;単になんの指定もしないビルドでは：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; b2.exe install -j2 --prefix=(インストールしたいディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;となります。これでビルドし、インストールされるのを待つだけです。&lt;/p&gt;
&lt;p&gt;Vista/7以降のWindows OSを使っている場合は、&lt;code&gt;--prefix=&lt;/code&gt;で指定するディレクトリにはProgram FilesのようなCドライブの管理者権限が必要になるディレクトリは避けてください。権限がない場合はインストールに失敗しますのでご注意を。&lt;/p&gt;
&lt;h2&gt;Windows以外、Linux/Macなどの場合&lt;/h2&gt;
&lt;p&gt;手順はここ(&lt;a href=&#34;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html&lt;/a&gt;)に書かれているのでそれを翻訳します。&lt;/p&gt;
&lt;p&gt;解凍したディレクトリに移動します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ cd (解凍したディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;以下のコマンドを実行します：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;これで実行可能ファイルのbjamおよびb2が生成されます。&lt;/p&gt;
&lt;p&gt;単になんの指定もしないビルドでは：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ ./b2 install -j2 --prefix=(インストールしたいディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;となります。&lt;/p&gt;
&lt;p&gt;Linuxを使っており、ディストリビューション提供のboostライブラリをインストールしている場合は、&lt;code&gt;--prefix&lt;/code&gt;で&lt;u&gt;&lt;code&gt;/usr&lt;/code&gt;以外を必ず指定&lt;/u&gt;してください。&lt;code&gt;--prefix&lt;/code&gt;を省略した場合&lt;code&gt;/usr/local&lt;/code&gt;が選択されますが、多くの環境では$PATHの解決順序の関係上無条件で/usr/local上のBoostが選択されてしまうでしょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr&lt;/code&gt;以下を使用すると環境を壊すことになりかねないので、通常は&lt;code&gt;$HOME/local&lt;/code&gt;や&lt;code&gt;$HOME/boost_1_51_0&lt;/code&gt;といったディレクトリを用意するのが良いでしょう。&lt;/p&gt;
&lt;p&gt;一部のディストリビューションでは$HOME/localを$PATHにデフォルトで登録しているものもあるので、複数人で共用している場合には便利です。&lt;/p&gt;
&lt;h3&gt;ヘッダーオンリーで使う場合&lt;/h3&gt;
&lt;p&gt;事前にビルドの必要の無い、またはマクロによりヘッダーオンリーで使用可能なライブラリーのみを使いたい場合には、 &lt;code&gt;bootstrap&lt;/code&gt; を実行の後、&lt;code&gt;b2&lt;/code&gt; へ &lt;code&gt;headers&lt;/code&gt; を引数として渡す事で、インクルード用のヘッダーファイル構造のみ構築できます。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;./b2 headers
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;並列ビルド&lt;/h3&gt;
&lt;p&gt;一般的なmake同様に、複数CPUを使ってビルドできます。&lt;code&gt;-j 8&lt;/code&gt;のように、&lt;code&gt;-j N&lt;/code&gt;と指定するとN個並列でビルド処理が実行されます。&lt;strong&gt;これを指定しないとビルドが非常に遅くなるので、基本的に常に指定することをおすすめします。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nの数は、一般的にはCPUの物理コア数または物理コア数+1を指定することが多いようです。経験的に+1することでIO waitが隠蔽されるのを期待できます。&lt;/p&gt;
&lt;p&gt;ノートPCだと熱が大変なことになるので、気になるようなら少し少なめにしても良いかもしれません。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;※ここからは完全に蛇足です。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;b2/bjamが受け取るコマンド&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;b2 --help&lt;/code&gt;では多くのユーザーが期待するヘルプを参照することはできません。&lt;/p&gt;
&lt;p&gt;b2およびbjamに関するヘルプを参照するにはboostを解凍したディレクトリ上で&lt;code&gt;b2 --help&lt;/code&gt;を行なってください。&lt;/p&gt;
&lt;p&gt;以下に紹介するb2/bjamへの引数に順序はありません。どのような順で指定しても正しく解釈されます。&lt;/p&gt;
&lt;p&gt;コマンドラインの例:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;./b2 toolset=msvc link=static,shared address-model=64 install
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;プロパティ&lt;/h3&gt;
&lt;h4&gt;toolset&lt;/h4&gt;
&lt;p&gt;ひとつのマシンに複数種類のコンパイラがインストールされている場合はtoolsetコマンドで指定ができます。例えば、以下の指定が可能です。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コンパイラ指定&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;borland&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Borland社のコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dmc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digital Mars社のコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;darwin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Apple社の手によるgccコンパイラ(Mac OS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GNU プロジェクトによるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;intel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Intel社によるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;msvc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Microsoft社によるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;msvc-9.0 (Visual C++ 2008)、msvc-10.0 (Visual C++ 2010)のように、コンパイラのバージョン指定も可能です。&lt;/p&gt;
&lt;h4&gt;link&lt;/h4&gt;
&lt;p&gt;これはstatic, sharedライブラリを作るかどうかの指定をするコマンドです。以下のように指定して使用します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static,shared
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;環境によって、以下のようなライブラリファイルを生成します。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;Mac OSX&lt;/th&gt;
&lt;th&gt;Other Systems&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;.lib&lt;/td&gt;
&lt;td&gt;.a&lt;/td&gt;
&lt;td&gt;.a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shared&lt;/td&gt;
&lt;td&gt;.dll&lt;/td&gt;
&lt;td&gt;.dylib&lt;/td&gt;
&lt;td&gt;.so&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;threading&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;multi&lt;/td&gt;
&lt;td&gt;マルチスレッドなライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;single&lt;/td&gt;
&lt;td&gt;シングルスレッドなライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;筆者の環境ではsingleがエラーが出てコンパイルできなかった。 (~~&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7105&#34; target=&#34;_blank&#34;&gt;#7105&lt;/a&gt;~~)&lt;/p&gt;
&lt;p&gt;trunkで修正済み 1.53.0で修正されると思われる&lt;/p&gt;
&lt;h4&gt;variant&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;debug&lt;/td&gt;
&lt;td&gt;デバッグビルドを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;release&lt;/td&gt;
&lt;td&gt;リリースビルドを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;デフォルトプロパティ&lt;/h4&gt;
&lt;p&gt;Windows環境においてはデフォルトで以下のプロパティが使用されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static threading=multi variant=debug,release runtime-link=shared
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Linux環境においてはデフォルトで以下のプロパティが使用されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static,shared threading=multi variant=release
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;その他の環境についてはアンドキュメントとなっているので注意してください。&lt;/p&gt;
&lt;h3&gt;アーキテクチャ&lt;/h3&gt;
&lt;p&gt;ターゲットアーキテクチャが異なる場合には、b2/bjamに&lt;code&gt;architecture=&amp;lt;target-architecture&amp;gt;&lt;/code&gt;を指定すればよい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;target-architecture&amp;gt;&lt;/code&gt;に指定できる値は以下のとおりです。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x86&lt;/td&gt;
&lt;td&gt;IA-32/x86_64向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ia64&lt;/td&gt;
&lt;td&gt;IA-64向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm&lt;/td&gt;
&lt;td&gt;Arm向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power&lt;/td&gt;
&lt;td&gt;Power-PC向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sparc&lt;/td&gt;
&lt;td&gt;Sparc向け&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ただしtoolsetによってはサポートされていない場合があります。&lt;/p&gt;
&lt;h3&gt;アドレスモデル&lt;/h3&gt;
&lt;p&gt;異なるアドレスモデルでビルドするにはb2/bjamに以下を指定する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;address-model=32&lt;/td&gt;
&lt;td&gt;32ビットのライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;address-model=64&lt;/td&gt;
&lt;td&gt;64ビットのライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;レイアウト&lt;/h3&gt;
&lt;p&gt;Boostをビルドする際にb2/bjamが生成するバイナリファイル名はデフォルトで環境によって異なります。&lt;/p&gt;
&lt;p&gt;これは&lt;code&gt;--layout=&amp;lt;layout&amp;gt;&lt;/code&gt;を渡すことで変更できます。&lt;code&gt;&amp;lt;layout&amp;gt;&lt;/code&gt;に渡すことのできる値は以下のとおりです。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;versioned&lt;/td&gt;
&lt;td&gt;バイナリファイル名にバージョンが入ります。Windowsではデフォルトでversionedが選択されます。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tagged&lt;/td&gt;
&lt;td&gt;ビルド時に指定したプロパティ（variantやthreading等）がバイナリファイル名に含まれます。ただし、コンパイラ名、コンパイラのバージョン、Boostのバージョンは入りません。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system&lt;/td&gt;
&lt;td&gt;システムへインテグレートするためにバージョン番号などは入りません。Unixではデフォルトでsystemが選択されます。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ビルドのクリーン&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--clean&lt;/code&gt;を渡すことでビルドをクリーンすることが可能です。&lt;/p&gt;
&lt;p&gt;ただし、b2/bjamはプロパティなどの差から異なるビルドを生成します。その為クリーン対象のビルドと同一のプロパティを指定した上で&lt;code&gt;--clean&lt;/code&gt;を渡す必要があります。&lt;/p&gt;
&lt;h3&gt;コンパイラオプション、リンカオプション&lt;/h3&gt;
&lt;p&gt;ビルドする際にコンパイラやリンカにオプションを渡す必要がある場合は、b2/bjamの引数に以下を指定できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cflags=(Cコンパイラオプション)&lt;/li&gt;
&lt;li&gt;cxxflags=(C++コンパイラオプション)&lt;/li&gt;
&lt;li&gt;linkflags=(リンカオプション)&lt;/li&gt;
&lt;li&gt;define=(プリプロセッサシンボル）&lt;/li&gt;
&lt;li&gt;include=(追加インクルードパス）&lt;/li&gt;
&lt;li&gt;library-path=(追加ライブラリパス）&lt;/li&gt;
&lt;li&gt;library-file=(追加オブジェクトファイル）&lt;/li&gt;
&lt;li&gt;find-static-library=(静的ライブラリ）&lt;/li&gt;
&lt;li&gt;find-shared-library=(動的ライブラリ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この他にも多くのオプションを指定することができますが、toolsetによってはサポートされていないものもあります。&lt;/p&gt;
&lt;h3&gt;特定のライブラリだけビルドする/ビルドしない&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--with-&lt;/code&gt;&lt;em&gt;library&lt;/em&gt; や &lt;code&gt;--without-&lt;/code&gt;&lt;em&gt;library&lt;/em&gt; と書くことで、特定のライブラリだけビルドする/ビルドしないを切り替えられます。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;--with-python&lt;/code&gt; とすれば、python ライブラリだけをビルドします。 &lt;code&gt;--without-iostreams&lt;/code&gt; とすれば、iostreams ライブラリをビルドしません。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Usagi Ito</name>
        <email>usagi@WonderRabbitProject.net</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostライブラリのビルド方法 -- Githubからのビルド方法について具体的な解説を追加。若干の表現の統一</title>
      <link href="http://boostjp.github.io/howtobuild.html"/>
      <id>fabfc3902073240910c6879ab6221437b7fa4b35:howtobuild.md</id>
      <updated>2015-04-09 11:58:10 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostライブラリのビルド方法&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここではBoostライブラリのビルド方法について説明します。&lt;/p&gt;
&lt;p&gt;Windowsとそれ以外に分けて説明します。また、LinuxではBoostライブラリがディストリビューションによって提供されていることがありますが、ここではビルド方法のみを扱います。&lt;/p&gt;
&lt;p&gt;1.47.0からbjamだけではなく、b2も生成されるようになりました。また、公式がbjamからb2での説明に切り替わっています。なので、こちらもそれに合わせることにします。&lt;/p&gt;
&lt;h2&gt;ダウンロード&lt;/h2&gt;
&lt;p&gt;現在の最新バージョンは、以下からダウンロードできます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/download/#live&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/download/#live&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;開発バージョンは、Githubから取得できます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github から clone する場合、具体的には &lt;a href=&#34;https://github.com/boostorg/boost&#34; target=&#34;_blank&#34;&gt;boostorg/boost&lt;/a&gt; を clone し、実際の Boost ライブラリ群は &lt;code&gt;git submodule&lt;/code&gt; で扱います。新たに clone する場合は次のように &lt;code&gt;--recursive&lt;/code&gt; オプションを付けて clone します。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git clone --recursive git@github.com:boostorg/boost.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;もし、 &lt;code&gt;--recursive&lt;/code&gt; せずに clone した場合や、&lt;code&gt;checkout&lt;/code&gt; に伴い必要な場合には次のようにします。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;cd boost
git submodule --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Windowsの場合&lt;/h2&gt;
&lt;p&gt;手順はここ(&lt;a href=&#34;http://www.boost.org/doc/libs/release/more/getting_started/windows.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/more/getting_started/windows.html&lt;/a&gt;)に書かれていますのでそれを翻訳します。&lt;/p&gt;
&lt;p&gt;解凍したディレクトリに移動します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; cd (解凍したディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; bootstrap.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;すると、b2.exe,bjam.exeが生成されます。&lt;/p&gt;
&lt;p&gt;単になんの指定もしないビルドでは：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; b2.exe install -j2 --prefix=(インストールしたいディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;となります。これでビルドし、インストールされるのを待つだけです。&lt;/p&gt;
&lt;p&gt;Vista/7以降のWindows OSを使っている場合は、&lt;code&gt;--prefix=&lt;/code&gt;で指定するディレクトリにはProgram FilesのようなCドライブの管理者権限が必要になるディレクトリは避けてください。権限がない場合はインストールに失敗しますのでご注意を。&lt;/p&gt;
&lt;h2&gt;Windows以外、Linux/Macなどの場合&lt;/h2&gt;
&lt;p&gt;手順はここ(&lt;a href=&#34;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html&lt;/a&gt;)に書かれているのでそれを翻訳します。&lt;/p&gt;
&lt;p&gt;解凍したディレクトリに移動します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ cd (解凍したディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;以下のコマンドを実行します：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;これで実行可能ファイルのbjamおよびb2が生成されます。&lt;/p&gt;
&lt;p&gt;単になんの指定もしないビルドでは：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ ./b2 install -j2 --prefix=(インストールしたいディレクトリ)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;となります。&lt;/p&gt;
&lt;p&gt;Linuxを使っており、ディストリビューション提供のboostライブラリをインストールしている場合は、&lt;code&gt;--prefix&lt;/code&gt;で&lt;u&gt;&lt;code&gt;/usr&lt;/code&gt;以外を必ず指定&lt;/u&gt;してください。&lt;code&gt;--prefix&lt;/code&gt;を省略した場合&lt;code&gt;/usr/local&lt;/code&gt;が選択されますが、多くの環境では$PATHの解決順序の関係上無条件で/usr/local上のBoostが選択されてしまうでしょう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr&lt;/code&gt;以下を使用すると環境を壊すことになりかねないので、通常は&lt;code&gt;$HOME/local&lt;/code&gt;や&lt;code&gt;$HOME/boost_1_51_0&lt;/code&gt;といったディレクトリを用意するのが良いでしょう。&lt;/p&gt;
&lt;p&gt;一部のディストリビューションでは$HOME/localを$PATHにデフォルトで登録しているものもあるので、複数人で共用している場合には便利です。&lt;/p&gt;
&lt;h3&gt;並列ビルド&lt;/h3&gt;
&lt;p&gt;一般的なmake同様に、複数CPUを使ってビルドできます。&lt;code&gt;-j 8&lt;/code&gt;のように、&lt;code&gt;-j N&lt;/code&gt;と指定するとN個並列でビルド処理が実行されます。&lt;strong&gt;これを指定しないとビルドが非常に遅くなるので、基本的に常に指定することをおすすめします。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nの数は、一般的にはCPUの物理コア数または物理コア数+1を指定することが多いようです。経験的に+1することでIO waitが隠蔽されるのを期待できます。&lt;/p&gt;
&lt;p&gt;ノートPCだと熱が大変なことになるので、気になるようなら少し少なめにしても良いかもしれません。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;※ここからは完全に蛇足です。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;b2/bjamが受け取るコマンド&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;b2 --help&lt;/code&gt;では多くのユーザーが期待するヘルプを参照することはできません。&lt;/p&gt;
&lt;p&gt;b2およびbjamに関するヘルプを参照するにはboostを解凍したディレクトリ上で&lt;code&gt;b2 --help&lt;/code&gt;を行なってください。&lt;/p&gt;
&lt;p&gt;以下に紹介するb2/bjamへの引数に順序はありません。どのような順で指定しても正しく解釈されます。&lt;/p&gt;
&lt;p&gt;コマンドラインの例:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;./b2 toolset=msvc link=static,shared address-model=64 install
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;プロパティ&lt;/h3&gt;
&lt;h4&gt;toolset&lt;/h4&gt;
&lt;p&gt;ひとつのマシンに複数種類のコンパイラがインストールされている場合はtoolsetコマンドで指定ができます。例えば、以下の指定が可能です。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コンパイラ指定&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;borland&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Borland社のコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dmc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Digital Mars社のコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;darwin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Apple社の手によるgccコンパイラ(Mac OS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GNU プロジェクトによるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;intel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Intel社によるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;msvc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Microsoft社によるコンパイラ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;msvc-9.0 (Visual C++ 2008)、msvc-10.0 (Visual C++ 2010)のように、コンパイラのバージョン指定も可能です。&lt;/p&gt;
&lt;h4&gt;link&lt;/h4&gt;
&lt;p&gt;これはstatic, sharedライブラリを作るかどうかの指定をするコマンドです。以下のように指定して使用します。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static,shared
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;環境によって、以下のようなライブラリファイルを生成します。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;Mac OSX&lt;/th&gt;
&lt;th&gt;Other Systems&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;.lib&lt;/td&gt;
&lt;td&gt;.a&lt;/td&gt;
&lt;td&gt;.a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shared&lt;/td&gt;
&lt;td&gt;.dll&lt;/td&gt;
&lt;td&gt;.dylib&lt;/td&gt;
&lt;td&gt;.so&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;threading&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;multi&lt;/td&gt;
&lt;td&gt;マルチスレッドなライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;single&lt;/td&gt;
&lt;td&gt;シングルスレッドなライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;筆者の環境ではsingleがエラーが出てコンパイルできなかった。 (~~&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7105&#34; target=&#34;_blank&#34;&gt;#7105&lt;/a&gt;~~)&lt;/p&gt;
&lt;p&gt;trunkで修正済み 1.53.0で修正されると思われる&lt;/p&gt;
&lt;h4&gt;variant&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;debug&lt;/td&gt;
&lt;td&gt;デバッグビルドを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;release&lt;/td&gt;
&lt;td&gt;リリースビルドを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;デフォルトプロパティ&lt;/h4&gt;
&lt;p&gt;Windows環境においてはデフォルトで以下のプロパティが使用されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static threading=multi variant=debug,release runtime-link=shared
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Linux環境においてはデフォルトで以下のプロパティが使用されます。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;link=static,shared threading=multi variant=release
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;その他の環境についてはアンドキュメントとなっているので注意してください。&lt;/p&gt;
&lt;h3&gt;アーキテクチャ&lt;/h3&gt;
&lt;p&gt;ターゲットアーキテクチャが異なる場合には、b2/bjamに&lt;code&gt;architecture=&amp;lt;target-architecture&amp;gt;&lt;/code&gt;を指定すればよい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;target-architecture&amp;gt;&lt;/code&gt;に指定できる値は以下のとおりです。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x86&lt;/td&gt;
&lt;td&gt;IA-32/x86_64向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ia64&lt;/td&gt;
&lt;td&gt;IA-64向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm&lt;/td&gt;
&lt;td&gt;Arm向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power&lt;/td&gt;
&lt;td&gt;Power-PC向け&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sparc&lt;/td&gt;
&lt;td&gt;Sparc向け&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ただしtoolsetによってはサポートされていない場合があります。&lt;/p&gt;
&lt;h3&gt;アドレスモデル&lt;/h3&gt;
&lt;p&gt;異なるアドレスモデルでビルドするにはb2/bjamに以下を指定する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;address-model=32&lt;/td&gt;
&lt;td&gt;32ビットのライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;address-model=64&lt;/td&gt;
&lt;td&gt;64ビットのライブラリを生成します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;レイアウト&lt;/h3&gt;
&lt;p&gt;Boostをビルドする際にb2/bjamが生成するバイナリファイル名はデフォルトで環境によって異なります。&lt;/p&gt;
&lt;p&gt;これは&lt;code&gt;--layout=&amp;lt;layout&amp;gt;&lt;/code&gt;を渡すことで変更できます。&lt;code&gt;&amp;lt;layout&amp;gt;&lt;/code&gt;に渡すことのできる値は以下のとおりです。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;versioned&lt;/td&gt;
&lt;td&gt;バイナリファイル名にバージョンが入ります。Windowsではデフォルトでversionedが選択されます。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tagged&lt;/td&gt;
&lt;td&gt;ビルド時に指定したプロパティ（variantやthreading等）がバイナリファイル名に含まれます。ただし、コンパイラ名、コンパイラのバージョン、Boostのバージョンは入りません。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system&lt;/td&gt;
&lt;td&gt;システムへインテグレートするためにバージョン番号などは入りません。Unixではデフォルトでsystemが選択されます。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ビルドのクリーン&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--clean&lt;/code&gt;を渡すことでビルドをクリーンすることが可能です。&lt;/p&gt;
&lt;p&gt;ただし、b2/bjamはプロパティなどの差から異なるビルドを生成します。その為クリーン対象のビルドと同一のプロパティを指定した上で&lt;code&gt;--clean&lt;/code&gt;を渡す必要があります。&lt;/p&gt;
&lt;h3&gt;コンパイラオプション、リンカオプション&lt;/h3&gt;
&lt;p&gt;ビルドする際にコンパイラやリンカにオプションを渡す必要がある場合は、b2/bjamの引数に以下を指定できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cflags=(Cコンパイラオプション)&lt;/li&gt;
&lt;li&gt;cxxflags=(C++コンパイラオプション)&lt;/li&gt;
&lt;li&gt;linkflags=(リンカオプション)&lt;/li&gt;
&lt;li&gt;define=(プリプロセッサシンボル）&lt;/li&gt;
&lt;li&gt;include=(追加インクルードパス）&lt;/li&gt;
&lt;li&gt;library-path=(追加ライブラリパス）&lt;/li&gt;
&lt;li&gt;library-file=(追加オブジェクトファイル）&lt;/li&gt;
&lt;li&gt;find-static-library=(静的ライブラリ）&lt;/li&gt;
&lt;li&gt;find-shared-library=(動的ライブラリ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この他にも多くのオプションを指定することができますが、toolsetによってはサポートされていないものもあります。&lt;/p&gt;
&lt;h3&gt;特定のライブラリだけビルドする/ビルドしない&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--with-&lt;/code&gt;&lt;em&gt;library&lt;/em&gt; や &lt;code&gt;--without-&lt;/code&gt;&lt;em&gt;library&lt;/em&gt; と書くことで、特定のライブラリだけビルドする/ビルドしないを切り替えられます。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;--with-python&lt;/code&gt; とすれば、python ライブラリだけをビルドします。 &lt;code&gt;--without-iostreams&lt;/code&gt; とすれば、iostreams ライブラリをビルドしません。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Usagi Ito</name>
        <email>usagi@WonderRabbitProject.net</email>
      </author>
    </entry>
  
</feed>