<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2023-11-16T14:33:57.334517</updated>
  <id>4de32692-a589-4768-b7dd-e7f10589323b</id>

  
    <entry>
      <title>ユーザー定義型を扱える型安全な共用体 -- `std::variant`へのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/variant.html"/>
      <id>5607df1b4672b0a573980043313e3fb693996dd5:tips/variant.md</id>
      <updated>2023-11-09T02:26:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/variant.md b/tips/variant.md
index 88b6157..1a35685 100644
--- a/tips/variant.md
+++ b/tips/variant.md
@@ -8,6 +8,7 @@
 - [格納されている値を取り出す](#get-value)
 - [値をクリアする](#clear)
 - [variantを再帰的にする](#recursive-variant)
+- [C++の国際標準規格上の類似する機能](#cpp-standard)
 
 
 ## &amp;lt;a id=&amp;#34;basic-usage&amp;#34; href=&amp;#34;#basic-usage&amp;#34;&amp;gt;基本的な使い方&amp;lt;/a&amp;gt;
@@ -332,5 +333,7 @@ auto main() -&amp;gt; int
 ]
 ```
 
+## &amp;lt;a id=&amp;#34;cpp-standard&amp;#34; href=&amp;#34;#cpp-standard&amp;#34;&amp;gt;C++の国際標準規格上の類似する機能&amp;lt;/a&amp;gt;
+- [std::variant](https://cpprefjp.github.io/reference/variant/variant.html)
 
 documentated boost version is 1.52.0
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ハッシュ表 -- `std::unordered_map`、`std::unordered_set`へのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/hashmap.html"/>
      <id>a9934e8743c022b00a5ddcaa026d22b2bd385f0a:tips/hashmap.md</id>
      <updated>2023-11-09T02:13:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/hashmap.md b/tips/hashmap.md
index 5b1e202..4e91325 100644
--- a/tips/hashmap.md
+++ b/tips/hashmap.md
@@ -8,6 +8,7 @@
 - [基本的な使い方](#basic-usage)
 - [ユーザー定義型をキーにする(オーバーロード)](#user-defined-type-as-key-using-overload)
 - [ユーザー定義型をキーにする(ポリシー)](#user-defined-type-as-key-using-policy)
+- [C++の国際標準規格上の類似する機能](#cpp-standard)
 
 
 ## &amp;lt;a id=&amp;#34;basic-usage&amp;#34; href=&amp;#34;#basic-usage&amp;#34;&amp;gt;基本的な使い方&amp;lt;/a&amp;gt;
@@ -172,3 +173,6 @@ int main()
 ```
 
 
+## &amp;lt;a id=&amp;#34;cpp-standard&amp;#34; href=&amp;#34;#cpp-standard&amp;#34;&amp;gt;C++の国際標準規格上の類似する機能&amp;lt;/a&amp;gt;
+- [`std::unordered_map`](https://cpprefjp.github.io/reference/unordered_map/unordered_map.html)
+- [`std::unordered_set`](https://cpprefjp.github.io/reference/unordered_set/unordered_set.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート -- コンパイル時アサートへのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/static_assert.html"/>
      <id>4f2591d40d878627430db880d9bdedaf6e6c82e2:tips/static_assert.md</id>
      <updated>2023-11-09T02:09:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/static_assert.md b/tips/static_assert.md
index ff446ae..5d0ba38 100644
--- a/tips/static_assert.md
+++ b/tips/static_assert.md
@@ -8,6 +8,7 @@
 ## インデックス
 - [関数にコンパイル時アサートを付ける](#function)
 - [クラスにコンパイル時アサートを付ける](#class)
+- [C++の国際標準規格上の類似する機能](#cpp-standard)
 
 
 ## &amp;lt;a id=&amp;#34;function&amp;#34; href=&amp;#34;#function&amp;#34;&amp;gt;関数にコンパイル時アサートを付ける&amp;lt;/a&amp;gt;
@@ -55,3 +56,5 @@ int main()
 }
 ```
 
+## &amp;lt;a id=&amp;#34;cpp-standard&amp;#34; href=&amp;#34;#cpp-standard&amp;#34;&amp;gt;C++の国際標準規格上の類似する機能&amp;lt;/a&amp;gt;
+- [コンパイル時アサート](https://cpprefjp.github.io/lang/cpp11/static_assert.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for each文 -- `std::for_each`などへのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/foreach.html"/>
      <id>3b69175def18230615ea6c19bf63ac2427baae60:tips/foreach.md</id>
      <updated>2023-11-08T23:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/foreach.md b/tips/foreach.md
index 05db0db..c241f97 100644
--- a/tips/foreach.md
+++ b/tips/foreach.md
@@ -10,6 +10,7 @@
 - [逆順にループする](#reverse-iteration)
 - [配列に対して使用する](#apply-multi-array)
 - [C++11 範囲`for`文との違い](#difference-cpp11-range-for)
+- [C++の国際標準規格上の類似する機能](#cpp-standard)
 
 
 ## &amp;lt;a id=&amp;#34;boost-foreach-macro&amp;#34; href=&amp;#34;#boost-foreach-macro&amp;#34;&amp;gt;BOOST_FOREACHマクロ&amp;lt;/a&amp;gt;
@@ -379,3 +380,10 @@ for (int x : v) {}
 
 `BOOST_FOREACH`マクロには、このような制限はないため、定義済みの変数を要素として使用できる。
 
+## &amp;lt;a id=&amp;#34;cpp-standard&amp;#34; href=&amp;#34;#cpp-standard&amp;#34;&amp;gt;C++の国際標準規格上の類似する機能&amp;lt;/a&amp;gt;
+- [`BOOST_FOREACH`マクロ](#boost-foreach-macro)
+  - [`std::for_each`](https://cpprefjp.github.io/reference/algorithm/for_each.html)
+- [逆順にループする](#reverse-iteration)
+  - [`std::ranges::reverse_view`、`std::ranges::views::reverse`](https://cpprefjp.github.io/reference/ranges/reverse_view.html)
+- [C++11 範囲`for`文との違い](#difference-cpp11-range-for)
+  - [範囲for文](https://cpprefjp.github.io/lang/cpp11/range_based_for.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無効値の統一的な表現 -- `std::optional`と`std::expected`へのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/optional.html"/>
      <id>0bb41b2f7b6ffb6d2b5019a1271615297b477340:tips/optional.md</id>
      <updated>2023-11-08T11:12:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/tips/optional.md b/tips/optional.md
index d45e09d..9501f58 100644
--- a/tips/optional.md
+++ b/tips/optional.md
@@ -6,6 +6,7 @@
 - [関数の失敗値と成功値](#fail-value)
 - [無効値がありえることを仕様ではなく型で示す](#type-as-nullary-value)
 - [`if`文の条件式で定義した変数に格納する](#store-value-in-if-expr)
+- [C++の国際標準規格上の類似する機能](#cpp-standard)
 
 
 ## &amp;lt;a id=&amp;#34;fail-value&amp;#34; href=&amp;#34;#fail-value&amp;#34;&amp;gt;関数の失敗値と成功値&amp;lt;/a&amp;gt;
@@ -138,3 +139,6 @@ if (boost::optional&amp;lt;int&amp;gt; p = get_vector()) {
 }
 ```
 
+## &amp;lt;a id=&amp;#34;cpp-standard&amp;#34; href=&amp;#34;#cpp-standard&amp;#34;&amp;gt;C++の国際標準規格上の類似する機能&amp;lt;/a&amp;gt;
+- [`std::optional`](https://cpprefjp.github.io/reference/optional/optional.html)
+- [`std::expected`](https://cpprefjp.github.io/reference/expected/expected.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ROCKTAKEY</name>
        <email>rocktakey@gmail.com</email>
      </author>
    </entry>
  
</feed>