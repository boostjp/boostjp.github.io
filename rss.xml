<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2022-04-25T14:43:49.756395</updated>
  <id>0158b9a7-81e8-487c-8a8e-d1a49f61f34a</id>

  
    <entry>
      <title>Boost 1.79.0リリースノート -- 1.79.0 : テスト済みコンパイラを追加</title>
      <link href="https://boostjp.github.io/document/version/1_79_0.html"/>
      <id>02f49db250bd57448776b1491a11947fc768b9e6:document/version/1_79_0.md</id>
      <updated>2022-04-14T13:59:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.79.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_79_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_79_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34;&gt;Describe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34;&gt;QVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location().file_name()&lt;/code&gt;と&lt;code&gt;source_location().function_name()&lt;/code&gt;が、&lt;code&gt;&#34;(unknown)&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;&#34;&lt;/code&gt;を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;に、&lt;code&gt;std::source_location&lt;/code&gt;からの変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を変更し、トップレベルで使用したり、関数のデフォルト引数として使用したりした場合に、&lt;code&gt;std::source_location::current()&lt;/code&gt;とより厳密に動作を一致させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bind_allocator&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_base::sync_all_on_write&lt;/code&gt;フラグを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file::release()&lt;/code&gt;の不足していた実装を追加&lt;/li&gt;
&lt;li&gt;signal setの各操作にキャンセルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recycling_allocator&lt;/code&gt;をpublicインタフェースの一部として公開&lt;/li&gt;
&lt;li&gt;いくつかの関数に&lt;code&gt;nodiscard&lt;/code&gt;属性を追加&lt;/li&gt;
&lt;li&gt;OpenSSL 3.0との互換性を追加&lt;/li&gt;
&lt;li&gt;既存の&lt;code&gt;SSL*&lt;/code&gt;を&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;にアダプトするサポートを追加&lt;/li&gt;
&lt;li&gt;すべてのビルド構成で&lt;code&gt;executor_work_guard&amp;lt;&amp;gt;&lt;/code&gt;を有効化&lt;/li&gt;
&lt;li&gt;Clangでmovable socket iostreamを有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind_cancellation_slot&lt;/code&gt;と&lt;code&gt;bind_executor&lt;/code&gt;の、古い完了トークンとの互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::append&lt;/code&gt;と&lt;code&gt;experimental::prepend&lt;/code&gt;に対する&lt;code&gt;associator&lt;/code&gt;の特殊化を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;associated_allocator&lt;/code&gt;のプライマリテンプレートを修正&lt;/li&gt;
&lt;li&gt;socketの&lt;code&gt;async_receive_from&lt;/code&gt;とファイルの&lt;code&gt;write_some_at&lt;/code&gt;のio_uring実装を修正&lt;/li&gt;
&lt;li&gt;io_uring機能の検出を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::coro&lt;/code&gt;の各操作のキャンセルを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::promise&lt;/code&gt;の型消去された完了ハンドラのメモリ管理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&lt;/code&gt;のムーブ代入演算子の実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/code&gt;と&lt;code&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/code&gt;の両方が定義された際の&lt;code&gt;any_io_executor&lt;/code&gt;の実装を正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sockatmark()&lt;/code&gt;システムコールを使用する際の&lt;code&gt;basic_socket::at_mark()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;recycling allocatorのメモリ確保のデフォルトアライメントを、最小アライメントを使用するよう変更&lt;/li&gt;
&lt;li&gt;Apple clangでのコルーチンコード生成で判明したバグのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;fopen()&lt;/code&gt;で同じ共有モードを使用してファイルを開くようファイルサポートを変更&lt;/li&gt;
&lt;li&gt;Linuxにおいて、UNIX domain socketの実装を修正し、&lt;code&gt;EAGAIN&lt;/code&gt;が正しく処理されるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::basic_channel::reset()&lt;/code&gt;と&lt;code&gt;experimental::basic_concurrent_channel::reset()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::promise&lt;/code&gt;内の潜在的な未定義動作を修正&lt;/li&gt;
&lt;li&gt;いくつかの状況において、executorを介してキャンセルのシグナルをdispatchするよう&lt;code&gt;co_spawn&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;さまざまなヘッダのインクルード問題を修正&lt;/li&gt;
&lt;li&gt;さまざまな警告を修正&lt;/li&gt;
&lt;li&gt;いくつかのドキュメント強化：&lt;ul&gt;
&lt;li&gt;Asio非同期モデルの概要 (overview of Asio&#39;s asynchronous model) を追加&lt;/li&gt;
&lt;li&gt;非同期モデルに関するリファレンスと要件のドキュメントを作り直した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch()&lt;/code&gt;, &lt;code&gt;post()&lt;/code&gt;, &lt;code&gt;defer()&lt;/code&gt;のドキュメントを更新&lt;/li&gt;
&lt;li&gt;シリアルポートの各操作のキャンセルをドキュメント化&lt;/li&gt;
&lt;li&gt;アロケータの「非同期実行性の保証 (non-concurrency guarantees)」を明記&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;のリファレンスドキュメントを、&lt;code&gt;executor_work_guard&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_strand()&lt;/code&gt;, &lt;code&gt;make_work_guard()&lt;/code&gt;, &lt;code&gt;ip::address_v4&lt;/code&gt;, &lt;code&gt;ip::address_v6&lt;/code&gt;, &lt;code&gt;experimental::basic_channel&lt;/code&gt;, &lt;code&gt;experimental::basic_concurrent_channel&lt;/code&gt;のドキュメントをより詳細にした&lt;/li&gt;
&lt;li&gt;最近追加された機能をカバーするために、概要ドキュメントを再配置・拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local socketを通過するfile descriptorのC++11サンプルコードを追加&lt;/li&gt;
&lt;li&gt;非同期操作のコールバックベースAPIをラップするC++14サンプルコードを追加&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; Universal Windows Platform (UWP) でのコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; 設定マクロ&lt;code&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/code&gt;を追加。このマクロはDarwinシステムでのコンパイルに影響を与え、wait/notify操作の&lt;code&gt;ulock&lt;/code&gt;ベースの実装を無効にする。これはApple App Storeの要件に準拠するために役立つ場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;のテストに不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;失敗していたWebSocketハンドシェイクのレスポンスを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_posix&lt;/code&gt;と&lt;code&gt;file_win32&lt;/code&gt;の追記オープンモードを修正&lt;/li&gt;
&lt;li&gt;Windowsでの&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;フラグ付きでファイルを開く操作を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;と&lt;code&gt;file_stdio&lt;/code&gt;のclang-cl UTF-8ハンドリングを修正&lt;/li&gt;
&lt;li&gt;drone CIでのARM64ビルドを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_base&lt;/code&gt;ドキュメントのリンクを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;モードでファイルを開くテストを追加&lt;/li&gt;
&lt;li&gt;gcc 11, clang 12, msvc 14.3を含めるようCIを更新&lt;/li&gt;
&lt;li&gt;CMakeワークフローでの個別テストを追加&lt;/li&gt;
&lt;li&gt;完全な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LWG3545に対応し、&lt;code&gt;boost::pointer_traits&lt;/code&gt;をSFINAEフレンドリーにした (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;個別のアロケータ特性にアクセスする&lt;code&gt;boost::allocator_traits&lt;/code&gt;を追加。この実装はC++03以降をサポートする (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;C++03でほとんどのC++11アロケータモデルをサポートするよう、アロケータのアクセス特性を更新 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;は非推奨となり、将来のリリースで削除される予定。このヘッダは&lt;code&gt;boost::iterator&lt;/code&gt;を定義し、それは&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;の&lt;code&gt;std::iterator&lt;/code&gt;と等価である。しかしこの機能はC++17で非推奨となっているため、ユーザーにはこれらの使用をやめることを勧める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::core::verbose_terminate_handler&lt;/code&gt;を追加。これは、捕捉されなかった例外を&lt;code&gt;stderr&lt;/code&gt;に出力する、&lt;code&gt;std::set_terminate&lt;/code&gt;関数に渡すことを目的としたユーティリティ関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34; id=&#34;describe&#34;&gt;Describe&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DESCRIBE_STRUCT&lt;/code&gt;での&lt;code&gt;union&lt;/code&gt;を有効にし、&lt;code&gt;std::is_union&amp;lt;T&amp;gt;&lt;/code&gt;をチェックするようサンプルコードを更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のクラスフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のenumフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;メンバへのポインタを出力するサンプルコードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v3の&lt;code&gt;path::replace_extension&lt;/code&gt;は、v4ではなくv3の&lt;code&gt;path::extension&lt;/code&gt;の定義に関して機能するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/223&#34; target=&#34;_blank&#34;&gt;GitHub #223&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;または変換可能な文字列型を引数にするパスの追加と連結の演算子のコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; &lt;code&gt;fdopendir&lt;/code&gt;と&lt;code&gt;O_NOFOLLOW&lt;/code&gt;をサポートするPOSIXシステムとWindowsでは、&lt;code&gt;remove_all&lt;/code&gt;が&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2022-21658&#34; target=&#34;_blank&#34;&gt;CVE-2022-21658&lt;/a&gt;から保護されるようになった。この脆弱性は、サードパーティのプロセスが&lt;code&gt;remove_all&lt;/code&gt;によって同時に処理されるディレクトリをディレクトリシンボリックリンクに置き換え、&lt;code&gt;remove_all&lt;/code&gt;がシンボリックリンクをたどり、シンボリックリンクを削除する代わりにリンクされたディレクトリ内のファイルを削除することを可能にする競合状態である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; Windowsの&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;の実装で、OSでサポートされている場合に (Windows 10 1709以降)、ファイルの削除にPOSIXセマンティクスを使用する。POSIXセマンティクスがサポートされている場合、ファイルがまだ開かれていて使用中であっても、ファイルに削除マークがつけられてすぐに、ファイル名はファイルシステム名前空間から削除される。従来のWindowsセマンティクスでは、ファイルへの最後のファイルハンドルが閉じられるまで、ファイル名はファイルシステム名前空間に存在し続ける。これにより、削除のマークが付けられたファイルを開くことができ、同じ名前の新しいファイルが作成されなくなる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;で読み取り専用ディレクトリの削除をサポートした。読み取り専用の非ディレクトリファイルの削除サポートは、以前から追加されていた&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;directory_iterator&lt;/code&gt;の内部実装を作り直し、最新のWindows APIを有効に活用できるようになった。これにより、シンボリックリンク処理中のパフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;Windowsにおいて、可能であれば内部のWinAPIの関数ポインタを早期に初期化し、Boost.Filesystemの操作をグローバルコンストラクタで呼び出せるようにした。これは、MSVC、GCC、Clang、およびそれらと互換性のあるコンパイラでのみサポートされる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、開かれているファイルに対して&lt;code&gt;resize_file&lt;/code&gt;した際に、エラーにならないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; Androidの11.0 (APIバージョン30) より前での、&lt;code&gt;statx&lt;/code&gt;システムコールの使用を無効にした。そのシステムコールはseccompによってブラックリストに登録されており、実行時にプロセスが終了してしまう&lt;/li&gt;
&lt;li&gt;非推奨化 : &lt;code&gt;boost/filesystem/string_file.hpp&lt;/code&gt;は非推奨となり、将来のリリースから削除される。このヘッダはデフォルトでは&lt;code&gt;boost/filesystem.hpp&lt;/code&gt;に含まれなくなった。ユーザーは、この機能を自身で実装するか、他の実装に移行することを勧める&lt;/li&gt;
&lt;li&gt;非推奨化 : Windows CEのサポートは非推奨となり、将来のリリースから削除される。Windows CEは長年テストされておらず、機能していない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きな変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/977&#34; target=&#34;_blank&#34;&gt;GitHub #977&lt;/a&gt; 再スケーリングをデフォルトでオフにした。これにより、集合操作とバッファに関連する多くのバグが回避される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/961&#34; target=&#34;_blank&#34;&gt;GitHub #961&lt;/a&gt; Webメルトカル図法 (Web Mercator projection) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/966&#34; target=&#34;_blank&#34;&gt;GitHub #966&lt;/a&gt; &lt;code&gt;simplify&lt;/code&gt;で使用されるcartesian distanceをより効率的にした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したissue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/956&#34; target=&#34;_blank&#34;&gt;GitHub #956&lt;/a&gt; 誤ったclosureをともなう&lt;code&gt;simplify&lt;/code&gt;アルゴリズムの結果を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/962&#34; target=&#34;_blank&#34;&gt;GitHub #962&lt;/a&gt; load factorによるR-treeのデシリアライズ時の実行時エラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/971&#34; target=&#34;_blank&#34;&gt;GitHub #971&lt;/a&gt; ARMプラットフォームで&lt;code&gt;long double&lt;/code&gt;を使用した際に影響を受けるR-treeの挿入時間を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/936&#34; target=&#34;_blank&#34;&gt;GitHub #936&lt;/a&gt; 極 (pole) を含むpolygonのenvelopeを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/948&#34; target=&#34;_blank&#34;&gt;GitHub #948&lt;/a&gt; meridian segments付近のspherical/geometric envelopeを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/974&#34; target=&#34;_blank&#34;&gt;GitHub #974&lt;/a&gt; NaN座標の回転楕円体正規化ユーティリティ (spheroidal normalization utilities) を修正&lt;/li&gt;
&lt;li&gt;集合操作とバッファのさまざまなバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/issues/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; 内部でビット演算を使用するよう&lt;code&gt;integer_log2&lt;/code&gt;の実装を最適化した。これにより、最新のCPUで利用可能なビット命令を使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヌルストリームバッファである&lt;code&gt;boost::io::basic_nullbuf&lt;/code&gt;と、ヌル出力ストリームである&lt;code&gt;boost::basic_onullstream&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;に、GCCとClangおよびそれらと互換性のある一部のターゲットプラットフォームでサポートされる組み込みの128ビット整数型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;での、非推奨の暗黙のコピー代入演算子に関するGCCの警告を黙らせた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリのスタンドアロンモードを削除。スタンドアロンのJSONライブラリを使用したい場合は、&lt;a href=&#34;https://github.com/CPPAlliance/standalone-json.git&#34; target=&#34;_blank&#34;&gt;the C++ Alliance fork&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::error_code&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_codes&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;JSON Pointerのサポートを追加&lt;/li&gt;
&lt;li&gt;シリアライズ中に文字列を自然に伸長させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34; id=&#34;leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FreeRTOSとその他の組み込みプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;診断情報を改善&lt;/li&gt;
&lt;li&gt;設定マクロを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__GNUC__&lt;/code&gt;環境下では、&lt;code&gt;BOOST_LEAF_CHECK&lt;/code&gt;はstatement expressionを使用するようにした&lt;/li&gt;
&lt;li&gt;シンボルのデマングルバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全体的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text_file_backend&lt;/code&gt;において、ファイルローテーションが使用され、ログファイル名がファイルカウンタを使用する場合に、以前に書き込まれたログファイルに追記するためのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;file_collector&lt;/code&gt;のインタフェースを以下のように変更：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scan_for_files&lt;/code&gt;メンバ関数は、スキャン中に収集された情報を含む&lt;code&gt;scan_result&lt;/code&gt;構造体を返す&lt;/li&gt;
&lt;li&gt;パスがターゲットストレージディレクトリ内のファイルを参照しているかどうかをテストするために、&lt;code&gt;is_in_storage&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザーの関数をストリーム出力式に挿入するために使用できる新たな&lt;code&gt;invoke_manip&lt;/code&gt;ストリームマニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/179&#34; target=&#34;_blank&#34;&gt;GitHub #179&lt;/a&gt; ユーザーが&lt;code&gt;text_file_backend::scan_for_files&lt;/code&gt;を複数回呼び出し、2回目以降の呼び出しで新しいファイルが見つからない場合に、ファイルカウンタがゼロに設定される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/log/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ranked indicesの&lt;code&gt;count&lt;/code&gt;操作の効率を、&lt;code&gt;O(log(n) + count)&lt;/code&gt;から&lt;code&gt;O(log(n))&lt;/code&gt;に改善 (Damian Sawicki氏による貢献)&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのプラットフォームでのコンパイル問題を修正 (例として、MinGW-w64やCygwinのGCC 11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;と&lt;code&gt;WIN32_LEAN_AND_MEAN&lt;/code&gt;を使用した際の不足していたインクルードを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::stat_t&lt;/code&gt;をともなう&lt;code&gt;boost::nowide::stat&lt;/code&gt;を使用した際のサニティチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; &lt;code&gt;std::optional&amp;lt;bool&amp;gt;&lt;/code&gt;との相互運用がうまくいっていなかったところを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;BOOST_NO_IOSTREAM&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;未定義動作を避けるためにaligned storageに&lt;code&gt;char&lt;/code&gt;の代わりに&lt;code&gt;unsigned char&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;未定義動作を避けるために、placement newでCV修飾された&lt;code&gt;value_type&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34; id=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version 1.14.0&lt;/li&gt;
&lt;li&gt;LoongArchの検出を追加 (Zhang Na氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34; id=&#34;qvm&#34;&gt;QVM&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17の&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;シングルヘッダの配布を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::allocate_unique&lt;/code&gt;の結果からアロケータへのポインタを取得するために、&lt;code&gt;boost::get_allocator_pointer&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に、&lt;code&gt;errc::errc_t&lt;/code&gt;, &lt;code&gt;std::error_code&lt;/code&gt;, &lt;code&gt;std::errc&lt;/code&gt;, &lt;code&gt;std::exception_ptr&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result &amp;lt;T&amp;gt; :: value&lt;/code&gt;は、デフォルトの引数を介して&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を&lt;code&gt;throw_exception_from_error&lt;/code&gt;に自動的に供給するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errc::make_error_code&lt;/code&gt;に、source locationを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Exceptionを使用しないプログラムのために、&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;の軽量な代替手段である&lt;code&gt;boost::throw_with_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのコンテナが、異種混合 (heterogeneous) の&lt;code&gt;count&lt;/code&gt;、&lt;code&gt;equal_range&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;すべてのコンテナに&lt;code&gt;contains&lt;/code&gt;メンバ関数を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナで使用できる&lt;code&gt;erase_if&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナが、異種混合の&lt;code&gt;erase&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;が早期にアロケートするよう振る舞いを修正&lt;/li&gt;
&lt;li&gt;テストスイートのさまざまな警告を修正&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;boost::allocator_traits&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;li&gt;Fibonacci hashingに切り替え&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickBookからAsciiDocに置き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monostate&lt;/code&gt;用の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WaveのビルドにC++11を要求するようになった&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt; C++20で非推奨になった配列の添字演算子中のカンマ演算子の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; C++11以降のモードでEOF前の改行を要求しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; 空のifdefブロックが空白を入れない限り行ディレクティブを発行しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; &lt;code&gt;__has_include()&lt;/code&gt;のあとにトークン (空白含む) があるとパースに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;reset_version()&lt;/code&gt;内でのsanitizerのエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/147&#34; target=&#34;_blank&#34;&gt;GitHub #147&lt;/a&gt; 異なる列挙型同士のビット演算がC++20で非推奨になったことによる警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.8.2をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.6.3, 11&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.79.0リリースノート -- 1.79.0 : GeometryとAsioを追加</title>
      <link href="https://boostjp.github.io/document/version/1_79_0.html"/>
      <id>98b10c50dbd631ebeb494d6e4ba7faf52a0a79fe:document/version/1_79_0.md</id>
      <updated>2022-04-11T14:33:13+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.79.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_79_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_79_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34;&gt;Describe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34;&gt;QVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location().file_name()&lt;/code&gt;と&lt;code&gt;source_location().function_name()&lt;/code&gt;が、&lt;code&gt;&#34;(unknown)&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;&#34;&lt;/code&gt;を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;に、&lt;code&gt;std::source_location&lt;/code&gt;からの変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を変更し、トップレベルで使用したり、関数のデフォルト引数として使用したりした場合に、&lt;code&gt;std::source_location::current()&lt;/code&gt;とより厳密に動作を一致させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bind_allocator&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_base::sync_all_on_write&lt;/code&gt;フラグを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file::release()&lt;/code&gt;の不足していた実装を追加&lt;/li&gt;
&lt;li&gt;signal setの各操作にキャンセルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recycling_allocator&lt;/code&gt;をpublicインタフェースの一部として公開&lt;/li&gt;
&lt;li&gt;いくつかの関数に&lt;code&gt;nodiscard&lt;/code&gt;属性を追加&lt;/li&gt;
&lt;li&gt;OpenSSL 3.0との互換性を追加&lt;/li&gt;
&lt;li&gt;既存の&lt;code&gt;SSL*&lt;/code&gt;を&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;にアダプトするサポートを追加&lt;/li&gt;
&lt;li&gt;すべてのビルド構成で&lt;code&gt;executor_work_guard&amp;lt;&amp;gt;&lt;/code&gt;を有効化&lt;/li&gt;
&lt;li&gt;Clangでmovable socket iostreamを有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind_cancellation_slot&lt;/code&gt;と&lt;code&gt;bind_executor&lt;/code&gt;の、古い完了トークンとの互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::append&lt;/code&gt;と&lt;code&gt;experimental::prepend&lt;/code&gt;に対する&lt;code&gt;associator&lt;/code&gt;の特殊化を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;associated_allocator&lt;/code&gt;のプライマリテンプレートを修正&lt;/li&gt;
&lt;li&gt;socketの&lt;code&gt;async_receive_from&lt;/code&gt;とファイルの&lt;code&gt;write_some_at&lt;/code&gt;のio_uring実装を修正&lt;/li&gt;
&lt;li&gt;io_uring機能の検出を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::coro&lt;/code&gt;の各操作のキャンセルを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::promise&lt;/code&gt;の型消去された完了ハンドラのメモリ管理を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&lt;/code&gt;のムーブ代入演算子の実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/code&gt;と&lt;code&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/code&gt;の両方が定義された際の&lt;code&gt;any_io_executor&lt;/code&gt;の実装を正しく動作するよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sockatmark()&lt;/code&gt;システムコールを使用する際の&lt;code&gt;basic_socket::at_mark()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;recycling allocatorのメモリ確保のデフォルトアライメントを、最小アライメントを使用するよう変更&lt;/li&gt;
&lt;li&gt;Apple clangでのコルーチンコード生成で判明したバグのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;fopen()&lt;/code&gt;で同じ共有モードを使用してファイルを開くようファイルサポートを変更&lt;/li&gt;
&lt;li&gt;Linuxにおいて、UNIX domain socketの実装を修正し、&lt;code&gt;EAGAIN&lt;/code&gt;が正しく処理されるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::basic_channel::reset()&lt;/code&gt;と&lt;code&gt;experimental::basic_concurrent_channel::reset()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::promise&lt;/code&gt;内の潜在的な未定義動作を修正&lt;/li&gt;
&lt;li&gt;いくつかの状況において、executorを介してキャンセルのシグナルをdispatchするよう&lt;code&gt;co_spawn&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;さまざまなヘッダのインクルード問題を修正&lt;/li&gt;
&lt;li&gt;さまざまな警告を修正&lt;/li&gt;
&lt;li&gt;いくつかのドキュメント強化：&lt;ul&gt;
&lt;li&gt;Asio非同期モデルの概要 (overview of Asio&#39;s asynchronous model) を追加&lt;/li&gt;
&lt;li&gt;非同期モデルに関するリファレンスと要件のドキュメントを作り直した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch()&lt;/code&gt;, &lt;code&gt;post()&lt;/code&gt;, &lt;code&gt;defer()&lt;/code&gt;のドキュメントを更新&lt;/li&gt;
&lt;li&gt;シリアルポートの各操作のキャンセルをドキュメント化&lt;/li&gt;
&lt;li&gt;アロケータの「非同期実行性の保証 (non-concurrency guarantees)」を明記&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;のリファレンスドキュメントを、&lt;code&gt;executor_work_guard&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_strand()&lt;/code&gt;, &lt;code&gt;make_work_guard()&lt;/code&gt;, &lt;code&gt;ip::address_v4&lt;/code&gt;, &lt;code&gt;ip::address_v6&lt;/code&gt;, &lt;code&gt;experimental::basic_channel&lt;/code&gt;, &lt;code&gt;experimental::basic_concurrent_channel&lt;/code&gt;のドキュメントをより詳細にした&lt;/li&gt;
&lt;li&gt;最近追加された機能をカバーするために、概要ドキュメントを再配置・拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local socketを通過するfile descriptorのC++11サンプルコードを追加&lt;/li&gt;
&lt;li&gt;非同期操作のコールバックベースAPIをラップするC++14サンプルコードを追加&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/doc/html/boost_asio/history.html&#34; target=&#34;_blank&#34;&gt;Revision History&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; Universal Windows Platform (UWP) でのコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; 設定マクロ&lt;code&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/code&gt;を追加。このマクロはDarwinシステムでのコンパイルに影響を与え、wait/notify操作の&lt;code&gt;ulock&lt;/code&gt;ベースの実装を無効にする。これはApple App Storeの要件に準拠するために役立つ場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;のテストに不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;失敗していたWebSocketハンドシェイクのレスポンスを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_posix&lt;/code&gt;と&lt;code&gt;file_win32&lt;/code&gt;の追記オープンモードを修正&lt;/li&gt;
&lt;li&gt;Windowsでの&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;フラグ付きでファイルを開く操作を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;と&lt;code&gt;file_stdio&lt;/code&gt;のclang-cl UTF-8ハンドリングを修正&lt;/li&gt;
&lt;li&gt;drone CIでのARM64ビルドを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_base&lt;/code&gt;ドキュメントのリンクを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;モードでファイルを開くテストを追加&lt;/li&gt;
&lt;li&gt;gcc 11, clang 12, msvc 14.3を含めるようCIを更新&lt;/li&gt;
&lt;li&gt;CMakeワークフローでの個別テストを追加&lt;/li&gt;
&lt;li&gt;完全な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LWG3545に対応し、&lt;code&gt;boost::pointer_traits&lt;/code&gt;をSFINAEフレンドリーにした (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;個別のアロケータ特性にアクセスする&lt;code&gt;boost::allocator_traits&lt;/code&gt;を追加。この実装はC++03以降をサポートする (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;C++03でほとんどのC++11アロケータモデルをサポートするよう、アロケータのアクセス特性を更新 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;は非推奨となり、将来のリリースで削除される予定。このヘッダは&lt;code&gt;boost::iterator&lt;/code&gt;を定義し、それは&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;の&lt;code&gt;std::iterator&lt;/code&gt;と等価である。しかしこの機能はC++17で非推奨となっているため、ユーザーにはこれらの使用をやめることを勧める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::core::verbose_terminate_handler&lt;/code&gt;を追加。これは、捕捉されなかった例外を&lt;code&gt;stderr&lt;/code&gt;に出力する、&lt;code&gt;std::set_terminate&lt;/code&gt;関数に渡すことを目的としたユーティリティ関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34; id=&#34;describe&#34;&gt;Describe&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DESCRIBE_STRUCT&lt;/code&gt;での&lt;code&gt;union&lt;/code&gt;を有効にし、&lt;code&gt;std::is_union&amp;lt;T&amp;gt;&lt;/code&gt;をチェックするようサンプルコードを更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のクラスフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のenumフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;メンバへのポインタを出力するサンプルコードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v3の&lt;code&gt;path::replace_extension&lt;/code&gt;は、v4ではなくv3の&lt;code&gt;path::extension&lt;/code&gt;の定義に関して機能するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/223&#34; target=&#34;_blank&#34;&gt;GitHub #223&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;または変換可能な文字列型を引数にするパスの追加と連結の演算子のコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; &lt;code&gt;fdopendir&lt;/code&gt;と&lt;code&gt;O_NOFOLLOW&lt;/code&gt;をサポートするPOSIXシステムとWindowsでは、&lt;code&gt;remove_all&lt;/code&gt;が&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2022-21658&#34; target=&#34;_blank&#34;&gt;CVE-2022-21658&lt;/a&gt;から保護されるようになった。この脆弱性は、サードパーティのプロセスが&lt;code&gt;remove_all&lt;/code&gt;によって同時に処理されるディレクトリをディレクトリシンボリックリンクに置き換え、&lt;code&gt;remove_all&lt;/code&gt;がシンボリックリンクをたどり、シンボリックリンクを削除する代わりにリンクされたディレクトリ内のファイルを削除することを可能にする競合状態である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; Windowsの&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;の実装で、OSでサポートされている場合に (Windows 10 1709以降)、ファイルの削除にPOSIXセマンティクスを使用する。POSIXセマンティクスがサポートされている場合、ファイルがまだ開かれていて使用中であっても、ファイルに削除マークがつけられてすぐに、ファイル名はファイルシステム名前空間から削除される。従来のWindowsセマンティクスでは、ファイルへの最後のファイルハンドルが閉じられるまで、ファイル名はファイルシステム名前空間に存在し続ける。これにより、削除のマークが付けられたファイルを開くことができ、同じ名前の新しいファイルが作成されなくなる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;で読み取り専用ディレクトリの削除をサポートした。読み取り専用の非ディレクトリファイルの削除サポートは、以前から追加されていた&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;directory_iterator&lt;/code&gt;の内部実装を作り直し、最新のWindows APIを有効に活用できるようになった。これにより、シンボリックリンク処理中のパフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;Windowsにおいて、可能であれば内部のWinAPIの関数ポインタを早期に初期化し、Boost.Filesystemの操作をグローバルコンストラクタで呼び出せるようにした。これは、MSVC、GCC、Clang、およびそれらと互換性のあるコンパイラでのみサポートされる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、開かれているファイルに対して&lt;code&gt;resize_file&lt;/code&gt;した際に、エラーにならないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; Androidの11.0 (APIバージョン30) より前での、&lt;code&gt;statx&lt;/code&gt;システムコールの使用を無効にした。そのシステムコールはseccompによってブラックリストに登録されており、実行時にプロセスが終了してしまう&lt;/li&gt;
&lt;li&gt;非推奨化 : &lt;code&gt;boost/filesystem/string_file.hpp&lt;/code&gt;は非推奨となり、将来のリリースから削除される。このヘッダはデフォルトでは&lt;code&gt;boost/filesystem.hpp&lt;/code&gt;に含まれなくなった。ユーザーは、この機能を自身で実装するか、他の実装に移行することを勧める&lt;/li&gt;
&lt;li&gt;非推奨化 : Windows CEのサポートは非推奨となり、将来のリリースから削除される。Windows CEは長年テストされておらず、機能していない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きな変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/977&#34; target=&#34;_blank&#34;&gt;GitHub #977&lt;/a&gt; 再スケーリングをデフォルトでオフにした。これにより、集合操作とバッファに関連する多くのバグが回避される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/961&#34; target=&#34;_blank&#34;&gt;GitHub #961&lt;/a&gt; Webメルトカル図法 (Web Mercator projection) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/966&#34; target=&#34;_blank&#34;&gt;GitHub #966&lt;/a&gt; &lt;code&gt;simplify&lt;/code&gt;で使用されるcartesian distanceをより効率的にした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したissue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/956&#34; target=&#34;_blank&#34;&gt;GitHub #956&lt;/a&gt; 誤ったclosureをともなう&lt;code&gt;simplify&lt;/code&gt;アルゴリズムの結果を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/962&#34; target=&#34;_blank&#34;&gt;GitHub #962&lt;/a&gt; load factorによるR-treeのデシリアライズ時の実行時エラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/971&#34; target=&#34;_blank&#34;&gt;GitHub #971&lt;/a&gt; ARMプラットフォームで&lt;code&gt;long double&lt;/code&gt;を使用した際に影響を受けるR-treeの挿入時間を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/936&#34; target=&#34;_blank&#34;&gt;GitHub #936&lt;/a&gt; 極 (pole) を含むpolygonのenvelopeを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/948&#34; target=&#34;_blank&#34;&gt;GitHub #948&lt;/a&gt; meridian segments付近のspherical/geometric envelopeを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/974&#34; target=&#34;_blank&#34;&gt;GitHub #974&lt;/a&gt; NaN座標の回転楕円体正規化ユーティリティ (spheroidal normalization utilities) を修正&lt;/li&gt;
&lt;li&gt;集合操作とバッファのさまざまなバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/issues/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; 内部でビット演算を使用するよう&lt;code&gt;integer_log2&lt;/code&gt;の実装を最適化した。これにより、最新のCPUで利用可能なビット命令を使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヌルストリームバッファである&lt;code&gt;boost::io::basic_nullbuf&lt;/code&gt;と、ヌル出力ストリームである&lt;code&gt;boost::basic_onullstream&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;に、GCCとClangおよびそれらと互換性のある一部のターゲットプラットフォームでサポートされる組み込みの128ビット整数型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;での、非推奨の暗黙のコピー代入演算子に関するGCCの警告を黙らせた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリのスタンドアロンモードを削除。スタンドアロンのJSONライブラリを使用したい場合は、&lt;a href=&#34;https://github.com/CPPAlliance/standalone-json.git&#34; target=&#34;_blank&#34;&gt;the C++ Alliance fork&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::error_code&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_codes&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;JSON Pointerのサポートを追加&lt;/li&gt;
&lt;li&gt;シリアライズ中に文字列を自然に伸長させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34; id=&#34;leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FreeRTOSとその他の組み込みプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;診断情報を改善&lt;/li&gt;
&lt;li&gt;設定マクロを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__GNUC__&lt;/code&gt;環境下では、&lt;code&gt;BOOST_LEAF_CHECK&lt;/code&gt;はstatement expressionを使用するようにした&lt;/li&gt;
&lt;li&gt;シンボルのデマングルバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全体的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text_file_backend&lt;/code&gt;において、ファイルローテーションが使用され、ログファイル名がファイルカウンタを使用する場合に、以前に書き込まれたログファイルに追記するためのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;file_collector&lt;/code&gt;のインタフェースを以下のように変更：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scan_for_files&lt;/code&gt;メンバ関数は、スキャン中に収集された情報を含む&lt;code&gt;scan_result&lt;/code&gt;構造体を返す&lt;/li&gt;
&lt;li&gt;パスがターゲットストレージディレクトリ内のファイルを参照しているかどうかをテストするために、&lt;code&gt;is_in_storage&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザーの関数をストリーム出力式に挿入するために使用できる新たな&lt;code&gt;invoke_manip&lt;/code&gt;ストリームマニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/179&#34; target=&#34;_blank&#34;&gt;GitHub #179&lt;/a&gt; ユーザーが&lt;code&gt;text_file_backend::scan_for_files&lt;/code&gt;を複数回呼び出し、2回目以降の呼び出しで新しいファイルが見つからない場合に、ファイルカウンタがゼロに設定される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/log/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ranked indicesの&lt;code&gt;count&lt;/code&gt;操作の効率を、&lt;code&gt;O(log(n) + count)&lt;/code&gt;から&lt;code&gt;O(log(n))&lt;/code&gt;に改善 (Damian Sawicki氏による貢献)&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのプラットフォームでのコンパイル問題を修正 (例として、MinGW-w64やCygwinのGCC 11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;と&lt;code&gt;WIN32_LEAN_AND_MEAN&lt;/code&gt;を使用した際の不足していたインクルードを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::stat_t&lt;/code&gt;をともなう&lt;code&gt;boost::nowide::stat&lt;/code&gt;を使用した際のサニティチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; &lt;code&gt;std::optional&amp;lt;bool&amp;gt;&lt;/code&gt;との相互運用がうまくいっていなかったところを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;BOOST_NO_IOSTREAM&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;未定義動作を避けるためにaligned storageに&lt;code&gt;char&lt;/code&gt;の代わりに&lt;code&gt;unsigned char&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;未定義動作を避けるために、placement newでCV修飾された&lt;code&gt;value_type&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34; id=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version 1.14.0&lt;/li&gt;
&lt;li&gt;LoongArchの検出を追加 (Zhang Na氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34; id=&#34;qvm&#34;&gt;QVM&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17の&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;シングルヘッダの配布を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::allocate_unique&lt;/code&gt;の結果からアロケータへのポインタを取得するために、&lt;code&gt;boost::get_allocator_pointer&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に、&lt;code&gt;errc::errc_t&lt;/code&gt;, &lt;code&gt;std::error_code&lt;/code&gt;, &lt;code&gt;std::errc&lt;/code&gt;, &lt;code&gt;std::exception_ptr&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result &amp;lt;T&amp;gt; :: value&lt;/code&gt;は、デフォルトの引数を介して&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を&lt;code&gt;throw_exception_from_error&lt;/code&gt;に自動的に供給するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errc::make_error_code&lt;/code&gt;に、source locationを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Exceptionを使用しないプログラムのために、&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;の軽量な代替手段である&lt;code&gt;boost::throw_with_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのコンテナが、異種混合 (heterogeneous) の&lt;code&gt;count&lt;/code&gt;、&lt;code&gt;equal_range&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;すべてのコンテナに&lt;code&gt;contains&lt;/code&gt;メンバ関数を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナで使用できる&lt;code&gt;erase_if&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナが、異種混合の&lt;code&gt;erase&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;が早期にアロケートするよう振る舞いを修正&lt;/li&gt;
&lt;li&gt;テストスイートのさまざまな警告を修正&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;boost::allocator_traits&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;li&gt;Fibonacci hashingに切り替え&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickBookからAsciiDocに置き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monostate&lt;/code&gt;用の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WaveのビルドにC++11を要求するようになった&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt; C++20で非推奨になった配列の添字演算子中のカンマ演算子の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; C++11以降のモードでEOF前の改行を要求しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; 空のifdefブロックが空白を入れない限り行ディレクティブを発行しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; &lt;code&gt;__has_include()&lt;/code&gt;のあとにトークン (空白含む) があるとパースに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;reset_version()&lt;/code&gt;内でのsanitizerのエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/147&#34; target=&#34;_blank&#34;&gt;GitHub #147&lt;/a&gt; 異なる列挙型同士のビット演算がC++20で非推奨になったことによる警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.8.2をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.79.0リリースノート -- 1.79.0 : Optionalを追加</title>
      <link href="https://boostjp.github.io/document/version/1_79_0.html"/>
      <id>89eccb16aa0219e88eedc751ba887d09dbacc0d2:document/version/1_79_0.md</id>
      <updated>2022-03-28T20:04:32+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.79.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_79_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_79_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34;&gt;Describe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34;&gt;QVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location().file_name()&lt;/code&gt;と&lt;code&gt;source_location().function_name()&lt;/code&gt;が、&lt;code&gt;&#34;(unknown)&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;&#34;&lt;/code&gt;を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;に、&lt;code&gt;std::source_location&lt;/code&gt;からの変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を変更し、トップレベルで使用したり、関数のデフォルト引数として使用したりした場合に、&lt;code&gt;std::source_location::current()&lt;/code&gt;とより厳密に動作を一致させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; Universal Windows Platform (UWP) でのコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; 設定マクロ&lt;code&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/code&gt;を追加。このマクロはDarwinシステムでのコンパイルに影響を与え、wait/notify操作の&lt;code&gt;ulock&lt;/code&gt;ベースの実装を無効にする。これはApple App Storeの要件に準拠するために役立つ場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;のテストに不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;失敗していたWebSocketハンドシェイクのレスポンスを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_posix&lt;/code&gt;と&lt;code&gt;file_win32&lt;/code&gt;の追記オープンモードを修正&lt;/li&gt;
&lt;li&gt;Windowsでの&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;フラグ付きでファイルを開く操作を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;と&lt;code&gt;file_stdio&lt;/code&gt;のclang-cl UTF-8ハンドリングを修正&lt;/li&gt;
&lt;li&gt;drone CIでのARM64ビルドを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_base&lt;/code&gt;ドキュメントのリンクを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;モードでファイルを開くテストを追加&lt;/li&gt;
&lt;li&gt;gcc 11, clang 12, msvc 14.3を含めるようCIを更新&lt;/li&gt;
&lt;li&gt;CMakeワークフローでの個別テストを追加&lt;/li&gt;
&lt;li&gt;完全な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LWG3545に対応し、&lt;code&gt;boost::pointer_traits&lt;/code&gt;をSFINAEフレンドリーにした (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;個別のアロケータ特性にアクセスする&lt;code&gt;boost::allocator_traits&lt;/code&gt;を追加。この実装はC++03以降をサポートする (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;C++03でほとんどのC++11アロケータモデルをサポートするよう、アロケータのアクセス特性を更新 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;は非推奨となり、将来のリリースで削除される予定。このヘッダは&lt;code&gt;boost::iterator&lt;/code&gt;を定義し、それは&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;の&lt;code&gt;std::iterator&lt;/code&gt;と等価である。しかしこの機能はC++17で非推奨となっているため、ユーザーにはこれらの使用をやめることを勧める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::core::verbose_terminate_handler&lt;/code&gt;を追加。これは、捕捉されなかった例外を&lt;code&gt;stderr&lt;/code&gt;に出力する、&lt;code&gt;std::set_terminate&lt;/code&gt;関数に渡すことを目的としたユーティリティ関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34; id=&#34;describe&#34;&gt;Describe&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DESCRIBE_STRUCT&lt;/code&gt;での&lt;code&gt;union&lt;/code&gt;を有効にし、&lt;code&gt;std::is_union&amp;lt;T&amp;gt;&lt;/code&gt;をチェックするようサンプルコードを更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のクラスフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のenumフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;メンバへのポインタを出力するサンプルコードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v3の&lt;code&gt;path::replace_extension&lt;/code&gt;は、v4ではなくv3の&lt;code&gt;path::extension&lt;/code&gt;の定義に関して機能するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/223&#34; target=&#34;_blank&#34;&gt;GitHub #223&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;または変換可能な文字列型を引数にするパスの追加と連結の演算子のコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; &lt;code&gt;fdopendir&lt;/code&gt;と&lt;code&gt;O_NOFOLLOW&lt;/code&gt;をサポートするPOSIXシステムとWindowsでは、&lt;code&gt;remove_all&lt;/code&gt;が&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2022-21658&#34; target=&#34;_blank&#34;&gt;CVE-2022-21658&lt;/a&gt;から保護されるようになった。この脆弱性は、サードパーティのプロセスが&lt;code&gt;remove_all&lt;/code&gt;によって同時に処理されるディレクトリをディレクトリシンボリックリンクに置き換え、&lt;code&gt;remove_all&lt;/code&gt;がシンボリックリンクをたどり、シンボリックリンクを削除する代わりにリンクされたディレクトリ内のファイルを削除することを可能にする競合状態である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; Windowsの&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;の実装で、OSでサポートされている場合に (Windows 10 1709以降)、ファイルの削除にPOSIXセマンティクスを使用する。POSIXセマンティクスがサポートされている場合、ファイルがまだ開かれていて使用中であっても、ファイルに削除マークがつけられてすぐに、ファイル名はファイルシステム名前空間から削除される。従来のWindowsセマンティクスでは、ファイルへの最後のファイルハンドルが閉じられるまで、ファイル名はファイルシステム名前空間に存在し続ける。これにより、削除のマークが付けられたファイルを開くことができ、同じ名前の新しいファイルが作成されなくなる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;で読み取り専用ディレクトリの削除をサポートした。読み取り専用の非ディレクトリファイルの削除サポートは、以前から追加されていた&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;directory_iterator&lt;/code&gt;の内部実装を作り直し、最新のWindows APIを有効に活用できるようになった。これにより、シンボリックリンク処理中のパフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;Windowsにおいて、可能であれば内部のWinAPIの関数ポインタを早期に初期化し、Boost.Filesystemの操作をグローバルコンストラクタで呼び出せるようにした。これは、MSVC、GCC、Clang、およびそれらと互換性のあるコンパイラでのみサポートされる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、開かれているファイルに対して&lt;code&gt;resize_file&lt;/code&gt;した際に、エラーにならないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; Androidの11.0 (APIバージョン30) より前での、&lt;code&gt;statx&lt;/code&gt;システムコールの使用を無効にした。そのシステムコールはseccompによってブラックリストに登録されており、実行時にプロセスが終了してしまう&lt;/li&gt;
&lt;li&gt;非推奨化 : &lt;code&gt;boost/filesystem/string_file.hpp&lt;/code&gt;は非推奨となり、将来のリリースから削除される。このヘッダはデフォルトでは&lt;code&gt;boost/filesystem.hpp&lt;/code&gt;に含まれなくなった。ユーザーは、この機能を自身で実装するか、他の実装に移行することを勧める&lt;/li&gt;
&lt;li&gt;非推奨化 : Windows CEのサポートは非推奨となり、将来のリリースから削除される。Windows CEは長年テストされておらず、機能していない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/issues/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; 内部でビット演算を使用するよう&lt;code&gt;integer_log2&lt;/code&gt;の実装を最適化した。これにより、最新のCPUで利用可能なビット命令を使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヌルストリームバッファである&lt;code&gt;boost::io::basic_nullbuf&lt;/code&gt;と、ヌル出力ストリームである&lt;code&gt;boost::basic_onullstream&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;に、GCCとClangおよびそれらと互換性のある一部のターゲットプラットフォームでサポートされる組み込みの128ビット整数型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;での、非推奨の暗黙のコピー代入演算子に関するGCCの警告を黙らせた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリのスタンドアロンモードを削除。スタンドアロンのJSONライブラリを使用したい場合は、&lt;a href=&#34;https://github.com/CPPAlliance/standalone-json.git&#34; target=&#34;_blank&#34;&gt;the C++ Alliance fork&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::error_code&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_codes&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;JSON Pointerのサポートを追加&lt;/li&gt;
&lt;li&gt;シリアライズ中に文字列を自然に伸長させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34; id=&#34;leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FreeRTOSとその他の組み込みプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;診断情報を改善&lt;/li&gt;
&lt;li&gt;設定マクロを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__GNUC__&lt;/code&gt;環境下では、&lt;code&gt;BOOST_LEAF_CHECK&lt;/code&gt;はstatement expressionを使用するようにした&lt;/li&gt;
&lt;li&gt;シンボルのデマングルバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全体的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text_file_backend&lt;/code&gt;において、ファイルローテーションが使用され、ログファイル名がファイルカウンタを使用する場合に、以前に書き込まれたログファイルに追記するためのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;file_collector&lt;/code&gt;のインタフェースを以下のように変更：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scan_for_files&lt;/code&gt;メンバ関数は、スキャン中に収集された情報を含む&lt;code&gt;scan_result&lt;/code&gt;構造体を返す&lt;/li&gt;
&lt;li&gt;パスがターゲットストレージディレクトリ内のファイルを参照しているかどうかをテストするために、&lt;code&gt;is_in_storage&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザーの関数をストリーム出力式に挿入するために使用できる新たな&lt;code&gt;invoke_manip&lt;/code&gt;ストリームマニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/179&#34; target=&#34;_blank&#34;&gt;GitHub #179&lt;/a&gt; ユーザーが&lt;code&gt;text_file_backend::scan_for_files&lt;/code&gt;を複数回呼び出し、2回目以降の呼び出しで新しいファイルが見つからない場合に、ファイルカウンタがゼロに設定される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/log/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ranked indicesの&lt;code&gt;count&lt;/code&gt;操作の効率を、&lt;code&gt;O(log(n) + count)&lt;/code&gt;から&lt;code&gt;O(log(n))&lt;/code&gt;に改善 (Damian Sawicki氏による貢献)&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのプラットフォームでのコンパイル問題を修正 (例として、MinGW-w64やCygwinのGCC 11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;と&lt;code&gt;WIN32_LEAN_AND_MEAN&lt;/code&gt;を使用した際の不足していたインクルードを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::stat_t&lt;/code&gt;をともなう&lt;code&gt;boost::nowide::stat&lt;/code&gt;を使用した際のサニティチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#optional&#34; id=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; &lt;code&gt;std::optional&amp;lt;bool&amp;gt;&lt;/code&gt;との相互運用がうまくいっていなかったところを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/optional/issues/92&#34; target=&#34;_blank&#34;&gt;GitHub #92&lt;/a&gt; &lt;code&gt;BOOST_NO_IOSTREAM&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;未定義動作を避けるためにaligned storageに&lt;code&gt;char&lt;/code&gt;の代わりに&lt;code&gt;unsigned char&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;未定義動作を避けるために、placement newでCV修飾された&lt;code&gt;value_type&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34; id=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version 1.14.0&lt;/li&gt;
&lt;li&gt;LoongArchの検出を追加 (Zhang Na氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34; id=&#34;qvm&#34;&gt;QVM&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17の&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;シングルヘッダの配布を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::allocate_unique&lt;/code&gt;の結果からアロケータへのポインタを取得するために、&lt;code&gt;boost::get_allocator_pointer&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に、&lt;code&gt;errc::errc_t&lt;/code&gt;, &lt;code&gt;std::error_code&lt;/code&gt;, &lt;code&gt;std::errc&lt;/code&gt;, &lt;code&gt;std::exception_ptr&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result &amp;lt;T&amp;gt; :: value&lt;/code&gt;は、デフォルトの引数を介して&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を&lt;code&gt;throw_exception_from_error&lt;/code&gt;に自動的に供給するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errc::make_error_code&lt;/code&gt;に、source locationを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Exceptionを使用しないプログラムのために、&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;の軽量な代替手段である&lt;code&gt;boost::throw_with_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのコンテナが、異種混合 (heterogeneous) の&lt;code&gt;count&lt;/code&gt;、&lt;code&gt;equal_range&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;すべてのコンテナに&lt;code&gt;contains&lt;/code&gt;メンバ関数を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナで使用できる&lt;code&gt;erase_if&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナが、異種混合の&lt;code&gt;erase&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;が早期にアロケートするよう振る舞いを修正&lt;/li&gt;
&lt;li&gt;テストスイートのさまざまな警告を修正&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;boost::allocator_traits&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;li&gt;Fibonacci hashingに切り替え&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickBookからAsciiDocに置き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monostate&lt;/code&gt;用の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WaveのビルドにC++11を要求するようになった&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt; C++20で非推奨になった配列の添字演算子中のカンマ演算子の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; C++11以降のモードでEOF前の改行を要求しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; 空のifdefブロックが空白を入れない限り行ディレクティブを発行しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; &lt;code&gt;__has_include()&lt;/code&gt;のあとにトークン (空白含む) があるとパースに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;reset_version()&lt;/code&gt;内でのsanitizerのエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/147&#34; target=&#34;_blank&#34;&gt;GitHub #147&lt;/a&gt; 異なる列挙型同士のビット演算がC++20で非推奨になったことによる警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.8.2をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.79.0リリースノート -- 1.79.0 : 残りを追加</title>
      <link href="https://boostjp.github.io/document/version/1_79_0.html"/>
      <id>aa55d5df4b28df191c2cc0ff64a5f04e0dc6f869:document/version/1_79_0.md</id>
      <updated>2022-03-25T19:24:53+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.79.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_79_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_79_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34;&gt;Describe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34;&gt;QVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location().file_name()&lt;/code&gt;と&lt;code&gt;source_location().function_name()&lt;/code&gt;が、&lt;code&gt;&#34;(unknown)&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;&#34;&lt;/code&gt;を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;に、&lt;code&gt;std::source_location&lt;/code&gt;からの変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を変更し、トップレベルで使用したり、関数のデフォルト引数として使用したりした場合に、&lt;code&gt;std::source_location::current()&lt;/code&gt;とより厳密に動作を一致させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; Universal Windows Platform (UWP) でのコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; 設定マクロ&lt;code&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/code&gt;を追加。このマクロはDarwinシステムでのコンパイルに影響を与え、wait/notify操作の&lt;code&gt;ulock&lt;/code&gt;ベースの実装を無効にする。これはApple App Storeの要件に準拠するために役立つ場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;のテストに不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;失敗していたWebSocketハンドシェイクのレスポンスを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_posix&lt;/code&gt;と&lt;code&gt;file_win32&lt;/code&gt;の追記オープンモードを修正&lt;/li&gt;
&lt;li&gt;Windowsでの&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;フラグ付きでファイルを開く操作を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;と&lt;code&gt;file_stdio&lt;/code&gt;のclang-cl UTF-8ハンドリングを修正&lt;/li&gt;
&lt;li&gt;drone CIでのARM64ビルドを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_base&lt;/code&gt;ドキュメントのリンクを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;モードでファイルを開くテストを追加&lt;/li&gt;
&lt;li&gt;gcc 11, clang 12, msvc 14.3を含めるようCIを更新&lt;/li&gt;
&lt;li&gt;CMakeワークフローでの個別テストを追加&lt;/li&gt;
&lt;li&gt;完全な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LWG3545に対応し、&lt;code&gt;boost::pointer_traits&lt;/code&gt;をSFINAEフレンドリーにした (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;個別のアロケータ特性にアクセスする&lt;code&gt;boost::allocator_traits&lt;/code&gt;を追加。この実装はC++03以降をサポートする (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;C++03でほとんどのC++11アロケータモデルをサポートするよう、アロケータのアクセス特性を更新 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;は非推奨となり、将来のリリースで削除される予定。このヘッダは&lt;code&gt;boost::iterator&lt;/code&gt;を定義し、それは&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;の&lt;code&gt;std::iterator&lt;/code&gt;と等価である。しかしこの機能はC++17で非推奨となっているため、ユーザーにはこれらの使用をやめることを勧める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::core::verbose_terminate_handler&lt;/code&gt;を追加。これは、捕捉されなかった例外を&lt;code&gt;stderr&lt;/code&gt;に出力する、&lt;code&gt;std::set_terminate&lt;/code&gt;関数に渡すことを目的としたユーティリティ関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34; id=&#34;describe&#34;&gt;Describe&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DESCRIBE_STRUCT&lt;/code&gt;での&lt;code&gt;union&lt;/code&gt;を有効にし、&lt;code&gt;std::is_union&amp;lt;T&amp;gt;&lt;/code&gt;をチェックするようサンプルコードを更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のクラスフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のenumフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;メンバへのポインタを出力するサンプルコードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v3の&lt;code&gt;path::replace_extension&lt;/code&gt;は、v4ではなくv3の&lt;code&gt;path::extension&lt;/code&gt;の定義に関して機能するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/223&#34; target=&#34;_blank&#34;&gt;GitHub #223&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;または変換可能な文字列型を引数にするパスの追加と連結の演算子のコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; &lt;code&gt;fdopendir&lt;/code&gt;と&lt;code&gt;O_NOFOLLOW&lt;/code&gt;をサポートするPOSIXシステムとWindowsでは、&lt;code&gt;remove_all&lt;/code&gt;が&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2022-21658&#34; target=&#34;_blank&#34;&gt;CVE-2022-21658&lt;/a&gt;から保護されるようになった。この脆弱性は、サードパーティのプロセスが&lt;code&gt;remove_all&lt;/code&gt;によって同時に処理されるディレクトリをディレクトリシンボリックリンクに置き換え、&lt;code&gt;remove_all&lt;/code&gt;がシンボリックリンクをたどり、シンボリックリンクを削除する代わりにリンクされたディレクトリ内のファイルを削除することを可能にする競合状態である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; Windowsの&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;の実装で、OSでサポートされている場合に (Windows 10 1709以降)、ファイルの削除にPOSIXセマンティクスを使用する。POSIXセマンティクスがサポートされている場合、ファイルがまだ開かれていて使用中であっても、ファイルに削除マークがつけられてすぐに、ファイル名はファイルシステム名前空間から削除される。従来のWindowsセマンティクスでは、ファイルへの最後のファイルハンドルが閉じられるまで、ファイル名はファイルシステム名前空間に存在し続ける。これにより、削除のマークが付けられたファイルを開くことができ、同じ名前の新しいファイルが作成されなくなる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;で読み取り専用ディレクトリの削除をサポートした。読み取り専用の非ディレクトリファイルの削除サポートは、以前から追加されていた&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;directory_iterator&lt;/code&gt;の内部実装を作り直し、最新のWindows APIを有効に活用できるようになった。これにより、シンボリックリンク処理中のパフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;Windowsにおいて、可能であれば内部のWinAPIの関数ポインタを早期に初期化し、Boost.Filesystemの操作をグローバルコンストラクタで呼び出せるようにした。これは、MSVC、GCC、Clang、およびそれらと互換性のあるコンパイラでのみサポートされる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、開かれているファイルに対して&lt;code&gt;resize_file&lt;/code&gt;した際に、エラーにならないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; Androidの11.0 (APIバージョン30) より前での、&lt;code&gt;statx&lt;/code&gt;システムコールの使用を無効にした。そのシステムコールはseccompによってブラックリストに登録されており、実行時にプロセスが終了してしまう&lt;/li&gt;
&lt;li&gt;非推奨化 : &lt;code&gt;boost/filesystem/string_file.hpp&lt;/code&gt;は非推奨となり、将来のリリースから削除される。このヘッダはデフォルトでは&lt;code&gt;boost/filesystem.hpp&lt;/code&gt;に含まれなくなった。ユーザーは、この機能を自身で実装するか、他の実装に移行することを勧める&lt;/li&gt;
&lt;li&gt;非推奨化 : Windows CEのサポートは非推奨となり、将来のリリースから削除される。Windows CEは長年テストされておらず、機能していない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/issues/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; 内部でビット演算を使用するよう&lt;code&gt;integer_log2&lt;/code&gt;の実装を最適化した。これにより、最新のCPUで利用可能なビット命令を使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヌルストリームバッファである&lt;code&gt;boost::io::basic_nullbuf&lt;/code&gt;と、ヌル出力ストリームである&lt;code&gt;boost::basic_onullstream&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;に、GCCとClangおよびそれらと互換性のある一部のターゲットプラットフォームでサポートされる組み込みの128ビット整数型のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counting_iterator&lt;/code&gt;での、非推奨の暗黙のコピー代入演算子に関するGCCの警告を黙らせた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリのスタンドアロンモードを削除。スタンドアロンのJSONライブラリを使用したい場合は、&lt;a href=&#34;https://github.com/CPPAlliance/standalone-json.git&#34; target=&#34;_blank&#34;&gt;the C++ Alliance fork&lt;/a&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::error_code&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_codes&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;JSON Pointerのサポートを追加&lt;/li&gt;
&lt;li&gt;シリアライズ中に文字列を自然に伸長させるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#leaf&#34; id=&#34;leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FreeRTOSとその他の組み込みプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;診断情報を改善&lt;/li&gt;
&lt;li&gt;設定マクロを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__GNUC__&lt;/code&gt;環境下では、&lt;code&gt;BOOST_LEAF_CHECK&lt;/code&gt;はstatement expressionを使用するようにした&lt;/li&gt;
&lt;li&gt;シンボルのデマングルバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全体的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text_file_backend&lt;/code&gt;において、ファイルローテーションが使用され、ログファイル名がファイルカウンタを使用する場合に、以前に書き込まれたログファイルに追記するためのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;file_collector&lt;/code&gt;のインタフェースを以下のように変更：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scan_for_files&lt;/code&gt;メンバ関数は、スキャン中に収集された情報を含む&lt;code&gt;scan_result&lt;/code&gt;構造体を返す&lt;/li&gt;
&lt;li&gt;パスがターゲットストレージディレクトリ内のファイルを参照しているかどうかをテストするために、&lt;code&gt;is_in_storage&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザーの関数をストリーム出力式に挿入するために使用できる新たな&lt;code&gt;invoke_manip&lt;/code&gt;ストリームマニピュレータを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/179&#34; target=&#34;_blank&#34;&gt;GitHub #179&lt;/a&gt; ユーザーが&lt;code&gt;text_file_backend::scan_for_files&lt;/code&gt;を複数回呼び出し、2回目以降の呼び出しで新しいファイルが見つからない場合に、ファイルカウンタがゼロに設定される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/log/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ranked indicesの&lt;code&gt;count&lt;/code&gt;操作の効率を、&lt;code&gt;O(log(n) + count)&lt;/code&gt;から&lt;code&gt;O(log(n))&lt;/code&gt;に改善 (Damian Sawicki氏による貢献)&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのプラットフォームでのコンパイル問題を修正 (例として、MinGW-w64やCygwinのGCC 11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;と&lt;code&gt;WIN32_LEAN_AND_MEAN&lt;/code&gt;を使用した際の不足していたインクルードを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::stat_t&lt;/code&gt;をともなう&lt;code&gt;boost::nowide::stat&lt;/code&gt;を使用した際のサニティチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#predef&#34; id=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Version 1.14.0&lt;/li&gt;
&lt;li&gt;LoongArchの検出を追加 (Zhang Na氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#qvm&#34; id=&#34;qvm&#34;&gt;QVM&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17の&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;シングルヘッダの配布を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::allocate_unique&lt;/code&gt;の結果からアロケータへのポインタを取得するために、&lt;code&gt;boost::get_allocator_pointer&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に&lt;code&gt;boost::source_location&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throw_exception_from_error&lt;/code&gt;に、&lt;code&gt;errc::errc_t&lt;/code&gt;, &lt;code&gt;std::error_code&lt;/code&gt;, &lt;code&gt;std::errc&lt;/code&gt;, &lt;code&gt;std::exception_ptr&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result &amp;lt;T&amp;gt; :: value&lt;/code&gt;は、デフォルトの引数を介して&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を&lt;code&gt;throw_exception_from_error&lt;/code&gt;に自動的に供給するようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errc::make_error_code&lt;/code&gt;に、source locationを引数にとるオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Exceptionを使用しないプログラムのために、&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;の軽量な代替手段である&lt;code&gt;boost::throw_with_location&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのコンテナが、異種混合 (heterogeneous) の&lt;code&gt;count&lt;/code&gt;、&lt;code&gt;equal_range&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;すべてのコンテナに&lt;code&gt;contains&lt;/code&gt;メンバ関数を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナで使用できる&lt;code&gt;erase_if&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;すべてのコンテナが、異種混合の&lt;code&gt;erase&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を持つよう更新した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;が早期にアロケートするよう振る舞いを修正&lt;/li&gt;
&lt;li&gt;テストスイートのさまざまな警告を修正&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;boost::allocator_traits&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;li&gt;Fibonacci hashingに切り替え&lt;/li&gt;
&lt;li&gt;ドキュメントをQuickBookからAsciiDocに置き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monostate&lt;/code&gt;用の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WaveのビルドにC++11を要求するようになった&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt; C++20で非推奨になった配列の添字演算子中のカンマ演算子の使用を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; C++11以降のモードでEOF前の改行を要求しないよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/138&#34; target=&#34;_blank&#34;&gt;GitHub #138&lt;/a&gt; 空のifdefブロックが空白を入れない限り行ディレクティブを発行しない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; &lt;code&gt;__has_include()&lt;/code&gt;のあとにトークン (空白含む) があるとパースに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;reset_version()&lt;/code&gt;内でのsanitizerのエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/147&#34; target=&#34;_blank&#34;&gt;GitHub #147&lt;/a&gt; 異なる列挙型同士のビット演算がC++20で非推奨になったことによる警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2 version 4.8.2をリリース&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.79.0リリースノート -- 1.79.0 : Fielsystem, Integer, IOを追加</title>
      <link href="https://boostjp.github.io/document/version/1_79_0.html"/>
      <id>35b5c17314e7afa1b7831652b34fc932983ea08e:document/version/1_79_0.md</id>
      <updated>2022-03-24T17:02:36+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.79.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_79_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_79_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_79_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34;&gt;Describe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location().file_name()&lt;/code&gt;と&lt;code&gt;source_location().function_name()&lt;/code&gt;が、&lt;code&gt;&#34;(unknown)&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;&#34;&lt;/code&gt;を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;に、&lt;code&gt;std::source_location&lt;/code&gt;からの変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CURRENT_LOCATION&lt;/code&gt;を変更し、トップレベルで使用したり、関数のデフォルト引数として使用したりした場合に、&lt;code&gt;std::source_location::current()&lt;/code&gt;とより厳密に動作を一致させた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/54&#34; target=&#34;_blank&#34;&gt;GitHub #54&lt;/a&gt; Universal Windows Platform (UWP) でのコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; 設定マクロ&lt;code&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/code&gt;を追加。このマクロはDarwinシステムでのコンパイルに影響を与え、wait/notify操作の&lt;code&gt;ulock&lt;/code&gt;ベースの実装を無効にする。これはApple App Storeの要件に準拠するために役立つ場合がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;のテストに不足していたインクルードを追加&lt;/li&gt;
&lt;li&gt;失敗していたWebSocketハンドシェイクのレスポンスを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_posix&lt;/code&gt;と&lt;code&gt;file_win32&lt;/code&gt;の追記オープンモードを修正&lt;/li&gt;
&lt;li&gt;Windowsでの&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;フラグ付きでファイルを開く操作を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;と&lt;code&gt;file_stdio&lt;/code&gt;のclang-cl UTF-8ハンドリングを修正&lt;/li&gt;
&lt;li&gt;drone CIでのARM64ビルドを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_base&lt;/code&gt;ドキュメントのリンクを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;/&lt;code&gt;append_existing&lt;/code&gt;モードでファイルを開くテストを追加&lt;/li&gt;
&lt;li&gt;gcc 11, clang 12, msvc 14.3を含めるようCIを更新&lt;/li&gt;
&lt;li&gt;CMakeワークフローでの個別テストを追加&lt;/li&gt;
&lt;li&gt;完全な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LWG3545に対応し、&lt;code&gt;boost::pointer_traits&lt;/code&gt;をSFINAEフレンドリーにした (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;個別のアロケータ特性にアクセスする&lt;code&gt;boost::allocator_traits&lt;/code&gt;を追加。この実装はC++03以降をサポートする (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;C++03でほとんどのC++11アロケータモデルをサポートするよう、アロケータのアクセス特性を更新 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;は非推奨となり、将来のリリースで削除される予定。このヘッダは&lt;code&gt;boost::iterator&lt;/code&gt;を定義し、それは&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;の&lt;code&gt;std::iterator&lt;/code&gt;と等価である。しかしこの機能はC++17で非推奨となっているため、ユーザーにはこれらの使用をやめることを勧める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::core::verbose_terminate_handler&lt;/code&gt;を追加。これは、捕捉されなかった例外を&lt;code&gt;stderr&lt;/code&gt;に出力する、&lt;code&gt;std::set_terminate&lt;/code&gt;関数に渡すことを目的としたユーティリティ関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#describe&#34; id=&#34;describe&#34;&gt;Describe&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DESCRIBE_STRUCT&lt;/code&gt;での&lt;code&gt;union&lt;/code&gt;を有効にし、&lt;code&gt;std::is_union&amp;lt;T&amp;gt;&lt;/code&gt;をチェックするようサンプルコードを更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のクラスフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmtlib&lt;/code&gt;のenumフォーマッタを定義するサンプルコードを追加&lt;/li&gt;
&lt;li&gt;メンバへのポインタを出力するサンプルコードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v3の&lt;code&gt;path::replace_extension&lt;/code&gt;は、v4ではなくv3の&lt;code&gt;path::extension&lt;/code&gt;の定義に関して機能するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/223&#34; target=&#34;_blank&#34;&gt;GitHub #223&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;または変換可能な文字列型を引数にするパスの追加と連結の演算子のコンパイルを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; &lt;code&gt;fdopendir&lt;/code&gt;と&lt;code&gt;O_NOFOLLOW&lt;/code&gt;をサポートするPOSIXシステムとWindowsでは、&lt;code&gt;remove_all&lt;/code&gt;が&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2022-21658&#34; target=&#34;_blank&#34;&gt;CVE-2022-21658&lt;/a&gt;から保護されるようになった。この脆弱性は、サードパーティのプロセスが&lt;code&gt;remove_all&lt;/code&gt;によって同時に処理されるディレクトリをディレクトリシンボリックリンクに置き換え、&lt;code&gt;remove_all&lt;/code&gt;がシンボリックリンクをたどり、シンボリックリンクを削除する代わりにリンクされたディレクトリ内のファイルを削除することを可能にする競合状態である&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; Windowsの&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;の実装で、OSでサポートされている場合に (Windows 10 1709以降)、ファイルの削除にPOSIXセマンティクスを使用する。POSIXセマンティクスがサポートされている場合、ファイルがまだ開かれていて使用中であっても、ファイルに削除マークがつけられてすぐに、ファイル名はファイルシステム名前空間から削除される。従来のWindowsセマンティクスでは、ファイルへの最後のファイルハンドルが閉じられるまで、ファイル名はファイルシステム名前空間に存在し続ける。これにより、削除のマークが付けられたファイルを開くことができ、同じ名前の新しいファイルが作成されなくなる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;remove&lt;/code&gt;と&lt;code&gt;remove_all&lt;/code&gt;で読み取り専用ディレクトリの削除をサポートした。読み取り専用の非ディレクトリファイルの削除サポートは、以前から追加されていた&lt;/li&gt;
&lt;li&gt;Windowsにおいて、&lt;code&gt;directory_iterator&lt;/code&gt;の内部実装を作り直し、最新のWindows APIを有効に活用できるようになった。これにより、シンボリックリンク処理中のパフォーマンスが向上する可能性がある&lt;/li&gt;
&lt;li&gt;Windowsにおいて、可能であれば内部のWinAPIの関数ポインタを早期に初期化し、Boost.Filesystemの操作をグローバルコンストラクタで呼び出せるようにした。これは、MSVC、GCC、Clang、およびそれらと互換性のあるコンパイラでのみサポートされる&lt;/li&gt;
&lt;li&gt;Windowsにおいて、開かれているファイルに対して&lt;code&gt;resize_file&lt;/code&gt;した際に、エラーにならないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; Androidの11.0 (APIバージョン30) より前での、&lt;code&gt;statx&lt;/code&gt;システムコールの使用を無効にした。そのシステムコールはseccompによってブラックリストに登録されており、実行時にプロセスが終了してしまう&lt;/li&gt;
&lt;li&gt;非推奨化 : &lt;code&gt;boost/filesystem/string_file.hpp&lt;/code&gt;は非推奨となり、将来のリリースから削除される。このヘッダはデフォルトでは&lt;code&gt;boost/filesystem.hpp&lt;/code&gt;に含まれなくなった。ユーザーは、この機能を自身で実装するか、他の実装に移行することを勧める&lt;/li&gt;
&lt;li&gt;非推奨化 : Windows CEのサポートは非推奨となり、将来のリリースから削除される。Windows CEは長年テストされておらず、機能していない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/issues/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt; 内部でビット演算を使用するよう&lt;code&gt;integer_log2&lt;/code&gt;の実装を最適化した。これにより、最新のCPUで利用可能なビット命令を使用できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_79_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヌルストリームバッファである&lt;code&gt;boost::io::basic_nullbuf&lt;/code&gt;と、ヌル出力ストリームである&lt;code&gt;boost::basic_onullstream&lt;/code&gt;を追加 (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>