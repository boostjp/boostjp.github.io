<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2016-04-04T23:02:47.319847</updated>
  <id>2a598a28-71f5-4e16-aa79-c7c77c49237f</id>

  
    <entry>
      <title>shared_ptr class template -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html"/>
      <id>986e356fc9a0031c8e53fc3bd202676919f08996:archive/boost_docs/libs/smart_ptr/shared_ptr.md</id>
      <updated>2016-04-04 23:02:42 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;shared_ptr class template&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#BestPractices&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Members&#34;&gt;Members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#functions&#34;&gt;Free Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Handle/Body&#34;&gt;Handle/Body Idiom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#ThreadSafety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smarttests.html&#34;&gt;Smart Pointer Timings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;Introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;クラステンプレートは、C++の&lt;code&gt;new&lt;/code&gt;などによって動的に割り当てられたオブジェクトへのポインタを保持する。
&lt;code&gt;shared_ptr&lt;/code&gt;に指されたオブジェクトは、そのオブジェクトを指す最後の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄もしくはリセットされるときに削除されることが保証されている。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#example&#34;&gt;example&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;はC++標準ライブラリの&lt;strong&gt;CopyConstructible&lt;/strong&gt;(コピーコンストラクト可能)と&lt;strong&gt;Assignable&lt;/strong&gt;(代入可能)の条件を満たすので、標準ライブラリのコンテナで使うことができる。
また、標準ライブラリの連想コンテナで使うことができるように、比較演算子が提供されている。&lt;/p&gt;
&lt;p&gt;通常、&lt;code&gt;shared_ptr&lt;/code&gt;は動的に割り当てられた配列を正しく扱うことはできない。
動的に割り当てられた配列の扱い方については、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_array.html&#34;&gt;shared_array&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の実装には参照カウントが用いられているため、循環参照された&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスは正常に解放されない。
例えば、&lt;code&gt;main()&lt;/code&gt;が&lt;code&gt;A&lt;/code&gt;を指す&lt;code&gt;shared_ptr&lt;/code&gt;を保持しているときに、その&lt;code&gt;A&lt;/code&gt;が直接的または間接的に&lt;code&gt;A&lt;/code&gt;自身を指す&lt;code&gt;shared_ptr&lt;/code&gt;を持っていると、&lt;code&gt;A&lt;/code&gt;に対する&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;参照カウント&lt;/a&gt;は2となる。
最初の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄される際に、&lt;code&gt;A&lt;/code&gt;の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;参照カウント&lt;/a&gt;は 1 となり、そのインスタンスは破棄されずに残ってしまう。
循環参照を回避するには、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;を使う。&lt;/p&gt;
&lt;p&gt;このクラステンプレートには、指し示すオブジェクトの型を表すパラメータ&lt;code&gt;T&lt;/code&gt;を与える。
&lt;code&gt;shared_ptr&lt;/code&gt;とそのメンバ関数の多くは、&lt;code&gt;T&lt;/code&gt;に特別な条件を必要としない。
不完全型や&lt;code&gt;void&lt;/code&gt;も許されている。
&lt;code&gt;T&lt;/code&gt;に特別な条件を必要とするメンバ関数(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;constructors&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;)についてはこのドキュメント中で明示されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T *&lt;/code&gt;が暗黙の型変換により&lt;code&gt;U *&lt;/code&gt;に変換可能であれば、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;は暗黙に&lt;code&gt;shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;に変換できる。
特に、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;は暗黙の型変換により、&lt;code&gt;shared_ptr&amp;lt;T const&amp;gt;&lt;/code&gt;、&lt;code&gt;shared_ptr&amp;lt;U&amp;gt;&lt;/code&gt;、&lt;code&gt;shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;に変換できる。
(&lt;code&gt;U&lt;/code&gt;はアクセス可能な&lt;code&gt;T&lt;/code&gt;の基底型)&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;BestPractices&#34;&gt;Best Practices&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メモリリークの可能性をほとんど排除する為のシンプルな指針 : &lt;code&gt;new&lt;/code&gt;の結果を常に名前のあるスマートポインタに格納すること。
コードに含まれる全ての&lt;code&gt;new&lt;/code&gt;キーワードは、次の形にされるべきである :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(new Y);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;もちろん、上での&lt;code&gt;shared_ptr&lt;/code&gt;の代わりに他のスマートポインタを利用しても良い。
また、&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;Y&lt;/code&gt;が同じ型であったり、&lt;code&gt;Y&lt;/code&gt;のコンストラクタに引数が与えられても良い。&lt;/p&gt;
&lt;p&gt;この指針に従えば、自然と明示的な&lt;code&gt;delete&lt;/code&gt;が無くなり、&lt;em&gt;try/catch&lt;/em&gt;構文も極めて少なくなるだろう。&lt;/p&gt;
&lt;p&gt;タイプ数(コード量)を減らすために、名前のない一時的な&lt;code&gt;shared_ptr&lt;/code&gt;を使ってはならない。
このことがなぜ危険かを理解するには、以下の例を考えると良い :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ok&lt;/code&gt;関数はこの指針に的確に従っているのに対し、&lt;code&gt;bad&lt;/code&gt;関数は一時的な&lt;code&gt;shared_ptr&lt;/code&gt;を使用しており、メモリリークが起きる可能性がある。
関数の引数が評価される順序が不定であるため、&lt;code&gt;new int(2)&lt;/code&gt;が最初に評価され、次に&lt;code&gt;g()&lt;/code&gt;が評価されるかもしれない。
その結果、もし&lt;code&gt;g&lt;/code&gt;が例外を送出すると、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタは呼び出されない。
この問題についてのより詳しい情報は&lt;a href=&#34;http://www.gotw.ca/gotw/056.htm&#34; target=&#34;_blank&#34;&gt;Herb Sutter&#39;s treatment (英文)&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;use_count_is_zero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#element_type&#34;&gt;element_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#destructor&#34;&gt;~shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws  &lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#indirection&#34;&gt;operator*&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#indirection&#34;&gt;operator-&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#get&#34;&gt;get&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#unique&#34;&gt;unique&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use_count&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#conversions&#34;&gt;unspecified-bool-type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#swap&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#comparison&#34;&gt;operator!=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#comparison&#34;&gt;operator&amp;lt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#swap&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#get_pointer&#34;&gt;get_pointer&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_static_cast&#34;&gt;shared_static_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_dynamic_cast&#34;&gt;shared_dynamic_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_polymorphic_cast&#34;&gt;shared_polymorphic_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_polymorphic_downcast&#34;&gt;shared_polymorphic_downcast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;shared_ptr&lt;/code&gt;のシグネチャに必要な条件を緩和し、補足的なデフォルトのテンプレートパラメータ(例えば、スレッドモデルを変換可能なパラメータなど)を使えるようにすることは、利便性の向上に繋がるかも知れない。&lt;/em&gt;
&lt;em&gt;これは、ODR違反の可能性を発見する一助になるだろう。&lt;/em&gt;
&lt;em&gt;(訳注:ODR(One-Definition Rule) C++ のプログラム中のあらゆる要素の本体は、その要素が使われる全ての翻訳単位で同じ内容で定義されなくてはならないという規則[&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/python/doc/v2/definitions.html&#34;&gt;参考(boost::pythonのドキュメント)&lt;/a&gt;])&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一方、&lt;code&gt;shared_ptr&lt;/code&gt;をtemplateテンプレートパラメータとして使うには、シグネチャの正確な合致が必要となる。&lt;/em&gt;
&lt;em&gt;メタプログラミングに精通している人は、template テンプレートパラメータを重要視しない。&lt;/em&gt;
&lt;em&gt;柔軟性が低すぎるからである。&lt;/em&gt;
&lt;em&gt;その代わり典型的に、&lt;code&gt;std::allocator::rebind-type&lt;/code&gt;を&#34;書き換える&#34;。]&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Members&#34;&gt;Members&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;element_type&#34;&gt;element_type&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;typedef T element_type;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;テンプレートパラメータ T の型を規定する&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructors&#34;&gt;コンストラクタ ( constructors )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;shared_ptr();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 ; 保持されるポインタは 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;use_count() == 1&lt;/code&gt;という事後条件は強すぎる。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;reset()&lt;/code&gt;の中でデフォルトコンストラクタが使われるため、例外を送出しない保証が重要である。&lt;/em&gt;
&lt;em&gt;しかし、現在の仕様では参照カウンタの割り当てが必要となっているため、例外を送出しないことが保証されなくなっている。&lt;/em&gt;
&lt;em&gt;そのため、この事後条件は将来のリリースで撤廃されるだろう。&lt;/em&gt;
&lt;em&gt;デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&lt;/code&gt;(とそこから作られた全てのコピー)の参照カウンタは、おそらく未定義になるだろう。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;例外を送出しないことを保証するには、二つの実装が考えられる。&lt;/em&gt;
&lt;em&gt;一つは、参照カウンタへのポインタとして0を保持する方法、もう一つは、デフォルトコンストラクタによって構築される全ての&lt;code&gt;shared_ptr&lt;/code&gt;に対して、静的に割り当てられた唯一の参照カウンタを利用する方法である。&lt;/em&gt;
&lt;em&gt;後者の方法は、スレッドセーフの問題と初期化の順序の問題のために、現在のヘッダのみの参照実装では実現が困難であるが仕様の為に実装方法が制限されるべきではない。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;将来のリリースでは、組み込みポインタとの一貫性を高めるため、&lt;code&gt;shared_ptr&lt;/code&gt;を数字の0から構築できるようになるかもしれない。&lt;/em&gt;
&lt;em&gt;今後、&lt;code&gt;0&lt;/code&gt;を&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;()&lt;/code&gt;の略記として使うことを可能にする、このコンストラクタが、潜在化されたままにされるかどうかは明かではない。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は&lt;code&gt;T *&lt;/code&gt;に変換可能でなくてはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;は完全な型でなくてはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete p&lt;/code&gt;の式が文法的に正しくなければならない; 未定義の振る舞いをしてはならない; 例外を送出してはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;p&lt;/code&gt;のコピーを保持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、&lt;code&gt;delete p&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;はC++の&lt;code&gt;new&lt;/code&gt;によって割り当てられたオブジェクトへのポインタか、0でなくてはならない。
  事後条件の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;が1というのは、&lt;code&gt;p&lt;/code&gt;が0の時でも同様である(値が0のポインタに対する&lt;code&gt;delete&lt;/code&gt;呼び出しが安全であるため )。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは、実際に渡されたポインタの型を記憶するためにテンプレートに変更された。&lt;/em&gt;
&lt;em&gt;デストラクタは同じポインタについて、本来の型で&lt;code&gt;delete&lt;/code&gt;を呼び出す。&lt;/em&gt;
&lt;em&gt;よって、&lt;code&gt;T&lt;/code&gt;が仮想デストラクタを持っていなくても、あるいは&lt;code&gt;void&lt;/code&gt;であっても、本来の型で&lt;code&gt;delete&lt;/code&gt;される。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;現在の実装では、&lt;code&gt;p&lt;/code&gt;が&lt;code&gt;counted_base *&lt;/code&gt;に変換可能なとき、&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;counted_base&lt;/code&gt;に埋め込まれた参照カウントを使う。&lt;/em&gt;
&lt;em&gt;これは、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;this&lt;/code&gt;のような生のポインタから構築する方法を提供する(実験的な)試みである。&lt;/em&gt;
&lt;em&gt;非メンバ関数&lt;code&gt;shared_from_this(q)&lt;/code&gt;は、&lt;code&gt;q&lt;/code&gt;が&lt;code&gt;counted_base const *&lt;/code&gt;へ変換可能なとき、その変換を行う。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;現在の実装で用意されている随意選択可能な割り込みカウントは、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;intrusive_ptr&lt;/code&gt;(割り込みカウント方式の実験的な汎用スマートポインタ)と一緒に利用できるようにしている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;別の実装の可能性としては、割り込みカウントではなくグローバルのポインタカウントマップを使う方法が考えられる。&lt;/em&gt;
&lt;em&gt;その場合、&lt;code&gt;shared_from_this&lt;/code&gt;の処理時間はO(1)ではなくなる。&lt;/em&gt;
&lt;em&gt;これは一部のユーザに影響を与えるが、この処理が行われることは希なため、パフォーマンスの問題は予想していない。&lt;/em&gt;
&lt;em&gt;グローバルのポインタカウントマップを管理するのは困難である; ポインタカウントマップは&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスが構築される前に初期化されている必要があり、初期化はスレッドセーフに行われなければならない。&lt;/em&gt;
&lt;em&gt;Windowsの動的ライブラリの形態に従えば、幾つかのカウントマップを存在させることができる。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;どの実装が使われるべきか、または仕様でその両方を許容するかどうかは、まだ明かではない。&lt;/em&gt;
&lt;em&gt;とは言え、スマートポインタを幅広く利用するプログラマにとって、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;this&lt;/code&gt;から構築できることは必要不可欠である。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は&lt;code&gt;T *&lt;/code&gt;に変換可能でなくてはならない。
  &lt;code&gt;D&lt;/code&gt;は&lt;strong&gt;CopyConstructible&lt;/strong&gt;(コピーコンストラクト可能)でなくてはならない。
  &lt;code&gt;D&lt;/code&gt;のコピーコンストラクタとデストラクタは例外を送出してはならない。
  &lt;code&gt;d(p)&lt;/code&gt;の式が文法的に正しくなければならない; 未定義の振る舞いをしてはならない; 例外を送出してはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;p&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;のコピーを保持する。
  (訳注: &lt;code&gt;d&lt;/code&gt;は&lt;code&gt;p&lt;/code&gt;の&lt;strong&gt;deallocator&lt;/strong&gt;(削除子)になる)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、&lt;code&gt;d(p)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;に指されているオブジェクトを削除する時になると、保持されている&lt;code&gt;p&lt;/code&gt;のコピーを1引数として、保持されている&lt;code&gt;d&lt;/code&gt;(のコピー)が実行される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[カスタム削除子は、&lt;code&gt;shared_ptr&lt;/code&gt;を返すファクトリ関数を利用可能にし、メモリ割り当ての方策をユーザから切り離す。&lt;/em&gt;
&lt;em&gt;削除子は型の属性ではないので、バイナリの互換性やソースを破壊せずに変更することができ、使用する側の再コンパイルを必要としない。&lt;/em&gt;
&lt;em&gt;例えば、静的に割り当てられたオブジェクトを指す&lt;code&gt;shared_ptr&lt;/code&gt;を返すには、&#34;何もしない(no-op)&#34; 削除子が有効である。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;カスタム削除子のサポートは大きなオーバーヘッドを生じない。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の他の特徴も削除子が保持されることを必要としている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;D&lt;/code&gt;のコピーコンストラクタが例外を送出しないと言う条件は、値渡しのために設定されている。&lt;/em&gt;
&lt;em&gt;もし、このコピーコンストラクタが例外を送出すると、ポインタ&lt;code&gt;p&lt;/code&gt;が指すメモリがリークする。&lt;/em&gt;
&lt;em&gt;この条件を取り除くためには、&lt;code&gt;d&lt;/code&gt;を(コンストの)参照渡しにする必要がある。&lt;/em&gt;
&lt;em&gt;参照渡しには幾つかの短所がある;&lt;/em&gt;
&lt;em&gt;(1) 値渡しならば、関数(関数への参照)を関数ポインタ(幾つかのコンパイラではできないかもしれないが、手動で実行できる必要がある)に変更するのが容易である。&lt;/em&gt;
&lt;em&gt;(2) 現在のところ、(標準に従えば)コンスト参照を関数に結びつけることはできない。&lt;/em&gt;
&lt;em&gt;オーバーロード関数群を備えることでこれらの制限を克服できるのだが、幾つかのコンパイラに存在する14.5.5.2 問題のために実現できない。&lt;/em&gt;
&lt;em&gt;14.5.5.2 問題とは、部分整列をサポートしていないコンパイラで、特殊化されたテンプレート関数がコンパイルできないというものである。&lt;/em&gt;
&lt;em&gt;(訳注: &#34;部分整列&#34; : テンプレート関数の特殊化の度合いによる利用優先順位付け)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;*前述された問題が解決されれば、これらの条件も取り除かれるだろう。] *&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;r&lt;/code&gt;が保持するポインタのコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 増加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&lt;/code&gt;は、コピーされると事後条件が緩和される。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、r`が管理するポインタのコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 増加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r.use_count() == 0&lt;/code&gt;の時、&lt;code&gt;use_count_is_zero&lt;/code&gt;を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは仕様の選択的な部分に位置する; &lt;code&gt;weak_ptr&lt;/code&gt;の存在に依存する。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;weak_ptr&lt;/code&gt;が使用されているかどうかに無頓着なユーザにとって、&lt;code&gt;weak_ptr&lt;/code&gt;のサポートが&lt;code&gt;shared_ptr&lt;/code&gt;にオーバーヘッドを生じさせているのは事実である。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一方、全ての参照カウントにとって、循環参照は深刻な問題である。&lt;/em&gt;
&lt;em&gt;ライブラリ内で解決方法が提供されないのは許容できない;&lt;/em&gt;
&lt;em&gt;もしユーザがウィークポインタ機構の再開発をせざるを得なくなった場合、安全な&lt;code&gt;weak_ptr&lt;/code&gt;の設計は簡単なことではなく、悪い結果をもたらす確率は相当大きい。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;機能の追加には努力を払う価値があるというのが私の意見である。&lt;/em&gt;
&lt;em&gt;その証拠として、この参照の実装にて&lt;code&gt;weak_ptr&lt;/code&gt;が提供されている。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;r.release()&lt;/code&gt;のコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は1。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは&lt;code&gt;auto_ptr&lt;/code&gt;を値渡しでなく参照で受け取り、一時的な&lt;code&gt;auto_ptr&lt;/code&gt;を受け取らない。&lt;/em&gt;
&lt;em&gt;これは、このコンストラクタが強力な保証を提供する設計にするためである。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ ( destructor )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~shared_ptr(); // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;もし&lt;strong&gt; *this &lt;/strong&gt;が唯一の所有者であるとき(&lt;code&gt;use_count() == 1&lt;/code&gt;)、保持しているポインタが指すオブジェクトを破棄する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;残存する全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;が 1 減少する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;assignment&#34;&gt;代入 ( assignment )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(r).swap(*this)&lt;/code&gt;と等価。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一時的なスマートポインタの構築と破棄による参照カウントの更新は未知の副作用を生じる可能性がある。
  この実装は、一時的なオブジェクトを構築しない方法を採ることによって、
  保証された作用を得られる。
  特に、この様な例では:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;err&#34;&gt;いずれの代入文も、何も作用しない&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;だろう。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[一部の上級者は、この&#34;as if&#34;規則(訳注: 演算子の再配置規則)をそのまま表現したような注意書きをくどいと感じるだろう。&lt;/em&gt;
&lt;em&gt;しかし、作用の説明に C++ のコードを用いられるとき、しばしばそれが必要な実装であるかのように誤って解釈されてしまうことがあると、経験的に示唆されている。&lt;/em&gt;
&lt;em&gt;さらに付け加えると、この部分で&#34;as if&#34;規則が適用されるかどうかは全くわからないが、可能な最適化について明示しておくことは好ましいと思われる。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;reset&#34;&gt;リセット ( reset )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void reset();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr().swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[&lt;code&gt;reset()&lt;/code&gt;は将来の実装で、例外を送出しない(nothrow)保証を提供するだろう。]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(p).swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(p, d).swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;indirection&#34;&gt;ポインタ偽装 ( indirection )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T &amp;amp; operator*() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが 0 でないこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが指すオブジェクトの参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;T * operator-&amp;gt;() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが 0 でないこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;get&#34;&gt;ポインタの取得 ( get )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T * get() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;unique&#34;&gt;一意性 ( unique )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bool unique() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_count() == 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique()&lt;/code&gt;は恐らく&lt;code&gt;use_count()&lt;/code&gt;よりも速い。 
  だが、もし&lt;code&gt;unique()&lt;/code&gt;を使って書き込み時コピー(copy on write)を実装しようとしているなら、保持されているポインタが0の時は&lt;code&gt;unique()&lt;/code&gt;の値を当てにしてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[将来のリリースでは、デフォルトコンストラクタで構築された&lt;code&gt;shared_ptr&lt;/code&gt;に対し、&lt;code&gt;unique()&lt;/code&gt;は不定の値を返すようになるだろう。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;use_count&#34;&gt;参照カウント ( use_count )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;long use_count() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持しているポインタを共有している&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトの数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_count()&lt;/code&gt;は必ずしも必要なものではない。
  デバッグや試験の為にだけ使用するべきで、製品のコードに使用するべきでない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;conversions&#34;&gt;変換 ( conversions )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;operator unspecified-bool-type () const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;がブール式として使用されたときに、&lt;code&gt;get() != 0&lt;/code&gt;と等価な明示的ではない値を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;この変換演算子は&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを、&lt;code&gt;if (p &amp;amp;&amp;amp; p-&amp;gt;valid()) {}&lt;/code&gt;のようなブール式の中で使えるようにするためのものである。&lt;/li&gt;
&lt;li&gt;実際に対象となる型はメンバ関数へのポインタなどであり、暗黙の型変換の落とし穴を回避するために用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このブールへの変換は単にコードをスマートにする物(syntactic sugar : 構文糖)というわけではない。&lt;/em&gt;
&lt;em&gt;この変換により&lt;code&gt;shared_dynamic_cast&lt;/code&gt;や&lt;code&gt;make_shared&lt;/code&gt;を使用するときに、&lt;code&gt;shared_ptr&lt;/code&gt;を条件式として利用することができる。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;swap&#34;&gt;交換 ( swap )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void swap(shared_ptr &amp;amp; b); // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;二つのスマートポインタの中身を交換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;functions&#34;&gt;Free Functions&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;comparison&#34;&gt;比較 ( comparison )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.get() == b.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.get() != b.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;は、C++ 標準の&lt;strong&gt;[lib.alg.sorting]&lt;/strong&gt;の25.3章で説明されている、完全な弱い順序づけのための明示的ではない値を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを連想コンテナのキーとして使えるようにするための演算子。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[一貫性と適合性の理由から、&lt;code&gt;std::less&lt;/code&gt;の特殊化版よりも、&lt;code&gt;operator&amp;lt;&lt;/code&gt;の方が好まれて使われている。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;std::less&lt;/code&gt;は&lt;code&gt;operator&amp;lt;&lt;/code&gt;の結果を返すことを必要とされ、他の幾つかの標準アルゴリズムも、属性が提供されないとき、比較のために&lt;code&gt;std::less&lt;/code&gt;ではなく&lt;code&gt;operator&amp;lt;&lt;/code&gt;を使う。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;std::pair&lt;/code&gt;のような複合オブジェクトの&lt;code&gt;operator&amp;lt;&lt;/code&gt;もまた、収容している子オブジェクトの&lt;code&gt;operator&amp;lt;&lt;/code&gt;に基づいて実装されている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;比較演算子の安全の確保は、設計によって省略された。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;free-swap&#34;&gt;交換 ( swap )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.swap(b)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap&lt;/code&gt;のインターフェースとの一貫性を図り、ジェネリックプログラミングを支援する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;swap&lt;/code&gt;は&lt;code&gt;shared_ptr&lt;/code&gt;と同じ名前空間で定義される。&lt;/em&gt;
&lt;em&gt;これは現在のところ、標準ライブラリから使用可能な&lt;code&gt;swap&lt;/code&gt;関数を提供するための唯一の正当な方法である。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;get_pointer&#34;&gt;ポインタを取得 ( get_pointer )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;汎用プログラミングを補助する機能を提供する。
  &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/code&gt;で使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_static_cast&#34;&gt;静的キャスト ( shared_static_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_static_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;は正しい形でなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;表面的には次の式と等価。
  &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(static_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt;
  これは、同じオブジェクトを2度削除しようとする事になるため、結局は未定義のふるまいとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_dynamic_cast&#34;&gt;動的キャスト ( shared_dynamic_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_dynamic_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;が非ゼロの値を返すとき、&lt;code&gt;r&lt;/code&gt;のコピーを保持し、その所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;それ以外の時は、デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、この関数は何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;表面的には次の式と等価。
  &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(dynamic_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt;
  これは、同じオブジェクトを2度削除しようとする事になるため、結局は未定義のふるまいとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_polymorphic_cast&#34;&gt;ポリモーフィックキャスト ( shared_polymorphic_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_polymorphic_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持しているポインタが変換できないとき、&lt;code&gt;std::bad_cast&lt;/code&gt;を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、この関数は何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_polymorphic_downcast&#34;&gt;ポリモーフィックダウンキャスト ( shared_polymorphic_downcast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_polymorphic_downcast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_downcast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_downcast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;example&#34;&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;サンプルプログラムの本体はshared_ptr_example.cppを参照のこと。
このプログラムは、&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトからなる&lt;code&gt;std::set&lt;/code&gt;と&lt;code&gt;std::vector&lt;/code&gt;を作成する。&lt;/p&gt;
&lt;p&gt;これらのコンテナに&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを格納した後、幾つかの&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトの参照カウントが2ではなく1になることに注意せよ。
これは、コンテナとして&lt;code&gt;std::multiset&lt;/code&gt;ではなく&lt;code&gt;std::set&lt;/code&gt;が使われているためである(&lt;code&gt;std::set&lt;/code&gt;は重複するキーを持つ要素を受け入れない)。
更に言うと、これらのオブジェクトの参照カウントは&lt;code&gt;push_back&lt;/code&gt;及び&lt;code&gt;insert&lt;/code&gt;のコンテナ操作をしている間は同じ数のままであるだろう。
更に複雑になると、コンテナ操作の際に様々な要因によって例外が発生する可能性もある。
スマートポインタを利用せずにこの様なメモリ管理や例外管理を行うことは、正に悪夢である。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Handle/Body&#34;&gt;Handle/Body&lt;/a&gt; Idiom&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の一般的な用法の一つに、handle/body表現(pimplとも呼ばれる)の実装がある。
handle/body表現とは、オブジェクト本体の実装を隠蔽する(ヘッダファイル中にさらけ出すことを回避する)ためのものである。&lt;/p&gt;
&lt;p&gt;サンプルプログラムshared_ptr_example2_test.cppは、ヘッダファイルshared_ptr_example2.hppをインクルードしている。
このヘッダファイルでは、不完全型のポインタを取る&lt;code&gt;shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;を利用して実装を隠蔽している。
完全型が必要となるメンバ関数のインスタンス化は、実装ファイルshared_ptr_example2.cpp内に記述されている。
ここでは明示的なデストラクタが必要とされていないことに注意せよ。
&lt;code&gt;~scoped_ptr&lt;/code&gt;と違い、&lt;code&gt;~shared_ptr&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;は完全型である必要はない。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;ThreadSafety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトはプリミティブ型と同等のスレッドセーフティを提供する。
&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスは、複数のスレッドから(const 処理のためのアクセスに限り)同時に&#34;読む&#34;事ができる。
また、異なる&lt;code&gt;shared_ptr&lt;/code&gt;を、複数のスレッドから(&lt;code&gt;operator=&lt;/code&gt;や&lt;code&gt;reset&lt;/code&gt;のようなスレッド動作を想定した操作のためのアクセスに限り)同時に&#34;変更する&#34;こともできる
(それらの&lt;code&gt;shared_ptr&lt;/code&gt;インスタンスが、コピーされた(同じ参照カウントを共有する)ものでも問題ない )。&lt;/p&gt;
&lt;p&gt;上記以外の同時アクセスは未定義のふるまいを引き起こす。&lt;/p&gt;
&lt;p&gt;例 Examples:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 1 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK, multiple reads are safe&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 2 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1912&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// writes p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK, writes p2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 3 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p3, writes p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// writes p3; undefined, simultaneous read/write&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 4 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p2, writes p3&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// p2 goes out of scope: undefined, the destructor is considered a &#34;write access&#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 5 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// undefined, multiple writes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;は、実装がスレッドをサポートしているかどうかを検出するために&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/config/config.html&#34;&gt;Boost.Config&lt;/a&gt;を使用している。
もしあなたのプログラムがシングルスレッドだとしても、マルチスレッドをサポートしているかどうかは&lt;em&gt;Boost.Config&lt;/em&gt;が自動的に検出する。
シングルスレッドのプロジェクトにおいて、スレッドセーフティの為のオーバーヘッドを取り除くためには、&lt;code&gt;#define BOOST_DISABLE_THREADS&lt;/code&gt;を定義する。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;FAQ&#34;&gt;FAQ ( Frequently Asked Questions )&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
共有ポインタにはそれぞれ異なる特長を持った幾つかの実装のバリエーションがあるが、なぜこのスマートポインタライブラリは単一の実装しか提供しないのか?
手元の仕事に最も適した実装を見つけるために、それぞれの型を試してみられることは有益なのではないだろうか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
標準的な所有権共有ポインタを提供することが、&lt;code&gt;shared_ptr&lt;/code&gt;の重要な目標の一つである。
通常、異なる共有ポインタは併用できないので、安定したライブラリインターフェースを提供するためには共有ポインタ型を一つにすることが大切である。
例えば、(ライブラリAで使われている)参照カウントポインタは、(ライブラリBで使われている)連結ポインタと所有権を共有できない。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は、拡張のためのポリシーや特性を与えるためのテンプレートパラメータを持たないのか。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
パラメータ化することは、ユーザにとって使いにくくなることに繋がる。
この&lt;code&gt;shared_ptr&lt;/code&gt;テンプレートは、拡張可能なパラメータを必要とせずに一般的なニーズを満たすように注意深く設計されている。
いつかは、高い拡張性を持ち、非常に使い易く、且つ誤用されにくいスマートポインタが開発されるかも知れない。
しかしそれまでは、&lt;code&gt;shared_ptr&lt;/code&gt;が幅広い用途に使用されるだろう。
(そのような興味深いポリシー思考のスマートポインタについて知りたければ、Andrei Alexandrescuの&lt;a href=&#34;http://cseng.aw.com/book/0,,0201704315,00.html&#34; target=&#34;_blank&#34;&gt;Modern C++ Design&lt;/a&gt;を読むべきである。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
私は納得できない。
複雑性を隠すためにデフォルトのパラメータを使うことができるはずだ。
もう一度尋ねるが、なぜポリシーを導入しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
テンプレートパラメータは型に影響を及ぼす。
この FAQ の最初の解答を参照せよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;の実装は連結リスト方式を使っていないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
連結リスト方式の実装は、余分なポインタのためのコストに見合うだけの利点が無いからである。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smarttests.html&#34;&gt;timings&lt;/a&gt;のページを参照せよ。
補足すると、連結リスト方式の実装でスレッドセーフティを実現するには、大きな犠牲を伴う。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;やその他のBoostスマートポインタは、&lt;code&gt;T *&lt;/code&gt;への自動的な型変換を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
自動的な型変換は、エラーに繋がる傾向が非常に高いと信じられている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;use_count()&lt;/code&gt;を提供しているのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
テストケースを書くための支援や、デバッグ出力の支援をするためである。
循環依存することが分かっているような複雑なプログラムにおいて、原本となる&lt;code&gt;shared_ptr&lt;/code&gt;の&lt;code&gt;use_count()&lt;/code&gt;が、バグを追跡するために有効である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は計算量の指定を明示しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
なぜなら、計算量の指定は、実装者に制限を付与し、&lt;code&gt;shared_ptr&lt;/code&gt;の利用者に対する見かけ上の利益もなしに仕様を複雑化する。
例えば、もしエラー検証機構の実装に厳密な計算量の指定が必要とされた場合、その実装には整合性が無くなってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;release()&lt;/code&gt;関数を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;unique()&lt;/code&gt;な時をのぞいて、所有権を譲渡できない。
なぜなら、いずれは所有権を共有している他の&lt;code&gt;shared_ptr&lt;/code&gt;が、そのオブジェクトを削除するはずだからである。&lt;/p&gt;
&lt;p&gt;考えてみよ:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// a.use_count() == b.use_count() == 2&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// このとき、pの所有権はどこにあるのだろう？aがrelease()してもなお、bはデストラクタの中でdeleteを呼ぶだろう。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は(あなたが大好きな機能をここに当てはめよ)を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
なぜなら、(あなたが愛する機能)は、参照カウント方式の実装でも、連結リスト方式の実装でも、あるいは他の特定の実装でも構わないという話だったからである。
故意に提供していないわけではない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Revised $Date: 2003/03/15 06:38:54 $&lt;/p&gt;
&lt;p&gt;Copyright 1999 Greg Colvin and Beman Dawes.
Copyright 2002 Darin Adler. 
Copyright 2002 Peter Dimov.
Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003
&lt;a href=&#34;mailto:lenoir@zeroscape.org&#34;&gt;Ryo Kobayashi&lt;/a&gt;,
&lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」
に提供されており、いかなる明示的、暗黙的保証も行わない。また、
いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Smart Pointers -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html"/>
      <id>986e356fc9a0031c8e53fc3bd202676919f08996:archive/boost_docs/libs/smart_ptr/smart_ptr.md</id>
      <updated>2016-04-04 23:02:42 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Smart Pointers&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;スマートポインタは動的に割り当てられた(ヒープ上の)オブジェクトへのポインタを保持するオブジェクトである。
これは C++ 組み込みポインタのように振舞うが、指されたオブジェクトを適当なタイミングで自動的に削除する。
スマートポインタは、動的に割り当てられたオブジェクトを、例外が発生しても確実に破棄したいようなときに特に役立つ。
また複数の所有者に共有されている、動的に割り当てられたオブジェクトを管理するのにも使える。&lt;/p&gt;
&lt;p&gt;概念的にはスマートポインタは指されたオブジェクトを所有しているように見える。
そしてオブジェクトがもはや必要なくなった時、責任を持って削除する。&lt;/p&gt;
&lt;p&gt;スマートポインタライブラリは5種類のスマートポインタクラステンプレートを提供する:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;スマートポインタ&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/scoped_ptr.html&#34;&gt;scoped_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/scoped_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/scoped_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトの所有権を独占する単純なスマートポインタ。コピー不可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/scoped_array.html&#34;&gt;scoped_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/scoped_array.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/scoped_array.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列を独占的に所有する単純なスマートポインタ。コピー不可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/shared_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複数のポインタでオブジェクトの所有権を共有するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_array.html&#34;&gt;shared_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/shared_array.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/shared_array.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複数のポインタで配列の所有権を共有するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/weak_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/weak_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;が所有するオブジェクトを、所有しないで利用するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらのテンプレートは&lt;code&gt;std::auto_ptr&lt;/code&gt;テンプレートを補完するように設計されている。&lt;/p&gt;
&lt;p&gt;これらは&#34;Resource Acquisition Is Initialization&#34;イディオム(訳注:RAIIイディオム、「資源獲得を初期化時に行う」ことによりオブジェクトの所有権の所在を明確にする)の典型例である。
このイディオムはBjarne Stroustrupの&#34;The C++ Programming Language&#34;第3版14.4章、資源管理の項で述べられている。&lt;/p&gt;
&lt;p&gt;テストプログラム&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/smart_ptr/test/smart_ptr_test.cpp&#34; target=&#34;_blank&#34;&gt;smart_ptr_test.cpp&lt;/a&gt;が正しい操作を確認するために提供されている。&lt;/p&gt;
&lt;p&gt;Boost Smart Pointerライブラリの古いバージョンについてのページ&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/compatibility.html&#34;&gt;compatibility&lt;/a&gt;は、以前のバージョンのスマートポインタの実装からの変更について述べている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/smart_ptr/smarttests.htm&#34; target=&#34;_blank&#34;&gt;smart pointer timings&lt;/a&gt;はパフォーマンスの問題についての興味である。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Common requirements&#34;&gt;Common Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これらのスマートポインタクラステンプレートはテンプレートパラメータ&lt;code&gt;T&lt;/code&gt;をもつ。
これはスマートポインタが指すオブジェクトの方を特定する。
スマートポインタテンプレートの振る舞いは、&lt;code&gt;T&lt;/code&gt;型のオブジェクトのデストラクタか&lt;strong&gt;delete演算子&lt;/strong&gt;が例外を投げるなら、未定義である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;はスマートポインタの宣言という点で、不完全な型かもしれない。
通常、&lt;code&gt;T&lt;/code&gt;はスマートポインタの実体化という点で完全な型である必要がある。
不完全な型の削除を含めて、この要求を脅かすこと全てを診断する(エラーとして扱う)ような実装が必要である。
&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/utility.html#checked_delete&#34;&gt;checked_delete&lt;/a&gt;&lt;/code&gt;関数テンプレートの記述を参考にせよ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;はこの制限を持たず、メンバ関数の多くは&lt;code&gt;T&lt;/code&gt;が完全な型であることを要求しないことに注意せよ。&lt;/p&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;への要求は、安全性を最大化しつつ、扱いやすいように、という格言の下で注意深く作られている。
この格言の中ではスマートポインタは、&lt;code&gt;T&lt;/code&gt;が不完全な型である翻訳単位の中で現れる。
これは実装とインタフェースを分離し、インタフェースが利用される翻訳単位から実装を隠す。
それぞれのスマートポインタについてのこのドキュメントでの例は、このようなスマートポインタの利用を説明している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;がデストラクト時に完全な型であることを要求するが、&lt;code&gt;shared_ptr&lt;/code&gt;はそうでないことに注意せよ。&lt;/p&gt;
&lt;h2&gt;Exception Safety&lt;/h2&gt;
&lt;p&gt;これらのスマートポインタクラスの多くの関数は、もし例外が投げられれば「効果なし」あるいは「これこれ以外は効果なし」として明示されている。
これはこれらのクラスの一つのオブジェクトが例外を投げた時、プログラムの状態全てが、結果的に例外を発生した関数が呼び出される前の状態と同じであることを意味している。
つまり発見しうる副作用がないことを保証している。
そうでない関数は決して例外を投げない。
関数が投げる唯一の例外は&lt;code&gt;std::bad_alloc&lt;/code&gt;である(&lt;code&gt;T&lt;/code&gt;が&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html#Common%20requirements&#34;&gt;common requirements&lt;/a&gt;を満たしていることを仮定する)。
&lt;code&gt;std::bad_alloc&lt;/code&gt;を投げる可能性があると、明示的にドキュメントに書かれている関数だけが、この例外を投げる。&lt;/p&gt;
&lt;h2&gt;Exception-specifications&lt;/h2&gt;
&lt;p&gt;Exception-specificationsは利用されない。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/more/lib_guide.html#Exception-specification&#34;&gt;exception-specification rationale&lt;/a&gt;を参考にせよ。&lt;/p&gt;
&lt;p&gt;全てのスマートポインタテンプレートは決して例外を投げないメンバ関数を持っている。
決して例外を投げないというのは、自分自身に例外を投げることも、例外を投げる他の関数を呼び出すこともないということである。
これらのメンバはコメント: &lt;code&gt;//never throws&lt;/code&gt;と明示されている。&lt;/p&gt;
&lt;p&gt;指されたオブジェクト型を破壊(destroy)する関数は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html#Common%20requirements&#34;&gt;common requirements&lt;/a&gt;によって例外を投げることを禁止されている。&lt;/p&gt;
&lt;h2&gt;History and Acknowledgements&lt;/h2&gt;
&lt;p&gt;2002 年 1 月。
Peter Dimov により 4 つのクラスの全てが作り直された。
機能の追加とバグの修正が行われ、それぞれのクラスが 4 つのヘッダファイルに分割された。
&lt;code&gt;weak_ptr&lt;/code&gt;が追加された。
変更箇所については&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/compatibility.html&#34;&gt;互換性&lt;/a&gt;のページを参照せよ。&lt;/p&gt;
&lt;p&gt;2001 年 5 月。
Vladimir Prusにより、デストラクト時における完全型の必要性が提案された。
Dave Abrahams、Greg Colvin、Beman Dawes、Rainer Deyke、Peter Dimov、John Maddock、Vladimir Prus、Shankar Sai等を含めて行われた
評議により、改善策が導き出された。&lt;/p&gt;
&lt;p&gt;1999 年 11 月。
Darin Adlerにより、共有スマートポインタ型の為の&lt;code&gt;operator ==&lt;/code&gt;、&lt;code&gt;operator !=&lt;/code&gt;、及び&lt;code&gt;std::swap&lt;/code&gt;、&lt;code&gt;std::less&lt;/code&gt;の特殊化版が提供された。&lt;/p&gt;
&lt;p&gt;1999 年 9 月。
Luis Coelho により、&lt;code&gt;shared_ptr::swap&lt;/code&gt;と&lt;code&gt;shared_array::swap&lt;/code&gt;が提供された。&lt;/p&gt;
&lt;p&gt;1999 年 4 月。
1999 年の 4 月、5 月に、Valetin BonnardとDavid Abrahamsにより非常に多くの改善に起因する提案が為される。&lt;/p&gt;
&lt;p&gt;1998 年 10 月。
1994 年にGreg Colvinにより、C++ 標準化委員会にクラス&lt;code&gt;auto_ptr&lt;/code&gt;とクラス&lt;code&gt;counted_ptr&lt;/code&gt;が提案された。
&lt;code&gt;counted_ptr&lt;/code&gt;は、現在の&lt;code&gt;scoped_ptr&lt;/code&gt;や&lt;code&gt;shared_ptr&lt;/code&gt;とほぼ同様のものである。
標準ドキュメントの94-168/N0555、例外安全スマートポインタ(Exception Safe Smart Pointers) の項に当たる。
委員会によりライブラリワーキンググループの勧告が否決された数少ない事例の一つとして&lt;code&gt;counted_ptr&lt;/code&gt;は棄却され、所有権の譲渡のセマンティクスは驚くべき事に&lt;code&gt;auto_ptr&lt;/code&gt;に追加された。&lt;/p&gt;
&lt;p&gt;1998 年の 10 月に行われた、Per Andersson、Matt Austern、Greg Colvin、Sean Corfield、Pete Becker、Nico Josuttis、Dietmar K?l、Nathan Myers、Chichiang Wan、Judy Ward等による会議に於いて、Beman Dawesにより当初のセマンティクスを&lt;code&gt;safe_ptr&lt;/code&gt;と&lt;code&gt;counted_ptr&lt;/code&gt;という名前で復活させることが提案された。
議論の中で、4 つのクラスの名前が決定され、&lt;code&gt;std::auto_ptr&lt;/code&gt;のインターフェースに厳密に準拠する必要はないという結論に達した。
そして、それぞれの関数のシグネチャとセマンティクスが決定された。&lt;/p&gt;
&lt;p&gt;その後の3ヶ月以上、&lt;code&gt;shared_ptr&lt;/code&gt;のために幾つかの実装が熟考され、&lt;a href=&#34;http://www.boost.org&#34; target=&#34;_blank&#34;&gt;boost.org&lt;/a&gt;のメーリングリストで議論された。
実装に関する議論では、参照カウントの実装方法について繰り返し論じられた。
参照カウントをスマートポインタに指されるオブジェクトに結びつけて管理する方法と、指されるオブジェクトとは別に管理する方法のいずれに於いても、参照カウントの値が保持されなければならない。
そのためには、それぞれの方法に対し大きく分けて二つの実装が考えられた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接的な分離カウンタ : &lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは、保持するオブジェクトへのポインタとカウンタへのポインタを持つ。&lt;/li&gt;
&lt;li&gt;間接的な分離カウンタ : &lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは、ヘルパオブジェクトへのポインタを持ち、そのヘルパオブジェクトが保持するオブジェクトへのポインタと
カウンタへのポインタを持つ。&lt;/li&gt;
&lt;li&gt;埋め込み結合カウンタ : カウンタを保持するオブジェクトのメンバにする。&lt;/li&gt;
&lt;li&gt;プレースメント結合カウンタ : &lt;code&gt;new&lt;/code&gt;演算子の操作でカウンタを結びつける。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each implementation technique has advantages and disadvantages. 
We went so far as to run various timings of the direct and indirect approaches, and found that at least on Intel Pentium chips there was very little measurable difference. 
Kevlin Henney provided a paper he wrote on &#34;Counted Body Techniques.&#34; Dietmar K?l suggested an elegant partial template specialization technique to allow users to choose which implementation they preferred, and that was also experimented with.&lt;/p&gt;
&lt;p&gt;But Greg Colvin and Jerry Schwarz argued that &#34;parameterization will discourage users&#34;, and in the end we choose to supply only the direct implementation.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 4 February 2002&lt;/p&gt;
&lt;p&gt;Copyright 1999 Greg Colvin and Beman Dawes. Copyright 2002 Darin Adler. 
Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;, &lt;a href=&#34;mailto:lenoir@zeroscape.org&#34;&gt;Ryo Kobayashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。
このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。
また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_ptr class template -- Fix Boost.SmartPtr Old Documents.</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html"/>
      <id>f12b6a21b75d9b0219fa99c0fb07e142235fb227:archive/boost_docs/libs/smart_ptr/shared_ptr.md</id>
      <updated>2016-04-04 23:00:02 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;shared_ptr class template&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#BestPractices&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Members&#34;&gt;Members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#functions&#34;&gt;Free Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#Handle/Body&#34;&gt;Handle/Body Idiom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#ThreadSafety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smarttests.html&#34;&gt;Smart Pointer Timings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;Introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;クラステンプレートは、C++の&lt;code&gt;new&lt;/code&gt;などによって動的に割り当てられたオブジェクトへのポインタを保持する。
&lt;code&gt;shared_ptr&lt;/code&gt;に指されたオブジェクトは、そのオブジェクトを指す最後の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄もしくはリセットされるときに削除されることが保証されている。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#example&#34;&gt;example&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;はC++標準ライブラリの&lt;strong&gt;CopyConstructible&lt;/strong&gt;(コピーコンストラクト可能)と&lt;strong&gt;Assignable&lt;/strong&gt;(代入可能)の条件を満たすので、標準ライブラリのコンテナで使うことができる。
また、標準ライブラリの連想コンテナで使うことができるように、比較演算子が提供されている。&lt;/p&gt;
&lt;p&gt;通常、&lt;code&gt;shared_ptr&lt;/code&gt;は動的に割り当てられた配列を正しく扱うことはできない。
動的に割り当てられた配列の扱い方については、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_array.html&#34;&gt;shared_array&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の実装には参照カウントが用いられているため、循環参照された&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスは正常に解放されない。
例えば、&lt;code&gt;main()&lt;/code&gt;が&lt;code&gt;A&lt;/code&gt;を指す&lt;code&gt;shared_ptr&lt;/code&gt;を保持しているときに、その&lt;code&gt;A&lt;/code&gt;が直接的または間接的に&lt;code&gt;A&lt;/code&gt;自身を指す&lt;code&gt;shared_ptr&lt;/code&gt;を持っていると、&lt;code&gt;A&lt;/code&gt;に対する&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;参照カウント&lt;/a&gt;は2となる。
最初の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄される際に、&lt;code&gt;A&lt;/code&gt;の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;参照カウント&lt;/a&gt;は 1 となり、そのインスタンスは破棄されずに残ってしまう。
循環参照を回避するには、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;を使う。&lt;/p&gt;
&lt;p&gt;このクラステンプレートには、指し示すオブジェクトの型を表すパラメータ&lt;code&gt;T&lt;/code&gt;を与える。
&lt;code&gt;shared_ptr&lt;/code&gt;とそのメンバ関数の多くは、&lt;code&gt;T&lt;/code&gt;に特別な条件を必要としない。
不完全型や&lt;code&gt;void&lt;/code&gt;も許されている。
&lt;code&gt;T&lt;/code&gt;に特別な条件を必要とするメンバ関数(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;constructors&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;)についてはこのドキュメント中で明示されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T *&lt;/code&gt;が暗黙の型変換により&lt;code&gt;U *&lt;/code&gt;に変換可能であれば、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;は暗黙に&lt;code&gt;shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;に変換できる。
特に、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;は暗黙の型変換により、&lt;code&gt;shared_ptr&amp;lt;T const&amp;gt;&lt;/code&gt;、&lt;code&gt;shared_ptr&amp;lt;U&amp;gt;&lt;/code&gt;、&lt;code&gt;shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;に変換できる。
(&lt;code&gt;U&lt;/code&gt;はアクセス可能な&lt;code&gt;T&lt;/code&gt;の基底型)&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;BestPractices&#34;&gt;Best Practices&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メモリリークの可能性をほとんど排除する為のシンプルな指針 : &lt;code&gt;new&lt;/code&gt;の結果を常に名前のあるスマートポインタに格納すること。
コードに含まれる全ての&lt;code&gt;new&lt;/code&gt;キーワードは、次の形にされるべきである :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(new Y);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;もちろん、上での&lt;code&gt;shared_ptr&lt;/code&gt;の代わりに他のスマートポインタを利用しても良い。
また、&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;Y&lt;/code&gt;が同じ型であったり、&lt;code&gt;Y&lt;/code&gt;のコンストラクタに引数が与えられても良い。&lt;/p&gt;
&lt;p&gt;この指針に従えば、自然と明示的な&lt;code&gt;delete&lt;/code&gt;が無くなり、&lt;em&gt;try/catch&lt;/em&gt;構文も極めて少なくなるだろう。&lt;/p&gt;
&lt;p&gt;タイプ数(コード量)を減らすために、名前のない一時的な&lt;code&gt;shared_ptr&lt;/code&gt;を使ってはならない。
このことがなぜ危険かを理解するには、以下の例を考えると良い :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ok&lt;/code&gt;関数はこの指針に的確に従っているのに対し、&lt;code&gt;bad&lt;/code&gt;関数は一時的な&lt;code&gt;shared_ptr&lt;/code&gt;を使用しており、メモリリークが起きる可能性がある。
関数の引数が評価される順序が不定であるため、&lt;code&gt;new int(2)&lt;/code&gt;が最初に評価され、次に&lt;code&gt;g()&lt;/code&gt;が評価されるかもしれない。
その結果、もし&lt;code&gt;g&lt;/code&gt;が例外を送出すると、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタは呼び出されない。
この問題についてのより詳しい情報は&lt;a href=&#34;http://www.gotw.ca/gotw/056.htm&#34; target=&#34;_blank&#34;&gt;Herb Sutter&#39;s treatment (英文)&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;use_count_is_zero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#element_type&#34;&gt;element_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#destructor&#34;&gt;~shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws  &lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#reset&#34;&gt;reset&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#indirection&#34;&gt;operator*&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#indirection&#34;&gt;operator-&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#get&#34;&gt;get&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#unique&#34;&gt;unique&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use_count&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#conversions&#34;&gt;unspecified-bool-type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#swap&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#comparison&#34;&gt;operator!=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#comparison&#34;&gt;operator&amp;lt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#swap&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#get_pointer&#34;&gt;get_pointer&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_static_cast&#34;&gt;shared_static_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_dynamic_cast&#34;&gt;shared_dynamic_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_polymorphic_cast&#34;&gt;shared_polymorphic_cast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#shared_polymorphic_downcast&#34;&gt;shared_polymorphic_downcast&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#constructors&#34;&gt;shared_ptr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;shared_ptr&lt;/code&gt;のシグネチャに必要な条件を緩和し、補足的なデフォルトのテンプレートパラメータ(例えば、スレッドモデルを変換可能なパラメータなど)を使えるようにすることは、利便性の向上に繋がるかも知れない。&lt;/em&gt;
&lt;em&gt;これは、ODR違反の可能性を発見する一助になるだろう。&lt;/em&gt;
&lt;em&gt;(訳注:ODR(One-Definition Rule) C++ のプログラム中のあらゆる要素の本体は、その要素が使われる全ての翻訳単位で同じ内容で定義されなくてはならないという規則[&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/python/doc/v2/definitions.html&#34;&gt;参考(boost::pythonのドキュメント)&lt;/a&gt;])&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一方、&lt;code&gt;shared_ptr&lt;/code&gt;をtemplateテンプレートパラメータとして使うには、シグネチャの正確な合致が必要となる。&lt;/em&gt;
&lt;em&gt;メタプログラミングに精通している人は、template テンプレートパラメータを重要視しない。&lt;/em&gt;
&lt;em&gt;柔軟性が低すぎるからである。&lt;/em&gt;
&lt;em&gt;その代わり典型的に、&lt;code&gt;std::allocator::rebind-type&lt;/code&gt;を&#34;書き換える&#34;。]&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Members&#34;&gt;Members&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;element_type&#34;&gt;element_type&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;typedef T element_type;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;テンプレートパラメータ T の型を規定する&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructors&#34;&gt;コンストラクタ ( constructors )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;shared_ptr();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 ; 保持されるポインタは 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;use_count() == 1&lt;/code&gt;という事後条件は強すぎる。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;reset()&lt;/code&gt;の中でデフォルトコンストラクタが使われるため、例外を送出しない保証が重要である。&lt;/em&gt;
&lt;em&gt;しかし、現在の仕様では参照カウンタの割り当てが必要となっているため、例外を送出しないことが保証されなくなっている。&lt;/em&gt;
&lt;em&gt;そのため、この事後条件は将来のリリースで撤廃されるだろう。&lt;/em&gt;
&lt;em&gt;デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&lt;/code&gt;(とそこから作られた全てのコピー)の参照カウンタは、おそらく未定義になるだろう。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;例外を送出しないことを保証するには、二つの実装が考えられる。&lt;/em&gt;
&lt;em&gt;一つは、参照カウンタへのポインタとして0を保持する方法、もう一つは、デフォルトコンストラクタによって構築される全ての&lt;code&gt;shared_ptr&lt;/code&gt;に対して、静的に割り当てられた唯一の参照カウンタを利用する方法である。&lt;/em&gt;
&lt;em&gt;後者の方法は、スレッドセーフの問題と初期化の順序の問題のために、現在のヘッダのみの参照実装では実現が困難であるが仕様の為に実装方法が制限されるべきではない。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;将来のリリースでは、組み込みポインタとの一貫性を高めるため、&lt;code&gt;shared_ptr&lt;/code&gt;を数字の0から構築できるようになるかもしれない。&lt;/em&gt;
&lt;em&gt;今後、&lt;code&gt;0&lt;/code&gt;を&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;()&lt;/code&gt;の略記として使うことを可能にする、このコンストラクタが、潜在化されたままにされるかどうかは明かではない。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は&lt;code&gt;T *&lt;/code&gt;に変換可能でなくてはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;は完全な型でなくてはならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete p&lt;/code&gt;の式が文法的に正しくなければならない; 未定義の振る舞いをしてはならない; 例外を送出してはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;p&lt;/code&gt;のコピーを保持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、&lt;code&gt;delete p&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;はC++の&lt;code&gt;new&lt;/code&gt;によって割り当てられたオブジェクトへのポインタか、0でなくてはならない。
  事後条件の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;が1というのは、&lt;code&gt;p&lt;/code&gt;が0の時でも同様である(値が0のポインタに対する&lt;code&gt;delete&lt;/code&gt;呼び出しが安全であるため )。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは、実際に渡されたポインタの型を記憶するためにテンプレートに変更された。&lt;/em&gt;
&lt;em&gt;デストラクタは同じポインタについて、本来の型で&lt;code&gt;delete&lt;/code&gt;を呼び出す。&lt;/em&gt;
&lt;em&gt;よって、&lt;code&gt;T&lt;/code&gt;が仮想デストラクタを持っていなくても、あるいは&lt;code&gt;void&lt;/code&gt;であっても、本来の型で&lt;code&gt;delete&lt;/code&gt;される。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;現在の実装では、&lt;code&gt;p&lt;/code&gt;が&lt;code&gt;counted_base *&lt;/code&gt;に変換可能なとき、&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;counted_base&lt;/code&gt;に埋め込まれた参照カウントを使う。&lt;/em&gt;
&lt;em&gt;これは、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;this&lt;/code&gt;のような生のポインタから構築する方法を提供する(実験的な)試みである。&lt;/em&gt;
&lt;em&gt;非メンバ関数&lt;code&gt;shared_from_this(q)&lt;/code&gt;は、&lt;code&gt;q&lt;/code&gt;が&lt;code&gt;counted_base const *&lt;/code&gt;へ変換可能なとき、その変換を行う。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;現在の実装で用意されている随意選択可能な割り込みカウントは、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;intrusive_ptr&lt;/code&gt;(割り込みカウント方式の実験的な汎用スマートポインタ)と一緒に利用できるようにしている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;別の実装の可能性としては、割り込みカウントではなくグローバルのポインタカウントマップを使う方法が考えられる。&lt;/em&gt;
&lt;em&gt;その場合、&lt;code&gt;shared_from_this&lt;/code&gt;の処理時間はO(1)ではなくなる。&lt;/em&gt;
&lt;em&gt;これは一部のユーザに影響を与えるが、この処理が行われることは希なため、パフォーマンスの問題は予想していない。&lt;/em&gt;
&lt;em&gt;グローバルのポインタカウントマップを管理するのは困難である; ポインタカウントマップは&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスが構築される前に初期化されている必要があり、初期化はスレッドセーフに行われなければならない。&lt;/em&gt;
&lt;em&gt;Windowsの動的ライブラリの形態に従えば、幾つかのカウントマップを存在させることができる。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;どの実装が使われるべきか、または仕様でその両方を許容するかどうかは、まだ明かではない。&lt;/em&gt;
&lt;em&gt;とは言え、スマートポインタを幅広く利用するプログラマにとって、&lt;code&gt;shared_ptr&lt;/code&gt;を&lt;code&gt;this&lt;/code&gt;から構築できることは必要不可欠である。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は&lt;code&gt;T *&lt;/code&gt;に変換可能でなくてはならない。
  &lt;code&gt;D&lt;/code&gt;は&lt;strong&gt;CopyConstructible&lt;/strong&gt;(コピーコンストラクト可能)でなくてはならない。
  &lt;code&gt;D&lt;/code&gt;のコピーコンストラクタとデストラクタは例外を送出してはならない。
  &lt;code&gt;d(p)&lt;/code&gt;の式が文法的に正しくなければならない; 未定義の振る舞いをしてはならない; 例外を送出してはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;p&lt;/code&gt;と&lt;code&gt;d&lt;/code&gt;のコピーを保持する。
  (訳注: &lt;code&gt;d&lt;/code&gt;は&lt;code&gt;p&lt;/code&gt;の&lt;strong&gt;deallocator&lt;/strong&gt;(削除子)になる)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、&lt;code&gt;d(p)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;に指されているオブジェクトを削除する時になると、保持されている&lt;code&gt;p&lt;/code&gt;のコピーを1引数として、保持されている&lt;code&gt;d&lt;/code&gt;(のコピー)が実行される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[カスタム削除子は、&lt;code&gt;shared_ptr&lt;/code&gt;を返すファクトリ関数を利用可能にし、メモリ割り当ての方策をユーザから切り離す。&lt;/em&gt;
&lt;em&gt;削除子は型の属性ではないので、バイナリの互換性やソースを破壊せずに変更することができ、使用する側の再コンパイルを必要としない。&lt;/em&gt;
&lt;em&gt;例えば、静的に割り当てられたオブジェクトを指す&lt;code&gt;shared_ptr&lt;/code&gt;を返すには、&#34;何もしない(no-op)&#34; 削除子が有効である。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;カスタム削除子のサポートは大きなオーバーヘッドを生じない。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の他の特徴も削除子が保持されることを必要としている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;D&lt;/code&gt;のコピーコンストラクタが例外を送出しないと言う条件は、値渡しのために設定されている。&lt;/em&gt;
&lt;em&gt;もし、このコピーコンストラクタが例外を送出すると、ポインタ&lt;code&gt;p&lt;/code&gt;が指すメモリがリークする。&lt;/em&gt;
&lt;em&gt;この条件を取り除くためには、&lt;code&gt;d&lt;/code&gt;を(コンストの)参照渡しにする必要がある。&lt;/em&gt;
&lt;em&gt;参照渡しには幾つかの短所がある;&lt;/em&gt;
&lt;em&gt;(1) 値渡しならば、関数(関数への参照)を関数ポインタ(幾つかのコンパイラではできないかもしれないが、手動で実行できる必要がある)に変更するのが容易である。&lt;/em&gt;
&lt;em&gt;(2) 現在のところ、(標準に従えば)コンスト参照を関数に結びつけることはできない。&lt;/em&gt;
&lt;em&gt;オーバーロード関数群を備えることでこれらの制限を克服できるのだが、幾つかのコンパイラに存在する14.5.5.2 問題のために実現できない。&lt;/em&gt;
&lt;em&gt;14.5.5.2 問題とは、部分整列をサポートしていないコンパイラで、特殊化されたテンプレート関数がコンパイルできないというものである。&lt;/em&gt;
&lt;em&gt;(訳注: &#34;部分整列&#34; : テンプレート関数の特殊化の度合いによる利用優先順位付け)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;*前述された問題が解決されれば、これらの条件も取り除かれるだろう。] *&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;r&lt;/code&gt;が保持するポインタのコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 増加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&lt;/code&gt;は、コピーされると事後条件が緩和される。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、r`が管理するポインタのコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は 1 増加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r.use_count() == 0&lt;/code&gt;の時、&lt;code&gt;use_count_is_zero&lt;/code&gt;を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは仕様の選択的な部分に位置する; &lt;code&gt;weak_ptr&lt;/code&gt;の存在に依存する。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;weak_ptr&lt;/code&gt;が使用されているかどうかに無頓着なユーザにとって、&lt;code&gt;weak_ptr&lt;/code&gt;のサポートが&lt;code&gt;shared_ptr&lt;/code&gt;にオーバーヘッドを生じさせているのは事実である。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一方、全ての参照カウントにとって、循環参照は深刻な問題である。&lt;/em&gt;
&lt;em&gt;ライブラリ内で解決方法が提供されないのは許容できない;&lt;/em&gt;
&lt;em&gt;もしユーザがウィークポインタ機構の再開発をせざるを得なくなった場合、安全な&lt;code&gt;weak_ptr&lt;/code&gt;の設計は簡単なことではなく、悪い結果をもたらす確率は相当大きい。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;機能の追加には努力を払う価値があるというのが私の意見である。&lt;/em&gt;
&lt;em&gt;その証拠として、この参照の実装にて&lt;code&gt;weak_ptr&lt;/code&gt;が提供されている。]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築し、&lt;code&gt;r.release()&lt;/code&gt;のコピーを保持したかのように作用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;は1。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、コンストラクタは何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このコンストラクタは&lt;code&gt;auto_ptr&lt;/code&gt;を値渡しでなく参照で受け取り、一時的な&lt;code&gt;auto_ptr&lt;/code&gt;を受け取らない。&lt;/em&gt;
&lt;em&gt;これは、このコンストラクタが強力な保証を提供する設計にするためである。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ ( destructor )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~shared_ptr(); // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;もし&lt;strong&gt; *this &lt;/strong&gt;が唯一の所有者であるとき(&lt;code&gt;use_count() == 1&lt;/code&gt;)、保持しているポインタが指すオブジェクトを破棄する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postconditions:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;残存する全てのコピーの&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html#use_count&#34;&gt;use count&lt;/a&gt;が 1 減少する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;assignment&#34;&gt;代入 ( assignment )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(r).swap(*this)&lt;/code&gt;と等価。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一時的なスマートポインタの構築と破棄による参照カウントの更新は未知の副作用を生じる可能性がある。
  この実装は、一時的なオブジェクトを構築しない方法を採ることによって、
  保証された作用を得られる。
  特に、この様な例では:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;err&#34;&gt;いずれの代入文も、何も作用しない&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;だろう。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[一部の上級者は、この&#34;as if&#34;規則(訳注: 演算子の再配置規則)をそのまま表現したような注意書きをくどいと感じるだろう。&lt;/em&gt;
&lt;em&gt;しかし、作用の説明に C++ のコードを用いられるとき、しばしばそれが必要な実装であるかのように誤って解釈されてしまうことがあると、経験的に示唆されている。&lt;/em&gt;
&lt;em&gt;さらに付け加えると、この部分で&#34;as if&#34;規則が適用されるかどうかは全くわからないが、可能な最適化について明示しておくことは好ましいと思われる。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;reset&#34;&gt;リセット ( reset )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void reset();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr().swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;[&lt;code&gt;reset()&lt;/code&gt;は将来の実装で、例外を送出しない(nothrow)保証を提供するだろう。]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(p).swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr(p, d).swap(*this)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;indirection&#34;&gt;ポインタ偽装 ( indirection )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T &amp;amp; operator*() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが 0 でないこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが指すオブジェクトの参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;T * operator-&amp;gt;() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタが 0 でないこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;get&#34;&gt;ポインタの取得 ( get )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T * get() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持されているポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;unique&#34;&gt;一意性 ( unique )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bool unique() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_count() == 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique()&lt;/code&gt;は恐らく&lt;code&gt;use_count()&lt;/code&gt;よりも速い。 
  だが、もし&lt;code&gt;unique()&lt;/code&gt;を使って書き込み時コピー(copy on write)を実装しようとしているなら、保持されているポインタが0の時は&lt;code&gt;unique()&lt;/code&gt;の値を当てにしてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[将来のリリースでは、デフォルトコンストラクタで構築された&lt;code&gt;shared_ptr&lt;/code&gt;に対し、&lt;code&gt;unique()&lt;/code&gt;は不定の値を返すようになるだろう。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;use_count&#34;&gt;参照カウント ( use_count )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;long use_count() const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持しているポインタを共有している&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトの数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_count()&lt;/code&gt;は必ずしも必要なものではない。
  デバッグや試験の為にだけ使用するべきで、製品のコードに使用するべきでない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;conversions&#34;&gt;変換 ( conversions )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;operator unspecified-bool-type () const; // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;がブール式として使用されたときに、&lt;code&gt;get() != 0&lt;/code&gt;と等価な明示的ではない値を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;この変換演算子は&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを、&lt;code&gt;if (p &amp;amp;&amp;amp; p-&amp;gt;valid()) {}&lt;/code&gt;のようなブール式の中で使えるようにするためのものである。&lt;/li&gt;
&lt;li&gt;実際に対象となる型はメンバ関数へのポインタなどであり、暗黙の型変換の落とし穴を回避するために用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[このブールへの変換は単にコードをスマートにする物(syntactic sugar : 構文糖)というわけではない。&lt;/em&gt;
&lt;em&gt;この変換により&lt;code&gt;shared_dynamic_cast&lt;/code&gt;や&lt;code&gt;make_shared&lt;/code&gt;を使用するときに、&lt;code&gt;shared_ptr&lt;/code&gt;を条件式として利用することができる。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;swap&#34;&gt;交換 ( swap )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;void swap(shared_ptr &amp;amp; b); // never throws&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;二つのスマートポインタの中身を交換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;functions&#34;&gt;Free Functions&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;comparison&#34;&gt;比較 ( comparison )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.get() == b.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.get() != b.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;は、C++ 標準の&lt;strong&gt;[lib.alg.sorting]&lt;/strong&gt;の25.3章で説明されている、完全な弱い順序づけのための明示的ではない値を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを連想コンテナのキーとして使えるようにするための演算子。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[一貫性と適合性の理由から、&lt;code&gt;std::less&lt;/code&gt;の特殊化版よりも、&lt;code&gt;operator&amp;lt;&lt;/code&gt;の方が好まれて使われている。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;std::less&lt;/code&gt;は&lt;code&gt;operator&amp;lt;&lt;/code&gt;の結果を返すことを必要とされ、他の幾つかの標準アルゴリズムも、属性が提供されないとき、比較のために&lt;code&gt;std::less&lt;/code&gt;ではなく&lt;code&gt;operator&amp;lt;&lt;/code&gt;を使う。&lt;/em&gt;
&lt;em&gt;&lt;code&gt;std::pair&lt;/code&gt;のような複合オブジェクトの&lt;code&gt;operator&amp;lt;&lt;/code&gt;もまた、収容している子オブジェクトの&lt;code&gt;operator&amp;lt;&lt;/code&gt;に基づいて実装されている。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;比較演算子の安全の確保は、設計によって省略された。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;free-swap&#34;&gt;交換 ( swap )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Effects:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.swap(b)&lt;/code&gt;と等価。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap&lt;/code&gt;のインターフェースとの一貫性を図り、ジェネリックプログラミングを支援する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;swap&lt;/code&gt;は&lt;code&gt;shared_ptr&lt;/code&gt;と同じ名前空間で定義される。&lt;/em&gt;
&lt;em&gt;これは現在のところ、標準ライブラリから使用可能な&lt;code&gt;swap&lt;/code&gt;関数を提供するための唯一の正当な方法である。]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;get_pointer&#34;&gt;ポインタを取得 ( get_pointer )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p.get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;汎用プログラミングを補助する機能を提供する。
  &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/code&gt;で使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_static_cast&#34;&gt;静的キャスト ( shared_static_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_static_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;は正しい形でなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;表面的には次の式と等価。
  &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(static_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt;
  これは、同じオブジェクトを2度削除しようとする事になるため、結局は未定義のふるまいとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_dynamic_cast&#34;&gt;動的キャスト ( shared_dynamic_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_dynamic_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;が非ゼロの値を返すとき、&lt;code&gt;r&lt;/code&gt;のコピーを保持し、その所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;li&gt;それ以外の時は、デフォルトコンストラクタにより構築された&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクトを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、この関数は何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;表面的には次の式と等価。
  &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(dynamic_cast&amp;lt;T*&amp;gt;(r.get()))&lt;/code&gt;
  これは、同じオブジェクトを2度削除しようとする事になるため、結局は未定義のふるまいとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_polymorphic_cast&#34;&gt;ポリモーフィックキャスト ( shared_polymorphic_cast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_polymorphic_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなくてはならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_cast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;保持しているポインタが変換できないとき、&lt;code&gt;std::bad_cast&lt;/code&gt;を送出する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception safety:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例外が発生すると、この関数は何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;shared_polymorphic_downcast&#34;&gt;ポリモーフィックダウンキャスト ( shared_polymorphic_downcast )&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_polymorphic_downcast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// never throws&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requires:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_downcast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;の式が正しい形であり、そのふるまいが定義されていなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polymorphic_downcast&amp;lt;T*&amp;gt;(r.get())&lt;/code&gt;のコピーを保持し、&lt;code&gt;r&lt;/code&gt;と所有権を共有する&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;オブジェクト。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throws:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;無し。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;example&#34;&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;サンプルプログラムの本体はshared_ptr_example.cppを参照のこと。
このプログラムは、&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトからなる&lt;code&gt;std::set&lt;/code&gt;と&lt;code&gt;std::vector&lt;/code&gt;を作成する。&lt;/p&gt;
&lt;p&gt;これらのコンテナに&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトを格納した後、幾つかの&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトの参照カウントが2ではなく1になることに注意せよ。
これは、コンテナとして&lt;code&gt;std::multiset&lt;/code&gt;ではなく&lt;code&gt;std::set&lt;/code&gt;が使われているためである(&lt;code&gt;std::set&lt;/code&gt;は重複するキーを持つ要素を受け入れない)。
更に言うと、これらのオブジェクトの参照カウントは&lt;code&gt;push_back&lt;/code&gt;及び&lt;code&gt;insert&lt;/code&gt;のコンテナ操作をしている間は同じ数のままであるだろう。
更に複雑になると、コンテナ操作の際に様々な要因によって例外が発生する可能性もある。
スマートポインタを利用せずにこの様なメモリ管理や例外管理を行うことは、正に悪夢である。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Handle/Body&#34;&gt;Handle/Body&lt;/a&gt; Idiom&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の一般的な用法の一つに、handle/body表現(pimplとも呼ばれる)の実装がある。
handle/body表現とは、オブジェクト本体の実装を隠蔽する(ヘッダファイル中にさらけ出すことを回避する)ためのものである。&lt;/p&gt;
&lt;p&gt;サンプルプログラムshared_ptr_example2_test.cppは、ヘッダファイルshared_ptr_example2.hppをインクルードしている。
このヘッダファイルでは、不完全型のポインタを取る&lt;code&gt;shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;を利用して実装を隠蔽している。
完全型が必要となるメンバ関数のインスタンス化は、実装ファイルshared_ptr_example2.cpp内に記述されている。
ここでは明示的なデストラクタが必要とされていないことに注意せよ。
&lt;code&gt;~scoped_ptr&lt;/code&gt;と違い、&lt;code&gt;~shared_ptr&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;は完全型である必要はない。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;ThreadSafety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトはプリミティブ型と同等のスレッドセーフティを提供する。
&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンスは、複数のスレッドから(const 処理のためのアクセスに限り)同時に&#34;読む&#34;事ができる。
また、異なる&lt;code&gt;shared_ptr&lt;/code&gt;を、複数のスレッドから(&lt;code&gt;operator=&lt;/code&gt;や&lt;code&gt;reset&lt;/code&gt;のようなスレッド動作を想定した操作のためのアクセスに限り)同時に&#34;変更する&#34;こともできる
(それらの&lt;code&gt;shared_ptr&lt;/code&gt;インスタンスが、コピーされた(同じ参照カウントを共有する)ものでも問題ない )。&lt;/p&gt;
&lt;p&gt;上記以外の同時アクセスは未定義のふるまいを引き起こす。&lt;/p&gt;
&lt;p&gt;例 Examples:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 1 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK, multiple reads are safe&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 2 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1912&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// writes p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK, writes p2&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 3 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p3, writes p&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// writes p3; undefined, simultaneous read/write&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 4 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// reads p2, writes p3&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// p2 goes out of scope: undefined, the destructor is considered a &#34;write access&#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//--- Example 5 ---&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// thread B&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// undefined, multiple writes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;は、実装がスレッドをサポートしているかどうかを検出するために&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/config/config.html&#34;&gt;Boost.Config&lt;/a&gt;を使用している。
もしあなたのプログラムがシングルスレッドだとしても、マルチスレッドをサポートしているかどうかは&lt;em&gt;Boost.Config&lt;/em&gt;が自動的に検出する。
シングルスレッドのプロジェクトにおいて、スレッドセーフティの為のオーバーヘッドを取り除くためには、&lt;code&gt;#define BOOST_DISABLE_THREADS&lt;/code&gt;を定義する。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;FAQ&#34;&gt;FAQ ( Frequently Asked Questions )&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
共有ポインタにはそれぞれ異なる特長を持った幾つかの実装のバリエーションがあるが、なぜこのスマートポインタライブラリは単一の実装しか提供しないのか?
手元の仕事に最も適した実装を見つけるために、それぞれの型を試してみられることは有益なのではないだろうか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
標準的な所有権共有ポインタを提供することが、&lt;code&gt;shared_ptr&lt;/code&gt;の重要な目標の一つである。
通常、異なる共有ポインタは併用できないので、安定したライブラリインターフェースを提供するためには共有ポインタ型を一つにすることが大切である。
例えば、(ライブラリAで使われている)参照カウントポインタは、(ライブラリBで使われている)連結ポインタと所有権を共有できない。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は、拡張のためのポリシーや特性を与えるためのテンプレートパラメータを持たないのか。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
パラメータ化することは、ユーザにとって使いにくくなることに繋がる。
この&lt;code&gt;shared_ptr&lt;/code&gt;テンプレートは、拡張可能なパラメータを必要とせずに一般的なニーズを満たすように注意深く設計されている。
いつかは、高い拡張性を持ち、非常に使い易く、且つ誤用されにくいスマートポインタが開発されるかも知れない。
しかしそれまでは、&lt;code&gt;shared_ptr&lt;/code&gt;が幅広い用途に使用されるだろう。
(そのような興味深いポリシー思考のスマートポインタについて知りたければ、Andrei Alexandrescuの&lt;a href=&#34;http://cseng.aw.com/book/0,,0201704315,00.html&#34; target=&#34;_blank&#34;&gt;Modern C++ Design&lt;/a&gt;を読むべきである。)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
私は納得できない。
複雑性を隠すためにデフォルトのパラメータを使うことができるはずだ。
もう一度尋ねるが、なぜポリシーを導入しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
テンプレートパラメータは型に影響を及ぼす。
この FAQ の最初の解答を参照せよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;の実装は連結リスト方式を使っていないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
連結リスト方式の実装は、余分なポインタのためのコストに見合うだけの利点が無いからである。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smarttests.html&#34;&gt;timings&lt;/a&gt;のページを参照せよ。
補足すると、連結リスト方式の実装でスレッドセーフティを実現するには、大きな犠牲を伴う。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;やその他のBoostスマートポインタは、&lt;code&gt;T *&lt;/code&gt;への自動的な型変換を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
自動的な型変換は、エラーに繋がる傾向が非常に高いと信じられている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;use_count()&lt;/code&gt;を提供しているのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
テストケースを書くための支援や、デバッグ出力の支援をするためである。
循環依存することが分かっているような複雑なプログラムにおいて、原本となる&lt;code&gt;shared_ptr&lt;/code&gt;の&lt;code&gt;use_count()&lt;/code&gt;が、バグを追跡するために有効である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は計算量の指定を明示しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
なぜなら、計算量の指定は、実装者に制限を付与し、&lt;code&gt;shared_ptr&lt;/code&gt;の利用者に対する見かけ上の利益もなしに仕様を複雑化する。
例えば、もしエラー検証機構の実装に厳密な計算量の指定が必要とされた場合、その実装には整合性が無くなってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;release()&lt;/code&gt;関数を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
&lt;code&gt;shared_ptr&lt;/code&gt;は&lt;code&gt;unique()&lt;/code&gt;な時をのぞいて、所有権を譲渡できない。
なぜなら、いずれは所有権を共有している他の&lt;code&gt;shared_ptr&lt;/code&gt;が、そのオブジェクトを削除するはずだからである。&lt;/p&gt;
&lt;p&gt;考えてみよ:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// a.use_count() == b.use_count() == 2&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// このとき、pの所有権はどこにあるのだろう？aがrelease()してもなお、bはデストラクタの中でdeleteを呼ぶだろう。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt;
なぜ&lt;code&gt;shared_ptr&lt;/code&gt;は(あなたが大好きな機能をここに当てはめよ)を提供しないのか？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;
なぜなら、(あなたが愛する機能)は、参照カウント方式の実装でも、連結リスト方式の実装でも、あるいは他の特定の実装でも構わないという話だったからである。
故意に提供していないわけではない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Revised $Date: 2003/03/15 06:38:54 $&lt;/p&gt;
&lt;p&gt;Copyright 1999 Greg Colvin and Beman Dawes.
Copyright 2002 Darin Adler. 
Copyright 2002 Peter Dimov.
Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003
&lt;a href=&#34;mailto:lenoir@zeroscape.org&#34;&gt;Ryo Kobayashi&lt;/a&gt;,
&lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」
に提供されており、いかなる明示的、暗黙的保証も行わない。また、
いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Smart Pointers -- Fix Boost.SmartPtr Old Documents.</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html"/>
      <id>f12b6a21b75d9b0219fa99c0fb07e142235fb227:archive/boost_docs/libs/smart_ptr/smart_ptr.md</id>
      <updated>2016-04-04 23:00:02 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Smart Pointers&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;スマートポインタは動的に割り当てられた(ヒープ上の)オブジェクトへのポインタを保持するオブジェクトである。
これは C++ 組み込みポインタのように振舞うが、指されたオブジェクトを適当なタイミングで自動的に削除する。
スマートポインタは、動的に割り当てられたオブジェクトを、例外が発生しても確実に破棄したいようなときに特に役立つ。
また複数の所有者に共有されている、動的に割り当てられたオブジェクトを管理するのにも使える。&lt;/p&gt;
&lt;p&gt;概念的にはスマートポインタは指されたオブジェクトを所有しているように見える。
そしてオブジェクトがもはや必要なくなった時、責任を持って削除する。&lt;/p&gt;
&lt;p&gt;スマートポインタライブラリは5種類のスマートポインタクラステンプレートを提供する:&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;スマートポインタ&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/scoped_ptr.html&#34;&gt;scoped_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/scoped_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/scoped_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトの所有権を独占する単純なスマートポインタ。コピー不可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/scoped_array.html&#34;&gt;scoped_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/scoped_array.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/scoped_array.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列を独占的に所有する単純なスマートポインタ。コピー不可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/shared_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複数のポインタでオブジェクトの所有権を共有するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/shared_array.html&#34;&gt;shared_array&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/shared_array.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/shared_array.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複数のポインタで配列の所有権を共有するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/weak_ptr.hpp&#34; target=&#34;_blank&#34;&gt;&amp;lt;boost/weak_ptr.hpp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;が所有するオブジェクトを、所有しないで利用するスマートポインタ。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらのテンプレートは&lt;code&gt;std::auto_ptr&lt;/code&gt;テンプレートを補完するように設計されている。&lt;/p&gt;
&lt;p&gt;これらは&#34;Resource Acquisition Is Initialization&#34;イディオム(訳注:RAIIイディオム、「資源獲得を初期化時に行う」ことによりオブジェクトの所有権の所在を明確にする)の典型例である。
このイディオムはBjarne Stroustrupの&#34;The C++ Programming Language&#34;第3版14.4章、資源管理の項で述べられている。&lt;/p&gt;
&lt;p&gt;テストプログラム&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/smart_ptr/test/smart_ptr_test.cpp&#34; target=&#34;_blank&#34;&gt;smart_ptr_test.cpp&lt;/a&gt;が正しい操作を確認するために提供されている。&lt;/p&gt;
&lt;p&gt;Boost Smart Pointerライブラリの古いバージョンについてのページ&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/compatibility.html&#34;&gt;compatibility&lt;/a&gt;は、以前のバージョンのスマートポインタの実装からの変更について述べている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/smart_ptr/smarttests.htm&#34; target=&#34;_blank&#34;&gt;smart pointer timings&lt;/a&gt;はパフォーマンスの問題についての興味である。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;Common requirements&#34;&gt;Common Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これらのスマートポインタクラステンプレートはテンプレートパラメータ&lt;code&gt;T&lt;/code&gt;をもつ。
これはスマートポインタが指すオブジェクトの方を特定する。
スマートポインタテンプレートの振る舞いは、&lt;code&gt;T&lt;/code&gt;型のオブジェクトのデストラクタか&lt;strong&gt;delete演算子&lt;/strong&gt;が例外を投げるなら、未定義である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;はスマートポインタの宣言という点で、不完全な型かもしれない。
通常、&lt;code&gt;T&lt;/code&gt;はスマートポインタの実体化という点で完全な型である必要がある。
不完全な型の削除を含めて、この要求を脅かすこと全てを診断する(エラーとして扱う)ような実装が必要である。
&lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/utility.html#checked_delete&#34;&gt;checked_delete&lt;/a&gt;&lt;/code&gt;関数テンプレートの記述を参考にせよ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;はこの制限を持たず、メンバ関数の多くは&lt;code&gt;T&lt;/code&gt;が完全な型であることを要求しないことに注意せよ。&lt;/p&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;への要求は、安全性を最大化しつつ、扱いやすいように、という格言の下で注意深く作られている。
この格言の中ではスマートポインタは、&lt;code&gt;T&lt;/code&gt;が不完全な型である翻訳単位の中で現れる。
これは実装とインタフェースを分離し、インタフェースが利用される翻訳単位から実装を隠す。
それぞれのスマートポインタについてのこのドキュメントでの例は、このようなスマートポインタの利用を説明している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;がデストラクト時に完全な型であることを要求するが、&lt;code&gt;shared_ptr&lt;/code&gt;はそうでないことに注意せよ。&lt;/p&gt;
&lt;h2&gt;Exception Safety&lt;/h2&gt;
&lt;p&gt;これらのスマートポインタクラスの多くの関数は、もし例外が投げられれば「効果なし」あるいは「これこれ以外は効果なし」として明示されている。
これはこれらのクラスの一つのオブジェクトが例外を投げた時、プログラムの状態全てが、結果的に例外を発生した関数が呼び出される前の状態と同じであることを意味している。
つまり発見しうる副作用がないことを保証している。
そうでない関数は決して例外を投げない。
関数が投げる唯一の例外は&lt;code&gt;std::bad_alloc&lt;/code&gt;である(&lt;code&gt;T&lt;/code&gt;が&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html#Common%20requirements&#34;&gt;common requirements&lt;/a&gt;を満たしていることを仮定する)。
&lt;code&gt;std::bad_alloc&lt;/code&gt;を投げる可能性があると、明示的にドキュメントに書かれている関数だけが、この例外を投げる。&lt;/p&gt;
&lt;h2&gt;Exception-specifications&lt;/h2&gt;
&lt;p&gt;Exception-specificationsは利用されない。
&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/more/lib_guide.html#Exception-specification&#34;&gt;exception-specification rationale&lt;/a&gt;を参考にせよ。&lt;/p&gt;
&lt;p&gt;全てのスマートポインタテンプレートは決して例外を投げないメンバ関数を持っている。
決して例外を投げないというのは、自分自身に例外を投げることも、例外を投げる他の関数を呼び出すこともないということである。
これらのメンバはコメント: &lt;code&gt;//never throws&lt;/code&gt;と明示されている。&lt;/p&gt;
&lt;p&gt;指されたオブジェクト型を破壊(destroy)する関数は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/smart_ptr.html#Common%20requirements&#34;&gt;common requirements&lt;/a&gt;によって例外を投げることを禁止されている。&lt;/p&gt;
&lt;h2&gt;History and Acknowledgements&lt;/h2&gt;
&lt;p&gt;2002 年 1 月。
Peter Dimov により 4 つのクラスの全てが作り直された。
機能の追加とバグの修正が行われ、それぞれのクラスが 4 つのヘッダファイルに分割された。
&lt;code&gt;weak_ptr&lt;/code&gt;が追加された。
変更箇所については&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/smart_ptr/compatibility.html&#34;&gt;互換性&lt;/a&gt;のページを参照せよ。&lt;/p&gt;
&lt;p&gt;2001 年 5 月。
Vladimir Prusにより、デストラクト時における完全型の必要性が提案された。
Dave Abrahams、Greg Colvin、Beman Dawes、Rainer Deyke、Peter Dimov、John Maddock、Vladimir Prus、Shankar Sai等を含めて行われた
評議により、改善策が導き出された。&lt;/p&gt;
&lt;p&gt;1999 年 11 月。
Darin Adlerにより、共有スマートポインタ型の為の&lt;code&gt;operator ==&lt;/code&gt;、&lt;code&gt;operator !=&lt;/code&gt;、及び&lt;code&gt;std::swap&lt;/code&gt;、&lt;code&gt;std::less&lt;/code&gt;の特殊化版が提供された。&lt;/p&gt;
&lt;p&gt;1999 年 9 月。
Luis Coelho により、&lt;code&gt;shared_ptr::swap&lt;/code&gt;と&lt;code&gt;shared_array::swap&lt;/code&gt;が提供された。&lt;/p&gt;
&lt;p&gt;1999 年 4 月。
1999 年の 4 月、5 月に、Valetin BonnardとDavid Abrahamsにより非常に多くの改善に起因する提案が為される。&lt;/p&gt;
&lt;p&gt;1998 年 10 月。
1994 年にGreg Colvinにより、C++ 標準化委員会にクラス&lt;code&gt;auto_ptr&lt;/code&gt;とクラス&lt;code&gt;counted_ptr&lt;/code&gt;が提案された。
&lt;code&gt;counted_ptr&lt;/code&gt;は、現在の&lt;code&gt;scoped_ptr&lt;/code&gt;や&lt;code&gt;shared_ptr&lt;/code&gt;とほぼ同様のものである。
標準ドキュメントの94-168/N0555、例外安全スマートポインタ(Exception Safe Smart Pointers) の項に当たる。
委員会によりライブラリワーキンググループの勧告が否決された数少ない事例の一つとして&lt;code&gt;counted_ptr&lt;/code&gt;は棄却され、所有権の譲渡のセマンティクスは驚くべき事に&lt;code&gt;auto_ptr&lt;/code&gt;に追加された。&lt;/p&gt;
&lt;p&gt;1998 年の 10 月に行われた、Per Andersson、Matt Austern、Greg Colvin、Sean Corfield、Pete Becker、Nico Josuttis、Dietmar K?l、Nathan Myers、Chichiang Wan、Judy Ward等による会議に於いて、Beman Dawesにより当初のセマンティクスを&lt;code&gt;safe_ptr&lt;/code&gt;と&lt;code&gt;counted_ptr&lt;/code&gt;という名前で復活させることが提案された。
議論の中で、4 つのクラスの名前が決定され、&lt;code&gt;std::auto_ptr&lt;/code&gt;のインターフェースに厳密に準拠する必要はないという結論に達した。
そして、それぞれの関数のシグネチャとセマンティクスが決定された。&lt;/p&gt;
&lt;p&gt;その後の3ヶ月以上、&lt;code&gt;shared_ptr&lt;/code&gt;のために幾つかの実装が熟考され、&lt;a href=&#34;http://www.boost.org&#34; target=&#34;_blank&#34;&gt;boost.org&lt;/a&gt;のメーリングリストで議論された。
実装に関する議論では、参照カウントの実装方法について繰り返し論じられた。
参照カウントをスマートポインタに指されるオブジェクトに結びつけて管理する方法と、指されるオブジェクトとは別に管理する方法のいずれに於いても、参照カウントの値が保持されなければならない。
そのためには、それぞれの方法に対し大きく分けて二つの実装が考えられた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接的な分離カウンタ : &lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは、保持するオブジェクトへのポインタとカウンタへのポインタを持つ。&lt;/li&gt;
&lt;li&gt;間接的な分離カウンタ : &lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは、ヘルパオブジェクトへのポインタを持ち、そのヘルパオブジェクトが保持するオブジェクトへのポインタと
カウンタへのポインタを持つ。&lt;/li&gt;
&lt;li&gt;埋め込み結合カウンタ : カウンタを保持するオブジェクトのメンバにする。&lt;/li&gt;
&lt;li&gt;プレースメント結合カウンタ : &lt;code&gt;new&lt;/code&gt;演算子の操作でカウンタを結びつける。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each implementation technique has advantages and disadvantages. 
We went so far as to run various timings of the direct and indirect approaches, and found that at least on Intel Pentium chips there was very little measurable difference. 
Kevlin Henney provided a paper he wrote on &#34;Counted Body Techniques.&#34; Dietmar K?l suggested an elegant partial template specialization technique to allow users to choose which implementation they preferred, and that was also experimented with.&lt;/p&gt;
&lt;p&gt;But Greg Colvin and Jerry Schwarz argued that &#34;parameterization will discourage users&#34;, and in the end we choose to supply only the direct implementation.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 4 February 2002&lt;/p&gt;
&lt;p&gt;Copyright 1999 Greg Colvin and Beman Dawes. Copyright 2002 Darin Adler. 
Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies.
This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;, &lt;a href=&#34;mailto:lenoir@zeroscape.org&#34;&gt;Ryo Kobayashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。
このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。
また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.61.0リリースノート -- Boost 1.61.0リリースノート : Testを追加(close #77)</title>
      <link href="http://boostjp.github.io/document/version/1_61_0.html"/>
      <id>31371b7670ae0bc6774891b542d4641b0917b3e9:document/version/1_61_0.md</id>
      <updated>2016-04-04 17:51:53 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.61.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_61_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_61_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/compute&#34; target=&#34;_blank&#34;&gt;Compute&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列及びGPU計算のためのライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/dll&#34; target=&#34;_blank&#34;&gt;DLL&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLLとDSOを容易に扱うためのライブラリ&lt;/li&gt;
&lt;li&gt;プラットフォームを横断た次の様な操作を提供する&lt;ul&gt;
&lt;li&gt;ライブラリをロードする&lt;/li&gt;
&lt;li&gt;任意の関数や変数をインポートする&lt;/li&gt;
&lt;li&gt;マングリングされた関数やシンボルへのエイリアスを作成する&lt;/li&gt;
&lt;li&gt;セクションやエクスポートされたシンボルを問い合わせる&lt;/li&gt;
&lt;li&gt;自身をロードしたり自身に問い合わせる&lt;/li&gt;
&lt;li&gt;エクスポートされたシンボルからプログラムやモジュールの場所を取得する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/hana&#34; target=&#34;_blank&#34;&gt;Hana&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降必須&lt;/li&gt;
&lt;li&gt;近代的なC++のメタプログラミングライブラリ&lt;/li&gt;
&lt;li&gt;高水準での異種型シーケンスへのアルゴリズムを提供する&lt;ul&gt;
&lt;li&gt;自然な構文での型レベルでの計算や、ユーザー定義型への操作可能にする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/metaparse&#34; target=&#34;_blank&#34;&gt;Metaparse&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11以降必須&lt;/li&gt;
&lt;li&gt;コンパイル時構文解析器をコンパイル時に構築するためのライブラリ&lt;ul&gt;
&lt;li&gt;Spirit似ているが、Spiritがコンパイル時にパーサを構築し実行時にパースするのに対し、Metaparseはコンパイル時に構築、パースを実施する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テストの追加とメンテナンスの為の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、以下のコンストラクタを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last, const allocator_type&amp;amp; a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、基本クラスのオブジェクトを受け取るコンストラクタと代入演算子を追加。これによって異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができるようになる：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11820&#34; target=&#34;_blank&#34;&gt;Trac #11820&lt;/a&gt; &lt;code&gt;map::operator[ ]&lt;/code&gt;を使用した際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11856&#34; target=&#34;_blank&#34;&gt;Trac #11856&lt;/a&gt; typedef名がクラス名と衝突していたために、&lt;code&gt;pool_resource&lt;/code&gt;でのコンストラクタ呼び出しがコンパイルエラーになっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11866&#34; target=&#34;_blank&#34;&gt;Trac #11866&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;が範囲をとるコンストラクタを持っていなかったので追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11867&#34; target=&#34;_blank&#34;&gt;Trac #11867&lt;/a&gt; 異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができなかったため、変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11912&#34; target=&#34;_blank&#34;&gt;Trac #11912&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;のexpand_backwardsで、同じソースをムーブする可能性があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11957&#34; target=&#34;_blank&#34;&gt;Trac #11957&lt;/a&gt; &lt;code&gt;static_vector::max_size()&lt;/code&gt;がキャパシティより大きかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12014&#34; target=&#34;_blank&#34;&gt;Trac #12014&lt;/a&gt; &lt;code&gt;set::insert()&lt;/code&gt;で、&lt;code&gt;const_iterator&lt;/code&gt;の範囲を挿入しようとすると、オーバーロード解決があいまいでコンパイルエラーとなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;throw_exception()&lt;/code&gt;で&lt;code&gt;std::string&lt;/code&gt;を使用できるよう、インクルードを追加。標準の&lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt;をインクルードするだけでは、&lt;code&gt;std::string&lt;/code&gt;は前方宣言しかされない場合があるため。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11246&#34; target=&#34;_blank&#34;&gt;#11246&lt;/a&gt; 未定義のシンボルがあったためMinGWでビルドできなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11365&#34; target=&#34;_blank&#34;&gt;#11365&lt;/a&gt; VS2015RCにおいて、execution_context.hppでエラーが発生していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11652&#34; target=&#34;_blank&#34;&gt;#11652&lt;/a&gt; &lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;を確認するようにした&lt;/li&gt;
&lt;li&gt;fcontext_t: 公開APIではなくなった&lt;/li&gt;
&lt;li&gt;execution_context: 仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;li&gt;execution_context: 新しい実装を追加した&lt;ul&gt;
&lt;li&gt;型安全にデータを転送可能&lt;/li&gt;
&lt;li&gt;スタックの先頭で関数が実行される&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;静的メンバの&lt;code&gt;current()&lt;/code&gt;は削除された&lt;/li&gt;
&lt;li&gt;訳者注: これまでの実装(version 1)と新しい実装(version 2)はクラス名が同一だが互換は無い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_IS_EMPTY&lt;/code&gt;を使用したことによる、MSVC8での大量の警告を低減 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11157&#34; target=&#34;_blank&#34;&gt;#11157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コンテナの変換コンストラクタとSFINAEでコンパイルエラーが発生する場合があったのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11766&#34; target=&#34;_blank&#34;&gt;#11766&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11版の&lt;code&gt;fusion::vector&lt;/code&gt;から末尾&lt;code&gt;fusion::void_&lt;/code&gt;の特別扱いを削除した &lt;a href=&#34;https://github.com/boostorg/fusion/pull/120&#34; target=&#34;_blank&#34;&gt;pull request 120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;オーバーレイ : コロケーション(co-location)な交差点のハンドリングを強化。&lt;code&gt;handle_tangencies&lt;/code&gt;を&lt;code&gt;clusters&lt;/code&gt;で置き換えた。colocated turnによる多くのバグを修正&lt;/li&gt;
&lt;li&gt;sphericalとgeographicの座標系サポートを追加・修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11637&#34; target=&#34;_blank&#34;&gt;#11637&lt;/a&gt; 未使用パラメータの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11917&#34; target=&#34;_blank&#34;&gt;#11917&lt;/a&gt; Andoyer距離戦略(geographic distanceのデフォルト)が対蹠点について&lt;code&gt;0&lt;/code&gt;を返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11928&#34; target=&#34;_blank&#34;&gt;#11928&lt;/a&gt; 測量面積戦略(surveyor area strategy)の精度を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11966&#34; target=&#34;_blank&#34;&gt;#11966&lt;/a&gt; &lt;code&gt;svg()&lt;/code&gt;関数が、boxと非&lt;code&gt;int&lt;/code&gt;の座標系でコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11789&#34; target=&#34;_blank&#34;&gt;#11789&lt;/a&gt; &lt;code&gt;spherical_equatorial&lt;/code&gt;座標系の集合演算がアサーション失敗もしくは不正な結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12000&#34; target=&#34;_blank&#34;&gt;#12000&lt;/a&gt; &lt;code&gt;mask_handler&lt;/code&gt;関係の、参照を受け取る未使用のコンストラクタを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SegmentがBoxの面に平行である場合、SegmentとBoxに対する&lt;code&gt;intersects&lt;/code&gt;／&lt;code&gt;disjoint&lt;/code&gt;が不正な結果となる問題を修正&lt;/li&gt;
&lt;li&gt;非cartesian座標系での、エッジケースのPoint/Areal関係の操作を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11832&#34; target=&#34;_blank&#34;&gt;Boost Trac #11832&lt;/a&gt; clang-clでコンパイルエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11865&#34; target=&#34;_blank&#34;&gt;Boost Trac #11865&lt;/a&gt; Clang 3.6 (C++11/C++14)において、&lt;code&gt;intrusive::list&lt;/code&gt;の明示的コンストラクタがエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11992&#34; target=&#34;_blank&#34;&gt;Boost Trac #11992&lt;/a&gt; &lt;code&gt;key_type&lt;/code&gt;を取る&lt;code&gt;insert_check&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/19&#34; target=&#34;_blank&#34;&gt;GitHub Pull #19&lt;/a&gt; ebo_functor_holder: コピーコンストラクタのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub Pull #23&lt;/a&gt; MinGWのヘッダーインクルードでの、大文字・小文字を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Studio関連の問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートと特殊化は廃止予定となった&lt;ul&gt;
&lt;li&gt;ユーザは&lt;code&gt;boost::basic_string_view&lt;/code&gt;へと移行することが推奨される&lt;/li&gt;
&lt;li&gt;なお&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートは将来的に削除される予定である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ターゲットディレクトリ内に保存されるログファイル数に上限を設定できるようになった. Erich Keaneのパッチによる (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8746&#34; target=&#34;_blank&#34;&gt;8746&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Windows CEでのいくつものコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;Solarisでのコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;MSVC-10がいくつかの場合でフォーマッタに関して正しくないコードを生成していたので回避策を追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12025&#34; target=&#34;_blank&#34;&gt;#12025&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;実験的&lt;/em&gt;: バッファを必要としない、漸近的に最適なマージとソートのアルゴリズム(&lt;code&gt;adaptive_merge&lt;/code&gt; と &lt;code&gt;adaptive_sort&lt;/code&gt;)を実装&lt;/li&gt;
&lt;li&gt;修正したバグ&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11758&#34; target=&#34;_blank&#34;&gt;Trac #11758&lt;/a&gt; 右辺値参照が有効な環境において、&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;がアクセス修飾子をprivateにリセットしていなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::optional&lt;/code&gt;を参照パラメータで特殊化した。それにあたって、いくつかの問題を修正した：&lt;ul&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;に対する&lt;code&gt;sizeof&lt;/code&gt;がポインタのものとなるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;をコピーして接続した際の、いくつかのバグを修正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラで、正しくない参照の束縛によって発生していた全ての実行時バグが、コンパイルエラーとして検出できるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;を&lt;code&gt;swap&lt;/code&gt;できるようにした。これはポインタの浅いswapであり、元となるオブジェクトには影響がない&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;が抽象型に対して動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入れ子型のドキュメントを記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5193&#34; target=&#34;_blank&#34;&gt;Trac #5193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;完全転送のコンストラクタをSFINAEフレンドリーになるよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12002&#34; target=&#34;_blank&#34;&gt;Trac #12002&lt;/a&gt;)。ただし、これはC++11の&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;を正しく実装した新しめのプラットフォームでのみ機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10445&#34; target=&#34;_blank&#34;&gt;Trac #10445&lt;/a&gt; 右辺値を&lt;code&gt;optional&amp;lt;const T&amp;amp;&amp;gt;&lt;/code&gt;に代入するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ駆動テストケースに、フィクスチャと可変引数のサポートを追加&lt;/li&gt;
&lt;li&gt;データ駆動テストケースのサンプルに、ムーブセマンティクスの例を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6767&#34; target=&#34;_blank&#34;&gt;#6767&lt;/a&gt; 浮動小数点数例外の関数を呼び出す際に、明示的にグローバル名前空間スコープ &lt;code&gt;::&lt;/code&gt; を指定すると、一部の環境でコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8905&#34; target=&#34;_blank&#34;&gt;#8905&lt;/a&gt; boost/test/impl/debug.ipp : &lt;code&gt;WaitForSingleObject&lt;/code&gt;の戻り値を無視していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9443&#34; target=&#34;_blank&#34;&gt;#9443&lt;/a&gt; ランダムな順序でのテスト実行において、内部で使用している&lt;code&gt;std::random_shuffle()&lt;/code&gt;が指定されたシードを無視していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11854&#34; target=&#34;_blank&#34;&gt;#11854&lt;/a&gt; &lt;code&gt;BOOST_DATA_TEST_CASE&lt;/code&gt;でフィクスチャのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11887&#34; target=&#34;_blank&#34;&gt;#11887&lt;/a&gt; &lt;code&gt;BOOST_TEST(3u == (std::max)(0u, 3u))&lt;/code&gt;がテスト失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11889&#34; target=&#34;_blank&#34;&gt;#11889&lt;/a&gt; &lt;code&gt;BOOST_DATA_TEST_CASE&lt;/code&gt;に対してテストデータとして4次元以上の格子を使用するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11983&#34; target=&#34;_blank&#34;&gt;#11983&lt;/a&gt; XML形式でのレポートに、エスケープされていない文字が含まれていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang ,C++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.4, 4.8.5, 4.9.3, 5.3.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1, 5.3.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.4.1, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.8.5, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang, c++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.5, 4.9.3, 5.3.0, 5.3.1, 6.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;G++: 5.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;GCC, cygwin: 5.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3, 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.41, 3.7.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.5, 5.3.0, 6.0&lt;/li&gt;
&lt;li&gt;GCC: 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.61.0リリースノート -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/document/version/1_61_0.html"/>
      <id>879c5f123cde53eb05e3bfb487a3a30a045a37b0:document/version/1_61_0.md</id>
      <updated>2016-04-04 17:49:57 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.61.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_61_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_61_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/compute&#34; target=&#34;_blank&#34;&gt;Compute&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列及びGPU計算のためのライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/dll&#34; target=&#34;_blank&#34;&gt;DLL&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLLとDSOを容易に扱うためのライブラリ&lt;/li&gt;
&lt;li&gt;プラットフォームを横断た次の様な操作を提供する&lt;ul&gt;
&lt;li&gt;ライブラリをロードする&lt;/li&gt;
&lt;li&gt;任意の関数や変数をインポートする&lt;/li&gt;
&lt;li&gt;マングリングされた関数やシンボルへのエイリアスを作成する&lt;/li&gt;
&lt;li&gt;セクションやエクスポートされたシンボルを問い合わせる&lt;/li&gt;
&lt;li&gt;自身をロードしたり自身に問い合わせる&lt;/li&gt;
&lt;li&gt;エクスポートされたシンボルからプログラムやモジュールの場所を取得する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/hana&#34; target=&#34;_blank&#34;&gt;Hana&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降必須&lt;/li&gt;
&lt;li&gt;近代的なC++のメタプログラミングライブラリ&lt;/li&gt;
&lt;li&gt;高水準での異種型シーケンスへのアルゴリズムを提供する&lt;ul&gt;
&lt;li&gt;自然な構文での型レベルでの計算や、ユーザー定義型への操作可能にする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/metaparse&#34; target=&#34;_blank&#34;&gt;Metaparse&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11以降必須&lt;/li&gt;
&lt;li&gt;コンパイル時構文解析器をコンパイル時に構築するためのライブラリ&lt;ul&gt;
&lt;li&gt;Spirit似ているが、Spiritがコンパイル時にパーサを構築し実行時にパースするのに対し、Metaparseはコンパイル時に構築、パースを実施する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テストの追加とメンテナンスの為の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、以下のコンストラクタを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last, const allocator_type&amp;amp; a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、基本クラスのオブジェクトを受け取るコンストラクタと代入演算子を追加。これによって異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができるようになる：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11820&#34; target=&#34;_blank&#34;&gt;Trac #11820&lt;/a&gt; &lt;code&gt;map::operator[ ]&lt;/code&gt;を使用した際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11856&#34; target=&#34;_blank&#34;&gt;Trac #11856&lt;/a&gt; typedef名がクラス名と衝突していたために、&lt;code&gt;pool_resource&lt;/code&gt;でのコンストラクタ呼び出しがコンパイルエラーになっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11866&#34; target=&#34;_blank&#34;&gt;Trac #11866&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;が範囲をとるコンストラクタを持っていなかったので追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11867&#34; target=&#34;_blank&#34;&gt;Trac #11867&lt;/a&gt; 異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができなかったため、変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11912&#34; target=&#34;_blank&#34;&gt;Trac #11912&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;のexpand_backwardsで、同じソースをムーブする可能性があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11957&#34; target=&#34;_blank&#34;&gt;Trac #11957&lt;/a&gt; &lt;code&gt;static_vector::max_size()&lt;/code&gt;がキャパシティより大きかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12014&#34; target=&#34;_blank&#34;&gt;Trac #12014&lt;/a&gt; &lt;code&gt;set::insert()&lt;/code&gt;で、&lt;code&gt;const_iterator&lt;/code&gt;の範囲を挿入しようとすると、オーバーロード解決があいまいでコンパイルエラーとなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;throw_exception()&lt;/code&gt;で&lt;code&gt;std::string&lt;/code&gt;を使用できるよう、インクルードを追加。標準の&lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt;をインクルードするだけでは、&lt;code&gt;std::string&lt;/code&gt;は前方宣言しかされない場合があるため。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11246&#34; target=&#34;_blank&#34;&gt;#11246&lt;/a&gt; 未定義のシンボルがあったためMinGWでビルドできなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11365&#34; target=&#34;_blank&#34;&gt;#11365&lt;/a&gt; VS2015RCにおいて、execution_context.hppでエラーが発生していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11652&#34; target=&#34;_blank&#34;&gt;#11652&lt;/a&gt; &lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;を確認するようにした&lt;/li&gt;
&lt;li&gt;fcontext_t: 公開APIではなくなった&lt;/li&gt;
&lt;li&gt;execution_context: 仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;li&gt;execution_context: 新しい実装を追加した&lt;ul&gt;
&lt;li&gt;型安全にデータを転送可能&lt;/li&gt;
&lt;li&gt;スタックの先頭で関数が実行される&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;静的メンバの&lt;code&gt;current()&lt;/code&gt;は削除された&lt;/li&gt;
&lt;li&gt;訳者注: これまでの実装(version 1)と新しい実装(version 2)はクラス名が同一だが互換は無い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_IS_EMPTY&lt;/code&gt;を使用したことによる、MSVC8での大量の警告を低減 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11157&#34; target=&#34;_blank&#34;&gt;#11157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コンテナの変換コンストラクタとSFINAEでコンパイルエラーが発生する場合があったのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11766&#34; target=&#34;_blank&#34;&gt;#11766&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11版の&lt;code&gt;fusion::vector&lt;/code&gt;から末尾&lt;code&gt;fusion::void_&lt;/code&gt;の特別扱いを削除した &lt;a href=&#34;https://github.com/boostorg/fusion/pull/120&#34; target=&#34;_blank&#34;&gt;pull request 120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;オーバーレイ : コロケーション(co-location)な交差点のハンドリングを強化。&lt;code&gt;handle_tangencies&lt;/code&gt;を&lt;code&gt;clusters&lt;/code&gt;で置き換えた。colocated turnによる多くのバグを修正&lt;/li&gt;
&lt;li&gt;sphericalとgeographicの座標系サポートを追加・修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11637&#34; target=&#34;_blank&#34;&gt;#11637&lt;/a&gt; 未使用パラメータの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11917&#34; target=&#34;_blank&#34;&gt;#11917&lt;/a&gt; Andoyer距離戦略(geographic distanceのデフォルト)が対蹠点について&lt;code&gt;0&lt;/code&gt;を返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11928&#34; target=&#34;_blank&#34;&gt;#11928&lt;/a&gt; 測量面積戦略(surveyor area strategy)の精度を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11966&#34; target=&#34;_blank&#34;&gt;#11966&lt;/a&gt; &lt;code&gt;svg()&lt;/code&gt;関数が、boxと非&lt;code&gt;int&lt;/code&gt;の座標系でコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11789&#34; target=&#34;_blank&#34;&gt;#11789&lt;/a&gt; &lt;code&gt;spherical_equatorial&lt;/code&gt;座標系の集合演算がアサーション失敗もしくは不正な結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12000&#34; target=&#34;_blank&#34;&gt;#12000&lt;/a&gt; &lt;code&gt;mask_handler&lt;/code&gt;関係の、参照を受け取る未使用のコンストラクタを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SegmentがBoxの面に平行である場合、SegmentとBoxに対する&lt;code&gt;intersects&lt;/code&gt;／&lt;code&gt;disjoint&lt;/code&gt;が不正な結果となる問題を修正&lt;/li&gt;
&lt;li&gt;非cartesian座標系での、エッジケースのPoint/Areal関係の操作を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11832&#34; target=&#34;_blank&#34;&gt;Boost Trac #11832&lt;/a&gt; clang-clでコンパイルエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11865&#34; target=&#34;_blank&#34;&gt;Boost Trac #11865&lt;/a&gt; Clang 3.6 (C++11/C++14)において、&lt;code&gt;intrusive::list&lt;/code&gt;の明示的コンストラクタがエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11992&#34; target=&#34;_blank&#34;&gt;Boost Trac #11992&lt;/a&gt; &lt;code&gt;key_type&lt;/code&gt;を取る&lt;code&gt;insert_check&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/19&#34; target=&#34;_blank&#34;&gt;GitHub Pull #19&lt;/a&gt; ebo_functor_holder: コピーコンストラクタのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub Pull #23&lt;/a&gt; MinGWのヘッダーインクルードでの、大文字・小文字を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Studio関連の問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートと特殊化は廃止予定となった&lt;ul&gt;
&lt;li&gt;ユーザは&lt;code&gt;boost::basic_string_view&lt;/code&gt;へと移行することが推奨される&lt;/li&gt;
&lt;li&gt;なお&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートは将来的に削除される予定である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ターゲットディレクトリ内に保存されるログファイル数に上限を設定できるようになった. Erich Keaneのパッチによる (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8746&#34; target=&#34;_blank&#34;&gt;8746&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Windows CEでのいくつものコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;Solarisでのコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;MSVC-10がいくつかの場合でフォーマッタに関して正しくないコードを生成していたので回避策を追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12025&#34; target=&#34;_blank&#34;&gt;#12025&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;実験的&lt;/em&gt;: バッファを必要としない、漸近的に最適なマージとソートのアルゴリズム(&lt;code&gt;adaptive_merge&lt;/code&gt; と &lt;code&gt;adaptive_sort&lt;/code&gt;)を実装&lt;/li&gt;
&lt;li&gt;修正したバグ&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11758&#34; target=&#34;_blank&#34;&gt;Trac #11758&lt;/a&gt; 右辺値参照が有効な環境において、&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;がアクセス修飾子をprivateにリセットしていなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::optional&lt;/code&gt;を参照パラメータで特殊化した。それにあたって、いくつかの問題を修正した：&lt;ul&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;に対する&lt;code&gt;sizeof&lt;/code&gt;がポインタのものとなるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;をコピーして接続した際の、いくつかのバグを修正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラで、正しくない参照の束縛によって発生していた全ての実行時バグが、コンパイルエラーとして検出できるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;を&lt;code&gt;swap&lt;/code&gt;できるようにした。これはポインタの浅いswapであり、元となるオブジェクトには影響がない&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;が抽象型に対して動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入れ子型のドキュメントを記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5193&#34; target=&#34;_blank&#34;&gt;Trac #5193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;完全転送のコンストラクタをSFINAEフレンドリーになるよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12002&#34; target=&#34;_blank&#34;&gt;Trac #12002&lt;/a&gt;)。ただし、これはC++11の&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;を正しく実装した新しめのプラットフォームでのみ機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10445&#34; target=&#34;_blank&#34;&gt;Trac #10445&lt;/a&gt; 右辺値を&lt;code&gt;optional&amp;lt;const T&amp;amp;&amp;gt;&lt;/code&gt;に代入するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ駆動テストケースに、フィクスチャと可変引数のサポートを追加&lt;/li&gt;
&lt;li&gt;データ駆動テストケースのサンプルに、ムーブセマンティクスの例を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6767&#34; target=&#34;_blank&#34;&gt;#6767&lt;/a&gt; 浮動小数点数例外の関数を呼び出す際に、明示的にグローバル名前空間スコープ &lt;code&gt;::&lt;/code&gt; を指定すると、一部の環境でコンパイルに失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8905&#34; target=&#34;_blank&#34;&gt;#8905&lt;/a&gt; boost/test/impl/debug.ipp : &lt;code&gt;WaitForSingleObject&lt;/code&gt;の戻り値を無視していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9443&#34; target=&#34;_blank&#34;&gt;#9443&lt;/a&gt; ランダムな順序でのテスト実行において、内部で使用している&lt;code&gt;std::random_shuffle()&lt;/code&gt;が指定されたシードを無視していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11854&#34; target=&#34;_blank&#34;&gt;#11854&lt;/a&gt; &lt;code&gt;BOOST_DATA_TEST_CASE&lt;/code&gt;でフィクスチャのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11887&#34; target=&#34;_blank&#34;&gt;#11887&lt;/a&gt; &lt;code&gt;BOOST_TEST(3u == (std::max)(0u, 3u))&lt;/code&gt;がテスト失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11889&#34; target=&#34;_blank&#34;&gt;#11889&lt;/a&gt; &lt;code&gt;BOOST_DATA_TEST_CASE&lt;/code&gt;に対してテストデータとして4次元以上の格子を使用するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11983&#34; target=&#34;_blank&#34;&gt;#11983&lt;/a&gt; XML形式でのレポートに、エスケープされていない文字が含まれていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang ,C++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.4, 4.8.5, 4.9.3, 5.3.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1, 5.3.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.4.1, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.8.5, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang, c++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.5, 4.9.3, 5.3.0, 5.3.1, 6.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;G++: 5.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;GCC, cygwin: 5.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3, 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.41, 3.7.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.5, 5.3.0, 6.0&lt;/li&gt;
&lt;li&gt;GCC: 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.61.0リリースノート -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/document/version/1_61_0.html"/>
      <id>ab79581edc0b0815f1fce5218d1ccef998b3adc5:document/version/1_61_0.md</id>
      <updated>2016-04-02 13:49:14 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.61.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_61_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_61_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_61_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/compute&#34; target=&#34;_blank&#34;&gt;Compute&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列及びGPU計算のためのライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/dll&#34; target=&#34;_blank&#34;&gt;DLL&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLLとDSOを容易に扱うためのライブラリ&lt;/li&gt;
&lt;li&gt;プラットフォームを横断た次の様な操作を提供する&lt;ul&gt;
&lt;li&gt;ライブラリをロードする&lt;/li&gt;
&lt;li&gt;任意の関数や変数をインポートする&lt;/li&gt;
&lt;li&gt;マングリングされた関数やシンボルへのエイリアスを作成する&lt;/li&gt;
&lt;li&gt;セクションやエクスポートされたシンボルを問い合わせる&lt;/li&gt;
&lt;li&gt;自身をロードしたり自身に問い合わせる&lt;/li&gt;
&lt;li&gt;エクスポートされたシンボルからプログラムやモジュールの場所を取得する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/hana&#34; target=&#34;_blank&#34;&gt;Hana&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++14以降必須&lt;/li&gt;
&lt;li&gt;近代的なC++のメタプログラミングライブラリ&lt;/li&gt;
&lt;li&gt;高水準での異種型シーケンスへのアルゴリズムを提供する&lt;ul&gt;
&lt;li&gt;自然な構文での型レベルでの計算や、ユーザー定義型への操作可能にする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/metaparse&#34; target=&#34;_blank&#34;&gt;Metaparse&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11以降必須&lt;/li&gt;
&lt;li&gt;コンパイル時構文解析器をコンパイル時に構築するためのライブラリ&lt;ul&gt;
&lt;li&gt;Spirit似ているが、Spiritがコンパイル時にパーサを構築し実行時にパースするのに対し、Metaparseはコンパイル時に構築、パースを実施する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;テストの追加とメンテナンスの為の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、以下のコンストラクタを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, default_init_t, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector(size_type n, const value_type &amp;amp;v, const allocator_type &amp;amp;a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InIt&amp;gt; small_vector(InIt first, InIt last, const allocator_type&amp;amp; a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、基本クラスのオブジェクトを受け取るコンストラクタと代入演算子を追加。これによって異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができるようになる：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit small_vector(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(const small_vector_base &amp;amp;other)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&amp;amp; operator=(small_vector_base&amp;amp;&amp;amp; other)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11820&#34; target=&#34;_blank&#34;&gt;Trac #11820&lt;/a&gt; &lt;code&gt;map::operator[ ]&lt;/code&gt;を使用した際のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11856&#34; target=&#34;_blank&#34;&gt;Trac #11856&lt;/a&gt; typedef名がクラス名と衝突していたために、&lt;code&gt;pool_resource&lt;/code&gt;でのコンストラクタ呼び出しがコンパイルエラーになっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11866&#34; target=&#34;_blank&#34;&gt;Trac #11866&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;が範囲をとるコンストラクタを持っていなかったので追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11867&#34; target=&#34;_blank&#34;&gt;Trac #11867&lt;/a&gt; 異なる初期要素数のテンプレートパラメータを持つ&lt;code&gt;small_vector&lt;/code&gt;同士で変換ができなかったため、変換コンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11912&#34; target=&#34;_blank&#34;&gt;Trac #11912&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;のexpand_backwardsで、同じソースをムーブする可能性があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11957&#34; target=&#34;_blank&#34;&gt;Trac #11957&lt;/a&gt; &lt;code&gt;static_vector::max_size()&lt;/code&gt;がキャパシティより大きかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12014&#34; target=&#34;_blank&#34;&gt;Trac #12014&lt;/a&gt; &lt;code&gt;set::insert()&lt;/code&gt;で、&lt;code&gt;const_iterator&lt;/code&gt;の範囲を挿入しようとすると、オーバーロード解決があいまいでコンパイルエラーとなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;throw_exception()&lt;/code&gt;で&lt;code&gt;std::string&lt;/code&gt;を使用できるよう、インクルードを追加。標準の&lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt;をインクルードするだけでは、&lt;code&gt;std::string&lt;/code&gt;は前方宣言しかされない場合があるため。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11246&#34; target=&#34;_blank&#34;&gt;#11246&lt;/a&gt; 未定義のシンボルがあったためMinGWでビルドできなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11365&#34; target=&#34;_blank&#34;&gt;#11365&lt;/a&gt; VS2015RCにおいて、execution_context.hppでエラーが発生していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11652&#34; target=&#34;_blank&#34;&gt;#11652&lt;/a&gt; &lt;code&gt;__cpp_lib_integer_sequence&lt;/code&gt;を確認するようにした&lt;/li&gt;
&lt;li&gt;fcontext_t: 公開APIではなくなった&lt;/li&gt;
&lt;li&gt;execution_context: 仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;li&gt;execution_context: 新しい実装を追加した&lt;ul&gt;
&lt;li&gt;型安全にデータを転送可能&lt;/li&gt;
&lt;li&gt;スタックの先頭で関数が実行される&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;静的メンバの&lt;code&gt;current()&lt;/code&gt;は削除された&lt;/li&gt;
&lt;li&gt;訳者注: これまでの実装(version 1)と新しい実装(version 2)はクラス名が同一だが互換は無い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数レジスタに関するアトリビュートを削除&lt;ul&gt;
&lt;li&gt;訳者注: Boost.Contextで浮動小数点数レジスタの保存を制御できなくなったことにより、浮動小数点数レジスタは常に保存されなくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;仕様要求レベルをC++14からC++11に引き下げ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PP_IS_EMPTY&lt;/code&gt;を使用したことによる、MSVC8での大量の警告を低減 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11157&#34; target=&#34;_blank&#34;&gt;#11157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コンテナの変換コンストラクタとSFINAEでコンパイルエラーが発生する場合があったのを修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11766&#34; target=&#34;_blank&#34;&gt;#11766&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11版の&lt;code&gt;fusion::vector&lt;/code&gt;から末尾&lt;code&gt;fusion::void_&lt;/code&gt;の特別扱いを削除した &lt;a href=&#34;https://github.com/boostorg/fusion/pull/120&#34; target=&#34;_blank&#34;&gt;pull request 120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;オーバーレイ : コロケーション(co-location)な交差点のハンドリングを強化。&lt;code&gt;handle_tangencies&lt;/code&gt;を&lt;code&gt;clusters&lt;/code&gt;で置き換えた。colocated turnによる多くのバグを修正&lt;/li&gt;
&lt;li&gt;sphericalとgeographicの座標系サポートを追加・修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11637&#34; target=&#34;_blank&#34;&gt;#11637&lt;/a&gt; 未使用パラメータの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11917&#34; target=&#34;_blank&#34;&gt;#11917&lt;/a&gt; Andoyer距離戦略(geographic distanceのデフォルト)が対蹠点について&lt;code&gt;0&lt;/code&gt;を返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11928&#34; target=&#34;_blank&#34;&gt;#11928&lt;/a&gt; 測量面積戦略(surveyor area strategy)の精度を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11966&#34; target=&#34;_blank&#34;&gt;#11966&lt;/a&gt; &lt;code&gt;svg()&lt;/code&gt;関数が、boxと非&lt;code&gt;int&lt;/code&gt;の座標系でコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11789&#34; target=&#34;_blank&#34;&gt;#11789&lt;/a&gt; &lt;code&gt;spherical_equatorial&lt;/code&gt;座標系の集合演算がアサーション失敗もしくは不正な結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12000&#34; target=&#34;_blank&#34;&gt;#12000&lt;/a&gt; &lt;code&gt;mask_handler&lt;/code&gt;関係の、参照を受け取る未使用のコンストラクタを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SegmentがBoxの面に平行である場合、SegmentとBoxに対する&lt;code&gt;intersects&lt;/code&gt;／&lt;code&gt;disjoint&lt;/code&gt;が不正な結果となる問題を修正&lt;/li&gt;
&lt;li&gt;非cartesian座標系での、エッジケースのPoint/Areal関係の操作を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11832&#34; target=&#34;_blank&#34;&gt;Boost Trac #11832&lt;/a&gt; clang-clでコンパイルエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11865&#34; target=&#34;_blank&#34;&gt;Boost Trac #11865&lt;/a&gt; Clang 3.6 (C++11/C++14)において、&lt;code&gt;intrusive::list&lt;/code&gt;の明示的コンストラクタがエラーとなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11992&#34; target=&#34;_blank&#34;&gt;Boost Trac #11992&lt;/a&gt; &lt;code&gt;key_type&lt;/code&gt;を取る&lt;code&gt;insert_check&lt;/code&gt;のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/19&#34; target=&#34;_blank&#34;&gt;GitHub Pull #19&lt;/a&gt; ebo_functor_holder: コピーコンストラクタのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub Pull #23&lt;/a&gt; MinGWのヘッダーインクルードでの、大文字・小文字を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Studio関連の問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般的な変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートと特殊化は廃止予定となった&lt;ul&gt;
&lt;li&gt;ユーザは&lt;code&gt;boost::basic_string_view&lt;/code&gt;へと移行することが推奨される&lt;/li&gt;
&lt;li&gt;なお&lt;code&gt;boost::basic_string_ref&lt;/code&gt;のサポートは将来的に削除される予定である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ターゲットディレクトリ内に保存されるログファイル数に上限を設定できるようになった. Erich Keaneのパッチによる (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8746&#34; target=&#34;_blank&#34;&gt;8746&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Windows CEでのいくつものコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;Solarisでのコンパイルに関する問題を修正&lt;/li&gt;
&lt;li&gt;MSVC-10がいくつかの場合でフォーマッタに関して正しくないコードを生成していたので回避策を追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12025&#34; target=&#34;_blank&#34;&gt;#12025&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;実験的&lt;/em&gt;: バッファを必要としない、漸近的に最適なマージとソートのアルゴリズム(&lt;code&gt;adaptive_merge&lt;/code&gt; と &lt;code&gt;adaptive_sort&lt;/code&gt;)を実装&lt;/li&gt;
&lt;li&gt;修正したバグ&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11758&#34; target=&#34;_blank&#34;&gt;Trac #11758&lt;/a&gt; 右辺値参照が有効な環境において、&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;がアクセス修飾子をprivateにリセットしていなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::optional&lt;/code&gt;を参照パラメータで特殊化した。それにあたって、いくつかの問題を修正した：&lt;ul&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;に対する&lt;code&gt;sizeof&lt;/code&gt;がポインタのものとなるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;をコピーして接続した際の、いくつかのバグを修正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラで、正しくない参照の束縛によって発生していた全ての実行時バグが、コンパイルエラーとして検出できるようにした&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;を&lt;code&gt;swap&lt;/code&gt;できるようにした。これはポインタの浅いswapであり、元となるオブジェクトには影響がない&lt;/li&gt;
&lt;li&gt;参照&lt;code&gt;optional&lt;/code&gt;が抽象型に対して動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入れ子型のドキュメントを記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5193&#34; target=&#34;_blank&#34;&gt;Trac #5193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;完全転送のコンストラクタをSFINAEフレンドリーになるよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12002&#34; target=&#34;_blank&#34;&gt;Trac #12002&lt;/a&gt;)。ただし、これはC++11の&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;を正しく実装した新しめのプラットフォームでのみ機能する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10445&#34; target=&#34;_blank&#34;&gt;Trac #10445&lt;/a&gt; 右辺値を&lt;code&gt;optional&amp;lt;const T&amp;amp;&amp;gt;&lt;/code&gt;に代入するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_61_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang ,C++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.4, 4.8.5, 4.9.3, 5.3.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1, 5.3.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.4.1, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.8.5, 5.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1&lt;/li&gt;
&lt;li&gt;Clang, c++14: 3.7.1, 3.8.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.5, 4.9.3, 5.3.0, 5.3.1, 6.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.2.1&lt;/li&gt;
&lt;li&gt;Intel: 16.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 7.0.2&lt;/li&gt;
&lt;li&gt;G++: 5.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, C++03, mingw: 3.4.5&lt;/li&gt;
&lt;li&gt;GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14, mingw: 4.9.3, 5.1, 5.2&lt;/li&gt;
&lt;li&gt;GCC, cygwin: 5.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.3, 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.41, 3.7.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.5, 5.3.0, 6.0&lt;/li&gt;
&lt;li&gt;GCC: 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haiku:&lt;ul&gt;
&lt;li&gt;GCC, C++11: 4.8.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.4, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>