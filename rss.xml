<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2015-03-31T21:00:11.134491</updated>
  <id>93783798-07f0-4a97-920f-dd38864949c4</id>

  
    <entry>
      <title>Boost 1.58.0リリースノート -- 1.58.0 リリースノート: Boost.Logのアップデートを反映</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>33f1d7c962a3ead256c596026d2c301c44185429:document/version/1_58_0.md</id>
      <updated>2015-03-31 12:36:18 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11148&#34; target=&#34;_blank&#34;&gt;ticket 11148&lt;/a&gt; 属性値集合に多くの属性値が挿入された際に &lt;code&gt;attribute_value_set::size()&lt;/code&gt; が正しくない挙動をしていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの改善および、IO操作とヘッダファイルについての記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none_t&lt;/code&gt;は即値の&lt;code&gt;0&lt;/code&gt;から変換できなくなった。これは&lt;code&gt;optional&amp;lt;rational&amp;lt;int&amp;gt;&amp;gt; oi = 0&lt;/code&gt;の様な例で値を格納していないoptionalのオブジェクトが生成されるのを防ぐためである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/code&gt;を定義することでムーヴセマンティックスを無効化できるようにした。これは&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10399&#34; target=&#34;_blank&#34;&gt;ticket 10399&lt;/a&gt;のためのワークアラウンドである&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10825&#34; target=&#34;_blank&#34;&gt;ticket 10825&lt;/a&gt; &lt;code&gt;optional_io.hpp&lt;/code&gt;のインクルードを忘れていた際に、&lt;code&gt;optional&lt;/code&gt;をストリームに渡すとリンクタイムエラーとなっていたのをコンパイルエラーとするように改良&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11087&#34; target=&#34;_blank&#34;&gt;ticket 11087&lt;/a&gt; &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;T&lt;/code&gt;に代入若しくは変換できない場合に&lt;code&gt;optional&amp;lt;U&amp;gt;&lt;/code&gt;を&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;に代入できてしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10839&#34; target=&#34;_blank&#34;&gt;ticket 10839&lt;/a&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;の値をmoveできなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostを使用しているプロジェクト -- Merge pull request #30 from wx257osn2/patch-1
</title>
      <link href="http://boostjp.github.io/used_project.html"/>
      <id>2d967aac2c9528abbc638aaf117e98af797ddc24:used_project.md</id>
      <updated>2015-03-25 18:18:46 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostを使用しているプロジェクト&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;見つけたら書いていってください。&lt;/p&gt;
&lt;p&gt;Boostのどのライブラリを使用しているかも書くとさらにGood！Boostを使用したコードの参考にしてください。&lt;/p&gt;
&lt;h2&gt;公式情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_shrink.html&#34; target=&#34;_blank&#34;&gt;商用製品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_open.html&#34; target=&#34;_blank&#34;&gt;オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/uses_inhouse.html&#34; target=&#34;_blank&#34;&gt;会社&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://think-async.com/Asio/WhoIsUsingAsio&#34; target=&#34;_blank&#34;&gt;Boost.Asioを使用しているプロジェクト&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.osgeo.org/ggl/wiki/WhoUsesGGL&#34; target=&#34;_blank&#34;&gt;Boost.Geometry(旧名GGL)を使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/graph/doc/users.html&#34; target=&#34;_blank&#34;&gt;Boost.Graphを使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;boostjp&lt;/h2&gt;
&lt;h3&gt;オープンソースライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt; [&lt;a href=&#34;https://github.com/mongodb/mongo&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
データベースライブラリ。
Boost.Any, Boost.Asio, Boost.Bind, Boost.Filesystem, Boost.Function, Boost.ProgramOptions, Boost.SmartPtr, Boost.Spirit, Boost.Thread, Boost.Tuple, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://libcinder.org/&#34; target=&#34;_blank&#34;&gt;Cinder&lt;/a&gt;
アーティスティック系ライブラリ。
Boost.SmartPtr, Boost.Threadなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vrac.iastate.edu/%7Edkabala/OpenSGToolbox/&#34; target=&#34;_blank&#34;&gt;OpenSGToolbox&lt;/a&gt; [&lt;a href=&#34;https://github.com/djkabala/OpenSGToolbox&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
アーティスティック系ライブラリであるOpenSGの拡張ライブラリ。UI, FieldContainerEditor, Lua, ParticleSystem, ParticleTrail, 物理演算, サウンド, TextDom, ビデオ, Octree, AStarなどの機能がある。
Boost.Any, Boost.Assign, Boost.Bind, Boost.Filesystem, Boost.Format, Boost.LexicalCast, Boost.Random, Boost.Signals2, Boost.SmartPtr, Boost.StringAlgo, Boost.Xpressive, Boost.Functionなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.webtoolkit.eu/wt/&#34; target=&#34;_blank&#34;&gt;Wt&lt;/a&gt;
Web アプリケーションフレームワーク。Boost.Any, Boost.Array, Boost.Asio, Boost.Bind, Boost.DateTime, Boost.Filesystem, Boost.Function, Boost.Intrusive, Boost.Lambda, Boost.LexicalCast, Boost.Noncopyable, Boost.Optional, Boost.Pool, Boost.ProgramOptions, Boost.Regex, Boost.Ref, Boost.Range, Boost.Signals2, Boost.SmartPtr, Boost.Spirit, Boost.StringAlgo, Boost.Test, Boost.Thread, Boost.Tokenizer, Boost.Tuple, Boost.TypeTraits, Boost.uBlas, Boost.Unordered, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stlab.adobe.com/group__asl__home.html&#34; target=&#34;_blank&#34;&gt;Adobe Source Libraries&lt;/a&gt;
クロスプラットフォームのGUI構築とそれに付随するユーティリティライブラリ群。
GUI構築にAdam,Eveという2つの独自言語を採用しており、ウィジェット間依存関係、GUIレイアウトとロジックの記述をそれぞれと完全に分離できる。
少なくとも Boost.Utility,Function,Signals,Range,Bind,TypeTraits,ConceptCheck,MPL,FunctionTypes,Noncopyable,Fusion,Operators,Iterator,Array,Any,Tuple,SharedPtr,Integer,StaticAssert を使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;オープンソースソフトウェア&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.marcusbannerman.co.uk/dynamo&#34; target=&#34;_blank&#34;&gt;DynamO&lt;/a&gt; [&lt;a href=&#34;https://github.com/toastedcrumpets/DynamO&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
イベント駆動シミュレータ。
Boost.Array, Boost.CircularBuffer, Boost.DateTime, Boost.Foreach, Boost.Function, Boost.Iostreams, Boost.LexicalCast, Boost.Math, Boost.ProgramOptions, Boost.Random, Boost.SmartPtr, Boost.Tokenizer, Boost.Tuple, Boost.Unorderedなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aptitude
Debian系Linuxディストリビューションで使用されているパッケージ管理システムaptの対話的フロントエンド。
Boost.Iostreamsを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.modrails.com/&#34; target=&#34;_blank&#34;&gt;Phusion Passenger&lt;/a&gt;
Ruby on RailsをはじめとするRubyのウェブアプリケーションフレームワークを動作されるためのミドルウェア（ApacheモジュールとNginxモジュール）。mod_rails, mod_rackなどとも呼ばれる。
&lt;a href=&#34;https://github.com/FooBarWidget/passenger/blob/master/dev/copy_boost_headers.rb&#34; target=&#34;_blank&#34;&gt;copy_boost_headers.rb&lt;/a&gt;を見る限り、Boost.Thread、Boost.DateTime、Boost.SmartPtr、Boost.Function、Boost.Bindあたりを使用している模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;
x86およびx86-64の仮想マシン環境を提供するソフトウェア。SunからOracleへと引き継がれた。
&lt;a href=&#34;http://www.virtualbox.org/browser/trunk/src/libs&#34; target=&#34;_blank&#34;&gt;trunk/src/libs&lt;/a&gt;以下のディレクトリに使用しているヘッダを置いているようだ。リビジョン37986 (2011/07/16)時点ではBoost.Exceptions、Boost.SmartPtrのファイルが存在する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/hiphop-php&#34; target=&#34;_blank&#34;&gt;Hiphop for PHP&lt;/a&gt;
PHPのソースコードからC++ソースコードを生成するトランスレータ。これ自体もC++で書かれており、Boostも使用されている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mosh.mit.edu/&#34; target=&#34;_blank&#34;&gt;Mosh: the mobile shell&lt;/a&gt;
SSHの置き換えを狙う端末アプリケーション。回線切断からの再接続やローカルエコーにより、SSHと比べ高信頼・快適な環境を売りにしている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mapnik.org/&#34; target=&#34;_blank&#34;&gt;Mapnik&lt;/a&gt;
地図データの扱い、描画に関するライブラリ。&lt;a href=&#34;https://github.com/mapnik/mapnik/blob/master/INSTALL.md&#34; target=&#34;_blank&#34;&gt;INSTALL.md&lt;/a&gt;より、Filesystem、System、Thread、Regex、ProgramOptionsを使用していることの記載あり。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ja.libreoffice.org/&#34; target=&#34;_blank&#34;&gt;LibreOffice&lt;/a&gt;
オフィススイート（文書作成、表計算、プレゼンテーション、etc.）。ver.4.0.1(2013/03/07)時点でのBoost使用状況をソースコードから&lt;a href=&#34;https://gist.github.com/usagi/5108142&#34; target=&#34;_blank&#34;&gt;抽出して見る&lt;/a&gt;とArray、DateTime、Foreach、Preprocessor、Random、SmartPtr、Spirit、UnorderedMapなど使われている。ver.4のCalcからはRANDOM()にBoost.Randomを用いたメルセンヌツイスターを&lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=33365&#34; target=&#34;_blank&#34;&gt;採用&lt;/a&gt;するなどBoostの利用も広まっている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;商用製品&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://shade.e-frontier.co.jp/&#34; target=&#34;_blank&#34;&gt;Shade&lt;/a&gt;
e-frontier社 3DCG作成ソフト。
プラグイン用SDKにBoostを含む。
Boost.TypeTraits、Boost.MPLなどを使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.penguin-aqua.jp/archives/2145&#34; target=&#34;_blank&#34;&gt;長崎ペンギン水族館バーチャルシアター&lt;/a&gt;
3Dシアター。立体視CG描画のための3DエンジンにBoostを使用。
アセット管理にBoost.Filesystem、Boost.SmartPtr、Boost.Flyweight。
キャラクターの動きにBoost.Context、Boost.Random。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;会社&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aiming-inc.com/&#34; target=&#34;_blank&#34;&gt;株式会社Aiming&lt;/a&gt;
オンラインゲームのサーバー開発にBoost.Any、Boost.Array、Boost.Foreach、Boost.Format、Boost.Function、Boost.LexicalCast、Boost.Multi-Index、Boost.Optional、Boost.Regex、Boost.Spirit、Boost.StringAlgo、Boost.Tokenizer、Boost.Utility、Boost.Xpressiveなどを使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Usagi Ito
</name>
        <email>usagi@WonderRabbitProject.net
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostを使用しているプロジェクト -- Update used_project.md</title>
      <link href="http://boostjp.github.io/used_project.html"/>
      <id>be9661999b84cf10f9f025c9aa1071940f6bd470:used_project.md</id>
      <updated>2015-03-25 18:15:32 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boostを使用しているプロジェクト&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;見つけたら書いていってください。&lt;/p&gt;
&lt;p&gt;Boostのどのライブラリを使用しているかも書くとさらにGood！Boostを使用したコードの参考にしてください。&lt;/p&gt;
&lt;h2&gt;公式情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_shrink.html&#34; target=&#34;_blank&#34;&gt;商用製品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/uses_open.html&#34; target=&#34;_blank&#34;&gt;オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/uses_inhouse.html&#34; target=&#34;_blank&#34;&gt;会社&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://think-async.com/Asio/WhoIsUsingAsio&#34; target=&#34;_blank&#34;&gt;Boost.Asioを使用しているプロジェクト&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.osgeo.org/ggl/wiki/WhoUsesGGL&#34; target=&#34;_blank&#34;&gt;Boost.Geometry(旧名GGL)を使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/graph/doc/users.html&#34; target=&#34;_blank&#34;&gt;Boost.Graphを使用しているプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;boostjp&lt;/h2&gt;
&lt;h3&gt;オープンソースライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt; [&lt;a href=&#34;https://github.com/mongodb/mongo&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
データベースライブラリ。
Boost.Any, Boost.Asio, Boost.Bind, Boost.Filesystem, Boost.Function, Boost.ProgramOptions, Boost.SmartPtr, Boost.Spirit, Boost.Thread, Boost.Tuple, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://libcinder.org/&#34; target=&#34;_blank&#34;&gt;Cinder&lt;/a&gt;
アーティスティック系ライブラリ。
Boost.SmartPtr, Boost.Threadなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vrac.iastate.edu/%7Edkabala/OpenSGToolbox/&#34; target=&#34;_blank&#34;&gt;OpenSGToolbox&lt;/a&gt; [&lt;a href=&#34;https://github.com/djkabala/OpenSGToolbox&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
アーティスティック系ライブラリであるOpenSGの拡張ライブラリ。UI, FieldContainerEditor, Lua, ParticleSystem, ParticleTrail, 物理演算, サウンド, TextDom, ビデオ, Octree, AStarなどの機能がある。
Boost.Any, Boost.Assign, Boost.Bind, Boost.Filesystem, Boost.Format, Boost.LexicalCast, Boost.Random, Boost.Signals2, Boost.SmartPtr, Boost.StringAlgo, Boost.Xpressive, Boost.Functionなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.webtoolkit.eu/wt/&#34; target=&#34;_blank&#34;&gt;Wt&lt;/a&gt;
Web アプリケーションフレームワーク。Boost.Any, Boost.Array, Boost.Asio, Boost.Bind, Boost.DateTime, Boost.Filesystem, Boost.Function, Boost.Intrusive, Boost.Lambda, Boost.LexicalCast, Boost.Noncopyable, Boost.Optional, Boost.Pool, Boost.ProgramOptions, Boost.Regex, Boost.Ref, Boost.Range, Boost.Signals2, Boost.SmartPtr, Boost.Spirit, Boost.StringAlgo, Boost.Test, Boost.Thread, Boost.Tokenizer, Boost.Tuple, Boost.TypeTraits, Boost.uBlas, Boost.Unordered, Boost.Utilityなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stlab.adobe.com/group__asl__home.html&#34; target=&#34;_blank&#34;&gt;Adobe Source Libraries&lt;/a&gt;
クロスプラットフォームのGUI構築とそれに付随するユーティリティライブラリ群。
GUI構築にAdam,Eveという2つの独自言語を採用しており、ウィジェット間依存関係、GUIレイアウトとロジックの記述をそれぞれと完全に分離できる。
少なくとも Boost.Utility,Function,Signals,Range,Bind,TypeTraits,ConceptCheck,MPL,FunctionTypes,Noncopyable,Fusion,Operators,Iterator,Array,Any,Tuple,SharedPtr,Integer,StaticAssert を使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;オープンソースソフトウェア&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.marcusbannerman.co.uk/dynamo&#34; target=&#34;_blank&#34;&gt;DynamO&lt;/a&gt; [&lt;a href=&#34;https://github.com/toastedcrumpets/DynamO&#34; target=&#34;_blank&#34;&gt;sourcecode&lt;/a&gt;]
イベント駆動シミュレータ。
Boost.Array, Boost.CircularBuffer, Boost.DateTime, Boost.Foreach, Boost.Function, Boost.Iostreams, Boost.LexicalCast, Boost.Math, Boost.ProgramOptions, Boost.Random, Boost.SmartPtr, Boost.Tokenizer, Boost.Tuple, Boost.Unorderedなどを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aptitude
Debian系Linuxディストリビューションで使用されているパッケージ管理システムaptの対話的フロントエンド。
Boost.Iostreamsを使用している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.modrails.com/&#34; target=&#34;_blank&#34;&gt;Phusion Passenger&lt;/a&gt;
Ruby on RailsをはじめとするRubyのウェブアプリケーションフレームワークを動作されるためのミドルウェア（ApacheモジュールとNginxモジュール）。mod_rails, mod_rackなどとも呼ばれる。
&lt;a href=&#34;https://github.com/FooBarWidget/passenger/blob/master/dev/copy_boost_headers.rb&#34; target=&#34;_blank&#34;&gt;copy_boost_headers.rb&lt;/a&gt;を見る限り、Boost.Thread、Boost.DateTime、Boost.SmartPtr、Boost.Function、Boost.Bindあたりを使用している模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;
x86およびx86-64の仮想マシン環境を提供するソフトウェア。SunからOracleへと引き継がれた。
&lt;a href=&#34;http://www.virtualbox.org/browser/trunk/src/libs&#34; target=&#34;_blank&#34;&gt;trunk/src/libs&lt;/a&gt;以下のディレクトリに使用しているヘッダを置いているようだ。リビジョン37986 (2011/07/16)時点ではBoost.Exceptions、Boost.SmartPtrのファイルが存在する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/hiphop-php&#34; target=&#34;_blank&#34;&gt;Hiphop for PHP&lt;/a&gt;
PHPのソースコードからC++ソースコードを生成するトランスレータ。これ自体もC++で書かれており、Boostも使用されている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mosh.mit.edu/&#34; target=&#34;_blank&#34;&gt;Mosh: the mobile shell&lt;/a&gt;
SSHの置き換えを狙う端末アプリケーション。回線切断からの再接続やローカルエコーにより、SSHと比べ高信頼・快適な環境を売りにしている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mapnik.org/&#34; target=&#34;_blank&#34;&gt;Mapnik&lt;/a&gt;
地図データの扱い、描画に関するライブラリ。&lt;a href=&#34;https://github.com/mapnik/mapnik/blob/master/INSTALL.md&#34; target=&#34;_blank&#34;&gt;INSTALL.md&lt;/a&gt;より、Filesystem、System、Thread、Regex、ProgramOptionsを使用していることの記載あり。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ja.libreoffice.org/&#34; target=&#34;_blank&#34;&gt;LibreOffice&lt;/a&gt;
オフィススイート（文書作成、表計算、プレゼンテーション、etc.）。ver.4.0.1(2013/03/07)時点でのBoost使用状況をソースコードから&lt;a href=&#34;https://gist.github.com/usagi/5108142&#34; target=&#34;_blank&#34;&gt;抽出して見る&lt;/a&gt;とArray、DateTime、Foreach、Preprocessor、Random、SmartPtr、Spirit、UnorderedMapなど使われている。ver.4のCalcからはRANDOM()にBoost.Randomを用いたメルセンヌツイスターを&lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=33365&#34; target=&#34;_blank&#34;&gt;採用&lt;/a&gt;するなどBoostの利用も広まっている模様。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;商用製品&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://shade.e-frontier.co.jp/&#34; target=&#34;_blank&#34;&gt;Shade&lt;/a&gt;
e-frontier社 3DCG作成ソフト。
プラグイン用SDKにBoostを含む。
Boost.TypeTraits、Boost.MPLなどを使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.penguin-aqua.jp/archives/2145&#34; target=&#34;_blank&#34;&gt;長崎ペンギン水族館バーチャルシアター&lt;/a&gt;
3Dシアター。立体視CG描画のための3DエンジンにBoostを使用。
アセット管理にBoost.Filesystem、Boost.SmartPtr、Boost.Flyweight。
キャラクターの動きにBoost.Context、Boost.Random。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;会社&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aiming-inc.com/&#34; target=&#34;_blank&#34;&gt;株式会社Aiming&lt;/a&gt;
オンラインゲームのサーバー開発にBoost.Any、Boost.Array、Boost.Foreach、Boost.Format、Boost.Function、Boost.LexicalCast、Boost.Multi-Index、Boost.Optional、Boost.Regex、Boost.Spirit、Boost.StringAlgo、Boost.Tokenizer、Boost.Utility、Boost.Xpressiveなどを使用。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.58.0リリースノート -- 1.58.0 リリースノート: Optionalを追加</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>2535a8d78b2868430f0715776a5e82cf64256bc3:document/version/1_58_0.md</id>
      <updated>2015-03-24 11:31:45 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの改善および、IO操作とヘッダファイルについての記載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::none_t&lt;/code&gt;は即値の&lt;code&gt;0&lt;/code&gt;から変換できなくなった。これは&lt;code&gt;optional&amp;lt;rational&amp;lt;int&amp;gt;&amp;gt; oi = 0&lt;/code&gt;の様な例で値を格納していないoptionalのオブジェクトが生成されるのを防ぐためである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/code&gt;を定義することでムーヴセマンティックスを無効化できるようにした。これは&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10399&#34; target=&#34;_blank&#34;&gt;ticket 10399&lt;/a&gt;のためのワークアラウンドである&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10825&#34; target=&#34;_blank&#34;&gt;ticket 10825&lt;/a&gt; &lt;code&gt;optional_io.hpp&lt;/code&gt;のインクルードを忘れていた際に、&lt;code&gt;optional&lt;/code&gt;をストリームに渡すとリンクタイムエラーとなっていたのをコンパイルエラーとするように改良&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11087&#34; target=&#34;_blank&#34;&gt;ticket 11087&lt;/a&gt; &lt;code&gt;U&lt;/code&gt;が&lt;code&gt;T&lt;/code&gt;に代入若しくは変換できない場合に&lt;code&gt;optional&amp;lt;U&amp;gt;&lt;/code&gt;を&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;に代入できてしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10839&#34; target=&#34;_blank&#34;&gt;ticket 10839&lt;/a&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;の値をmoveできなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.58.0リリースノート -- 1.58.0 リリースノート: cosmetic</title>
      <link href="http://boostjp.github.io/document/version/1_58_0.html"/>
      <id>56b4be3b47fbcaa79e457cd1519db20344f2ad84:document/version/1_58_0.md</id>
      <updated>2015-03-24 10:18:22 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.58.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_58_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_58_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_58_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/endian/&#34; target=&#34;_blank&#34;&gt;Endian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;プロセッサのエンディアンに関係なく、適切なバイトオーダーに変換する型と関数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/sort/&#34; target=&#34;_blank&#34;&gt;Sort&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一般的な状況でO(n*log(n))よりも高速な、ハイブリッドな基数ソートであるスプレッドソート(spreadsort)を含む。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン2.0.5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10778&#34; target=&#34;_blank&#34;&gt;#10778&lt;/a&gt; &lt;code&gt;boost::chrono&lt;/code&gt;の&lt;code&gt;duration&lt;/code&gt;クラスが、&lt;code&gt;TriviallyCopyable&lt;/code&gt;でないために&lt;code&gt;std::atomic&lt;/code&gt;に格納できない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10840&#34; target=&#34;_blank&#34;&gt;#10840&lt;/a&gt; テストコードtest_7868.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10851&#34; target=&#34;_blank&#34;&gt;#10851&lt;/a&gt; テストコードtime_point_output.cppにおいて、&lt;code&gt;puts()&lt;/code&gt;関数の呼び出しが&lt;code&gt;std::&lt;/code&gt;修飾されていなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10893&#34; target=&#34;_blank&#34;&gt;#10893&lt;/a&gt; ドキュメントの細かな誤字を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10992&#34; target=&#34;_blank&#34;&gt;#10992&lt;/a&gt; ChronoのIO state saverが、Boost.IO state saverと一貫していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10995&#34; target=&#34;_blank&#34;&gt;#10995&lt;/a&gt; &lt;code&gt;duration_put::put_value()&lt;/code&gt;で、少数が切り捨てられる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11006&#34; target=&#34;_blank&#34;&gt;#11006&lt;/a&gt; &lt;code&gt;time_fmt_io_saver&lt;/code&gt;のインスタンス化がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11012&#34; target=&#34;_blank&#34;&gt;#11012&lt;/a&gt; chrono_io v2において、&lt;code&gt;boost::chrono::duration&amp;lt; boost::rational&amp;lt;int&amp;gt; &amp;gt;&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的に&lt;code&gt;small_vector&lt;/code&gt;クラスを追加&lt;ul&gt;
&lt;li&gt;小さな要素数に最適化された&lt;code&gt;vector&lt;/code&gt;。テンプレートパラメータで指定された要素数の領域を事前に確保することにより、その要素数を超えない限り、&lt;code&gt;insert()&lt;/code&gt;／&lt;code&gt;push_back()&lt;/code&gt;でメモリ確保を行わない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;とは異なり、フリーストアからメモリ確保し、キャパシティを超えた領域の拡張が可能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h&#34; target=&#34;_blank&#34;&gt;LLVMのSmallVectorクラス&lt;/a&gt;を参考にしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依存関係を大規模に見なおした。現在、Boost.Containerは、とても基本的なユーティリティのみをBoost.CoreとBoost.Intrusiveに依存する。プリプロセスされたコードのサイズが小さくなっているため、コンパイル時間が改善する。&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータを持つコンテナ(&lt;code&gt;basic_string&lt;/code&gt;以外)に、&lt;code&gt;nth()&lt;/code&gt;、&lt;code&gt;index_of()&lt;/code&gt;メンバ関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth()&lt;/code&gt;は、指定されたインデックスの要素を指すイテレータを取得するメンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_of()&lt;/code&gt;は、指定されたイテレータが指す要素のインデックスを取得するメンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17の&lt;code&gt;allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;コンテナのコンストラクタを、以下の仕様に基づいて更新：&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt; 再度開かれたチケット「&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない」を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11076&#34; target=&#34;_blank&#34;&gt;#11076&lt;/a&gt; container/detail/copy_move_algo.hppで、&lt;code&gt;memmove()&lt;/code&gt;と&lt;code&gt;memcpy()&lt;/code&gt;を名前空間修飾なしに呼び出していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10790&#34; target=&#34;_blank&#34;&gt;#10790&lt;/a&gt; Boost.Containerのコンテナに&lt;code&gt;long long&lt;/code&gt;を指定するとコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10808&#34; target=&#34;_blank&#34;&gt;#10808&lt;/a&gt; &lt;code&gt;vector&lt;/code&gt;の等値比較演算子が壊れていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ソースの破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;クラスの&lt;code&gt;propagate_on_container_copy_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;、&lt;code&gt;propagate_on_container_swap&lt;/code&gt;が、&lt;code&gt;::boost::integral_constant&amp;lt;bool, true/false&amp;gt;&lt;/code&gt;ではなくなった。これは、MPLへの依存を減らすため、および&lt;code&gt;std::integral_constant&lt;/code&gt;との相互運用保証がなかったためである。&lt;code&gt;boost::true_type&lt;/code&gt;／&lt;code&gt;boost::false_type&lt;/code&gt;を仮定したコードはコンパイルが通らなくなる。ワークアラウンドとして、内部の&lt;code&gt;::value&lt;/code&gt;定数を使用して&lt;code&gt;::boost::integral_constant&amp;lt;bool, scoped_allocator_adaptor&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value&amp;gt;&lt;/code&gt;のように書くことで、問題を回避できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARM/iOS (32ビット + 64ビット) をサポート&lt;/li&gt;
&lt;li&gt;C++14向けに&lt;code&gt;execution_context&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10780&#34; target=&#34;_blank&#34;&gt;#10780&lt;/a&gt; &lt;code&gt;polymorphic_pointer_downcast()&lt;/code&gt;関数と&lt;code&gt;polymorphic_pointer_cast()&lt;/code&gt;関数を追加した(Boris Rasin氏に感謝)&lt;/li&gt;
&lt;li&gt;例外を送出する全ての関数が、&lt;code&gt;boost::throw_exception()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;ドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_time_t()&lt;/code&gt;関数を復活&lt;/li&gt;
&lt;li&gt;変数&lt;code&gt;v_type&lt;/code&gt;の名前を&lt;code&gt;var_type&lt;/code&gt;に変更。AIXのシステム変数と衝突していたため。&lt;/li&gt;
&lt;li&gt;ドキュメントを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;boost::hash&lt;/code&gt;でのハッシュサポートを追加。&lt;ul&gt;
&lt;li&gt;この機能は&lt;code&gt;BOOST_FLYWEIGHT_DISABLE_HASH_SUPPORT&lt;/code&gt;をdefineすることによって無効化できる。この無効化機能は、ユーザーが&lt;code&gt;flyweight&lt;/code&gt;クラスを自前でハッシュサポートしていた場合のためにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正をいくつか行った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10585&#34; target=&#34;_blank&#34;&gt;#10585&lt;/a&gt; C++11の右辺値、Boost.Moveの右辺値、両方の関数を受け取れるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#functional-factory&#34; name=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;小さな破壊的変更&lt;/strong&gt;&lt;/span&gt; : アロケータを使用すべきでないことを示すためのデフォルトテンプレートパラメータを、&lt;code&gt;boost::none_t&lt;/code&gt;から&lt;code&gt;void&lt;/code&gt;に変更。これは、Boost.Optionalへの依存をなくすための変更。&lt;ul&gt;
&lt;li&gt;引き続き&lt;code&gt;boost::none_t&lt;/code&gt;を使用したい場合は、&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;をdefineすること。ただし、この互換性のための機能は、将来のリリースから削除される可能性があることに注意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/12&#34; target=&#34;_blank&#34;&gt;GitHub PR #12&lt;/a&gt; Fusionのシーケンスを&lt;code&gt;boost::hash&lt;/code&gt;で使えるように&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/51&#34; target=&#34;_blank&#34;&gt;GitHub PR #51&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt; をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt;、&lt;code&gt;mpl::clear&lt;/code&gt;の実装を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/54&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;GitHub PR #54&lt;/code&gt;&lt;/a&gt; Fusionアダプタでの暗黙的な型推論をサポート&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPT_STRUCT&lt;/code&gt;、&lt;code&gt;ADAPT_ADT&lt;/code&gt;、&lt;code&gt;ADAPT_ASSOC_&lt;/code&gt;マクロで、メンバ変数の型を書かなくてよくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9813&#34; target=&#34;_blank&#34;&gt;ticket 9813&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/14&#34; target=&#34;_blank&#34;&gt;GitHub PR #14&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub PR #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub PR #26&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/58&#34; target=&#34;_blank&#34;&gt;GitHub PR #58&lt;/a&gt; C++11/14 constexprのサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10190&#34; target=&#34;_blank&#34;&gt;ticket 10190&lt;/a&gt; &lt;code&gt;std::declval()&lt;/code&gt;の代わりに&lt;code&gt;boost::declval()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8622&#34; target=&#34;_blank&#34;&gt;ticket 8622&lt;/a&gt; &lt;code&gt;boost::blank&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;result_of&lt;/code&gt;をSFINAE-friendlyに&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10443&#34; target=&#34;_blank&#34;&gt;ticket 10443&lt;/a&gt; &lt;code&gt;fusion::result_of::invoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub PR #35&lt;/a&gt; &lt;code&gt;fusion::result_of::copy&lt;/code&gt;、&lt;code&gt;fusion::result_of::move&lt;/code&gt;、&lt;code&gt;fusion::result_of::swap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/41&#34; target=&#34;_blank&#34;&gt;GitHub PR #41&lt;/a&gt; &lt;code&gt;fusion::result_of::at_c&lt;/code&gt;、&lt;code&gt;fusion::result_of::at&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7304&#34; target=&#34;_blank&#34;&gt;ticket 7304&lt;/a&gt; &lt;code&gt;result_of::size::value&lt;/code&gt;と&lt;code&gt;result_of::size::type::value&lt;/code&gt;の型が同じになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6507&#34; target=&#34;_blank&#34;&gt;ticket 6507&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7651&#34; target=&#34;_blank&#34;&gt;ticket 7651&lt;/a&gt; &lt;code&gt;result_of::at&amp;lt;Seq, N&amp;gt;::type&lt;/code&gt;は、&lt;code&gt;N&lt;/code&gt;がシーケンスの要素数未満の場合にのみ定義されるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8457&#34; target=&#34;_blank&#34;&gt;ticket 8457&lt;/a&gt; インクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6090&#34; target=&#34;_blank&#34;&gt;ticket 6090&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5324&#34; target=&#34;_blank&#34;&gt;ticket 5324&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub PR #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub PR #53&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/fusion/pull/56&#34; target=&#34;_blank&#34;&gt;GitHub PR #56&lt;/a&gt; 多くのドキュメントを修正 &amp;amp; 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の記事も参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flast.hateblo.jp/entry/2015/03/07/181046&#34; target=&#34;_blank&#34;&gt;Boost.Fusion 1.58 updates - にゃははー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/functional/pull/3&#34; target=&#34;_blank&#34;&gt;GitHub PR #3&lt;/a&gt; strict aliasing違反を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時の依存関係を削減した。Boost.Containerの変更に対する更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub PR #13&lt;/a&gt; HaikuはXSI共有メモリを持っていないため、このライブラリを使用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とくにフックとイテレータのために、コンパイルの依存関係、ヘッダ、Boost.Preprocessorの使用を削減。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6720&#34; target=&#34;_blank&#34;&gt;Boost Trac #6720&lt;/a&gt; statelessラムダを使用すると、VC11 Beta環境において&lt;code&gt;intrusive::unordered_set::clear_and_dispose&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10771&#34; target=&#34;_blank&#34;&gt;#10771&lt;/a&gt; &lt;code&gt;slist&lt;/code&gt;の&lt;code&gt;remove_if&lt;/code&gt;が壊れている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10853&#34; target=&#34;_blank&#34;&gt;#10853&lt;/a&gt; 提案文書に従って&lt;code&gt;pointer_traits&lt;/code&gt;のドキュメントを記載&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10987&#34; target=&#34;_blank&#34;&gt;#10987&lt;/a&gt; &lt;code&gt;any_xxx_node_traits&lt;/code&gt;は参照を返すべきではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5660&#34; target=&#34;_blank&#34;&gt;ticket 5660&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6975&#34; target=&#34;_blank&#34;&gt;ticket 6975&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10639&#34; target=&#34;_blank&#34;&gt;ticket 10639&lt;/a&gt; 浮動小数点数の変換に&lt;code&gt;std::stream&lt;/code&gt;を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#log&#34; name=&#34;Log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スレッドIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;プロセスIDのフォーマットを修正&lt;/li&gt;
&lt;li&gt;GNU Hurdでのビルド失敗を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11016&#34; target=&#34;_blank&#34;&gt;ticket 11016&lt;/a&gt; ファイルシステムの空き領域が使い尽くされている場合の、text file sink backendの間違った挙動を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11106&#34; target=&#34;_blank&#34;&gt;ticket 11106&lt;/a&gt; &lt;code&gt;attribute_set::insert()&lt;/code&gt;がいくつかの場合で正しくない挙動をしており、以前に挿入した要素を見つけられなくなっていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な変更は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2つの特殊関数&lt;code&gt;trigamma()&lt;/code&gt;と&lt;code&gt;polygamma()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;楕円積分のコード(Elliptic integral code)に、Carlsonの最新アルゴリズムを使うよう、大規模な更新を行った。この変更によって、以前よりも安定し、より正確になり、若干高速になるはずだ。CarlsonのRG積分のサポートも追加した。&lt;/li&gt;
&lt;li&gt;楕円積分の機能として、&lt;code&gt;ellint_d()&lt;/code&gt;、&lt;code&gt;jacobi_zeta()&lt;/code&gt;、&lt;code&gt;heuman_lambda()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;名前空間内で定義している定数は、&lt;code&gt;constexpr&lt;/code&gt;に準拠したコンパイラであれば&lt;code&gt;constexpr&lt;/code&gt;定数として定義するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10901&#34; target=&#34;_blank&#34;&gt;#10901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数、ガンマ関数、および楕円積分で、見かけ上のアンダーフローとオーバーフローが起こる様々なケースを修正。Rocco Romeo氏に感謝。&lt;/li&gt;
&lt;li&gt;3引数版の&lt;code&gt;legendre_p()&lt;/code&gt;と&lt;code&gt;legendre_q()&lt;/code&gt;関数に、最後の引数としてポリシーが指定されなかった場合に、オーバーロードされないように修正した。&lt;/li&gt;
&lt;li&gt;不完全な&lt;code&gt;beta()&lt;/code&gt;関数の、いくつかの死んだコードを整理(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10985&#34; target=&#34;_blank&#34;&gt;#10985&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;極値pdfの巨大な値の入力を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10938&#34; target=&#34;_blank&#34;&gt;#10938&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに使用しているグラフと方程式の画像を、PNGからSVGに切り替えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_BASE&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adl_move_swap()&lt;/code&gt;ユーティリティを追加した&lt;/li&gt;
&lt;li&gt;他のBoostライブラリへの依存関係を削減し、軽量化した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11044&#34; target=&#34;_blank&#34;&gt;#11044&lt;/a&gt; &lt;code&gt;boost::rv&lt;/code&gt;が&lt;code&gt;union&lt;/code&gt;から継承するケースがあったので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;検索で&lt;code&gt;key_type&lt;/code&gt;の一時オブジェクトが作られる状況を効率化した。以下のようなケースだ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt;;
  ...
  &lt;span style=&#34;color: #B00040&#34;&gt;multi_t&lt;/span&gt; m&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;...;
  m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;boost&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringではなくconst char*として渡される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これまでのバージョンでは、&lt;code&gt;find&lt;/code&gt;操作では&lt;code&gt;std::string&lt;/code&gt;型の一時オブジェクトがいくつか作られていた。十分に高度なコンパイラでは、一時オブジェクトはひとつだけ作られるようになった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メンテナンス上の修正を行った&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10993&#34; target=&#34;_blank&#34;&gt;#10993&lt;/a&gt; &lt;code&gt;frexp()&lt;/code&gt;関数は、Expression templateを常に使わないようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10924&#34; target=&#34;_blank&#34;&gt;#10924&lt;/a&gt; Cygwinやその他のプラットフォームでの&lt;code&gt;cpp_dec_float&lt;/code&gt;のサポートを改善した。&lt;code&gt;long double&lt;/code&gt;のサポートが欠如していた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10990&#34; target=&#34;_blank&#34;&gt;#10990&lt;/a&gt; &lt;code&gt;noexcept&lt;/code&gt;のサポートを改善し、さらなるテストを追加した。&lt;/li&gt;
&lt;li&gt;Intel 15.0とSolaris 12.4向けの、様々なワークアラウンドを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン3.2.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オプショナルな拡張として、遅延リストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たなコード例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bind()&lt;/code&gt;と&lt;code&gt;boost::phoenix::bind()&lt;/code&gt;の互換性を示すためのコード例&lt;code&gt;bind_goose&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10927&#34; target=&#34;_blank&#34;&gt;#10927&lt;/a&gt; &lt;code&gt;phoenix/test/stdlib/cmath.cpp&lt;/code&gt;での&lt;code&gt;fabs()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11085&#34; target=&#34;_blank&#34;&gt;#11085&lt;/a&gt; &lt;code&gt;phoenix/test/function/function_tests.cpp&lt;/code&gt;での&lt;code&gt;pow()&lt;/code&gt;関数の呼び出しに、&lt;code&gt;std::&lt;/code&gt;修飾が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;と&lt;code&gt;lambda&lt;/code&gt;と&lt;code&gt;let&lt;/code&gt;の、いくつかのテストケースが失敗していたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン1.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2015のバージョン番号が間違っていたので修正&lt;/li&gt;
&lt;li&gt;Haiku OSを判定するためのマクロ名が&lt;code&gt;BOOST_OS_BEOS&lt;/code&gt;になっていたので、&lt;code&gt;BOOST_OS_HAIKU&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;Android OSでのエンディアン判定が間違っていたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predef_check&lt;/code&gt;プログラムと、ビルド構成チェックのためのBBv2インテグレーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9D%9E%E5%BF%83%E3%82%AB%E3%82%A4%E4%BA%8C%E4%B9%97%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;非心カイ二乗分布&lt;/a&gt;である&lt;code&gt;non_central_chi_squared_distribution&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;バージョン4.5.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9600&#34; target=&#34;_blank&#34;&gt;#9600&lt;/a&gt; Async: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4088.pdf&#34; target=&#34;_blank&#34;&gt;n4088&lt;/a&gt;ベースの&lt;code&gt;task_region&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10611&#34; target=&#34;_blank&#34;&gt;#10611&lt;/a&gt; emplace版の&lt;code&gt;promise::set_value&lt;/code&gt;と&lt;code&gt;emplace make_ready_future&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10826&#34; target=&#34;_blank&#34;&gt;#10826&lt;/a&gt; スケジューラによるExecutorを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11048&#34; target=&#34;_blank&#34;&gt;#11048&lt;/a&gt; 継続ベースの&lt;code&gt;serial_executor&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt; システム時刻が巻き戻った時に&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10734&#34; target=&#34;_blank&#34;&gt;#10734&lt;/a&gt; &lt;code&gt;submit&lt;/code&gt;関数が異なるExecutorで異なる挙動をしていたのを修正。方や例外を投げ、方やエラーを握りつぶしていた(thread_executorとinline_executor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10736&#34; target=&#34;_blank&#34;&gt;#10736&lt;/a&gt; タスクが投げた例外を握りつぶしていた。一貫性の為に&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3785.pdf&#34; target=&#34;_blank&#34;&gt;N3785&lt;/a&gt;で提案された様に&lt;code&gt;std::terminate&lt;/code&gt;を呼ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10737&#34; target=&#34;_blank&#34;&gt;#10737&lt;/a&gt; &lt;code&gt;serial_executor&lt;/code&gt;において、タスクが例外を投げた場合に永遠に待ち続けるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10822&#34; target=&#34;_blank&#34;&gt;#10822&lt;/a&gt; AndroidでBoost.Threadがコンパイル出来なかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10824&#34; target=&#34;_blank&#34;&gt;#10824&lt;/a&gt; 1.57において、Windows XP SP2以前との互換性に問題があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10963&#34; target=&#34;_blank&#34;&gt;#10963&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then&lt;/code&gt;を実装した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10964&#34; target=&#34;_blank&#34;&gt;#10964&lt;/a&gt; &lt;code&gt;future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then()&lt;/code&gt;のデッドロックを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10968&#34; target=&#34;_blank&#34;&gt;#10968&lt;/a&gt; &lt;code&gt;async()&lt;/code&gt;が返す&lt;code&gt;future&lt;/code&gt;への&lt;code&gt;future::then()&lt;/code&gt;はブロックしなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10971&#34; target=&#34;_blank&#34;&gt;#10971&lt;/a&gt; &lt;code&gt;shared_future::get()&lt;/code&gt;と&lt;code&gt;shared_future::get_or()&lt;/code&gt;はconst修飾された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10972&#34; target=&#34;_blank&#34;&gt;#10972&lt;/a&gt; &lt;code&gt;shared_future::then()&lt;/code&gt;を複数回呼んでも問題なくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10979&#34; target=&#34;_blank&#34;&gt;#10979&lt;/a&gt; &lt;code&gt;make_ready_future&lt;/code&gt;に渡された&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;を&lt;code&gt;T&amp;amp;&lt;/code&gt;に推論するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10996&#34; target=&#34;_blank&#34;&gt;#10996&lt;/a&gt; Windowsで&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が失敗していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11035&#34; target=&#34;_blank&#34;&gt;#11035&lt;/a&gt; Androidで&lt;code&gt;BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE&lt;/code&gt;が定義されていなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/11053&#34; target=&#34;_blank&#34;&gt;#11053&lt;/a&gt; &lt;code&gt;run_thread_exit_callbacks&lt;/code&gt;で純粋仮想関数の呼び出しが行われていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_erasure&#34; name=&#34;type_erasure&#34;&gt;TypeErasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSVC12でのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームがサポートしている場合、リンク時のアサーションを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任意の次元における基底単位を修正(&lt;a href=&#34;https://github.com/boostorg/units/commit/423adb31c1eb9687d21a8af5506830a0de53a464&#34; target=&#34;_blank&#34;&gt;commit 423adb&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;状態を持ったアロケータを使った際のmove代入演算子の修正 (&lt;code&gt;propagate_on_container_move_assign&lt;/code&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10777&#34; target=&#34;_blank&#34;&gt;#10777&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バケットの数を計算する際にオーバーフローする可能性があったのを修正 &lt;a href=&#34;https://github.com/boostorg/unordered/pull/4&#34; target=&#34;_blank&#34;&gt;pull request 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その他の変更については&lt;a href=&#34;http://www.boost.org/doc/libs/master/doc/html/unordered/changes.html&#34; target=&#34;_blank&#34;&gt;changelog&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_58_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;: 取得関数(&lt;code&gt;boost::get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;及び&lt;code&gt;boost::polymorphic_get&amp;lt;U&amp;gt;(VariantT)&lt;/code&gt;)について、コンパイル時に検査を行う様に変更。新しい取得関数は&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;VariantT&lt;/code&gt;に格納でき無い場合コンパイルエラーとなる。&lt;code&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/code&gt;を定義することでデフォルトの挙動を戻すことが出来る。&lt;code&gt;get.hpp&lt;/code&gt;、&lt;code&gt;polymorphic_get.hpp&lt;/code&gt;及び&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/547&#34; target=&#34;_blank&#34;&gt;#547&lt;/a&gt;を参照のこと&lt;/li&gt;
&lt;li&gt;不足していた比較関数を追加 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8620&#34; target=&#34;_blank&#34;&gt;#8620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10811&#34; target=&#34;_blank&#34;&gt;#10811&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10273&#34; target=&#34;_blank&#34;&gt;#10273&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10653&#34; target=&#34;_blank&#34;&gt;#10653&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clangで可変長テンプレートを有効に &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10832&#34; target=&#34;_blank&#34;&gt;#10832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VisitorにてC++14の自動的な戻り値の型推論をできるようにした。これにより&lt;code&gt;boost::apply_visitor&lt;/code&gt;でgeneric lambdasを使用することができるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(
      [](&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; v) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
      },
      variant_instance
  );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.4, 4.9.2&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.8, 4.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
</feed>