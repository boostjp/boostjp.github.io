<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-12-22T14:05:00.423008</updated>
  <id>25a22d6c-da8b-4e74-9dd9-4885a75ee312</id>

  
    <entry>
      <title>Boost 1.71.0リリースノート -- 1.71.0リリースノート : Geometryを追加 (close #421)</title>
      <link href="https://boostjp.github.io/document/version/1_71_0.html"/>
      <id>85a3ee48dc13847e2a9fc5f9f8466697ee321f4e:document/version/1_71_0.md</id>
      <updated>2019-12-13T13:32:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.71.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_71_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_71_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_71_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/variant2/&#34; target=&#34;_blank&#34;&gt;Variant2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;valuelessにならず、強い例外安全性をもつ&lt;code&gt;std::variant&lt;/code&gt;の実装。作者Peter Dimov&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34;&gt;Align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#align&#34; id=&#34;align&#34;&gt;Align&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;align_up&lt;/code&gt;と&lt;code&gt;align_down&lt;/code&gt;の整数版を、全ての整数型向けにサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;の実装を改善し、&lt;code&gt;void&lt;/code&gt;型への特殊化を要求しないようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aligned_allocator&lt;/code&gt;に&lt;code&gt;propagate_on_container_move_assignment&lt;/code&gt;と&lt;code&gt;is_always_equal&lt;/code&gt;を定義&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::any&lt;/code&gt;のデフォルト構築を静的初期化できるようにした&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスをもたないコンパイラでの、代入のパフォーマンス低下を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完了ハンドラがディスパッチされる際の不要なムーブ構築を排除したことにより、パフォーマンスがわずかに改善した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;フリー関数の実装で&lt;code&gt;case&lt;/code&gt;のフォールスルーにアノテーションをつけたことにより、コンパイラの警告をなくした&lt;/li&gt;
&lt;li&gt;ユーザー定義シーケンス向けの&lt;code&gt;is_*_buffer_sequence&lt;/code&gt;検出トレイトを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CancelIoEx&lt;/code&gt;エントリポイントを取得する際の互換性のないポインタキャストについての、Windows固有の警告を修正&lt;/li&gt;
&lt;li&gt;Windowsでシリアルポートを開く際のデフォルトを、自動で設定するよう変更した&lt;/li&gt;
&lt;li&gt;シリアルポートの&lt;code&gt;get_option()&lt;/code&gt;メンバ関数を&lt;code&gt;const&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;WinRTストリーム指向ソケットバックエンドの&lt;code&gt;shutdown()&lt;/code&gt;関数の、name hiding問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dynamic_buffer&lt;/code&gt;のドキュメントの、小さな修正を適用&lt;/li&gt;
&lt;li&gt;Haiku OSのいくつかのサポートを追加&lt;/li&gt;
&lt;li&gt;wolfSSL互換を追加&lt;/li&gt;
&lt;li&gt;ClangでのCoroutine TSのサポートを、C++17以降を要求するよう変更&lt;/li&gt;
&lt;li&gt;チュートリアルのDoxygen生成の問題を修正&lt;/li&gt;
&lt;li&gt;サンプルプログラムがドキュメントに正しく組み込まれていることを確認&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このバージョンは主にバグ修正とパフォーマンス改善で構成される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BEAST_SEPARATE_COMPILATION&lt;/code&gt;を定義した際にコンパイル時間を減らすため、分割コンパイルのための多くの作業を行った&lt;/li&gt;
&lt;li&gt;Beastを使用しているユーザーとユーザー企業を知りたい。GitHub Wikiページ「&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;」にリストアップしている&lt;/li&gt;
&lt;li&gt;完全な変更リストは&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/beast/doc/html/beast/release_notes.html&#34; target=&#34;_blank&#34;&gt;Release Noteページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenで生成されたリファレンスドキュメントに内部メンバが出力されていたのを修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;と&lt;code&gt;sub&lt;/code&gt;に対するUBSanの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_uninitialized&lt;/code&gt;のチェックが間違っていた問題を修正 (Niklas Fejes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#container&#34; id=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;にアライメント仕様を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/88&#34; target=&#34;_blank&#34;&gt;GitHub #88&lt;/a&gt; 自己ムーブ代入に関するC++17のMoveAssignable要件を実装 (自己ムーブ代入したあともrhs側はvalidな状態でなければならない)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;resource_adaptor&lt;/code&gt;でアライメント指定が無視される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; &lt;code&gt;-fsanitize=integer&lt;/code&gt;で見つかったcopy_move_algo.hppでの整数オーバーフローを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; GCC 9でnew_allocator.hpp内の暗黙定義されないコピー代入の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; msvc10..12で&lt;code&gt;vector::resize()&lt;/code&gt;がコンパイルエラーになる問題を修正。「data is not a member of &lt;code&gt;boost::detail::aligned_storage&lt;/code&gt;」という内容のエラーが起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/114&#34; target=&#34;_blank&#34;&gt;GitHub #114&lt;/a&gt; &lt;code&gt;small_vector&lt;/code&gt;の&lt;code&gt;noexcept&lt;/code&gt;仕様を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; MSVC + boost 1.70でwindows.hがすでにインクルードされている場合にコンパイルエラーになる問題を修正 (detail/thread_mutex.hpp)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/117&#34; target=&#34;_blank&#34;&gt;GitHub #117&lt;/a&gt; ヒント付きの&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;map::insert_or_assign&lt;/code&gt;の戻り値型が間違っていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/118&#34; target=&#34;_blank&#34;&gt;GitHub #118&lt;/a&gt; &lt;code&gt;flat_tree_merge_unique&lt;/code&gt;内でuniqueでない&lt;code&gt;inplace_set_difference&lt;/code&gt;が使用されていた問題と、&lt;code&gt;insert_unique&lt;/code&gt;内でのイテレータ無効化を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/122&#34; target=&#34;_blank&#34;&gt;GitHub #122&lt;/a&gt; &lt;code&gt;has_trivial_destructor_after_move&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/issues/123&#34; target=&#34;_blank&#34;&gt;GitHub #123&lt;/a&gt; 異種混合探索 (heterogeneous lookup) において、&lt;code&gt;equal_range&lt;/code&gt;が1より大きい範囲を返せるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;に、ブロックサイズ・ブロックバイト数を指定できるようにするカスタマイズ機能として&lt;code&gt;deque_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_vector&lt;/code&gt;に、オーバーフロー時に例外を発生させる、およびアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;static_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_vector&lt;/code&gt;に、伸長ポリシー (growth factor) とアライメントを指定できるようにするカスタマイズ機能として&lt;code&gt;small_vector_options&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RISC-V LP64Dのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; ppc64 ELFv2のABI違反を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/99&#34; target=&#34;_blank&#34;&gt;GitHub #99&lt;/a&gt; ucontextの作成に失敗した際にスタックをクリーンアップするよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/core/alloc_construct.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、アロケータを考慮したオブジェクトと配列の例外安全な構築と破棄の機能を提供する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/first_scalar.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、配列の最初のスカラ要素へのポインタを取得する関数&lt;code&gt;first_scalar()&lt;/code&gt;を提供する。型&lt;code&gt;T*&lt;/code&gt;が与えられると、&lt;code&gt;remove_all_extents_t&amp;lt;T&amp;gt;*&lt;/code&gt;型のポインタが返る (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/noinit_adaptor.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;noinit_adaptor&lt;/code&gt;クラステンプレートを提供する。このクラスは&lt;code&gt;construct(ptr)&lt;/code&gt;呼び出しで配置newを通してデフォルト初期化を行い、&lt;code&gt;destroy(ptr)&lt;/code&gt;呼び出しで&lt;code&gt;value_type&lt;/code&gt;のデストラクタを直接呼び出す (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/core/default_allocator.hpp&lt;/code&gt;ヘッダを追加。このヘッダは、&lt;code&gt;default_allocator&lt;/code&gt;クラステンプレートを提供する。このクラスはC++20の&lt;code&gt;std::allocator&lt;/code&gt;に似た最小のデフォルトアロケータとして機能し、例外を無効化する設定を持ち、関連名前空間として&lt;code&gt;std&lt;/code&gt;を持たない。このアロケータはメモリ割り当てに&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;を使用する (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/core/issues/59&#34; target=&#34;_blank&#34;&gt;GitHub #59&lt;/a&gt; &lt;code&gt;boost/core/uncaught_exceptions.hpp&lt;/code&gt;ヘッダに、libc++ / libc++abiライブラリを使用した際のQNX SDP 7.0との互換性を改善するワークアラウンドを追加 (Andrey Semashev氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/detail/sp_typeinfo.hpp&lt;/code&gt;ヘッダを非推奨化し、将来のリリースで削除する予定となった。代わりに&lt;code&gt;boost/core/typeinfo.hpp&lt;/code&gt;を使用すること (Peter Dimov氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/38&#34; target=&#34;_blank&#34;&gt;GitHub #38&lt;/a&gt; MSVCでハードウェア支援のあるpopcountを有効にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;boost::hash&lt;/code&gt;と&lt;code&gt;std::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/48&#34; target=&#34;_blank&#34;&gt;GitHub #48&lt;/a&gt; デフォルトコンストラクタを非explicitにし、コピー初期化構文を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;値型テンプレートパラメータの要件を明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;と&lt;code&gt;double&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_load&lt;/code&gt;と&lt;code&gt;endian_store&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;を、非&lt;code&gt;bool&lt;/code&gt;の全ての整数型を正しくサポートするよう更新&lt;/li&gt;
&lt;li&gt;非推奨の名前を、&lt;code&gt;endian.hpp&lt;/code&gt;に移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#fiber&#34; id=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_work&lt;/code&gt;のドキュメントを更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;directory iteratorのインクリメント時に&lt;code&gt;readdir_r&lt;/code&gt;が使用されていた場合に、間違った&lt;code&gt;error_code&lt;/code&gt;が返る問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/110&#34; target=&#34;_blank&#34;&gt;GitHub #110&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;の右辺値版&lt;code&gt;operator/&lt;/code&gt;の戻り値型を、右辺値参照ではなく右辺値を返すよう修正。これによるぶら下がり参照 (dangling reference) の問題が起きていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; Windows CEとの互換性を向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/106&#34; target=&#34;_blank&#34;&gt;GitHub #106&lt;/a&gt; CMakeを小さくサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/568&#34; target=&#34;_blank&#34;&gt;GitHub #568&lt;/a&gt; &lt;code&gt;matrix_transformer&lt;/code&gt;に&lt;code&gt;matrix_type&lt;/code&gt;をとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/605&#34; target=&#34;_blank&#34;&gt;GitHub #605&lt;/a&gt; さまざまなアルゴリズムの座標系ハンドリングを改善&lt;/li&gt;
&lt;li&gt;集合と関係の操作の堅牢性に関するさまざまな改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/596&#34; target=&#34;_blank&#34;&gt;GitHub #596&lt;/a&gt; &lt;code&gt;boost::geometry::buffer&lt;/code&gt;がスパイク付きの&lt;code&gt;(multi)polygon&lt;/code&gt;を生成する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/595&#34; target=&#34;_blank&#34;&gt;GitHub #595&lt;/a&gt; geographic座標系でのpoint-segment間のdistance計算が不正確だった問題を修正&lt;/li&gt;
&lt;li&gt;さまざまなコンパイラ警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;スレッドセーフなストレージとスレッドセーフな新たなaccumulatorをサポート&lt;/li&gt;
&lt;li&gt;例外とRTTIを無効化したコンパイルをサポート (10-20%ほどパフォーマンスがよくなる) (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;1D・2Dヒストグラムのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed&lt;/code&gt;がinput iterator rangeではなくforward iterator rangeを返すようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::indexed_range::accessor&lt;/code&gt;をコピー不可にしてセル値 (cell value) への参照のように振る舞うようにし、C++標準ライブラリのより多くのアルゴリズムで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;にスライス・オプションを追加し、オプションを合成できるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::project&lt;/code&gt;が静的ヒストグラムに実行時インデックス列を受けられるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::algorithm::reduce&lt;/code&gt;がreduction supportを必要とせず、いくつかの軸型 (axis type) をもつヒストグラムに対して動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::histogram::axis::traits::update&lt;/code&gt;が&lt;code&gt;boost::histogram::axis::variant&lt;/code&gt;に対して正しく動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;テストカバレッジを100%にした&lt;/li&gt;
&lt;li&gt;依存するBoostライブラリを減らした&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードを改善&lt;/li&gt;
&lt;li&gt;全ての組み込み軸型でムーブが例外を送出しないことを保証&lt;/li&gt;
&lt;li&gt;高い警告レベルでもコンパイルで警告がでないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詳細は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/histogram/doc/html/histogram/history.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#interprocess&#34; id=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/85&#34; target=&#34;_blank&#34;&gt;GitHub #85&lt;/a&gt; 整数の精度が落ちる警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt; カンマ演算子の使い方が間違っている可能性がある警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#intrusive&#34; id=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/issues/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ドキュメントがtreap &lt;code&gt;priority_of_value&lt;/code&gt;の変更を説明していなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/43&#34; target=&#34;_blank&#34;&gt;GitHub #43&lt;/a&gt; &lt;code&gt;BOOST_INTRUSIVE_VARIADIC_TEMPLATES&lt;/code&gt;が有効の場合のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; MSVC-12で内部コンパイラエラーを回避するために可変引数テンプレートを無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#iostreams&#34; id=&#34;iostreams&#34;&gt;IoStreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/87&#34; target=&#34;_blank&#34;&gt;GitHub #87&lt;/a&gt; マルチストリーム・ファイルの処理を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/iostreams/pull/95&#34; target=&#34;_blank&#34;&gt;GitHub #95&lt;/a&gt; LZMA圧縮のマルチスレッド・サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; &lt;code&gt;boost::filesystem::path&lt;/code&gt;の変換を行うテストを追加&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; のテスト失敗修正を含む&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;でのC++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを改善。文字コード変換の出力としてstring viewが使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_newline&lt;/code&gt;フォーマッタとストリーム・マニピュレータを追加。改行の重複を避けながら、フォーマットされた出力を常に改行でおわらせるよう使用できる&lt;/li&gt;
&lt;li&gt;出力ストリームにおいて、text file / text multi-file sink backendに、フォーマットされた全てのログレコードの末尾に改行を追加する動作を設定できるサポートを追加した。バックエンド・コンストラクタの名前付きパラメータ&lt;code&gt;auto_newline_mode&lt;/code&gt;を使用するか、sink backendの&lt;code&gt;set_auto_newline_mode()&lt;/code&gt;メンバ関数を呼ぶこと&lt;/li&gt;
&lt;li&gt;注：sink backendに末尾改行を追加するデフォルトの動作は、Boost.Logの以前のリリースからわずかに変更になった。バックエンドは、フォーマットされた文字列に末尾改行がない場合にのみ改行を追加するようになった。以前のリリースでは、改行は無条件に追加されていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt; 任意の関数オブジェクトを渡せる名前付きパラメータ&lt;code&gt;filter&lt;/code&gt;と&lt;code&gt;format&lt;/code&gt;を追加。これはsinkのコンストラクタとsinkを初期化する便利関数で使用できる。例として、C++11のラムダ式をこれらのパラメータで直接指定できるようになった&lt;/li&gt;
&lt;li&gt;filterとformatterのパーサーで使用されるデフォルトのファクトリに、&lt;code&gt;boost::log::trivial::severity_level&lt;/code&gt;型の重要度レベルを設定できるようにした。フィルタの場合、属性は&lt;code&gt;&#34;Severity&#34;&lt;/code&gt;という名前に限定される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; text file sink backendのファイル・スキャニングにおいて、rotateするファイル名のコンポーネントの解析が間違っていた問題を修正した。ファイル名パターンがプレースホルダでおわる場合 (たとえばファイルカウンタ)、&lt;code&gt;scan_for_files()&lt;/code&gt;メンバ関数はターゲット・ストレージからそのパターンに一致するファイルを見つけられず、管理されないままになっていた。そのようなファイルはターゲット・ストレージから削除されず、残ってしまっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt; &lt;code&gt;basic_formatting_ostream&lt;/code&gt;と&lt;code&gt;basic_record_ostream&lt;/code&gt;がユーザー定義型へのポインタに対するストリーム演算子のオーバーロードを定義できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より詳細な変更は&lt;a href=&#34;https://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;Changelog&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;Catmull-Rom interpolatorがC++11で動作するようにした&lt;/li&gt;
&lt;li&gt;カーディナル2次B-スプライン補間 (Cardinal quadratic B-spline interpolation)&lt;/li&gt;
&lt;li&gt;楕円積分のドメイン拡張&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_pi&lt;/code&gt;と&lt;code&gt;cos_pi&lt;/code&gt;のパフォーマンス改善&lt;/li&gt;
&lt;li&gt;フォワードモードの自動微分&lt;/li&gt;
&lt;li&gt;ベクトル値の重心有理補間 (barycentric rational interpolation)&lt;/li&gt;
&lt;li&gt;フーリエ積分 (Fourier integrals) の評価に使用するOoura法 (Ooura&#39;s method)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Multiprecisionとの互換性を修正&lt;/li&gt;
&lt;li&gt;レアなアーキテクチャでのLambert-Wを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#metaparse&#34; id=&#34;metaparse&#34;&gt;Metaparse&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;以下の機能をC++11の可変引数テンプレートに対応した：&lt;code&gt;sequence&lt;/code&gt;, &lt;code&gt;one_of_c&lt;/code&gt;, &lt;code&gt;one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of&lt;/code&gt;, &lt;code&gt;repeated_one_of1&lt;/code&gt;, &lt;code&gt;one_char_except_c&lt;/code&gt;, &lt;code&gt;one_char_except&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_METAPARSE_STRING&lt;/code&gt;が範囲外の文字をテンプレート引数として使用できなかった問題を修正&lt;/li&gt;
&lt;li&gt;C++14において&lt;code&gt;any_of_c&amp;lt;&amp;gt;&lt;/code&gt;が空配列を作成しなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#move&#34; id=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;adaptive_sort_combine_blocks&lt;/code&gt;内の最後のイテレーションにおいて、イテレータに対する不正なインクリメント・デクリメントが行われていた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-array&#34; id=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coreの&lt;code&gt;alloc_construct_n&lt;/code&gt;、&lt;code&gt;alloc_destroy_n&lt;/code&gt;を使用することでアロケータサポートを簡略化 (Glen Fernandes)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 参照修飾とCV修飾の組み合わせをサポートするため、&lt;code&gt;mem_fun&lt;/code&gt;と&lt;code&gt;const_mem_fun&lt;/code&gt;のバリエーションを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cv_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cvref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() const volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() &amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vref_mem_fun&lt;/code&gt; (&lt;code&gt;R mf() volatile&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; &lt;code&gt;key&lt;/code&gt;が&lt;code&gt;noexcept&lt;/code&gt;付き関数を正しくハンドリングできるようにした&lt;ul&gt;
&lt;li&gt;C++17で例外仕様が型の一部になった影響&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34; target=&#34;_blank&#34;&gt;C++17 例外仕様を型システムの一部にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;機能拡張&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; Boostのリリースマネージャからの要求に従い、&lt;code&gt;version.hpp&lt;/code&gt;と&lt;code&gt;revision.hpp&lt;/code&gt;をdetailディレクトリ以下に移動した。それと、不足していたソースコード中のライセンス表記を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/185&#34; target=&#34;_blank&#34;&gt;GitHub #185&lt;/a&gt; このIssueで報告された、&lt;code&gt;std::launder()&lt;/code&gt;を使わなければ未定義動作になるケースについてFAQを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/189&#34; target=&#34;_blank&#34;&gt;GitHub #189&lt;/a&gt; &lt;code&gt;OUTCOME_TRY&lt;/code&gt;の実装をリファクタし、外からの入力を受け付けられるカスタマイゼーション・ポイントであることをより明確にした。&lt;code&gt;std::experimental::expected&amp;lt;T, E&amp;gt;&lt;/code&gt;の特殊化は不要になったので削除した。カスタマイゼーション・ポイントについて以前はADLによって検知するとドキュメントに書いていたが、実際はそうではなかったので説明を修正した。外部入力をどのように追加すればよいかを記載した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/183&#34; target=&#34;_blank&#34;&gt;GitHub #183&lt;/a&gt; Boost用に、motivationとplug_error_codeを分けた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_VERSION_MINOR&lt;/code&gt;を1に更新した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/181&#34; target=&#34;_blank&#34;&gt;GitHub #181&lt;/a&gt; ドキュメント化されているにも関わらず、Outcomeがswap操作の強い保証を実装していなかったので修正した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/190&#34; target=&#34;_blank&#34;&gt;GitHub #190&lt;/a&gt; Boost版のテストスイートがリリースディストリビューションで実行できなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/182&#34; target=&#34;_blank&#34;&gt;GitHub #182&lt;/a&gt; &lt;code&gt;trait::is_exception_ptr_available&amp;lt;T&amp;gt;&lt;/code&gt;が常に&lt;code&gt;true&lt;/code&gt;になっていたため、診断メッセージが表示されず、全てを&lt;code&gt;make_exception_ptr()&lt;/code&gt;に渡そうとしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/192&#34; target=&#34;_blank&#34;&gt;GitHub #192&lt;/a&gt; スタンドアローン版とBoost版を組み合わせた場合、翻訳単位に&lt;code&gt;std::basic_outcome_failure_exception_from_error()&lt;/code&gt;が2回定義されてしまっていたのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#parameter&#34; id=&#34;parameter&#34;&gt;Parameter&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/15&#34; target=&#34;_blank&#34;&gt;GitHub #15&lt;/a&gt; キーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_TEMPLATE_KEYWORD&lt;/code&gt;を更新。関数をパラメータとして受け付けられるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; Boost Accumulators Libraryからキーワード生成マクロ&lt;code&gt;BOOST_PARAMETER_NESTED_KEYWORD&lt;/code&gt;を移動した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/16&#34; target=&#34;_blank&#34;&gt;GitHub #16&lt;/a&gt; &lt;code&gt;std::reference_wrapper&lt;/code&gt;と&lt;code&gt;std::ref()&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; &lt;code&gt;boost::parameter::required&lt;/code&gt;、&lt;code&gt;boost::parameter::optional&lt;/code&gt;、&lt;code&gt;boost::parameter::deduced&lt;/code&gt;メタ関数の定義を、&lt;code&gt;boost/parameter&lt;/code&gt;ディレクトリ内に移動&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/20&#34; target=&#34;_blank&#34;&gt;GitHub #20&lt;/a&gt; Boost.Parameterを有効にした関数呼び出し演算子を生成できるようにした。&lt;code&gt;&amp;lt;boost/parameter/preprocessor.hpp&amp;gt;&lt;/code&gt;に、コード生成マクロ&lt;code&gt;BOOST_PARAMETER_FUNCTION_CALL_OPERATOR&lt;/code&gt;と&lt;code&gt;BOOST_PARAMETER_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/21&#34; target=&#34;_blank&#34;&gt;GitHub #21&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt; パラメータのカテゴリ修飾として&#34;forward&#34;、&#34;consume&#34;、&#34;move_from&#34;を追加 (現在の修飾は&#34;in&#34;、&#34;out&#34;、&#34;in_out&#34;)&lt;ul&gt;
&lt;li&gt;以下の記事がベースとなっている： &lt;a href=&#34;http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters&#34; target=&#34;_blank&#34;&gt;C++ Core Guidelines: The Rules for in, out, in-out, consume, and forward Function Parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;このカテゴリ修飾の追加にともなって、新たな構文を2つ追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME((object-name), namespace-name) qualifier(tag-name))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME(qualifier(name))&lt;/code&gt; (&lt;code&gt;BOOST_PARAMETER_NAME(consume(my_param))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NAME&lt;/code&gt;を正しく使用した既存コードは影響を受けないはずなので、破壊的変更はない&lt;/li&gt;
&lt;li&gt;使い方が変更になった理由は、引数を合成したBoost.Parameterが有効になった関数とコンストラクタにパラメータ・カテゴリの制約を適用するため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/23&#34; target=&#34;_blank&#34;&gt;GitHub #23&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; 完全転送のサポートを追加。その結果、&lt;code&gt;parameter::parameters::operator()&lt;/code&gt;が非constの右辺値を受け取れるようになった。これによるいい影響として、完全転送をサポートするコンパイラでは&lt;code&gt;BOOST_PARAMETER_MAX_ARITY&lt;/code&gt;の制約に縛られなくなる。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_HAS_PERFECT_FORWARDING&lt;/code&gt;で完全転送が有効かを確認でき、マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING&lt;/code&gt;によって手動で完全転送のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;以下のメタ関数を追加：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/27&#34; target=&#34;_blank&#34;&gt;GitHub #27&lt;/a&gt; &lt;code&gt;boost::parameter::is_argument_pack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;boost::parameter::are_tagged_arguments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;boost::parameter::result_of::compose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 可変引数テンプレート関数&lt;code&gt;boost::parameter::compose()&lt;/code&gt;を追加。これは名前付きパラメータをとって引数パックにして返す。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/61&#34; target=&#34;_blank&#34;&gt;GitHub #61&lt;/a&gt; 完全転送をサポートしないコンパイラの場合、設定マクロ&lt;code&gt;BOOST_PARAMETER_COMPOSE_MAX_ARITY&lt;/code&gt;が&lt;code&gt;boost::parameter::compose()&lt;/code&gt;がとれる引数の最大数になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; 以下のコード生成マクロを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/parameter/pull/70&#34; target=&#34;_blank&#34;&gt;GitHub #70&lt;/a&gt; Boost.MP11のサポートを追加。ユーザーはマクロ&lt;code&gt;BOOST_PARAMETER_CAN_USE_MP11&lt;/code&gt;を使用してBoost.MP11がサポートされているかを確認できる。マクロ&lt;code&gt;BOOST_PARAMETER_DISABLE_MP11_USAGE&lt;/code&gt;によって手動でBoost.MP11のサポートを無効化できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/parameter/pull/73&#34; target=&#34;_blank&#34;&gt;GitHub #73&lt;/a&gt; SFINAEによるパラメータ依存の戻り値型のサポートを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#ptr-container&#34; id=&#34;ptr-container&#34;&gt;PtrContainer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/ptr_container/pull/24&#34; target=&#34;_blank&#34;&gt;GitHub #24&lt;/a&gt; 1.66.0から導入されたレグレッションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#smart_ptr&#34; id=&#34;smart_ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/boostorg/smart_ptr/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;weak_ptr&lt;/code&gt;クラスに、エイリアス・コンストラクタ (aliasing constructors) を追加
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは、&lt;code&gt;weak_from_this()&lt;/code&gt;を使用する際に必要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これらのコンストラクタがない場合は、以下のようなコードとなる：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;static_pointer_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_from_this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt;::empty()&lt;/code&gt;を追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;基本クラス、&lt;code&gt;shared_from()&lt;/code&gt;、&lt;code&gt;weak_from()&lt;/code&gt;関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enable_shared_from&lt;/code&gt;は、&lt;code&gt;enable_shared_from_this&lt;/code&gt;と違って非テンプレートなクラスである。このクラスを基底クラスとすることで、&lt;code&gt;this&lt;/code&gt;を生ポインタ、&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;weak_ptr&lt;/code&gt;として取得する機能が使用できるようになる。新たに書くコードでは、&lt;code&gt;enable_shared_from_this&lt;/code&gt;よりもこちらを使用することを推奨する

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_shared_from&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++98モードのthread sanitizer buildで報告された&lt;code&gt;name()&lt;/code&gt;、&lt;code&gt;source_location()&lt;/code&gt;、&lt;code&gt;source_line()&lt;/code&gt;の出力を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; MSVCでの&lt;code&gt;name()&lt;/code&gt;と&lt;code&gt;source_location()&lt;/code&gt;の長い文字列出力を修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.11&lt;/li&gt;
&lt;li&gt;詳細な変更は&lt;a href=&#34;https://www.boost.org/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Chang Log&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;非推奨になっている非常に古いヘッダーを使用した場合に、非推奨の警告を表示するようにした。このような警告が表示された場合は、指示に従ってほしい。これらのヘッダーは将来のリリースで削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロを抽象型の比較に使用できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/209&#34; target=&#34;_blank&#34;&gt;GitHub #209&lt;/a&gt; &lt;code&gt;BOOST_TEST_CHECK&lt;/code&gt;で抽象型を比較できない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/218&#34; target=&#34;_blank&#34;&gt;GitHub #218&lt;/a&gt; テストスイートのデフォルトファイル名がドキュメントと違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/219&#34; target=&#34;_blank&#34;&gt;GitHub #219&lt;/a&gt; 未使用変数の警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; 非推奨ヘッダーに&lt;code&gt;BOOST_HEADER_DEPRECATED&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;あらゆる種類の文字列を出力ストリームに最適に書き込めるユーティリティ関数として、&lt;code&gt;ostream_string&lt;/code&gt;を&lt;code&gt;boost/utility/ostream_string.hpp&lt;/code&gt;に実装した。この関数は[ostream.formatted.reqmts]の要件を満たす (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_string_view&lt;/code&gt;と&lt;code&gt;basic_string_ref&lt;/code&gt;のストリーム出力演算子を、&lt;code&gt;rdbuf&lt;/code&gt;ストリームバッファに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#uuid&#34; id=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; : &lt;a href=&#34;https://github.com/boostorg/uuid/pull/109&#34; target=&#34;_blank&#34;&gt;GitHub #109&lt;/a&gt; MD5ベースのUUID生成が、全てのエンディアンシステムで同一となるよう修正した。1.66.0から1.70.0までの動作と互換性を保ちたい場合は、&lt;code&gt;BOOST_UUID_COMPAT_PRE_1_71_MD5&lt;/code&gt;をdefineすること。この修正は、SHA1ベースのデフォルトのUUID生成には影響しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/68&#34; target=&#34;_blank&#34;&gt;GitHub #68&lt;/a&gt; 非const参照の&lt;code&gt;variant&lt;/code&gt;を渡したときの&lt;code&gt;boost::apply_visitor&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/issues/49&#34; target=&#34;_blank&#34;&gt;GitHub #49&lt;/a&gt; &lt;code&gt;std::hash&lt;/code&gt;のサポートを追加。この定義を避ける場合は&lt;code&gt;BOOST_VARIANT_DO_NOT_SPECIALIZE_STD_HASH&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/63&#34; target=&#34;_blank&#34;&gt;GitHub #63&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/66&#34; target=&#34;_blank&#34;&gt;GitHub #66&lt;/a&gt; バイナリサイズとパフォーマンスの小さな最適化を追加 (Nikita Kniazev氏)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/64&#34; target=&#34;_blank&#34;&gt;GitHub #64 (Nikita Kniazev氏)&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/variant/pull/67&#34; target=&#34;_blank&#34;&gt;GitHub #67 (Hans Dembinski氏)&lt;/a&gt;を含むメンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_71_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;YAP式を自己評価 (self evaluating) する方法を示す例を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Geometryを追加 (close #420)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>ac971c58d4aefa823c317fba0ccbea568cbc729a:document/version/1_72_0.md</id>
      <updated>2019-12-13T13:27:31+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;async_initiate&lt;/code&gt;ヘルパ関数を、C++11以降向けに自動的に戻り値型を推論するよう変更した&lt;/li&gt;
&lt;li&gt;C++14向けに、全ての非同期操作で自動的に戻り値型を推論するよう変更した。これにより、完了トークンの実装によって、型消去なしで非同期操作の初期化を、初期化関数に組み込むことができる。&lt;ul&gt;
&lt;li&gt;戻り値型を推論する完了トークンをサポートするのがC++14以降であることに注意。C++11以前の場合、完了トークンの&lt;code&gt;async_result&lt;/code&gt;特殊化は、入れ子型&lt;code&gt;result_type&lt;/code&gt;を提供する必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_initiate&lt;/code&gt;にコンセプトのサポートを導入した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;completion_signature&amp;lt;T&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が&lt;code&gt;R(Args...)&lt;/code&gt;のシグニチャ形式であることをチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completion_handler_for&amp;lt;T, Signature&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が指定されたシグニチャの完了ハンドラを使用できるかをチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completion_token_for&amp;lt;T, Signature&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が&lt;code&gt;async_initiate&lt;/code&gt;と指定されたシグニチャで使用できる完了トークンかをチェック&lt;/li&gt;
&lt;li&gt;コンセプトのないC++での後方互換性のために、以下のマクロを提供する。&lt;code&gt;BOOST_ASIO_COMPLETION_SIGNATURE&lt;/code&gt;、&lt;code&gt;BOOST_ASIO_COMPLETION_HANDLER_FOR&lt;/code&gt;、&lt;code&gt;BOOST_ASIO_COMPLETION_TOKEN_FOR&lt;/code&gt;。これらのマクロは、コンセプトのサポートがない環境で&lt;code&gt;typename&lt;/code&gt;に展開される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全てのI/Oオブジェクト型に、入れ子テンプレート型&lt;code&gt;rebind_executor&lt;/code&gt;を追加。これは以下のように使用する：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_socket_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rebind_executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入れ子型&lt;code&gt;executor_type&lt;/code&gt;とメンバ関数&lt;code&gt;get_executor()&lt;/code&gt;を介して、関連するI/O executorに報告するよう初期化関数オブジェクトを変更した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;executor_type&lt;/code&gt;と&lt;code&gt;get_executor()&lt;/code&gt;はオプションとして扱われるべきであり、&lt;code&gt;associated_executor&lt;/code&gt;と&lt;code&gt;get_associated_executor()&lt;/code&gt;ヘルパ関数を介してそれらのアクセスすることが望ましい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default_completion_token&lt;/code&gt;トレイトを追加した。これはI/O executor型に、非同期操作で使用する関連するデフォルトの完了トークン型を与える。このトレイトは、非同期操作の宣言で以下のように使用する：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CompletionToken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_completion_token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executor_type&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_fyz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;CompletionToken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_completion_token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executor_type&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特殊化されない場合、トレイトの&lt;code&gt;type&lt;/code&gt;は&lt;code&gt;void&lt;/code&gt;となり、I/O executorに渡されるデフォルトの完了トークンがないことを意味する。&lt;/li&gt;
&lt;li&gt;このトレイトは&lt;code&gt;use_awaitable&lt;/code&gt;完了トークン向けに特殊化されており、非同期操作を以下のように使用することを許可する：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_awaitable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_default_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;co_await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デフォルトはuse_awaitable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この例では、&lt;code&gt;socket&lt;/code&gt;オブジェクトの型は&lt;code&gt;tcp::socket&lt;/code&gt;から変換され、デフォルトの完了トークンが&lt;code&gt;use_awaitable&lt;/code&gt;に設定されたI/O executorを持つ。ほかの方法として、ソケットの型を直接計算することもできる：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp_socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;use_awaitable_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;as_default_on_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tcp_socket&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;co_await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デフォルトはuse_awaitable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;async_initiate&lt;/code&gt;に、不足していたWindows固有のI/Oオブジェクトの非同期操作のサポートを追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executor型が、acceptした新たなソケットに伝播されるようにした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新たな接続を同期もしくは非同期にacceptし、しかしexecutorもしくはexecution contextを指定しない場合に、accept操作がacceptorからsocketに、executor typeを正しく伝播するようにした。例として、以下のacceptor型の場合：

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;acceptされたsocketの型は以下のようになる：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;basic_stream_socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Protocol&lt;/code&gt;の要件として、コピーとムーブの操作が例外を送出しないよう変更した&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Endpoint&lt;/code&gt;の要件として、デフォルトコンストラクタとムーブの操作が例外を送出しないよう変更した&lt;/li&gt;
&lt;li&gt;protocolのアクセッサに、&lt;code&gt;noexcept&lt;/code&gt;修飾を追加&lt;/li&gt;
&lt;li&gt;socketのムーブコンストラクタに、&lt;code&gt;noexcept&lt;/code&gt;修飾を追加&lt;/li&gt;
&lt;li&gt;Windowsでのシリアルポートを開く操作に関連した以下のissueを修正：&lt;ul&gt;
&lt;li&gt;RTS制御フラグを初期化するために、正しい定数を使用するようにした&lt;/li&gt;
&lt;li&gt;デフォルトのボーレート (baud rate) を設定 (9600)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非同期のaccept操作が自動的に再起動されたときに発生する可能性のある、「未処理の作業数」が失われる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/500&#34; target=&#34;_blank&#34;&gt;GitHub #500&lt;/a&gt; 剛体反転の問題 (inverse geodesic problem) に、内部でKarney&#39;s solutionを使用するようにした (Adeel Ahmad氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/561&#34; target=&#34;_blank&#34;&gt;GitHub #561&lt;/a&gt; 内部で使用する新たなアルゴリズム&lt;code&gt;algorithm detail::calculate_point_order()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/584&#34; target=&#34;_blank&#34;&gt;GitHub #584&lt;/a&gt; &lt;code&gt;matrix_transformer&lt;/code&gt;に任意の次元をサポート (Tinko Bartels氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/616&#34; target=&#34;_blank&#34;&gt;GitHub #616&lt;/a&gt; &lt;code&gt;srs::transformation&lt;/code&gt;を継続的にさまざまな改善。標準のスレッドプリミティブをサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/627&#34; target=&#34;_blank&#34;&gt;GitHub #627&lt;/a&gt; 関係操作の汎用性を改善&lt;/li&gt;
&lt;li&gt;集合と関係の操作の堅牢性に関するさまざまな改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/557&#34; target=&#34;_blank&#34;&gt;GitHub #557&lt;/a&gt; spherical-equatorial座標系での&lt;code&gt;point&lt;/code&gt;と&lt;code&gt;linestring&lt;/code&gt;の&lt;code&gt;distance&lt;/code&gt;が間違った結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/612&#34; target=&#34;_blank&#34;&gt;GitHub #612&lt;/a&gt; geographic座標系での集合操作が間違った結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/619&#34; target=&#34;_blank&#34;&gt;GitHub #619&lt;/a&gt; spherical-equatorial座標系での集合操作が間違った結果になる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/479&#34; target=&#34;_blank&#34;&gt;GitHub #479&lt;/a&gt; sphericalとgeographicの座標系での集合操作のさまざまな問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/623&#34; target=&#34;_blank&#34;&gt;GitHub #623&lt;/a&gt; 集合と関係の操作で整数オーバーフローの可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/632&#34; target=&#34;_blank&#34;&gt;GitHub #632&lt;/a&gt; 非対称の片側バッファ (asymmetric one-sided buffer) の生成のエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/309&#34; target=&#34;_blank&#34;&gt;GitHub #309&lt;/a&gt; GSoC 2019: 画像を縮小するLanczos resampling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; GSoC 2019: バイナリ閾値化 (binary thresholding)、逆バイナリ閾値化 (inverted binary thresholding)、切り詰め閾値化 (truncation thresholding) の機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; GSoC 2019: Otsu thresholding method&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/315&#34; target=&#34;_blank&#34;&gt;GitHub #315&lt;/a&gt; Adaptive thresholdingに、周辺域のmeanもしくはgaussian-weighted sumを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/350&#34; target=&#34;_blank&#34;&gt;GitHub #350&lt;/a&gt; GSoC 2019: Harrisレスポンス計算 (non-maximum filteringをともなわないコーナー検出)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; GSoC 2019: Hessianコーナー検出&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/361&#34; target=&#34;_blank&#34;&gt;GitHub #361&lt;/a&gt; GSoC 2019: 数値拡張に2Dカーネルの型として、&lt;code&gt;kernel_2d&lt;/code&gt;と&lt;code&gt;kernel_2d_fixed&lt;/code&gt;を定義&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/367&#34; target=&#34;_blank&#34;&gt;GitHub #367&lt;/a&gt; GSoC 2019: 2D convolutionの関数として&lt;code&gt;convolve_2d&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: Box filteringとしてaverage filterを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: normalized mean filterをベースにしたブラー関数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/392&#34; target=&#34;_blank&#34;&gt;GitHub #392&lt;/a&gt; GSoC 2019: Sobel and Scharr operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/393&#34; target=&#34;_blank&#34;&gt;GitHub #393&lt;/a&gt; GSoC 2019: 画像のノイズ除去のためのMedian filter&lt;/li&gt;
&lt;li&gt;継続的に新たなテストを追加し、全体的なテストカバレッジを大幅に改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; &lt;code&gt;cached_location_t&lt;/code&gt;の目的をドキュメント化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/347&#34; target=&#34;_blank&#34;&gt;GitHub #347&lt;/a&gt; 数値拡張に、&lt;code&gt;convolve_rows&lt;/code&gt;と&lt;code&gt;convolve_cols&lt;/code&gt;を便利に使うための&lt;code&gt;convolve_1d&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/386&#34; target=&#34;_blank&#34;&gt;GitHub #386&lt;/a&gt; 数値拡張に、画像境界の拡張 (image boundary extension) のため&lt;code&gt;extend_boundary&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/404&#34; target=&#34;_blank&#34;&gt;GitHub #404&lt;/a&gt; プロジェクトのリリースノートとして&lt;code&gt;RELEASES.md&lt;/code&gt;をメンテナンスした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/302&#34; target=&#34;_blank&#34;&gt;GitHub #302&lt;/a&gt; コア機能と拡張を含む全てのテストを&lt;code&gt;/test&lt;/code&gt;ディレクトリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.MPLをBoost.MP11で置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.TypeTraitsの使用をやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/296&#34; target=&#34;_blank&#34;&gt;GitHub #296&lt;/a&gt; GCC &amp;lt;= 4.8のサポートをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/403&#34; target=&#34;_blank&#34;&gt;GitHub #403&lt;/a&gt; 未使用の&lt;code&gt;include/boost/gil/version.hpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/273&#34; target=&#34;_blank&#34;&gt;GitHub #273&lt;/a&gt; デフォルト初期化された&lt;code&gt;channel&lt;/code&gt;と&lt;code&gt;pixel&lt;/code&gt;オブジェクトの未初期化値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt; &lt;code&gt;std::is_trivially_default_constructible&lt;/code&gt;の特殊化による未定義動作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/385&#34; target=&#34;_blank&#34;&gt;GitHub #385&lt;/a&gt; 不正なヘッダをもつPNGを読むとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;多くの型にRule of Threeを適用 (デストラクタ、コピーコンストラクタ、コピー代入演算子)&lt;/li&gt;
&lt;li&gt;非推奨だった、暗黙定義されるコピーコンストラクタとコピー代入演算子を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超幾何関数 (Hypergeometric functions) として、1F0、0F1、2F0、1F1、pFqを追加&lt;/li&gt;
&lt;li&gt;ヤコビ多項式 (Jacobi polynomial) と導関数 (derivatives) の評価を追加&lt;/li&gt;
&lt;li&gt;ゲーゲンバウアー多項式 (Gegenbauer polynomial) と導関数の評価を追加&lt;/li&gt;
&lt;li&gt;カーディナルB-スプライン曲線 (Cardinal B-Splines) と導関数を多項式として追加&lt;/li&gt;
&lt;li&gt;カーディナル三角補間 (Cardinal Trigonometric Interpolation) を追加&lt;/li&gt;
&lt;li&gt;小区分 (sub-section) の統計を追加&lt;/li&gt;
&lt;li&gt;1標本t検定 (One Sample Student&#39;s T Test) を追加&lt;/li&gt;
&lt;li&gt;正規性のために、アンダーソン–ダーリング検定 (Anderson Darling test) を追加&lt;/li&gt;
&lt;li&gt;自動訂正のために、リュング・ボックス検定 (Ljung Box test) を追加&lt;/li&gt;
&lt;li&gt;ランダムなシーケンスのために、ラン検定 (Runs test) を追加&lt;/li&gt;
&lt;li&gt;ヘッダ&lt;code&gt;boost/math/tools/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/tools/bivariate_statistics.hpp&lt;/code&gt;を非推奨化し、&lt;code&gt;boost/math/statistics/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/statistics/bivariate_statistics.hpp&lt;/code&gt;を推奨&lt;/li&gt;
&lt;li&gt;経験累積分布 (Empirical CDF distribution) を追加&lt;/li&gt;
&lt;li&gt;ランチョス近似 (Lanczos approximation) を通常の精度で使用するすべての関数に適用できるように、多精度ガンマ関数で使用されるスターリング近似 (Sterling approximation) を作り直した。また、Lanczos近似を10進数100桁精度まで拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;で大きな更新をし、GCCとClang 9以降もしくは&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;を使用できるコンパイラで、&lt;code&gt;cpp_int&lt;/code&gt;と&lt;code&gt;float128&lt;/code&gt;の算術演算を完全に&lt;code&gt;constexpr&lt;/code&gt;化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; 可変精度&lt;code&gt;mpf_float&lt;/code&gt;で、正しい精度を選択しようしとしてテールスピン (tailspin) に陥るバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.12&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断 (Mikhail Pilin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;Issue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/206&#34; target=&#34;_blank&#34;&gt;GitHub #206&lt;/a&gt; コンパイル時に無効化されたテストが、JUNITのログで正しく処理されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; テンプレートタイプに複数のパラメータが含まれている場合に、名前によるフィルタテストができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; 非推奨の&lt;code&gt;std::random_shuffle&lt;/code&gt;を使用しないよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/227&#34; target=&#34;_blank&#34;&gt;GitHub #227&lt;/a&gt; &lt;code&gt;report_error&lt;/code&gt;に、printfフォーマットのチェック属性を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; OpenBSDに&lt;code&gt;SI_ASYNCIO&lt;/code&gt;と&lt;code&gt;SI_MESGQ&lt;/code&gt;がなかったので存在チェックを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/232&#34; target=&#34;_blank&#34;&gt;GitHub #232&lt;/a&gt; Windowsでのタイムアウトを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Asioを追加 (close #419)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>7f20370136f9689e24dedb454f9dbfc7916fcbb1:document/version/1_72_0.md</id>
      <updated>2019-12-13T13:13:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;async_initiate&lt;/code&gt;ヘルパ関数を、C++11以降向けに自動的に戻り値型を推論するよう変更した&lt;/li&gt;
&lt;li&gt;C++14向けに、全ての非同期操作で自動的に戻り値型を推論するよう変更した。これにより、完了トークンの実装によって、型消去なしで非同期操作の初期化を、初期化関数に組み込むことができる。&lt;ul&gt;
&lt;li&gt;戻り値型を推論する完了トークンをサポートするのがC++14以降であることに注意。C++11以前の場合、完了トークンの&lt;code&gt;async_result&lt;/code&gt;特殊化は、入れ子型&lt;code&gt;result_type&lt;/code&gt;を提供する必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_initiate&lt;/code&gt;にコンセプトのサポートを導入した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;completion_signature&amp;lt;T&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が&lt;code&gt;R(Args...)&lt;/code&gt;のシグニチャ形式であることをチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completion_handler_for&amp;lt;T, Signature&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が指定されたシグニチャの完了ハンドラを使用できるかをチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completion_token_for&amp;lt;T, Signature&amp;gt;&lt;/code&gt; : &lt;code&gt;T&lt;/code&gt;が&lt;code&gt;async_initiate&lt;/code&gt;と指定されたシグニチャで使用できる完了トークンかをチェック&lt;/li&gt;
&lt;li&gt;コンセプトのないC++での後方互換性のために、以下のマクロを提供する。&lt;code&gt;BOOST_ASIO_COMPLETION_SIGNATURE&lt;/code&gt;、&lt;code&gt;BOOST_ASIO_COMPLETION_HANDLER_FOR&lt;/code&gt;、&lt;code&gt;BOOST_ASIO_COMPLETION_TOKEN_FOR&lt;/code&gt;。これらのマクロは、コンセプトのサポートがない環境で&lt;code&gt;typename&lt;/code&gt;に展開される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全てのI/Oオブジェクト型に、入れ子テンプレート型&lt;code&gt;rebind_executor&lt;/code&gt;を追加。これは以下のように使用する：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_socket_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rebind_executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入れ子型&lt;code&gt;executor_type&lt;/code&gt;とメンバ関数&lt;code&gt;get_executor()&lt;/code&gt;を介して、関連するI/O executorに報告するよう初期化関数オブジェクトを変更した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;executor_type&lt;/code&gt;と&lt;code&gt;get_executor()&lt;/code&gt;はオプションとして扱われるべきであり、&lt;code&gt;associated_executor&lt;/code&gt;と&lt;code&gt;get_associated_executor()&lt;/code&gt;ヘルパ関数を介してそれらのアクセスすることが望ましい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default_completion_token&lt;/code&gt;トレイトを追加した。これはI/O executor型に、非同期操作で使用する関連するデフォルトの完了トークン型を与える。このトレイトは、非同期操作の宣言で以下のように使用する：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CompletionToken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_completion_token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executor_type&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_fyz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;io_object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;CompletionToken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;default_completion_token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IoObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executor_type&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特殊化されない場合、トレイトの&lt;code&gt;type&lt;/code&gt;は&lt;code&gt;void&lt;/code&gt;となり、I/O executorに渡されるデフォルトの完了トークンがないことを意味する。&lt;/li&gt;
&lt;li&gt;このトレイトは&lt;code&gt;use_awaitable&lt;/code&gt;完了トークン向けに特殊化されており、非同期操作を以下のように使用することを許可する：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_awaitable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_default_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;co_await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デフォルトはuse_awaitable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この例では、&lt;code&gt;socket&lt;/code&gt;オブジェクトの型は&lt;code&gt;tcp::socket&lt;/code&gt;から変換され、デフォルトの完了トークンが&lt;code&gt;use_awaitable&lt;/code&gt;に設定されたI/O executorを持つ。ほかの方法として、ソケットの型を直接計算することもできる：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tcp_socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;use_awaitable_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;as_default_on_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tcp_socket&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;co_await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_endpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// デフォルトはuse_awaitable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;async_initiate&lt;/code&gt;に、不足していたWindows固有のI/Oオブジェクトの非同期操作のサポートを追加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executor型が、acceptした新たなソケットに伝播されるようにした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新たな接続を同期もしくは非同期にacceptし、しかしexecutorもしくはexecution contextを指定しない場合に、accept操作がacceptorからsocketに、executor typeを正しく伝播するようにした。例として、以下のacceptor型の場合：

&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;acceptされたsocketの型は以下のようになる：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;basic_stream_socket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_executor_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Protocol&lt;/code&gt;の要件として、コピーとムーブの操作が例外を送出しないよう変更した&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Endpoint&lt;/code&gt;の要件として、デフォルトコンストラクタとムーブの操作が例外を送出しないよう変更した&lt;/li&gt;
&lt;li&gt;protocolのアクセッサに、&lt;code&gt;noexcept&lt;/code&gt;修飾を追加&lt;/li&gt;
&lt;li&gt;socketのムーブコンストラクタに、&lt;code&gt;noexcept&lt;/code&gt;修飾を追加&lt;/li&gt;
&lt;li&gt;Windowsでのシリアルポートを開く操作に関連した以下のissueを修正：&lt;ul&gt;
&lt;li&gt;RTS制御フラグを初期化するために、正しい定数を使用するようにした&lt;/li&gt;
&lt;li&gt;デフォルトのボーレート (baud rate) を設定 (9600)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非同期のaccept操作が自動的に再起動されたときに発生する可能性のある、「未処理の作業数」が失われる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/309&#34; target=&#34;_blank&#34;&gt;GitHub #309&lt;/a&gt; GSoC 2019: 画像を縮小するLanczos resampling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; GSoC 2019: バイナリ閾値化 (binary thresholding)、逆バイナリ閾値化 (inverted binary thresholding)、切り詰め閾値化 (truncation thresholding) の機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; GSoC 2019: Otsu thresholding method&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/315&#34; target=&#34;_blank&#34;&gt;GitHub #315&lt;/a&gt; Adaptive thresholdingに、周辺域のmeanもしくはgaussian-weighted sumを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/350&#34; target=&#34;_blank&#34;&gt;GitHub #350&lt;/a&gt; GSoC 2019: Harrisレスポンス計算 (non-maximum filteringをともなわないコーナー検出)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; GSoC 2019: Hessianコーナー検出&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/361&#34; target=&#34;_blank&#34;&gt;GitHub #361&lt;/a&gt; GSoC 2019: 数値拡張に2Dカーネルの型として、&lt;code&gt;kernel_2d&lt;/code&gt;と&lt;code&gt;kernel_2d_fixed&lt;/code&gt;を定義&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/367&#34; target=&#34;_blank&#34;&gt;GitHub #367&lt;/a&gt; GSoC 2019: 2D convolutionの関数として&lt;code&gt;convolve_2d&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: Box filteringとしてaverage filterを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: normalized mean filterをベースにしたブラー関数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/392&#34; target=&#34;_blank&#34;&gt;GitHub #392&lt;/a&gt; GSoC 2019: Sobel and Scharr operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/393&#34; target=&#34;_blank&#34;&gt;GitHub #393&lt;/a&gt; GSoC 2019: 画像のノイズ除去のためのMedian filter&lt;/li&gt;
&lt;li&gt;継続的に新たなテストを追加し、全体的なテストカバレッジを大幅に改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; &lt;code&gt;cached_location_t&lt;/code&gt;の目的をドキュメント化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/347&#34; target=&#34;_blank&#34;&gt;GitHub #347&lt;/a&gt; 数値拡張に、&lt;code&gt;convolve_rows&lt;/code&gt;と&lt;code&gt;convolve_cols&lt;/code&gt;を便利に使うための&lt;code&gt;convolve_1d&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/386&#34; target=&#34;_blank&#34;&gt;GitHub #386&lt;/a&gt; 数値拡張に、画像境界の拡張 (image boundary extension) のため&lt;code&gt;extend_boundary&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/404&#34; target=&#34;_blank&#34;&gt;GitHub #404&lt;/a&gt; プロジェクトのリリースノートとして&lt;code&gt;RELEASES.md&lt;/code&gt;をメンテナンスした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/302&#34; target=&#34;_blank&#34;&gt;GitHub #302&lt;/a&gt; コア機能と拡張を含む全てのテストを&lt;code&gt;/test&lt;/code&gt;ディレクトリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.MPLをBoost.MP11で置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.TypeTraitsの使用をやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/296&#34; target=&#34;_blank&#34;&gt;GitHub #296&lt;/a&gt; GCC &amp;lt;= 4.8のサポートをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/403&#34; target=&#34;_blank&#34;&gt;GitHub #403&lt;/a&gt; 未使用の&lt;code&gt;include/boost/gil/version.hpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/273&#34; target=&#34;_blank&#34;&gt;GitHub #273&lt;/a&gt; デフォルト初期化された&lt;code&gt;channel&lt;/code&gt;と&lt;code&gt;pixel&lt;/code&gt;オブジェクトの未初期化値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt; &lt;code&gt;std::is_trivially_default_constructible&lt;/code&gt;の特殊化による未定義動作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/385&#34; target=&#34;_blank&#34;&gt;GitHub #385&lt;/a&gt; 不正なヘッダをもつPNGを読むとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;多くの型にRule of Threeを適用 (デストラクタ、コピーコンストラクタ、コピー代入演算子)&lt;/li&gt;
&lt;li&gt;非推奨だった、暗黙定義されるコピーコンストラクタとコピー代入演算子を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超幾何関数 (Hypergeometric functions) として、1F0、0F1、2F0、1F1、pFqを追加&lt;/li&gt;
&lt;li&gt;ヤコビ多項式 (Jacobi polynomial) と導関数 (derivatives) の評価を追加&lt;/li&gt;
&lt;li&gt;ゲーゲンバウアー多項式 (Gegenbauer polynomial) と導関数の評価を追加&lt;/li&gt;
&lt;li&gt;カーディナルB-スプライン曲線 (Cardinal B-Splines) と導関数を多項式として追加&lt;/li&gt;
&lt;li&gt;カーディナル三角補間 (Cardinal Trigonometric Interpolation) を追加&lt;/li&gt;
&lt;li&gt;小区分 (sub-section) の統計を追加&lt;/li&gt;
&lt;li&gt;1標本t検定 (One Sample Student&#39;s T Test) を追加&lt;/li&gt;
&lt;li&gt;正規性のために、アンダーソン–ダーリング検定 (Anderson Darling test) を追加&lt;/li&gt;
&lt;li&gt;自動訂正のために、リュング・ボックス検定 (Ljung Box test) を追加&lt;/li&gt;
&lt;li&gt;ランダムなシーケンスのために、ラン検定 (Runs test) を追加&lt;/li&gt;
&lt;li&gt;ヘッダ&lt;code&gt;boost/math/tools/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/tools/bivariate_statistics.hpp&lt;/code&gt;を非推奨化し、&lt;code&gt;boost/math/statistics/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/statistics/bivariate_statistics.hpp&lt;/code&gt;を推奨&lt;/li&gt;
&lt;li&gt;経験累積分布 (Empirical CDF distribution) を追加&lt;/li&gt;
&lt;li&gt;ランチョス近似 (Lanczos approximation) を通常の精度で使用するすべての関数に適用できるように、多精度ガンマ関数で使用されるスターリング近似 (Sterling approximation) を作り直した。また、Lanczos近似を10進数100桁精度まで拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;で大きな更新をし、GCCとClang 9以降もしくは&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;を使用できるコンパイラで、&lt;code&gt;cpp_int&lt;/code&gt;と&lt;code&gt;float128&lt;/code&gt;の算術演算を完全に&lt;code&gt;constexpr&lt;/code&gt;化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; 可変精度&lt;code&gt;mpf_float&lt;/code&gt;で、正しい精度を選択しようしとしてテールスピン (tailspin) に陥るバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.12&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断 (Mikhail Pilin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;Issue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/206&#34; target=&#34;_blank&#34;&gt;GitHub #206&lt;/a&gt; コンパイル時に無効化されたテストが、JUNITのログで正しく処理されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; テンプレートタイプに複数のパラメータが含まれている場合に、名前によるフィルタテストができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; 非推奨の&lt;code&gt;std::random_shuffle&lt;/code&gt;を使用しないよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/227&#34; target=&#34;_blank&#34;&gt;GitHub #227&lt;/a&gt; &lt;code&gt;report_error&lt;/code&gt;に、printfフォーマットのチェック属性を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; OpenBSDに&lt;code&gt;SI_ASYNCIO&lt;/code&gt;と&lt;code&gt;SI_MESGQ&lt;/code&gt;がなかったので存在チェックを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/232&#34; target=&#34;_blank&#34;&gt;GitHub #232&lt;/a&gt; Windowsでのタイムアウトを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.xx.0リリースノート -- リリースノートの雛形 : タブをスペースに修正</title>
      <link href="https://boostjp.github.io/document/version/template.html"/>
      <id>33caf257e8450a8113a37ca5a6c39680684b642f:document/version/template.md</id>
      <updated>2019-12-09T17:08:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.xx.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_xx_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_xx_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_xx_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_xx_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#one&#34;&gt;One&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#two&#34;&gt;Two&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#three&#34;&gt;Three&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#one&#34; id=&#34;One&#34;&gt;One&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;blahblahblah&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#two&#34; id=&#34;Two&#34;&gt;Two&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt; ticket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/XXX/pull/XX&#34; target=&#34;_blank&#34;&gt;pull request XX&lt;/a&gt; GitHub PR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html#three&#34; id=&#34;Three&#34;&gt;Three&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: &lt;code&gt;boost::xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trailing &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Someone&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : テスト済みコンパイラを追加</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>e10cddcb1529cd2f76e56235d7e3e63705f60846:document/version/1_72_0.md</id>
      <updated>2019-12-09T17:08:02+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/309&#34; target=&#34;_blank&#34;&gt;GitHub #309&lt;/a&gt; GSoC 2019: 画像を縮小するLanczos resampling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/313&#34; target=&#34;_blank&#34;&gt;GitHub #313&lt;/a&gt; GSoC 2019: バイナリ閾値化 (binary thresholding)、逆バイナリ閾値化 (inverted binary thresholding)、切り詰め閾値化 (truncation thresholding) の機能を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/314&#34; target=&#34;_blank&#34;&gt;GitHub #314&lt;/a&gt; GSoC 2019: Otsu thresholding method&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/315&#34; target=&#34;_blank&#34;&gt;GitHub #315&lt;/a&gt; Adaptive thresholdingに、周辺域のmeanもしくはgaussian-weighted sumを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/350&#34; target=&#34;_blank&#34;&gt;GitHub #350&lt;/a&gt; GSoC 2019: Harrisレスポンス計算 (non-maximum filteringをともなわないコーナー検出)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; GSoC 2019: Hessianコーナー検出&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/361&#34; target=&#34;_blank&#34;&gt;GitHub #361&lt;/a&gt; GSoC 2019: 数値拡張に2Dカーネルの型として、&lt;code&gt;kernel_2d&lt;/code&gt;と&lt;code&gt;kernel_2d_fixed&lt;/code&gt;を定義&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/367&#34; target=&#34;_blank&#34;&gt;GitHub #367&lt;/a&gt; GSoC 2019: 2D convolutionの関数として&lt;code&gt;convolve_2d&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: Box filteringとしてaverage filterを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/383&#34; target=&#34;_blank&#34;&gt;GitHub #383&lt;/a&gt; GSoC 2019: normalized mean filterをベースにしたブラー関数&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/392&#34; target=&#34;_blank&#34;&gt;GitHub #392&lt;/a&gt; GSoC 2019: Sobel and Scharr operators&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/393&#34; target=&#34;_blank&#34;&gt;GitHub #393&lt;/a&gt; GSoC 2019: 画像のノイズ除去のためのMedian filter&lt;/li&gt;
&lt;li&gt;継続的に新たなテストを追加し、全体的なテストカバレッジを大幅に改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/287&#34; target=&#34;_blank&#34;&gt;GitHub #287&lt;/a&gt; &lt;code&gt;cached_location_t&lt;/code&gt;の目的をドキュメント化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/347&#34; target=&#34;_blank&#34;&gt;GitHub #347&lt;/a&gt; 数値拡張に、&lt;code&gt;convolve_rows&lt;/code&gt;と&lt;code&gt;convolve_cols&lt;/code&gt;を便利に使うための&lt;code&gt;convolve_1d&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/386&#34; target=&#34;_blank&#34;&gt;GitHub #386&lt;/a&gt; 数値拡張に、画像境界の拡張 (image boundary extension) のため&lt;code&gt;extend_boundary&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/404&#34; target=&#34;_blank&#34;&gt;GitHub #404&lt;/a&gt; プロジェクトのリリースノートとして&lt;code&gt;RELEASES.md&lt;/code&gt;をメンテナンスした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/302&#34; target=&#34;_blank&#34;&gt;GitHub #302&lt;/a&gt; コア機能と拡張を含む全てのテストを&lt;code&gt;/test&lt;/code&gt;ディレクトリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.MPLをBoost.MP11で置き換えた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/274&#34; target=&#34;_blank&#34;&gt;GitHub #274&lt;/a&gt; Boost.TypeTraitsの使用をやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/296&#34; target=&#34;_blank&#34;&gt;GitHub #296&lt;/a&gt; GCC &amp;lt;= 4.8のサポートをやめた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/403&#34; target=&#34;_blank&#34;&gt;GitHub #403&lt;/a&gt; 未使用の&lt;code&gt;include/boost/gil/version.hpp&lt;/code&gt;ファイルを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/273&#34; target=&#34;_blank&#34;&gt;GitHub #273&lt;/a&gt; デフォルト初期化された&lt;code&gt;channel&lt;/code&gt;と&lt;code&gt;pixel&lt;/code&gt;オブジェクトの未初期化値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/284&#34; target=&#34;_blank&#34;&gt;GitHub #284&lt;/a&gt; &lt;code&gt;std::is_trivially_default_constructible&lt;/code&gt;の特殊化による未定義動作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/385&#34; target=&#34;_blank&#34;&gt;GitHub #385&lt;/a&gt; 不正なヘッダをもつPNGを読むとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;多くの型にRule of Threeを適用 (デストラクタ、コピーコンストラクタ、コピー代入演算子)&lt;/li&gt;
&lt;li&gt;非推奨だった、暗黙定義されるコピーコンストラクタとコピー代入演算子を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超幾何関数 (Hypergeometric functions) として、1F0、0F1、2F0、1F1、pFqを追加&lt;/li&gt;
&lt;li&gt;ヤコビ多項式 (Jacobi polynomial) と導関数 (derivatives) の評価を追加&lt;/li&gt;
&lt;li&gt;ゲーゲンバウアー多項式 (Gegenbauer polynomial) と導関数の評価を追加&lt;/li&gt;
&lt;li&gt;カーディナルB-スプライン曲線 (Cardinal B-Splines) と導関数を多項式として追加&lt;/li&gt;
&lt;li&gt;カーディナル三角補間 (Cardinal Trigonometric Interpolation) を追加&lt;/li&gt;
&lt;li&gt;小区分 (sub-section) の統計を追加&lt;/li&gt;
&lt;li&gt;1標本t検定 (One Sample Student&#39;s T Test) を追加&lt;/li&gt;
&lt;li&gt;正規性のために、アンダーソン–ダーリング検定 (Anderson Darling test) を追加&lt;/li&gt;
&lt;li&gt;自動訂正のために、リュング・ボックス検定 (Ljung Box test) を追加&lt;/li&gt;
&lt;li&gt;ランダムなシーケンスのために、ラン検定 (Runs test) を追加&lt;/li&gt;
&lt;li&gt;ヘッダ&lt;code&gt;boost/math/tools/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/tools/bivariate_statistics.hpp&lt;/code&gt;を非推奨化し、&lt;code&gt;boost/math/statistics/univariate_statistics.hpp&lt;/code&gt;と&lt;code&gt;boost/math/statistics/bivariate_statistics.hpp&lt;/code&gt;を推奨&lt;/li&gt;
&lt;li&gt;経験累積分布 (Empirical CDF distribution) を追加&lt;/li&gt;
&lt;li&gt;ランチョス近似 (Lanczos approximation) を通常の精度で使用するすべての関数に適用できるように、多精度ガンマ関数で使用されるスターリング近似 (Sterling approximation) を作り直した。また、Lanczos近似を10進数100桁精度まで拡張した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;で大きな更新をし、GCCとClang 9以降もしくは&lt;code&gt;std::is_constant_evaluated()&lt;/code&gt;を使用できるコンパイラで、&lt;code&gt;cpp_int&lt;/code&gt;と&lt;code&gt;float128&lt;/code&gt;の算術演算を完全に&lt;code&gt;constexpr&lt;/code&gt;化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/164&#34; target=&#34;_blank&#34;&gt;GitHub #164&lt;/a&gt; 可変精度&lt;code&gt;mpf_float&lt;/code&gt;で、正しい精度を選択しようしとしてテールスピン (tailspin) に陥るバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Test v3.12&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17 &lt;code&gt;std::string_view&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断 (Mikhail Pilin氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正とPull Request&lt;ul&gt;
&lt;li&gt;Issue&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/206&#34; target=&#34;_blank&#34;&gt;GitHub #206&lt;/a&gt; コンパイル時に無効化されたテストが、JUNITのログで正しく処理されない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/217&#34; target=&#34;_blank&#34;&gt;GitHub #217&lt;/a&gt; テンプレートタイプに複数のパラメータが含まれている場合に、名前によるフィルタテストができない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/issues/229&#34; target=&#34;_blank&#34;&gt;GitHub #229&lt;/a&gt; 非推奨の&lt;code&gt;std::random_shuffle&lt;/code&gt;を使用しないよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/227&#34; target=&#34;_blank&#34;&gt;GitHub #227&lt;/a&gt; &lt;code&gt;report_error&lt;/code&gt;に、printfフォーマットのチェック属性を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/231&#34; target=&#34;_blank&#34;&gt;GitHub #231&lt;/a&gt; OpenBSDに&lt;code&gt;SI_ASYNCIO&lt;/code&gt;と&lt;code&gt;SI_MESGQ&lt;/code&gt;がなかったので存在チェックを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/232&#34; target=&#34;_blank&#34;&gt;GitHub #232&lt;/a&gt; Windowsでのタイムアウトを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;boost::exception&lt;/code&gt;とRTTI無効化環境でのよりよい診断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1&lt;/li&gt;
&lt;li&gt;Intel, C++14: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 9.1.0, 10.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++2a: 10.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0, 7.2.0, 7.3.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>