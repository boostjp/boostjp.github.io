<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-03-06T05:01:36.940951</updated>
  <id>db969a37-cbff-41b9-8dec-a9c90d293a57</id>

  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : DynamicBitsetを追加 (close #345)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>fbf860f1bbb949530c138be3f09feb280d89c222:document/version/1_70_0.md</id>
      <updated>2019-03-06T13:57:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#dynamic-bitset&#34; id=&#34;dynamic-bitset&#34;&gt;DynamicBitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/dynamic_bitset/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; 古いCPUで未定義動作が起きたため、MSVCではハードウェア支援のあるpopcountを無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Logを追加 (close #342)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>cfb4ed3039a15eddbac3177f22f91549f5f8baba:document/version/1_70_0.md</id>
      <updated>2019-03-06T13:53:07+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;text file sink backendでファイルを収集するまえに別のログファイル名を生成する機能をサポートした。これによって既存のログファイルのファイル名にタイムスタンプやファイルカウンタを付加することができ、その結果として汎用的なファイルコレクションを可能にする&lt;ul&gt;
&lt;li&gt;この機能を有効にするには、text file sink backendに対象ファイルのname patternを設定する必要がある。名前付きパラメータ&lt;code&gt;target_file_name&lt;/code&gt;を使用して、&lt;code&gt;text_file_backend::set_target_file_name_pattern()&lt;/code&gt;メンバ関数を呼び出すか、settingsで&lt;code&gt;TargetFileName&lt;/code&gt; sinkパラメータを使用する&lt;/li&gt;
&lt;li&gt;このname patternは、ファイルへの書き込みが終了して収集する際に、新しいファイル名を生成するために使用する。例として、元のファイル名として&lt;code&gt;app.log&lt;/code&gt;を付けた場合、収集してrotateできるようにするため&lt;code&gt;&#34;app-2019-01-05.log&#34;&lt;/code&gt;のようなタイムスタンプやファイルカウンタを付加した衝突しない名前にできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Mp11を追加 (close #343)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>9fe2523eda0ea5760668911844c2db0bc9c0173f:document/version/1_70_0.md</id>
      <updated>2019-03-06T13:31:41+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;mp_invoke&lt;/code&gt;を&lt;code&gt;mp_invoke_q&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_similar&lt;/code&gt;を追加。型リストが全て同じ型であれば&lt;code&gt;mp_true&lt;/code&gt;、そうでなければ&lt;code&gt;mp_false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_set_union&lt;/code&gt;、&lt;code&gt;mp_set_intersection&lt;/code&gt;、&lt;code&gt;mp_set_difference&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_not_fn&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_transform_first&lt;/code&gt;、&lt;code&gt;mp_transform_second&lt;/code&gt;、&lt;code&gt;mp_transform_third&lt;/code&gt;を追加。それぞれ、型リストの先頭要素、その次の要素、さらにその次の要素に変換メタ関数を適用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_filter&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_eval_if_not&lt;/code&gt;、&lt;code&gt;mp_eval_or&lt;/code&gt;、&lt;code&gt;mp_valid_q&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_back&lt;/code&gt;、&lt;code&gt;mp_pop_back&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : PolyCollectionを追加 (close #341)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>7f44e95d9b298ef08883e1841c9ea65f90f5ac1c:document/version/1_70_0.md</id>
      <updated>2019-03-01T15:40:39+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Billy O&#39;Neal氏によって、&lt;code&gt;rooted_allocator&lt;/code&gt;の機能不足 (比較演算子と&lt;code&gt;is_always_equal&lt;/code&gt;) が報告された (&lt;a href=&#34;https://github.com/boostorg/poly_collection/pull/9&#34; target=&#34;_blank&#34;&gt;GitHub #9&lt;/a&gt;) 後、状態を持つアロケータ (stateful allocators) と、アロケータの状態伝搬トレイト (allocator propagation traits) のハンドリングを改善&lt;/li&gt;
&lt;li&gt;内部のキャッシュ構造での、潜在的な重大バグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.70.0リリースノート -- 1.70.0リリースノート : Multi-indexを追加 (close #340)</title>
      <link href="https://boostjp.github.io/document/version/1_70_0.html"/>
      <id>f9e444e70c70a2f380037ee05563fa2bf1b7e64c:document/version/1_70_0.md</id>
      <updated>2019-02-28T12:33:12+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.70.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_70_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_70_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_70_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/outcome/&#34; target=&#34;_blank&#34;&gt;Outcome&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++の例外処理を (直接的に) 使用することが適切ではない状況のための、関数の失敗をハンドリングし、報告するためのツールセット。作者Niall Douglas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34;&gt;Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;クラスの実装での、&lt;code&gt;std::string::end()&lt;/code&gt;を間接参照しているいくつかの箇所を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/58&#34; target=&#34;_blank&#34;&gt;GitHub #58&lt;/a&gt; &lt;code&gt;(recursive_)directory_iterator&lt;/code&gt;のコンストラクタと、&lt;code&gt;error_code&lt;/code&gt;への参照をとる操作において、メモリ不足状態でプログラムが強制終了してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12759&#34; target=&#34;_blank&#34;&gt;Trac #12759&lt;/a&gt; &lt;code&gt;path&lt;/code&gt;クラスの静的メンバ変数の定義が不足していたことにより発生していたリンクエラーを修正&lt;/li&gt;
&lt;li&gt;Linux上のdirectory iteratorのインクリメントで、未初期化データが使用される可能性があったのを修正&lt;/li&gt;
&lt;li&gt;directory iteratorにムーブサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt; &lt;code&gt;directory_entry&lt;/code&gt;クラス用の、file statusを問い合わせるオーバーロードを追加。これによって、directory iteratorを間接参照した結果からfile statusを問い合わせる際に、比較的負荷の高いOSクエリを回避できる&lt;/li&gt;
&lt;li&gt;ファイルシステムが壊れたり改ざんされたりしたときに起こり得るメモリ枯渇を避けるために、&lt;code&gt;current_path()&lt;/code&gt;と&lt;code&gt;read_symlink()&lt;/code&gt;を実装を見直した。これらの関数には、OSが受け付けるパスサイズに内部的な制限があり、現在が16MiBである&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_file()&lt;/code&gt;関数が使用する内部バッファのサイズを増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#integer&#34; id=&#34;integer&#34;&gt;Integer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/integer/pull/11&#34; target=&#34;_blank&#34;&gt;GitHub #11&lt;/a&gt; 拡張ユークリッドの互除法 (Extended Euclidean Algorithm) と、モジュラ逆数関数 (Modular Multiplicative Inverse function) を追加 (Nick Thompson氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_70_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータメンバの同名の型として&lt;code&gt;size_type&lt;/code&gt;と&lt;code&gt;difference_type&lt;/code&gt;を定義した。これは多くの状況ではなにも変わりはないが、アロケータの定義によってコンテナの内部構造をある程度制御できるようになった&lt;ul&gt;
&lt;li&gt;本件の動機については、&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt;を参照。現時点でこの変更は、リファレンスには記載しておらず、準公式の扱いになっている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>