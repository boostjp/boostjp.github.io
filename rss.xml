<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2014-12-19T23:02:19.931246</updated>
  <id>03435227-0585-4925-a93e-4acb6698110e</id>

  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : 「基本的なグラフ理論の復習」を途中まで追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>0c62415033547787f5b1a2b1dbe61284e38d2aea:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-19 15:57:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html&#34;&gt;基本的なグラフ理論の復習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DFS （深度優先探査） Visitor&lt;/li&gt;
&lt;li&gt;Dijkstra Visitor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html&#34;&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>基本的なグラフ理論の復習 -- Boost.Graph : 「基本的なグラフ理論の復習」を途中まで追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html"/>
      <id>0c62415033547787f5b1a2b1dbe61284e38d2aea:archive/boost_docs/libs/graph/graph_theory_review.md</id>
      <updated>2014-12-19 15:57:34 +0900</updated>
      
        <content type="html">&lt;h1&gt;基本的なグラフ理論の復習&lt;/h1&gt;
&lt;p&gt;この章は、基本的なグラフ理論を思い出させることを意図している。読者があらかじめグラフアルゴリズムの知識があるのなら、始めるにあたりこの章は十分であろう。もし読者がグラフアルゴリズムの知識がないのならば、 Cormen, Leiserson, Rivestの&lt;a href=&#34;http://www.toc.lcs.mit.edu/~clr/&#34; target=&#34;_blank&#34;&gt;Introduction to Algorithms&lt;/a&gt; のようなもっと詳しいものを薦める。&lt;/p&gt;
&lt;h2&gt;グラフ抽象&lt;/h2&gt;
&lt;p&gt;グラフは、多くの種類の問題を解くのに有効な数学的抽象化である。基本的には、グラフは頂点と辺から構成され、辺は二つの頂点を結ぶ。もっと正確には、グラフ(graph)とは組&lt;code&gt;(V,E)&lt;/code&gt;で表され、&lt;code&gt;V&lt;/code&gt;は有限集合で、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;V&lt;/code&gt;の２項関係である。&lt;code&gt;V&lt;/code&gt;は &lt;strong&gt;頂点集合(vertex set)&lt;/strong&gt; と呼ばれ、その要素を &lt;strong&gt;頂点(vertex)&lt;/strong&gt; と呼ぶ。&lt;code&gt;E&lt;/code&gt;は辺の集合で、 &lt;strong&gt;辺(edge)&lt;/strong&gt; とは&lt;code&gt;(u,v)&lt;/code&gt;の組で&lt;code&gt;u&lt;/code&gt;、&lt;code&gt;v&lt;/code&gt;は&lt;code&gt;V&lt;/code&gt;の要素である。 &lt;strong&gt;有向グラフ(directed graph)&lt;/strong&gt; においては、辺は順序付けられた組で、 &lt;strong&gt;始点(source)&lt;/strong&gt; を &lt;strong&gt;終点(target)&lt;/strong&gt; へと接続する。無向グラフ(undirected graph)においては、辺は順序付けされていない組で、２つの頂点を両方向につなぐ。つまり、無向グラフでは &lt;code&gt;(u,v)&lt;/code&gt;と&lt;code&gt;(v,u)&lt;/code&gt;は同じ辺の２通りの書き方である。&lt;/p&gt;
&lt;p&gt;グラフのこの定義は、いくつかの点であいまいである。辺や頂点が何を表現するかが述べられていない。グラフの例としては、連絡道路やハイパーリンク付きのウェブページなどを挙げることができる。これらの詳細がグラフの定義からは除外されているのは、大きな理由がある。それらの詳細はグラフの &lt;strong&gt;抽象化&lt;/strong&gt; の中では必要な部分ではない。詳細を定義から除外することで再利用可能な理論を構築でき、そのことは多くの異なった種類の問題を解く際に役に立つのである。&lt;/p&gt;
&lt;p&gt;定義にもどろう。グラフは頂点と辺の集合である。実際の様子を見せるため、頂点に文字のラベルがついたグラフを考え、辺を単純に文字の組としよう。ここで、有向グラフの例を次のように書くことができる。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;V = {v, b, x, z, a, y } 
E = { (b,y), (b,y), (y,v), (z,a), (x,x), (b,x), (x,v), (a,z) } 
G = (V, E)
&lt;/code&gt;&lt;/pre&gt;
このグラフを図示すると 図1 のようになる。辺 &lt;code&gt;(x,x)&lt;/code&gt; は &lt;strong&gt;輪(self-loop)&lt;/strong&gt; と呼ばれる。&lt;code&gt;(b,y)&lt;/code&gt;と &lt;code&gt;(b,y)&lt;/code&gt;は &lt;strong&gt;平行辺(parallel edges)&lt;/strong&gt; であり、これは &lt;strong&gt;マルチグラフ(multigraph)&lt;/strong&gt; でのみ許される(ただし、通常は有向グラフでも無向グラフでも許されない)。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/figs/digraph.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図1: 有向グラフの例&lt;/p&gt;
&lt;p&gt;次に似たようなグラフを示すが、今度は無向グラフである。これは図2に図示する。無向グラフでは輪は許されない。上記のグラフ(から平行辺&lt;code&gt;(b,y)&lt;/code&gt;を除いたもの)の &lt;strong&gt;無向版(undirected version)&lt;/strong&gt; である。それはつまり、同じ頂点をもち、同じ辺から方向を除いたものを持つことを意味し、&lt;code&gt;(a,z)&lt;/code&gt;と&lt;code&gt;(z,a)&lt;/code&gt;という２つの辺は一つの辺に退化する。また、逆を考えることもできる。無向グラフの &lt;strong&gt;有向版(directed version)&lt;/strong&gt; は、すべての辺をそれぞれの方向を向く２つの辺で置き換えることで得られる。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;V = {v, b, x, z, a, y }
E = { (b,y), (y,v), (z,a), (b,x), (x,v) }
G = (V, E)
&lt;/code&gt;&lt;/pre&gt;
&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/figs/undigraph.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図2: 無向グラフの例&lt;/p&gt;
&lt;p&gt;ここでさらにグラフの用語を定義する。辺&lt;code&gt;(u,v)&lt;/code&gt;がグラフに含まれるとき、頂点&lt;code&gt;v&lt;/code&gt;は頂点&lt;code&gt;u&lt;/code&gt;について &lt;strong&gt;隣接している(adjacent)&lt;/strong&gt; と言う。有向グラフでは、辺&lt;code&gt;(u,v)&lt;/code&gt;は 頂点&lt;code&gt;u&lt;/code&gt;の &lt;strong&gt;出辺(out-edge)&lt;/strong&gt; であり、頂点&lt;code&gt;v&lt;/code&gt;の &lt;strong&gt;入辺(in-edge)&lt;/strong&gt; である。無向グラフでは、辺&lt;code&gt;(u,v)&lt;/code&gt;は頂点&lt;code&gt;u&lt;/code&gt;と&lt;code&gt;v&lt;/code&gt;を &lt;strong&gt;接合している(incident on)&lt;/strong&gt; という。&lt;/p&gt;
&lt;p&gt;図1で、頂点&lt;code&gt;y&lt;/code&gt;は頂点&lt;code&gt;b&lt;/code&gt;に対して隣接している (ただし&lt;code&gt;b&lt;/code&gt;は&lt;code&gt;y&lt;/code&gt;に対して隣接していない)。辺&lt;code&gt;(b,y)&lt;/code&gt;は&lt;code&gt;b&lt;/code&gt;の出辺であり、&lt;code&gt;y&lt;/code&gt;の入辺である。図2で、&lt;code&gt;y&lt;/code&gt;は&lt;code&gt;b&lt;/code&gt;に隣接していて、また逆も同様である。辺&lt;code&gt;(y,b)&lt;/code&gt;は頂点&lt;code&gt;y&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;を接合している。&lt;/p&gt;
&lt;p&gt;有向グラフにおいて、ある頂点の出辺の数は &lt;strong&gt;出次数(out-degree)&lt;/strong&gt; と呼ばれ、入辺の数は &lt;strong&gt;入次数(in-degree)&lt;/strong&gt; と呼ばれる。無向グラフにおいて、ある頂点に対して接合している辺の数は &lt;strong&gt;次数(degree)&lt;/strong&gt; と呼ばれる。図1で、頂点&lt;code&gt;b&lt;/code&gt;の出次数は3であり、入次数は0である。図2では単純に頂点&lt;code&gt;b&lt;/code&gt;の次数は2である。&lt;/p&gt;
&lt;p&gt;グラフの &lt;strong&gt;路(path)&lt;/strong&gt; とは辺の列で、それぞれの辺の終点が次の辺の始点であるものである。頂点&lt;code&gt;u&lt;/code&gt;から始まり頂点&lt;code&gt;v&lt;/code&gt;で終わる路があれば、頂点&lt;code&gt;v&lt;/code&gt;は&lt;code&gt;u&lt;/code&gt;から &lt;strong&gt;到達可能(reachable)&lt;/strong&gt; であるという。路が &lt;strong&gt;単純(simple)&lt;/strong&gt; であるとは、辺の列の中でどの頂点も繰り返し現れないことである。路&lt;code&gt;&amp;lt;(b,x), (x,v)&amp;gt;&lt;/code&gt;は単純であるが、路&lt;code&gt;&amp;lt;(a,z), (z,a)&amp;gt;&lt;/code&gt;は単純ではない。また、路&lt;code&gt;&amp;lt;(a,z), (z,a)&amp;gt;&lt;/code&gt;は最初の頂点と最後の頂点が一致するので、 &lt;strong&gt;サイクル(cycle)&lt;/strong&gt; と呼ばれる。サイクルのないグラフは &lt;strong&gt;アサイクリック(acyclic)&lt;/strong&gt; と呼ばれる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平面的グラフ(planar graph)&lt;/strong&gt; とは、すべての辺が交差しないように平面上に描けるグラフのことである。そのように描かれたものは &lt;strong&gt;平面グラフ(plane graph)&lt;/strong&gt; と呼ばれる。平面グラフの &lt;strong&gt;面(face)&lt;/strong&gt; とは、辺に囲まれた連結成分のことである。平面的グラフの重要な特性は、面、辺、頂点の数がオイラーの定理：&lt;code&gt;|F| - |E| + |V| = 2&lt;/code&gt;によって関係付けられることである。このことは、平面的グラフは最大でもO(|V|)個の辺しか持たないことを意味する。&lt;/p&gt;
&lt;h2&gt;グラフデータ構造&lt;/h2&gt;
&lt;p&gt;データ構造を考えるときに最初に考えるべきグラフの属性は、&lt;strong&gt;まばらさ(sparsity)&lt;/strong&gt; である。まばらさとは、頂点に対する相対的な辺の数である。&lt;code&gt;E&lt;/code&gt;が&lt;code&gt;V²&lt;/code&gt;に近いグラフは &lt;strong&gt;密(dense)&lt;/strong&gt; であると呼ばれ、&lt;code&gt;E = alpha V&lt;/code&gt;で&lt;code&gt;alpha&lt;/code&gt;が&lt;code&gt;V&lt;/code&gt;より十分に小さい場合は、まばらな(sparse)グラフと呼ばれる。密なグラフについては、通常、 &lt;strong&gt;隣接行列表現(adjacency-matrix representation)&lt;/strong&gt; が最良の選択であり、一方まばらなグラフについては &lt;strong&gt;隣接リスト表現(adjacency-list representation)&lt;/strong&gt; が最良である。また、まばらなグラフについては &lt;strong&gt;辺リスト表現(edge-list representation)&lt;/strong&gt; も適切な状況下では記憶効率面でよい選択である。&lt;/p&gt;
&lt;h3&gt;隣接行列表現&lt;/h3&gt;
&lt;p&gt;グラフの隣接行列表現はV x Vの２次元配列である。 行列a&lt;sub&gt;uv&lt;/sub&gt;の要素は、辺&lt;code&gt;(u,v)&lt;/code&gt;がグラフに含まれるかどうかを示すブーリアン値である。図3に図1(から&lt;code&gt;(b,y)&lt;/code&gt;を引いたもの)の隣接行列表現を表す。保存に必要な領域はO(V²)である。任意の辺について、アクセス、追加、除去にかかる時間はO(1)である。 頂点の追加や除去は、再割り当てとすべてのグラフのコピーが必要になり、手順数はO(V²)になる。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;クラスは、隣接行列表現によってBGLグラフインターフェースを実装する。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/figs/adj_matrix.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図3: 隣接行列によるグラフの表現&lt;/p&gt;
&lt;h3&gt;隣接リスト表現&lt;/h3&gt;
&lt;p&gt;グラフの隣接リスト表現では、すべての頂点に対して出辺の列を保存する。まばらなグラフでは、こうすることでメモリ領域を節約でき、必要な領域はO(V + E)だけになる。さらに、すべての頂点の出辺にはより効果的にアクセスできる。辺の挿入のコストはO(1)で、任意の辺へのアクセスはO(alpha)である。ここで、alphaは行列のまばらさ(グラフ中のすべての頂点についての出辺の数の最大値)である。図4は図1のグラフの隣接リスト表現である。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;は隣接リスト表現の実装である。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/figs/adj_list.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図4: 隣接リストによるグラフ表現&lt;/p&gt;
&lt;h3&gt;辺リスト表現&lt;/h3&gt;
&lt;p&gt;グラフの辺リスト表現は、単純に辺の列であり、辺は頂点のIDの組で表される。必要なメモリはO(E)だけである。辺挿入のコストはO(1)であり、特定の辺のアクセスするのはO(E)(あまり効果的でない)である。図5は図1のグラフの辺リスト表現である。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/edge_list.html&#34;&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/a&gt;アダプタクラスは、辺リスト表現の実装を作るのに使うことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/figs/edge_list.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;図5: 辺リストによるグラフの表現&lt;/p&gt;
&lt;h2&gt;グラフアルゴリズム&lt;/h2&gt;
&lt;h3&gt;グラフ探索アルゴリズム&lt;/h3&gt;
&lt;h3&gt;幅優先探索&lt;/h3&gt;
&lt;h3&gt;深さ優先探索&lt;/h3&gt;
&lt;h2&gt;最小全域木問題&lt;/h2&gt;
&lt;h2&gt;最短経路問題&lt;/h2&gt;
&lt;h2&gt;ネットワークフロー問題&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2014 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/faithandbrave@gmail.com&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : depth_first_visitを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>62d6d045b27f110e3ee35255458846a820526561:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-19 15:17:10 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;基本的なグラフ理論の復習&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DFS （深度優先探査） Visitor&lt;/li&gt;
&lt;li&gt;Dijkstra Visitor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html&#34;&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>depth_first_visit -- Boost.Graph : depth_first_visitを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html"/>
      <id>62d6d045b27f110e3ee35255458846a820526561:archive/boost_docs/libs/graph/depth_first_visit.md</id>
      <updated>2014-12-19 15:17:10 +0900</updated>
      
        <content type="html">&lt;h1&gt;depth_first_visit&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; depth_first_visit(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
  &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; vis, ColorMap color)
&lt;/pre&gt;&lt;/div&gt;

この関数は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph/doc/graph_theory_review.html#dfs-algorithm&#34;&gt;depth-firstパターン&lt;/a&gt; を使って、始点 &lt;code&gt;s&lt;/code&gt; と同じ連結成分中にある全ての頂点を訪れる。時々単独で有用ではあるが、この関数の主な目的は &lt;code&gt;depth_first_search()&lt;/code&gt; の実装のためにある。&lt;/p&gt;
&lt;p&gt;ユーザによって提供される &lt;code&gt;DFSVisitor&lt;/code&gt; はアルゴリズムの内側の各イベント・ポイントで行われるアクションを決定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ColorMap&lt;/code&gt; は訪れられた頂点の過程を保持するためにアルゴリズムによって使われる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/depth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN &lt;code&gt;IncidenceGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有向グラフまたは無向グラフ。グラフの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;Incidence Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索が開始される始点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;DFSVisitor visitor&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS Visitor&lt;/a&gt; コンセプトで指定されるイベント・ポイントで呼び出されるビジタ・オブジェクト。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL: &lt;code&gt;ColorMap color&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならず、かつキー型はグラフの頂点記述子型でなければならず、またカラー・マップの値型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;Color Value&lt;/a&gt; をモデルとしなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E) である。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたは リファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : depth_first_searchを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>0fe40a3c333bf6ddbb873f1098950bca36dc90ac:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-19 15:02:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;基本的なグラフ理論の復習&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DFS （深度優先探査） Visitor&lt;/li&gt;
&lt;li&gt;Dijkstra Visitor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>depth_first_search -- Boost.Graph : depth_first_searchを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html"/>
      <id>0fe40a3c333bf6ddbb873f1098950bca36dc90ac:archive/boost_docs/libs/graph/depth_first_search.md</id>
      <updated>2014-12-19 15:02:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;depth_first_search&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;class&lt;/span&gt; P, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; depth_first_search(Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; G,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bgl_named_params&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P, T, R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; params);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前無しパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; depth_first_search(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt; vis, ColorMap color)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; depth_first_search(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFSVisitor&lt;/a&gt; vis, ColorMap color, 
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor start)
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;depth_first_search()&lt;/code&gt; 関数は、有向グラフ中の頂点の深さ優先巡回(depth-first traversal)を行う。可能な時は、深さ優先巡回は次に訪れるために現在の頂点の隣接頂点を選ぶ。もし全ての隣接頂点がすでに発見されているならば、もしくは隣接頂点が存在しないならば、アルゴリズムは未発見の隣接を持つ前の頂点へとバックトラックする。一旦全ての到達可能な頂点が訪問されたら、アルゴリズムは残っている未発見の頂点のどれかを選び出し、巡回を続ける。このアルゴリズムは全ての頂点が訪問された時に終了する。深さ優先探索はグラフ中の辺を分類するのと、頂点を順序づけるのに役立つ。章 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#dfs-algorithm&#34;&gt;Depth-First Search&lt;/a&gt; は DFS の様々な特性を記述し、適当に例をあげている。&lt;/p&gt;
&lt;p&gt;BFS に似て、頂点が発見された過程を保持するためにカラー・マーカーが使われる。白色はまだ発見されていない頂点を印づけ、灰色は発見されたけれどもまだ未発見の隣接している頂点を持つ頂点を印づける。黒い頂点はどの白い頂点にも隣接していない発見された頂点である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;depth_first_search()&lt;/code&gt; 関数は、アルゴリズムの内部で一定のイベント・ポイントにおいて、ユーザ定義のアクションを呼び出す。これは一般的な DFS アルゴリズムが使用できる多くの状況に適用させるための機構を提供する。下の疑似コード中で、 DFS のためのイベント・ポイントは三角形と右側のラベルで示されている。ユーザ定義のアクションはビジタ・オブジェクトの形で提供されなければならない。すなわち、型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS Visitor&lt;/a&gt; の要求を満たしているオブジェクトである。擬似コード中では、先行点を計算するアルゴリズムを &lt;code&gt;p&lt;/code&gt;、発見時間を &lt;code&gt;d&lt;/code&gt;、そして終了時間を &lt;code&gt;t&lt;/code&gt; と表す。デフォルトでは、&lt;code&gt;depth_first_search()&lt;/code&gt; 関数はこれらのプロパティを計算しない。しかしながら、これを実行するのに使える &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/predecessor_recorder.html&#34;&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/time_stamper.html&#34;&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/a&gt; のような、あらかじめ定義されたビジタが存在する。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;DFS(G)
  for each vertex u in V 
    color[u] := WHITE              頂点 u の初期化
    p[u] = u 
  end for
  time := 0
  if there is a starting vertex s
    call DFS-VISIT(G, s)           頂点 s の開始
  for each vertex u in V 
    if color[u] = WHITE
      call DFS-VISIT(G, u)         頂点 u の開始
  end for
  return (p,d_time,f_time) 

DFS-VISIT(G, u) 
  color[u] := GRAY                 頂点 u の発見
  d_time[u] := time := time + 1 
  for each v in Adj[u]             辺 (u,v) の調査
    if (color[v] = WHITE)
      p[v] = u                     (u,v) は木の辺
      call DFS-VISIT(G, v)
    else if (color[v] = GRAY) 
      ...                          (u,v) は後退辺
    else if (color[v] = BLACK) 
      ...                          (u,v) は交差辺または前方辺
  end for
  color[u] := BLACK                頂点 u の終了
  f_time[u] := time := time + 1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/depth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IN: &lt;code&gt;Graph&amp;amp; g&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;有向グラフ。グラフの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;Incidence Graph&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;Vertex List Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(DFSVisitor vis)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS Visitor&lt;/a&gt; コンセプトで指定されるイベント・ポイントで呼び出されるビジタ・オブジェクト。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dfs_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap color)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならず、かつキー型はグラフの頂点記述子型でなければならず、またカラー・マップの値型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt; をモデルとしなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;default_color_type&lt;/code&gt; の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/iterator_property_map.html&#34;&gt;&lt;code&gt;iterator_property_map&lt;/code&gt;&lt;/a&gt; で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;root_vertex(typename graph_traits&amp;lt;VertexListGraph&amp;gt;::vertex_descriptor start)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは深さ優先探索が開始されるべき頂点を指定する。型は与えられたグラフの頂点記述子型である。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;*vertices(g).first&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_index_map(VertexIndexMap i_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは各頂点を &lt;code&gt;[0, num_vertices(g))&lt;/code&gt; の範囲において整数にマップする。このパラメータはデフォルトのカラー・プロパティ・マップが使われた時にのみ必要である。&lt;code&gt;VertexIndexMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。マップの値型は汎整数型でなければならない。グラフの頂点記述子型はマップのキー型として使用できる必要がある。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_index, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E + V) である。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(s, g)&lt;/code&gt; は、グラフの探索の開始前にグラフの各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.start_vertex(s, g)&lt;/code&gt; は、探索の開始前に始点において一度呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(u, g)&lt;/code&gt; は、初めて頂点に通った時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、各頂点のあらゆる出辺において、それが発見された後に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.tree_edge(e, g)&lt;/code&gt; は、各辺において、それが探索木を構成する辺のメンバになった時に呼び出される。もし先行点の記録を望むなら、このイベント・ポイントで行いなさい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.back_edge(e, g)&lt;/code&gt; は、グラフ中の後退辺において呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.forward_or_cross_edge(e, g)&lt;/code&gt; は、グラフ中の前方辺または交差辺において呼び出される。無向グラフ中ではこのメソッドは決して呼ばれない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、出辺の全てが探索木に追加され、全ての隣接頂点が発見された (ただし、それらの出辺が調査される前に) 後の頂点において呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/examples/dfs-example.cpp.html&#34;&gt;examples/dfs-example.cpp&lt;/a&gt; 中の例は、 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#dfs-algorithm&#34;&gt;Figure 1&lt;/a&gt; にあるグラフへ適用された DFS を示す。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html&#34;&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/undirected_dfs.html&#34;&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>libs/graph/example/dfs-example.cpp -- Boost.Graph : depth_first_searchを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/examples/dfs-example.cpp.html"/>
      <id>0fe40a3c333bf6ddbb873f1098950bca36dc90ac:archive/boost_docs/libs/graph/examples/dfs-example.cpp.md</id>
      <updated>2014-12-19 15:02:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;libs/graph/example/dfs-example.cpp&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Copyright 2001 Jeremy G. Siek, Andrew Lumsdaine, Lie-Quan Lee, &lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This file is part of the Boost Graph Library&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// You should have received a copy of the License Agreement for the&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost Graph Library along with the software; see the file LICENSE.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// If not, contact Office of Research, Indiana University,&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Bloomington, IN 47405.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission to modify the code and to distribute the code is&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// granted, provided the text of this NOTICE is retained, a notice if&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the code was modified is included with the above COPYRIGHT NOTICE&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// and with the COPYRIGHT NOTICE in the LICENSE file, and that the&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// LICENSE file is distributed with the modified code.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// By way of example, but not limitation, Licensor MAKES NO&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE COMPONENTS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR DOCUMENTATION WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS, TRADEMARKS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR OTHER RIGHTS.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/depth_first_search.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/pending/integer_range.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/pending/indirect_cmp.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; TimeMap &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;dfs_time_visitor&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; default_dfs_visitor {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; property_traits &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; TimeMap &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type T;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  dfs_time_visitor(TimeMap dmap, TimeMap fmap, T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t)
&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;  m_dtimemap(dmap), m_ftimemap(fmap), m_time(t) {
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Vertex, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Graph &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; discover_vertex(Vertex u, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    put(m_dtimemap, u, m_time&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Vertex, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Graph &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; finish_vertex(Vertex u, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    put(m_ftimemap, u, m_time&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;);
  }
  TimeMap m_dtimemap;
  TimeMap m_ftimemap;
  T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m_time;
};


&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Select the graph type we wish to use&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; adjacency_list &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; vecS, vecS, directedS &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; graph_traits &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertices_size_type size_type;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Set up the vertex names&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt;
  { u, v, w, x, y, z, N };
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; name[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;u&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;v&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;w&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;y&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;z&#39;&lt;/span&gt; };
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Specify the edges in the graph&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;E;
  E edge_array[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { E(u, v), E(u, x), E(x, v), E(y, x),
    E(v, y), E(w, y), E(w, z), E(z, z)
  };
&lt;span style=&#34;color: #BC7A00&#34;&gt;#if defined(BOOST_MSVC) &amp;amp;&amp;amp; BOOST_MSVC &amp;lt;= 1300&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt; g(N);  
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; j &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(edge_array) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(E); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;j)
    add_edge(edge_array[j].first, edge_array[j].second, g);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#else&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt; g(edge_array, edge_array &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(edge_array) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(E), N);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Typedefs&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor Vertex;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; size_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; Iiter;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// discover time and finish time properties&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; dtime(num_vertices(g));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ftime(num_vertices(g));
  size_type t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  dfs_time_visitor &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;vis(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dtime[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ftime[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;], t);

  depth_first_search(g, visitor(vis));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// use std::sort to order the vertices by their discover time&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; discover_order(N);
  integer_range &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; r(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, N);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy(r.begin(), r.end(), discover_order.begin());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sort(discover_order.begin(), discover_order.end(),
            indirect_cmp &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; Iiter, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dtime[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;order of discovery: &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[discover_order[i]] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; finish_order(N);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy(r.begin(), r.end(), finish_order.begin());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sort(finish_order.begin(), finish_order.end(),
            indirect_cmp &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; Iiter, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; size_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;ftime[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;order of finish: &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[finish_order[i]] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; EXIT_SUCCESS;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : dag_shortest_pathsを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>87e1374162491636b6a0ed7fe1ef90c5c81b6628:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-19 14:42:05 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;基本的なグラフ理論の復習&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DFS （深度優先探査） Visitor&lt;/li&gt;
&lt;li&gt;Dijkstra Visitor&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dag_shortest_paths -- Boost.Graph : dag_shortest_pathsを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html"/>
      <id>87e1374162491636b6a0ed7fe1ef90c5c81b6628:archive/boost_docs/libs/graph/dag_shortest_paths.md</id>
      <updated>2014-12-19 14:42:05 +0900</updated>
      
        <content type="html">&lt;h1&gt;dag_shortest_paths&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexListGraph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Param&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; dag_shortest_paths(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; VertexListGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g,
   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;VertexListGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s,
   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bgl_named_params&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Param,Tag,Rest&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; params)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前無しパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexListGraph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DijkstraVisitor&lt;/span&gt;, 
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DistanceMap&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;WeightMap&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;, 
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PredecessorMap&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Combine&lt;/span&gt;, 
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DistInf&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DistZero&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; dag_shortest_paths(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; VertexListGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g,
   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;VertexListGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
   DistanceMap distance, WeightMap weight, ColorMap color,
   PredecessorMap pred, DijkstraVisitor vis, 
   Compare compare, Combine combine, DistInf inf, DistZero zero)
&lt;/pre&gt;&lt;/div&gt;

このアルゴリズム &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#clr90&#34;&gt;[8]&lt;/a&gt; は 重み付きの非循環有向グラフ (DAG) の単一始点の最短経路問題を解く。 このアルゴリズムは DAG にとって、Dijkstra や Bellman-Ford アルゴリズムより 一層効率的である。全ての辺の重みが 1 に等しい時はこのアルゴリズムの代わりに幅優先探索を使いなさい。最短経路問題の定義のために、最短経路問題のいくつかの背景についての章 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#shortest-path-algorithms&#34;&gt;Shortest-Paths Algorithms&lt;/a&gt; を見なさい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dag_shortest_paths()&lt;/code&gt; 関数から出力を得るための主な二つの選択が存在する。&lt;code&gt;distance_map()&lt;/code&gt; パラメータを通して距離プロパティ・マップを提供するならばグラフ中の始点から他の全ての頂点への最短距離は距離マップに記録されるだろう。さらに最短経路木を先行点マップ (predecessor map) に記録する事ができる。その場合 &lt;code&gt;V&lt;/code&gt; 中の各頂点 &lt;code&gt;u&lt;/code&gt; にとって、最短経路木中では &lt;code&gt;p[u]&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; の先行点になるだろう (ただし &lt;code&gt;p[u] = u&lt;/code&gt; でここに &lt;code&gt;u&lt;/code&gt; が始点であるかまたは始点からは到達不能な頂点である場合を除く)。これらの二つの選択に加え、ユーザはアルゴリズムのイベント・ポイントのどれかの間アクションをとれる独自のビジタを提供することができる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/dag_shortest_paths.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;const VertexListGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムが適用されるグラフオブジェクト。&lt;code&gt;VertexListGraph&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;Vertex List Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;始点。全ての距離はこの頂点から計算され、最短経路木はこの頂点を根とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;weight_map(WeightMap w_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の各辺の重みまたは「長さ」。&lt;code&gt;WeightMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。グラフの辺記述子型は重みマップのキー型として使用できる必要がある。マップの値型は距離マップの値型を伴った Addable でなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(edge_weight, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_index_map(VertexIndexMap i_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは各頂点を &lt;code&gt;[0, num_vertices(g))&lt;/code&gt; の範囲において整数にマップする。これは辺がリラックスされた (減らされた) 時、ヒープ・データ構造を効率よく更新するのに必要である。&lt;code&gt;VertexIndexMap&lt;/code&gt; は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。マップの値型は汎整数型でなければならない。グラフの頂点記述子型はマップのキー型として使用できる必要がある。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_index, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;predecessor_map(PredecessorMap p_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先行点マップ (predecessor map) は最小全域木中に辺を記録する。アルゴリズムの完了時に、&lt;code&gt;V&lt;/code&gt; 中の全ての &lt;code&gt;u&lt;/code&gt; のための辺 &lt;code&gt;(p[u],u)&lt;/code&gt; は最小全域木中にある。もし &lt;code&gt;p[u] = u&lt;/code&gt; なら &lt;code&gt;u&lt;/code&gt; は始点かまたは始点から到達不能な頂点である。 &lt;code&gt;PredecessorMap&lt;/code&gt; の型はキーと頂点の型がグラフの頂点記述子型と同じ &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dummy_property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;distance_map(DistanceMap d_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ &lt;code&gt;g&lt;/code&gt; 中の始点 &lt;code&gt;s&lt;/code&gt; から各頂点への最短経路の重みは、このプロパティ・マップ中に記録される。最短経路の重みは、最短経路に沿った辺の重みの和である。&lt;code&gt;DistanceMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。グラフの頂点記述子型は距離マップのキー型として使用できる必要がある。距離マップの値型は &lt;code&gt;combine&lt;/code&gt; 関数 オブジェクトと単位要素のための &lt;code&gt;zero&lt;/code&gt; オブジェクトから作られた &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Monoid.html&#34;&gt;Monoid&lt;/a&gt; の要素型である。さらに距離の値型は &lt;code&gt;compare&lt;/code&gt; 関数オブジェクトによって供給される &lt;a href=&#34;http://www.sgi.com/tech/stl/StrictWeakOrdering.html&#34; target=&#34;_blank&#34;&gt;StrictWeakOrdering&lt;/a&gt; の順序付けを持っていなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;WeightMap&lt;/code&gt; の値型の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/iterator_property_map.html&#34;&gt;&lt;code&gt;iterator_property_map&lt;/code&gt;&lt;/a&gt; で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_compare(CompareFunction cmp)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数はどの頂点が始点により近いか決定するために距離を比較するのに使われる。 &lt;code&gt;CompareFunction&lt;/code&gt; の型は &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;Binary Predicate&lt;/a&gt; のモデルでなければならず、&lt;code&gt;DistanceMap&lt;/code&gt; プロパティ・マップの値型に一致する引数型を持たなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::less&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_combine(CombineFunction cmb)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数は道の距離を計算するために、距離を結合するのに使われる。 &lt;code&gt;CombineFunction&lt;/code&gt; の型は &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;Binary Function&lt;/a&gt; のモデルでなければならない。二項関数の第一引数の型は &lt;code&gt;DistanceMap&lt;/code&gt; プロパティ・マップの値型に一致していなければならず、第二引数の型は &lt;code&gt;WeightMap&lt;/code&gt; プロパティ・マップの値型に一致していなければならない。結果型は距離の値型と同じでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::plus&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_inf(D inf)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inf&lt;/code&gt; オブジェクトは &lt;code&gt;D&lt;/code&gt; オブジェクトのどの値よりも最も大きくなければならない。すなわち、&lt;code&gt;d != inf&lt;/code&gt; の場合どれでも &lt;code&gt;compare(d, inf) == true&lt;/code&gt; でなければならない。 &lt;code&gt;D&lt;/code&gt; の型は &lt;code&gt;DistanceMap&lt;/code&gt; の値型である。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::numeric_limits&amp;lt;D&amp;gt;::max()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_zero(D zero)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zero&lt;/code&gt; の値は距離の値と &lt;code&gt;combine&lt;/code&gt; 関数オブジェクトによって作られた &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Monoid.html&#34;&gt;Monoid&lt;/a&gt; のための単一要素でなければならない。 &lt;code&gt;D&lt;/code&gt; の型は &lt;code&gt;DistanceMap&lt;/code&gt; の値型である。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;D()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap c_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは頂点に印をつけるためにアルゴリズムの実行の間使われる。頂点は白色から始めて、それがキュー中に挿入された時に灰色になる。それからそれがキューから取り除かれた時に黒色になる。アルゴリズムの終了時に、始点から到達可能な頂点は黒色に色づけされている。その他の全ての頂点は白色のままである。&lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。頂点記述子はマップのキー型として使用できる必要があり、マップの値型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;Color Value&lt;/a&gt; のモデルでなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;default_color_type&lt;/code&gt; の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/iterator_property_map.html&#34;&gt;&lt;code&gt;iterator_property_map&lt;/code&gt;&lt;/a&gt; で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;visitor(DijkstraVisitor v)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズム内の一定のイベント・ポイントの間に起こしたいアクションを指定するのに使いなさい。&lt;code&gt;DijkstraVisitor&lt;/code&gt; は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;Dijkstra Visitor&lt;/a&gt; コンセプトのモデルでなければならない。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dijkstra_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(V + E) である。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(u, g)&lt;/code&gt; は、アルゴリズムの開始前に各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt; は、頂点が集合 &lt;code&gt;S&lt;/code&gt; に加えられた時に呼び出される。この時点で &lt;code&gt;(p[u],u)&lt;/code&gt; は最短経路木の辺であることがわかるので、 &lt;code&gt;d[u] = delta(s,u) = d[p[u]] + w(p[u],u)&lt;/code&gt; である。さらに調査された頂点の距離は単調増加 &lt;code&gt;d[u1] &amp;lt;= d[u2] &amp;lt;= d[un]&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、頂点の各出辺において、頂点が集合 &lt;code&gt;S&lt;/code&gt; に加えられた後で直ちに呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_relaxed(e, g)&lt;/code&gt; は、辺 &lt;code&gt;(u,v)&lt;/code&gt; において、 もし &lt;code&gt;d[u] + w(u,v) &amp;lt; d[v]&lt;/code&gt; であるなら呼び出される。頂点 &lt;code&gt;v&lt;/code&gt; のための最近のリラックス (減少) にあずかった辺 &lt;code&gt;(u,v)&lt;/code&gt; は最短経路木の中にある辺である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(v, g)&lt;/code&gt; は、頂点 &lt;code&gt;v&lt;/code&gt; において、 &lt;code&gt;(u,v)&lt;/code&gt; が調査されて &lt;code&gt;v&lt;/code&gt; が白色である時に呼び出される。頂点が発見されていれば灰色に色づけされており、各到達可能な頂点はきっかり一度発見されるからである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_relaxed(e, g)&lt;/code&gt; は、もし辺がリラックスされない (上を見よ) なら呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、頂点の出辺が全て調査された後に呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/examples/dag_shortest_paths.cpp.html&#34;&gt;examples/dag_shortest_paths.cpp&lt;/a&gt; を見よ。これはこのアルゴリズムの使用例である。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われず ビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>libs/graph/example/dag_shortest_paths.cpp -- Boost.Graph : dag_shortest_pathsを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/examples/dag_shortest_paths.cpp.html"/>
      <id>87e1374162491636b6a0ed7fe1ef90c5c81b6628:archive/boost_docs/libs/graph/examples/dag_shortest_paths.cpp.md</id>
      <updated>2014-12-19 14:42:05 +0900</updated>
      
        <content type="html">&lt;h1&gt;libs/graph/example/dag_shortest_paths.cpp&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This file is part of the Boost Graph Library&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// You should have received a copy of the License Agreement for the&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost Graph Library along with the software; see the file LICENSE.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// If not, contact Office of Research, University of Notre Dame, Notre&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Dame, IN 46556.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission to modify the code and to distribute modified code is&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// granted, provided the text of this NOTICE is retained, a notice that&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the code was modified is included with the above COPYRIGHT NOTICE and&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// with the COPYRIGHT NOTICE in the LICENSE file, and that the LICENSE&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// file is distributed with the modified code.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// By way of example, but not limitation, Licensor MAKES NO&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE COMPONENTS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR DOCUMENTATION WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS, TRADEMARKS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR OTHER RIGHTS.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dag_shortest_paths.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Example from Introduction to Algorithms by Cormen, et all p.537.&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Sample output:&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  r: inifinity&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  s: 0&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  t: 2&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  u: 6&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  v: 5&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  x: 3&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vecS, vecS, directedS, 
    property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;vertex_distance_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt; g(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; verts { r, s, t, u, v, x };
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; name[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;rstuvx&#34;&lt;/span&gt;;
  add_edge(r, s, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, g);
  add_edge(r, t, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, g);
  add_edge(s, t, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, g);
  add_edge(s, u, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, g);
  add_edge(t, u, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, g);
  add_edge(t, v, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, g);
  add_edge(t, x, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, g);
  add_edge(u, v, &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;, g);
  add_edge(u, x, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, g);
  add_edge(v, x, &lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;, g);

  property_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;vertex_distance_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
    d_map &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get(vertex_distance, g);

&lt;span style=&#34;color: #BC7A00&#34;&gt;#if defined(BOOST_MSVC) &amp;amp;&amp;amp; BOOST_MSVC &amp;lt;= 1300&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// VC++ has trouble with the named-parameter mechanism, so&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// we make a direct call to the underlying implementation function.&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;default_color_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; color(num_vertices(g));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; pred(num_vertices(g));
  default_dijkstra_visitor vis;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; compare;
  closed_plus&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; combine;
  property_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type w_map &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get(edge_weight, g);
  dag_shortest_paths(g, s, d_map, w_map, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;color[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;pred[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;], 
     vis, compare, combine, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max(), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
&lt;span style=&#34;color: #BC7A00&#34;&gt;#else&lt;/span&gt;
  dag_shortest_paths(g, s, distance_map(d_map));
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

  graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;graph_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_iterator vi , vi_end;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (tie(vi, vi_end) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vertices(g); vi &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; vi_end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;vi)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (d_map[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vi] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max())
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vi] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;: inifinity&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vi] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d_map[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vi] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ジェネリックプログラミング手法 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/document/generic_programming.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/document/generic_programming.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ジェネリックプログラミング手法&lt;/h1&gt;
&lt;p&gt;これは boost ライブラリで使われている、 ジェネリックプログラミング技術の不完全な概観である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元：&lt;a href=&#34;http://www.boost.org/community/generic_programming.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/community/generic_programming.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#introduction&#34;&gt;はじめに(Introduction)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#the-anatomy-of-a-concept&#34;&gt;コンセプトの分析(The Anatomy of a Concept)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#traits&#34;&gt;特性クラス(Traits)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#tag-dispatching&#34;&gt;タグ分岐(Tag Dispatching)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#adaptors&#34;&gt;アダプタ(Adaptors)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#type-generators&#34;&gt;型生成器(Type Generators)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#object-generators&#34;&gt;オブジェクト生成器(Object Generators)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#policy-classes&#34;&gt;ポリシークラス(Policy Classes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#introduction&#34; name=&#34;introduction&#34;&gt;はじめに(Introduction)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ジェネリックプログラミングはソフトウェアコンポーネントに汎用化に関するものであり、 これによりコンポーネントを多様な状況で容易に再利用することが出来る。 C++ ではクラステンプレートと関数テンプレートがジェネリックプログラミング技術に対して特に効果的である。 なぜなら、これらは効率を犠牲にすることなく汎用化を可能にするからである。&lt;/p&gt;
&lt;p&gt;ジェネリックプログラミングの簡単な例として、C 標準ライブラリの &lt;code&gt;memcpy()&lt;/code&gt; 関数をどのように汎用化するか見てみよう。 &lt;code&gt;memcpy()&lt;/code&gt; の実装は次のようになっている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;memcpy&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; region1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; region2, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)region2;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)region2) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; n;
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)region1;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last)
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;memcpy()&lt;/code&gt; 関数は既に、 &lt;code&gt;void*&lt;/code&gt; を使うことである程度汎用化されているので、 この関数は異なる種類のデータ配列のコピーに使うことが出来る。 しかし、コピーしたいデータが配列の中になかったらどうだろう。 これは、リンクリストかもしれない。コピーの概念を、 どんな要素のシーケンスにでも汎用化できるだろうか。 &lt;code&gt;memcpy()&lt;/code&gt; の中身を見ると、この関数の &lt;strong&gt;最小限の要求&lt;/strong&gt; は、ある種のポインタを使うことで、シーケンスを &lt;em&gt;横断&lt;/em&gt; し、 指された要素に &lt;em&gt;アクセス&lt;/em&gt; し、要素を目的地に &lt;em&gt;書き込み&lt;/em&gt; 、 いつ停止するかを知るためにポインタを &lt;em&gt;比較する&lt;/em&gt; 必要がある。 C++ 標準ライブラリはこのような要求を &lt;strong&gt;コンセプト&lt;/strong&gt; の中にグループ化する。 この場合は、 &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;Input Iterator&lt;/a&gt; コンセプト(region2) と &lt;a href=&#34;http://www.sgi.com/tech/stl/OutputIterator.html&#34; target=&#34;_blank&#34;&gt;Output Iterator&lt;/a&gt; コンセプト (region1) である。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;memcpy()&lt;/code&gt; を関数テンプレートとして書き直し、テンプレート引数の要求を述べるために、 &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;Input Iterator&lt;/a&gt; と &lt;a href=&#34;http://www.sgi.com/tech/stl/OutputIterator.html&#34; target=&#34;_blank&#34;&gt;Output Iterator&lt;/a&gt; を利用するなら、次のようにして、高度に再利用可能な &lt;code&gt;copy()&lt;/code&gt; 関数を実装することが出来る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; InputIterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; OutputIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
OutputIterator
copy(InputIterator first, InputIterator last, OutputIterator result)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last)
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;

汎用の &lt;code&gt;copy()&lt;/code&gt; 関数を使うことで、どんな種類のシーケンスからでも要素をコピーできるようになるのである。 これには、&lt;code&gt;std::list&lt;/code&gt; のような、イテレータを外部に置いているリンクリストも含まれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; region1(N);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; region2;

  region2.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  region2.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
  region2.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy(region2.begin(), region2.end(), region1.begin());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; region1[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#the-anatomy-of-a-concept&#34; name=&#34;the-anatomy-of-a-concept&#34;&gt;コンセプトの分析(The Anatomy of a Concept)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;コンセプト&lt;/strong&gt; は要求の集合であり、要求は有効な式、関連型、不変量、 そして計算量の保証から出来ている。要求の集合を満たす型は、コンセプトの モデル と言われる。 コンセプトは他のコンセプトの要求を拡張することが可能であり、これは &lt;strong&gt;発展型(refinement)&lt;/strong&gt; と呼ばれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有効な式&lt;/strong&gt; とは、 コンセプトの &lt;em&gt;モデル&lt;/em&gt; とみなされる式に関わるオブジェクトに対して、 コンパイルが成功しなければならない C++ の式である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;関連型&lt;/strong&gt; とは、 モデル型と関係する型であり、関連型はそのモデル型の中のひとつ以上の有効な式に加わっている。 典型的には関連型は、モデル型のためのクラス定義の中でネストされた &lt;code&gt;typedef&lt;/code&gt; によって、 または &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#traits&#34;&gt;特性クラス&lt;/a&gt; によってアクセスされる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不変量&lt;/strong&gt; とは、常に真となる、オブジェクトの実行時特性である。 つまり、そのオブジェクトを含む関数はこれらの特性を維持しなければならない。 不変量は事前条件と事後条件の形を取ることが多い。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量保証&lt;/strong&gt; は有効な式の実行にかかる時間、 またはその計算が使う様々な資源の上限である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ 標準ライブラリで使われているコンセプトは &lt;a href=&#34;http://www.sgi.com/tech/stl/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;SGI STL site&lt;/a&gt; で文書化されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#traits&#34; name=&#34;traits&#34;&gt;特性クラス(Traits)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;特性クラスは、コンパイル時の実体(型、汎整数定数、アドレス)に情報を関連付ける手段を提供する。例えば、クラステンプレート&lt;code&gt;std::iterator_traits&amp;lt;T&amp;gt;&lt;/code&gt; は次のようになっている:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; iterator_traits {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ... iterator_category;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ... value_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ... difference_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ... pointer;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ... reference;
};
&lt;/pre&gt;&lt;/div&gt;

この特性クラスの &lt;code&gt;value_type&lt;/code&gt; は、イテレータが &#34;指し示す先の&#34; 型に対して、 汎用的なコードを与える。 &lt;code&gt;iterator_category&lt;/code&gt; はイテレータの能力に依存して、 より効率的なアルゴリズムを選択するために利用することが出来る。&lt;/p&gt;
&lt;p&gt;特性テンプレートの核となる特徴は、これらが &lt;em&gt;でしゃばりではない&lt;/em&gt; ということである: これらは、組み込みの型、サードパーティのライブラリで定義された型を含め、 任意の型に情報を関連付けることを可能にする。通常、特性は特性テンプレートを(部分)特殊化することで、 特定の型に特化されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::iterator_traits&lt;/code&gt; についての詳細な記述は、 SGI が提供している &lt;a href=&#34;http://www.sgi.com/tech/stl/iterator_traits.html&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt; を見よ。 標準ライブラリでの、大きく異なる別の特性の式は &lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;&lt;/code&gt; である。これは、 数値型の範囲と能力を記述する定数を提供している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#tag-dispatching&#34; name=&#34;tag-dispatching&#34;&gt;タグ分岐(Tag Dispatching)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;特性クラスと同時に使われることが多い技術に、タグ分岐がある。 これは、型の性質に基づいて分岐するために、関数オーバーロードを使う方法である。 これについてのよい例は、C++ 標準ライブラリの &lt;a href=&#34;http://www.sgi.com/tech/stl/advance.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::advance()&lt;/code&gt;&lt;/a&gt; 関数である。 これは、イテレータを &lt;code&gt;n&lt;/code&gt; 回インクリメントする。 イテレータの種類によって、実装の中では適用される、異なる最適化がある。 もしイテレータが &lt;a href=&#34;http://www.sgi.com/tech/stl/RandomAccessIterator.html&#34; target=&#34;_blank&#34;&gt;random access&lt;/a&gt; (前方、後方に任意の距離、ジャンプすることが可能である) なら、 &lt;code&gt;advance()&lt;/code&gt; 関数は単に &lt;code&gt;i += n&lt;/code&gt; で実装され、これは非常に効率的、つまり定数時間である。 他のイテレータでは、 ステップ数が &lt;strong&gt;上昇&lt;/strong&gt; し、演算は &lt;code&gt;n&lt;/code&gt; に対する線形時間になる。 もしイテレータが、 &lt;a href=&#34;http://www.sgi.com/tech/stl/BidirectionalIterator.html&#34; target=&#34;_blank&#34;&gt;双方向&lt;/a&gt; なら、 &lt;code&gt;n&lt;/code&gt; が負であっても良いので、 イテレータをインクリメントするかデクリメントするか選ばなければならない。&lt;/p&gt;
&lt;p&gt;タグ分岐と特性クラスの関係は、分岐に使われる性質(この場合では &lt;code&gt;iterator_category&lt;/code&gt;) が特性クラスによってアクセスされることが多い、ということである。 主たる &lt;code&gt;advance()&lt;/code&gt; 関数は &lt;code&gt;iterator_category&lt;/code&gt; を得るために &lt;a href=&#34;http://www.sgi.com/tech/stl/iterator_traits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;iterator_traits&lt;/code&gt;&lt;/a&gt; クラスを使う。 それから、オーバーロードされた &lt;code&gt;advance_dispatch()&lt;/code&gt; 関数を呼び出すのである。 &lt;code&gt;iterator_category&lt;/code&gt; をどんな型に解決するかに基づいて、 コンパイラにより、 &lt;a href=&#34;http://www.sgi.com/tech/stl/input_iterator_tag.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;input_iterator_tag&lt;/code&gt;&lt;/a&gt; か &lt;a href=&#34;http://www.sgi.com/tech/stl/bidirectional_iterator_tag.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bidirectional_iterator_tag&lt;/code&gt;&lt;/a&gt; か &lt;a href=&#34;http://www.sgi.com/tech/stl/random_access_iterator_tag.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;random_access_iterator_tag&lt;/code&gt;&lt;/a&gt; の中から適した &lt;code&gt;advance_dispatch()&lt;/code&gt; が選ばれるのである。 &lt;strong&gt;タグ&lt;/strong&gt; はタグ分岐や、似たような技術で使うための性質を伝える、 という目的だけを持つ単純なクラスである。 イテレータタグのより詳細な記述については、&lt;a href=&#34;http://www.sgi.com/tech/stl/iterator_tags.html&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt; を参照すること。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; input_iterator_tag { };
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bidirectional_iterator_tag { };
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; random_access_iterator_tag { };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; detail {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Distance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; advance_dispatch(InputIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i, Distance n, input_iterator_tag) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (n&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i;
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Distance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; advance_dispatch(BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i, Distance n, 
       bidirectional_iterator_tag) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (n&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (n&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;i;
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RandomAccessIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Distance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; advance_dispatch(RandomAccessIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i, Distance n, 
       random_access_iterator_tag) {
      i &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; n;
    }
  }

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Distance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; advance(InputIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i, Distance n) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; iterator_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;InputIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator_category category;
    detail&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;advance_dispatch(i, n, category);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#adaptors&#34; name=&#34;adaptors&#34;&gt;アダプタ(Adaptors)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;アダプタ&lt;/em&gt; は別の型や、新しいインタフェース、振る舞いの変種を提供する型を構築する、 クラステンプレートである。 標準のアダプタの例は、 &lt;a href=&#34;http://www.sgi.com/tech/stl/ReverseIterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::reverse_iterator&lt;/code&gt;&lt;/a&gt; にある。これは、インクリメント、デクリメントに対しその動きを逆転させる、イテレータ型に対するアダプタである。 &lt;a href=&#34;http://www.sgi.com/tech/stl/stack.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::stack&lt;/code&gt;&lt;/a&gt; は単純なスタックインタフェースを提供するコンテナに対するアダプタである。&lt;/p&gt;
&lt;p&gt;標準でのアダプタについての、より解りやすいレビューは &lt;a href=&#34;http://www.cs.rpi.edu/~wiseb/xrds/ovp2-3b.html#SECTION00015000000000000000&#34; target=&#34;_blank&#34;&gt;ここ&lt;/a&gt; にある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#type-generators&#34; name=&#34;type-generators&#34;&gt;型生成器(Type Generators)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;型生成器&lt;/em&gt; はテンプレート引数 [^1] に基づいて新しい型を合成することだけが目的のテンプレートである。 生成された型は通常、ネストされた &lt;code&gt;typedef&lt;/code&gt; として表現され、いかにもふさわしく &lt;code&gt;type&lt;/code&gt; と命名される。 型生成は通常、複雑な型表現をひとつの型に統合するために使われる。例えば、 &lt;code&gt;boost::filter_iterator_generator&lt;/code&gt; では、次のようになっている:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iterator&lt;/span&gt;, 
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; complicated &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Reference&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; complicated &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; complicated &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Category&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; complicated &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Distance&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; complicated &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;
         &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; filter_iterator_generator {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; iterator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        Iterator,filter_iterator_policies&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Predicate,Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
        Value,Reference,Pointer,Category,Distance&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type;
};
&lt;/pre&gt;&lt;/div&gt;

いまこれは複雑だが、適応するフィルタイテレータを作るのは簡単である。 あなたは普通、ただこう書くだけでよい:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filter_iterator_generator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_predicate,my_base_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#object-generators&#34; name=&#34;object-generators&#34;&gt;オブジェクト生成器(Object Generators)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;オブジェクト生成器&lt;/em&gt; は関数テンプレートであり、唯一の目的は、 引数から新しいオブジェクトを構築することである。 汎用コンストラクタの一種として考えることが出来るだろう。 オブジェクト生成器は、生成される実際の型を表現するのが難しかったり、出来なかったりするときに、 単なるコンストラクタよりも役立つだろう。 そして生成器の結果は変数に格納するのではなく、直接関数に渡すことも出来る。 多くの Boost オブジェクト生成器は接頭辞 &#34;&lt;code&gt;make_&lt;/code&gt;&#34; がつけられている。 これは、&lt;code&gt;std::make_pair(const T&amp;amp;, constU&amp;amp;)&lt;/code&gt; に倣ってのことである。&lt;/p&gt;
&lt;p&gt;たとえば、次のようなものを考えてみる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; widget {
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; tweak(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);
};
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;widget &lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; widget_ptrs;
&lt;/pre&gt;&lt;/div&gt;

2つの標準のオブジェクト生成器、 &lt;code&gt;std::bind2nd()&lt;/code&gt; と &lt;code&gt;std::mem_fun()&lt;/code&gt; を連鎖することで、全ての装置を簡単につまむことが出来る:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;tweak_all_widgets1&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; arg)
{
   for_each(widget_ptrs.begin(), widget_ptrs.end(),
      bind2nd(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;widget&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tweak), arg));
}
&lt;/pre&gt;&lt;/div&gt;

オブジェクト生成器を使わなければ、上の例は次のようになる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;tweak_all_widgets2&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; arg)
{
   for_each(struct_ptrs.begin(), struct_ptrs.end(),
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;binder2nd&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;mem_fun1_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;, widget, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(
          std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;mem_fun1_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;, widget, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;widget&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tweak), arg));
}
&lt;/pre&gt;&lt;/div&gt;

表現がより複雑になるにつれて、型指定の冗長性を減らす必要性はどうしても大きくなるのである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/generic_programming.html#policy-classes&#34; name=&#34;policy-classes&#34;&gt;ポリシークラス(Policy Classes)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ポリシークラスは振る舞いを伝達するために使われるテンプレート引数である。 標準ライブラリからの例は &lt;code&gt;std::allocator&lt;/code&gt; である。これは、メモリ管理の振る舞いを標準の containers に伝える。&lt;/p&gt;
&lt;p&gt;ポリシークラスは Andrei Alexandrescu によって、 &lt;a href=&#34;http://www.cs.ualberta.ca/~hoover/cmput401/XP-Notes/xp-conf/Papers/7_3_Alexandrescu.pdf&#34; target=&#34;_blank&#34;&gt;この文書&lt;/a&gt; の中で詳しく探求されている。彼は次のように書いている:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ポリシークラスは几帳面なデザイン選択の実装である。 これらは他のクラスから派生しているか、他のクラスに含まれていて、 構文的に同じインタフェースの下で、異なる戦略を提供する。 ポリシーを使うクラスは、それが使うそれぞれのポリシーに対してひとつのテンプレート引数を持って、 テンプレート化されている。 このためユーザは必要なポリシーを選択することが出来るのである。

ポリシークラスの力は、その能力を自由に組み合わせることから来る。 テンプレートクラスの中のいくつかのポリシークラスを複数の引数と組み合わせることで、 コードの量をそれほど増やすことなく、組み合わせた振る舞いを実現する。
&lt;/code&gt;&lt;/pre&gt;
Andrei のポリシークラスについての記述は、その力を、 粒状性と直交性から引き出されるものとして述べている。 Boost はおそらく、Iterator Adaptors ライブラリの中でこの特徴を弱めている。 このライブラリでは、適用されたイテレータの振る舞い全てをひとつのポリシークラスに伝えている。 しかし、これには前例がある: &lt;code&gt;std::char_traits&lt;/code&gt; はその名前にもかかわらず、&lt;code&gt;std::basic_string&lt;/code&gt; の振る舞いを決定するポリシークラスとして働いているのである。&lt;/p&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[^1]: 型生成器は、 C++ に 「テンプレートの &lt;code&gt;typedef&lt;/code&gt;」 が存在しないことに対する代替手段である。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 14 Mar 2001&lt;/p&gt;
&lt;p&gt;© Copyright David Abrahams 2001. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/document/k_takahashi@cppll.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrayクラス, 固定サイズ配列のSTLコンテナ -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/array/array.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/array/array.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;arrayクラス, 固定サイズ配列のSTLコンテナ&lt;/h1&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#discussion&#34;&gt;議論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#code&#34;&gt;コード例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#introduction&#34; name=&#34;introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ 標準ライブラリの一部である C++ 標準テンプレートライブラリ STL は、さまざまな種類のコンテナに対してアルゴリズムを適用するためのフレームワークを提供している。しかしながら、通常の配列は STL コンテナのインターフェイスには備わっていない(STL コンテナのイテレータとしてのインターフェイスは用意されているけれども)。&lt;/p&gt;
&lt;p&gt;通常の配列を置き換えるものとして、STL では &lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt;が提供されているが、&lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt; は動的配列のセマンティクスを持つので、要素数が変化する可能性を持つデータを管理対象とする。静的なサイズさえあれば充分な場面では、このことはいくぶんかのオーバーヘッドを生じさせることとなる。&lt;/p&gt;
&lt;p&gt;Matthew H. Austern は彼の本、 &lt;em&gt;Generic Programming and the STL&lt;/em&gt; の中で、 &lt;strong&gt;block&lt;/strong&gt; と名づけられた、静的サイズの通常の配列を扱うとても便利なラッパクラスを紹介している。これは通常の配列よりも安全であり、パフォーマンスもひけを取らない。 &lt;em&gt;The C++ Programming Language, 3rd edition&lt;/em&gt; で、Bjarne Stroustrup は &lt;strong&gt;c_array&lt;/strong&gt; という同じようなクラスを紹介しているが、これは私(&lt;a href=&#34;http://www.josuttis.com/&#34; target=&#34;_blank&#34;&gt;Nicolai Josuttis&lt;/a&gt;)が、私の本 &lt;em&gt;The C++ Standard Library - A Tutorial and Reference&lt;/em&gt; の中で &lt;strong&gt;carray&lt;/strong&gt; と呼んでいるものを少々変更して提供したものだ。ここに紹介するのは、これらのアプローチのエッセンスを、&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;boost&lt;/a&gt; からのたくさんのフィードバックで味付けしたものである。&lt;/p&gt;
&lt;p&gt;いろいろな名前を考えたすえ、このクラスの名前はシンプルに &lt;strong&gt;array&lt;/strong&gt; と決定した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#interface&#34; name=&#34;interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このクラスは以下のインターフェイスを提供する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;型:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの型(ランダムアクセス・イテレータ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数とされる要素へのイテレータの型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の参照の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数とされる要素への参照の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付のサイズの型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なしの距離(差分)の型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;操作:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;array&amp;lt;type,num&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコンストラクタ。&lt;code&gt;num&lt;/code&gt; (要素数)個の&lt;code&gt;type&lt;/code&gt; (型)を要素とする配列を作成する。下のコメントを参照。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;array&amp;lt;type,num&amp;gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;code&gt;a&lt;/code&gt; のすべての要素をコピーする。(&lt;code&gt;a&lt;/code&gt; は同じ &lt;code&gt;type&lt;/code&gt; と &lt;code&gt;num&lt;/code&gt; でなければならない)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入。すべての要素を代入する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assign(val)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべての要素に &lt;code&gt;val&lt;/code&gt; を代入する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最初の要素へのイテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の要素の次の位置へのイテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rbegin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆イテレーションでの最初の要素を指す逆イテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆イテレーションでの最後の要素のひとつ後ろ(behind)を指す逆イテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator[i]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インデックス &lt;code&gt;i&lt;/code&gt; の要素を返す(範囲チェックなし)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;at(i)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インデックス &lt;code&gt;i&lt;/code&gt; の要素を返す(&lt;code&gt;i&lt;/code&gt; が不正な場合は &lt;code&gt;std::range_error&lt;/code&gt; を送出する)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;front()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最初の要素を返す(要素が存在することを呼び出し側で保証しなければならない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;back()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の要素を返す(要素が存在することを呼び出し側で保証しなければならない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生の配列を読み取り専用として返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列が空かどうかを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;格納可能な要素数の最大値を返す(&lt;code&gt;size()&lt;/code&gt; と同じ)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array a&lt;/code&gt; と要素を交換する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==, !=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値性を調べる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt; の比較演算。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;値:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の要素数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#discussion&#34; name=&#34;discussion&#34;&gt;議論&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;array&lt;/code&gt; クラスは&#34;reversible container&#34;(C++ 標準 Section 23.1, [lib.container.requirements] を参照)の要件のほとんどを満たしているが、完全にではない。&lt;code&gt;array&lt;/code&gt; が reversible な STL コンテナではない理由は以下のとおりである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供されるべきコンストラクタがない&lt;/li&gt;
&lt;li&gt;要素が不確定な初期値を持つ可能性がある(以下を参照)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap()&lt;/code&gt; の計算量が定数ではない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size()&lt;/code&gt; が常に一定で、型の第2テンプレート引数によって決定される。&lt;/li&gt;
&lt;li&gt;アロケータのサポートを提供しないコンテナである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&#34;sequence&#34;(C++標準Section 23.1.1, [lib.sequence.reqmts]参照)であるための要件を、以下のものを除いて満たしていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;front()&lt;/code&gt; と &lt;code&gt;back()&lt;/code&gt; が提供されている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator[]&lt;/code&gt; と &lt;code&gt;at()&lt;/code&gt; が提供されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンストラクタの点に関しては、重要な設計上のトレードオフを行い、(それによって)&#34;&lt;strong&gt;aggregate&lt;/strong&gt;&#34;( C++ 標準 Section 8.5.1, [dcl.init.aggr] を参照)として &lt;code&gt;array&lt;/code&gt; を実装することができた。つまり、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; は、ブレースで囲まれ、要素番号の昇順に並べられ、カンマで区切られたコンテナの要素への初期値のリストによって初期化することができる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::array&amp;lt;int,4&amp;gt; a = { { 1, 2, 3 } };&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;リスト内の初期値の数が足りない場合、残りの要素はデフォルト値のままになる(したがって定義された値を持つ)ことに注意しよう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;しかしながら、&lt;code&gt;初期値のリストをないままにすると、要素は不確定の初期値をもつことになる。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザー定義のコンストラクタを持たない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; あるいは &lt;code&gt;protected&lt;/code&gt; な 非 &lt;code&gt;static&lt;/code&gt; データメンバをもたない。&lt;/li&gt;
&lt;li&gt;基底クラスを持たない。&lt;/li&gt;
&lt;li&gt;仮想関数を持たない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在の実装はこのようなアプローチをとっているが、不確定な初期値を持つ可能性があることは大きな問題点である。そこで、この点に関してこのようにすべきだというあなたの考えを、ぜひフィードバックしてほしい。ここから導かれる &lt;strong&gt;未解決の問題点&lt;/strong&gt; は以下のようなものだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初期化リストをサポートするべきか、あるいは次のようなものでOKか？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int data[] = { 1, 2, 3, 4 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&amp;lt;int,5&amp;gt; x(data);&lt;/code&gt; あるいは  &lt;code&gt;array&amp;lt;int,data&amp;gt; x;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可搬性のために、初期化リストとして、&#34;&lt;code&gt;{ { ... } }&lt;/code&gt;&#34;のかわりに、&#34;&lt;code&gt;{ ... }&lt;/code&gt;&#34;を使えるようにするべきだろうか？&lt;ul&gt;
&lt;li&gt;規格の 8.5.1 (11) ではこれは許されているようだが、gcc 2.95.2 では警告メッセージを表示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初期値の決定と、初期化リストのサポートのための、別の方法があるだろうか？&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;逆イテレータのstuffのための Static_casts はどうするか？&amp;lt;/font&amp;gt;&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;原文は「Static_casts for reverse iterator stuff?」。よくわかりません…&amp;lt;/font&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建設的な&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/solutions@josuttis.com&#34;&gt;フィードバック&lt;/a&gt;はどのようなものでも歓迎する。&lt;strong&gt;注意してほしいのは、boostメーリングリストのすべてのメールを読むだけの時間が、私にはないという点だ。というわけで、確実にフィードバックが私に届くようにするため、このクラスに関するメールについては、私にコピーを送ってほしい。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#code&#34; name=&#34;code&#34;&gt;コード例&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下のコードは「このままの形(as is)」で提供され、明示的あるいは暗黙的な保証はない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.hpp.html&#34;&gt;&lt;strong&gt;array.hpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の実装ファイル&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array1.cpp.html&#34;&gt;&lt;strong&gt;array1.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った簡単な例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array2.cpp.html&#34;&gt;&lt;strong&gt;array2.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った別の例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array3.cpp.html&#34;&gt;&lt;strong&gt;array3.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った三つ目の例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array4.cpp.html&#34;&gt;&lt;strong&gt;array4.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; を使った例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array5.cpp.html&#34;&gt;&lt;strong&gt;array5.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の他の操作をテストする例&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind.hpp -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/bind.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/bind.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;bind.hpp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/bind/bind.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/bind/bind.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#purpose&#34;&gt;目的&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-and-function-pointer&#34;&gt;関数と関数ポインタに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-object&#34;&gt;関数オブジェクトに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-pointer-to-member&#34;&gt;メンバへのポインタに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-nested-binds-for-function-composition&#34;&gt;関数合成のために入れ子の&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#examples&#34;&gt;コード例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-standard-algorithms&#34;&gt;標準アルゴリズムに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-boost-function&#34;&gt;Boost.Functionと&lt;code&gt;bind&lt;/code&gt;を組み合わせて使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#limitation&#34;&gt;制限&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#frequently-asked-questions&#34;&gt;よくある質問と回答&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-doesnt-this-compile&#34;&gt;どうしてコンパイルできない？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-does-this-compile&#34;&gt;どうしてコンパイルできちゃう？ エラーになる筈なのに。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind-r&#34;&gt;&lt;code&gt;bind(f, ...)&lt;/code&gt; と &lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; はどう違う？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-win-api&#34;&gt;bind は Windows の API 関数に対して使える？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-com-methods&#34;&gt;bind は COM のメソッドに使える？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-mac-toolbox&#34;&gt;bind は Mac の Toolbox 関数に使える？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-extern-c-functions&#34;&gt;bind は extern &#34;C&#34; な関数に使える？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-doesnt-bind-automatically-recognize-nonstd-functions&#34;&gt;どうして bind は非標準の関数を自動的に認識しない？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#troubleshooting&#34;&gt;トラブルシューティング&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#incorrect-number-of-arguments&#34;&gt;引数の数が不正&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#function-object-cannot-be-called-with-the-specified-arguments&#34;&gt;関数オブジェクトは指定された引数とともに呼び出すことはできない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#access-arg-does-not-exist&#34;&gt;存在しない引数へのアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#inappropriate-use-of-bind&#34;&gt;&lt;code&gt;bind(f, ...)&lt;/code&gt; の不適切な使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#inappropriate-use-of-bind-r&#34;&gt;&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; の不適切な使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#binding-a-nonstd-function&#34;&gt;非標準の関数を束縛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#const-in-signatures&#34;&gt;シグネチャが const を含む&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MSVC specific: using boost::bind;&lt;/li&gt;
&lt;li&gt;MSVC specific: class templates shadow function templates&lt;/li&gt;
&lt;li&gt;MSVC specific: ... in signatures treated as type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface&lt;ul&gt;
&lt;li&gt;Synopsis&lt;/li&gt;
&lt;li&gt;Common requirements&lt;/li&gt;
&lt;li&gt;Common definitions&lt;/li&gt;
&lt;li&gt;bind&lt;/li&gt;
&lt;li&gt;Additional overloads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation&lt;ul&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;li&gt;Number of Arguments&lt;/li&gt;
&lt;li&gt;&#34;&lt;strong&gt;stdcall&#34;, &#34;&lt;/strong&gt;fastcall&#34;, and &#34;pascal&#34; Support&lt;/li&gt;
&lt;li&gt;Using the BOOST_BIND macro&lt;/li&gt;
&lt;li&gt;visit_each support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acknowledgements&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#purpose&#34; name=&#34;purpose&#34;&gt;目的&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::bind&lt;/code&gt; は標準ライブラリの関数 &lt;code&gt;std::bind1st&lt;/code&gt; および &lt;code&gt;std::bind2nd&lt;/code&gt; を汎用化したものである。 関数オブジェクトだけでなく、関数や関数へのポインタ、メンバ関数へのポインタをサポートし、任意の引数を特定の値に束縛したり、入力引数を、もとの順番に関係なく自由な位置に移し替えることができる。 &lt;code&gt;bind&lt;/code&gt; が扱うことのできる関数オブジェクトには、特別な条件はない。 特に、標準関数が要求する &lt;code&gt;typedef result_type&lt;/code&gt; や &lt;code&gt;first_argument_type&lt;/code&gt; および &lt;code&gt;second_argument_type&lt;/code&gt; は必須ではない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【訳注：このような関数を一般に「バインダ」または「束縛子」と呼ぶ。】&lt;/li&gt;
&lt;li&gt;【訳注：「入力引数」とは、&lt;code&gt;bind&lt;/code&gt; によって生成された関数オブジェクトを呼び出す時に渡される引数。例えば、&lt;code&gt;bind(f, _1, 5)(x)&lt;/code&gt; における &lt;code&gt;x&lt;/code&gt; のこと。】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-and-function-pointer&#34; name=&#34;using-bind-with-function-and-function-pointer&#34;&gt;関数と関数ポインタに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下の関数が定義されているとき、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;bind(f, 1, 2)&lt;/code&gt; は &#34;nullary&#34; (無項)、つまり引数をとらない関数オブジェクトを生成する。これを評価すると &lt;code&gt;f(1, 2)&lt;/code&gt; を返す。 同様に、&lt;code&gt;bind(g, 1, 2, 3)()&lt;/code&gt; は &lt;code&gt;g(1, 2, 3)&lt;/code&gt; と等価である。&lt;/p&gt;
&lt;p&gt;【訳注：&#34;nullary&#34; は boost の造語のようで、「いくつかの邪悪な提案のうち、いちばんマシ」として選ばれたとの記述が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/compose/index.html&#34;&gt;compose ライブラリのコメント&lt;/a&gt; にある。】&lt;/p&gt;
&lt;p&gt;引数のうちいくつかだけを、選択的に束縛することもできる。 例えば、&lt;code&gt;bind(f, _1, 5)(x)&lt;/code&gt; は &lt;code&gt;f(x, 5)&lt;/code&gt; と等価である。 ここで、&lt;code&gt;_1&lt;/code&gt; は「最初の入力引数によって置き換えられる」ことを意味するプレースホルダである。&lt;/p&gt;
&lt;p&gt;【訳注：残念ながら、&lt;code&gt;bind(f, _1, 5)(10)&lt;/code&gt; のように、入力引数にリテラルを渡すことはできない。詳しくは、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#limitation&#34;&gt;制限の項&lt;/a&gt; を参照。】&lt;/p&gt;
&lt;p&gt;比較のため、同じ操作を標準ライブラリのプリミティブを使って書くとこうなる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(f), &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)(x);
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;bind&lt;/code&gt; は &lt;code&gt;std::bind1st&lt;/code&gt; の機能もカバーしている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(f), &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)(x);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// f(5, x)&lt;/span&gt;
bind(f, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, _1)(x);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// f(5, x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;bind&lt;/code&gt; は二つ以上の引数を持つ関数を扱うことができる。 また、引数の置き換え機能はより一般化されている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bind(f, _2, _1)(x, y);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// f(y, x)&lt;/span&gt;
bind(g, _1, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, _1)(x);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// g(x, 9, x)&lt;/span&gt;
bind(g, _3, _3, _3)(x, y, z);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// g(z, z, z)&lt;/span&gt;
bind(g, _1, _1, _1)(x, y, z);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// g(x, x, x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

最後の例で、&lt;code&gt;bind(g, _1, _1, _1)&lt;/code&gt; が生成する関数オブジェクトは入力引数を一つしか受け取らないにも関わらず、複数の引数を付けて呼び出せることに注意。 このように、余分な引数は黙って無視され、エラーにはならない。 同様に、三番目の例では最初の引数 &lt;code&gt;x&lt;/code&gt; と二番目の引数 &lt;code&gt;y&lt;/code&gt; は無視される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; に渡される引数はコピーされ、生成された関数オブジェクトの内部に保持される。 例えば、以下のコードでは、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
bind(f, i, _1);
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;i&lt;/code&gt; の値のコピーが関数オブジェクトに格納される。 コピーではなく参照を関数オブジェクトに格納したい場合には、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html&#34;&gt;&lt;code&gt;boost::ref&lt;/code&gt;&lt;/a&gt; および &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html&#34;&gt;&lt;code&gt;boost::cref&lt;/code&gt;&lt;/a&gt; を使う必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
bind(f, ref(i), _1);
&lt;/pre&gt;&lt;/div&gt;

【訳注：詳しくは、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html&#34;&gt;&lt;code&gt;ref&lt;/code&gt; のドキュメント&lt;/a&gt;を参照。】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-object&#34; name=&#34;using-bind-with-function-object&#34;&gt;関数オブジェクトに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; は通常の関数だけでなく、任意の関数オブジェクトを受け付ける。 一般的には（標準 C++ には &lt;code&gt;typeof&lt;/code&gt; 演算子がなく、戻り型を推論できないため）、生成される関数オブジェクトの &lt;code&gt;operator()&lt;/code&gt; の戻り型を以下のように明示的に指定する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; F
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; b; }
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; b) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b; }
};

F f;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;104&lt;/span&gt;;

bind&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(f, _1, _1)(x);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// f(x, x) つまり、ゼロ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

関数オブジェクトが &lt;code&gt;result_type&lt;/code&gt; という名前の入れ子の型を開示している場合、戻り型を明示的に書く必要はない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;nt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;;

bind(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(), _1, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)(x);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// x &amp;lt; 9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

【注意：戻り型を省略する機能は、コンパイラによっては利用できない場合がある。】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-pointer-to-member&#34; name=&#34;using-bind-with-pointer-to-member&#34;&gt;メンバへのポインタに対して&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;メンバ関数へのポインタやデータメンバへのポインタは &lt;code&gt;operator()&lt;/code&gt; を持たないので、関数オブジェクトではない。 しかし、それでは不便なので、&lt;code&gt;bind&lt;/code&gt; は最初の引数としてメンバへのポインタも受け付ける。 この場合、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;&lt;code&gt;boost::mem_fn&lt;/code&gt;&lt;/a&gt; によってメンバへのポインタが関数オブジェクトに変換されて渡されたかのように振る舞う。 すなわち、式&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, &lt;i&gt;args&lt;/i&gt;)
&lt;/pre&gt;&lt;/div&gt;

は以下の式と等価である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bind&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f), &lt;i&gt;args&lt;/i&gt;)
&lt;/pre&gt;&lt;/div&gt;

ここで、&lt;code&gt;R&lt;/code&gt; は &lt;code&gt;X::f&lt;/code&gt; の戻り型（メンバ関数の場合）、またはメンバの型への &lt;code&gt;const&lt;/code&gt; な参照（データメンバの場合）である。&lt;/p&gt;
&lt;p&gt;【注意：&lt;code&gt;mem_fn&lt;/code&gt; が生成する関数オブジェクトを呼び出す際には、最初の引数としてオブジェクトのポインタ、参照またはスマートポインタを渡す。 詳しくは、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;&lt;code&gt;mem_fn&lt;/code&gt; のドキュメント&lt;/a&gt;を参照。】&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X
{
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; f(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a);
};

X x;

shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; X);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;

bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, ref(x), _1)(i);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// x.f(i)&lt;/span&gt;
bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, _1)(i);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (&amp;amp;x)-&amp;gt;f(i)&lt;/span&gt;
bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, x, _1)(i);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (x の内部的なコピー).f(i)&lt;/span&gt;
bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, p, _1)(i);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (p の内部的なコピー)-&amp;gt;f(i)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

最後の二つの例は「自己充足な」関数オブジェクトを生成する興味深い例である。 &lt;code&gt;bind(&amp;amp;X::f, x, _1)&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; のコピーを保持する。 &lt;code&gt;bind(&amp;amp;X::f, p, _1)&lt;/code&gt; は &lt;code&gt;p&lt;/code&gt; のコピーを保持し、&lt;code&gt;p&lt;/code&gt; が &lt;code&gt;boost::shared_ptr&lt;/code&gt; であるため、関数オブジェクトは &lt;code&gt;X&lt;/code&gt; のインスタンスへの参照を持ち、それは &lt;code&gt;p&lt;/code&gt; のスコープを抜けたり &lt;code&gt;reset()&lt;/code&gt; されたりしても有効である。&lt;/p&gt;
&lt;p&gt;【訳注：つまり、&lt;code&gt;bind&lt;/code&gt; の最初の引数がメンバ関数へのポインタである場合、次の引数はそのメンバ関数を持つクラスまたは派生クラスのオブジェクトまたはポインタ、&lt;code&gt;ref()&lt;/code&gt;、スマートポインタでなければならない。】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-nested-binds-for-function-composition&#34; name=&#34;using-nested-binds-for-function-composition&#34;&gt;関数合成のために入れ子の&lt;code&gt;bind&lt;/code&gt;を使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; に渡される引数のうちいくつかは、それ自体が &lt;code&gt;bind&lt;/code&gt; の入れ子になった式でもよい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bind(f, bind(g, _1))(x);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// f(g(x))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;bind&lt;/code&gt; によって生成された関数オブジェクトを呼び出す時には、外側の &lt;code&gt;bind&lt;/code&gt; 式が呼ばれる前に内側の &lt;code&gt;bind&lt;/code&gt; 式が、複数ある場合は順不同で評価される。 次に、その結果は外側の &lt;code&gt;bind&lt;/code&gt; が評価される際の引数として渡される。 上の例で、関数オブジェクトが引数リスト &lt;code&gt;(x)&lt;/code&gt; とともに呼び出される場合、&lt;code&gt;bind(g, _1)(x)&lt;/code&gt; がまず評価されて &lt;code&gt;g(x)&lt;/code&gt; となり、次に &lt;code&gt;bind(f, g(x))(x)&lt;/code&gt; が評価され、最終的な結果は &lt;code&gt;f(g(x))&lt;/code&gt; となる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; のこの機能は、関数を合成するために使用することができる。 詳しくは、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/bind_as_compose.cpp.html&#34;&gt;&lt;code&gt;bind_as_compose.cpp&lt;/code&gt;&lt;/a&gt; に &lt;code&gt;bind&lt;/code&gt; を使って &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/compose/index.html&#34;&gt;Boost.Compose&lt;/a&gt; と同様の効果を得るサンプルがあるので、それを参照のこと。&lt;/p&gt;
&lt;p&gt;ただし、（&lt;code&gt;bind&lt;/code&gt; 関数の）最初の引数、つまり束縛される関数オブジェクトは、評価されないので注意すること。 特に、関数オブジェクトが &lt;code&gt;bind&lt;/code&gt; で生成されたものや、プレースホルダ引数の場合でも評価されないので、次の例は期待通りには動かない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pf&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), bind(_1, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

【訳注：動かないというか、コンパイルできない。】&lt;/p&gt;
&lt;p&gt;期待通りの結果を得るには、ヘルパ関数オブジェクト &lt;code&gt;apply&lt;/code&gt; を使用する必要がある。 &lt;code&gt;apply&lt;/code&gt; はその最初の引数である関数オブジェクトを、残りの引数リストに対して適用する。 &lt;code&gt;apply&lt;/code&gt; 関数は &lt;code&gt;boost/bind/apply.hpp&lt;/code&gt; ヘッダファイルに定義されている。 上の例は、この &lt;code&gt;apply&lt;/code&gt; を使って次のように書き直せばよい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pf&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), bind(apply&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(), _1, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

時には、最初の引数だけでなく、入れ子になった &lt;code&gt;bind&lt;/code&gt; 部分式であるような他の引数を評価したくない場合もある。 この場合は、別のヘルパ関数 &lt;code&gt;protect&lt;/code&gt; を使用するとよい。 これにより、引数の型がマスクされ、&lt;code&gt;bind&lt;/code&gt; が認識されず、評価されない。 呼び出し時には、&lt;code&gt;protect&lt;/code&gt; は単純に引数リストを他の関数オブジェクトのそのまま渡す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;protect&lt;/code&gt; 関数は &lt;code&gt;boost/bind/protect.hpp&lt;/code&gt; ヘッダに含まれている。 &lt;code&gt;bind&lt;/code&gt; 関数オブジェクトを評価されないように保護するには、&lt;code&gt;protect(bind(f, ...))&lt;/code&gt; と書けばよい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#examples&#34; name=&#34;examples&#34;&gt;コード例&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-standard-algorithms&#34; name=&#34;using-bind-with-standard-algorithms&#34;&gt;標準アルゴリズムと&lt;code&gt;bind&lt;/code&gt;を組み合わせて使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;image&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;animation&lt;/span&gt;
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; advance(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ms);
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; inactive() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; render(image &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; target) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;animation&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; anims;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; erase_if(C &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, P pred)
{
    c.erase(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;remove_if(c.begin(), c.end(), pred), c.end());
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; update(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ms)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(anims.begin(), anims.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;animation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;advance, _1, ms));
    erase_if(anims, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;animation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;inactive));
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; render(image &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; target)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(anims.begin(), anims.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;animation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;render, _1, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(target)));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-boost-function&#34; name=&#34;using-bind-with-boost-function&#34;&gt;Boost.Functionと&lt;code&gt;bind&lt;/code&gt;を組み合わせて使用する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;button&lt;/span&gt;
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; onClick;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;player&lt;/span&gt;
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; play();
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stop&lt;/span&gt;();
};

button playButton, stopButton;
player thePlayer;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;connect&lt;/span&gt;()
{
    playButton.onClick &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;player&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;play, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;thePlayer);
    stopButton.onClick &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;player&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stop, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;thePlayer);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#limitation&#34; name=&#34;limitation&#34;&gt;制限&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; が生成する関数オブジェクトは、引数を参照渡しで受け取る。このため、&lt;code&gt;const&lt;/code&gt; でない一時オブジェクトやリテラル定数を受け取ることはできない。 これは、C++ 言語自体の制約であり、「転送する関数の問題（？）」として知られている。&lt;/p&gt;
&lt;p&gt;任意の型の引数を受け取り、それらをそのまま渡すために、&lt;code&gt;bind&lt;/code&gt; ライブラリでは、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
&lt;/pre&gt;&lt;/div&gt;

という形式のシグネチャを（訳注：仮引数に）使っている。 上記のように、この方法は &lt;code&gt;const&lt;/code&gt; でない右辺値には使えない。&lt;/p&gt;
&lt;p&gt;この問題に対して、次のようにオーバーロードを追加する「解決策」がよく提案される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
&lt;/pre&gt;&lt;/div&gt;

残念ながら、この方法は (a) 引数が 9 つある場合、512 ものオーバーロードを提供する必要があり、(b) 引数が &lt;code&gt;const&lt;/code&gt; である場合、シグネチャが全く同じであるために半順序（？）を定義できず、左辺値にも右辺値にもうまく働かない。&lt;/p&gt;
&lt;p&gt;【注意：これは C++ 言語の暗い隅（？）であり、該当する問題はまだ解決されていない。】&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#frequently-asked-questions&#34; name=&#34;frequently-asked-questions&#34;&gt;よくある質問と回答&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-doesnt-this-compile&#34; name=&#34;why-doesnt-this-compile&#34;&gt;どうしてコンパイルできない？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#troubleshooting&#34;&gt;トラブルシューティング&lt;/a&gt; の項を参照。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-does-this-compile&#34; name=&#34;why-does-this-compile&#34;&gt;どうしてコンパイルできちゃう？ エラーになる筈なのに。&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;おそらく、&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; という汎用の構文を使っているためであろう。この書き方は、&lt;code&gt;bind&lt;/code&gt; に対して &lt;code&gt;f&lt;/code&gt; の引数の数や戻り型に関するエラーチェックをしないように指示するものである。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind-r&#34; name=&#34;what-is-the-difference-between-bind-and-bind-r&#34;&gt;&lt;code&gt;bind(f, ...)&lt;/code&gt; と &lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; はどう違う？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最初の形式は &lt;code&gt;bind&lt;/code&gt; に &lt;code&gt;f&lt;/code&gt; の型を調べて、引数の数や戻り型を解決するように指示する。 引数の数の間違いは「バインド時」に検出される。 この構文はもちろん、&lt;code&gt;f&lt;/code&gt; に対していくつかのことを要求する。 つまり、&lt;code&gt;f&lt;/code&gt; は関数、関数ポインタ、メンバ関数へのポインタのいずれかであるか、関数オブジェクトの場合には &lt;code&gt;result_type&lt;/code&gt; という入れ子の型を定義する必要がある。簡単に言えば、&lt;code&gt;bind&lt;/code&gt; が認識できるものでなければならない。&lt;/p&gt;
&lt;p&gt;二番目の形式は &lt;code&gt;bind&lt;/code&gt; に &lt;code&gt;f&lt;/code&gt; の型を識別しないように指示する。 これは一般的には、&lt;code&gt;result_type&lt;/code&gt; を開示しない、あるいはできない関数オブジェクトとともに用いられるが、その他に非標準の関数に対しても用いることができる。 たとえば、現在の実装は &lt;code&gt;printf&lt;/code&gt; のような可変引数の関数を自動的に認識しないため、&lt;code&gt;bind&amp;lt;int&amp;gt;(printf, ...)&lt;/code&gt; と書く必要がある。&lt;/p&gt;
&lt;p&gt;【訳注：「非標準」は原文では nonstandard だが、printf が「非標準」というのは変だなぁ。】&lt;/p&gt;
&lt;p&gt;他に考慮すべき重要な点として、コンパイラがテンプレートの部分特殊化版や関数テンプレートの半順序（？）に対応していない場合、&lt;code&gt;f&lt;/code&gt; が関数オブジェクトであれば最初の形式は扱えず、また、&lt;code&gt;f&lt;/code&gt; が関数（ポインタ）やメンバ関数へのポインタであれば二番目の形式は扱えないことが多い。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-win-api&#34; name=&#34;does-bind-work-with-win-api&#34;&gt;bind は Windows の API 関数に対して使える？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;はい、&lt;code&gt;#define BOOST_BIND_ENABLE_STDCALL&lt;/code&gt; すれば。 または、目的の関数を &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-object&#34;&gt;generic function object&lt;/a&gt; として扱って、&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; の構文を使っても良い。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-com-methods&#34; name=&#34;does-bind-work-with-com-methods&#34;&gt;bind は COM のメソッドに使える？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;はい、&lt;code&gt;#define BOOST_MEM_FN_ENABLE_STDCALL&lt;/code&gt; すれば。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-mac-toolbox&#34; name=&#34;does-bind-work-with-mac-toolbox&#34;&gt;bind は Mac の Toolbox 関数に使える？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;はい、&lt;code&gt;#define BOOST_BIND_ENABLE_PASCAL&lt;/code&gt; すれば。 または、目的の関数を &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-object&#34;&gt;generic function object&lt;/a&gt; として扱って、&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; の構文を使っても良い。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-extern-c-functions&#34; name=&#34;does-bind-work-with-extern-c-functions&#34;&gt;bind は extern &#34;C&#34; な関数に使える？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;場合による。 いくつかのプラットフォームでは、&lt;code&gt;extern &#34;C&#34;&lt;/code&gt; な関数へのポインタは「通常の」関数ポインタと等価であり、問題なく動く。 他のプラットフォームでは、それらは別物として扱われる。 プラットフォーム固有の &lt;code&gt;bind&lt;/code&gt; の実装があれば、問題を透過的に解決できることが期待されるが、この実装はそうなっていない。 いつものように、回避策は目的の関数を &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#using-bind-with-function-object&#34;&gt;generic function object&lt;/a&gt; として扱って、&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; の構文を使うことである。&lt;/p&gt;
&lt;p&gt;【訳注：「この実装」とあるが、このドキュメントは &lt;code&gt;bind&lt;/code&gt; の仕様を定義するもので、附属の実装は「サンプル実装」という位置付けで書かれているものと思われる。（？）】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#why-doesnt-bind-automatically-recognize-nonstd-functions&#34; name=&#34;why-doesnt-bind-automatically-recognize-nonstd-functions&#34;&gt;どうして bind は非標準の関数を自動的に認識しない？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;特定のベンダに縛られることを防ぐために、非標準の拡張は一般的にデフォルトでオフにすべきである。 もしも&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html##does-bind-work-with-win-api&#34;&gt;固有のマクロ&lt;/a&gt;が自動的に定義されたら、そのつもりがないのにそれらの機能を使ってしまい、知らない間に互換性を損なってしまう危険性がある。 また、いくつかのコンパイラは &lt;code&gt;__stdcall (__fastcall)&lt;/code&gt; をデフォルトの呼び出し規約とするオプションを用意しており、特別なサポートは必要ない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#troubleshooting&#34; name=&#34;troubleshooting&#34;&gt;トラブルシューティング&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#incorrect-number-of-arguments&#34; name=&#34;incorrect-number-of-arguments&#34;&gt;引数の数が不正(Incorrect number of arguments)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;式 &lt;code&gt;bind(f, a1, a2, ..., aN)&lt;/code&gt; において、関数オブジェクト &lt;code&gt;f&lt;/code&gt; はちょうど &lt;code&gt;N&lt;/code&gt; 個の引数を取らなければならない。 このエラーは、通常「バインド時」に検出される。すなわち、&lt;code&gt;bind()&lt;/code&gt; を呼び出している行に対してコンパイルエラーが報告される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー、f は二つの引数を取る&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

このエラーの変種として、メンバ関数に対する暗黙の「&lt;code&gt;this&lt;/code&gt;」引数を忘れることも多い。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; f(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー、X::f は二つの引数を取る&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f, _1, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

【訳注：&lt;code&gt;bind&lt;/code&gt; では、メンバ関数へのポインタは、通常の引数の前に暗黙の「&lt;code&gt;this&lt;/code&gt;」引数をとるものとみなす。】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#function-object-cannot-be-called-with-the-specified-arguments&#34; name=&#34;function-object-cannot-be-called-with-the-specified-arguments&#34;&gt;関数オブジェクトは指定された引数とともに呼び出すことはできない(The function object cannot be called with the specified arguments)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常の関数呼び出しと同様、束縛される関数オブジェクトは引数リストと互換性を持つ必要がある。 非互換性は、通常コンパイラによって「呼び出し時」に検出され、&lt;code&gt;bind.hpp&lt;/code&gt; の次のような行に対するエラーとなる。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    return f(a[a1_], a[a2_]);
&lt;/code&gt;&lt;/pre&gt;
An example of this kind of error:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;incompatible&#34;&lt;/span&gt;);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK、呼び出さないので&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;incompatible&#34;&lt;/span&gt;)();    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー、&#34;incompatible&#34; は int ではない&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, _1);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, _1)(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;incompatible&#34;&lt;/span&gt;);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー、&#34;incompatible&#34; は int ではない&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#access-arg-does-not-exist&#34; name=&#34;access-arg-does-not-exist&#34;&gt;存在しない引数へのアクセス(Accessing an argument that does not exist)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;プレースホルダ &lt;code&gt;_N&lt;/code&gt; は引数リストの &lt;code&gt;N&lt;/code&gt; 番目の引数を、「呼び出し時」に選択する。 当然、引数リストの範囲外のものにアクセスしようとすればエラーになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, _1);                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, _1)();                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー、一番目の引数は存在しない&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

このエラーは、通常 &lt;code&gt;bind.hpp&lt;/code&gt; の次のような行に対して報告される。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;    return f(a[a1_]);
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;std::bind1st(f, a)&lt;/code&gt; の代わりに使う場合、&lt;code&gt;bind(f, a, _1)&lt;/code&gt; ではなく間違って &lt;code&gt;bind(f, a, _2)&lt;/code&gt; としてしまうことも多い。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#inappropriate-use-of-bind&#34; name=&#34;inappropriate-use-of-bind&#34;&gt;&lt;code&gt;bind(f, ...)&lt;/code&gt; の不適切な使用(Inappropriate use of &lt;code&gt;bind(f, ...)&lt;/code&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind(f, a1, a2, ..., aN)&lt;/code&gt; の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind-r&#34;&gt;形式&lt;/a&gt;は &lt;code&gt;f&lt;/code&gt; を自動的に認識させる。 これは、任意の関数オブジェクトに対して働くわけではない。&lt;code&gt;f&lt;/code&gt; は関数またはメンバ関数へのポインタでなければならない。&lt;/p&gt;
&lt;p&gt;この形式を &lt;code&gt;result_type&lt;/code&gt; を定義する関数オブジェクトに使えるのは、部分特殊化版や半順序（？）をサポートしているコンパイラに限られる。 特に、MSVC のバージョン 7.0 までは、関数オブジェクトに対するこの構文はサポートしない。&lt;/p&gt;
&lt;p&gt;【訳注：原文では MSVC up to version 7.0 となっているが、これは 7.0 を含むのだろうか？】&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#inappropriate-use-of-bind-r&#34; name=&#34;inappropriate-use-of-bind-r&#34;&gt;&lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt; の不適切な使用(Inappropriate use of &lt;code&gt;bind&amp;lt;R&amp;gt;(f, ...)&lt;/code&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bind&amp;lt;R&amp;gt;(f, a1, a2, ..., aN)&lt;/code&gt;の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind-r&#34;&gt;形式&lt;/a&gt;は、任意の関数オブジェクトをサポートする。&lt;/p&gt;
&lt;p&gt;この形式を、(推奨はしないが)関数もしくメンバ関数ポインタに使えるのは、半順序をサポートしているコンパイラに限られる。特に、MSVC のバージョン 7.0 までは、関数とメンバ関数ポインタに対するこの構文はサポートしない。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#binding-a-nonstd-function&#34; name=&#34;binding-a-nonstd-function&#34;&gt;非標準の関数を束縛(Binding a nonstandard function)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;デフォルトでは、&lt;code&gt;bind(f, a1, a2, ..., aN)&lt;/code&gt; の&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind&#34;&gt;形式&lt;/a&gt;は、「通常」のC++関数と関数ポインタのみを受け入れる。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-win-api&#34;&gt;関数が異なる呼び出し規約を使っていたり&lt;/a&gt;、&lt;code&gt;std::printf&lt;/code&gt;のような可変引数の関数では、動作しない。汎用的な&lt;code&gt;bind&amp;lt;R&amp;gt;(f, a1, a2, ..., aN)&lt;/code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#what-is-the-difference-between-bind-and-bind-r&#34;&gt;形式&lt;/a&gt;なら、そのような非標準関数に対しても動作する。&lt;/p&gt;
&lt;p&gt;いくつかのプラットフォームでは、&lt;code&gt;extern &#34;C&#34;&lt;/code&gt;の付いた&lt;code&gt;stdcmp&lt;/code&gt;のような関数は、短い形式の&lt;code&gt;bind&lt;/code&gt;では動作しない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-win-api&#34;&gt;&#34;&lt;code&gt;__stdcall&lt;/code&gt;&#34;&lt;/a&gt;や&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#does-bind-work-with-mac-toolbox&#34;&gt;&#34;&lt;code&gt;pascal&lt;/code&gt;&#34;&lt;/a&gt;のサポートを参照。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html#const-in-signatures&#34; name=&#34;const-in-signatures&#34;&gt;シグネチャが const を含む(const in signatures)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MSVC 6.0やBorland C++ 5.5.1を含むいくつかのプラットフォームでは、関数のシグニチャがトップレベルの&lt;code&gt;const&lt;/code&gt;を持っていることが問題になる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(f, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

回避策は、引数の形式から&lt;code&gt;const&lt;/code&gt;修飾を削除することだ。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下、未翻訳。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2001, 2002 by Peter Dimov and Multi Media Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref.hpp -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/bind/ref.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ref.hpp&lt;/h1&gt;
&lt;p&gt;1.00.0004 (2002-01-27)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/doc/html/ref.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/doc/html/ref.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#files&#34;&gt;ファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#purpose&#34;&gt;目的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#files&#34; name=&#34;files&#34;&gt;ファイル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ref.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#purpose&#34; name=&#34;purpose&#34;&gt;目的&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;boost/ref.hpp ヘッダーでは、クラス テンプレートである &lt;code&gt;boost::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; と、&lt;code&gt;boost::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; のインスタンスを返す二つの関数 &lt;code&gt;boost::ref&lt;/code&gt; と &lt;code&gt;boost::cref&lt;/code&gt;、それに二つの特性クラス &lt;code&gt;boost::is_reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;boost::unwrap_reference&amp;lt;T&amp;gt;&lt;/code&gt; が定義されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; の目的は、&lt;code&gt;T&lt;/code&gt; 型のオブジェクトへの参照を格納することにある。主に、値渡しの仮引数をとる関数のテンプレート (アルゴリズム) に参照を「食わせる (feed)」のに使われる。&lt;/p&gt;
&lt;p&gt;この使い方をサポートするため、&lt;code&gt;boost::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; は &lt;code&gt;T &amp;amp;&lt;/code&gt; への暗黙の型変換を提供する。このことにより、関数テンプレートが適合していない参照に対しても大抵はうまく働くようになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt; は &lt;code&gt;CopyConstructible&lt;/code&gt;（コピーコンストラクト可能) でかつ &lt;code&gt;Assignable&lt;/code&gt; (代入可能) である (通常の参照は &lt;code&gt;Assignable&lt;/code&gt; (代入可能) ではない)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt; が &lt;code&gt;x&lt;/code&gt; の型である場合、&lt;code&gt;boost::ref(x)&lt;/code&gt; という式は &lt;code&gt;boost::reference_wrapper&amp;lt;X&amp;gt;(x)&lt;/code&gt; を返す。同様に、&lt;code&gt;boost::cref(x)&lt;/code&gt; は &lt;code&gt;boost::reference_wrapper&amp;lt;X const&amp;gt;(x)&lt;/code&gt; を返す.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::is_reference_wrapper&amp;lt;T&amp;gt;::value&lt;/code&gt; という式は、もし &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;reference_wrapper&lt;/code&gt; であるときには &lt;code&gt;true&lt;/code&gt; を返し、それ以外のときには &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::unwrap_reference&amp;lt;T&amp;gt;::type&lt;/code&gt; という型式 (type-expression) は、&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;reference_wrapper&lt;/code&gt; のときには &lt;code&gt;T::type&lt;/code&gt; であり、それ以外のときには &lt;code&gt;T&lt;/code&gt; である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#interface&#34; name=&#34;interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#reference_wrapper&#34;&gt;class reference_wrapper&lt;/a&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ref(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cref(T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#is_reference_wrapper&#34;&gt;is_reference_wrapper&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#unwrap_reference&#34;&gt;unwrap_reference&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#reference_wrapper&#34; name=&#34;reference_wrapper&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;reference_wrapper&lt;/span&gt;
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;reference_wrapper&lt;/span&gt;(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; () &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

    T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; get() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; get_pointer() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#op_constructor&#34; name=&#34;op_constructor&#34;&gt;&lt;code&gt;explicit reference_wrapper(T &amp;amp; t)&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作用: &lt;code&gt;t&lt;/code&gt; への参照を格納する &lt;code&gt;reference_wrapper&lt;/code&gt; のオブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;例外: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#op_t&#34; name=&#34;op_t&#34;&gt;&lt;code&gt;operator T &amp;amp; () const&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;戻り値: 格納した参照。&lt;/li&gt;
&lt;li&gt;例外: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#get&#34; name=&#34;get&#34;&gt;&lt;code&gt;T &amp;amp; get() const&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;戻り値: 格納した参照。&lt;/li&gt;
&lt;li&gt;例外: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#get_pointer&#34; name=&#34;get_pointer&#34;&gt;&lt;code&gt;T* get_pointer() const&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;戻り値: 格納したオブジェクトへのポインタ。&lt;/li&gt;
&lt;li&gt;例外: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#ref&#34; name=&#34;ref&#34;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ref(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;(t)&lt;/code&gt;
- 例外: なし。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#cref&#34; name=&#34;cref&#34;&gt;&lt;code&gt;cref&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cref(T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t);
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;reference_wrapper&amp;lt;T const&amp;gt;(t)&lt;/code&gt;
- 例外: なし。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#is_reference_wrapper&#34; name=&#34;is_reference_wrapper&#34;&gt;&lt;code&gt;is_reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;is_reference_wrapper&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
 &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

もし &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;reference_wrapper&lt;/code&gt; の特殊化版であれば値は &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#unwrap_reference&#34; name=&#34;unwrap_reference&#34;&gt;unwrap_reference&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unwrap_reference&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
 &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; type;
};
&lt;/pre&gt;&lt;/div&gt;

もし &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;reference_wrapper&lt;/code&gt; の特殊化版であれば &lt;code&gt;type&lt;/code&gt; は &lt;code&gt;T::type&lt;/code&gt; と等価。そうでなければ &lt;code&gt;type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; と等価。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/ref.html#acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt; と &lt;code&gt;cref&lt;/code&gt; は元々は Jaakko Järvi 氏作の Boost.Tuple というライブラリの一部であった。それが、一般的に有用であるという理由で Peter Dimov 氏の手によって「&lt;code&gt;boost::&lt;/code&gt; に昇格」した。Douglas Gregor 氏と Dave Abrahams 氏が &lt;code&gt;is_reference_wrapper&lt;/code&gt; と &lt;code&gt;unwrap_reference&lt;/code&gt; を提供した。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2001 by Peter Dimov and Multi Media Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind/f_kojima@fukuicompu.co.jp&#34;&gt;Fujio Kojima&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>The Boost Concept Check Library (BCCL) -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/concept_check.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/concept_check.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;The Boost Concept Check Library (BCCL)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/concept_check/concept_check.htm&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/concept_check/concept_check.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ヘッダーファイル： boost/concept_check.hpp と boost/concept_archetype.hpp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ におけるジェネリック・プログラミングは、抽象データ型(あるいは「コンセプト」)を表現するためにテンプレート・パラメータを使用することを特徴としている。 しかし、C++ 言語には、クラス・テンプレートや関数テンプレートに対して、与えられたテンプレート引数がモデル化（もしくは順応）すべきコンセプトを明確に規定するためのメカニズムがない。 よく利用されているのは、必要とされるコンセプトのヒントとなるようにテンプレート・パラメータを命名し、付属文書においてコンセプトの要求事項を記述する方式である。 残念ながら、こういった要求事項の記述は、往々にして曖昧であったり不正確であったり、まったく存在しないこともある。 あるテンプレートが想定している引数の性質を、そのテンプレートのユーザーが正確に理解できなければ、それは由々しき問題となる。 さらに、以下の問題が起こりうる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不正なテンプレート引数に起因するコンパイラ・エラー・メッセージは、難解になることが多い。 大抵の場合、エラーの示す位置はテンプレートが使用された所ではなく、ユーザーが目にする必要のないテンプレートの実装内である。&lt;/li&gt;
&lt;li&gt;記述された要求事項が、テンプレートのコンセプトを完全に表現し切れていない場合、使用されたテンプレート引数が記述された要求事項を満足していたとしても、コンパイラ・エラーを受ける可能性がある。&lt;/li&gt;
&lt;li&gt;記述された要求事項が、テンプレートが実際に必要とするよりも厳格である場合がある。&lt;/li&gt;
&lt;li&gt;要求事項は、コードの中で明示的に記述されることは無い。 そのために、コードの理解がより困難になる。 さらに、コードと記述された要求事項が同期していない事態も生じる可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost コンセプト・チェック・ライブラリは、次のような手段を提供する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレート・パラメータのコンパイル時チェックを導入するためのメカニズム。&lt;/li&gt;
&lt;li&gt;コンセプト・チェック用クラスによって、要求事項を明確化するためのフレームワーク。&lt;/li&gt;
&lt;li&gt;コンセプトの要求事項が、該当テンプレートをカバーしていることを確認するためのメカニズム。&lt;/li&gt;
&lt;li&gt;C++ 標準ライブラリのコンセプト要求事項に対応する、コンセプト・チェック用クラスおよび原型クラス一式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このメカニズムは C++ 標準の機能のみを使用し、実行時オーバーヘッドを課さない。 メカニズムを導入するコストは、コンパイル時間の増大のみである。&lt;/p&gt;
&lt;p&gt;クラス・テンプレートや関数テンプレートを記述するプログラマは、全員が通常のコード作成作業の一環としてコンセプト・チェックを含めるべきである。 コンセプト・チェックは、コンポーネントへのインターフェイスとして公開されている、すべてのテンプレート・パラメータに対して導入すべきである。 利用したいコンセプトが標準ライブラリーで用いられているものであれば、BCCL の該当するコンセプト・チェック用クラスを、そのまま使用すればよい。 そうでなければ、新たにコンセプト・チェック用クラスを記述することになるが、普通は数行程度に収まるはずだ。 新しいコンセプトを用いるならば、対応する原型クラスも作成すべきである。原型クラスとはコンセプトを表す最小限のスケルトン実装である。&lt;/p&gt;
&lt;p&gt;この文書を、以下の通り構成する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#motivating-example&#34;&gt;動機の例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#history&#34;&gt;歴史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#publications&#34;&gt;公開資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/using_concept_check.html&#34;&gt;コンセプト・チェックの利用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/creating_concepts.html&#34;&gt;コンセプト・チェック用クラスの作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_covering.html&#34;&gt;コンセプトの充当化と原型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/prog_with_concepts.html&#34;&gt;コンセプトを用いたプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/implementation.html&#34;&gt;コンセプト・チェックの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/reference.html&#34;&gt;リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt; はこのライブラリを寄稿した。 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/beman_dawes.html&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt; が公式レビューを管理した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#introduction&#34; name=&#34;introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;コンセプト &#34;concept&#34; とは、ジェネリック・アルゴリズムに対する引数として与えられる型が、アルゴリズム内部で正しく使用されるために満足しなければならない要求事項(有効な式、関連型、セマンティクス不変、計算量保証など)の組み合わせである。 C++ では、コンセプトは関数テンプレート(ジェネリック・アルゴリズム)のテンプレート・パラメータとして表現される。 しかしながら、C++ にはコンセプトを表現するための明示的なメカニズムがない。テンプレート・パラメータはただのプレースホルダでしかないのだ。 慣例として、こういったパラメータには、必要とされるコンセプトに対応する名前を与える。しかし、テンプレート・パラメータを実際の型で確定するときに、C++ コンパイラはコンセプトへの遵守を強要しない。&lt;/p&gt;
&lt;p&gt;当然ながら、ジェネリック・アルゴリズムを、そのコンセプトの内、構文に関わる要求事項を満足していない型で呼び出した場合、コンパイル・エラーが生じる。 しかし、このエラーは、該当する型がコンセプトの要求事項すべてに適合していない事実を本質的に 反映したものではない。 それどころか、エラーはインスタンス化階層の深部で発生し、該当する型に対して式が有効でないか、想定された関連型が利用可能でないといったことが原因として挙げられることになるだろう。 こうして生じたエラーメッセージは、大抵において情報に乏しく、基本的に不可解である。&lt;/p&gt;
&lt;p&gt;必要とされるものは、インスタンス化位置(かその近傍)で「コンセプトセーフ」を強要するためのメカニズムである。 Boost コンセプト・チェック・ライブラリーは、早い段階でコンセプトの遵守を強要し、遵守していない場合のエラー・メッセージをより有用にするために C++ 標準の機能を使用する。&lt;/p&gt;
&lt;p&gt;注意すべき点は、この技術がコンセプトの要求事項のうち構文に関わる部分(有効な式および関連型)のみを扱うことである。 我々は、コンセプトの要求事項の一部であるセマンティクス不変あるいは計算量保証を扱わない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#motivating-example&#34; name=&#34;motivating-example&#34;&gt;動機の例&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;テンプレート・ライブラリの不正な使用法と、その結果生じるエラーメッセージを例証するために単純なサンプルを示す。 下記のコードでは、標準テンプレート・ライブラリー (STL) のジェネリックな &lt;code&gt;std::stable_sort()&lt;/code&gt; アルゴリズム [&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibiography.html#generic-programming-and-the-stl&#34;&gt;3&lt;/a&gt;、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#stl-tutorial-and-reference-guide&#34;&gt;4&lt;/a&gt;、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#the-standard-template-library&#34;&gt;5&lt;/a&gt;] をリンクリストに適用している。&lt;/p&gt;
&lt;p&gt;bad_error_eg.cpp:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;list&amp;gt;
#include &amp;lt;algorithm&amp;gt;

int main(int, char*[]) {
    std::list&amp;lt;int&amp;gt; v;
    std::stable_sort(v.begin(), v.end());
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
この場合、&lt;code&gt;std::stable_sort()&lt;/code&gt; アルゴリズムは以下のようなプロトタイプを有する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RandomAccessIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; stable_sort(RandomAccessIterator first, RandomAccessIterator last);
&lt;/pre&gt;&lt;/div&gt;

Gnu C++ でこのコードをコンパイルすると、以下のコンパイラ・エラーを生成する。他のコンパイラ出力は Appendix にリストしてある(訳注 : このバージョンのドキュメントには記載されていない)。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;stl_algo.h: In function `void __merge_sort_loop&amp;lt;_List_iterator
  &amp;lt;int,int &amp;amp;,int *&amp;gt;, int *, int&amp;gt;(_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;,
  _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, int *, int)&#39;:
stl_algo.h:1448:   instantiated from `__merge_sort_with_buffer
  &amp;lt;_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, int *, int&amp;gt;(
   _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;,
   int *, int *)&#39;
stl_algo.h:1485:   instantiated from `__stable_sort_adaptive&amp;lt;
  _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, int *, int&amp;gt;(_List_iterator
  &amp;lt;int,int &amp;amp;,int *&amp;gt;, _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, int *, int)&#39;
stl_algo.h:1524:   instantiated from here
stl_algo.h:1377: no match for `_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;amp; -
  _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;amp;&#39;
&lt;/code&gt;&lt;/pre&gt;
この場合、根本的なエラーの原因は、&lt;code&gt;std:list::iterator&lt;/code&gt; が &lt;a href=&#34;http://www.sgi.com/tech/stl/RandomAccessIterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RandomAccessIterator&lt;/code&gt;&lt;/a&gt; コンセプトをモデル化していないことにある。 リストのイテレータは双方向でしかなく、(ベクタのイテレータのように) 完全なランダム・アクセスが可能なわけではない。 残念ながら、このエラーメッセージには、ユーザーにこの事実を示すものは何もない。&lt;/p&gt;
&lt;p&gt;C++ プログラマがテンプレート・ライブラリに十分な経験を持っていれば、この手のエラーに惑うことは無いかもしれない。 しかし未熟な者にとっては、次のような理由で、このメッセージが理解し難いものとなっている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;エラーが生じる位置、bad_error_eg.cpp の６行目は、Gnu C++ がインスタンス化スタックを４レベルも深くまで探索して表示するという事実にもかかわらず、エラーメッセージで示されていない。&lt;/li&gt;
&lt;li&gt;エラーメッセージと、&lt;code&gt;std::stable_sort()&lt;/code&gt; および &lt;a href=&#34;http://www.sgi.com/tech/stl/RandomAccessIterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RandomAccessIterator&lt;/code&gt;&lt;/a&gt; に関する文書化された要求事項との間に、文面上の相関がない。&lt;/li&gt;
&lt;li&gt;エラーメッセージが過度に長く、ユーザーの知らない(かつ知るべきでない！) STL 内部実装用の関数がリストされている。&lt;/li&gt;
&lt;li&gt;エラーメッセージに、ライブラリ内部の実装用関数が数多くリストアップされているため、プログラマが、エラーの原因は自分のコードではなくライブラリ側にあるとの結論に、誤って飛びついてしまう可能性がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;次の例示は、より有用なメッセージとして斯くあるべきと我々が考えるものだ (また実際に Boost コンセプト・チェック・ライブラリが生成するものでもある)。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;boost/concept_check.hpp: In method `void LessThanComparableConcept
  &amp;lt;_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;gt;::constraints()&#39;:
boost/concept_check.hpp:334:   instantiated from `RandomAccessIteratorConcept
  &amp;lt;_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;gt;::constraints()&#39;
bad_error_eg.cpp:6:   instantiated from `stable_sort&amp;lt;_List_iterator
  &amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;gt;(_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;, 
  _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt;)&#39;
boost/concept_check.hpp:209: no match for `_List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;amp;
  &amp;lt; _List_iterator&amp;lt;int,int &amp;amp;,int *&amp;gt; &amp;amp;&#39;
&lt;/code&gt;&lt;/pre&gt;
このメッセージは、標準的なエラー・メッセージがもつ欠点をいくつかの点で改善する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エラーの生じた位置 (bad_error_eg.cpp:6）がエラーメッセージに明示されている。&lt;/li&gt;
&lt;li&gt;メッセージは、STL 文書に記述されているコンセプト (&lt;a href=&#34;http://www.sgi.com/tech/stl/RandomAccessIterator.html&#34; target=&#34;_blank&#34;&gt;RandomAccessIterator&lt;/a&gt;) を明示的に言及している。&lt;/li&gt;
&lt;li&gt;エラーメッセージははるかに短くなり、STL の内部実装用関数を露呈しない。&lt;/li&gt;
&lt;li&gt;エラーメッセージの中に concept_check.hpp および &lt;code&gt;constraints()&lt;/code&gt; が示されることで、ライブラリ実装の中にではなくユーザーのコードにエラーがあるという事実をユーザーに警告している。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#history&#34; name=&#34;history&#34;&gt;歴史&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このコンセプト・チェック・システムの初期バージョンは、著者が SGI において、C++ コンパイラおよびライブラリ・グループの一員として勤務している間に開発された。 初期バージョンは今も SGI STL ディストリビューションの一部である。 Boost コンセプト・チェック・ライブラリは、エラーメッセージにおけるそれほど有用でない表現能力を犠牲にして、コンセプト・チェック用クラス定義を非常に単純化しており、その点で SGI STLのコンセプト・チェックとは異なっている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#publications&#34; name=&#34;publications&#34;&gt;公開資料&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oonumerics.org/tmpw00/&#34; target=&#34;_blank&#34;&gt;C++ テンプレート・ワークショップ2000&lt;/a&gt;、コンセプト・チェック。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html#acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;インスタンス化を引き起こすために関数ポインタを使用するアイディアは、Alexander Stepanov に拠る。 テンプレートの事前チェックに式を使用するアイディアに関して、その起源を確認できなかった。しかし、それは D&amp;amp;E[&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#design-and-evolution&#34;&gt;2&lt;/a&gt;] に記載されている。 STL コンセプトに関する優れた文書化と構造化を行った Matt Austern に感謝をささげる。このコンセプト・チェックは彼の仕事を基礎にしている。 有益なコメントとレビューを賜った Boost のメンバにも感謝を。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/using_concept_check.html&#34;&gt;次へ：「コンセプト・チェックの利用」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;) Andrew Lumsdaine(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/concept_check/bibliography.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#better-template-error-message&#34; name=&#34;better-template-error-message&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andrei Alexandrescu&lt;/li&gt;
&lt;li&gt;Better Template Error Messages.&lt;/li&gt;
&lt;li&gt;C/C++ Users Journal, March, 1999.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#design-and-evolution&#34; name=&#34;design-and-evolution&#34;&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bjarne Stroustrup&lt;/li&gt;
&lt;li&gt;Design and Evolution of C++.&lt;/li&gt;
&lt;li&gt;Addison-Wesley, 1994&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#generic-programming-and-the-stl&#34; name=&#34;generic-programming-and-the-stl&#34;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M. H. Austern.&lt;/li&gt;
&lt;li&gt;Generic Programming and the STL.&lt;/li&gt;
&lt;li&gt;Professional computing series. Addison-Wesley, 1999.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#stl-tutorial-and-reference-guide&#34; name=&#34;stl-tutorial-and-reference-guide&#34;&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David R. Musser and Atul Saini&lt;/li&gt;
&lt;li&gt;STL Tutorial and Reference Guide.&lt;/li&gt;
&lt;li&gt;Professional computing series. Addison-Wesley, 1996.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/bibliography.html#the-standard-template-library&#34; name=&#34;the-standard-template-library&#34;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. A. Stepanov and M. Lee&lt;/li&gt;
&lt;li&gt;The Standard Template Library.&lt;/li&gt;
&lt;li&gt;ISO Programming Language C++ Project, May 1994.&lt;/li&gt;
&lt;li&gt;X3J16/94-0095, WG21/N0482&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Programming with Concepts -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/concept_check/prog_with_concepts.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/concept_check/prog_with_concepts.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Programming with Concepts&lt;/h1&gt;
&lt;p&gt;要求事項をまとめてコンセプトにする方法の決定と、各アルゴリズムで使用するコンセプトを決定する過程は、恐らくジェネリック・ライブラリを構築する上で最も困難な(けれども最も重要な) 段階である。 この過程を勤しむ際に使用する指針を、要求事項最小化原理と呼んでいる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要求事項最小化原理&lt;/strong&gt;：より再利用しやすくなるように、コンポーネントの入力パラメータに対する要求事項を最小限にすること。&lt;/p&gt;
&lt;p&gt;この文言には、相反する問題が含まれている。 定義によれば、コンポーネントは課されたタスクを遂行するために、入力パラメータを使用しなければならない(ここで「コンポーネント」とは、関数テンプレートもしくはクラス・テンプレートを意味する)。 その上で、入力に関する仮定を最小に限定する(最小必要条件)ような方法でコンポーネントを実装することが求められる。&lt;/p&gt;
&lt;p&gt;抽象 という従来からある概念は、最小要求事項というアイディアに直接結び付いている。 入力が抽象的であるほど、要求事項は少なくなる。 よって、コンセプトは、C++ テンプレート・プログラミングにおけるジェネリックな抽象データ型の単純な具象化である。&lt;/p&gt;
&lt;p&gt;ある問題領域に対するコンセプトを設計する場合、すなわち、コンポーネントへの入力に関する要求事項を表現するためには、その目的を念頭においておくことが重要である。 要求事項最小化原理に関しては、これは、コンセプトの極小化を意味する。&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/prog_with_concepts.html#translate-note&#34;&gt;訳注1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;コンセプトにおける極小性は、表現されている問題領域の基礎的なセマンティックスに関連したプロパティである。 基本コンテナの問題領域では、単一方向へのトラバースを必要とすることは、両方向へ必要とするより小さな要求事項である (つまりは &lt;a href=&#34;http://www.sgi.com/tech/stl/ForwardIterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ForwardIterator&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://www.sgi.com/tech/stl/BidirectionalIterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BidirectionalIterator&lt;/code&gt;&lt;/a&gt; の相違である) 。 セマンティクスの違いは、前方イテレータを有する具象データ型の集合と、双方向イテレータを持つ集合との間にある差異から、容易に見い出すことができる。 例えば、単方向リンク・リストは、双方向イテレータではなく前方イテレータを有するデータ構造の集合に含まれるだろう。 さらに、前方イテレータだけを使用して実装することができるアルゴリズムの集合は、双方向イテレータ無しにはインプリメントできないアルゴリズム集合とは全く重なることがない。 このために、要求事項の一群をある程度きめ細かくコンセプト別に分類することが重要である。 例えば、イテレータに対する要求事項は、STL における６つのイテレータ・コンセプト(自明、出力、入力、前方、双方向、ランダムアクセス)に分類される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/implementation.html&#34;&gt;次へ：「コンセプト・チェックの実装」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/concept_covering.html&#34;&gt;前へ：「コンセプトの充当化と原型」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/prog_with_concepts.html#translate-note&#34; name=&#34;translate-note&#34;&gt;訳注1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここには、重要な論点について記したパラグラフがありましたが、標準との整合性の理由からコメントアウトされています。コメントアウトされた内容を、以下に翻訳引用します：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;以下の文章は、&lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; の変更された標準定義およびニーズと一致しない。-Jeremy 

しかし、コンセプトの極小化が、コンセプト内で有効式の数を単純に減少させることに直結しないことは重要な注意点である。
例えば、std::stable_sort()関数は、値型のイテレータが &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; を満たすことを必要とするが、このコンセプトは operator&amp;lt;() だけでなく、operator&amp;gt;、operator&amp;lt;=()、operator&amp;gt;=() を含んでいる。
std::stable_sort() は operator&amp;lt;() のみを使用することが判明している。
そうなると、疑問が生じる：
std::stable_sort() の特殊化は、&lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; コンセプトに基づくべきなのか、あるいはただoperator&amp;lt;() のみを必要とするコンセプトに基づくべきなのだろうか。

operator&amp;lt;() から他の演算子をすべて自明な形で実装できるので、&lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; を用いても実際には要求事項最小化原理に触れてはいない、とまずは云うことができよう。
ここで「自明」が意味するのは、一行のコードと実行時に課される一定のコストに過ぎない。
とはいえ、より根源的に言えば、全ての比較演算子 (&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=) は (数学的な感覚において) 概念的に等価であるから、&lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; を用いたとしても要求事項最小化原理を犯すことにはならない。
概念的に等価な有効式を加えたとしても、セマンティクスの面からすれば、新しいものはなにも加わっていない――ただ新しい構文だけである――ので、要求事項最小化原理の侵害にはあたらない。
こういった構文の追加は再利用性を高めるのだ。

例えば、結局のところ比較演算子は等価であるから、std::stable_sort() の管理者がいつか operator&amp;lt;() の代わりに operator&amp;gt;() を使用するよう実装を変更するかもしれない。
要求事項は公開インタフェースの一部であるから、そのような変更は潜在的にクライアント・コードを破壊しかねない。
代わりに、&lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; がstd::stable_sort()の要求事項であれば、管理者がその仕事をこなす際に、妥当な程度の柔軟性を与えられることになる。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;) Andrew Lumsdaine(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リファレンス -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/concept_check/reference.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;リファレンス&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#functions&#34;&gt;関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#macros&#34;&gt;マクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#basic-concepts&#34;&gt;基本コンセプト･チェック用クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#iterator-concepts&#34;&gt;イテレータ･コンセプト･チェック用クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#function-object-concepts&#34;&gt;関数オブジェクト・コンセプト･チェック用クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#container-concepts&#34;&gt;コンテナ･コンセプト･チェック用クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#basic-archetype&#34;&gt;基本原型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#iterator-archetype&#34;&gt;イテレータ原型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#function-object-archetype&#34;&gt;関数オブジェクト原型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#container-archetype&#34;&gt;コンテナ原型クラス&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#functions&#34; name=&#34;functions&#34;&gt;関数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Concept&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; function_requires();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#macros&#34; name=&#34;macros&#34;&gt;マクロ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クラス定義内でコンセプト・チェックに適用する&lt;/span&gt;
BOOST_CLASS_REQUIRE(&lt;i&gt;type&lt;/i&gt;, &lt;i&gt;namespace&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;of&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;concept&lt;/i&gt;, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRE2(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;namespace&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;of&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;concept&lt;/i&gt;, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRE3(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;type&lt;/i&gt;3, &lt;i&gt;namespace&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;of&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;concept&lt;/i&gt;, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRE4(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;type&lt;/i&gt;3, &lt;i&gt;type&lt;/i&gt;4, &lt;i&gt;namespace&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;of&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;concept&lt;/i&gt;, &lt;i&gt;concept&lt;/i&gt;);
&lt;/pre&gt;&lt;/div&gt;

推奨されないマクロ：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クラス定義内でコンセプト・チェックに適用する&lt;/span&gt;
BOOST_CLASS_REQUIRES(&lt;i&gt;type&lt;/i&gt;, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRES2(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRES3(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;type&lt;/i&gt;3, &lt;i&gt;concept&lt;/i&gt;);
BOOST_CLASS_REQUIRES4(&lt;i&gt;type&lt;/i&gt;1, &lt;i&gt;type&lt;/i&gt;2, &lt;i&gt;type&lt;/i&gt;3, &lt;i&gt;type&lt;/i&gt;4, &lt;i&gt;concept&lt;/i&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#basic-concepts&#34; name=&#34;basic-concepts&#34;&gt;基本コンセプト・チェック用クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; IntegerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// T は組み込み整数型であるか？&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; SignedIntegerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// T は組み込み符号付き整数型であるか？&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; UnsignedIntegerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// T は組み込み符号無し整数型であるか？&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ConvertibleConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// X は Y へ変換可能か？&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AssignableConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 23.1 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; SGIAssignableConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; DefaultConstructibleConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; CopyConstructibleConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 20.1.3 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; EqualityComparableConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 20.1.1 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; LessThanComparableConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 20.1.2 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ComparableConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;SGI STL LessThanComparable&lt;/a&gt; コンセプト&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#iterator-concepts&#34; name=&#34;iterator-concepts&#34;&gt;イテレータ･コンセプト･チェック用クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; TrivialIteratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_TrivialIteratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; InputIteratorConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格24.1.1 Table 72参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; OutputIteratorConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格24.1.2 Table 73参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ForwardIteratorConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格24.1.3 Table 74参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_ForwardIteratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; BidirectionalIteratorConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格24.1.4 Table 75参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_BidirectionalIteratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; RandomAccessIteratorConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格24.1.5 Table 76参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Iter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_RandomAccessIteratorConcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#function-object-concepts&#34; name=&#34;function-object-concepts&#34;&gt;関数オブジェクト・コンセプト･チェック用クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; GeneratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; UnaryFunctionConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;First&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; BinaryFunctionConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; UnaryPredicateConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;First&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; BinaryPredicateConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;First&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Const_BinaryPredicateConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdaptableGeneratorConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdaptableUnaryFunctionConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;First&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdaptableBinaryFunctionConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdaptablePredicateConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Func&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;First&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Second&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdaptableBinaryPredicateConcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#container-concepts&#34; name=&#34;container-concepts&#34;&gt;コンテナ･コンセプト･チェック用クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ContainerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 23.1 Table 65 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_ContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ForwardContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_ForwardContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; ReversibleContainerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 23.1 Table 66 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_ReversibleContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; RandomAccessContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Mutable_RandomAccessContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; SequenceConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 23.1.1 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; FrontInsertionSequenceConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; BackInsertionSequenceConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AssociativeContainerConcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 規格 23.1.2 Table 69 参照&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; UniqueAssociativeContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; MultipleAssociativeContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; SimpleAssociativeContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; PairAssociativeContainerConcept;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; SortedAssociativeContainerConcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#basic-archetype&#34; name=&#34;basic-archetype&#34;&gt;基本原型クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;null_archetype&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// モデル化するコンセプトが無いことを示す型&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; null_archetype&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;default_constructible_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; null_archetype&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;assignable_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; null_archetype&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;copy_constructible_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; null_archetype&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;equality_comparable_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; null_archetype&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;convertible_to_archetype&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#iterator-archetype&#34; name=&#34;iterator-archetype&#34;&gt;イテレータ原型クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;trivial_iterator_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;mutable_trivial_iterator_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;input_iterator_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;forward_iterator_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;bidirectional_iterator_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ValueType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;random_access_iterator_archetype&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#function-object-archetype&#34; name=&#34;function-object-archetype&#34;&gt;関数オブジェクト原型クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unary_function_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;binary_function_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;predicate_archetype&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;binary_predicate_archetype&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/reference.html#container-archetype&#34; name=&#34;container-archetype&#34;&gt;コンテナ原型クラス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;構築中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check.html&#34;&gt;「はじめに」へ戻る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/implementation.html&#34;&gt;前へ：「コンセプト・チェックの実装」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;) Andrew Lumsdaine(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/concept_check/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Header boost/cast.hpp -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/conversion/cast.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Header boost/cast.hpp&lt;/h1&gt;
&lt;p&gt;ヘッダboost/cast.hppは、C++の組み込みキャストを補完するべく作成された、 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#polymorphic_cast&#34;&gt;&lt;code&gt;polymorphic_cast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#polymorphic_cast&#34;&gt;&lt;code&gt;polymorphic_downcast&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#numeric_cast&#34;&gt;&lt;code&gt;numeric_cast&lt;/code&gt;&lt;/a&gt;を提供する。&lt;/p&gt;
&lt;p&gt;プログラムcast_test.cppは、これらの関数が期待通り動作するか確認するためのものである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#polymorphic_cast&#34; name=&#34;polymorphic_cast&#34;&gt;多態キャスト&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多態オブジェクト(少なくとも一個の仮想関数を定義しているクラスのオブジェクト)へのポインタは、時にダウンキャストやクロスキャストされることがある。ダウンキャストとは基本クラスから派生クラスへのキャストである。クロスキャストは継承階層を横切るようなキャストである。例えば、多重継承した基本クラスの一つから、他の基本クラスへのキャストなど。&lt;/p&gt;
&lt;p&gt;このようなキャストは古いキャスト演算子でも可能であるが、もうこのアプローチは推奨されない。古いキャスト演算子は型安全性に著しく欠け、可読性を激しく損ない、おまけに検索するのが大変なので。&lt;/p&gt;
&lt;p&gt;C++に組み込まれた&lt;code&gt;static_cast&lt;/code&gt;は、多態オブジェクトへのポインタを効率よくダウンキャストするが、ポインタが実際に指しているのと異なる派生クラスへのキャストをしようとしたとき、エラーを検出しない。 &lt;code&gt;polymorphic_downcast&lt;/code&gt;テンプレートは、非デバッグコンパイル時には、&lt;code&gt;static_cast&lt;/code&gt;の効率を維持するが、デバッグコンパイル時には、&lt;code&gt;dynamic_cast&lt;/code&gt;の成功を&lt;code&gt;assert()&lt;/code&gt;によって保証し、安全性を高める。&lt;/p&gt;
&lt;p&gt;C++に組み込まれた&lt;code&gt;dynamic_cast&lt;/code&gt;は、多態オブジェクトへのポインタをダウンキャストまたはクロスキャストするために使うことができるが、エラーを知るには不便にも、返却値が&lt;code&gt;0&lt;/code&gt;でないかチェックしなければならず、さらに悪いことに、チェックしないでも済ますことができる。 &lt;code&gt;polymorphic_cast&lt;/code&gt;テンプレートは&lt;code&gt;dynamic_cast&lt;/code&gt;を行い、返却値が&lt;code&gt;0&lt;/code&gt;だったときには例外を送出する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;polymorphic_downcast&lt;/code&gt;は、デバッグモードでのテストで、キャストされうるオブジェクト型を100%カバーでき、同時に非デバッグモードでは効率が重要な場合に役立つであろう。 この二つの条件が満たされないなら、&lt;code&gt;polymorphic_cast&lt;/code&gt;が適している。また、クロスキャストにはこちらを使わなければならない。 &lt;code&gt;polymorphic_downcast&lt;/code&gt;は、&lt;code&gt;assert( dynamic_cast&amp;lt;Derived&amp;gt;(x) == x )&lt;/code&gt; (&lt;code&gt;x&lt;/code&gt;は基本クラスへのポインタ)を行う。&lt;code&gt;0&lt;/code&gt;が返されなかったばかりでなく、多重継承したオブジェクトへのポインタも正しく変換されたことを保証するためである。 注意:: &lt;code&gt;polymorphic_downcast&lt;/code&gt;は&lt;code&gt;assert()&lt;/code&gt;を使っているので、&lt;code&gt;NDEBUG&lt;/code&gt;の定義が翻訳単位間で異なっていると、単一定義規則(ODR)に違反する。[See ISO Std 3.2]&lt;/p&gt;
&lt;p&gt;C++に組み込まれた&lt;code&gt;dynamic_cast&lt;/code&gt;は、ポインタではなく参照のキャストに使われるべきである。さもなくば、あるインタフェースがサポートされているかどうか調べるために使うことができる。この場合、返却値が&lt;code&gt;0&lt;/code&gt;になることはエラーではない。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;polymorphic_cast&lt;/code&gt;と&lt;code&gt;polymorphic_downcast&lt;/code&gt;の概要&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; Derived polymorphic_cast(Base&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; x);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Throws: dynamic_cast&amp;lt;Derived&amp;gt;(x) == 0のときstd::bad_castを送出する&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Returns: dynamic_cast&amp;lt;Derived&amp;gt;(x)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; Derived polymorphic_downcast(Base&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; x);
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Effects: assert( dynamic_cast&amp;lt;Derived&amp;gt;(x) == x );&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Returns: static_cast&amp;lt;Derived&amp;gt;(x)&lt;/span&gt;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;polymorphic_downcast&lt;/code&gt;の例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/cast.hpp&amp;gt;&lt;/span&gt;
...
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Fruit&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;Fruit(){}; ... };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Banana&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Fruit { ... };
...
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f( Fruit &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; fruit ) {
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ... logic which leads us to believe it is a Banana&lt;/span&gt;
  Banana &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; banana &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polymorphic_downcast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Banana&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(fruit);
  ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#numeric_cast&#34; name=&#34;numeric_cast&#34;&gt;&lt;code&gt;numeric_cast&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static_cast&lt;/code&gt;や暗黙の変換は、数値をキャストしたときに、表現できる範囲を越えてしまっても感知しない。&lt;code&gt;numeric_cast&lt;/code&gt;関数テンプレートは&lt;code&gt;static_cast&lt;/code&gt;(や暗黙の変換にも、まあ、そこそこ)に似ているが、値の範囲を越えた場合、検出できる点が異なる。実行時に、値が正しく保存されるかチェックして、失敗した場合、例外が送出される。&lt;/p&gt;
&lt;p&gt;引数型と返却値型の必須事項は次の通り:
- 引数型と返却値型は、いずれも&lt;code&gt;CopyConstructible&lt;/code&gt; [ISO Std 20.1.3]でなければならない。
- 引数型と返却値型は、いずれも(&lt;code&gt;std::numeric_limits&amp;lt;&amp;gt;::is_specialized&lt;/code&gt;が真であることで定義される)&lt;code&gt;Numeric&lt;/code&gt;でなければならない。
- 引数型は、返却値型に&lt;code&gt;static_cast&lt;/code&gt;を用いて変換できなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;numeric_cast&lt;/code&gt;の概要&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;bad_numeric_cast&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_cast {...};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Target, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Source&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; Target numeric_cast(Source arg);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Throws:  SourceからTagertへの変換によって、std::numeric_limitsの定めに&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//          従い、負数の符号が無くなったり、アンダーフローやオーバーフロー&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//          する場合、bad_numeric_castを送出する。&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Returns: static_cast&amp;lt;Target&amp;gt;(arg)&lt;/span&gt;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;numeric_cast&lt;/code&gt;の例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/cast.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cast;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ariane&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; vx)
{
    ...
    &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; dx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; numeric_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(vx);
    ...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;numeric_cast&lt;/code&gt;の理論的根拠&lt;/h3&gt;
&lt;p&gt;例外送出の条件は、&lt;code&gt;!=&lt;/code&gt; 演算の必要を無くすように構成されている。&lt;/p&gt;
&lt;h2&gt;歴史的経緯&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;polymorphic_cast&lt;/code&gt;は&#34;The C++ Programming Language&#34;においてBjarne Stroustrupより提案された。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;polymorphic_downcast&lt;/code&gt;は&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/dave_abrahams.htm&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;より寄贈された。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;numeric_cast&lt;/code&gt;は&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/kevlin_henney.htm&#34; target=&#34;_blank&#34;&gt;Kevlin Henney&lt;/a&gt;より寄贈された。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 06 January, 2001&lt;/p&gt;
&lt;p&gt;© Copyright boost.org 1999. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 Yoshinori Tagawa.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Header boost/lexical_cast.hpp -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/conversion/lexical_cast.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Header boost/lexical_cast.hpp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#motivation&#34;&gt;動機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#examples&#34;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#synopsis&#34;&gt;ヘッダ概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#lexical_cast&#34;&gt;&lt;code&gt;lexical_cast&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#bad_lexical_cast&#34;&gt;&lt;code&gt;bad_lexical_cast&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#changes&#34;&gt;更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#motivation&#34; name=&#34;motivation&#34;&gt;動機&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;例えば、&lt;code&gt;int&lt;/code&gt;型のデータを&lt;code&gt;string&lt;/code&gt;型で表現させるときや、逆に&lt;code&gt;string&lt;/code&gt;型のインスタンスに格納された数値表現を&lt;code&gt;int&lt;/code&gt;型に変換するなど、値を文字列の表現に変換しなければならないことがしばしばある。これらは、画面上の表示と設定ファイルの関係のように、プログラムの内部構造を外部に出力する際に良く用いられる手法である。&lt;/p&gt;
&lt;p&gt;C/C++標準ライブラリは、先に述べた変換機能の数々を提供するが、それらは使いやすさや拡張性、安全性の面においてまちまちである。&lt;/p&gt;
&lt;p&gt;例として、&lt;code&gt;atoi&lt;/code&gt;に代表されるC標準関数における多くの制限について述べてみよう ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;変換は文字列から内部データ型への一方向に限られる。Cライブラリを用いた別の変換方法としては、sprintf関数が存在するが不便で安全性も低い。&lt;/li&gt;
&lt;li&gt;また、&lt;code&gt;itoa&lt;/code&gt;関数のような非標準の機能を用いる方法もあるが、それでは移植性の低下を招いてしまう。&lt;/li&gt;
&lt;li&gt;サポートする型がプリミティブな数値型の一部(&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;)のみである。&lt;/li&gt;
&lt;li&gt;文字列表現から複素数や有理数への変換のように、サポートする型を増やすことは通常できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;strtol&lt;/code&gt;に代表される標準C関数では、いくつかの基本的な制限が存在するものの、変換に関する素晴らしい制御方法を提供してくれる。しかし、普通、そのような制御方法は必要ではないし、使われることもない。&lt;code&gt;scanf&lt;/code&gt;とその関連する関数では、さらに優れた制御方法を提供してくれるものの、安全性と使いやすさにおいて優秀とは言い難い。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリは、ここで問題になっている種類のin-core 整形のために&lt;code&gt;stringstream&lt;/code&gt; を提供している。これは、文字列による、任意の型と入出力との間の変換と整形に関して幅広く管理する。しかし単純な変換に関して言えば、&lt;code&gt;stringstream&lt;/code&gt; を直接利用するのは不格好(余計なローカル変数を取る必要があり、中置記法の利便性を失う)であるか、或いは不明瞭になりうる(&lt;code&gt;stringstream&lt;/code&gt; オブジェクトが式の中で一時的オブジェクトとして作成される場合)。これは多くの面で、包括的な概念及びテキスト表現の管理能力を提供するが、これらは比較的高水準なので、単純な変換のためにも極端に多くのことを巻き込まなければならない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lexical_cast&lt;/code&gt;テンプレート関数はテキストで表現可能な任意の型同士の変換を便利で一貫性のある形、簡単に言えば式レベルでの便利な変換を提供する。&lt;/p&gt;
&lt;p&gt;精度や書式において&lt;code&gt;lexical_cast&lt;/code&gt;が標準で行うより柔軟な操作を必要とするとき、&lt;code&gt;stringstream&lt;/code&gt;の使用を推奨する。また、数値型間の変換を行う場合、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/cast.html#numeric_cast&#34;&gt;&lt;code&gt;numeric_cast&lt;/code&gt;&lt;/a&gt;の方が適している。&lt;/p&gt;
&lt;p&gt;文字列ベースの表現に関する問題点等に関する議論を扱ったものとして、Herb Sutterの記事 &lt;a href=&#34;http://www.gotw.ca/publications/mill19.htm&#34; target=&#34;_blank&#34;&gt;The String Formatters of Manor Farm&lt;/a&gt;を紹介しておこう。これには、&lt;code&gt;stringstream&lt;/code&gt;や&lt;code&gt;lexical_cast&lt;/code&gt;等の比較も含まれている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#examples&#34; name=&#34;examples&#34;&gt;例&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下のサンプルではコマンドラインから与えられた複数の引数を数値の列に変換している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; argv[])
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_lexical_cast;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; args;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*++&lt;/span&gt;argv)
    {
        try
        {
            args.push_back(lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;argv));
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt;(bad_lexical_cast &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)
        {
            args.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
        }
    }
    ...
}
&lt;/pre&gt;&lt;/div&gt;

以下のサンプルでは文字列の中に数値を埋め込んでいる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;log_message&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;log_errno&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; yoko)
{
    log_message(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Error &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(yoko) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; strerror(yoko));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#synopsis&#34; name=&#34;synopsis&#34;&gt;ヘッダ概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリの詳細：&#34;boost/lexical_cast.hpp&#34;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#bad_lexical_cast&#34;&gt;bad_lexical_cast&lt;/a&gt;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Target, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Source&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
      Target &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#lexical_cast&#34;&gt;lexical_cast&lt;/a&gt;(Source arg);
}
&lt;/pre&gt;&lt;/div&gt;

テストコード：&#34;lexical_cast_test.cpp&#34;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#lexical_cast&#34; name=&#34;lexical_cast&#34;&gt;&lt;code&gt;lexical_cast&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Target, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Source&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  Target lexical_cast(Source arg);
&lt;/pre&gt;&lt;/div&gt;

引数として受け取った&lt;code&gt;arg&lt;/code&gt;を&lt;code&gt;std::stringstream&lt;/code&gt;に流し込み、&lt;code&gt;Target&lt;/code&gt;のデータに変換して返す。もし変換が失敗した場合、例外&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#bad_lexical_cast&#34;&gt;&lt;code&gt;bad_lexical_cast&lt;/code&gt;&lt;/a&gt;が発生する。&lt;/p&gt;
&lt;p&gt;引数と戻り値の型の条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;は&lt;code&gt;OutputStreamable&lt;/code&gt;（&lt;code&gt;stream&lt;/code&gt;に出力可能）でなければならない。&lt;ul&gt;
&lt;li&gt;つまり、&lt;code&gt;std::ostream&lt;/code&gt;のオブジェクトを左辺に取り、引数の型（&lt;code&gt;Source&lt;/code&gt;）のインスタンスを右辺に取る&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;が定義されていなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;と&lt;code&gt;Target&lt;/code&gt;は&lt;code&gt;CopyConstructible&lt;/code&gt;（コピーコンストラクト可能）でなければならない。[20.1.3]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;は&lt;code&gt;InputStreamable&lt;/code&gt;（&lt;code&gt;stream&lt;/code&gt;から入力可能）でなければならない。&lt;ul&gt;
&lt;li&gt;つまり、&lt;code&gt;std::istream&lt;/code&gt;のオブジェクトを左辺に取り、戻り値の型（&lt;code&gt;Target&lt;/code&gt;）のインスタンスを右辺に取る&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;が定義されていなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;は&lt;code&gt;DefaultConstructible&lt;/code&gt;（デフォルトコンストラクト可能）でなければならない。&lt;ul&gt;
&lt;li&gt;つまり、&lt;code&gt;Target&lt;/code&gt;のオブジェクトのデフォルト初期化が可能でなければならない。[8.5, 20.1.4]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target&lt;/code&gt;は&lt;code&gt;Assignable&lt;/code&gt;でなければならない。[23.1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;stream&lt;/code&gt;におけるベースの文字型は、特にワイド文字を利用した変換を必要としない場合、&lt;code&gt;char&lt;/code&gt;型を利用し、そうで無ければ、&lt;code&gt;wchar_t&lt;/code&gt;型を利用する。ベースにワイド文字を必要とするのは、&lt;code&gt;wchar_t&lt;/code&gt;、&lt;code&gt;wchar_t *&lt;/code&gt;、&lt;code&gt;std::wstring&lt;/code&gt;である。&lt;/p&gt;
&lt;p&gt;より高度な変換を必要とする場合、&lt;code&gt;std::stringstream&lt;/code&gt;および&lt;code&gt;std::wstringstream&lt;/code&gt;を利用することをお勧めする。&lt;code&gt;stream&lt;/code&gt;の機能の必要のない変換が要求されているのならば、&lt;code&gt;lexical_cast&lt;/code&gt;を利用することは適さない。そのような特殊なケースための準備を&lt;code&gt;lexical_cast&lt;/code&gt;は用意してないからである。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#bad_lexical_cast&#34; name=&#34;bad_lexical_cast&#34;&gt;&lt;code&gt;bad_lexical_cast&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;bad_lexical_cast&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_cast
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    ... &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::exceptionと同様のメンバ関数を持つ&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;

この例外は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#lexical_cast&#34;&gt;&lt;code&gt;lexical_cast&lt;/code&gt;&lt;/a&gt;が失敗したことを示すために使用される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/conversion/lexical_cast.html#changes&#34; name=&#34;changes&#34;&gt;更新履歴&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前バージョンの&lt;code&gt;lexical_cast&lt;/code&gt;は、浮動小数型の変換のために&lt;code&gt;stream&lt;/code&gt;のデフォルトの精度を利用していたが、現行版においては、&lt;code&gt;std::numeric_limits&lt;/code&gt;を特殊化している型に関しては、それを元に変換を行うようになった。&lt;/li&gt;
&lt;li&gt;前バージョンの&lt;code&gt;lexical_cast&lt;/code&gt;は、任意のワイド文字型の変換をサポートしていなかった。ワイド文字型の完全な言語、ライブラリのサポートがなされているコンパイラにおいては、&lt;code&gt;lexical_cast&lt;/code&gt;は&lt;code&gt;wchar_t&lt;/code&gt;、&lt;code&gt;wchar_t *&lt;/code&gt;、および&lt;code&gt;std::wstring&lt;/code&gt;の変換をサポートする。&lt;/li&gt;
&lt;li&gt;前バージョンの&lt;code&gt;lexical_cast&lt;/code&gt;は、従来型のストリーム抽出演算子が値を読むために充分であると仮定していた。しかしながら、文字列入出力は、その空白文字が、文字列の内容ではなく、入出力セパレータの役目を演じてしまうという結果、非対称なのである。現在のバージョンでは&lt;code&gt;std::string&lt;/code&gt;と&lt;code&gt;std::wstring&lt;/code&gt;(サポートされているところでは) のでこの誤りが修正されている。例えば、&lt;code&gt;lexical_cast&amp;lt;std::string&amp;gt;(&#34;Hello, World&#34;)&lt;/code&gt; は、&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外で失敗することなく、成功する。&lt;/li&gt;
&lt;li&gt;前バージョンの&lt;code&gt;lexical_cast&lt;/code&gt;は、ポインタへの危険なもしくは無意味な変換を許していたが、現行版においては、ポインタへの変換は例外&lt;code&gt;bad_lexical_cast&lt;/code&gt;を投げるようになっている：コード&lt;code&gt;lexical_cast&amp;lt;char *&amp;gt;(&#34;Goodbye, World&#34;)&lt;/code&gt;は未定義の振る舞いをする代わりに、例外を投げる。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;© Copyright Kevlin Henney, 2000–2003&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost Date-Time Library Documentation -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost Date-Time Library Documentation&lt;/h1&gt;
&lt;p&gt;Version 1.00&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#more-info&#34;&gt;More Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html&#34;&gt;Build-Compiler Information&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日付プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorian Date System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;Class date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html&#34;&gt;Class date_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html&#34;&gt;Class date_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;Date Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;Date Generators / Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html&#34;&gt;Class gregorian_calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/class_date.html#construct-from-clock&#34;&gt;Class day_clock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;時間プログラミング&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Time System&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html&#34;&gt;Class ptime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html&#34;&gt;Class time_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html&#34;&gt;Class time_period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;Time Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html&#34;&gt;UTC / Local Time Adjustments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ジェネリックプログラミングの概念に基づいた日付・時間ライブラリ&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#motivation&#34; name=&#34;motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの開発動機は、多くのプロジェクトの多くの日付時間ライブラリで動作すること、また、それらの構築を手助けすることである。 日付時間ライブラリは多くの開発プロジェクトに対して、基礎的な構造を提供する。 しかしそれらの多くは、計算、書式化、変換、その他のいくつかの機能に限界がある。 例えば多くのライブラリは、うるう秒を正しく扱うこと、無限のような概念を提供すること、高分解能の時間資源やネットワーク上の時間資源を利用することが出来ない。 そのうえ、これらのライブラリは、どれも日付や時間の表現形式が厳密である傾向にあるため、プロジェクトやサブプロジェクトのためにカスタマイズすることが出来ない。&lt;/p&gt;
&lt;p&gt;日付や時間に関するプログラミングは、文字列や整数に関するプログラミングと同じくらいシンプルで自然であるべきである。 多くの時間論理を備えたアプリケーションは、演算子と計算能力の頑健な集合により、根本的に単純化することができる。 クラスは日付時間の比較、時間の長さ(length)や期間(duration)の加算、時計からの日付時間の取得、日付時間間隔(interval)に関する自然な動作を提供すべきである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#usage-examples&#34; name=&#34;usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;次に，グレゴリオ暦システムの使用例を示す。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;日付プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekstart&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
date &lt;span style=&#34;color: #0000FF&#34;&gt;weekend&lt;/span&gt;  (&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
date_duration &lt;span style=&#34;color: #0000FF&#34;&gt;fiveDays&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;); 
date d3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; fiveDays;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; day_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_day();
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (d3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; today) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date comparison operators&lt;/span&gt;

date_period thisWeek(d1,d2);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (thisWeek.contains(today)) {}&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//do something&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//iterate and print the week&lt;/span&gt;
day_iterator itr(weekstart);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; itr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; weekend; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;itr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_iso_extended_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;itr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

そして &lt;code&gt;posix_time&lt;/code&gt; システムの使用例である。 詳細は「&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;時間プログラミング&lt;/a&gt;」で解説する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time; 
date &lt;span style=&#34;color: #0000FF&#34;&gt;d&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;,Feb,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//an arbitrary date&lt;/span&gt;
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;t1&lt;/span&gt;(d, hours(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;nanosec(&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;));&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//date + time of day offset&lt;/span&gt;
ptime t2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; t1 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; minutes(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
ptime now &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; second_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;local_time(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//use the clock&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Get the date part out of the time&lt;/span&gt;
date today &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; now.date();
date tommorrow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; today &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; date_duration(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;tommorrow_start&lt;/span&gt;(tommorrow); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//midnight &lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//starting at current time iterator adds by one hour&lt;/span&gt;
time_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;titr&lt;/span&gt;(now,hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)); 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; titr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; tommorrow_start; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;titr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_simple_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;titr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#domain-concepts&#34; name=&#34;domain-concepts&#34;&gt;Domain Concepts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;日付・時間の分野には専門用語と問題が多い。以下はライブラリ中に見られる概念の簡単な紹介である。&lt;/p&gt;
&lt;p&gt;このライブラリは3つの基本的な時間型をサポートする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Point&lt;ul&gt;
&lt;li&gt;時間位置。時刻。連続する時間内での位置を示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Duration&lt;ul&gt;
&lt;li&gt;時間長。時間連続体においてどの位置にも結びついていない時間の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time Interval&lt;ul&gt;
&lt;li&gt;時間間隔。時間連続体の特定の位置に結びついた時間長。期間とも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの時間型にはそれぞれ表現可能な最小の時間間隔(duration)で定義される &lt;strong&gt;分解能&lt;/strong&gt; がある。 &lt;strong&gt;時法系(Time system)&lt;/strong&gt; は、時刻にラベルを付けて計算するための規則はもちろんのこと、これらすべての時間型も提供する。 &lt;strong&gt;暦法系(Calendar system)&lt;/strong&gt; は最大の分解能(1日)を持っている簡素な時法系である。 &lt;strong&gt;グレゴリオ暦&lt;/strong&gt; は今日最も広く使われている暦法系である(ISOシステムは基本的にこれの派生物である)。 しかし、他にも多くの暦法系がある。 &lt;strong&gt;UTC(Coordinated Universal Time;協定標準時)&lt;/strong&gt; は広く使われている民間の時法系である。UTC がうるう秒（これは、必要に応じて適用されるもので、予測可能ではない）の使用によって経度0において地球自転に対して調整される。 たいていの &lt;strong&gt;地域時間システム&lt;/strong&gt; が UTC に基づいているが、地球自転に対して同じように調整されるために、昼時間はどこでも同じである。 さらに、夏の昼時間を長くするためのサマータイム(DST)調整を含む地域時間もある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;クロックデバイス&lt;/strong&gt; は時法系に関して現在の日付あるいは時刻を供給する(あるハードウェアに結び付けられた)ソフトウェアコンポーネントである。&lt;/p&gt;
&lt;p&gt;ライブラリは日付と時間の計算をサポートする。しかしながら、時間の計算は整数の計算と全く同じというわけにはいかない。 もし、時間計算の正確度(accuracy)が重要ならば、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/tradeoffs.html&#34;&gt;Stability, Predictability, and Approximations(安定性、予測性と近似)&lt;/a&gt;を読む必要がある。&lt;/p&gt;
&lt;p&gt;追加資料を以下に示す&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/basic_terms.html&#34;&gt;基本的な専門用語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html&#34;&gt;計算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/tradeoffs.html&#34;&gt;安定性、予測性と近似&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html&#34;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#tests&#34; name=&#34;tests&#34;&gt;Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリは、以下のディレクトリで多数のテストを提供している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libs/date_time/test &lt;/li&gt;
&lt;li&gt;libs/date_time/test/gregorian&lt;/li&gt;
&lt;li&gt;libs/date_time/test/posix_time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのテストをビルドして実行することで、ライブラリが正しくインストールされ、確実に機能していることを確認できる。 加えて、これらのテストは新しいコンパイラへの移植を容易にする。 最後に、テストは使用例で明示的に記述されない多くの機能の例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#design-and-extensions&#34; name=&#34;design-and-extensions&#34;&gt;Design and Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリの起源の大部分は（今まで）ほとんどの日付時間ライブラリがカスタマイズと拡張を許す方法で構築されないという観察であった。 典型的な例では、カレンダーロジックは直接日付クラスに構築される。 あるいは時計検索機能は直接時間クラスに作り上げられる。 これらのデザイン決定は通常、拡張したりライブラリの振る舞いを変更することを不可能にする。 もっと基本的なレベルにおいては、時間表現あるいはグレゴリオ暦の分解能について通常仮定がある。&lt;/p&gt;
&lt;p&gt;高分解能の時間表現やそれ以外の仮定からの要求を、時間ライブラリの実装が満たすことが出来ないために、結果的に不完全なライブラリを使わざるをえない、というのは、よくあることである。 この種のライブラリの開発は、まったく些細なことではないので、こういう結果は非常に残念なことである。&lt;/p&gt;
&lt;p&gt;（このライブラリの）設計は完璧というには程遠いが、それでも現在の設計は、著者の知るどんな時間ライブラリよりもはるかに柔軟である。 将来のバージョンでは、拡張性のさまざまな面について、さらに文書化されることが期待される。 ライブラリの設計目標についての情報は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/DesignGoals.html&#34;&gt;ここ&lt;/a&gt;に要約されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many people have contributed to the development of this library. In particular Hugo Duncan and Joel de Guzman for help with porting to various compilers. For initial development of concepts and design Corwin Joy and Michael Kenniston deserve special thanks. Also extra thanks to Michael for writing up the theory and tradeoffs part of the documentation. Dave Zumbro for initial inspiration and sage thoughts. Many thanks to boost reviewers and users including: William Seymour, Kjell Elster, Beman Dawes, Gary Powell, Andrew Maclean, William Kempf, Peter Dimov, Chris Little, David Moore, Darin Adler, Gennadiy Rozental, Joachim Achtzehnter, Paul Bristow, Jan Langer, Mark Rodgers, Glen Knowles, Matthew Denman, and George Heintzelman.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html#more-info&#34; name=&#34;more-info&#34;&gt;More Info&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在、ライブラリの設計はWikiと電子メールによる議論によって発展している。 詳しい情報はこちらへ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?GDTL&#34; target=&#34;_blank&#34;&gt;Boost Wiki GDTL Start Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crystalclearsoftware.com/libraries/date_time/index.html&#34; target=&#34;_blank&#34;&gt;Full Doxygen Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Thu Sep 5 07:22:00 MST 2002 by Jeff Garland © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Date-Time Build-Compiler Information -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/build_info.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Date-Time Build-Compiler Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Build-Compiler Information&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#compilation-options&#34;&gt;Compilation Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/compiler-portability-notes&#34;&gt;Compiler/Portability Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#directory-structure&#34;&gt;Directory Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#required-boost-libraries&#34;&gt;Required Boost Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#overview&#34; name=&#34;overview&#34;&gt;Overview&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ライブラリ関数のいくつかはライブラリファイルを作成する必要がある。 これらの関数を含むライブラリ( &lt;strong&gt;libboost_date_time&lt;/strong&gt; )を作成するには、buildディレクトリにあるJamfileを使う。&lt;/p&gt;
&lt;p&gt;変数&lt;code&gt;DATE_TIME_INLINE&lt;/code&gt;は、ある特定のコア関数のインライン化を制御する。 デフォルトでこの変数はライブラリのコンパイル時に定義されている。 ライブラリを使っている全てのコンパイル単位でこの定義を含んでいなければ、リンクエラーになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#compilation-options&#34; name=&#34;compilation-options&#34;&gt;Compilation Options&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;デフォルトでは &lt;code&gt;posix_time&lt;/code&gt; はナノ秒レベルの精度を提供するために内部で 64bit整数と32bit整数を使う。 選択肢として、一つの 64bit整数でマイクロ秒レベルの精度を提供することもできる。 この代替実装は、ナノ秒精度を必要としない多くのアプリケーションでパフォーマンスの向上と省メモリが期待できる。&lt;/p&gt;
&lt;p&gt;変数&lt;code&gt;BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG&lt;/code&gt;はbuild/Jamfileで定義されており、これらのオプションを選択する。 64bit整数版を使う場合、単にJamfileからこの定義を削除する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#compiler-portability-notes&#34; name=&#34;compiler-portability-notes&#34;&gt;Compiler/Portability Notes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost Date-Time libraryは、多くのコンパイラでビルドされテストされた。 しかしながら、いくつかのコンパイラと標準ライブラリで問題がある。 これらの問題のいくつかは回避可能であるが、回避できない問題も残っている。 以下のコンパイラはライブラリの機能を完全にサポートしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 3.0.3 on Linux&lt;/li&gt;
&lt;li&gt;GCC 3.1 (cygwin)&lt;/li&gt;
&lt;li&gt;MSVC 7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に、標準ロケールに対するサポートが完全でないと &lt;code&gt;iostream&lt;/code&gt; ベースの入出力サポートが制約される事がある。そういったコンパイラのために、より限定された文字列ベースの入出力を提供している。&lt;/p&gt;
&lt;p&gt;以下のコンパイラ及び標準ライブラリはこの制約を含む&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 2.9x on Linux&lt;/li&gt;
&lt;li&gt;Borland 5.1.1 and 5.6&lt;/li&gt;
&lt;li&gt;MSVC 6 SP5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ComeauやMetroworksといった他のコンパイラでは、ライブラリの初期バージョンでテストに成功している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#directory-structure&#34; name=&#34;directory-structure&#34;&gt;Directory Structure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;date_time&lt;/code&gt;のディレクトリ構成はBoostに合わせて変更された。&lt;/p&gt;
&lt;p&gt;ディレクトリ構成は次のようになっている&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ディレクトリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time&lt;/td&gt;
&lt;td&gt;共通ヘッダ及びテンプレート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time/gregoran&lt;/td&gt;
&lt;td&gt;グレゴリオ暦システムのヘッダファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/boost/date_time/posix_time&lt;/td&gt;
&lt;td&gt;Posix Time系のヘッダファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/build&lt;/td&gt;
&lt;td&gt;ビルドファイルと出力ディレクトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test&lt;/td&gt;
&lt;td&gt;ジェネリックコードに関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test/gregorian&lt;/td&gt;
&lt;td&gt;グレゴリオ暦に関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/examples/gregorian&lt;/td&gt;
&lt;td&gt;グレゴリオ暦に関する良いコード例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/src/gregorian&lt;/td&gt;
&lt;td&gt;libboost_date_time用のcppファイル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/test/posix_time&lt;/td&gt;
&lt;td&gt;Posix Time系に関するテスト一式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/examples/posix_time&lt;/td&gt;
&lt;td&gt;時間に関する良いコード例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/libs/date_time/src/posix_time&lt;/td&gt;
&lt;td&gt;空 (ファイルが一つあるが、ソースコードではない)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html#required-boost-libraries&#34; name=&#34;required-boost-libraries&#34;&gt;Required Boost Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このライブラリは以下のライブラリに依存している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost.tokenizer&lt;/li&gt;
&lt;li&gt;boost.integer(cstdint)&lt;/li&gt;
&lt;li&gt;boost.operators&lt;/li&gt;
&lt;li&gt;boost::lexical_cast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;よって、最低限これらのライブラリがインストールされている必要がある。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Date-Time Concepts - 計算 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/calculations.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Date-Time Concepts - 計算&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Calculation Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#timepoints&#34;&gt;Timepoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#durations&#34;&gt;Durations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#interval&#34;&gt;Interval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#special-cases&#34;&gt;Special Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#timepoints&#34; name=&#34;timepoints&#34;&gt;Timepoints&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このセクションでは，GDTL timepoints で行える基本的な算術規則をいくつか示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Timepoint &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Duration &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint
Timepoint &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; Duration &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint

Duration &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Timepoint &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Undefined 
Duration &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; Timepoint &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Undefined

Timepoint &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Timepoint &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Undefined
Timepoint &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; Timepoint &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#durations&#34; name=&#34;durations&#34;&gt;Durations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このセクションでは時間長(time duration)に関する標準的な演算を示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Duration &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Duration  &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration
Duration &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; Duration  &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration

Duration &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; Integer   &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration  
Integer  &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; Duration  &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration  

Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; Integer &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) 
Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;Integer   &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#interval&#34; name=&#34;interval&#34;&gt;Intervals&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここに時間間隔(intervals)によって支援された&#34;演算&#34;がある。 それらは半開区間に基づいている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//These can be defined by either of 2 Timepoints or a Timepoint and Duration&lt;/span&gt;
Timeinterval intersects Timeinterval &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;
Timeinterval intersection Timeinterval &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timeperiod &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//results undefined if no intersection &lt;/span&gt;
Timeinterval contains  Timepoint    &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;
Timeinterval contains  Timeinterval &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;  
Timeinterval shift Duration         &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; shift start and end by duration amount
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/calculations.html#special-cases&#34; name=&#34;special-cases&#34;&gt;Special Cases&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般に，非日時値(NADT;Not A Date Time)や無限大といった特別な値は，浮動小数点値のような規則に従うべきである。 戻り値として NADT を返す代わりに，例外を投げるNADTに基づいたシステムを形成することが可能であるべきであることに注意する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Timepoint(NADT) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Duration &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint(NADT)
Timepoint(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Duration &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;)
Timepoint &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;)
Timepoint &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; Duration(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;--&amp;gt;&lt;/span&gt; Timepoint(&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;∞&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_date.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;gregorian::date&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34;&gt;Construct from Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::date&lt;/code&gt; クラスはライブラリユーザーにとって主要なインタフェースである。 一般に、日付クラスは代入可能ではあるが、一度構築されると不変である事が多い。&lt;/p&gt;
&lt;p&gt;日付の生成について別の方法が&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;date iterators&lt;/a&gt;と&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;date algorithms or generators&lt;/a&gt;に含まれている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(greg_year year, greg_month month, greg_day day)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付の要素から構築する。year, month, day の範囲が不正な場合、それぞれ &lt;code&gt;std::out_of_range&lt;/code&gt; から派生した &lt;code&gt;bad_year&lt;/code&gt;, &lt;code&gt;bad_day_of_month&lt;/code&gt;, &lt;code&gt;bad_day_month&lt;/code&gt; 例外を投げる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(d)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(special_values sv)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;無限大、無効値(not-a-date-time)、最大値、最小値を構築するコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(neg_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(pos_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d3(not_a_date_time);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d4(max_date);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d5(min_date);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34; name=&#34;construct-from-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順に区切られた文字列から　例:2002-1-25&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;2002/1/25&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_undelimited_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順のISO形式から　例:20020125&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;20020125&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34; name=&#34;construct-from-clock&#34;&gt;Construction From Clock&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::local_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算機に設定された時間帯に準じた地域時間を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::local_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::universal_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 標準時を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::universal_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_month month() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.month() --&amp;gt; 1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_ymd year_month_day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_ymd&lt;/code&gt; 構造体を返す&lt;br /&gt; 日付の3つの要素全てが必要なときに便利である&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date::ymd_type ymd = d.year_month_day(); ymd.year --&amp;gt; 2002, ymd.month --&amp;gt; 1, ymd.day --&amp;gt; 10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;曜日を返す(例: &lt;code&gt;Sunday&lt;/code&gt;, &lt;code&gt;Monday&lt;/code&gt;, etc.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; Thursday;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正または負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(pos_infin); d.is_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_neg_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_neg_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_pos_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_pos_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_not_a_date() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が無効値(not a date)の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(not_a_date_time); d.is_not_a_date() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-mmm-DD (mmm は月名の3文字短縮形)形式に変換&lt;/td&gt;
&lt;td&gt;2002-Jan-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYYMMDD 形式に変換&lt;/td&gt;
&lt;td&gt;20020131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_extended_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD 形式に変換&lt;/td&gt;
&lt;td&gt;2002-01-31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリーム出力演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;std::cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;d1 == d2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を加えた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d + dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を差し引いた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d - dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration operator-(date) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの日付を差し引いた日数(date duration)を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(2002,Jan,2);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd = d2-d1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date_duration -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_date_duration.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;gregorian::date_duration&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::date_duration&lt;/code&gt; は，&lt;code&gt;gregorian::date&lt;/code&gt;の演算で使うシンプルな日数を表すクラスである。durationの値は正と負どちらも使用できる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日数を生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration dd(3); //3 日&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long days() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日数を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration dd(3); dd.days() --&amp;gt; 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_negative() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日数が&lt;code&gt;0&lt;/code&gt;より小さいとき&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration dd(-1); dd.is_negative() --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static date_duration unit()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;duration type の取りうる最小単位を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration::unit() --&amp;gt; date_duration(1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dd1 == dd2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日数を加算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration dd1(3);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd2(5);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd3 = dd1 + dd2;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日数の差を取る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_duration dd1(3);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd2(5);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd3 = dd1 - dd2;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date_period -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_date_period.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;gregorian::date_period&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Period Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::date_period&lt;/code&gt; クラスは、二つの日付の範囲(期間)を直接表現する。 プログラムの条件付きの論理を単純化することによって、ある種の計算を単純化する能力を提供する。 例えば、日付が週末あるいは休日のような不規則なスケジュールの中であるかどうか試すのは &lt;code&gt;date_period&lt;/code&gt; のコレクションを使って達成され得る。 これは、&lt;code&gt;date_period&lt;/code&gt; が別の期間(date period)と重複する場合に評価を許可する、あるいは重複している期間を生成する、といったいくつかの方法によって容易になる。 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/period_calc.cpp.html&#34;&gt;period calculation example(期間計算の例)&lt;/a&gt; はこの例を提供する。&lt;/p&gt;
&lt;p&gt;無限値と組み合わせて使用される期間(date periods)は、「追って通知があるまで」といった複雑な概念を表現する能力を持っている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period(date begin, date last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[begin, last)&lt;/code&gt; で表される期間(period)を生成する。&lt;br /&gt; &lt;code&gt;last &amp;lt;= begin&lt;/code&gt; のときは null となる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,10), date_duration(2));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period(date start, date end)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[begin, begin+len)&lt;/code&gt;で表される期間(period)を生成する。&lt;br /&gt; &lt;code&gt;len &amp;lt;= 0&lt;/code&gt; のときは null となる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,10), date_duration(2));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period(date_period rhs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(dp)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date begin() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の初日を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp.begin() --&amp;gt; 2002-Jan-01&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date last() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の最終日を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp.last() --&amp;gt; 2002-Jan-09&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date end() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の最終日の翌日を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp.end() --&amp;gt; 2002-Jan-10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_null() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)が正しい形式でないとき&lt;code&gt;true&lt;/code&gt;&lt;br /&gt; 例: &lt;code&gt;end&lt;/code&gt;が&lt;code&gt;start&lt;/code&gt;より小さい&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,10), date(2002,Jan,1));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp.is_null() --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool contains(date) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が期間(period)の範囲内にあるとき&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp.contains(date(2002,Jan,2)) --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool contains(date_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period&lt;/code&gt; が期間(period)の範囲内にあるとき&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_period dp2(date(2002,Jan,2), date(2002,Jan,3));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp1.contains(dp2) --&amp;gt; true&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp2.contains(dp1) --&amp;gt; false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool intersects(date_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)が重複するとき&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_period dp2(date(2002,Jan,2), date(2002,Jan,3));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp2.intersects(dp1) --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period intersection(date_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの期間(period)から重複する期間(period)を計算する。 期間(period)が重複しないときは null が返る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_period dp2(date(2002,Jan,2), date(2002,Jan,3));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp2.intersects(dp1) --&amp;gt; dp2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period merge(date_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの期間(period)を結合して返す。期間(period)が重複しないときは null が返る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_period dp2(date(2002,Jan,9), date(2002,Jan,31));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp2.intersects(dp1) --&amp;gt; 2002-Jan-01/2002-Jan-31&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_period shift(date_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初日と最終日に日数(date_duration)を加算する。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date_period dp1(date(2002,Jan,1), date(2002,Jan,10));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;dp1.shift(date_duration(1)); --&amp;gt; 2002-Jan-02/2002-Jan-11&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(date_period dp)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[YYYY-mmm-DD/YYYY-mmm-DD] (mmm は月名の3文字短縮形)形式の文字列に変換&lt;/td&gt;
&lt;td&gt;[2002-Jan-01/2002-Jan-31]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dp1 == dp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dp1.end()&lt;/code&gt;が&lt;code&gt;dp2.begin()&lt;/code&gt;よりも小さいとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dp1 &amp;lt; dp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dp1.begin()&lt;/code&gt;が&lt;code&gt;dp2.end()&lt;/code&gt;よりも大きいとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dp1 &amp;gt; dp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::gregorian_calendar -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_gregorian_calendar.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;gregorian::gregorian_calendar&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::gregorian_calendar&lt;/code&gt; クラスは、グレゴリオ暦の日付システムを生成するのに必要な機能を実装する。 これは、年-月-日 形式の日付と日付番号表現との相互変換を行う。&lt;/p&gt;
&lt;p&gt;このクラスは、主に &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;&lt;code&gt;gregorian::date&lt;/code&gt;&lt;/a&gt; によってアクセスされることを意図しており、ユーザによって直接使用される事はない。 しかしながら、&lt;code&gt;end_of_month_day&lt;/code&gt;機能に役に立つ、有用な機能がある。&lt;/p&gt;
&lt;p&gt;サンプル &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_month.cpp.html&#34;&gt;print month&lt;/a&gt; で、この例を説明している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html#functions&#34; name=&#34;functions&#34;&gt;Functions&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static short day_of_week(ymd_type)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;曜日を返す (0==Sunday, 1==Monday, etc)&lt;/td&gt;
&lt;td&gt;参照: &lt;code&gt;gregorian::date day_of_week&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static date_int_type day_number(ymd_type)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ymd_type&lt;/code&gt; を日付番号に変換する。日付番号は、エポック(Epoch)からの通算日数の絶対値である&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static short end_of_month_day(year_type, month_type)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた年と月から、その月の最終日を決定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static ymd_type from_day_number(date_int_type)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付番号を &lt;code&gt;ymd&lt;/code&gt; 構造体に変換する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static bool is_leap_year(year_type)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した年がうるう年なら &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gregorian_calendar::is_leap_year(2000) --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::ptime Documentation -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_ptime.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;posix_time::ptime Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ptime Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-clock&#34;&gt;Construct from Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::posix_time::ptime&lt;/code&gt; クラスは時間位置(time point)を操作するための主要なインタフェースである。 一般に，&lt;code&gt;ptime&lt;/code&gt; クラスは代入可能ではあるが，一度構築されると不変である事が多い。&lt;/p&gt;
&lt;p&gt;クラス &lt;code&gt;ptime&lt;/code&gt; は，時間位置(time point)の日付部分へのインタフェースである &lt;code&gt;gregorian::date&lt;/code&gt; に依存する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptime&lt;/code&gt; を生成する別の手法が，&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;time iterators&lt;/a&gt; にある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime(date,time_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付とオフセットから構築&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t1(date(2002,Jan,10), time_duration(1,2,3));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(date(2002,Jan,10), hours(1)+nanosec(5));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t3(t1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-string&#34; name=&#34;construct-from-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime time_from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;区切られた文字列から構築&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ts(&#34;2002-01-20 23:59:59.000&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(time_from_string(ts));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-clock&#34; name=&#34;construct-from-clock&#34;&gt;Construction From Clock&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static ptime second_clock::local_time();&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算機の時間帯設定に基づいた地域時間(秒レベル分解能)で初期化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t(second_clock::local_time());&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static ptime second_clock::universal_time()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 時間で初期化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t(second_clock::universal_day());&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date date() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間の日付部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d, hour(1));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;t.date() --&amp;gt; 2002-Jan-10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration time_of_day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;その日の時間オフセットを取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d, hour(1));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;t.time_of_day() --&amp;gt; 01:00:00;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYYMMDDTHHMMSS,fffffffff 形式(T は日付と時間の区切り) に変換&lt;/td&gt;
&lt;td&gt;20020131T100001,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_extended_string(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-MM-DDTHH:MM:SS,fffffffff 形式(T は日付と時間の区切り) に変換&lt;/td&gt;
&lt;td&gt;2002-01-31T10:00:01,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt; &lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t1 == t2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数(&lt;code&gt;date_duration&lt;/code&gt;)を加えた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t + dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数(&lt;code&gt;date_duration&lt;/code&gt;)を差し引いた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t - dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator+(time_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(&lt;code&gt;time_duration&lt;/code&gt;)を加えた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t + hours(1) + minutes(2);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator-(time_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(&lt;code&gt;time_duration&lt;/code&gt;)を差し引いた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t - minutes(2);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration operator-(ptime) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの時間の差を取る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d,seconds(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_duration t3 = t2 - t1;//negative result&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::time_duration -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_time_duration.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;posix_time::time_duration&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Time Duration Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#count-based-construction&#34;&gt;Count Based Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::posix_time::time_duration&lt;/code&gt; クラスは時間の長さを確実に表現できる基底型である。 時間長(duration)は正あるいは負の値を取り得る。&lt;/p&gt;
&lt;p&gt;以下に示すように、異なった分解能を調整するために基底の &lt;code&gt;time_duration&lt;/code&gt; から継承するいくつかの小さなヘルパークラスがある。 これらのクラスによって、コードを短く、意図をより明確にすることができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/date_time/doc/time_duration_inherit.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time;

time_duration td &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; seconds(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//01:00:01&lt;/span&gt;
td &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hours(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; nanosec(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//01:00:00.000000005&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

注意：高分解能(たとえば&lt;code&gt;nanosec&lt;/code&gt;)が存在するかどうかは、依存するインストールライブラリによって異なる。詳細は、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/build_info.html&#34;&gt;Build-Compiler Information&lt;/a&gt;を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration(hours,minutes,seconds,fractional_seconds)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値から時間長(duration)を生成する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(1,2,3,9); //1 hr 2 min 3 sec 9 nanoseconds&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#count-based-construction&#34; name=&#34;count-based-construction&#34;&gt;Construction By Count&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hours(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = hours(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minutes(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = minutes(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seconds(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = seconds(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;milliseconds(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミリ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = milliseconds(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;microseconds(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マイクロ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = microseconds(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nanoseconds(long)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ナノ秒単位で生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td = nanoseconds(3);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration duration_from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;区切られた文字列から生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ts(&#34;23:59:59.000&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_duraton td(duration_from_string(ts));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long hours() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(1,2,3); td.hours() --&amp;gt; 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long minutes() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規化された分の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(1,2,3); td.minutes() --&amp;gt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long seconds() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(1,2,3); td.hours() --&amp;gt; 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long fractional_seconds() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒の小数部を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(1,2,3, 1000); td.fractional_seconds() --&amp;gt; 1000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_negative() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)が負の時 &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(-1,0,0); td.is_negative() --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration invert_sign() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号を反転させた時間長(duration)を新たに生成&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(-1,0,0); td.invert_sign() --&amp;gt; 01:00:00&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static gdtl::time_resolutions resolution()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration&lt;/code&gt; クラスが表現可能な分解能&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration::resolution() --&amp;gt; nano&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boost::int64_t ticks()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)型の生の数を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td(0,0,0, 1000); td.ticks() --&amp;gt; 1000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static time_duration unit()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(duration)型の扱える最小単位を返す(1ナノ秒)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration::unit() --&amp;gt; time_duration(0,0,0,1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(time_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HH:MM:SS.fffffffff 形式に変換する(fff...部は、秒の小数部が0でないときのみ含まれる)&lt;/td&gt;
&lt;td&gt;10:00:01.123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(time_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HHMMSS,fffffffff 形式に変換する&lt;/td&gt;
&lt;td&gt;100001,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dd1 == dd2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration operator+(time_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(durations)を加算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td1(hours(1)+minutes(2));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_duration td2(seconds(10)); time_duration td3 = td1 + td2;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration operator-(time_duration) const&lt;/code&gt; 時間長(durations)を減算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_duration td1(hours(1)+nanosec(2));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_duration td2 = td1 - minutes(1);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::time_period -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/class_time_period.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;posix_time::time_period&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Time Period Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;クラス &lt;code&gt;boost::posix_time::time_period&lt;/code&gt; は2つの時刻の範囲を直接表現する。 期間(period)は、プログラムの条件付きの論理を単純化することによって、ある種の計算を単純化する能力を提供する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_periods.cpp.html&#34;&gt;time periods example&lt;/a&gt; は &lt;code&gt;time_period&lt;/code&gt; の使用例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period(ptime begin, ptime last)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[begin, last)&lt;/code&gt; で表される期間(period)を生成する。&lt;br /&gt; &lt;code&gt;last &amp;lt;= begin&lt;/code&gt; のときは null となる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t, hours(3));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period(ptime start, ptime end)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[begin, begin+len)&lt;/code&gt; で表される期間(period)を生成する。&lt;br /&gt; &lt;code&gt;len &amp;lt;= 0&lt;/code&gt; のときは null となる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d, hours(10)); //10 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t1, t2);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period(time_period rhs)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_period tp1(tp);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime begin() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の最初を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d, hours(10)); //10 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t1, t2); tp.begin() --&amp;gt; 2002-Jan-01 00:00:10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime last() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の最後を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d, hours(10)); //10 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t1, t2); tp.last() --&amp;gt; 2002-Jan-01 09:59:59.999999999&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime end() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)の最後の次を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d, hours(10)); //10 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t1, t2); tp.last() --&amp;gt; 2002-Jan-01 10:00:00&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_null() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period) が正しい形式でないとき&lt;code&gt;true&lt;/code&gt;&lt;br /&gt; 例: &lt;code&gt;end&lt;/code&gt;が&lt;code&gt;start&lt;/code&gt;より小さい&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool contains(ptime) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime&lt;/code&gt; が期間(period)の範囲内にあるとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,01);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d, seconds(10)); //10 sec after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d, hours(10)); //10 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t3(d, hours(2)); //2 hours after midnight&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp(t1, t2); tp.contains(t3) --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool contains(time_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_period&lt;/code&gt; が期間(period)の範囲内にあるとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_period tp1(ptime(d,hours(1)), ptime(d,hours(12)));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp2(ptime(d,hours(2)), ptime(d,hours(4)));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;tp1.contains(tp2) --&amp;gt; true&lt;/code&gt;&lt;br /&gt; &lt;code&gt;tp2.contains(tp1) --&amp;gt; false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool intersects(time_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;期間(period)が重複するとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_period tp1(ptime(d,hours(1)), ptime(d,hours(12)));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_period tp2(ptime(d,hours(2)), ptime(d,hours(4)));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;tp2.intersects(tp1) --&amp;gt; true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period intersection(time_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの期間(period)が重複する範囲を計算する。期間(period)が重複しないときは null が返る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period merge(time_period) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの期間(period)を結合して返す。期間(period)が重複しないときは null が返る&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_period shift(time_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(time_duration)を &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; に加算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(time_period dp)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[YYYY-mmm-DD hh:mm:ss.fffffffff/YYYY-mmm-DD hh:mm:ss.fffffffff] 形式の文字列に変換する(mmm は月名の3文字短縮形)&lt;/td&gt;
&lt;td&gt;[2002-Jan-01 01:25:10.000000001/2002-Jan-31 01:25:10.123456789]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tp1 == tp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tp1.end()&lt;/code&gt; が &lt;code&gt;tp2.begin()&lt;/code&gt; よりも小さいとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tp1 &amp;lt; tp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tp1.begin()&lt;/code&gt; が &lt;code&gt;tp2.end()&lt;/code&gt; よりも大きいとき &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tp1 &amp;gt; tp2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Date Generators / Algorithms -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/date_algorithms.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Date Generators / Algorithms&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Generators / Algorithms&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;日付アルゴリズムあるいはジェネレータは、他の日付あるいは日付のスケジュールを生成するためのツールである。 生成関数は、月と日のような日付のある部分で始まり、その後、具体的な日付を生成するために残りの部分を供給される。 これは、プログラマが「2月の最初の日曜日」のような概念を表わし、次に、1つ以上の年を供給された時に日付の具体的なセットを生成することを想定している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;date_time&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nth_kday_of_month&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;date&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; nkday;
nkday &lt;span style=&#34;color: #0000FF&#34;&gt;ldgen&lt;/span&gt;(nkday&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;first, Monday, Sep)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// US labor day (アメリカ合衆国 労働者の日)&lt;/span&gt;
date labor_day &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ldgen.get_date(&lt;span style=&#34;color: #666666&#34;&gt;2002&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2002年の労働者の日を計算&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_holidays.cpp.html&#34;&gt;print holidays example&lt;/a&gt; に詳細な使い方の例を示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/date_generators.hpp&#34; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html#class-overview&#34; name=&#34;class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Construction Parameters&lt;/th&gt;
&lt;th&gt;get_date Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_kday_after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_day&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2002年1月1日以降の最初の日曜日のといったものを計算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;first_kday_after fkaf(Monday);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;date d = fkaf.get_date(date(2002,Jan,1));//2002-Jan-07&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_kday_before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_day&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2002年2月1日以前の最初の月曜日といったものを計算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;first_kday_before fkbf(Monday);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d = fkbf.get_date(date(2002,Feb,1));//2002-Jan-28&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last_kday_of_month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week&lt;/code&gt;&lt;br /&gt; &lt;code&gt;greg_month month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_year year&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1月最後の月曜日といったものを計算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;last_kday_of_month lkm(Monday,Jan);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;date d = lkm.get_date(2002);//2002-Jan-28&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_kday_of_month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week&lt;/code&gt;&lt;br /&gt; &lt;code&gt;greg_month month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_year year&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1月最初の月曜日といったものを計算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;first_kday_of_month fkm(Monday,Jan);&lt;/code&gt;&lt;br /&gt;&lt;code&gt;date d = fkm.get_date(2002);//2002-Jan-07&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;partial_date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_month month&lt;/code&gt;&lt;br /&gt;&lt;code&gt;greg_day day_of_month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_year year&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月および日を与えられた日付に、年を適用することにより日付を生成する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;partial_date pd(Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d = pd.get_date(2002);//2002-Jan-01&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Tue Sep 3 16:02:55 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date iterators -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/date_iterators.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;gregorian::date iterators&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;日付イテレータは、日単位で反復するための標準的なメカニズムを提供する。 日付イテレータは(STLの)&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;入力イテレータ&lt;/a&gt;のモデルであり、日付と他の日付生成タスクで集合を代入するために使われる。 例えば、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_month.cpp.html&#34;&gt;print month の例&lt;/a&gt;では、1ヶ月の全ての日々を反復し、それらをプリントする。&lt;/p&gt;
&lt;p&gt;ここにあるイテレータは全て &lt;code&gt;boost::gregorian::date_iterator&lt;/code&gt; からの派生である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html#class-overview&#34; name=&#34;class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Construction Parameters&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;全ての日付単位イテレータに共通な基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_date, int day_count=1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;day_count&lt;/code&gt; 日単位で反復する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;week_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_date, int week_offset=1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;week_offset&lt;/code&gt; 週単位で反復する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;month_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_date, int month_offset=1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;month_offset 月単位で反復する。&lt;br /&gt; 月末の取り扱いについては、特別な規則がある。 それは、最初の日が月の最終日であるときは、常にその月の最終日に合わせて調整されるというものである。 日付がその月末を越えている場合(例: 1月31日+1ヶ月)、月の最終日に合わせて調整される。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;year_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date start_date, int year_offset=1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;year_offset&lt;/code&gt; 年単位で反復する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Gregorian Date System Documentation -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/gregorian.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Gregorian Date System Documentation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Temporal Types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;Class date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_duration.html&#34;&gt;Class date_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date_period.html&#34;&gt;Class date_period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;Date Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;Date Generators / Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_gregorian_calendar.html&#34;&gt;Class gregorian_calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34;&gt;Class day_clock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;gregorian date system はグレゴリオ暦に基づいた日付プログラミングシステムを提供する。 現在の実装は，1400-Jan-01から10000-Jan-01の範囲の日付をサポートする。 実装された暦は、&#34;予想グレゴリオ暦？(proleptic Gregorian calendar)&#34; で、(グレゴリオ暦が)最初に採用された 1582 年以前に遡る拡張がなされている。&lt;/p&gt;
&lt;p&gt;(訳注: &lt;a href=&#34;http://www.wikipedia.org/wiki/Proleptic_Gregorian_Calendar&#34; target=&#34;_blank&#34;&gt;proleptic Gregorian calendar&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;歴史上の日付を扱うとき，局地的に採用された様々な暦法との調整が必要な事に注意すべきである。 Reingold と Dershowitz による &lt;a href=&#34;http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/&#34; target=&#34;_blank&#34;&gt;Calendrical Calculations&lt;/a&gt; に詳しい説明がある。 暦法の現在の歴史上の範囲はアルゴリズムによって制限されてはいない。 しかしそれよりもむしろ、時間の正当性を保証するためにテストを書いて実行する。 この暦法系の範囲が将来増加し続けるであろうと思われる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/&#34; target=&#34;_blank&#34;&gt;Calendrical Calculations&lt;/a&gt; からの日付情報がグレゴリオ暦の実装の正当性をクロステストするために使われた。&lt;/p&gt;
&lt;p&gt;gregorian system の全ての型は &lt;code&gt;boost::gregorian&lt;/code&gt; 名前空間で見つかる。 ライブラリは入出力に依存しない全てのクラスが収められた便宜的なヘッダ &lt;code&gt;boost/date_time/gregorian/gregorian_types.hpp&lt;/code&gt; をサポートする。&lt;/p&gt;
&lt;p&gt;もう一つのヘッダ &lt;code&gt;boost/date_time/gregorian/gregorian.hpp&lt;/code&gt; は型と入出力コードを含む。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html&#34;&gt;&lt;code&gt;boost::gregorian::date&lt;/code&gt;&lt;/a&gt; クラスはユーザーにとって主要な時間型である。 もし，&#34;4月の第1日曜日&#34;を見つけるといった特別な日付計算プログラムの書き方に興味があるなら、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;date generators and algorithms&lt;/a&gt;ページを見ると良い。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html#usage-examples&#34; name=&#34;usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード例&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/days_alive.cpp.html&#34;&gt;Days Alive&lt;/a&gt;&lt;br /&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/days_till_new_year.cpp.html&#34;&gt;Days Till New Year&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;簡単な日数計算。現在の日付を時計から取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/dates_as_strings.cpp.html&#34;&gt;Dates as strings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付と文字列の相互変換、簡単な解析と書式化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/period_calc.cpp.html&#34;&gt;Date Period Calculations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付が、期間(periods)の集合に含まれるか調べる (例: 休日・週末の判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_month.cpp.html&#34;&gt;Print a month&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コマンドラインで与えた月の日付を全て出力する小さなユーティリティプログラム。 1999年1月1日が金曜だったか土曜だったか知る必要がある? このプログラムはその方法を示す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_holidays.cpp.html&#34;&gt;Print Holidays&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;抽象的な指定を具体的な日付の集合に変換するために、日付ジェネレータを使う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Thu Sep 5 07:33:06 MST 2002 by Jeff Garland © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Local Time Adjustment -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/local_time_adjust.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Local Time Adjustment&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Local Time Adjustment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html#class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;時間表現において頻繁にぶつかる問題が、様々な地域時間の間の変換である。 一般に、これは参考時間システム(reference time system)を用いて解決される。 参考時間システムには、典型的に UTC が用いられる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;posix_time&lt;/code&gt; システムは内部で時間調整を行わないので、地域時間および UTC時間の両方を表わすために使用することができる。 しかしながら、ユーザーには変換と時間帯についての知識を処理することが委ねられる。&lt;/p&gt;
&lt;p&gt;このライブラリは UTC から地域時間への変換を処理するための、2つの異なる方法を提示する。 一つ目は、コンピュータの時間帯設定を使う。 これは、ユーザーマシンのための UTC 時刻を変換することに対して、有用な解決法である。 このアプローチは ctime API に依存しており、もし環境設定が間違っていれば、正しくない結果を供給するであろう。 もうひとつのアプローチは、コンピュータの時間帯設定とは無関係に、任意の時間帯から UTC への変換を可能にする。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_utc_conversion.cpp.html&#34;&gt;local utc conversionの例&lt;/a&gt;では、これら両方の手法を示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html#class-overview&#34; name=&#34;class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_time::c_local_adjustor&amp;lt;ptime&amp;gt;::utc_to_local(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間帯の設定および C API に基づいた UTC 時刻から、ローカルマシンの時刻を計算する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;typedef boost::date_time::c_local_adjustor&amp;lt;ptime&amp;gt; local_adj;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t10(date(2002,Jan,1), hours(7));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t11 = local_adj::utc_to_local(t10);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_time::local_adjustor&amp;lt;ptime, utc_offset, dst_rules&amp;gt;::utc_to_local(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 時間に基づいた夏時間規則とUTCオフセットから、ローカルマシンの時刻を計算する&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_utc_conversion.cpp.html&#34;&gt;例を参照&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_time::local_adjustor&amp;lt;ptime, utc_offset, dst_rules&amp;gt;::local_to_utc(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;夏時間規則とUTCオフセットに基づいて、UTC時刻を計算する&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_utc_conversion.cpp.html&#34;&gt;例を参照&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Posix Time System Documentation -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/posix_time.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Posix Time System Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Temporal Types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html&#34;&gt;Class ptime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_duration.html&#34;&gt;Class time_duration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/class_time_period.html&#34;&gt;Class time_period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;Time Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_time_adjust.html&#34;&gt;UTC / Local Time Adjustments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ナノ秒分解能および安定した計算特性を備えた、調整されていない時間システムを定義する。 この時間システムは、時間表現における日付部分の実装にグレゴリオ暦を使用する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html#usage-examples&#34; name=&#34;usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_math.cpp.html&#34;&gt;Time Math&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime&lt;/code&gt; と &lt;code&gt;time_durations&lt;/code&gt; を使ったいくつかの単純な計算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_hours.cpp.html&#34;&gt;Print Hours&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_iterator&lt;/code&gt; を使用してクロックから時刻を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/local_utc_conversion.cpp.html&#34;&gt;Local to UTC Conversion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;地域時間からUTC時間への夏時間規則を含んだ変換について、2つの異なる方法を実証する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_periods.cpp.html&#34;&gt;Time periods&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;期間(time periods)の交差および表示の簡単な例&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/references.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下に挙げるのは、日付・時間ドメインに関するリファレンスと情報元である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#date-references&#34;&gt;Date Calendar References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#time-reference&#34;&gt;Time References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#other-cpp-libs&#34;&gt;Other C/C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#java-libs&#34;&gt;JAVA Date-Time Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#script-lang-libs&#34;&gt;Scriping Language Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#related-commerical-fanciful-pages&#34;&gt;関連する商業的かつ想像力に富んだページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#resolution-precision-accuracy&#34;&gt;分解能, 精度, 正確度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#date-references&#34; name=&#34;date-references&#34;&gt;Date Calendar References&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ISO 8601 日付・時間の標準 -- &lt;a href=&#34;http://www.cl.cam.ac.uk/~mgk25/iso-time.html&#34; target=&#34;_blank&#34;&gt;Markus Kuhnによるまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;書籍『&lt;a href=&#34;http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/&#34; target=&#34;_blank&#34;&gt;Calendrical Calculations&lt;/a&gt;』 著者 Reingold &amp;amp; Dershowitz&lt;/li&gt;
&lt;li&gt;Calendar FAQ by Claus T?dering [&lt;a href=&#34;http://www.pauahtun.org/CalendarFAQ/cal/calendar24.html&#34; target=&#34;_blank&#34;&gt;html&lt;/a&gt;][&lt;a href=&#34;http://www.pauahtun.org/CalendarFAQ/cal/calendar24.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Calendar zone &lt;a href=&#34;http://www.calendarzone.com/&#34; target=&#34;_blank&#34;&gt;http://www.calendarzone.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/xmlschema-2/#dateTime&#34; target=&#34;_blank&#34;&gt;date timeのXMLスキーマ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Will Lindenの&lt;a href=&#34;http://www.ecben.net/calendar.shtml&#34; target=&#34;_blank&#34;&gt;Calendar Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www21.brinkster.com/lonwolve/melt/index.htm&#34; target=&#34;_blank&#34;&gt;XMAS calendar melt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#time-reference&#34; name=&#34;time-reference&#34;&gt;Time References&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Martin Folwerの時間パターン&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aw.com/cseng/titles/0-201-89542-0/apsupp/events2-1.html&#34; target=&#34;_blank&#34;&gt;Recurring Events for Calendars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patterns for things that &lt;a href=&#34;http://martinfowler.com/ap2/timeNarrative.html&#34; target=&#34;_blank&#34;&gt;Change with time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アメリカ国立研究所の標準とテクノロジー &lt;a href=&#34;http://nist.time.gov/exhibits.html&#34; target=&#34;_blank&#34;&gt;Time Exhibits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ntp.org/&#34; target=&#34;_blank&#34;&gt;NTP.org&lt;/a&gt;のネットワーク時間プロトコル&lt;/li&gt;
&lt;li&gt;US Navy &lt;a href=&#34;http://tycho.usno.navy.mil/systime.html&#34; target=&#34;_blank&#34;&gt;Systems of Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bipm.fr/enus/5_Scientific/c_time/time_1.html&#34; target=&#34;_blank&#34;&gt;国際原子時(International Atomic Time)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://beta.zyprexia.com/docs/pgsql/user/datatype1130.htm&#34; target=&#34;_blank&#34;&gt;Date-Time type PostgreSQL&lt;/a&gt; ユーザーガイド&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#other-cpp-libs&#34; name=&#34;other-cpp-libs&#34;&gt;Other C/C++ Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cplusplus.com/ref/ctime/index.html&#34; target=&#34;_blank&#34;&gt;ctime C&lt;/a&gt; Standard library reference at cplusplus.com&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cl.cam.ac.uk/~mgk25/c-time/&#34; target=&#34;_blank&#34;&gt;XTime C extension&lt;/a&gt; proposal&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://david.tribble.com/text/c0xcalendar.html#author-info&#34; target=&#34;_blank&#34;&gt;Another C library extension&lt;/a&gt; proposal by David Tribble&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cr.yp.to/libtai.html&#34; target=&#34;_blank&#34;&gt;libTAI&lt;/a&gt; is a C based time library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twinsun.com/tz/tz-link.htm&#34; target=&#34;_blank&#34;&gt;Time Zone&lt;/a&gt; Database C library for managing timezones/places&lt;/li&gt;
&lt;li&gt;International Components for Unicode by IBM (open source)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateCalendar.html&#34; target=&#34;_blank&#34;&gt;Calendar Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateTime.html&#34; target=&#34;_blank&#34;&gt;Date Time Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/dateTimezone.html&#34; target=&#34;_blank&#34;&gt;Time Zone Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oss.software.ibm.com/icu/userguide/formatDateTime.html&#34; target=&#34;_blank&#34;&gt;Date-Time Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ringside.arc.nasa.gov/www/toolkits/julian_13/aareadme.html&#34; target=&#34;_blank&#34;&gt;Julian Library in C by Mark Showalter -- NASA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#java-libs&#34; name=&#34;java-libs&#34;&gt;JAVA Date &amp;amp; Time Library Quick Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.util.Calendar.html#_top_&#34; target=&#34;_blank&#34;&gt;Calendar class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.util.GregorianCalendar.html#_top_&#34; target=&#34;_blank&#34;&gt;Gregorian calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.util.Date.html&#34; target=&#34;_blank&#34;&gt;Date class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.sql.Time.html#_top_&#34; target=&#34;_blank&#34;&gt;sql.time class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.text.DateFormatSymbols.html#_top_&#34; target=&#34;_blank&#34;&gt;Date format symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.text.DateFormat.html#_top_&#34; target=&#34;_blank&#34;&gt;Date format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.text.SimpleDateFormat.html#_top_&#34; target=&#34;_blank&#34;&gt;Simple Date Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/products/jdk/1.1/docs/api/java.util.SimpleTimeZone.html#_top_&#34; target=&#34;_blank&#34;&gt;Simple Time Zone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#script-lang-libs&#34; name=&#34;script-lang-libs&#34;&gt;Scripting Language Libraries&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A python date library &lt;a href=&#34;http://www.lemburg.com/files/python/mxDateTime.html&#34; target=&#34;_blank&#34;&gt;MX Date Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl date-time&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/Catalog/Data_and_Data_Type/Date/&#34; target=&#34;_blank&#34;&gt;Date-Time packages at CPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/doc/TWEGNER/Date-Calc-4.3-bin56Mac/Calc.pm&#34; target=&#34;_blank&#34;&gt;Date::Calc&lt;/a&gt; at CPAN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://search.cpan.org/doc/MORTY/DateConvert-0.16/Convert.pm&#34; target=&#34;_blank&#34;&gt;Date::Convert&lt;/a&gt; calendar conversions at CPAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A PHP library &lt;a href=&#34;http://vlib.activefish.com/docs/vlibDate.html&#34; target=&#34;_blank&#34;&gt;Vlib Date Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#related-commerical-fanciful-pages&#34; name=&#34;related-commerical-fanciful-pages&#34;&gt;関連する商業的かつ想像力に富んだページ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.leapsecond.com/java/gpsclock.htm&#34; target=&#34;_blank&#34;&gt;Leapsecond.com time&lt;/a&gt; page&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.worldtimeserver.com/&#34; target=&#34;_blank&#34;&gt;World Time Server / TZ database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.longnow.org/10kclock/clock.htm&#34; target=&#34;_blank&#34;&gt;10000 year clock&lt;/a&gt; at Long Now Foundation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.timezonesforpcs.com/&#34; target=&#34;_blank&#34;&gt;Timezones for PCs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/references.html#resolution-precision-accuracy&#34; name=&#34;resolution-precision-accuracy&#34;&gt;Resolution, Precision, and Accuracy&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Definitions with pictures from &lt;a href=&#34;http://metrologyforum.tm.agilent.com/specs.shtml&#34; target=&#34;_blank&#34;&gt;Agilent Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another set of pictures from &lt;a href=&#34;http://www.teamlabs.com/catalog/performance.asp&#34; target=&#34;_blank&#34;&gt;Team Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Definitions from &lt;a href=&#34;http://www.solent.ac.uk/hydrography/notes/errorthe/accuracy.htm&#34; target=&#34;_blank&#34;&gt;Southampton Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Definitions from &lt;a href=&#34;http://www.newport.com/Support/Tutorials/OptoMech/om4a.asp&#34; target=&#34;_blank&#34;&gt;Newport Corporation&lt;/a&gt; in the context of instrumentation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2014 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/faithandbrave@gmail.com&#34;&gt;Akira Takahashi&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::time iterators -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/date_time/time_iterators.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;posix_time::time iterators&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Time Iterators&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;時間イテレータは、時間単位で反復するための標準的なメカニズムを提供する。 時間イテレータは(STLの)&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;入力イテレータ&lt;/a&gt;のモデルであり、時間の集合の代入に用いることができる。 次の例は、15分間隔で反復する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time;
date &lt;span style=&#34;color: #0000FF&#34;&gt;d&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2000&lt;/span&gt;,Jan,&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
ptime &lt;span style=&#34;color: #0000FF&#34;&gt;start&lt;/span&gt;(d);&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//2000-Jan-20 00:00:00&lt;/span&gt;
time_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;titr&lt;/span&gt;(start,minutes(&lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//iterate on 15 minute intervals&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//produces 00:00:00, 00:15:00, 00:30:00, 00:45:00&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (; titr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; ptime(d,hour(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;titr) {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_simple_string(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;titr) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/print_hours.cpp.html&#34;&gt;print hours&lt;/a&gt; の例は、1時間増加させ、その日の残りを繰り返す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html#class-overview&#34; name=&#34;class-overview&#34;&gt;Class Overview&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Construction Parameters&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime start_time, time_duration increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された期間(&lt;code&gt;time_duration&lt;/code&gt;)を増分として反復する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/date_time/sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/disjoint_sets/bibliography.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#tarjan83&#34; nam=&#34;tarjan83&#34;&gt;1&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;R. E. Tarjan. &lt;/li&gt;
&lt;li&gt;Data Structures and Network Algorithms. &lt;/li&gt;
&lt;li&gt;Society for Industrial and Applied Mathematics, 1983.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/bibliography.html#clr90&#34; name=&#34;clr90&#34;&gt;2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;T. Cormen, C. Leiserson, and R. Rivest. &lt;/li&gt;
&lt;li&gt;Introduction to Algorithms. &lt;/li&gt;
&lt;li&gt;McGraw-Hill, 1990.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Univ.of Notre Dame (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/disjoint_sets/mailto:jsiek@lsc.nd.edu&#34;&gt;jsiek@lsc.nd.edu&lt;/a&gt;)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>The Boost Format library -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/format/format.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/format/format.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;The Boost Format library&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;boost/format.hpp&amp;gt;&lt;/code&gt; &lt;code&gt;format&lt;/code&gt;クラスは &lt;code&gt;printf&lt;/code&gt; に似た、ユーザ定義型も扱える型安全な書式化処理を提供する。 &lt;/p&gt;
&lt;p&gt;(このライブラリは他の &lt;code&gt;boost&lt;/code&gt; ライブラリに依存しない)&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#synopsis&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#how-it-works&#34;&gt;どのように作用するか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#examples&#34;&gt;コード例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#sample-files&#34;&gt;サンプルファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#syntax&#34;&gt;構文&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#printf-format-specifications&#34;&gt;printfフォーマット仕様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#new-format-specifications&#34;&gt;新たなフォーマット仕様&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#differences-of-behavior-vs-printf&#34;&gt;printfとの振る舞いの違い&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#user-defined-types-output&#34;&gt;ユーザー定義型の出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#manipulators-and-the-internal-stream-state&#34;&gt;マニピュレータと、内部的なストリーム状態&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#alternatives&#34;&gt;代替手段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#exceptions&#34;&gt;例外&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#extract&#34;&gt;抜粋&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#rationale&#34;&gt;設計原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#credits&#34;&gt;クレジット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#synopsis&#34; name=&#34;synopsis&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;format&lt;/code&gt; オブジェクトは書式文字列から構築され、その後 &lt;code&gt;operator%&lt;/code&gt; を繰り返し呼び出されることで引数を与えられる。 &lt;/p&gt;
&lt;p&gt;それぞれの引数は文字列に変換され、書式文字列に従って順に一つの文字列へと結合される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;writing %1%,  x=%2% : %3%-th try&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;toto&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;40.23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;; 
     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;writing toto,  x=40.230 : 50-th try&#34;と表示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#how-it-works&#34; name=&#34;how-it-works&#34;&gt;どのように作用するか&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1.書式文字列 &lt;code&gt;s&lt;/code&gt; を伴って &lt;code&gt;format(s)&lt;/code&gt; を呼び出すと、あるオブジェクトが構築される。このオブジェクトは、書式文字列を構文解析してすべての命令を探し、次のステップのために内部構造を準備する。
2.そして、すぐに&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;77&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;

のようにするか、あるいは後で、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;format &lt;span style=&#34;color: #0000FF&#34;&gt;fmter&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;);
fmter &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;36&lt;/span&gt;; fmter &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;77&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

とすることで、フォーマッタに変数を食わせることができる。 &lt;/p&gt;
&lt;p&gt;変数は内部のストリームにダンプされる。ストリームの状態は、与えられた書式文字列の書式化オプション(あれば)によってセットされる。 &lt;code&gt;format&lt;/code&gt; オブジェクトは最後のステップのための結果文字列を保持する。&lt;/p&gt;
&lt;p&gt;3.すべての引数を与えてしまえば、その &lt;code&gt;format&lt;/code&gt; オブジェクトをストリームにダンプしたり、メンバ関数 &lt;code&gt;str()&lt;/code&gt; か名前空間 &lt;code&gt;boost::io&lt;/code&gt; にある &lt;code&gt;str(const format&amp;amp;)&lt;/code&gt; 関数で文字列を取り出すことができる。結果の文字列は、別の引数が与えられて再初期化されるまで、 &lt;code&gt;format&lt;/code&gt; オブジェクトの中にアクセス可能な状態で残る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先ほど作って引数を与えた fmter の結果を表示:&lt;/span&gt;
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fmter ;  

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 結果の文字列を取り出せる:&lt;/span&gt;
string s  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fmter.str();

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 何度でも:&lt;/span&gt;
s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fmter.str( );

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// すべてのステップを一度に行うこともできる:&lt;/span&gt;
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;77&lt;/span&gt;; 
string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;str( format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;77&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;

4.ステップ３の後で &lt;code&gt;format&lt;/code&gt; オブジェクトを再利用し、ステップ２からやり直すこともできる: &lt;code&gt;fmter % 18 % 39;&lt;/code&gt;
新しい変数を同じ書式文字列で書式化する際は、こうすることでステップ１で生じる高価な処理を節約できる。&lt;/p&gt;
&lt;p&gt;結局のところ、 &lt;code&gt;format&lt;/code&gt; クラスは、書式文字列(&lt;code&gt;printf&lt;/code&gt; に似た命令を用いる)を内部のストリームへの操作に翻訳する。そして最終的に、その書式化の結果を文字列として、あるいは直接に出力ストリームへと返す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#examples&#34; name=&#34;examples&#34;&gt;コード例&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;group;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;str;
&lt;/pre&gt;&lt;/div&gt;

- 並べ替えありの単純な出力:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%1% %2% %3% %2% %1% &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;11&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;22&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;333&#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;単純な&#39;形式。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

表示はこうなる : &lt;code&gt;&#34;11 22 333 22 11 \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX 版 &lt;code&gt;printf&lt;/code&gt; の位置指定命令を用いた、より精細な書式化:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(x,y) = (%1$+5d,%2$+5d) &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;35&lt;/span&gt;;     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// POSIX版Printf形式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

表示はこうなる : &lt;code&gt;&#34;(x,y) = ( -23, +35) \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並べ替えのない、古典的な &lt;code&gt;printf&lt;/code&gt; の命令:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;writing %s,  x=%s : %d-th step &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;toto&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;40.23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;

表示はこうなる : &lt;code&gt;&#34;writing toto, x=40.23 : 50-th step \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同じことを表現するにもいろいろな方法がある:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(x,y) = (%+5d,%+5d) &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;35&lt;/span&gt;;
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(x,y) = (%|+5|,%|+5|) &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;35&lt;/span&gt;;

cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(x,y) = (%1$+5d,%2$+5d) &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;35&lt;/span&gt;;
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(x,y) = (%|1$+5|,%|2$+5|) &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-23&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;35&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

表示はどれも : &lt;code&gt;&#34;(x,y) = ( -23, +35) \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータによる書式文字列の修飾:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;format &lt;span style=&#34;color: #0000FF&#34;&gt;fmter&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;_%1$+5d_ %1$d &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;);

format &lt;span style=&#34;color: #0000FF&#34;&gt;fmter2&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;_%1%_ %1% &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;);
fmter2.modify_item(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, group(showpos, setw(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)) ); 

cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fmter &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt; ;
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fmter2 &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt; ;
&lt;/pre&gt;&lt;/div&gt;

どちらも同じように表示する : &lt;code&gt;&#34;_ +101_ 101 \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数を伴うマニピュレータ:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;_%1%_ %1% &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; group(showpos, setw(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

マニピュレータは、 &lt;code&gt;%1%&lt;/code&gt; が現れるたびに適用されるので、出力はこうなる : &lt;code&gt;&#34;_ +101_ +101 \n&#34;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しいフォーマット機能「絶対桁送り(absolute tabulations)」はループの中で使うと便利である。これはあるフィールドを各行の同じ位置に出力する機能で、たとえ直前の引数の幅が大きく変化したとしても、同じ位置に出力することを保証してくれる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; names.size(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%1%, %2%, %|40t|%3%&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; names[i] &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; surname[i] &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; tel[i];
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;names&lt;/code&gt; 、 &lt;code&gt;surnames&lt;/code&gt; 、そして &lt;code&gt;tel&lt;/code&gt; などのベクタ(sample_new_features.cpp を参照)は次のように表示される :&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Marc-Françis Michel, Durand,           +33 (0) 123 456 789
Jean, de Lattre de Tassigny,           +33 (0) 987 654 321
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#sample-files&#34; name=&#34;sample-files&#34;&gt;サンプルファイル&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/example/sample_formats.cpp.html&#34;&gt;sample_formats.cpp&lt;/a&gt; は &lt;code&gt;format&lt;/code&gt; の簡単な使い方をデモする。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/example/sample_new_features.cpp.html&#34;&gt;sample_new_features.cpp&lt;/a&gt; は、単純な位置指定命令、中寄せ、そして「桁送り」など、 &lt;code&gt;printf&lt;/code&gt; の構文に追加された書式化機能のいくつかを説明する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/example/sample_advanced.cpp.html&#34;&gt;sample_advanced.cpp&lt;/a&gt; は、 &lt;code&gt;format&lt;/code&gt; オブジェクトの 再利用や修飾といった、さらに進んだ機能の使い方をデモする。&lt;/p&gt;
&lt;p&gt;そして &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/example/sample_userType.cpp.html&#34;&gt;sample_userType.cpp&lt;/a&gt; はユーザ定義型に対する &lt;code&gt;format&lt;/code&gt; の振る舞いを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#syntax&#34; name=&#34;syntax&#34;&gt;構文&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format( format&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;string ) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; arg1 &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; arg2 &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ... &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; argN
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;format-string&lt;/strong&gt; は特殊な命令を含むテキストである。これらの命令は、与えられた引数の書式化結果の文字列によって置換される。 &lt;/p&gt;
&lt;p&gt;C/C++ の世界におけるレガシーな構文は &lt;code&gt;printf&lt;/code&gt; で使われているものである。そのため &lt;code&gt;format&lt;/code&gt; は &lt;code&gt;printf&lt;/code&gt; の書式文字列をそのまま利用でき、同じ結果を生成する。(ほとんどの場合において。詳細は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#differences-of-behavior-vs-printf&#34;&gt;&lt;code&gt;printf&lt;/code&gt;との違い&lt;/a&gt; を見よ) &lt;/p&gt;
&lt;p&gt;この中核となる構文は、新機能を許すだけでなく、 C++ のストリームの文脈に適合するために拡張された。そのため、 &lt;code&gt;format&lt;/code&gt; は書式文字列のさまざまな形式の命令を受け付ける :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;レガシーな &lt;code&gt;printf&lt;/code&gt; の書式文字列 : &lt;code&gt;%spec&lt;/code&gt;　ここで &lt;strong&gt;spec&lt;/strong&gt; は &lt;code&gt;printf&lt;/code&gt; の書式指定子である &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;spec&lt;/strong&gt; は幅、アライメント、数値を書式化する際の基数、その他の特殊なフラグなどの書式化オプションを渡す。 しかし &lt;code&gt;printf&lt;/code&gt; の古典的な型指定フラグは &lt;code&gt;format&lt;/code&gt; ではより弱い意味しか持たない。 &lt;code&gt;format&lt;/code&gt; は内部ストリームと書式化パラメータのどちらかまたは両方に適当なフラグをセットするだけで、対応する引数が指定した型であるかどうかは問わない。 &lt;/li&gt;
&lt;li&gt;例 : &lt;code&gt;2$x&lt;/code&gt; という指定子は、 &lt;code&gt;printf&lt;/code&gt; にとっては「整数である二つ目の引数を16進数で出力する」という意味であるが、 &lt;code&gt;format&lt;/code&gt; においては「二つ目の引数を、ストリームの &lt;code&gt;basefield&lt;/code&gt; フラグを &lt;code&gt;hex&lt;/code&gt; にセットして出力する」という意味でしかない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%|spec|&lt;/code&gt; ここで &lt;strong&gt;spec&lt;/strong&gt; は &lt;code&gt;printf&lt;/code&gt; の書式指定子である。 &lt;ul&gt;
&lt;li&gt;括弧[訳注：米英語では、二つの記号の組み合わせで何かを囲むものはすべてbracket(括弧)と呼び、ここでは縦棒 &lt;code&gt;|&lt;/code&gt; 二つを括弧と呼んでいる]は書式文字列の可読性を改善するが、本来は &lt;strong&gt;spec&lt;/strong&gt; の型変換文字を省略可能にするために導入された。この情報は C++ の変数には不要だが、 &lt;code&gt;printf&lt;/code&gt; の構文をそのまま用いる場合には、書式指定子の終端を決定するために必要だというだけの理由で、常に型変換文字を与える必要がある。 &lt;/li&gt;
&lt;li&gt;例 : &lt;code&gt;&#34;%|-5|&#34;&lt;/code&gt; は 次の変数を幅を 5 、左寄せにフォーマットする。これは &lt;code&gt;printf&lt;/code&gt; の以下の命令と同じものである : &lt;code&gt;&#34;%-5g&#34;&lt;/code&gt;, &lt;code&gt;&#34;%-5f&#34;&lt;/code&gt;, &lt;code&gt;&#34;%-5s&#34;&lt;/code&gt; ..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%N%&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;この単純な位置指定の表記は、 N 番目の引数を書式化オプションなしでフォーマットするよう要求するものである。 &lt;/li&gt;
&lt;li&gt;(これは &lt;code&gt;printf&lt;/code&gt; の位置指定命令(&lt;code&gt;&#34;%N$s&#34;&lt;/code&gt; のような)の短縮形に過ぎないが、ずっと読みやすく、また「型変換指定」文字を用いないですむというご利益がある)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; の標準の書式指定子に加えて、中寄せのような新しい機能が実装されている。詳細は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#new-format-specifications&#34;&gt;new format specification&lt;/a&gt; を参照。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#printf-format-specifications&#34; name=&#34;printf-format-specifications&#34;&gt;printfフォーマット仕様&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Boost.Format でサポートされる &lt;code&gt;printf&lt;/code&gt; の書式指定子は、引数の位置指定をサポートしない標準 C の &lt;code&gt;printf&lt;/code&gt; よりも、むしろ Unix98 &lt;a href=&#34;http://www.opengroup.org/onlinepubs/7908799/xsh/fprintf.html&#34; target=&#34;_blank&#34;&gt;Open-group printf&lt;/a&gt; の構文に従っている。 (両者の間では共通のフラグは同じ意味を持つので、誰も頭痛に悩まされることはない) &lt;/p&gt;
&lt;p&gt;なお、一つの書式文字列に位置指定付きの書式指定子(例．&lt;code&gt;%3$+d&lt;/code&gt;)と位置指定なしのもの(例．&lt;code&gt;%+d&lt;/code&gt;)を混ぜて使用するのはエラーである。 
Open-group の仕様では同じ引数を複数回参照すること(例．&lt;code&gt;&#34;%1$d %1$d&#34;&lt;/code&gt;)は未定義動作であるが、 Boost.Format では各引数を何度でも参照できる。ただ一つの制約は、書式文字列に現れる最大の引数の数が P であるとき、必ず P 個の引数を期待することである。(例．&lt;code&gt;&#34;%1$d %10$d&#34;&lt;/code&gt; ならば P == 10) &lt;/p&gt;
&lt;p&gt;引数の数が多すぎても少なすぎても例外が起こる。 (そうでないようにセットされていなければ。 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#exceptions&#34;&gt;exceptions&lt;/a&gt; を参照)&lt;/p&gt;
&lt;p&gt;書式指定子 &lt;strong&gt;spec&lt;/strong&gt; は次の形式を持つ : [ &lt;strong&gt;N&lt;/strong&gt;&lt;code&gt;$&lt;/code&gt; ] [ &lt;strong&gt;flags&lt;/strong&gt; ] [ &lt;strong&gt;width&lt;/strong&gt; ] [ . &lt;strong&gt;precision&lt;/strong&gt; ] &lt;strong&gt;type-char&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大括弧で囲われたフィールドは省略可能である。 各フィールドは以下のリストのように説明される :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;code&gt;$&lt;/code&gt; (省略可能なフィールド)は、その書式指定子が N 番目の引数に適用されると指定する。(これは &lt;strong&gt;位置指定書式指定子&lt;/strong&gt; と呼ばれる) &lt;/li&gt;
&lt;li&gt;これが与えられない場合、引数は前から順番に解釈される。(ただし、その後に引数番号付きの書式指定子を与えるのはエラーである)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt; は以下の任意のシーケンスである :&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;内部ストリームへの作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;-&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左寄せ&lt;/td&gt;
&lt;td&gt;N/A (後で文字列に適用される)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;=&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;中寄せ&lt;/td&gt;
&lt;td&gt;N/A (後で文字列に適用される)&lt;br /&gt; &lt;code&gt;printf&lt;/code&gt; には存在しない(追加機能)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;+&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正の数であっても符号を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;showpos&lt;/code&gt; をセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;#&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基数および小数点を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;showbase&lt;/code&gt; と &lt;code&gt;showpoint&lt;/code&gt; をセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0 で穴埋めする(符号および基数表示の後に挿入) 左寄せでない場合、 &lt;code&gt;setfill(&#39;0&#39;)&lt;/code&gt; を呼び出し &lt;code&gt;internal&lt;/code&gt; をセットする&lt;br /&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#user-defined-types-output&#34;&gt;ユーザ定義型&lt;/a&gt;を扱うためにストリーム変換の後に追加の動作を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39; &#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列が &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; から始まらない場合、変換された文字の前にスペースを挿入&lt;/td&gt;
&lt;td&gt;N/A (後で文字列に適用される) &lt;br /&gt; &lt;code&gt;printf&lt;/code&gt; のものとは挙動が異なる : 内部のアライメントには影響されない&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;width&lt;/strong&gt; は変換の結果文字列に対する最小の幅を指定する。 必要ならば、文字列はアライメントにあわせてパディングされ、文字で埋める。この文字はマニピュレータ経由でストリームにセットされたものか、あるいは書式文字列で指定された文字(例． &lt;code&gt;&#39;0&#39;&lt;/code&gt;, &lt;code&gt;&#39;-&#39;&lt;/code&gt;, ... などのフラグ)である。 &lt;ul&gt;
&lt;li&gt;この幅は変換ストリームにセットされるのではないことに注意してほしい。 ユーザ定義型の出力をサポートする(これはいくつかのメンバに &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; を何度も呼び出すことになりうる)ため、幅の取り扱いはすべての引数オブジェクトのストリーム変換の後に、 &lt;code&gt;format&lt;/code&gt; クラスのコードの中で行われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;precision&lt;/strong&gt; (小数点の後に続く)はストリームの精度をセットする。&lt;ul&gt;
&lt;li&gt;浮動少数点型の数値を出力する場合、&lt;ul&gt;
&lt;li&gt;固定小数点表示モードまたは指数表示モードでは、小数点より後ろの数字の最大文字数を設定する。&lt;/li&gt;
&lt;li&gt;デフォルトモード(%g のような&#39;ジェネラルモード&#39;)では、全体の数字の最大文字数を設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type-char&lt;/strong&gt; が &lt;code&gt;s&lt;/code&gt; または &lt;code&gt;S&lt;/code&gt; の場合は別の意味を持つ : 変換文字列は最初の &lt;strong&gt;precision&lt;/strong&gt; 文字で切り詰められる。 (&lt;strong&gt;width&lt;/strong&gt; によるパディングは、この切り詰めの後で施される。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type-char&lt;/strong&gt; 。これは、対象になっている引数が指定した型のいずれかであることを強要しない。その型指定子に関連付けられたフラグをセットするだけである。&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型変換指定文字&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;ストリームへの作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt; または &lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;１６進数で出力&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hex&lt;/code&gt; をセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;８進数で出力&lt;/td&gt;
&lt;td&gt;&lt;code&gt;oct&lt;/code&gt; をセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の指数表記&lt;/td&gt;
&lt;td&gt;&lt;code&gt;floatfield&lt;/code&gt; ビットを &lt;code&gt;scientific&lt;/code&gt; にセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の固定小数点表記   &lt;code&gt;floatfield&lt;/code&gt; ビットを &lt;code&gt;fixed&lt;/code&gt; にセットする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一般的な(デフォルトの)浮動小数点表記&lt;/td&gt;
&lt;td&gt;すべての &lt;code&gt;floatfield&lt;/code&gt; ビットを&lt;strong&gt;外す&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt; または &lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;それぞれの小文字と同じように作用。ただし数値の出力に際して大文字を用いる。(指数、１６進数、..)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;x&#39;&lt;/code&gt;, &lt;code&gt;&#39;e&#39;&lt;/code&gt;, または &lt;code&gt;&#39;g&#39;&lt;/code&gt; と同じ作用に&lt;strong&gt;加え&lt;/strong&gt;、 &lt;code&gt;uppercase&lt;/code&gt; をセットする。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt; または &lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;１０進数で出力&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basefield&lt;/code&gt; ビットを &lt;code&gt;dec&lt;/code&gt; にセットする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt; または &lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を出力&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;precision&lt;/strong&gt; 指定子が外され、値は後の&#39;切り詰め&#39;のために内部フィールドへ送られる。 (上記の &lt;strong&gt;precision&lt;/strong&gt; の説明を参照)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt; または &lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;１文字出力&lt;/td&gt;
&lt;td&gt;変換文字列の最初の文字のみが用いられる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字&lt;code&gt;%&lt;/code&gt;を表示&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;&#39;n&#39;&lt;/code&gt; 型指定子は、こうした流れに合わないので、無視される(そして対応する引数も)。 &lt;/p&gt;
&lt;p&gt;また、 &lt;code&gt;printf&lt;/code&gt; の &lt;code&gt;&#39;l&#39;&lt;/code&gt;, &lt;code&gt;&#39;L&#39;&lt;/code&gt;, あるいは &lt;code&gt;&#39;h&#39;&lt;/code&gt; 修飾子(ワイド、ロングおよびショート型を示す)もサポートされている(が、内部ストリームには何の作用もしない)。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#new-format-specifications&#34; name=&#34;new-format-specifications&#34;&gt;新たなフォーマット仕様&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前述の表で述べたように、中寄せフラグ &lt;code&gt;&#39;=&#39;&lt;/code&gt; が追加された。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{n&lt;/code&gt;&lt;strong&gt;t&lt;/strong&gt;&lt;code&gt;}&lt;/code&gt; は絶対桁送りを挿入する。ここで n は正の数である。 すなわち &lt;code&gt;format&lt;/code&gt; は、必要であれば、作成済みの文字列の長さが n 文字に届くまで文字で埋め込む。 (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#examples&#34;&gt;examples&lt;/a&gt; を参照)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{n&lt;/code&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;code&gt;X}&lt;/code&gt; も同様に桁送りを挿入するが、埋め込む文字としてストリームの現在の「埋め込み」文字の代わりに &lt;code&gt;X&lt;/code&gt; を用いる。 (デフォルト状態のストリームではスペースを埋め込む)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#differences-of-behavior-vs-printf&#34; name=&#34;differences-of-behavior-vs-printf&#34;&gt;printfとの振る舞いの違い&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt; という二つの変数(組み込み型で、 C の &lt;code&gt;printf&lt;/code&gt; でサポートされているもの)と書式文字列&lt;code&gt;s&lt;/code&gt;があって、 &lt;code&gt;printf&lt;/code&gt; 関数で以下のように使われるとする :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;printf(s, x1, x2);
&lt;/pre&gt;&lt;/div&gt;

ほとんどすべてのケースで、その結果はこの命令と同じものになる :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(s) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; x1 &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; x2;
&lt;/pre&gt;&lt;/div&gt;

しかしいくつかの &lt;code&gt;printf&lt;/code&gt; 書式指定子はストリームの書式化オプションに上手く翻訳されないため、 Boost.Format の &lt;code&gt;printf&lt;/code&gt; エミュレーションには注意すべき僅かな不完全性がある。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format&lt;/code&gt; クラスは、 &lt;code&gt;printf&lt;/code&gt; の書式文字列を常に受け付けてほとんど同じ出力を生成するように、どのような場合でもサポートしないオプションを黙って無視する。 &lt;/p&gt;
&lt;p&gt;以下はそうした相違点のすべての一覧である :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt; および &lt;code&gt;&#39; &#39;&lt;/code&gt; オプション : &lt;code&gt;printf&lt;/code&gt; は数値以外の変換でこれらのオプションを無視するが、 &lt;code&gt;format&lt;/code&gt; は変数のあらゆる型にそれらを適用する。 (そのためこれらのオプションをユーザ定義型に対して用いることができる。例． &lt;code&gt;Rational&lt;/code&gt; クラスなど)&lt;/li&gt;
&lt;li&gt;汎整数型の引数に対する &lt;strong&gt;precision&lt;/strong&gt; は &lt;code&gt;printf&lt;/code&gt; では特別な意味を持つ : &lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf( &#34;(%5.3d)&#34; , 7 ) ;&lt;/code&gt; は &lt;code&gt;«( 007) »&lt;/code&gt; と出力する。 &lt;/li&gt;
&lt;li&gt;一方で &lt;code&gt;format&lt;/code&gt; は、ストリームと同様に、汎整数型への変換に対する精度パラメータを無視する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; の &lt;code&gt;&#39;&lt;/code&gt; オプション (三桁ごとに数値をグループ化する書式)) は &lt;code&gt;format&lt;/code&gt; では無効である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; では、幅または精度がアスタリスク (&lt;code&gt;*&lt;/code&gt;) にセットされている場合、その値を与えられた引数から読み取る。例． &lt;code&gt;printf(&#34;%1$d:%2$.*3$d:%4$.*3$d\n&#34;, hour, min, precision, sec);&lt;/code&gt; [訳注：この例では、 &lt;code&gt;min&lt;/code&gt; と &lt;code&gt;sec&lt;/code&gt; を表示する際の精度は第三引数 &lt;code&gt;precision&lt;/code&gt; の値が用いられる。 &lt;code&gt;precision=3&lt;/code&gt; なら &lt;code&gt;&#34;%.3d&#34;&lt;/code&gt; だし、 &lt;code&gt;precision=10&lt;/code&gt; なら &lt;code&gt;&#34;%.10d&#34;&lt;/code&gt; になる。] &lt;ul&gt;
&lt;li&gt;このクラスは現在のところ、このメカニズムをサポートしない。そのためこのような精度または幅フィールドは構文解析の時点で黙って無視される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に、特殊な &lt;code&gt;&#39;n&#39;&lt;/code&gt; 型指定子 (書式化によって出力された文字数を変数に格納するよう &lt;code&gt;printf&lt;/code&gt; に命じるのに用いる) は &lt;code&gt;format&lt;/code&gt; では無効である。&lt;/p&gt;
&lt;p&gt;そのためこの型指定子を含む書式文字列は &lt;code&gt;printf&lt;/code&gt; でも &lt;code&gt;format&lt;/code&gt; でも同じ変換文字列を生成する。 &lt;code&gt;printf&lt;/code&gt; と &lt;code&gt;format&lt;/code&gt; で書式化された文字列に違いは生じない。 &lt;/p&gt;
&lt;p&gt;Boost.Format で書式化された文字数をを得るには以下のようにする :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;format &lt;span style=&#34;color: #0000FF&#34;&gt;formatter&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%+5d&#34;&lt;/span&gt;);
cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; formatter &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; x;
&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; formatter.str().size();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#user-defined-types-output&#34; name=&#34;user-defined-types-output&#34;&gt;ユーザー定義型の出力&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ストリーム状態の修飾に翻訳されたすべてのフラグは、ユーザ定義型にも再帰的に作用する。 ( フラグはアクティブなまま残るので、 ユーザ定義クラスによって呼ばれる各々の &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 演算に対しても、期待するオプションが渡される) &lt;/p&gt;
&lt;p&gt;例．妥当なクラス &lt;code&gt;Rational&lt;/code&gt; なら次のようになる :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Rational &lt;span style=&#34;color: #0000FF&#34;&gt;ratio&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
cerr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%#x &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ratio;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; &#34;0x10/0x9 \n&#34;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

その他の書式化オプションでは話は異なる。例えば、幅の設定はオブジェクトによって生成される最終出力に適用され、内部の各々の出力には適用されない。これは都合のいい話である :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cerr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%-8d&#34;&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ratio;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; &#34;16/9    &#34; であって、 &#34;16      /9       &#34; ではない&lt;/span&gt;
cerr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%=8d&#34;&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ratio;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; &#34;  16/9  &#34; であって、 &#34;   16   /    9   &#34; ではない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

しかし、 &lt;code&gt;0&lt;/code&gt; や &lt;code&gt;&#39; &#39;&lt;/code&gt; オプションにも同様に働くため、不自然なことになってしまう。(意地の悪いことに、 &lt;code&gt;&#39;+&#39;&lt;/code&gt; が &lt;code&gt;showpos&lt;/code&gt; によってストリームの状態へと直接翻訳できるのに対して、 &lt;code&gt;printf&lt;/code&gt; のゼロやスペースに当たるオプションはストリームには存在しない) :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cerr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%+08d &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ratio;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; &#34;+00016/9&#34;&lt;/span&gt;
cerr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;% 08d &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; ratio;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; &#34;000 16/9&#34;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#manipulators-and-the-internal-stream-state&#34; name=&#34;manipulators-and-the-internal-stream-state&#34;&gt;マニピュレータと、内部的なストリーム状態&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;format&lt;/code&gt; の内部ストリームの状態は、引数を出力する直前に保存され、直後に復帰される。そのため、修飾子の影響は後まで引きづられずに、適用される引数にだけ作用する。 &lt;/p&gt;
&lt;p&gt;ストリームのデフォルト状態は標準で述べられているように : 精度 6 、幅 0 、右寄せ、そして１０進数基数である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format&lt;/code&gt; ストリームの内部ストリームの状態は引数と一緒に渡されるマニピュレータによって変えることができる； &lt;code&gt;group&lt;/code&gt; 関数を経由して以下のようにできる :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%1% %2% %1%&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; group(hex, showbase, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;0x28 50 0x28\n&#34; と表示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;group&lt;/code&gt; の内側にある N 個の項目を渡すとき、 Boost.Format はマニピュレータに通常の引数とは異なる処理をする必要がある。そのため、 &lt;code&gt;group&lt;/code&gt; の使用には以下の制限がある :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示されるオブジェクトは &lt;code&gt;group&lt;/code&gt; の最後の項目として渡されなければならない&lt;/li&gt;
&lt;li&gt;先頭の N-1 個の項目はマニピュレータとして扱われるので、出力を生成しても破棄される&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;マニピュレータは、それが現れるごとに、後に続く引数の直前にストリームに渡される。 書式文字列で指定された書式化オプションは、この方法で渡されたストリーム状態修飾子によって上書きされる点に注意して欲しい。 例えば以下のコードで、 &lt;code&gt;hex&lt;/code&gt; マニピュレータは、書式文字列の中で１０進数出力を設定している型指定子 d よりも高い優先度を持つ :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%1$d %2% %1%&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; group(hex, showbase, &lt;span style=&#34;color: #666666&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;; 
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;0x28 50 0x28\n&#34; と表示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#alternatives&#34; name=&#34;alternatives&#34;&gt;代替手段&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;printf&lt;/em&gt; は古典的な代替手段である。型安全でなく、ユーザ定義型に対して拡張可能ではない。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ece.ucdavis.edu/~kenelson/ofrstream.cc&#34; target=&#34;_blank&#34;&gt;ofrstream.cc&lt;/a&gt; Karl Nelson によるデザインはこの &lt;code&gt;format&lt;/code&gt; クラスへのインスピレーションの大きな源となった。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.yahoo.com/group/boost/files/format/&#34; target=&#34;_blank&#34;&gt;format.hpp&lt;/a&gt; Rüiger Loo による。 &lt;code&gt;boost:format&lt;/code&gt; クラスの以前の提案だった。 デザインの簡易さにおいてこのクラスの起源である。最小主義的な &lt;code&gt;&#34;%1 %2&#34;&lt;/code&gt; という構文はこのクラスでも借用している。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gabi-soft.de/code/gabi-lib.tgz&#34; target=&#34;_blank&#34;&gt;James Kanze&#39;s library&lt;/a&gt; は非常に洗練された &lt;code&gt;format&lt;/code&gt; クラス (&lt;code&gt;srcode/Extended/format&lt;/code&gt;) を持っている。 そのデザインは、実際の変換に内部ストリームを用いる点や引数渡しに演算子を用いる点で、このクラスと共通している。 (しかし彼のクラス &lt;code&gt;ofrstream&lt;/code&gt; は &lt;code&gt;operator%&lt;/code&gt; ではなく &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; を用いている)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.yahoo.com/group/boost/files/format3/&#34; target=&#34;_blank&#34;&gt;Karl Nelson&#39;s library&lt;/a&gt; は、 Boost.Format のデザインのための boost メーリングリストの討論において、別の解決法を示すために用意された。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#Exceptions&#34; name=&#34;exceptions&#34;&gt;例外&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Format は &lt;code&gt;format&lt;/code&gt; オブジェクトの使い方にいくつかのルールを強要する。書式文字列は前述の構文に従わなくてはならず、ユーザは最終的な出力までに正しい個数の引数を供給しなければならない。また &lt;code&gt;modify_item&lt;/code&gt; や &lt;code&gt;bind_arg&lt;/code&gt; を用いるなら、項目や引数のインデックスが範囲外を指してはならない。&lt;/p&gt;
&lt;p&gt;ミスが見過ごされたり放置されたりしないように、 &lt;code&gt;format&lt;/code&gt; はいずれかのルールが満たされていないことを検出すると対応する例外を発生する。&lt;/p&gt;
&lt;p&gt;しかしユーザはこの振る舞いを必要に応じて変えることができる。また、どのエラーの型が発生するかを次の関数を用いて選択できる :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;exceptions&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; newexcept); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クエリおよび設定&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; exceptions() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クエリのみ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

ユーザは、以下のアトムを２進演算で結合することで引数 &lt;code&gt;newexcept&lt;/code&gt; を算出できる :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::io::bad_format_string_bit&lt;/code&gt; 書式文字列が適切でなければ例外を発生する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::io::too_few_args_bit&lt;/code&gt; すべての引数が渡される前に結果の文字列を尋ねられたとき、例外を発生する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::io::too_many_args_bit&lt;/code&gt; 渡された引数の数が多すぎれば例外を発生する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::io::out_of_range_bit&lt;/code&gt; &lt;code&gt;modify_item&lt;/code&gt; や項目インデックスを取る他の関数の呼び出し(および引数のインデックス）の際に、ユーザの与えたインデックスが範囲外であれば例外を発生する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::io::all_error_bits&lt;/code&gt; すべてのエラーで例外を発生する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::io::no_error_bits&lt;/code&gt; いずれのエラーでも例外を発生しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、 Boost.Format が引数の個数をチェックしないようにしたければ、適切な例外設定を施した &lt;code&gt;format&lt;/code&gt; オブジェクトを作る特殊なラッパ関数を定義する :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format my_fmt(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; f_string) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io;
    format &lt;span style=&#34;color: #0000FF&#34;&gt;fmter&lt;/span&gt;(f_string);
    fmter.exceptions( all_error_bits &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; ( too_many_args_bit &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; too_few_args_bit )  );
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; fmter;
}
&lt;/pre&gt;&lt;/div&gt;

すると、必要とされるよりも多くの引数を与えても許される(単に無視される) :&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; my_fmt(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34; %1% %2% &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

また、すべての引数が与えられる前に結果を問い合わせると、結果の対応する部分は単に空になる&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; my_fmt(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34; _%2%_ _%1%_ &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; ;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// prints      &#34; __ _1_ \n&#34;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#extract&#34; name=&#34;extract&#34;&gt;抜粋&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_format&lt;/span&gt; 
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string_t&lt;/span&gt;,
  basic_format(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; str);
  basic_format(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; str, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locale &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; loc);
  basic_format(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s);
  basic_format(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;string_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locale &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; loc);

  &lt;span style=&#34;color: #B00040&#34;&gt;string_t&lt;/span&gt; str() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pass arguments through those operators :&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;(T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);  
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// dump buffers to ostream :&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; , basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ); 

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ............  これはただの抜粋である .......&lt;/span&gt;
}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// basic_format&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;          format;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;      wformat;


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; io {
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// free function for ease of use :&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;basic_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT,Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  str(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; basic_format&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT,Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; f) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f.str();
}
} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//namespace io&lt;/span&gt;


} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace boost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#rationale&#34; name=&#34;rationale&#34;&gt;設計原理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このクラスのゴールは、より良い、 C++ 用の、型安全かつ型拡張性のある &lt;code&gt;printf&lt;/code&gt; の等価物が、 ストリームとともに用いられるようにすることである。&lt;/p&gt;
&lt;p&gt;正確には、 &lt;code&gt;format&lt;/code&gt; は以下の機能を実現するようデザインされた :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引数の位置指定のサポート(国際化に必要)&lt;/li&gt;
&lt;li&gt;個数無制限の引数を許す。&lt;/li&gt;
&lt;li&gt;書式化命令の見た目を自然にする。&lt;/li&gt;
&lt;li&gt;書式文字列の構文に加えて、引数の出力を修飾するためのマニピュレータをサポー ト。&lt;/li&gt;
&lt;li&gt;あらゆる型の変数を受け付ける。文字列への実際の変換はストリームに任せる。 これは特にユーザ定義型について、書式化オプションの作用が直観的に自然なものとなるよう考慮したものである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; 互換性の提供、型安全で型拡張性のある文脈においてもできるだけ意味をなすようにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デザインの過程で多くの問題に直面し、いくつかの選択をすることになったが、 中には直観的には正しくないものもあった。しかしいずれのケースにも &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/choices.html&#34;&gt;何らかの意味がある&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/format.html#credits&#34; name=&#34;credits&#34;&gt;クレジット&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Format の著者は Samuel Krempp である。彼は Rüiger Loos と Karl Nelson の両者の &lt;code&gt;format&lt;/code&gt; クラスのアイディアを利用した。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;February 19, 2002&lt;/p&gt;
&lt;p&gt;© Copyright Samuel Krempp 2002. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/format/kn@mm.neweb.ne.jp&#34;&gt;Kent.N&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Header `&lt;boost/function.hpp&gt;` -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/function.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/function.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Header &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/doc/html/function.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/doc/html/function.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダファイル &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt; に含まれるのは、関数オブジェクトのラッパとなるクラステンプレート群である。 Boost.Function の概念はコールバックを一般化したものだ。 Boost.Function は以下の点で関数ポインタと共通の特徴をもっている。 1 つは、何らかの実装によって呼び出される「呼び出しのインタフェース」 (例: 2 つの &lt;code&gt;int&lt;/code&gt; 型引数を取り、 &lt;code&gt;float&lt;/code&gt; を返す関数) を定義していること。もう 1 つは、呼び出される実装をプログラム実行中に変更できる事だ。&lt;/p&gt;
&lt;p&gt;一般に、遅延呼び出しやコールバックを実現するために関数ポインタを使うあらゆる場面で、代わりに Boost.Function を使用できる。そして、それによって呼ばれる側の実装はぐっと自由になる。呼ばれる側にはあらゆる「互換性のある」関数オブジェクト (や関数ポインタ) が指定できる。「互換性がある」とは、 Boost.Function に渡した引数が、対象となる関数オブジェクトの引数に変換できるということだ(訳注：戻り値にも互換性が必要)。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#compatibility-note&#34;&gt;Compatibility Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html&#34;&gt;Reference manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#function-vs-function-pointers&#34;&gt;Boost.Function vs. Function Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#design-rationale&#34;&gt;Design rationale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#compatibility-note&#34; name=&#34;compatibility-note&#34;&gt;Compatibility Note&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function は、インタフェースを小さく、分かりやすくするために、一部が再設計された。昔の Boost.Function にあった、いくつかのめったに (または決して) 使われない機能は推奨されなくなり、近々削除される。以下に推奨されなくなった機能とその理由、それに伴うコードの修正法をリストアップする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::function&lt;/code&gt; クラステンプレートの文法が変更された。以前は&lt;code&gt;boost::function&amp;lt;int, float, double, std::string&amp;gt;&lt;/code&gt;のように書いたが、 &lt;code&gt;boost::function&amp;lt;int (float, double, std::string)&amp;gt;&lt;/code&gt;のような、より自然な書き方になった。戻り値と全ての引数の型が、 1 つの関数型のパラメータに収まる事になったのだ。残りのテンプレートパラメータ (&lt;code&gt;Allocator&lt;/code&gt;など) が、この関数型パラメータの後に続く。
    この変更への対応は、コンパイラに依存する。あなたのコンパイラがテンプレートの部分特殊化版をサポートし、関数型をパース (これは大抵 OK) できるなら、新しい文法を使うようにソースを修正してもいいし (推奨) 、文法が変わっていない&lt;code&gt;functionN&lt;/code&gt; クラスを直接使ってもいい。あなたのコンパイラがテンプレートの部分特殊化版か関数型をサポートしていなければ、&lt;code&gt;functionN&lt;/code&gt;クラスを使う必要がある。&lt;code&gt;functionN&lt;/code&gt;クラスを使うように修正するのは簡単で、クラス名の最後に引数の数を加えるだけだ (例: &lt;code&gt;boost::function&amp;lt;void, int, int&amp;gt;&lt;/code&gt; を &lt;code&gt;boost::function2&amp;lt;void, int, int&amp;gt;&lt;/code&gt; に変更) 。
    &lt;code&gt;boost::function&lt;/code&gt; クラステンプレートの古い文法のサポートはしばらく続くが、いつかは削除される。削除した方がエラーメッセージが分かりやすくなり、リンク互換性が良くなるからだ。&lt;/li&gt;
&lt;li&gt;呼び出しポリシーのテンプレートパラメータ (&lt;code&gt;Policy&lt;/code&gt;) は推奨されておらず、将来削除される。この機能はめったに使われないので、代替となる機能は無い。&lt;/li&gt;
&lt;li&gt;ミックスインのテンプレートパラメータ (&lt;code&gt;Mixin&lt;/code&gt;) は推奨されておらず、将来削除される。この機能はめったに使われないので、代替となる機能は無い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; メソッドは推奨されておらず、将来削除される。代わりに代入演算子を使えば良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい文法に移行し、推奨されない機能を削除するためには、 &lt;code&gt;BOOST_FUNCTION_NO_DEPRECATED&lt;/code&gt; プリプロセサマクロを定義する。このマクロを定義すると、推奨されない全ての機能が使えなくなる。 &lt;code&gt;BOOST_FUNCTION_NO_DEPRECATED&lt;/code&gt; を使ってコンパイルされたプログラムなら、推奨されない機能が削除されても大丈夫だ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#function-vs-function-pointers&#34; name=&#34;function-vs-function-pointers&#34;&gt;Boost.Function vs. Function Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function には関数ポインタに比べていくつかの利点がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Function は、任意の互換性がある関数オブジェクトを格納できる (関数ポインタは全く同じシグネチャを持つ関数しか受け付けない) 。&lt;/li&gt;
&lt;li&gt;Boost.Function は、引数の束縛などの関数オブジェクトを作り出すライブラリと共用できる。&lt;/li&gt;
&lt;li&gt;Boost.Function を使えば、空の関数オブジェクトの呼び出しを、デバッグ時に簡単に検出できる。&lt;/li&gt;
&lt;li&gt;Boost.Function では、それぞれの呼び出しの前後に、ある操作を実行するように指定できる。例えば、同期用の基本命令を関数型の一部にすることができる(訳注：この機能 (呼び出しポリシー) は推奨されておらず、将来削除される)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そしてもちろん、関数ポインタにも Boost.Function に比べていくつかの利点がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタはサイズが小さい (関数ポインタはポインタ 1 つ、 Boost.Function はポインタ 3 つ) 。&lt;/li&gt;
&lt;li&gt;関数ポインタは高速だ (Boost.Function は関数ポインタを通した呼び出しを 2 回する可能性がある) 。&lt;/li&gt;
&lt;li&gt;関数ポインタは C のライブラリと下位互換性がある。&lt;/li&gt;
&lt;li&gt;エラーメッセージが読みやすい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上 2 つのリストは Darin Adler のコメントを編集したものである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#performance&#34; name=&#34;performance&#34;&gt;Performance&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Function object wrapper size&lt;/h3&gt;
&lt;p&gt;関数オブジェクトのラッパのサイズは 2 つの関数ポインタと、 1 つの関数ポインタまたはデータのポインタ (の大きい方) のサイズになる。一般的な 32 ビットプラットフォームでは、 1 つのラッパ当たり 12 バイトになる。さらに、対象となる関数オブジェクトがヒープに割り当てられる。&lt;/p&gt;
&lt;h3&gt;Copying efficiency&lt;/h3&gt;
&lt;p&gt;関数オブジェクトのラッパのコピーによって、格納された関数オブジェクトのコピーのためにメモリ割り当てが発生する。デフォルトのアロケータを、もっと速いカスタムアロケータで置換することもできる。また、関数オブジェクトのラッパが、対象となる関数オブジェクトの「参照」を格納するように指定できる (&lt;code&gt;ref&lt;/code&gt;を使用) 。これは関数オブジェクトのコピーが酷く高価な場合に有効だ。&lt;/p&gt;
&lt;h3&gt;Invocation efficiency&lt;/h3&gt;
&lt;p&gt;適切なインライン化を行うコンパイラならば、関数オブジェクトの呼び出しによって、関数ポインタを通した呼び出しが 1 回行われる。非メンバ関数ポインタの呼び出しならば、その関数ポインタの呼び出しに加えて、もう 1 回の呼び出しが行われる (コンパイラがとても強力な関数をまたいだ分析を行うならば別だが) 。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#portability&#34; name=&#34;portability&#34;&gt;Portability&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Function は、できるだけ移植性を高めるように、できるだけ多くのコンパイラ (C++ 標準準拠度が低いものも含む) をサポートするように設計されている。以下のコンパイラは &lt;code&gt;boost::function&lt;/code&gt;に含まれる全てのテストケースに合格した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 2.95.3&lt;/li&gt;
&lt;li&gt;GCC 3.0&lt;/li&gt;
&lt;li&gt;SGI MIPSpro 7.3.0&lt;/li&gt;
&lt;li&gt;Borland C++ 5.5.1&lt;/li&gt;
&lt;li&gt;Comeau C++ 4.2.45.2&lt;/li&gt;
&lt;li&gt;Metrowerks Codewarrior 6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下のコンパイラでも &lt;code&gt;boost::function&lt;/code&gt;を使えるが、いくつか問題がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 6.0 (service pack 5): アロケータはサポートされない。 &lt;code&gt;boost::function&lt;/code&gt; クラステンプレートにいくつか問題がある ( &lt;code&gt;boost::functionN&lt;/code&gt; の方は動作するようだ) 。&lt;/li&gt;
&lt;li&gt;Intel C++ 5.0: アロケータはサポートされない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あなたのコンパイラが上のリストになければ、 &lt;code&gt;boost::function&lt;/code&gt; ライブラリを使えるかチェックするための小さなテスト群があるので、これを使える。標準に準拠したコンパイラなら、修正無しでコードをコンパイルできるはずだが、問題が起きたらバグレポートを送ってほしい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#design-rationale&#34; name=&#34;design-rationale&#34;&gt;Design rationale&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Combatting virtual function bloat&lt;/h3&gt;
&lt;p&gt;多くのコンパイラでは、仮想関数の使用によって「コードの膨張」が起きがちである。クラスが仮想関数を持つ場合、オブジェクトの型を分類する補助関数を作る必要がある。私達の経験では、多くの &lt;code&gt;boost::function&lt;/code&gt; オブジェクトが使われると、この補助関数が実行可能ファイルのサイズを大きく膨張させる。&lt;/p&gt;
&lt;p&gt;Boost.Function では、仮想関数の代わりに非メンバ関数を使った、代わりの等価なアプローチをとっている。 Boost.Function オブジェクトが関数オブジェクトを呼び出すためには、本質的に 2 つのポインタを持つ必要がある。所有する関数オブジェクトへの &lt;code&gt;void&lt;/code&gt; ポインタと、関数オブジェクトの「呼び出し役」への &lt;code&gt;void&lt;/code&gt; ポインタ (関数ポインタが代入される) だ。 Boost.Function が提供する、引数と戻り値の変換は、この呼び出し役が実行する。第 3 のポインタは「管理者」と呼ばれる非メンバ関数を指す。これは関数オブジェクトのコピーと破棄を扱う。この方法はタイプセーフだ。なぜなら、関数オブジェクトを実際に扱う関数である呼び出し役と管理者は、関数オブジェクトの型を知らされてインスタンス化されるので、入ってくる &lt;code&gt;void&lt;/code&gt; ポインタ (関数オブジェクトへのポインタ) を、正しい型に安全にキャストできるからだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html#acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;たくさんの人がこのライブラリの作成に参加した。 William Kempf 、 Jesse Jones 、 Karl Nelson は、ライブラリのインタフェースと守備範囲を、他のライブラリとは独立したものにする上で大きな助けになってくれた。 John Maddock は公式なレビューをやってくれた。他にもたくさんの人がレビューをして、インタフェース、実装、ドキュメントについて優れたコメントを寄せてくれた。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Douglas Gregor&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;このドキュメントの対象: Boost Version 1.29.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Function Reference Manual -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/function/reference.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/function/reference.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost.Function Reference Manual&lt;/h1&gt;
&lt;h2&gt;Header &lt;code&gt;&amp;lt;boost/function.hpp&amp;gt;&lt;/code&gt; synopsis&lt;/h2&gt;
&lt;p&gt;以下で、 &lt;code&gt;MAX_ARGS&lt;/code&gt; は実装定義の定数であり、 Boost.Function でサポートされる引数の数の最大値 (少なくとも 10) である。このドキュメント中で参照される &lt;code&gt;MAX_ARGS&lt;/code&gt; 定数は、ライブラリ中で直接的には定義されていない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;function_base&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined safe_bool;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [0, MAX_ARGS] の範囲の全ての N について&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
           ...
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;function_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;functionN&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; function_base, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Mixin
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ResultType result_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#note&#34;&gt;[1]&lt;/a&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Policy     policy_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Mixin      mixin_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Allocator  allocator_type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 argument_type;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 1 の場合&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 first_argument_type;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 2 の場合&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg2 second_argument_type; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// N == 2 の場合&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg1 arg1_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Arg2 arg2_type;
             .
             .
             .
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ArgN argN_type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { arity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; N };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;functionN&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
    functionN(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 代入&lt;/span&gt;
    functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;swap&lt;/span&gt;(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clear&lt;/span&gt;();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool 型の文脈&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; safe_bool() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 呼び出し&lt;/span&gt;
    result_type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Arg1 a1, Arg2 a2, ..., ArgN aN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ResultType,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
           ...
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;,
            functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [0, MAX_ARGS] の範囲の全ての N について&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型: ResultType (Arg1, Arg2, ..., ArgN)&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; empty_function_mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;function_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築&lt;/span&gt;
    function();
    function(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    function(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 代入&lt;/span&gt;
    function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
    function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; function&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;,
            function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34; name=&#34;definitions&#34;&gt;定義&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引数型 &lt;code&gt;Arg1&lt;/code&gt;, &lt;code&gt;Arg2&lt;/code&gt;, ..., &lt;code&gt;ArgN&lt;/code&gt; と戻り値型 &lt;code&gt;ResultType&lt;/code&gt; に対して、該当する以下の関数が適格な時、関数オブジェクト &lt;code&gt;f&lt;/code&gt; は「 互換性がある 」という。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型が void 以外の場合&lt;/span&gt;
ResultType &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;(Arg1 arg1, Arg2 arg2, ..., ArgN argN)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; f(arg1, arg2, ..., argN);
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型が void の場合&lt;/span&gt;
ResultType &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;(Arg1 arg1, Arg2 arg2, ..., ArgN argN)
{
  f(arg1, arg2, ..., argN);
}
&lt;/pre&gt;&lt;/div&gt;

メンバ関数ポインタには、特別な規定がある。メンバ関数ポインタは関数オブジェクトではないが、 Boost.Function は内部的にメンバ関数ポインタを関数オブジェクトに作り変える。 &lt;code&gt;R (X::*mf)(Arg1, Arg2, ..., ArgN) cv-quals&lt;/code&gt; の形のメンバ関数ポインタは、以下のように関数呼出し演算子をオーバロードした関数オブジェクトに作り変えられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; P&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
R &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(cv&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;quals P&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, Arg1 arg1, Arg2 arg2, ..., ArgN argN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;x).&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;mf(arg1, arg2, ..., argN);
}
&lt;/pre&gt;&lt;/div&gt;

- &lt;code&gt;F&lt;/code&gt; が関数ポインタであるか、 &lt;code&gt;boost::is_stateless&amp;lt;T&amp;gt;&lt;/code&gt; が真の時、 &lt;code&gt;F&lt;/code&gt; 型の関数オブジェクト &lt;code&gt;f&lt;/code&gt; は「 状態を持たない 」という。状態を持たない関数オブジェクトの Boost.Function での構築/コピーは発生せず、例外は起きず、記憶域の割り当ても起きない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Class &lt;code&gt;function_base&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラス &lt;code&gt;function_base&lt;/code&gt; は全ての Boost.Function オブジェクトに共通する基底クラスだ。 &lt;code&gt;function_base&lt;/code&gt; 型のオブジェクトが直接作られることはないだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: 関数オブジェクトを格納していれば &lt;code&gt;true&lt;/code&gt; 、そうでなければ &lt;code&gt;false&lt;/code&gt; 。
- 例外: 例外を起こさない。&lt;/p&gt;
&lt;h2&gt;Class template &lt;code&gt;functionN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;functionN&lt;/code&gt; は実際には、 &lt;code&gt;function0&lt;/code&gt;, &lt;code&gt;function1&lt;/code&gt;, ... と、ある実装定義の最大値まで続く、関連するクラス群である。以下の文では、 &lt;code&gt;N&lt;/code&gt; はパラメータの数、 &lt;code&gt;f&lt;/code&gt; は暗黙のオブジェクトパラメータを表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;functionN&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
&lt;/pre&gt;&lt;/div&gt;

- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;f.empty()&lt;/code&gt;
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;functionN(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーを格納する。 &lt;code&gt;g.empty()&lt;/code&gt; ならば &lt;code&gt;f&lt;/code&gt; も空になる。 &lt;code&gt;f&lt;/code&gt; のミックスインは、 &lt;code&gt;g&lt;/code&gt; のミックスインからコピーされる。
- 例外: &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーや &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(F g, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Mixin&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Mixin());
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g&lt;/code&gt; は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;互換性がある&lt;/a&gt;関数オブジェクトであること。
- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; のコピーを格納する。 &lt;code&gt;g&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きず、 &lt;code&gt;g&lt;/code&gt; が状態を持たない関数オブジェクトならば、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g.get()&lt;/code&gt; は&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;互換性がある&lt;/a&gt;関数オブジェクトであること。
- 作用: 与えられたミックスインから &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトを構築する。
- 事後条件: &lt;code&gt;g.get()&lt;/code&gt; が空でなければ、 &lt;code&gt;this&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; (&lt;code&gt;g.get()&lt;/code&gt;のコピーではない) を格納する。 &lt;code&gt;g.get()&lt;/code&gt; が空ならば、 &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt; が真となる。
- 例外: &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトの構築で例外が起きない限り、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトのコピーを格納する。 &lt;code&gt;g.empty()&lt;/code&gt; ならば、 &lt;code&gt;f&lt;/code&gt; も空になる。 &lt;code&gt;f&lt;/code&gt; のミックスインには &lt;code&gt;g&lt;/code&gt; のミックスインが代入される。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;g&lt;/code&gt; が&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#definitions&#34;&gt;状態を持たない&lt;/a&gt;関数オブジェクトを格納しているか、 &lt;code&gt;g&lt;/code&gt; が関数オブジェクトへの参照を格納してる場合は、例外を起こさない。ただし、 &lt;code&gt;Mixin&lt;/code&gt; 型サブオブジェクトのコピーで例外が起きた場合を除く。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(F g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g&lt;/code&gt; は互換性がある関数オブジェクトであること。
- 事後条件: &lt;code&gt;g&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g&lt;/code&gt; のコピーを格納する。 &lt;code&gt;g&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;g&lt;/code&gt; が状態を持たない関数オブジェクトを格納していれば、例外を起こさない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: &lt;code&gt;g.get()&lt;/code&gt; が互換性がある関数オブジェクトであること。
- 事後条件: &lt;code&gt;g.get()&lt;/code&gt; が空でなければ、 &lt;code&gt;f&lt;/code&gt; は &lt;code&gt;g.get()&lt;/code&gt; ( &lt;code&gt;g.get()&lt;/code&gt; のコピーではない) を格納する。 &lt;code&gt;g.get()&lt;/code&gt; が空ならば、 &lt;code&gt;f.empty()&lt;/code&gt; が真となる。
- 戻り値: &lt;code&gt;*this&lt;/code&gt;
- 例外: &lt;code&gt;this&lt;/code&gt; が格納していた関数オブジェクトの破棄で例外が起きた場合のみ、例外を起こす。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;*this = g&lt;/code&gt;
- 注意: この関数の使用は推奨されない。この関数は Boost.Function の将来のバージョンで削除される。代わりに代入演算子を使って欲しい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; set(F g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;*this = g&lt;/code&gt;
- 注意: この関数の使用は推奨されない。この関数は Boost.Function の将来のバージョンで削除される。代わりに代入演算子を使って欲しい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;swap&lt;/span&gt;(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; が格納する関数オブジェクトを交換し、 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;g&lt;/code&gt; のミックスインを交換する。
- 例外: 例外は発生しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clear&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;!empty()&lt;/code&gt;ならば、格納する関数オブジェクトを破棄する。
- 事後条件: &lt;code&gt;empty()&lt;/code&gt;が真になる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; safe_bool() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;!empty()&lt;/code&gt;と等価な&lt;code&gt;safe_bool&lt;/code&gt; 。
- 例外: 例外は発生しない。
- 注意: &lt;code&gt;safe_bool&lt;/code&gt; 型は bool 型が予想される場所 (例: &lt;code&gt;if&lt;/code&gt; の条件) に使用できる。しかし、 &lt;code&gt;bool&lt;/code&gt; 型で起きる暗黙の型変換 (例: &lt;code&gt;int&lt;/code&gt;型への変換) は許されない。これによってユーザの間違いの元を減らせることがある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

- 戻り値: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;
- 例外: 例外は発生しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;result_type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Arg1 a1, Arg2 a2, ..., ArgN aN) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

- 必須事項: !empty()
- 作用: 以下で、 &lt;code&gt;target&lt;/code&gt; は格納された関数オブジェクトである。 &lt;code&gt;target&lt;/code&gt; 変数には &lt;code&gt;const&lt;/code&gt; 修飾子や &lt;code&gt;volatile&lt;/code&gt; 修飾子が付いていない (ので、関数呼出し演算子に &lt;code&gt;const&lt;/code&gt; 修飾子や &lt;code&gt;volatile&lt;/code&gt; 修飾子が付いている必要はない) 。
    1. &lt;code&gt;policy_type policy;&lt;/code&gt;
    2. &lt;code&gt;policy.precall(this);&lt;/code&gt;
    3. &lt;code&gt;target(a1, a2, ..., aN);&lt;/code&gt;
    4. &lt;code&gt;policy.postcall(this);&lt;/code&gt;
- 戻り値: &lt;code&gt;target&lt;/code&gt; の戻り値。
- 注意: 呼び出しポリシーは推奨されなくなり、今後のリリースで削除される。&lt;/p&gt;
&lt;h2&gt;Class template &lt;code&gt;function&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;function&lt;/code&gt; は、番号付きクラステンプレート &lt;code&gt;function0&lt;/code&gt;, &lt;code&gt;function1&lt;/code&gt;, ... の薄いラッパである。 &lt;code&gt;MAX_ARGS&lt;/code&gt; までの引数を受け付ける。 &lt;code&gt;N&lt;/code&gt; 個の引数を渡されれば、 &lt;code&gt;functionN&lt;/code&gt; (引数 &lt;code&gt;N&lt;/code&gt; 個専用のクラス) から派生する。&lt;/p&gt;
&lt;p&gt;クラステンプレート &lt;code&gt;function&lt;/code&gt; のメンバ関数のセマンティクスは、全て &lt;code&gt;functionN&lt;/code&gt; オブジェクトと同じである。ただし、 &lt;code&gt;function&lt;/code&gt; オブジェクトの正しいコピーコンストラクトやコピーの代入のために、追加のメンバ関数を定義している。&lt;/p&gt;
&lt;h3&gt;Operations&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ResultType,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg1,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Arg2,
         ...
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ArgN,
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 推奨されない&lt;/span&gt;
         &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; f,
          functionN&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ResultType, Arg1, Arg2, ..., ArgN, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f.swap(g);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Signature, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Policy, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Mixin, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; swap(function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; f,
          function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Signature, Policy, Mixin, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; g);
&lt;/pre&gt;&lt;/div&gt;

- 作用: &lt;code&gt;f.swap(g);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/reference.html#note&#34; name=&#34;note&#34;&gt;脚注&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] : コンパイラが &lt;code&gt;void&lt;/code&gt; 型の &lt;code&gt;return&lt;/code&gt; をサポートしていない場合、 &lt;code&gt;ReturnType&lt;/code&gt; に &lt;code&gt;void&lt;/code&gt; を指定すると、 Boost.Function オブジェクトの &lt;code&gt;result_type&lt;/code&gt; は実装依存になる。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Douglas Gregor&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:40:09 EDT 2002&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;このドキュメントの対象: Boost Version 1.29.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Binders -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/functional/binders.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Binders&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準 (§20.3.6): 由来のバインダ関数オブジェクトアダプタの両方の強化バージョンを提供する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binder1st&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binder2nd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に対応するヘルパ関数も提供する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bind1st&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind2nd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準ライブラリにあるそれらの代わりに、これらのアダプタを使う主な便益は、それらが &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html#refref&#34;&gt;参照の参照&lt;/a&gt; 問題を回避することにある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html#usage&#34; name=&#34;usage&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使い方は標準バインダと同様である。例えば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Foo&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; bar(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.begin(), c.end(), 
              boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bar), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html#refref&#34; name=&#34;refref&#34;&gt;References to References&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下の使用例を考えなさい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Foo&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; bar(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.begin(), c.end(), 
              boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind2nd(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun_ref(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bar), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout));
&lt;/pre&gt;&lt;/div&gt;

これがもし &lt;code&gt;std::bind2nd&lt;/code&gt; と &lt;code&gt;std::mem_fun_ref&lt;/code&gt; を使って書かれているならば、コンパイルできないだろう。&lt;/p&gt;
&lt;p&gt;この問題は &lt;code&gt;bar&lt;/code&gt; が参照引数を取ることが原因で起こる。標準は &lt;code&gt;std::mem_fun_ref&lt;/code&gt; を &lt;code&gt;second_argument_type&lt;/code&gt; が &lt;code&gt;std::ostream&amp;amp;&lt;/code&gt; である関数オブジェクトを作るように定義する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind2nd&lt;/code&gt; 呼び出しは &lt;code&gt;binder2nd&lt;/code&gt; を作り、それは標準が以下のように定義している:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Operation&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;binder2nd&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; unary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;first_argument_type,
                            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
...
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  binder2nd(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;second_argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y);
  ...
&lt;/pre&gt;&lt;/div&gt;

我々の &lt;code&gt;Operation&lt;/code&gt; の &lt;code&gt;second_argument_type&lt;/code&gt; は &lt;code&gt;std::ostream&amp;amp;&lt;/code&gt; であるから、コンストラクタの中の &lt;code&gt;y&lt;/code&gt; の型は &lt;code&gt;std::ostream&amp;amp;&amp;amp;&lt;/code&gt; となるだろう。参照の参照を作ることはできないから、参照の参照は C++ では非合法であるとしてこの時点でコンパイルエラーになる。(ただし &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)。&lt;/p&gt;
&lt;p&gt;このライブラリのバインダは Boost &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; テンプレートを使うことによってこの問題を回避している。&lt;/p&gt;
&lt;p&gt;コンストラクタは以下のように宣言される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;binder2nd(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Operation&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; call_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; binary_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Operation&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;second_argument_type
          &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type y)
&lt;/pre&gt;&lt;/div&gt;

結果、&lt;code&gt;y&lt;/code&gt; は &lt;code&gt;std::ostream&amp;amp;&lt;/code&gt; 型を持つ。そして、我々の例はコンパイルされる。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Member Function Adapters -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/functional/mem_fun.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Member Function Adapters&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準ライブラリ (§ 20.3.8): 由来のメンバ関 数アダプタの全ての強化バージョンを含んでいる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mem_fun_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mem_fun1_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_mem_fun_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_mem_fun1_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mem_fun_ref_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mem_fun1_ref_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_mem_fun_ref_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_mem_fun1_ref_t&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に対応するヘルパ関数も提供する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mem_fun&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mem_fun_ref&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;標準のアダプタそれぞれから、以下の変更がなされている:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;first_argument_type&lt;/code&gt; &lt;code&gt;typedef&lt;/code&gt; は &lt;code&gt;const_&lt;/code&gt; ファミリーのメンバ関数アダプタのために 修正されている。(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html#firstarg&#34;&gt;以下&lt;/a&gt; を参照せよ)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fun1_t&lt;/code&gt;やその変種に渡される引数は、メンバ関数の引数型として、&lt;code&gt;call_traits::param_type&lt;/code&gt; を用いて渡される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html#firstarg&#34; name=&#34;firstarg&#34;&gt;first_argument_type&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;標準は &lt;code&gt;const_mem_fun1_t&lt;/code&gt; を例えば、以下のように指定する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;S&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;const_mem_fun1_t&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; binary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, A, S&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;const_mem_fun1_t&lt;/span&gt;(S (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;p)(A) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;);
  S &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, A x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;binary_function&lt;/code&gt; への第一引数が実際には &lt;code&gt;const T*&lt;/code&gt; であるにも関わらず、 &lt;code&gt;T*&lt;/code&gt; になっている点に注意しなさい。&lt;/p&gt;
&lt;p&gt;これはどういうことか？さて、我々が以下のように書くとき何が起こるかを考えなさい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Foo { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; bar(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Foo &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;cp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Foo;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind1st(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fun(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bar), cp);
&lt;/pre&gt;&lt;/div&gt;

我々は以下のようなものを効果的に含む &lt;code&gt;const_mem_fun1_t&lt;/code&gt; オブジェクトを作成した。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Foo&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; first_argument_type;
&lt;/pre&gt;&lt;/div&gt;

次に &lt;code&gt;bind1st&lt;/code&gt; はこの &lt;code&gt;typedef&lt;/code&gt; を &lt;code&gt;cp&lt;/code&gt; によって初期化されるメンバ型として用いる &lt;code&gt;binder1st&lt;/code&gt; オブジェクトを作成する。言い換えれば、我々は &lt;code&gt;Foo*&lt;/code&gt; メンバを &lt;code&gt;const Foo*&lt;/code&gt; メンバで初期化する必要がある！ 明らかに これは不可能であるので、標準ライブラリのベンダはこれを実装するために &lt;code&gt;cp&lt;/code&gt; の定数性を、おそらく &lt;code&gt;bind1st&lt;/code&gt; の本体の中で、キャストして取り除かなければならなかっただろう。&lt;/p&gt;
&lt;p&gt;このハックは改良された &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/binders.html&#34;&gt;バインダ&lt;/a&gt; とともに用いる場合十分ではないので、我々はメンバ関数アダプタの修正されたバージョンも同様に提供しなければならなかった。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html#arguments&#34; name=&#34;arguments&#34;&gt;Argument Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;標準は &lt;code&gt;mem_fun1_t&lt;/code&gt; を例えば以下のように定義する (§20.3.8 ¶2):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;S&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;mem_fun1_t&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; binary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, A, S&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;mem_fun1_t&lt;/span&gt;(S (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;p)(A));
  S &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, A x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;operator()&lt;/code&gt; の第二引数はメンバ関数の引数と全く同じであることに注意しなさい。もしこれが値型であれば、引数は二度値渡しされてコピーされる。&lt;/p&gt;
&lt;p&gt;しかしながら、もし我々が引数を代わりに &lt;code&gt;const A&amp;amp;&lt;/code&gt; として宣言することによってこの非効率性を削除しようとするならば、もし &lt;code&gt;A&lt;/code&gt; が参照型であれば、我々は参照の参照を持ってしまう。そしてそれは現在のところ非合法である。 (ただし &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;operator()&lt;/code&gt; の引数を宣言する望ましい方法は、メンバ関数の引数が参照であるかないかに依っている。もしそれが参照であるならば、単純に &lt;code&gt;A&lt;/code&gt; と宣言したいのであり、もし値であれば &lt;code&gt;const A&amp;amp;&lt;/code&gt; と宣言したいのである。&lt;/p&gt;
&lt;p&gt;Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; クラステンプレートは &lt;code&gt;param_type&lt;/code&gt; &lt;code&gt;typedef&lt;/code&gt; を含んでいて、それは部分特殊化版を用いて正確にこの判断をを行う。&lt;code&gt;operator()&lt;/code&gt; を 以下のように宣言することによって。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;S &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; call_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;A&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

我々は望ましい結果を引き出した - 参照の参照を生み出すことなく、効率性を得たのだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mem_fun.html#limitations&#34; name=&#34;limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;call traits テンプレートはこの改良を実現するために使われる関数オブジェ クト特性と &lt;code&gt;call_traits&lt;/code&gt; の両方が部分特殊化版に頼っているので、この改良は部分特殊化の機能を持つコンパイラでのみ有効である。そうでないコンパイラでは、メンバ関数に渡される引数は(&lt;code&gt;mem_fun1_t&lt;/code&gt; ファミリの中で) 常に参照渡しとなるので、参照の参照の可能性を生みだすことになる。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Negators -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/functional/negators.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Negators&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準 (§20.3.5) 由来のネゲータアダプタの両方の強化バージョンを提供する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unary_negate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_negate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に対応するヘルパ関数も提供する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このライブラリのネゲータは標準バージョンを二つの方法で改良する。&lt;/p&gt;
&lt;p&gt;適合関数オブジェクトではなく関数を否定する時、それらは &lt;code&gt;ptr_fun&lt;/code&gt; の必要を回避するために、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html&#34;&gt;function object traits&lt;/a&gt; を用いる。&lt;/p&gt;
&lt;p&gt;それらは引数や適合された関数に渡す引数を宣言する最上の方法を決するため、Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;call traits&lt;/a&gt; を用いる。(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html#arguments&#34;&gt;下記&lt;/a&gt;参照)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html#usage&#34; name=&#34;usage&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使い型は標準ネゲータと同様である。例えば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;bad&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Foo &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;foo) { ... }
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Foo&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(c.begin(), c.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(bad));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html#arguments&#34; name=&#34;arguments&#34;&gt;Argument Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ 標準 (§20.3.5) は unary negate をこのように定義 している。(binary negate も似ている):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;unary_negate&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; unary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type,&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; unary_negate(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred);
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; が参照であった場合、 &lt;code&gt;operator()&lt;/code&gt; の引数の型は参照の参照になることに注意しなさい。これは、現在の C++ では非合法である。(ただし &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)。&lt;/p&gt;
&lt;p&gt;しかしながら、もし代わりに &lt;code&gt;operator()&lt;/code&gt; を &lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; を変更せずにそのまま採用して定義すると、それが値型であった場合不必要に非効率になってしまう。それは引数が二度コピーされることによる。一度は &lt;code&gt;unary_negate&lt;/code&gt; の &lt;code&gt;operator()&lt;/code&gt; を呼ぶ時、さらに適合された関数で &lt;code&gt;operator()&lt;/code&gt; を呼ぶ時にもう一度である。&lt;/p&gt;
&lt;p&gt;つまり&lt;code&gt;operator()&lt;/code&gt; を宣言する望ましい方法は、 &lt;code&gt;Predicate&lt;/code&gt; の &lt;code&gt;argument_type&lt;/code&gt; が参照であるか否かに依 る。もしそれが参照であれば、単純に &lt;code&gt;argument_type&lt;/code&gt; として宣言したいし、それが値であれば &lt;code&gt;const argument_type&amp;amp;&lt;/code&gt; として宣言したいのである。&lt;/p&gt;
&lt;p&gt;Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; クラステンプレートは &lt;code&gt;param_type&lt;/code&gt; &lt;code&gt;typedef&lt;/code&gt; を含んでいて、それは部分特 殊化版を用いて正確にこの判断を行う。&lt;code&gt;operator()&lt;/code&gt; を 以下のように宣言することによって。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; call_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

我々は望ましい結果を引き出した - 参照の参照を生み出すことなく、効率性を得たのだ。実のところ、実際の宣言は関数オブジェクト特性を使うためもう少し複雑である。しかし効果は同様である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html#limitations&#34; name=&#34;limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;この関数オブジェクト特性の両方と call traits はこの改良を実現するために使われる関数オブジェクト特性と &lt;code&gt;call_traits&lt;/code&gt; の両方が部分特殊化版に頼っているので、この改良は部分特殊化版の機能を持つコンパイラでのみ有効である。 そうでないコンパイラでは、このライブラリのネゲータは標準内のそれらと非常に似た振る舞いをする - 関数に適合するために &lt;code&gt;ptr_fun&lt;/code&gt; が必要であるし、参照の参照は避けられないだろう。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Function Pointer Adapters -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/functional/ptr_fun.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Function Pointer Adapters&lt;/h1&gt;
&lt;p&gt;functional.hpp ヘッダは C++ 標準 (§ 20.3.7): 由来の関数ポインタアダプ タの両方の強化バージョンを提供する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointer_to_unary_function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer_to_binary_function&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様に対応するヘルパ関数も提供する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ptr_fun&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/function_traits.html&#34;&gt;function object traits&lt;/a&gt; を使用しているおかげで、このライブラリのアダプタと接続する場合、このアダプタを使う必要はない。しかしながら、あなたの実装が我々の特性クラスとともにきちんと働かない場合 (部分特殊化版が欠けていることによる) や、サードパーティの関数オブジェクトアダプタとともに使いたい場合に、使う必要があるかもしれない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html#usage&#34; name=&#34;usage&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これらのアダプタを使う必要がある場合、使い方は標準関数ポインタアダプタと同様である。例えば、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;bad&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string foo) { ... }
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;
...
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it
     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(c.begin(), c.end(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptr_fun(bad)));
&lt;/pre&gt;&lt;/div&gt;

しかしながら、このライブラリは関数オブジェクト特性をサポートする、強化された &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/negators.html&#34;&gt;ネゲータ&lt;/a&gt; を含んでいることに注意しなさい。それで、以上のソースと同様に以下のように書ける。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it
     &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(c.begin(), c.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;not1(bad));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html#arguments&#34; name=&#34;arguments&#34;&gt;Argument Types&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;標準は &lt;code&gt;pointer_to_unary_function&lt;/code&gt; をこのように定 義する(§20.3.8 ¶2):&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Arg&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Result&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;pointer_to_unary_function&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; unary_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Arg, Result&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; pointer_to_unary_function(Result (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; f)(Arg));
  Result &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Arg x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;operator()&lt;/code&gt; の引数はラップされる関数の引数と厳密に等しい型であることに注意しなさい。もしこれが値型であれば、引数は値渡しされ、二度コピーされる。&lt;code&gt;pointer_to_binary_function&lt;/code&gt; も同様の問題を持っている。&lt;/p&gt;
&lt;p&gt;しかしながら、引数を代わりに &lt;code&gt;const Arg&amp;amp;&lt;/code&gt; と宣言することによって非効率を削除しようとすると、&lt;code&gt;Arg&lt;/code&gt; が参照型であった場合、現 在では非合法な (ただし &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#106&#34; target=&#34;_blank&#34;&gt;C++ 言語中核の問題点 106 番目&lt;/a&gt; を参照せよ)、参照の参照ができてしまう。&lt;/p&gt;
&lt;p&gt;つまり、&lt;code&gt;operator()&lt;/code&gt; の引数を宣言する望ましい方法は、ラップされる関数の引数が参照であるかないかに依っている。もしそれが参照であるならば、単純に &lt;code&gt;Arg&lt;/code&gt; と宣言したいのであり、もし値であれば &lt;code&gt;const Arg&amp;amp;&lt;/code&gt; と宣言したいのである。&lt;/p&gt;
&lt;p&gt;Boost の &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/call_traits.html&#34;&gt;&lt;code&gt;call_traits&lt;/code&gt;&lt;/a&gt; クラステンプレートは &lt;code&gt;param_type&lt;/code&gt; &lt;code&gt;typedef&lt;/code&gt; を含んでいて、それは部分特殊化版を用いて正確にこの判断をを行う。&lt;code&gt;operator()&lt;/code&gt; を以下のように宣言することによって。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Result &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; call_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Arg&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;param_type x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

我々は望ましい結果を引き出した - 参照の参照を生み出すことなく、効率性を得たのだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/ptr_fun.html#limitations&#34; name=&#34;limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;call traits テンプレートはこの改良を実現するために使われる関数オブジェクト特性と &lt;code&gt;call_traits&lt;/code&gt; の両方が部分特殊化版に頼っているので、この改良は部分特殊化の機能を持つコンパイラでのみ有効である。そうでないコンパイラでは、関数に渡される引数は常に参照渡しとなるので、参照の参照の可能性を生みだすことになる。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000 Cadenza New Zealand Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Revised 28 June 2000&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/functional/mailto:g940455@mail.ecc.u-tokyo.ac.jp&#34;&gt;g940455@mail.ecc.u-tokyo.ac.jp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>AdjacencyGraph -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/graph/AdjacencyGraph.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;AdjacencyGraph&lt;/h1&gt;
&lt;p&gt;AdjacencyGraph コンセプトは、グラフ中の頂点への隣接頂点の効率的なアクセス のためのインターフェースを供給する。これは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt; コンセプト (出辺の終点が隣接頂点である) と非常に良く似ている。 いくつかの状況では頂点への関心のみがあり、しかし一方、他の状況では辺も同様に重要になるため、両者のコンセプトが供給された。&lt;/p&gt;
&lt;h2&gt;Refinement of&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Graph.html&#34;&gt;Graph&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;表記&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;識別子&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフのモデルの型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が &lt;code&gt;G&lt;/code&gt; のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型が &lt;code&gt;boost::graph_traits&amp;lt;G&amp;gt;::vertex_descriptor&lt;/code&gt; のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::graph_traits&amp;lt;G&amp;gt;::traversal_category&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このタグ型は &lt;code&gt;adjacency_graph_tag&lt;/code&gt; に変換可能でなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::graph_traits&amp;lt;G&amp;gt;::adjacency_iterator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;頂点 &lt;code&gt;v&lt;/code&gt; のための隣接イテレータは &lt;code&gt;v&lt;/code&gt; に隣接した頂点へのアクセスを提供する。そのため隣接イテレータの値型はそのグラフの頂点記述子型である。 隣接イテレータは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/MultiPassInputIterator.html&#34;&gt;MultiPassInputIterator&lt;/a&gt; の要求を満たしていなければならない。&lt;/p&gt;
&lt;h2&gt;有効な表現式&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;adjacent_vertices(v, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフ &lt;code&gt;g&lt;/code&gt; 中の頂点 &lt;code&gt;v&lt;/code&gt; に隣接している頂点へのアクセスを提供 するイテレータ範囲を返す。&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html#note1&#34;&gt;[1]&lt;/a&gt;&lt;br /&gt; 返却型: &lt;code&gt;std::pair&amp;lt;adjacency_iterator, adjacency_iterator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;計算量の保証&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;adjacent_vertices()&lt;/code&gt; 関数は定数時間内に終了するはずである。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Graph.html&#34;&gt;Graphコンセプト&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;コンセプトチェックするクラス&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; AdjacencyGraphConcept
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;G&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;adjacency_iterator
    adjacency_iterator;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;constraints&lt;/span&gt;() {
    function_requires&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; IncidenceGraphConcept&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;G&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();
    function_requires&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; MultiPassInputIteratorConcept&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;adjacency_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

    p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; adjacent_vertices(v, g);
    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p.first;
    const_constraints(g);
  }
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;const_constraints&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; G&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g) {
    p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; adjacent_vertices(v, g);
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;adjacency_iterator,adjacency_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;G&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor v;
  G g;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;設計原理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt; が同じ (それ以上の) 機能を実際に含んでいるので、AdjacencyGraph コンセプトはいくぶん軽薄である。 &lt;code&gt;adjacent_vertices()&lt;/code&gt; が &lt;code&gt;out_edges()&lt;/code&gt; よりも使用すると便利な状況があるので AdjacencyGraph コンセプトは存在する。 グラフ・クラスを構築しており、隣接イテレータを作成する余分な仕事を行いたくない場合は、恐れを持たないでいただきたい。 出辺イテレータから隣接イテレータを作成するために使用できる&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;と名付けられたアダプタ・クラスがある。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html#note1&#34; name=&#34;note1&#34;&gt;[1]&lt;/a&gt; &lt;strong&gt;multigraph&lt;/strong&gt; (多数の辺が同じ二つの頂点を接続できる) の 場合は、&lt;code&gt;adjacent_vertices()&lt;/code&gt; 関数によって返されたイテレータが各隣接頂点を一度含む範囲にアクセスするかどうか、また &lt;code&gt;out_edges()&lt;/code&gt; 関数 のふるまいと一致し、二度以上隣接した頂点を含むことがある範囲にアクセスすべき かどうかとしての問題が持ち出される。 この決定はグラフ・アルゴリズムの実装と共により多くの経験を考慮して再検討される必要があるかもしれないが、今のところふるまいは &lt;code&gt;out_edges()&lt;/code&gt; のそれと一致すると定義される。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bellman_ford_shortest_paths -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/graph/bellman_ford_shortest_paths.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;bellman_ford_shortest_paths&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; bellman_ford_shortest_paths(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, Size N, 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bgl_named_params&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P, T, R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; params &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; all defaults)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前無しパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Size&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;WeightMap&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PredecessorMap&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DistanceMap&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;BinaryFunction&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; bellman_ford_shortest_paths(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;EdgeListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, Size N, 
  WeightMap weight, PredecessorMap pred, DistanceMap distance, 
  &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryFunction.html&#34; target=&#34;_blank&#34;&gt;BinaryFunction&lt;/a&gt; combine, &lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt; compare, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;BellmanFordVisitor&lt;/a&gt; v)
&lt;/pre&gt;&lt;/div&gt;

Bellman-Ford アルゴリズム [&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#bellman58&#34;&gt;4&lt;/a&gt;,&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ford62:_flows&#34;&gt;11&lt;/a&gt;,&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#lawler76:_comb_opt&#34;&gt;20&lt;/a&gt;,&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#clr90&#34;&gt;8&lt;/a&gt;] は、正と負の両方の辺の重みを持つグラフの単一始点の最短経路問題を解く。最短経路問題の定義のために、 章 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html#shortest-paths-algorithms&#34;&gt;Shortest-Paths Algorithms&lt;/a&gt; を見なさい。 もし正の辺の重みを持つ最短経路問題を解く必要があるだけなら、Dijkstra の アルゴリズムがより効率的な代替手段を提供する。もし全ての辺の重みが 1 に等しいなら幅優先探索がより一層効率的な代替手段を提供する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bellman_ford_shortest_paths()&lt;/code&gt; 関数を呼ぶ前に、ユーザは始点に 0 の 距離を割り当て、他の全ての頂点に無限大の距離を割り当てなければならない。 Bellman-Ford アルゴリズムはグラフ中の全ての辺を通してループし、各辺に リラックス操作 (減らす操作) を適用することによって進められる。下記の擬似コード中で、 &lt;code&gt;v&lt;/code&gt; は &lt;code&gt;u&lt;/code&gt; の隣接頂点で、&lt;code&gt;w&lt;/code&gt; は辺にそれらの重みをマップし、 &lt;code&gt;d&lt;/code&gt; は今の所見られる各辺への最短経路の長さを記録する距離マップである。&lt;code&gt;p&lt;/code&gt; は各辺の親を記録する先行点マップで、それは結局最短経路木中で親となるであろう。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;RELAX(u, v, w, d, p)
  if (w(u,v) + d[u] &amp;lt; d[v]) 
    d[v] := w(u,v) + d[u]      辺をリラックスする (減らす) (u,v)
    p[v] := u
  else
    ...                        辺 (u,v) は リラックスされていない (減らされていない)
&lt;/code&gt;&lt;/pre&gt;
アルゴリズムはグラフ中に負の閉路が存在しないならば、各辺への距離が可能な限り最小に減らされた事が保証された後にこのループを &lt;code&gt;|V|&lt;/code&gt; 回 繰り返す。もし負の閉路が存在するならば、グラフ中に適当に最小化されない 辺が存在する事になるだろう。つまり、&lt;code&gt;w(u,v) + d[u] &amp;lt; d[v]&lt;/code&gt; であるような 辺 &lt;code&gt;(u,v)&lt;/code&gt; が存在することになるだろう。 アルゴリズムは全ての辺が最小化されたかどうか最後に一回調べるためにグラフ中の辺をループし、もしよければ &lt;code&gt;true&lt;/code&gt; を返し、そうでなければ &lt;code&gt;false&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;BELLMAN-FORD(G)
  for each vertex u in V        頂点 u の初期化
    d[u] := infinity
    p[u] := u
  end for
  for i := 1 to |V|-1
    for each edge (u,v) in E    辺 (u,v) の調査
      RELAX(u, v, w, d, p)
    end for
  end for
  for each edge (u,v) in E
    if (w(u,v) + d[u] &amp;lt; d[v])
      return (false, , )        辺 (u,v) は最小化されていない
    else
      ...                       辺 (u,v) は最小化されている
  end for
  return (true, p, d)
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;bellman_ford_shortest_paths()&lt;/code&gt; 関数から出力を得るための主な二つの選択が存在する。 ユーザが &lt;code&gt;distance_map()&lt;/code&gt; パラメータを通して距離プロパティ・マップを提供するならばグラフ中の始点から他の全ての頂点への最短距離は距離マップに記録されるだろう (もし関数が &lt;code&gt;true&lt;/code&gt; を返すなら)。 二番目の選択は最短経路木を &lt;code&gt;predecessor_map()&lt;/code&gt; に記録することである。 &lt;code&gt;V&lt;/code&gt; 中の各頂点 &lt;code&gt;u&lt;/code&gt; にとって、最短経路木中では &lt;code&gt;p[u]&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; の先行点になるだろう (ただし &lt;code&gt;p[u] = u&lt;/code&gt; でここに &lt;code&gt;u&lt;/code&gt; が始点 であるか、または始点からは到達不能な頂点である場合を除く)。 これらの二つの選択に加え、ユーザはアルゴリズムのイベント・ポイントのどれかの間、アクションを取れる独自のビジタをそこに提供することができる。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;EdgeListGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EdgeListGraph.html&#34;&gt;Edge List Graph&lt;/a&gt; のモデルの有向グラフまたは無向グラフでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;Size N&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の頂点の数。型 &lt;code&gt;Size&lt;/code&gt; は汎整数型でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;weight_map(WeightMap w)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ中の各辺の重み　(そして「長さ」もしくは「コスト」として知られる)。 &lt;code&gt;WeightMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。このプロパティ・マップのキー型はグラフの辺記述子でなければならない。重みマップの値型は距離マップの値型を伴った Addable でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(edge_weight, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OUT: &lt;code&gt;predecessor_map(PredecessorMap p_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先行点マップ (predecessor map) は最小全域木中に辺を記録する。 アルゴリズムの完了時に、&lt;code&gt;V&lt;/code&gt; 中の全ての &lt;code&gt;u&lt;/code&gt; のための辺 &lt;code&gt;(p[u],u)&lt;/code&gt; は最小全域木中にある。もし &lt;code&gt;p[u] = u&lt;/code&gt; なら &lt;code&gt;u&lt;/code&gt; は始点かまたは始点から到達不能な頂点である。 &lt;code&gt;PredecessorMap&lt;/code&gt; の型はキーと頂点の型がグラフの頂点記述子型と同じ &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;dummy_property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN/OUT: &lt;code&gt;distance_map(DistanceMap d)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グラフ &lt;code&gt;g&lt;/code&gt; 中の始点から各頂点への最短経路の重みは、このプロパティ・マップ中に記録される。&lt;code&gt;DistanceMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならない。プロパティ・マップのキー型は グラフの頂点記述子型でなければならず、距離マップの値型は &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;Less Than Comparable&lt;/a&gt; でなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_distance, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(BellmanFordVisitor v)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビジタ・オブジェクトで、その型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman-Ford Visitor&lt;/a&gt; のモデルでなければならない。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;bellman_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_combine(BinaryFunction combine)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数オブジェクトはリラックス (減少) 段階中で、加算の役割を置き換える。 第一引数の型は距離マップの値型に一致していなければならず、第二引数の型は重みマップの値型に一致していなければならない。 結果型は距離マップの値型と同じでなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト:&lt;code&gt;std::plus&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;distance_compare(BinaryPredicate compare)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この関数オブジェクトはリラックス (減少) 段階中で、距離を比較する less-than (&lt;code&gt;&amp;lt;&lt;/code&gt;) 演算子の役割を置き換える。引数の型は距離マップの値型に一致していなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;std::less&amp;lt;D&amp;gt;&lt;/code&gt; ここで &lt;code&gt;D=typename property_traits&amp;lt;DistanceMap&amp;gt;::value_type&lt;/code&gt; とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間複雑性は O(V E) である。&lt;/p&gt;
&lt;h2&gt;Visitor Event Points&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、グラフ中の各辺において &lt;code&gt;|V|&lt;/code&gt; 回呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_relaxed(e, g)&lt;/code&gt; は終点のための距離ラベルが減じられた時に呼び出される。頂点 &lt;code&gt;v&lt;/code&gt; のための最近のリラックス (減少) にあずかった 辺 &lt;code&gt;(u,v)&lt;/code&gt; は最短経路木の中にある辺である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_relaxed(e, g)&lt;/code&gt; は、もし終点のための距離ラベルが減じられなかった時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_minimized(e, g)&lt;/code&gt; は、アルゴリズムの第二段階の間、各辺が最小化されたかどうかの検査の間に呼び出される。もし辺が最小化されていればこの関数が呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.edge_not_minimized(e, g)&lt;/code&gt; もまた、アルゴリズムの第二段階の間、各辺が最小化されたかどうかの検査の間に呼び出される。もし辺が最小化されていなければ、この関数が呼び出される。これはグラフ中に負の閉路が存在する時に起こる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;Bellman-Ford のアルゴリズムを用いた例が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/examples/bellman-example.cpp.html&#34;&gt;examples/bellman-example.cpp&lt;/a&gt; 中にある。&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われず ビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたは リファレンスによってこの状態をビジタに保持させる事を望むかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>参考文献 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/graph/bibliography.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#aho83:_data_struct_algo&#34; name=&#34;aho83:_data_struct_algo&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. V. Aho, J. E. Hopcroft, and J. D. Ullman.&lt;/li&gt;
&lt;li&gt;Data Structures and Algorithms.&lt;/li&gt;
&lt;li&gt;Addison-Wesley, 1983.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#austern99:_gener_progr_stl&#34; name=&#34;austern99:_gener_progr_stl&#34;&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M. H. Austern.&lt;/li&gt;
&lt;li&gt;Generic Programming and the STL.&lt;/li&gt;
&lt;li&gt;Professional computing series. Addison-Wesley, 1999.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#baumgartner95:_signatures&#34; name=&#34;baumgartner95:_signatures&#34;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G. Baumgartner and V. F. Russo.&lt;/li&gt;
&lt;li&gt;Signatures: A language extension for improving type abstraction and subtype polymorphism in C++.&lt;/li&gt;
&lt;li&gt;Software-Practice and Experience, 25(8):863-889, August 1995.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#bellman58&#34; name=&#34;bellman58&#34;&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R. Bellman.&lt;/li&gt;
&lt;li&gt;On a routing problem.&lt;/li&gt;
&lt;li&gt;Quarterly of Applied Mathematics, 16(1):87-90, 1958.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#bruce95&#34; name=&#34;bruce95&#34;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K. B. Bruce, L. Cardelli, G. Castagna, the Hopkins Objects Group, G. T. Leavens, and B. Pierce.&lt;/li&gt;
&lt;li&gt;On binary methods.&lt;/li&gt;
&lt;li&gt;Theory and Practice of Object Systems, 1:221-242, 1995.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#coleman85:_algor&#34; name=&#34;coleman85:_algor&#34;&gt;6&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T. F. Coleman, B. S. Garbow, and J. J. Mor&#39;e.&lt;/li&gt;
&lt;li&gt;Algorithm 649: Fortran subroutines for estimating sparse hessian matrices.&lt;/li&gt;
&lt;li&gt;ACM Transactions on Mathematical Software, 11(4):378, December 1985.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#coleman84:_estim_jacob&#34; name=&#34;coleman84:_estim_jacob&#34;&gt;7&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T. F. Coleman and J. J. Mor&#39;e.&lt;/li&gt;
&lt;li&gt;Estimation of sparse jacobian matrices and graph coloring problems.&lt;/li&gt;
&lt;li&gt;SIAM Journal on Numerical Analysis, 20:187-209,, 1984.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#clr90&#34; name=&#34;clr90&#34;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T. Cormen, C. Leiserson, and R. Rivest.&lt;/li&gt;
&lt;li&gt;Introduction to Algorithms.&lt;/li&gt;
&lt;li&gt;McGraw-Hill, 1990.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#curtis74:_jacob&#34; name=&#34;curtis74:_jacob&#34;&gt;9&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. Curtis, M. Powell, and J. Reid.&lt;/li&gt;
&lt;li&gt;On the estimation of sparse jacobian matrices.&lt;/li&gt;
&lt;li&gt;Journal of the Institute of Mathematics and its Applications, 13:117-119, 1974.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#dijkstra59&#34; name=&#34;dijkstra59&#34;&gt;10&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E. Dijkstra.&lt;/li&gt;
&lt;li&gt;A note on two problems in connexion with graphs.&lt;/li&gt;
&lt;li&gt;Numerische Mathematik, 1:269-271, 1959.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ford62:_flows&#34; name=&#34;ford62:_flows&#34;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L. R. Ford and D. R. Fulkerson.&lt;/li&gt;
&lt;li&gt;Flows in networks.&lt;/li&gt;
&lt;li&gt;Princeton University Press, 1962.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#gamma95:_design_patterns&#34; name=&#34;gamma95:_design_patterns&#34;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E. Gamma, R. Helm, R. Johnson, and J. Vlissides.&lt;/li&gt;
&lt;li&gt;Design Patterns: Elements of Reusable Object-Oriented Software.&lt;/li&gt;
&lt;li&gt;Professional Computing. Addison-Welsey, 1995.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#george93:graphtheory&#34; name=&#34;george93:graphtheory&#34;&gt;13&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. George, J. R. Gilbert, and J. W. Liu, editors.&lt;/li&gt;
&lt;li&gt;Graph Theory and Sparse Matrix Computation.&lt;/li&gt;
&lt;li&gt;Springer-Verlag New York, Inc, 1993.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#george81:__sparse_pos_def&#34; name=&#34;george81:__sparse_pos_def&#34;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. George and J. W.-H. Liu.&lt;/li&gt;
&lt;li&gt;Computer Solution of Large Sparse Positive Definite Systems.&lt;/li&gt;
&lt;li&gt;Computational Mathematics. Prentice-Hall, 1981.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#graham85&#34; name=&#34;graham85&#34;&gt;15&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R. Graham and P. Hell.&lt;/li&gt;
&lt;li&gt;On the history of the minimum spanning tree problem.&lt;/li&gt;
&lt;li&gt;Annals of the History of Computing, 7(1):43-57, 1985.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#hart68&#34; name=&#34;hart68&#34;&gt;16&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P. E. Hart, N. J. Nilsson, and B. Raphael.&lt;/li&gt;
&lt;li&gt;A formal basis for the heuristic determination of minimum cost paths.&lt;/li&gt;
&lt;li&gt;IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#kruskal56&#34; name=&#34;kruskal56&#34;&gt;18&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J. B. Kruskal.&lt;/li&gt;
&lt;li&gt;On the shortest spanning subtree of a graph and the traveling salesman problem.&lt;/li&gt;
&lt;li&gt;In Proceedings of the American Mathematical Sofiety, volume 7, pages 48-50, 1956.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#kuehl96:_design_patterns_for_graph_algo&#34; name=&#34;kuehl96:_design_patterns_for_graph_algo&#34;&gt;19&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D. Kühl.&lt;/li&gt;
&lt;li&gt;Design patterns for the implementation of graph algorithms.&lt;/li&gt;
&lt;li&gt;Master&#39;s thesis, Technische Universität Berlin, July 1996.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#lawler76:_comb_opt&#34; name=&#34;lawler76:_comb_opt&#34;&gt;20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E. L. Lawler.&lt;/li&gt;
&lt;li&gt;Combinatorial Opimization: Networks and Matroids.&lt;/li&gt;
&lt;li&gt;Holt, Rinehart, and Winston, 1976.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#LIU:MMD&#34; name=&#34;LIU:MMD&#34;&gt;21&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J. W. H. Liu.&lt;/li&gt;
&lt;li&gt;Modification of the minimum-degree algorithm by multiple elimination.&lt;/li&gt;
&lt;li&gt;ACM Transaction on Mathematical Software, 11(2):141-153, 1985.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#mehlhorn99:_leda&#34; name=&#34;mehlhorn99:_leda&#34;&gt;22&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K. Mehlhorn and St. Näher.&lt;/li&gt;
&lt;li&gt;The LEDA Platform of Combinatorial and Geometric Computing.&lt;/li&gt;
&lt;li&gt;Cambridge University Press, 1999.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#meyer88:_object_soft_const&#34; name=&#34;meyer88:_object_soft_const&#34;&gt;23&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B. Meyer.&lt;/li&gt;
&lt;li&gt;Object-oriented Software Construction.&lt;/li&gt;
&lt;li&gt;Prentice Hall International Series in Computer Science. Prentice Hall, 1988.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#myers95:_trait&#34; name=&#34;myers95:_trait&#34;&gt;24&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N. C. Myers.&lt;/li&gt;
&lt;li&gt;Traits: a new and useful template technique.&lt;/li&gt;
&lt;li&gt;C++ Report, June 1995.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#prim57:_short&#34; name=&#34;prim57:_short&#34;&gt;25&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R. Prim.&lt;/li&gt;
&lt;li&gt;Shortest connection networks and some generalizations.&lt;/li&gt;
&lt;li&gt;Bell System Technical Journal, 36:1389-1401, 1957.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#saad96:imsms&#34; name=&#34;saad96:imsms&#34;&gt;26&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Y. Saad.&lt;/li&gt;
&lt;li&gt;Iterative Methods for Sparse Minear System.&lt;/li&gt;
&lt;li&gt;PWS Publishing Company, 1996.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#tarjan83:_data_struct_network_algo&#34; name=&#34;tarjan83:_data_struct_network_algo&#34;&gt;27&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R. E. Tarjan.&lt;/li&gt;
&lt;li&gt;Data Structures and Network Algorithms.&lt;/li&gt;
&lt;li&gt;Society for Industrial and Applied Mathematics, 1983.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#parter61:_gauss&#34; name=&#34;parter61:_gauss&#34;&gt;28&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seymour Parter.&lt;/li&gt;
&lt;li&gt;The use of linear graphs in Gauss elimination.&lt;/li&gt;
&lt;li&gt;SIAM Review, 1961 3:119-130.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#matula72:_graph_theory_computing&#34; name=&#34;matula72:_graph_theory_computing&#34;&gt;29&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D. Matula, G. Marble, and J. Isaacson&lt;/li&gt;
&lt;li&gt;Graph coloring algorithms in Graph Theory and Computing.&lt;/li&gt;
&lt;li&gt;Academic Press, pp.104-122, 1972.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#garey79:computers-and-intractability&#34; name=&#34;garey79:computers-and-intractability&#34;&gt;30&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M.R. Garey and D.S. Johnson&lt;/li&gt;
&lt;li&gt;Computers and Intractibility: A Guide to the Theory of NP-Completeness&lt;/li&gt;
&lt;li&gt;W.H. Freeman, New York, 1979.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#welsch67&#34; name=&#34;welsch67&#34;&gt;31&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D. Welsch and M. B. Powel&lt;/li&gt;
&lt;li&gt;An upper bound for the chromatic number of a graph and its application to timetabling problems Computer Journal, 10:85-86, 1967.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#brelaz79:_new&#34; name=&#34;brelaz79:_new&#34;&gt;32&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D. Br&#39;elaz&lt;/li&gt;
&lt;li&gt;New methods to color the vertices of a graph&lt;/li&gt;
&lt;li&gt;Communications of the ACM, vol. 22, 1979, pp. 251-256.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#heber99:_saw&#34; name=&#34;heber99:_saw&#34;&gt;33&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G. Heber, R. Biswas, G.R. Gao&lt;/li&gt;
&lt;li&gt;Self-Avoiding Walks over Adaptive Unstructured Grids&lt;/li&gt;
&lt;li&gt;Parallel and Distributed Processing, LNCS 1586, Springer-Verlag, 1999, pp. 968-977&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ng-raghavan&#34; name=&#34;ng-raghavan&#34;&gt;34&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Esmond G. Ng amd Padma Raghavan&lt;/li&gt;
&lt;li&gt;Performance of greedy ordering heuristics for sparse {C}holesky factorization&lt;/li&gt;
&lt;li&gt;SIAM Journal on Matrix Analysis and Applications (To appear)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#George:evolution&#34; name=&#34;George:evolution&#34;&gt;35&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alan George and Joseph W. H. Liu&lt;/li&gt;
&lt;li&gt;The Evolution of the Minimum Degree Ordering Algorithm&lt;/li&gt;
&lt;li&gt;SIAM Review, March 1989, vol. 31, num. 1, pp. 1-19.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ford56:_maxim&#34; name=&#34;ford56:_maxim&#34;&gt;36&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L. R. Ford and D. R. Fulkerson&lt;/li&gt;
&lt;li&gt;Maximal flow through a network.&lt;/li&gt;
&lt;li&gt;Can. Journal of Mathematics 1956 pp.399-404&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#goldberg85:_new_max_flow_algor&#34; name=&#34;goldberg85:_new_max_flow_algor&#34;&gt;37&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. V. Goldberg&lt;/li&gt;
&lt;li&gt;A New Max-Flow Algorithm.&lt;/li&gt;
&lt;li&gt;MIT Tehnical report MIT/LCS/TM-291, 1985.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#karzanov74:_deter&#34; name=&#34;karzanov74:_deter&#34;&gt;38&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. V. Karzanov&lt;/li&gt;
&lt;li&gt;Determining the maximal flow in a network by the method of preflows.&lt;/li&gt;
&lt;li&gt;Sov. Math. Dokl. 1974&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#ahuja93:_network_flows&#34; name=&#34;ahuja93:_network_flows&#34;&gt;39&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ravindra K. Ahuja and Thomas L. Magnanti and James B. Orlin&lt;/li&gt;
&lt;li&gt;Network Flows: Theory, Algorithms, and Applications.&lt;/li&gt;
&lt;li&gt;Prentice Hall, 1993.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#edmonds72:_improvements_netflow&#34; name=&#34;edmonds72:_improvements_netflow&#34;&gt;40&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jack Edmonds and Richard M. Karp&lt;/li&gt;
&lt;li&gt;Theoretical improvements in the algorithmic efficiency for network flow problems.&lt;/li&gt;
&lt;li&gt;Journal of the ACM, 1972 19:248-264&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#tarjan72:dfs_and_linear_algo&#34; name=&#34;tarjan72:dfs_and_linear_algo&#34;&gt;41&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Robert E. Tarjan&lt;/li&gt;
&lt;li&gt;Depth first search and linear graph algorithms.&lt;/li&gt;
&lt;li&gt;SIAM Journal on Computing, 1(2):146-160, 1972&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#eppstein97:dynamic_graph&#34; name=&#34;eppstein97:dynamic_graph&#34;&gt;42&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David Eppstein, Zvi Galil, and Giuseppe F. Italiano&lt;/li&gt;
&lt;li&gt;Dynamic Graph Algorithms.&lt;/li&gt;
&lt;li&gt;Chapter 22, CRC Handbook of Algorithms and Theory of Computation, 1997.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#cuthill69:reducing_bandwith&#34; name=&#34;cuthill69:reducing_bandwith&#34;&gt;43&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E. Cuthill and J. McKee&lt;/li&gt;
&lt;li&gt;Reducing the bandwidth of sparse symmetric matrices.&lt;/li&gt;
&lt;li&gt;Proceedings of the 24th National Conference of the ACM, 1969.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#liu75:anal_cm_rcm&#34; name=&#34;liu75:anal_cm_rcm&#34;&gt;44&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;J. Liu and A. Sherman&lt;/li&gt;
&lt;li&gt;Comparative analysis of the Cuthill-Mckee and the reverse Cuthill-Mckee ordering algorithms for sparse matrices.&lt;/li&gt;
&lt;li&gt;SIAM Journal of Numerical Analysis. 13 (1975), pp. 198-213.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#george71:fem&#34; name=&#34;george71:fem&#34;&gt;45&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alan George&lt;/li&gt;
&lt;li&gt;Computer implementation of the finite element method&lt;/li&gt;
&lt;li&gt;Technical Report STAN-CS-208, Stanford University (1971).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#fortin96:_graph_iso_prob&#34; name=&#34;fortin96:_graph_iso_prob&#34;&gt;46&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scott Fortin&lt;/li&gt;
&lt;li&gt;The Graph Isomorphism Problem&lt;/li&gt;
&lt;li&gt;TR 96-20, Dept. of Computer Science, University of Alberta (1996)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#mckay81:_pract_graph_iso&#34; name=&#34;mckay81:_pract_graph_iso&#34;&gt;47&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brendan D. McKay&lt;/li&gt;
&lt;li&gt;Practical Graph Isomorphism&lt;/li&gt;
&lt;li&gt;Congressus Numerantium (1981)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#reingold77:_combin_algo&#34; name=&#34;reingold77:_combin_algo&#34;&gt;48&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reingold, Nievergelt, and Deo&lt;/li&gt;
&lt;li&gt;Combinatorial Algorithms: Theory and Practice&lt;/li&gt;
&lt;li&gt;Prentice Hall (1977)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#moore59&#34; name=&#34;moore59&#34;&gt;49&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edward Moore&lt;/li&gt;
&lt;li&gt;The shortest path through a maze&lt;/li&gt;
&lt;li&gt;International Symposium on the Theory of Switching (1959)&lt;/li&gt;
&lt;li&gt;Harvard University Press&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#nuutila95&#34; name=&#34;nuutila95&#34;&gt;50&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E. Nuutila&lt;/li&gt;
&lt;li&gt;Efficient transitive closure computation in large digraphs&lt;/li&gt;
&lt;li&gt;PhD Thesis, Helsinki University of Technology, 1995. &lt;/li&gt;
&lt;li&gt;Acta Polytechnica Scandinavica, Mathematics and Computing in Engineering Series, No. 74.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#goral79&#34; name=&#34;goral79&#34;&gt;51&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. Goralcikova and V. Koubek&lt;/li&gt;
&lt;li&gt;A reduct and closure algorithm for graphs&lt;/li&gt;
&lt;li&gt;In Mathematical Foundations of Computer Science, &lt;/li&gt;
&lt;li&gt;volume 74 of Lecture Notes in Computer Science, pages 301-307. &lt;/li&gt;
&lt;li&gt;Springer-Verlag, 1979&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#simon86&#34; name=&#34;simon86&#34;&gt;52&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Klaus Simon&lt;/li&gt;
&lt;li&gt;An Improved Algorithm for Transitive Closure on Acyclic Digraphs&lt;/li&gt;
&lt;li&gt;Theoretical Computer Science 58&lt;/li&gt;
&lt;li&gt;Automata, Languages and Programming, 376-386, 1986&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#purdom70&#34; name=&#34;purdom70&#34;&gt;53&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P. Purdom&lt;/li&gt;
&lt;li&gt;A Transitive Closure Algorithm&lt;/li&gt;
&lt;li&gt;BIT, 10, 1970, pp. 76-94.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breadth_first_search -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/graph/breadth_first_search.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;breadth_first_search&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前付きパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; breadth_first_search(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; G, 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bgl_named_params&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P, T, R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; params);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前無しパラメータバージョン&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Buffer&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BFSVisitor&lt;/span&gt;, 
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; breadth_first_search(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, 
   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;VertexListGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
   Buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; Q, BFSVisitor vis, ColorMap color);
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;breadth_first_search()&lt;/code&gt; 関数は有向グラフまたは無向グラフの幅優先巡回(breadth-first traversal) &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bibliography.html#moore59&#34;&gt;[49]&lt;/a&gt; を行う。幅優先巡回は、始点から遠方に離れた頂点を訪れる前に近い頂点を訪れる。 この文脈中で「距離」とは始点からの最短経路中の辺の数として定義される。 &lt;code&gt;breadth_first_search()&lt;/code&gt; 関数は始点から全ての到達可能な頂点への最短経路を計算するのに使用でき、結果として最短経路の距離が得られる。 BFS に関連した更なる定義は章 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_overview.html#bfs-algorithm&#34;&gt;Breadth-First Search&lt;/a&gt; を見よ。&lt;/p&gt;
&lt;p&gt;BFS は巡回を実装するのに二つのデータ構造を使っている: 各頂点のカラー・マーカーとキューである。白色の頂点は未発見で、一方灰色の頂点は発見されたけれども未発見の隣接頂点を持つ。黒色の頂点は発見されており、他の黒色もしくは灰色の頂点にのみ隣接している。アルゴリズムは頂点 &lt;code&gt;u&lt;/code&gt; をキューから取り除き、 各出辺 &lt;code&gt;(u,v)&lt;/code&gt; を調べながら進められる。もし隣接頂点 &lt;code&gt;v&lt;/code&gt; がまだ 未発見ならば、灰色に色づけしてキューに置く。すべての出辺を調べた後、頂点 &lt;code&gt;u&lt;/code&gt; を黒色に色づけして手順を繰り返す。BFS アルゴリズムの疑似コードを下に示す。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;BFS(G, s)
  for each vertex u in V[G]      頂点uの初期化
    color[u] := WHITE 
    d[u] := infinity 
    p[u] := u 
  end for
  color[s] := GRAY 
  d[s] := 0 
  ENQUEUE(Q, s)                  頂点sの発見
  while (Q != Ø) 
    u := DEQUEUE(Q)              頂点uの調査
    for each vertex v in Adj[u]  辺(u,v)の調査
      if (color[v] = WHITE)      辺(u,v)は木の辺
        color[v] := GRAY 
        d[v] := d[u] + 1  
        p[v] := u  
        ENQUEUE(Q, v)            頂点vの発見
      else                       (u,v)は木でない辺
        if (color[v] = GRAY) 
          ...                    (u,v)は灰色の終点を持つ
        else
          ...                    (u,v)は黒色の終点を持つ
    end for
    color[u] := BLACK            頂点uの終了
  end while
  return (d, p)
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;breadth_first_search()&lt;/code&gt; 関数は一定のイベント・ポイントと呼ばれる、 ユーザ定義のアクションで拡張することができる。アクションはビジタ・オブジェクトの形で提供されなければならない。すなわち、型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS Visitor&lt;/a&gt; の要求を満たしているオブジェクトである。上の擬似コード内で、イベント・ポイントは右側のラベルである。さらに各イベント・ポイントの記述を以下に示した。デフォルトでは &lt;code&gt;breadth_first_search()&lt;/code&gt; 関数はどんなアクションも実行しない。距離や先行点の記録さえも。しかしながらこれらは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html&#34;&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/predecessor_recorder.html&#34;&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/a&gt; のイベント・ビジタを用いて容易に追加できる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/breadth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;VertexListGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有向グラフまたは無向グラフ。グラフの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;Vertex List Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索が開始される始点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(BFSVisitor vis)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS Visitor&lt;/a&gt; コンセプトで指定されたイベント・ポイントで呼び出されるビジタ・オブジェクト。 ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;bfs_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap color)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 アルゴリズムは開始時に全ての頂点の色を白色に初期化するため、ユーザは &lt;code&gt;breadth_first_search()&lt;/code&gt; を呼ぶ前にカラー・マップを初期化する必要はない。もし複合的な幅優先探索をグラフ上で行う必要があるなら (例えばいくつかの切断された成分があるなら) &lt;code&gt;breadth_first_visit()&lt;/code&gt; 関数を使って独自の初期化を行うこと。
    &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならなく、そのキー型はグラフの頂点記述子型でなければならなく、カラー・マップの値型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt; をモデルとしなければならない。&lt;/li&gt;
&lt;li&gt;デフォルト: サイズ &lt;code&gt;num_vertices(g)&lt;/code&gt; の &lt;code&gt;default_color_type&lt;/code&gt; の &lt;code&gt;std::vector&lt;/code&gt; から作られた &lt;code&gt;iterator_property_map&lt;/code&gt;で、添え字マップには &lt;code&gt;i_map&lt;/code&gt; を用いる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_index_map(VertexIndexMap i_map)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは各頂点を &lt;code&gt;[0, num_vertices(g))&lt;/code&gt; の範囲において整数にマップする。 このパラメータはデフォルトのカラー・プロパティ・マップが使われた時にのみ必要である。 &lt;code&gt;VertexIndexMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルでなければならない。マップの値型は汎整数型でなければならない。グラフの頂点記述子型はマップのキー型として使用できる必要がある。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_index, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL: &lt;code&gt;buffer(Buffer&amp;amp; Q)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;頂点が発見される順序を決定するために使用されるキュー。もしFIFOキューが使われると、 巡回は通常の BFS 順序付けに従う。他の型のキューも使用できるが、巡回順序は異なる。例えば Dijkstra のアルゴリズムは優先度付きキューを用いて実装することができる。&lt;code&gt;Buffer&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt; のモデルでなければならない。&lt;code&gt;buffer&lt;/code&gt; の &lt;code&gt;value_type&lt;/code&gt; はグラフの &lt;code&gt;vertex_descriptor&lt;/code&gt; 型でなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;boost::queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E + V) である。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(v, g)&lt;/code&gt; は、探索の開始前に各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt; は、各頂点においてそれがキューから削除される時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、各頂点のあらゆる出辺において、頂点が キューから削除された後で直ちに呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt; に加えて 辺が木の辺の場合に呼び出される。辺 &lt;code&gt;e&lt;/code&gt; の終点はこの時に発見される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(u, g)&lt;/code&gt; は、アルゴリズムが初めて頂点 &lt;code&gt;u&lt;/code&gt; を通った時に呼び出される。始点に近い全ての頂点が発見されており、始点から遠方に離れた頂点はまだ発見されていない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.non_tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt; に加えて辺が tree edge でない場合に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.gray_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が灰色に色づけされている場合に呼び出される。灰色は頂点が現在 キュー中にある印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.black_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が黒色に色づけされている場合に呼び出される。黒色は頂点がもはやキュー中にはない印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、 &lt;code&gt;u&lt;/code&gt; の全ての出辺が調べられ、全ての隣接頂点が発見された後で呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/examples/bfs-example.cpp.html&#34;&gt;examples/bfs-example.cpp&lt;/a&gt; 中にある例は、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_overview.html#bfs-algorithm&#34;&gt;Figure 6&lt;/a&gt; のグラフにおいて BGL 幅優先探索アルゴリズムを用いて実演している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/examples/bfs-example2.cpp.html&#34;&gt;examples/bfs-example2.cpp&lt;/a&gt; のファイルは同じ例を含むが、使われている &lt;code&gt;adacency_list&lt;/code&gt; クラスは &lt;code&gt;VertexList&lt;/code&gt; を持っており、&lt;code&gt;EdgeList&lt;/code&gt; が &lt;code&gt;listS&lt;/code&gt; に置かれている。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>breadth_first_visit -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/graph/breadth_first_visit.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;breadth_first_visit&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;P&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; breadth_first_visit(&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; G, 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bgl_named_params&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;P, T, R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; params);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFSVisitor&lt;/a&gt;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ColorMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; breadth_first_visit
  (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, 
   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;IncidenceGraph&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor s, 
   &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; Q, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFSVisitor&lt;/a&gt; vis, ColorMap color)
&lt;/pre&gt;&lt;/div&gt;

この関数はカラー・マーカーがアルゴリズム中で初期化されないことを除けば、基本的に &lt;code&gt;breadth_first_search()&lt;/code&gt; と同じである。 ユーザはアルゴリズムを呼ぶ前に全ての頂点の色が白色であることを確かめる責任がある。この違いでグラフの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/VertexListGraph.html&#34;&gt;Vertex List Graph&lt;/a&gt; である代わりに &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;Incidence Graph&lt;/a&gt; であることのみが要求される。 さらにこの違いはカラー・プロパティ・マップ中のより多くの柔軟性を考慮に入れている。例えば頂点上の部分的な関数を実装するだけのマップを使うことができる。そしてそれは探索がグラフのごく一部にしか及ばない場合、より良い空間効率であることができる。&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/breadth_first_search.hpp&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;IncidenceGraph&amp;amp; g&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有向グラフまたは無向グラフ。グラフの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/IncidenceGraph.html&#34;&gt;Incidence Graph&lt;/a&gt; のモデルでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;vertex_descriptor s&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探索が開始される始点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;名前付きパラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IN: &lt;code&gt;visitor(BFSVisitor vis)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズムの内側で &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS Visitor&lt;/a&gt; コンセプトで指定されたイベント・ポイントで呼び出されるビジタ・オブジェクト。ビジタ・オブジェクトは値渡しされる &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html#note_1&#34;&gt;[1]&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;bfs_visitor&amp;lt;null_visitor&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL/OUT: &lt;code&gt;color_map(ColorMap color)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはグラフを通る進行過程を保持するためにアルゴリズムによって使われる。 &lt;code&gt;ColorMap&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルでなければならなく、そのキー型はグラフの頂点記述子型でなければならなく、カラー・マップの値型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt; をモデルとしなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;get(vertex_color, g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTIL: &lt;code&gt;buffer(Buffer&amp;amp; Q)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;頂点が発見される順序を決定するために使用されるキュー。 もしFIFO キューが使われると、巡回は通常の BFS 順序付けに従う。 他の型のキューも使用できるが、巡回順序は異なる。 例えば Dijkstra のアルゴリズムは優先度付きキューを用いて実装することができる。 &lt;code&gt;Buffer&lt;/code&gt; の型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt; のモデルでなければならない。 &lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;boost::queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;時間計算量は O(E) である。&lt;/p&gt;
&lt;h2&gt;ビジタ・イベント・ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vis.initialize_vertex(v, g)&lt;/code&gt; は、探索の開始前に各頂点で呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt; は、各頂点においてそれがキューから削除される時に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt; は、各頂点のあらゆる出辺において、 頂点がキューから削除された後で直ちに呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt;に加えて辺が木の辺の場合に呼び出される。辺 &lt;code&gt;e&lt;/code&gt; の終点はこの時に発見される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.discover_vertex(u, g)&lt;/code&gt; は、アルゴリズムが初めて頂点 &lt;code&gt;u&lt;/code&gt; に通った時に呼び出される。始点に近い全ての頂点が発見されており、始点から遠方に離れた頂点はまだ発見されていない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.non_tree_edge(e, g)&lt;/code&gt; は、 &lt;code&gt;examine_edge()&lt;/code&gt; に 加えて辺が木の辺でない場合に呼び出される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.gray_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が灰色に色づけされている場合に呼び出される。 灰色は頂点が現在キュー中にある印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.black_target(e, g)&lt;/code&gt; は、 &lt;code&gt;non_tree_edge()&lt;/code&gt; に加えて調査時点で終点が黒色に色づけされている場合に呼び出される。 黒色は頂点がもはやキュー中にはない印である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt; は、 &lt;code&gt;u&lt;/code&gt; の全ての出辺が調べられ、全ての隣接頂点が発見された後で呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;注釈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html#note_1&#34; name=&#34;note_1&#34;&gt;[1]&lt;/a&gt; ビジタのパラメータは値渡しされるので、もしビジタが状態を持っているなら、アルゴリズムの間のいかなる状態の変更も、送ったビジタ・オブジェクトには行われずビジタ・オブジェクトのコピーに対して行われる。それゆえポインタまたはリファレンスによってこの状態をビジタに保持させることを望むかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001 &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/takashi-it@po6.nsk.ne.jp&#34;&gt;Takashi Itou&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mem_fn.hpp -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:archive/boost_docs/libs/mem_fn.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;mem_fn.hpp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント： &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/bind/mem_fn.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/bind/mem_fn.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#purpose&#34;&gt;目的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#faq&#34;&gt;FAQ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q1&#34;&gt;mem_fnを、標準の std::mem_fun[_ref]アダプタのかわりに使用できるか?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q2&#34;&gt;既に書いてしまったコード中のstd::mem_fun[_ref]を、 全てmem_fnで置き換えるべきか?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q3&#34;&gt;mem_fnは COM のメソッドに使えるか?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q4&#34;&gt;何故 BOOST_MEM_FN_ENABLE_STDCALL は最初から有効になっていないのか?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#interface&#34;&gt;インタフェース&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#requirements&#34;&gt;必須事項&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#get_pointer&#34;&gt;get_pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#mem_fn&#34;&gt;mem_fn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#implementation&#34;&gt;実装&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#files&#34;&gt;ファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#dependency&#34;&gt;依存関係&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#number-of-arguments&#34;&gt;引数の上限個数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#stdcall&#34;&gt;&#34;&lt;strong&gt;stdcall&#34; と &#34;&lt;/strong&gt;fastcall&#34; のサポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#purpose&#34; name=&#34;purpose&#34;&gt;目的&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::mem_fn&lt;/code&gt; は、標準関数である&lt;code&gt;std::mem_fun&lt;/code&gt; と &lt;code&gt;std::mem_fun_ref&lt;/code&gt;の一般化である。&lt;code&gt;mem_fn&lt;/code&gt;は、2つ以上の引数をとる メンバ関数へのポインタをサポートし、また&lt;code&gt;mem_fn&lt;/code&gt;の戻す関数オブジェクトは第一引数に、 (訳注: そのメンバ関数の属するクラスのインスタンスを指すような) ポインタ、参照、スマートポインタをとることができる。 &lt;code&gt;mem_fn&lt;/code&gt;は、メンバ変数へのポインタも、引数をとらず自身への定数参照を 戻す関数とみなすことによってサポートする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fn&lt;/code&gt;の目的は2つある。一つ目は、コンテナにスマートポインタが格納されている場合であっても、 次のような&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Shape&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;draw));
&lt;/pre&gt;&lt;/div&gt;

見慣れた文法によって、メンバ関数の呼び出しを可能にすることである。&lt;/p&gt;
&lt;p&gt;二つ目は、メンバ関数へのポインタを関数オブジェクトのように取り扱いたいライブラリ開発者に、 実装の道具として使用して貰うことである。例えば、あるライブラリは次のようにしてより便利な &lt;code&gt;for_each&lt;/code&gt;アルゴリズムを提供することができ、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;It&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; for_each(It first, It last, R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) ())
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(first, last, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(pmf));
}
&lt;/pre&gt;&lt;/div&gt;

このアルゴリズムは次のようにして手軽に利用することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;for_each(v.begin(), v.end(), &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Shape&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;draw);
&lt;/pre&gt;&lt;/div&gt;

このアルゴリズムの機能を文書化する際には、単に次のように書けば良い：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;template&amp;lt;class It, class R, class T&amp;gt;&lt;/code&gt;
&lt;code&gt;void for_each(It first, It last, R (T::*pmf) ());&lt;/code&gt;
&lt;strong&gt;結果:&lt;/strong&gt; &lt;code&gt;std::for_each(first, last, boost::mem_fn(pmf));&lt;/code&gt; と同等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ここで、 &lt;code&gt;boost::mem_fn&lt;/code&gt; の部分はこのページへのリンクとするとよいだろう。 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;bindのドキュメント&lt;/a&gt; にそのような例があるので参照のこと。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fn&lt;/code&gt; は1つの引数(メンバ関数へのポインタ)をとり、標準あるいは独自の アルゴリズムに渡すのに適した関数オブジェクトを戻す：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X
{
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f();
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;g&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f));
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;h&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X &lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f));
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;k&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), v.end(), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mem_fn(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;f));
};
&lt;/pre&gt;&lt;/div&gt;

戻される関数オブジェクトは、引数のメンバ関数ポインタと同じ引数をとることに加え、 インスタンスを表すための「柔軟な」第一引数をとる。&lt;/p&gt;
&lt;p&gt;関数オブジェクトが、適切なクラス(上の例では &lt;code&gt;X&lt;/code&gt;)を指すポインタでも参照でも ない第一引数&lt;code&gt;x&lt;/code&gt;をもって呼ばれた場合、関数オブジェクトは&lt;code&gt;get_pointer(x)&lt;/code&gt; を用いて&lt;code&gt;x&lt;/code&gt;からポインタを得ようとする。 スマートポインタの作者は、自分たちのスマートポインタ向けの適切な&lt;code&gt;get_pointer&lt;/code&gt;関数 を定義(overload)しておくことで、それを&lt;code&gt;mem_fn&lt;/code&gt;対応とすることができる。&lt;/p&gt;
&lt;p&gt;[注意: &lt;code&gt;get_pointer&lt;/code&gt; の戻り値はポインタでなくともよい。 &lt;code&gt;(x-&amp;gt;*pmf)(...)&lt;/code&gt;という形式でメンバ関数が呼び出せるなら、どんなオブジェクトでも問題ない。]&lt;/p&gt;
&lt;p&gt;[注意: ライブラリは、&lt;code&gt;get_pointer&lt;/code&gt; の非限定的 (訳注:名前空間を明示しない) 呼び出しを行なう。 そのため、引数依存検索の過程では、オーバーロードされた&lt;code&gt;boost::get_pointer&lt;/code&gt;関数群に加えて、 そのスマートポインタが定義された名前空間内の&lt;code&gt;get_pointer&lt;/code&gt;関数群も検索対象になる。]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fn&lt;/code&gt;が戻す全ての関数オブジェクトは、&lt;code&gt;result_type&lt;/code&gt;なる&lt;code&gt;typedef&lt;/code&gt;を開示する。 この&lt;code&gt;typedef&lt;/code&gt;は、メンバ関数の戻り型を表す。メンバ変数を渡した場合には、&lt;code&gt;result_type&lt;/code&gt; はそのメンバ変数の型の定数参照として定義される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#faq&#34; name=&#34;faq&#34;&gt;FAQ&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q1&#34; name=&#34;Q1&#34;&gt;mem_fnを、標準の std::mem_fun[_ref]アダプタのかわりに使用できるか?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;はい。単純な使い方では、&lt;code&gt;mem_fn&lt;/code&gt; は標準のアダプタが提供しないいくつかの機能を提供する。 &lt;code&gt;std::bind1st&lt;/code&gt;、&lt;code&gt;std::bind2nd&lt;/code&gt;、&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/compose/index.html&#34;&gt;Boost.Compose&lt;/a&gt; と標準のアダプタを組み合わせるような複雑な使い方をしている場合は、 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;&lt;code&gt;boost::bind&lt;/code&gt;&lt;/a&gt; を使用するように書き換えることで、&lt;code&gt;mem_fn&lt;/code&gt;の恩恵を自動的に受けることができる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q2&#34; name=&#34;Q2&#34;&gt;既に書いてしまったコード中のstd::mem_fun[_ref]を、 全てmem_fnで置き換えるべきか?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;いいえ。そうする強い理由がないならすべきではない。&lt;code&gt;mem_fn&lt;/code&gt; は、標準のアダプタに 非常に良く似ているが、100%の互換性があるわけではない。特に、&lt;code&gt;mem_fn&lt;/code&gt;は、標準の アダプタとは違って &lt;code&gt;std::[const_]mem_fun[1][_ref]_t&lt;/code&gt; 型のオブジェクトを戻さないので、 標準の &lt;code&gt;argument_type&lt;/code&gt; 及び &lt;code&gt;first_argument_type&lt;/code&gt; という (nested) &lt;code&gt;typedef&lt;/code&gt; を 用いて第一引数の型を記述することが (完全には) できない。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q4&#34; name=&#34;Q3&#34;&gt;mem_fnは COM のメソッドに使えるか?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;はい。&lt;code&gt;#define BOOST_MEM_FN_ENABLE_STDCALL&lt;/code&gt; とすれば可能である。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#Q4&#34; name=&#34;Q4&#34;&gt;何故 BOOST_MEM_FN_ENABLE_STDCALL は最初から有効になっていないのか?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;特定のベンダへの依存を避けるため、可搬性のない拡張は、一般にデフォルトでオフにされるべきである。 もし &lt;code&gt;BOOST_MEM_FN_ENABLE_STDCALL&lt;/code&gt; がデフォルトで有効であったなら、あなたはそうとは気づかずに その拡張を使ってしまい、結果としてあなたのコードの可搬性が損なわれるかもしれない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#interface&#34; name=&#34;interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#synopsis&#34; name=&#34;synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost
{

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; get_pointer(T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) ());

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) () &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;&lt;/i&gt;&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt; mem_fn(R T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pm);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-3&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1));

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-4&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-5&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1, A2));

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-6&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1, A2) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実際には、より多くの引数をとるような関数が、更にいくつかオーバーロードされている&lt;/span&gt;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#requirements&#34; name=&#34;requirements&#34;&gt;必須事項&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Synopsis で述べられた全ての &lt;em&gt;unspecified-N&lt;/em&gt; 型は &lt;code&gt;CopyConstructible&lt;/code&gt; (コピーコンストラクト可能) かつ &lt;code&gt;Assignable&lt;/code&gt; (代入可能) であること。そのためのコピーコンストラクタ及び代入演算子 は例外を送出しないこと。 &lt;em&gt;unspecified-N&lt;/em&gt; &lt;code&gt;::result_type&lt;/code&gt; は &lt;code&gt;mem_fn&lt;/code&gt; に渡されたメンバ関数ポインタの戻り型、と定義されること (Synopsis での &lt;code&gt;R&lt;/code&gt;)。 &lt;em&gt;unspecified-2-1&lt;/em&gt; &lt;code&gt;::result_type&lt;/code&gt; は &lt;code&gt;R const &amp;amp;&lt;/code&gt; 、と定義されること。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#get_pointer&#34; name=&#34;get_pointer&#34;&gt;get_pointer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; get_pointer(T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p)
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： &lt;code&gt;p&lt;/code&gt;
- 例外： 送出しない。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#mem_fn&#34; name=&#34;mem_fn&#34;&gt;mem_fn&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) ())
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t)&lt;/code&gt; は &lt;code&gt;(t.*pmf)()&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt;あるいはその派生型の左辺値である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)()&lt;/code&gt; と等価である(それ以外の場合)。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;&lt;/i&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) () &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t)&lt;/code&gt; は &lt;code&gt;(t.*pmf)()&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T [const]&lt;/code&gt; あるいはその派生型である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)()&lt;/code&gt; と等価である(それ以外の場合)。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;i&gt;unspecified&lt;span style=&#34;color: #666666&#34;&gt;-2-1&lt;/span&gt;&lt;/i&gt; mem_fn(R T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pm)
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t)&lt;/code&gt; は &lt;code&gt;t.*pm&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T [const]&lt;/code&gt; あるいはその派生型である場合)。 あるいは &lt;code&gt;get_pointer(t)-&amp;gt;*pm&lt;/code&gt; と等価である（それ以外の場合）。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; unspecified&lt;span style=&#34;color: #666666&#34;&gt;-3&lt;/span&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1))
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t, a1)&lt;/code&gt; は &lt;code&gt;(t.*pmf)(a1)&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; あるいはその派生型の左辺値である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)(a1)&lt;/code&gt; と等価である（それ以外の場合）。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; unspecified&lt;span style=&#34;color: #666666&#34;&gt;-4&lt;/span&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t, a1)&lt;/code&gt; は &lt;code&gt;(t.*pmf)(a1)&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T [const]&lt;/code&gt; あるいはその派生型である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)(a1)&lt;/code&gt; と等価である（それ以外の場合）。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; unspecified&lt;span style=&#34;color: #666666&#34;&gt;-5&lt;/span&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1, A2))
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t, a1, a2)&lt;/code&gt; は &lt;code&gt;(t.*pmf)(a1, a2)&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; あるいはその派生型の左辺値である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)(a1, a2)&lt;/code&gt; と等価である（それ以外の場合）。
- 例外： 送出しない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; unspecified&lt;span style=&#34;color: #666666&#34;&gt;-6&lt;/span&gt; mem_fn(R (T&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;pmf) (A1, A2) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

- 戻り値： 関数オブジェクト &lt;code&gt;f&lt;/code&gt; を戻す。ここで、式 &lt;code&gt;f(t, a1, a2)&lt;/code&gt; は &lt;code&gt;(t.*pmf)(a1, a2)&lt;/code&gt; と等価である (&lt;code&gt;t&lt;/code&gt; が &lt;code&gt;T [const]&lt;/code&gt; あるいはその派生型である場合)。 あるいは &lt;code&gt;(get_pointer(t)-&amp;gt;*pmf)(a1, a2)&lt;/code&gt; と等価である（それ以外の場合）。
- 例外： 送出しない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#implementation&#34; name=&#34;implementation&#34;&gt;実装&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#files&#34; name=&#34;files&#34;&gt;ファイル&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;boost/mem_fn.hpp (メインヘッダ)&lt;/li&gt;
&lt;li&gt;boost/bind/mem_fn_cc.hpp (mem_fn.hpp より使用される。直接インクルードしないこと。)&lt;/li&gt;
&lt;li&gt;boost/bind/mem_fn_vw.hpp (mem_fn.hpp より使用される。直接インクルードしないこと。)&lt;/li&gt;
&lt;li&gt;boost/bind/mem_fn_template.hpp (mem_fn.hpp より使用される。直接インクルードしないこと。)&lt;/li&gt;
&lt;li&gt;libs/bind/test/mem_fn_test.cpp (テスト)&lt;/li&gt;
&lt;li&gt;libs/bind/test/mem_fn_derived_test.cpp (派生オブジェクトでのテスト)&lt;/li&gt;
&lt;li&gt;libs/bind/test/mem_fn_fastcall_test.cpp (&lt;code&gt;__fastcall&lt;/code&gt;のテスト)&lt;/li&gt;
&lt;li&gt;libs/bind/test/mem_fn_stdcall_test.cpp (&lt;code&gt;__stdcall&lt;/code&gt;のテスト)&lt;/li&gt;
&lt;li&gt;libs/bind/test/mem_fn_void_test.cpp (戻りが&lt;code&gt;void&lt;/code&gt;であるケースのテスト)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#dependency&#34; name=&#34;dependency&#34;&gt;依存関係&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Config&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#number-of-arguments&#34; name=&#34;number-of-arguments&#34;&gt;引数の上限個数&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この実装では、8つまでの引数をとるメンバ関数がサポートされている。これは、設計に固有の 制限という訳ではなく、実装の詳細である。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#stdcall&#34; name=&#34;stdcall&#34;&gt;&#34;&lt;strong&gt;stdcall&#34; と &#34;&lt;/strong&gt;fastcall&#34; のサポート&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;いくつかのプラットフォームでは、 &lt;strong&gt;呼び出し規則&lt;/strong&gt; (どのように関数が起動されるかの規則: 引数はどのように渡されるのか、戻り値はどのように扱われるのか、もしスタックを使用したなら、 誰がそれを奇麗にするのか) の異なるような何種類かのメンバ関数を作成できる。&lt;/p&gt;
&lt;p&gt;例えば、Windows API の関数と、COMインタフェースのメンバ関数は、 &lt;code&gt;__stdcall&lt;/code&gt; という呼び出し規則を用いるし、 Borland の VCL コンポーネントは &lt;code&gt;__fastcall&lt;/code&gt; を用いる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fn&lt;/code&gt; を &lt;code&gt;__stdcall&lt;/code&gt; メンバ関数に用いるには、mem_fn.hpp が (直接、あるいは間接的に) インクルードされる前に マクロ &lt;code&gt;BOOST_MEM_FN_ENABLE_STDCALL&lt;/code&gt; を &lt;code&gt;#define&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mem_fn&lt;/code&gt; を &lt;code&gt;__fastcall&lt;/code&gt; メンバ関数に用いるには、mem_fn.hpp が (直接、あるいは間接的に) インクルードされる前に マクロ &lt;code&gt;BOOST_MEM_FN_ENABLE_FASTCALL&lt;/code&gt; を &lt;code&gt;#define&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;[注意: これは可搬性のない拡張であり、インタフェースの一部ではない。]&lt;/p&gt;
&lt;p&gt;[注意: いくつかのコンパイラは、 &lt;code&gt;__stdcall&lt;/code&gt; キーワードに対して最小限のサポートしか提供していない。]&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mem_fn.html#acknowledgements&#34; name=&#34;acknowledgements&#34;&gt;謝辞&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;get_pointer&lt;/code&gt;ベースの設計は、Rene Jageによる、特性クラスを用いて &lt;code&gt;mem_fn&lt;/code&gt;を ユーザ定義のスマートポインタに適合させるという提案に影響されたものである。&lt;/p&gt;
&lt;p&gt;フォーマルレビューの期間に、Richard Crossley、 Jens Maurer、 Ed Brey、その他の方々の示唆によって、たくさんの 改良があった。レビューマネージャは Darin Adler であった。&lt;/p&gt;
&lt;p&gt;Steve Anichini は、COMインタフェースが &lt;code&gt;__stdcall&lt;/code&gt; を使用していることを指摘した。&lt;/p&gt;
&lt;p&gt;Dave Abrahams は、不完全なコンパイラにおいても &#34;戻り値なし&#34; をサポートすべく、&lt;code&gt;bind&lt;/code&gt; と &lt;code&gt;mem_fn&lt;/code&gt; を改良した。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2001, 2002 by Peter Dimov and Multi Media Ltd. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 SATO Yusuke &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:y-sato@y-sa.to&#34;&gt;y-sato@y-sa.to&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BoostCon 2010 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/boostcon/2010.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:boostcon/2010.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;BoostCon 2010&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/&#34; target=&#34;_blank&#34;&gt;2010 Program - boostcon&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/2010_presentations&#34; target=&#34;_blank&#34;&gt;BoostCon 2010 Presentations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#clang-lib&#34;&gt;Clang: オープンソースのC++コンパイラライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#generic-programming-graph-lib&#34;&gt;ジェネリックプログラミングとBoost Graph Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#geometry&#34;&gt;幾何学のためのジェネリックプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#instantiations-must-go&#34;&gt;Instantiations Must Go!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#cpp0x-update&#34;&gt;C++0x update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#exception-safety&#34;&gt;C++での例外使用に関するガイドラインの再考 - 例外安全なコードを効果的に設計するための10の助言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-rad-framework&#34;&gt;RAD Spiritのためのフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#is-boost-broken&#34;&gt;Is Boost Broken?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/data-structure-visualizers&#34;&gt;Data Structure Visualizers in Visual Studio 2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#alabaster&#34;&gt;Boost.Alabaster: A Law Based Tester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#tool-builder&#34;&gt;C++ Tool-Builders Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#cpp0x-concurrency&#34;&gt;C++0x Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#basic-lock-free&#34;&gt;Lock-freeプログラミングの基礎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#tboost-stm&#34;&gt;TBoost.STMエンジン: コミット時無効化を使用したSoftware Transactional Memoryの効率化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-v2&#34;&gt;Using Spirit V2: Qi and Karma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#boost-test&#34;&gt;Production use of Boost.Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#asio-based-flash-xml-server&#34;&gt;An Asio Based Flash XML Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#msm-v2&#34;&gt;The Meta State Machine Library V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#overview-of-transactional-memory&#34;&gt;Transactional Memoryの概観&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#ame-pattern-library&#34;&gt;AME Patterns Library: モデリング、認識、シーケンシャルパターンの統合のためのジェネリックライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#type-erasure&#34;&gt;Type Erasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#dsel-design&#34;&gt;Protoによる実用的なDSELの設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#network-library-implementation&#34;&gt;柔軟なヘッダオンリーC++ネットワークライブラリ実装の手法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#mime&#34;&gt;A MIME library for Boost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#nt2&#34;&gt;The Numerical Template Toolbox : 高性能コンピューティングのための加速(Boost)されたGeneric配列ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#functional-programming&#34;&gt;C++による関数型プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#logic&#34;&gt;C++による論理型パラダイム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#qt&#34;&gt;QtとBoostによるクロスプラットフォーム開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-history-and-evolution&#34;&gt;Spiritの歴史と進化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#future-of-boost&#34;&gt;Future of Boost Panel ’10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#clang-lib&#34; name=&#34;clang-lib&#34;&gt;Clang: オープンソースのC++コンパイラライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clang: An Open-Source C++ Compiler Library&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#douglas-gregor&#34; target=&#34;_blank&#34;&gt;Douglas Gregor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clangは、C言語ファミリー(C, C++, Objective-C)のための新たなオープンソースコンパイラフロントエンドである。&lt;br /&gt;
C++コンパイラとして、Clangは速く提供できる生産品質なコンパイラであり、省メモリ使用、表現力豊かな診断、標準一致に関する強い関心で、低レベル仮想マシン(Low Level Virtual Machine ： LLVM)を通じて、様々な構造のためにコード生成を最適化した。&lt;/p&gt;
&lt;p&gt;しかし、Clangはコンパイラを超えるものである。&lt;br /&gt;
再使用可能なC++コンパイラライブラリとして設計され、Clangは大きなC++開発ツールを作るためのプラットフォームである。&lt;br /&gt;
Clang内部のデータ構造は、プログラムソースコードに関する完全な構文情報(マクロを含む、正確な位置情報)とセマンティクス(解決されたオーバーロード関数呼び出し、暗黙の変換)、両方を提供する。&lt;br /&gt;
その、Boost互換で、BSDライクなオープンソースライセンスは、新たなC++言語機能とアイデアのための潜在的な実験場としてや、C++コードを完全に、正しく構文解析することに依存するあらゆるツールのための理想的なベースにもなる。&lt;/p&gt;
&lt;p&gt;このトークでは、Clangコンパイラを導入し、その豊かな内部のデータ構造がどれほど大きなユーザーエクスペリアンスを提供するか、次に、Clangに基づく開発ツールを作るためのアーキテクチャ、主要なデータ構造と、ライブラリのチュートリアルに焦点をあてる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#generic-programming-graph-lib&#34; name=&#34;generic-programming-graph-lib&#34;&gt;ジェネリックプログラミングとBoost Graph Library&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming And the Boost Graph Library&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#jeremy-siek&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;グラフのアルゴリズムとデータ構造は、インターネットパケットルーティング、分子生物学、科学的なコンピューティング、電話ネットワーク設計などの多様な領域の問題を解決するが伝統的なグラフライブラリ設計は、十分な柔軟性を提供することに失敗していた。&lt;br /&gt;
Boost Graph Library(BGL)はSTLをグラフドメインに適用し、グラフ問題を解決するための非常に柔軟で効率的なライブラリとなった。&lt;br /&gt;
しかし、BGLは使うのが難しいため、このチュートリアルではプログラミングの基本原則を学び、それらがBGLでどう適用されるのかを学んでいく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#href&#34; name=&#34;geometry&#34;&gt;計算幾何のためのジェネリックプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming for Geometry&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#barend-gehrels&#34; target=&#34;_blank&#34;&gt;Barend Gehrels&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#bruno-lalande&#34; target=&#34;_blank&#34;&gt;Bruno Lalande&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#mateusz-loskot&#34; target=&#34;_blank&#34;&gt;Mateusz Loskot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Geometryは、現代のC++ジェネリックプログラミング手法を使用して設計された。&lt;br /&gt;
タグディスパッチはいたるところで使用され、メタ関数、テンプレートメタプログラミング、Traitsおよびコンセプトチェックを組み合わせた。&lt;br /&gt;
この講義では、タグディスパッチによって通常ではとれない値をとるなどの、手法を一歩一歩説明し、どのようにそれを使用することができるか、他の技術を組み合わせることができるかを解説する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#instantiations-must-go&#34; name=&#34;instantiations-must-go&#34;&gt;Instantiations Must Go!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#matt-calabrese&#34; target=&#34;_blank&#34;&gt;Matt Calabrese&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#zachary-laine&#34; target=&#34;_blank&#34;&gt;Zachary Laine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostCon 2009では、メタ関数を簡単に書くための取り組みで変なことをしていたが、あとで多くの専門家と話してそれが不可能であることがわかった。一方、彼らは時々ゾッとするようなTMPのコードをより通常の関数プログラミングのようなコードで書き、大部分のメタ関数のテンプレート定義(宣言ではない)をインスタンス化する必要性を取り除くおもしろい手法を発見した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#cpp0x-update&#34; name=&#34;cpp0x-update&#34;&gt;C++0x update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#michael-wong&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;
形式 ： 講義
トラック ： Track II 2010&lt;/p&gt;
&lt;p&gt;BoostCon 2009から継続して、最新コンパイラの実装状況に関するレポートと、C++0x機能に関する最新ニュースについての詳細を伝える。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#exception-safety&#34; name=&#34;exception-safety&#34;&gt;C++での例外使用に関するガイドラインの再考 - 例外安全なコードを設計するための10の助言&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Demystifying C++ Exceptions – 10 Tips to Effectively Design Exception-Safe Code&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#ken-joyner&#34; target=&#34;_blank&#34;&gt;Ken Joyner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例外安全なコードを書くことが挑戦的であることは有名である。これは、多くの開発者に、例外の使用が避けられるべきであると結論させる。しかし、この結論に関する問題は、開発者が例外を使わずにエラー安全なコードを書くことがより簡単であると仮定しているということである。私は、この仮定が間違っていると考える。その代わりに、私は実際には、多くの開発者がエラー安全なコードを書くというわけではないと考えている。そして、例外は発生するエラーを無視することは、より挑戦的になる。(あなたのプログラムが未処理例外で終わるので処理しなければならない)&lt;/p&gt;
&lt;p&gt;エラー安全なコードを書くのは例外の使用のあるなしにかかわらず、やりがいがある。そして、エラー安全なコードを書かないのは予測できない、不安定なコードをもたらす。&lt;/p&gt;
&lt;p&gt;この論文は、(いくつかの修正をした)例外安全性のレベルを再文書化した例外安全推奨を提供する。これは、会社や開発者が必要とする、安全性のレベルを達成するために従うべき実質的なガイドラインの包括的なマニュアルとなる。特定の推奨とともに例外を使用することで、エラー安全なコードを書くことを、例外を使用することへの付加的な利益を加えるとともに、挑戦的なことをしないで済むアシスタントライブラリを提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-rad-framework&#34; name=&#34;spirit-rad-framework&#34;&gt;RAD Spiritのためのフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Framework for RAD Spirit&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#joel-de-guzman&#34; target=&#34;_blank&#34;&gt;Joel de Guzman&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#hartmut-kaiser&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;従来のパーサージェネレータと比較したBoost Spiritパーサーの魅力は、それがC++に埋め込まれることである。ライブラリのユーザーは、C++コードにおいてExpression Templateを使ってパーサー文法を直接指定する。このアプローチには利点もあるが、同時に問題もある。&lt;/p&gt;
&lt;p&gt;最も目に付く問題点は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時間が長い&lt;/li&gt;
&lt;li&gt;エラーメッセージを理解するのが難しい&lt;/li&gt;
&lt;li&gt;パーサーのデバッグとテストが難しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という点である。&lt;/p&gt;
&lt;p&gt;小さな構文解析については、これらは許容できる。しかし、アクティブな開発の8年後、より複雑な構文解析の中で使用されるポイントに来た。2と3はどうにか、Protoを使用することで軽減できる。しかしそれは、ライブラリがもはや役に立たない点にコンパイル時間を増大させる。&lt;/p&gt;
&lt;p&gt;EBNF/PEG式を受け入れて、すぐに実行可能であるパーサーかC++ Boost Spiritコードを出力するツールを持つことはおもしろい。RADツールは、パーサーを記述することをできるだけ容易にする。&lt;/p&gt;
&lt;p&gt;私たちは、そのようなツールの設計と開発を示したい。明らかに、この「動的なSpirit」ツールは「静止なSpirit」を使用して書かれるだろう。これはSpiritを使用した、本当に実用的な例になるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#is-boost-broken&#34; name=&#34;is-boost-broken&#34;&gt;Is Boost Broken?&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#robert-ramey&#34; target=&#34;_blank&#34;&gt;Robert Ramey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostのいいところ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式的なレビュープロセスによるライブラリ品質と完全性の「証明」&lt;/li&gt;
&lt;li&gt;形式的なテスト、リリースプロセスの実施による信頼できる実装の「証明」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostは拡張性が高くない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テスト時間が長く、より長くなる・・・&lt;/li&gt;
&lt;li&gt;有名でないコンパイラをテストすることは難しい&lt;/li&gt;
&lt;li&gt;現在のテストはコンパイラ設定(RTTIのON/OFF、デバッグ/リリース、STLライブラリなど)のすべての可能な組み合わせを扱うことができるというわけではない&lt;/li&gt;
&lt;li&gt;より多くのライブラリが追加されるとき、インストールが面倒で、壊れやすくなる&lt;/li&gt;
&lt;li&gt;したがって、新規ユーザーがひとつのライブラリだけを使い始める場合でも、　Boostを使うための「コスト」と「オーバーヘッド」は時間とともに増加する。しかし、ひとつのライブラリをテスト／使用するための方法がない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostのアイデンティティの危機&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コアユーティリティの唯一のライブラリ？&lt;ul&gt;
&lt;li&gt;i) ツールがテスト、リリース、配置を行う&lt;/li&gt;
&lt;li&gt;ii) ライブラリのサブセットのテスト、リリース、配置が必要であると考えられる&lt;/li&gt;
&lt;li&gt;iii) 全てのライブラリのためのひとつのバージョンを振る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;あるいは、独立、分離されたライブラリのグループ(現在大きい)？&lt;ul&gt;
&lt;li&gt;i) 多く、あるいはほとんどのライブラリが他のBoostライブラリのサブセットにだけ依存する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の議論は、Boostが前者として始まり、後者へ向かって進化していきそうだということである。&lt;br /&gt;
Boostにとってすばらしい10年だったが、成功し続けるためには進化しなければならないだろう。&lt;br /&gt;
この発表では、私が、Boostがどのように変わらなければならないと思うかを説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#data-structure-visualizers&#34; name=&#34;data-structure-visualizers&#34;&gt;Data Structure Visualizers in Visual Studio 2010&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#stephan-t-lavavej&#34; target=&#34;_blank&#34;&gt;Stephan T. Lavavej&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多くのSTLクラスが説明を複雑にした。デバッグをより簡単にするために、Visual Studio 2005と2008は、人間が読めるようにSTLオブジェクトを表示する「Visualizer」を持っていた。誰でも、Boostクラスのような他の型のためのVisualizerを書くことができる。これはアンドキュメントで、サポートもされないが、非常に有用になりえる。&lt;/p&gt;
&lt;p&gt;この発表は、&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;および&lt;code&gt;map&lt;/code&gt;の表示を改善するためにVisualizerを書く方法について説明し、Visual Studio 2010の新しい特徴を利用する方法を紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#alabaster&#34; name=&#34;alabaster&#34;&gt;Boost.Alabaster: A Law Based Tester&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#joachim-faulhaber&#34; target=&#34;_blank&#34;&gt;Joachim Faulhaber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは、形式的に規定された法則あるいは公理に基づいて自動テストを提供する、Boostライブラリのための提案である。&lt;br /&gt;
テストシステムは3部から成る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;法則のインスタンス化変数を表わす型の並び上のクラステンプレートとして公理または法則を表現することを可能にする法則概念。&lt;/li&gt;
&lt;li&gt;与えられた法則と与えられた型の並び用の法則インスタンス化を任意に生成する、法則インスタンス用のジェネレーター。&lt;/li&gt;
&lt;li&gt;法則違反を選択し、単純性順序によってそれらを格納するフィルタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost Interval Containerライブラリの開発のために、Boost.Alabasterのプロトタイプは法則に基づいた開発(law based development)に使用された。手法とツールとしての法則に基づいたテスト(law based testing)は、多くの面で有益であることが判明した:&lt;/p&gt;
&lt;p&gt;形式仕様の探究はより深く根付いた設計決定を生じさせ、より耐久性のある設計に結びつく。進化のプロセスでは、一般的なソフトウェアに関してあなたが即座に作った公理で開発を始められなかったとしても、ソフトウェア開発(法則のテスト)では前部(仕様)が抽象化と抽象推論を引っ張り出す。法則に基づいた開発プロセスは、ソフトウェアだけでなくそのソフトウェアに関して保証することができる形式上のプロパティももたらす。それらのプロパティの検証はいつでも繰り返す(replicate)ことができる。テストは、退屈で愛されなかった義務から抽象と設計の品質を促進する非常にクリエイティブなプロセスへと変形される。法則に基づいたテストは、従来の単体テストが提示することができる利点をすべて持ち、それを超える方法である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#tool-builder&#34; name=&#34;tool-builder&#34;&gt;C++ Tool-Builders Workshop&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#douglas-gregor&#34; target=&#34;_blank&#34;&gt;Douglas Gregor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： ワークショップ&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多くの専門家のように、プログラマは、生産性を改善する様々なツールを使用し、プロジェクト特有のニーズに焦点を当てた自分のツールを作るだろう。不運にも、C++プログラマのために、よいC++ツールの構築は、C++コードを解析する固有の複雑さによって非常に複雑になる。C++の全てを解析することができるオープンソースライブラリの不足と結び付けられたこの複雑さは、C++ツールを他の言語でそれらに相当するものより劣らせていた。Clang( &lt;a href=&#34;http://clang.llvm.org&#34; target=&#34;_blank&#34;&gt;http://clang.llvm.org&lt;/a&gt; )は、大きなC++開発ツールを構築することをより簡単にすることによりこの不均衡に焦点を当てたサポートを意図した新たなオープンソースC++コンパイラライブラリである。&lt;/p&gt;
&lt;p&gt;このハンズオンワークショップでは、出席者は、新たなC++ツールを構築するためにClangライブラリを使用する方法を学習する。私たちはまず、C++プログラムを解析および識別する面白いプログラム構築から始める。そこから私たちは、その抽象構文ツリーによって語彙の構造(トークン、マクロのインスタンス化など)から意味的な構造(クラス、関数、式、テンプレートなど)までClangがどのようにプログラムを表わすかを知るだろう。最後に、私たちは手を汚して、Clangを使用して、あるC++ツールを構築する。私たちが構築する実際のツールは出席者によって決定されるだろう。しかし、可能性は以下のものを含んでいる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクト絶対コーディング標準、&lt;/li&gt;
&lt;li&gt;特定のオーバーロードが選ばれた理由の説明、&lt;/li&gt;
&lt;li&gt;クラスを自動的に生成するシリアライズコード、&lt;/li&gt;
&lt;li&gt;Boostライブラリから抽出するドキュメンテーション、&lt;/li&gt;
&lt;li&gt;あるいは、対話的にテンプレートやプリプロセッサのメタプログラムをデバッグする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったものを強化する。&lt;/p&gt;
&lt;p&gt;プログラム委員会は以下のことに注意する:&lt;/p&gt;
&lt;p&gt;私は、Clangに基づいた2つの異なるセッションを提案している。&lt;br /&gt;
90分の発表(「Clang: An Open-Source C++ Compiler Library」)は、Clangをコンパイラ、ライブラリおよびオープンソースプロジェクトと評するだろう:&lt;br /&gt;
これはあまり深く話せないため、実際には概要である。&lt;/p&gt;
&lt;p&gt;ワークショップは、去年のDaveによるハンズオンBoost++0xワークショップに沿った単なる実験ではない:&lt;br /&gt;
今年、私たちは、出席者にBoosterが使用するべきクールなツールを構築させることができるかどうか確かめたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#cpp0x-concurrency&#34; name=&#34;cpp0x-concurrency&#34;&gt;C++0x Concurrency&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#michael-wong&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この話では、私はBoostCon 09でのC++0x並列性の議論に引き続いて話していくつもりである。&lt;br /&gt;
とくに、C++のメモリモデル、新たなC++0xライブラリを通じて並列性がどのように扱われるか、スレッド管理、スレッド間のデータ共有、同期並列操作に関して話す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#basic-lock-free&#34; name=&#34;basic-lock-free&#34;&gt;Lock-freeプログラミングの基礎&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Basics of Lock-free Programming&lt;/li&gt;
&lt;li&gt;スピーカー ： Tony Van Eerd&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基礎から始め、共有データにアクセスするという問題を示し、ゆっくり問題を露出させていき、問題へのLock-freeによる解決策を示す。この話は以下を含む：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始性についての説明&lt;/li&gt;
&lt;li&gt;CAS命令とCASループについての説明&lt;/li&gt;
&lt;li&gt;Double-Checked-Locking Pattern(DCLP)の危険性とそれを避ける方法(メモリバリア)の説明&lt;/li&gt;
&lt;li&gt;read-request queueとwrite-request queueのアイデアに基づき、どのように複数のCPUが働くか理解できるモデルを提示しメモリバリアを説明する&lt;/li&gt;
&lt;li&gt;Lock free stackを提示する&lt;/li&gt;
&lt;li&gt;ABAと、それを回避する方法についての説明&lt;/li&gt;
&lt;li&gt;Lock-freeプログラミング(楽観的なrelaxed memory operation)におけるいくつかの最前線開発に触れる&lt;/li&gt;
&lt;li&gt;BoostとC++0xがどのようにLock-freeプログラミングに影響するかについて触れる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#tboost-stm&#34; name=&#34;tboost-stm&#34;&gt;TBoost.STMエンジン:コミット時無効化を使用したSoftware Transactional Memoryの効率化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the Integration Complexity of Software Transactional Memory with TBoost.STM&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#vicente-j-botet-escriba&#34; target=&#34;_blank&#34;&gt;Vicente J. Botet Escriba&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#justin-gottschlich&#34; target=&#34;_blank&#34;&gt;Justin Gottschlich&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#dwight-y-winkler&#34; target=&#34;_blank&#34;&gt;Dwight Y. Winkler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、具体的なTBoost.STMの内部エンジンの現状、トランザクションコンフリクトの検出、トランザクションがコミットできるかどうかを決定するプロセスを調査する。多くのtransactional memory(TM)は矛盾検知の最適化に専念するが、ほぼ全てのTMがトランザクションのコミット段階で同じ矛盾検知戦略を行う。つまり、彼らはコミット時に検証を行うのである。そこでは、トランザクションが、以前にコミットされたトランザクションによってコンフリクトチェックされる。コミット時検証(commit-time validation)が限られた競合を示す作業量に対して効率的な間、それは競合した作業量のために並列性をきびしく制限できる。&lt;/p&gt;
&lt;p&gt;ここでは、TBoost.STMがこのモデルからどう逸れるかを説明し、コミット時無効化(commit-time invalidation)を使用することでコミットする前に飛行中(コミットされていない)トランザクションがそれらのコンフリクトを全て解決する戦略について話す。コミット時無効化は競合マネージャ(CM:contention manager)にコミット時検証を通じて利用不可能なデータを供給し、CMが決定にBoost Concurrencyを作ることを可能にする。コミット時無効化はまた、メモリ集約的なトランザクションのためにコミット時検証より著しく少ない操作を必要とし、動的に検出されたread-onlyトランザクションのための操作と保証、どんなトランザクションでもO(N)時間で完全な不透明性を保証する(インクリメンタルな検証のO(N^2)より速い)。作業量競合の実験結果は、私たちの効率的なコミット時無効化されたSTMは、TL2(最高水準のSTM)より3倍速かった。&lt;/p&gt;
&lt;p&gt;しかし、コミット時無効化だけでは不十分である。プログラマはそれらがこの競合検出戦略の利点を完全に利用するために実行している作業量のための効率的な競合マネージャに書く方法を知らなければならない。私たちは、プログラマがどのように自身の競合マネージャに書くか、そして正しい競合マネージャが実行される作業量に基づくTBoost.STMの性能を根本的にどうしたら向上させることができるかを調査する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-v2&#34; name=&#34;spirit-v2&#34;&gt;Using Spirit V2: Qi and Karma&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#michael-caisse&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;機械、センサー、機材、クライアント/サーバーコミュニケーション、ファイル形式でさえ...コミュニケーションストリームの解析と生成はどこでも見るだろう。多くの場合、これらのタスクはその場限りの解決策を勧めるのに十分に単純であるか、あるいは小さい。Spirit 2.1ライブラリは、それらの「quick hacks」に取り組むのに十分に単純で、AST生成のために容易に拡張できる十分な機能のモデルを提供する。&lt;/p&gt;
&lt;p&gt;このセッションは、Spiritライブラリのパーサーとジェネレーター(Qi/Karma)による現実の経験を調査する。様々な製品の中で使用された、様々な小型/中型のパーサー/ジェネレーターを見るとともに、私たちは「rules-of-thumb」、およびQi/Karmaを持ったパーサー/ジェネレータードメインに取り組むためのガイドラインを確立するだろう。このセッションは、使用可能なXMLパーサーと、単純化されたXPathのようなノード抽出器の実装で終える。&lt;/p&gt;
&lt;p&gt;このセッションは、いくつかのレクチャーと、多くのチュートリアルを含む。&lt;br /&gt;
出席者は、知識と、Spirit Qi/Karmaで解析し生成することを始めるツールを持ち帰るだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#boost-test&#34; name=&#34;boost-test&#34;&gt;Production use of Boost.Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#gennadiy-rozental&#34; target=&#34;_blank&#34;&gt;Gennadiy Rozental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションでは、プロダクションコンポーネントにおいてのBoost.Testの様々な使用法のシナリオをカバーする。&lt;br /&gt;
とくに、以下の主題をカバーする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数実行を保護する&lt;code&gt;execution_monitor&lt;/code&gt;の使用法。&lt;/li&gt;
&lt;li&gt;高水準なプログラム実行保護のための&lt;code&gt;program_execution_monitor&lt;/code&gt;の使用法。様々な配置オプション。&lt;ul&gt;
&lt;li&gt;(New) 浮動小数点例外の取り扱い。&lt;/li&gt;
&lt;li&gt;(New) コールバックでの罠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(New) 生産コンポーネントにおけるBoostテストツールの使用法。&lt;/li&gt;
&lt;li&gt;単体テストにおいて：実装自体の内部を構築コンポーネントユニットテストする2つのアプローチ：&lt;ul&gt;
&lt;li&gt;a) コンパイル時のスイッチを使用する&lt;/li&gt;
&lt;li&gt;b) コンソールテスト実行と、共有ライブラリとして組み込まれた実装を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#asio-based-flash-xml-server&#34; name=&#34;asio-based-flash-xml-server&#34;&gt;An Asio Based Flash XML Server&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#michael-caisse&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reactiveシステムはいたるところで見つけられる。多くの待ちスレッドでそれらを実装する誘惑は強くなりえる。しかし、結果はほとんどいつも期待はずれである。&lt;/p&gt;
&lt;p&gt;Boost.Asioライブラリは、特定のクラスがネットワーク、シリアルポートI/O、タイマー、およびその他に向けられている状態で非同期なリソースを扱うためのフレームワークを提供する。このセッションでは、様々なシリアル入出力ハードウェアコンポーネントから接続されたFlashディスプレイへのデータストリームを送るサーバーを構築するつもりである。以前のセッションのときに開発したQiパーサーとKarmaジェネレータは、それらの適切な目的地へとシャッフルされるASTを作成するのに使われるだろう。&lt;/p&gt;
&lt;p&gt;この講演/チュートリアルは、Flash XML Socketからサーバーを組み合わせてデータストリーミングし、要求を受け取ることができるようにAsio、Spirit、Fusion、Phoenix、Smart_ptr、Thread、FunctionとBindを含むライブラリを使用するだろう。&lt;br /&gt;
出席者は、彼ら自身のAsioベースサーバーを作成するために、Asioモデルと様々な実装パターンを理解することになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#msm-v2&#34; name=&#34;msm-v2&#34;&gt;The Meta State Machine Library V2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#christophe-henry&#34; target=&#34;_blank&#34;&gt;Christophe Henry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostCon09でのMSM v1に関する私のアーティクルは、MDD(モデル駆動開発)アプローチと呼ばれるMDA(モデル駆動アーキテクチャ)を促進するというゴールをもつライブラリの主な特徴を示した。具体的に、その話はMSMの記述的に表現する性質を主張した。この論文は初めに、メインサポートされたUML機能を要約し、MSM v2によって提供される新たなフロントエンドでのそれらの使用法を示すだろう。第2部では、MDDコンテキストにおいて使用可能なより多くの能力の提供により、いまMSMがどのようにMDD法をより先に進めさせたかを知ることになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#overview-of-transactional-memory&#34; name=&#34;overview-of-transactional-memory&#34;&gt;Transactional Memoryの概観&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Overview of Transactional Memory Day&lt;/li&gt;
&lt;li&gt;スピーカー ： Tatiana Shpeisman&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transactional Memory(TM)は並列プログラミングを単純化し、制限のない実行モデルをサポートする現代の並列制御パラダイムである。この終日セッションは、それらの最近のTM研究開発について議論するために業界と学会のエキスパートを集める。Boost、IBM、Intel、Microsoft、およびSun Microsystemsから招待された講演者は、最新作の概要を提供してくれるだろう。セッションは彼らがTMの短期的、あるいは長期的な挑戦についての考えを示すところでパネルディスカッションを締めくくる。最後に、聴衆からの質問に答える。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#ame-pattern-library&#34; name=&#34;ame-pattern-library&#34;&gt;AME Patterns Library: モデリング、認識、シーケンシャルパターンの統合のためのジェネリックライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AME Patterns Library: a generic library for modeling, recognition, and synthesis of sequential patterns&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#stjepan-rajko&#34; target=&#34;_blank&#34;&gt;Stjepan Rajko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このチュートリアルは、モデリング、認識、シーケンシャルパターンの統合のためのオープンソースのジェネリックC++ライブラリであるAMEパターンライブラリについて発表する。&lt;/p&gt;
&lt;p&gt;このライブラリは、ジェスチャーや音声認識などのアプリケーション、およびそのようなパターンの統合に役立つ。また、隠れマルコフモデル(Hidden Markov Model)などのモデルのための汎用ライブラリとして使用することができる。コンセプトベースのジェネリックプログラミングの使用は、ライブラリに大きな柔軟性を与える。パターン解析が多くのドメインにまたがるので、それは役立つだろう。&lt;/p&gt;
&lt;p&gt;また、このライブラリはさらに、プログラミングの計算量、柔軟性、汎用性、およびコンパイルタイムの異なるトレードオフを提供する、いくつかのAPIレベルを提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#type-erasure&#34; name=&#34;type-erasure&#34;&gt;Type Erasure&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#nevin-liber&#34; target=&#34;_blank&#34;&gt;Nevin Liber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ Template Metaprogrammingで見つかった定義から始め、Type Erasureとは何かと、それがどのような利点とコストがあるかについて話す。継承ベースのインタフェースから、それをType Erasureで変換する例から始める。Boost.AnyとBoost.Functionの簡易実装をカバーする予定だ。&lt;/p&gt;
&lt;p&gt;regular型とクラスの概念について触れる。( &lt;a href=&#34;http://stlab.adobe.com/wiki/index.php/Image:2008_06_26_classes_that_work.pdf&#34; target=&#34;_blank&#34;&gt;http://stlab.adobe.com/wiki/index.php/Image:2008_06_26_classes_that_work.pdf&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;それと共に、Copyable/Assignable型のコンテナを使用することでBoost.shared_ptrとBoost.Pointer Containerを比較する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#dsel-design&#34; name=&#34;dsel-design&#34;&gt;Protoによる実用的なDSELの設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical DSEL Design with Proto&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#eric-niebler&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この発表は、Boost.Protoで有用なDSELを急速に構築する方法に注目する。&lt;/p&gt;
&lt;p&gt;このセッションは、数個の現実世界のDSELの設計と実装に踏み出すだろう。簡単な例(例えば、Boost.Assignのmake_list_of())から始めて、中級(例えば、Howard Hinnantのfutureグループ)、最後に、単純化されたPhoenixライブラリの設計について解説する。現実世界のライブラリ設計問題への解決策に重点を置く。特定の現実世界の問題を通じて、ProtoによってC++でそれを実装する価値があるように、一般的なDSELの価値が明白になるだろう。また、コンパイル時間とテンプレートのエラーメッセージについて議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#network-library-implementation&#34; name=&#34;network-library-implementation&#34;&gt;柔軟なヘッダオンリーC++ネットワークライブラリ実装の手法&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Techniques in Flexible Header-Only C++ Network Library Implementations&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#dean-michael-berris&#34; target=&#34;_blank&#34;&gt;Dean Michael Berris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この論文は、Boost.Asio上に単純ではあるが強力なヘッダオンリーC++ネットワークライブラリを提供するcpp-netlibプロジェクトによって使用された様々な手法に重点を置く。&lt;/p&gt;
&lt;p&gt;一般的なプログラミング法則に従うベストプラクティスから発生している一方、使用される手法のうちのいくつかは他の既存のライブラリから借りられる。この論文は、共通メッセージ型、型安全なURIパーサーおよびオブジェクト表現の非常にモジュラーで柔軟な実装を達成するために使用されるイディオムと同様にライブラリの異なる部品の構成およびセマンティクス的に一貫したHTTPクライアントを強調することを目標とする。&lt;/p&gt;
&lt;p&gt;この論文は、ライブラリの様々なモジュールの実装の全体にわたって使用される現代C++の手法に関する調査と、同様にcpp-netlibプロジェクトへの入門として役立つ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#mime&#34; name=&#34;mime&#34;&gt;A MIME library for Boost&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#marshall-clow&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： lecture&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インターネットプロトコル中のデータをカプセル化する最も一般的な方法はMIME(Multipurpose Internet Mail Extensions:多目的インターネットメール拡張)を使用することである。このフォーマットはHTTP、emailおよび他の多くのプロトコルの中で使用される。&lt;/p&gt;
&lt;p&gt;私は、作成、解析、およびMIME構造の操作のために、Boostを包含するという視点から開始し、このライブラリを作る際の設計選択について話そう。(提案された)Boost.MIMEライブラリはDean Michael Berrisのネットワークライブラリによって使用される(だろう)。&lt;/p&gt;
&lt;p&gt;MIME処理ライブラリは、(スレッド、ネットワークI/Oおよび状態マシンを合わせた)ネットワークプロトコルを実装するために必要とされる基本ビルディングブロックのうちの1つである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#nt2&#34; name=&#34;nt2&#34;&gt;The Numerical Template Toolbox:高性能コンピューティングのための加速(Boost)されたGeneric配列ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Numerical Template Toolbox:BOOST’ed Generic Array Library for High Performance Computing&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#jean-thierry-lapreste&#34; target=&#34;_blank&#34;&gt;Jean-Thierry Lapreste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配列のようなデータ構造上での集中的、あるいは非自明なコンピューティングを行うことは、科学的なコンピューティング、ビデオゲーム開発、および他のフィールドで最も一般的なタスクのうちのひとつである。この事実は、そのようなタスクを行うために、ツール、言語、そしてライブラリといったかなりの数のものによってバックアップされる。私たちが自身をC++に基づいた解決策に制限する場合、1ダース以上のライブラリはテンプレートメタプログラミングに基づいたBlitz++やEigen2といったBLAS/LAPACKのC++バインディングが存在している。これらのライブラリの全てが良いパフォーマンス、または良い抽象化を提供する場合、そられのどれも非常に多くのユーザー型に適合するようには思えない。&lt;/p&gt;
&lt;p&gt;ここで私たちは、Numeric Template Toolbox(NT2)を提供する。これはテンプレートメタプログラミングで、配列に基づいた演算ライブラリで、直感的であるが拡張可能なユーザーAPIと開発者SDKを提供している間に、メモリハンドリングと自動的な並行処理のようなアーキテクチャの懸念に関して良い性能を出すためにrock-solid実装を目指す。また、全体のライブラリ設計とパフォーマンスのためにBoost.Components(MPI, Proto, Fusion, PP, Serialization, etc...)を使用しているという付加価値を強調する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#functional-programming&#34; name=&#34;functional-programming&#34;&gt;C++による関数型プログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Functional Programming in C++&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#david-sankel&#34; target=&#34;_blank&#34;&gt;David Sankel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数型プログラミング(FP)手法は、一般的で、簡潔で、合成可能で、正確なコードを生成する。最近まで、これらの手法の多くは学究的な世界と難解プログラミング言語(esoteric programming language)の領域に制限されていた。新たなC++とboostでの開発は最終的にこれらの高度な技術にアクセス可能にする。&lt;/p&gt;
&lt;p&gt;このセッションの最初では、いま可能なFP手法のHowとWhyを調査する。私たちは代数のデータ型、ポイントフリー高階関数、純粋、ジェネリックプログラミング、型族(Type Families)、圏論および実用的な関数記号をカバーする。&lt;/p&gt;
&lt;p&gt;セッションの第2部では、FPの事例研究について話す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1に、運動コントローラーに基づいた組み込みドメイン特化言語(EDSL)。&lt;/li&gt;
&lt;li&gt;第2に、他に類を見ないジェネリックなXMLシリアライズフレームワーク。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#logic&#34; name=&#34;logic&#34;&gt;C++による論理型パラダイム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Logic Paradigm for C++&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#roshan-naik&#34; target=&#34;_blank&#34;&gt;Roshan Naik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;論理型パラダイム(LP)は、オブジェクト指向、命令型、関数型のパラダイムと比較して、主流言語では表現をほとんど見ない、強力でチューリング完全なプログラミングパラダイムである。&lt;br /&gt;
LPは時々、プログラミングの聖杯と呼ばれるものへのコンピュータ科学の重要なアプローチである。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「ユーザーが問題を延べ、コンピュータがそれを解決する」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理論の起源は、アリストテレスが論理的な推論に厳格さをもたらすために形式論理を構築した約紀元前300年までさかのぼる。ラッセルとホワイトヘッドが数学をすべて実行することができるかもしれないことを示した時、理論は、現代の論理へ最近(1900年の初め)成熟した。&lt;/p&gt;
&lt;p&gt;この話は、Boostへ提案することを目的とする新たなオープンソースライブラリであるCastorを中心に展開する。LPをサポートするBoostの能力の拡張に加えて、これはBoostプログラマがLPと関数型のパラダイムからの機能を組み合わせて、イテレータや範囲の必要なしでストリーム、アルゴリズムおよびコンテナの統合を可能にするだろう。&lt;/p&gt;
&lt;p&gt;この話は、C++でLPの基本的な入門を提供する。そして、あなたをこのパラダイムについて考えるようにするための多くの例が続く。私たちは、既存のBoostとC++の概念で、それがどのように自然に混じるか話す。最後に、プログラマが自由にパラダイムを混合しマッチすることができる場合に強力なマルチパラダイム解決がどのように出現するか確かめるために範囲を広げる。LPのきれいで深い統合が、C++を源泉とする多くのデザインパターンがいまだ発見されていないことがこの話で明確になるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#qt&#34; name=&#34;qt&#34;&gt;QtとBoostによるクロスプラットフォーム開発&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cross-platform development with Qt and Boost&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#joao-p-r-abecasis&#34; target=&#34;_blank&#34;&gt;Joao P. R. Abecasis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このワークショップの意図は、Qtライブラリの簡潔な概要と、QtとBoostを混合するための現在の現実的解決策を提供することである。&lt;/p&gt;
&lt;p&gt;とくに私は、MOCモデルとQObjectモデル(BoostとQtを混合したプロジェクトのための構造システムインテグレーション)を調べ、Boostベースのコンポーネントを小さなサンプルアプリケーションに基づくQObjectシグナル/スロット実装に融合させる様相を調査するつもりである。&lt;/p&gt;
&lt;p&gt;私は、相互運用問題と、それがどのように改善することができるかについてBoostコミュニティからフィードバックを集めたいと考えている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#spirit-history-and-evolution&#34; name=&#34;spirit-history-and-evolution&#34;&gt;Spiritの歴史と進化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spirit: History and Evolution&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#joel-de-guzman&#34; target=&#34;_blank&#34;&gt;Joel de Guzman&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#hartmut-kaiser&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2010&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年、私たちは、90年代初期に非常に大きいGUIライブラリから枝分かれし、2001年にBoostデビューしたSpiritの10周年を祝福する。Spiritは、控えめな7ヘッダファイルのライブラリから成長して最も洗練されたBoostライブラリのうちの一つとなり、途中からBoost.Fusion, Boost.Phoenix, Boost.Wave, Boost.Protoライブラリの培養器となった。&lt;/p&gt;
&lt;p&gt;私たちは、歴史的観点からSpirit(そして、それに刺激されたライブラリ)を紹介したい。この発表は、およそ10年間で少なくても4つのライブラリへと発展させ、演算子を虐待し、クレイジーなテンプレートメタプログラムを好む、正真正銘のマッドサイエンティストであるBoost作者の経験と観点から、起爆剤を提供することを目標とする。もちろん、あちこちでC++トリックを誇示するのであれば、私たちはそれを助けることはできないが、私たちがそれを行うのと同じくらい、できるだけ簡単にすることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2010.html#future-of-boost&#34; name=&#34;future-of-boost&#34;&gt;Future of Boost Panel ’10&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#jeff-garland&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/previous-years/2010-program/#douglas-gregor&#34; target=&#34;_blank&#34;&gt;Douglas Gregor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： パネル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostには、メーリングリストの話題上で、丁寧で、役立つポストを適度に走らせる少数のモデレーターグループがある。さらに、彼らはウェブサイト、ソースリポジトリ、および他の行政機構の内部を管理する。また、大事なことを一つ言い残していましたが、モデレータは、Boostを促進するための委員会を監督する非公式の幹部の役割を務める。&lt;/p&gt;
&lt;p&gt;このセッションでは、モデレータにそれぞれBoostの将来のビジョンに関して5分ずつ話してもらう。しかし、セッションの大部分は聴衆からの質問と提案に専念するだろう。これは、Boostコミュニティの方向性に関して何でも聞けて、提案できる絶好のチャンスである。例えば、特別な政策、ツール、あるいはあなたの考えを採用する。&lt;/p&gt;
&lt;h2&gt;翻訳者&lt;/h2&gt;
&lt;p&gt;Akira Takahashi&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BoostCon 2011 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/boostcon/2011.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:boostcon/2011.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;BoostCon 2011&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://boostcon.boost.org/program/sessions/&#34; target=&#34;_blank&#34;&gt;http://boostcon.boost.org/program/sessions/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/2011_presentations&#34; target=&#34;_blank&#34;&gt;BoostCon 2011 Presentations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳プロジェクト&lt;/h2&gt;
&lt;p&gt;BoostCon 2011の資料を翻訳しています。&lt;/p&gt;
&lt;p&gt;翻訳したデータは各自でどこかに公開(たとえばGoogle Docs、slideshareなど)し、リンクを貼ってください。&lt;/p&gt;
&lt;p&gt;参加者は常時募集しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(eldesh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(akira)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-process&#34;&gt;Boost.Process：C++によるプロセス管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#fast-numerical-computation&#34;&gt;C++による高速数値計算 ： 遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割 : Unicodeのためのソリューション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2：データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-simd&#34;&gt;Boost.SIMDを用いる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#ready-fo-ipv6&#34; name=&#34;ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Are You Ready for IPv6?&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/wed/IPv6.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/wed/IPv6.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それはニュースの中にあった：IPv4アドレス空間が枯渇する。&lt;br /&gt;
その解決策は新たなインターネット・プロトコル、IPv6である。IPv6は長い間存在していたが、その使用を命じた政府機関のためのコードを開発しない限り、それについて今まで心配する必要がなかった。&lt;/p&gt;
&lt;p&gt;これは一夜の変更では済まないだろう。&lt;br /&gt;
IPv4はまだ数年は使われるだろうし、ネットワークアプリケーションは両方のプロトコルをサポートしなければならないだろう。&lt;/p&gt;
&lt;p&gt;この発表は、ネットワーク開発者が知る必要のあるIPv6の基本をカバーする。&lt;/p&gt;
&lt;p&gt;Boost.AsioのIPv6のサポートを見て回り、独立したBoost.Asioベースのネットワークアプリケーションプロトコルを独立させること、およびIPv6を用意するためのいくつかの設計戦略について議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#utree&#34; name=&#34;utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AST Construction with the Universal Tree&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bryce-lelbach&#34; target=&#34;_blank&#34;&gt;Bryce Lelbach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/fri/utree_talk.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/fri/utree_talk.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Spiritのコードベースに最近追加された&lt;code&gt;utree&lt;/code&gt;は、抽象構文木を表現するための設計されたジェネリックなデータ構造である。QiとKarmaへのバインディングは、Boost.Spiritによるパーサー、ジェネレータ開発の強力なツールとなる。この発表では、抽象構文木を構築、操作するための、パース／ジェネレートの4つのユースケースを示す：XML、シンボル式(S式)、JSONとCライクなソースコード。&lt;/p&gt;
&lt;p&gt;Spiritによる&lt;code&gt;utree&lt;/code&gt;の統合の詳細、および&lt;code&gt;utree&lt;/code&gt;中心のSpiritパーサー／ジェネレータの記述について議論する。さらに、他の内部表現(XMLのためのDOMツリー、JSONオブジェクトのための連想配列、小さなCソースコードのシンプルなVMバイトコード)に、utree ASTをコンパイルする設計手本をカバーする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#mpi-openmp&#34; name=&#34;mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Hybrid MPI+OpenMP Code Generation&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#khaled-hamidouche&#34; target=&#34;_blank&#34;&gt;Khaled Hamidouche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/bsppp.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/bsppp.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マルチプロセッサー市場の出現は、大規模並列コンピュータのアーキテクチャを根本的に変えた。何千ものスレッドによるハイパフォーマンスコンピューティングプラットフォームが展開されている。このコンテキストでは、ハイブリッドなMPI + OpenMPアプローチの使用はそのようなアーキテクチャにふさわしいプログラミングモデルと見なされる。しかし、パフォーマンスの改善が示される場合もあれば、示されない場合もある。ハイブリッドなMPIおよびOpenMPアプリケーションのパフォーマンスに影響している要因は多く、複雑で、相互の関係にある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MPI通信効率 ： アプリケーションは、MPI通信の種類(一対一、集団)、メッセージサイズ、接続や帯域といったネットワークの問題に関係がある。&lt;/li&gt;
&lt;li&gt;OpenMP並列効率 ： クリティカルセクションプリミティブを使用すると、OpenMPスレッド管理のオーバーヘッドやfalse sharingによってパフォーマンスが悪化する。&lt;/li&gt;
&lt;li&gt;MPIとOpenMPの相互作用 ： MPI通信部分の内部のロードバランシング、および使用されていないスレッドの問題は、並列度を低下させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両方のコードを書くことは、普通のHPCアプリケーションよりも専門技術の高いレベルを必要とするかもしれない。&lt;/p&gt;
&lt;p&gt;したがって、これらの新しいシステムへの効率的な利用は、重要な挑戦である。また、アプリケーションに責任を負う科学者およびエンジニアは、一般に、あまりHPCの専門家ではなく、通常、彼らはコードに新しい変化を持ち出すことや新たなプログラミングパラダイムを学ぶことはしたがらない。彼らは、効果的な自動並列化ツールとライブラリといった点での解決策を必要としている。&lt;/p&gt;
&lt;p&gt;この発表では、我々は2つの、相互関係のある異なるレベルの問題を解決を試みる。&lt;/p&gt;
&lt;p&gt;まず我々はバルク同期並列(Bulk Synchronous Parallelism ： BSP)パラダイムをすぐに導入し、それがいつ、そしてなぜ、ハイブリッドシステムの適当なプログラミングモデルと見なすことができるかを解説する。&lt;/p&gt;
&lt;p&gt;その後、我々はBSP++を紹介する。これは、BSPモデルに基づいた並列アプリケーションの迅速で容易な設計を可能にするBoostを用いたC++ライブラリである。我々は、BSP API、Lambda、PhoenixやMPIを含む、一般的に用いられるBoostライブラリに対するその相互作用、いくつかの実装詳細について記述し、いくつかの例を示す。&lt;/p&gt;
&lt;p&gt;最後に我々は、BSP++、Boost.Spirit、および Clang/LLVMによって構築された並列のプログラミングフレームワークであるBSPGenを紹介する。BSPGenは、XMLで書かれた小さなアプリケーションの記述と、並列化されていないCもしくはC++の関数から、実行時コストの先行評価とほぼ最適なOpenMPとMPIの間のバランスを決定するための配置空間の小さな探索に基づく、完全はハイブリッド並列のアプリケーションを生成することができる。実装詳細と例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-generic&#34; name=&#34;boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Generic: Concepts without Concepts&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#matt-calabrese&#34; target=&#34;_blank&#34;&gt;Matt Calabrese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/Boost.Generic.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/Boost.Generic.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : coming soon...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンセプトはおそらく、C++0xの中で最も望ましい機能のうちの一つだった。それによってプログラマはとくに、コメントではなくコードによるコンセプトの直接指定、コンセプトベースオーバーロード、テンプレートエラーメッセージの改善を含む、ジェネリックプログラミングの直接的な言語サポートを約束された。2009年のworking paperからのコンセプトの削除で、多くのプログラマが、将来のC++標準に、かなりの失望を残すことになった。&lt;/p&gt;
&lt;p&gt;しかし、10年以上の間、直接の言語サポートなしでC++プログラマは、Boost Graph Libraryを含む非常に強力なジェネリックライブラリをなんとか作ることができた。Boost Concept Check Libraryは、コンセプトの必要条件を検証するプロセスを実現可能にした。しかし、C++0xでコンセプトを削除したまま、事態をさらに1ステップ進めることは可能である。努力し、ライブラリはよりシンプルな、より特定のコンパイル時アサート、コンセプト要件を表現し、チェックするより強力な方法、ユーザー指定された自動で明示的なコンセプトマップのための設備と、ユーザーがコンセプトを書くためのコンセプトベースな関数テンプレートのオーバーロードを書く方法、人々が言語機能に期待するかもしれないものに驚くほど近いユーザビリティなども全てを提供することができ、提供する。&lt;/p&gt;
&lt;p&gt;この話は(レビュー前の)Boost.Genericへの入門である。&lt;/p&gt;
&lt;p&gt;コンセプト、コンセプトマップ、コンセプトベース関数テンプレートオーバーロードを作成するためのC++0xライブラリであり、Boost Concept Check Libraryを潜在的に置き換える、もしくは賞賛することを意図する。発表は、ライブラリの歴史、および短い入門に続き、パラダイムに慣れていない人々のためのジェネリックプログラミングの基本を最初に簡潔にカバーし、ライブラリを可能にするための根底にあるトリックへの導入に続く。その後、聴衆はBoost.Genericの基本的な使用法を示され、すでに提供されているコンセプトの要件チェックのためのコンパイル時アサートを指定する方法、それらのコンセプトに単純なコンセプトマップを作成する方法と、それら自身のアルゴリズムのためにコンセプトベースのオーバーロードを書く方法を示す。最後に、聴衆はBoost.Genericによる標準コンセプトの実装を通じて、標準との比較を見て回るだろう。&lt;/p&gt;
&lt;p&gt;「Boost.Generic ： コンセプトのないコンセプト」は、ライブラリ開発者、ユーザーの両方のためを意図する。それはC++の任意の合理的な量の経験を持ったプログラマにアクセス可能であるに違いない。基本アイデアは話の最初の数分でカバーされるが、ジェネリックプログラミングについての熟知が高く推奨される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#&#34; name=&#34;boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Infrastructure Workshop&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： ワークショップ&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostのコードとコミュニティがあったこと、あり続けたことで大成功した。しかし、操作性において我々のcode baseと同じ割合では発展していない。テストはより速くなりえる、インストールはより容易になりえる、ドキュメントの生成はより賢くなりえる、レビューはより多くの参加を得ることができ、そしてライブラリの維持はより楽しくなりえる。何年もの間、我々はこれらの問題に対処する方法について話したが、しかし我々は実際に変化をもたらすために合意と推進力を発生させられなかった。このワークショップは、これらに正面から何かをするチャンスだ。&lt;/p&gt;
&lt;p&gt;我々は方針を作成するために毎日90分間会合し、ツールを作成し、次の10年を通じてBoostの進化をサポートすることができるWebサービスを準備した。具体的なゴールは、カンファレンス参加者との間でのプロトタイプと有用な改善の実装で、より広いコミュニティの合意を獲得し、BoostConのあとすぐにBoostに採用されるされることである。我々には一週間しかない、したがって、生産力を最大限にするために、関心ある個々のトピックの小さなグループで活動する。Boostが採択することができるという方向へ率いることを保証するために、いくつかの短い投票を行い、その週を通じてBoostのメーリングリストでフィードバックを求めるだろう。&lt;/p&gt;
&lt;p&gt;十分なBoostモデレータおよびリリースマネージャー達は、カンファレンスに続く数ヶ月で、受け取ったアイデアを前身させるためにBoostConに出席することを計画する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-process&#34; name=&#34;boost-process&#34;&gt;Boost.Process ： C++によるプロセス管理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Process: Process management in C++&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/fri/Boost.Process.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/fri/Boost.Process.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Process はシステムのプロセス管理のためのライブラリである。これはシェルコマンドの実行や、子プロセスの生成、子プロセスに対する環境変数あるいは入出力ストリームの設定、子プロセスとの同期・非同期での通信、そして子プロセス終了の待機（あるいは強制終了）に使うことができる。&lt;/p&gt;
&lt;p&gt;発表パートではBoost.Processの進歩、設計上の決定、改良点に焦点を当てる。チュートリアルパートではBoost.Processが提案するいくつかのツールと、それらがどのようにプロセス管理で使われるかを説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-units&#34; name=&#34;boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Units&lt;/li&gt;
&lt;li&gt;スピーカー ：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#steven-watanabe&#34; target=&#34;_blank&#34;&gt;Steven Watanabe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-units-5364809&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-units-5364809&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Units はコンパイル時次元解析、単位変換のための自由度の高いライブラリである。これは、ユーザーがある単位の量を表現すると捉えた値の作成、無意味な操作の禁止、必要な場面での変換の適用によりプログラミングエラーを軽減するために設計された。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#cpp0x-status&#34; name=&#34;cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++0x Progress and Status&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#michael-wong&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： レクチャー&lt;/li&gt;
&lt;li&gt;トラック： I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/cpp0x_overview.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/cpp0x_overview.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの批准を今年にひかえ、BoostCon2010での更新から(2010-現在)議論の的になっている問題や、これまでの批准の進捗、前回の更新から追加されたさまざまな新機能について詳細を述べるとともに、巻き起こった議論について、またその問題をどのように解決しようとしたかについて、1.5時間頂いてレヴューを行なう。&lt;/p&gt;
&lt;p&gt;話者は、長年、IBMでカナダのC++標準化委員会のメンバーを務めてきた者だ。中程度のC++の知識がある者を対象にしているが、もちろん、どなたでも聴講可能である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-asio-extension&#34; name=&#34;boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creating Boost.Asio extensions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：  チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/wed/creating_boost_asio_extensions.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/wed/creating_boost_asio_extensions.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ソースコード : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.AsioはBoost C++ librariesの有名なポータブルネットワークライブラリである。&lt;br /&gt;
このライブラリが、Boost.Netという名前にならなかったのには理由がある。Boost.Asioの真の力は非同期的な操作を実装するためのフレームワークたりえる点である。ネットワーク機能はその非同期的な操作のよい実例の一つにすぎない。&lt;/p&gt;
&lt;p&gt;このチュートリアルでは、どのようにBoost.Asioを拡張することができるか、ということと、どうやって非同期的な処理を実装するかについて述べる。&lt;br /&gt;
まずは、既存の拡張である、ファイルやディレクトリを監視するディレクトリモニタを紹介する。&lt;br /&gt;
また、このフレームワークに適合しない非同期的な操作を紹介し、Boost.Asioの制限について示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#skoot&#34; name=&#34;skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design Journeys with Skoot, a Peer Oriented Generic Networking Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#cliff-green&#34; target=&#34;_blank&#34;&gt;Cliff Green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;効率的で、エレガントで、汎用的なC++ライブラリを完成させるまでの道程は、決して平坦ではない。GPSが壊れたかのように道を誤り、暗い路地をすり抜ける羽目になり、非常にストレスがたまる。&lt;br /&gt;
それと同時に、APIの設計を固めたり、利用箇所全てで機能性を検証することは、刺激的で満足のいく旅路となるだろう。&lt;br /&gt;
このプレゼンテーションでは、数々の設計上のトレードオフについて、またSkoot libraryで利用しているBoost librariesについて議論する。&lt;/p&gt;
&lt;p&gt;Skootは、分散環境やピア指向の処理環境で利用しやすい、C++のネットワーキングライブラリである。&lt;br /&gt;
また、TCP、UDPプログラミングにおける様々な通信パターンや利用法を単純化し抽象化する。&lt;br /&gt;
Skootは、Asio、Function、Bind、Shared(とWeak)Pointer、そしてOptionalといった多くのライブラリを利用している。&lt;br /&gt;
多くのC++開発者は汎用ライブラリの完成形だけを注視して、そこに至るまでの議論を軽視する傾向がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ある種のtype erasureに対し、テンプレート化クラスが意味があるのはどんな時か？&lt;/li&gt;
&lt;li&gt;非常に強力なテンプレート関数や関数オブジェクトがあるのに、多くのC++開発者がテンプレートクラスだけをありがたがるのは何故か？    &lt;/li&gt;
&lt;li&gt;いつでもデストラクトされる可能性のあるオブジェクトへの参照を有効にしつづける方法は？&lt;/li&gt;
&lt;li&gt;Boost libraryの魔法、Bindとは何か？ なぜそれがモミ林にいるキンキラの吸血鬼よりすばらしいのか？&lt;ul&gt;
&lt;li&gt;(訳註：モミは吸血鬼を封印する効果があるとされている。吸血鬼は光にも弱いため、&#34;glittering vampire in a forest of fir trees&#34;は二重の意味でありえない。これと対比させる事で、Bindの&#34;魔法&#34;の強力さを示している)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++で仮想テンプレートメンバ関数が必要になった場合、どうすればいいのか？&lt;/li&gt;
&lt;li&gt;Asioの実装者である、Chris Kohlhoffはノーベル賞か何かを受賞すべきか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの疑問はSkoot開発中に湧き、解決されていったが、これらを説明することで、Boost導師と言える領域に達していない開発者を啓発することができると思う。&lt;br /&gt;
このプレゼンテーションは、汎用的なテンプレートを基礎にした設計技法を学んでいる、また、FunctionとBind(と、その他のライブラリ)を基本構成要素としてどう利用するかについて興味があるような、熟練したC++開発者向けである。&lt;br /&gt;
ライブラリの使用方法や、API設計や洗練、また良いユニットテストの作成についても議論する。&lt;/p&gt;
&lt;p&gt;(人物紹介：Bio: Cliffは現在SeattleにあるBoeingに勤務する、経験豊かなC++開発者である。&lt;br /&gt;
氏の開発経歴の中で主なものは、ネットワーキングと複数のプログラミング言語での可用性の高い分散処理である。また、Prologに愛着を持っていることも付記しておく。&lt;br /&gt;
Cliffは、複数の新興企業に勤務した経歴がある。これらは今やすべて破産、買収されたが、実勢価格の自社株購入権を失った時でも、安定した給料を高く買われている。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#geneva&#34; name=&#34;geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Distributed parametric optimization with the Geneva library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/boostcon2011_geneva.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/boostcon2011_geneva.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションではBoost libraryに大きく依存している分散最適化アルゴリズムのオープンソースライブラリであるGenevaを紹介する。&lt;br /&gt;
Genevaは現在、勾配降下法、進化アルゴリズム、群アルゴリズムをカバーしており、まもなく焼きなまし法が追加されることになっている。&lt;br /&gt;
すべてのアルゴリズムは、候補となるソリューションが最適化アルゴリズムを自由に切り替えられるように、同じデータ構造に作用する。&lt;br /&gt;
Genevaはグリッド環境、クラウド環境、マルチコアシステム、クラスター上でも、大規模なパラメトリック最適化問題を解くことができる。&lt;br /&gt;
このライブラリは、同時に最適化問題に取り組む数百のクライアントでテストされている。&lt;br /&gt;
使用しているライブラリは、Boost.Serialization、Threads、Conversion、Date/Time、Function、Bindなど多岐にわたる。&lt;br /&gt;
このプレゼンテーションでは、ユーザーの視点から、Geneva library自体について、また、Boostで培われた経験について論じる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#fast-numerical-computation&#34; name=&#34;fast-numerical-computation&#34;&gt;C++による高速数値計算：遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast numerical computation in C++:Expression Templates and Beyond to Lazy Code Generation (LzCG)&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bojan-nikolic&#34; target=&#34;_blank&#34;&gt;Bojan Nikolic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/fast_numerical.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/fast_numerical.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expression templateは、数値計算において、強力な最適化を可能にするC++の機能である。&lt;/p&gt;
&lt;p&gt;Expression templateはBoost.uBLASや、他の有名なC++の数値計算ライブラリ (例えば、先駆けであるBlitz++やArmadilloなど) に用いられている。ATLASやFFTWのような&#34;標準&#34;となるC++で書かれたライブラリはまだない。なぜないのか? このチュートリアルの最初の章では、私は数値計算における最適化の挑戦について、最適化のためにどのようにしてexpression templateが使われているのか、そして、expression templateの使用を妨げる根本的な要因についてレビューを行う。&lt;/p&gt;
&lt;p&gt;2つめの章では、私はいくつかの数値計算フレームワークが、どのようにして、一般にC++-onlyのライブラリで達成されているよりも高いパフォーマンスを達成しているかについて紹介する。それらのライブラリでの重要な特徴は、複雑なコード生成、実行されるハードウエアへの正確な適応、そして、実行前に多くの異なる実装の性能を計る能力をもつことである。&lt;/p&gt;
&lt;p&gt;最後に、私は、どのようにすればC++のパフォーマンスを、Expression templateによってもたされるそれよりも高くできるかについて論議する。私は新しい開発途中のフレームワークを用いて、実際にどのように動いているかのデモを行う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#funding-boost&#34; name=&#34;funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Funding Boost development through national and international research programs and funds&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/BoostCon2011Funding.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/BoostCon2011Funding.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、まず、Boostの開発をサポートする目的で、国内・国際的な研究プログラムや資金を活用するための実現可能な方法について議論する。&lt;/p&gt;
&lt;p&gt;ゴールは3部構成である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boostの開発に役立てるために、国内、国際的な研究資金調達スキーム(NSFやEuropean Unionなど…)を活用するために、多国間の連携に向けて取り組み始めるには&lt;/li&gt;
&lt;li&gt;Boostを、世界各地の大学や工業大学でコンピュータサイエンス教育のカリキュラムで取りあげられるような標準的なトピックにするためには&lt;/li&gt;
&lt;li&gt;Boost開発に科学分野からの新しい参加者を取り込むには&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#future-of-boost&#34; name=&#34;future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future of Boost Panel ’11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#jeff-garland&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#eric-niebler&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostには、本筋の議論や、尊重すべき、また有用なメーリングリストを維持するために、ポストの承認と管理を含むメーリングリストの運用を行っている小規模のモデレータグループがいる。&lt;/p&gt;
&lt;p&gt;このグループは、Webサイトや、ソースリポジトリの管理やその他の管理業務も遂行している。&lt;/p&gt;
&lt;p&gt;また、少なくとも、Boostに関することを促進するために、委員会を監督する非公式幹部としての役割をも果す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#range-unicode&#34; name=&#34;range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割:Unicodeのためのソリューション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Conversion and Segmentation for Ranges: a Solution for Unicode&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/wed/unicode.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/wed/unicode.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一貫した世界のライティングシステムのうちのほとんどが通る、テキストを表現し、操作する業界標準であるUnicodeに対処するBoostでのソリューションの数多くの需要は常にあった。この話では、我々は、Google Summer of Code 2009で開始したソリューションを示す。Rangeのコンセプトに基づいて、計量で、非侵入的で、柔軟で、ジェネリックで、潜在的にlazyである。&lt;/p&gt;
&lt;p&gt;アルゴリズムをジェネリックにするために、全てが書き直された。また、それによって、このライブラリはいかなる既存のUnicodeソリューションにも依存しない。このライブラリは、いくつかの外部データを要求するが、ライブラリがそれ自身のデータベースに埋め込むにも関わらず、ライブラリを別のデータベースとリンクするために使用することができる明快で安定したABIがある。&lt;/p&gt;
&lt;p&gt;Unicodeライブラリのニーズは、スピンオフとして別のライブラリに至った：Convertライブラリは、N to M変換を使用して、容易にRangeを変換し、分割することを可能にするライブラリであり、Rangeを正格もしくはlazyにイテレートする。また、それはSIMDによって加速された変形の開発を助ける設備を提供する。このライブラリは、最初はUnicodeのために作られたが、我々はそれを文字エンコーディング変換と無関係な様々なものに使用することができることを示す。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#proto-edsl-design&#34; name=&#34;proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;
- Getting Jiggy with Proto — Hands-on Tutorial on C++ EDSL Design
- スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;
- 形式 ： チュートリアル
- トラック ： Track II 2011
- 発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/proto.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/proto.pdf&lt;/a&gt;
- 発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Embedded Domain Specific Languagesは、中小の大きさの問題を宣言的で効率的な手段で扱うための設計として、実際に選ばれることが増えている。とりわけ、C++はBoost.Protoのようなライブラリのおかげで、そのような開発の親言語として、本当に興味深い。&lt;/p&gt;
&lt;p&gt;このチュートリアルは、現実的なシチュエーションでのクイックスタートとなり、Boost.Protoを用いたコードが美しく小さく効率的であることをデモすることに焦点を当てている。&lt;/p&gt;
&lt;p&gt;チュートリアルは以下の要素から構成される:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短いライブラリの基本的なブロックのプレゼンテーション        &lt;/li&gt;
&lt;li&gt;単純な計算機のコードから、拡張可能なコアを持つ解析関数の微分を行うシステムのプロトタイプまでのガイド付きの練習問題。この問題は、Protoを用いてEDSLを構築するいくつかの段階と、Proto特有のイディオムについて示す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参加者はテンプレートメタプログラミングに関する知識を持つ中級か上級のC++ユーザが望ましい。昨年のEric NieblerによるProtoに関する発表を見るのもよいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#haskell-pseudo-cpp&#34; name=&#34;haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Haskell – The Pseudocode Language for C++ Template Metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bartosz-milewski&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 :&lt;ul&gt;
&lt;li&gt;Part1 &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz1.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part2 &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz2.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part3 &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz3.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/haskell/Bartosz3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++テンプレートメタプログラミングは使うのも解析するのもデバッグするのも難しいが、それはだいたいコンパイル時のC++が関数型言語的で構文がゲロいからである。うまくメタプログラミングするコツは、関数型プログラミングに精通して、C++メタプログラムのための擬似言語を作ることであるが、実のところ既にそのための言語はあり、そいつはHaskellとか言われている。このセッションではまず、そのHaskellで書いたコードと等価なC++のメタコードを並べることでHaskellがどんな言語かを紹介する。その後、Haskellを使った複雑なC++メタプログラムの読み書きの方法を示す。最後はC++における「実行できるテンプレート」の説明で、モナドとは何か、どうやってそれを使うかを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#intel-tm&#34; name=&#34;intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s C++ Software Transactional Memory Compiler and the Draft Specification of Transactional Language Constructs for C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#justin-gottschlich&#34; target=&#34;_blank&#34;&gt;Justin Gottschlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/boostcon_tm_spec.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/boostcon_tm_spec.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランザクションメモリ(TM)を利用すれば、プログラマからは複雑な共有メモリ管理が隠蔽されるため、並行プログラミングが容易になる。このセッションでは、最新のC++でのトランザクション言語構築のドラフト仕様について、ならびに、インテルのC++ software transactional memory (STM) compilerでの実装例について紹介する。&lt;/p&gt;
&lt;p&gt;Boost libraryの作者は高度に最適化され、極度にタイプセーフなソフトウェアを実装することを目標としている。&lt;br /&gt;
このセッションでは、厳格なタイプセーフと最適化を達成するために、Intel C++ STM compilerでどのようにトランザクションが利用されているかについて詳細に述べる。&lt;br /&gt;
特に、テンプレート宣言やラムダ式、コピーコンストラクタ、そして基本的な関数やクラスでどのようにトランザクションが利用されているか紹介する。&lt;br /&gt;
また、リラックス・トランザクションの概念について紹介し、この概念を用いて、取り消し不能なアクション(例えば、I/Oのように実行前に戻せないアクション)をどう扱うとよいかについて示す。&lt;/p&gt;
&lt;p&gt;最後に、最新のC++でのトランザクション言語構築のドラフトと、Intel’s C++ STM compilerのロードマップについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#mpl-graph&#34; name=&#34;mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introducing MPL.Graph&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#gordon-woodhull&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/mpl.graph.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/mpl.graph.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/introducing-mpl-graph-5262812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/introducing-mpl-graph-5262812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MPLメタプログラミングとBGLグラフコンセプトの過激な合いの子である、MPL.Graphがコンパイル時にメタデータのグラフを作成し走査するためのBoostライブラリとして提案された。&lt;/p&gt;
&lt;p&gt;グラフのデータ構造とアルゴリズムは様々な目的でコンパイルタイムに適用できる。例えば、クラス階層や、Expression Templateツリー、ステートマシンや文法は完全にコンパイルタイムに処理できるグラフである。また、呼び出しグラフや、オブジェクトの所有権、オブジェクト間のポインターは、部分的にコンパイルタイムに処理できるが、残りはランタイムに処理する必要があるグラフである。&lt;/p&gt;
&lt;p&gt;これらは全て、グラフのアルゴリズムを実行するために、標準的なグラフインターフェイスを適用することができるか、計算されたグラフから作り出される。仕様および分析にコンパイルタイムグラフを使用すれば、抽象化の無駄なランタイムサイクル回避でき、概念的な明快さと抽象化（一度&#34;メタ&#34;の壁を乗り越えられれば）が向上する。&lt;/p&gt;
&lt;p&gt;今のところ、MPL.GraphはBGLの&lt;code&gt;incidence_list&lt;/code&gt;と&lt;code&gt;adjacency_list&lt;/code&gt;データ構造と、&lt;code&gt;breadth_first_search&lt;/code&gt;と&lt;code&gt;depth_first_search&lt;/code&gt;アルゴリズムのコンパイルタイムバージョンを提供している。このライブラリはBoost.MSMで、リージョン(連結成分)と到達不能な状態とを区別するために、いまのところはサブライブラリとして使用されている。このトークではMPL.Graphの新しい用法を紹介する。(例えば、文法や、Fusion Graphとして知られるヘテロなグラフデータ構造など) また、最終的な目標である、コンパイルタイムグラフでランタイムグラフを記述する、&#34;グラフのグラフ&#34;といえるメタグラフについて少しだけ紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#lock-free-data-structure&#34; name=&#34;lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2： データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lockfree Programming Part 2: Data Structures&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#tony-van-eerd&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/wed/lockfree_2011_slides.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/wed/lockfree_2011_slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず昨年夏の話の概要から始め、昨年中断したところ - ロックフリープログラミングの&#34;FCD(恐怖、必然性、そしてかなりの嘘)&#34;について更に深めるところから再開する。&lt;/p&gt;
&lt;p&gt;今回はデータ構造を主題にするつもりだ。まずは、単純なロックフリースタックから始め、このスタックのABA問題(訳註：see &lt;a href=&#34;http://en.wikipedia.org/wiki/ABA_problem&#34; target=&#34;_blank&#34;&gt;http://en.wikipedia.org/wiki/ABA_problem&lt;/a&gt;)について、その後、様々なロックフリーキューについて議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#cell-broadband&#34; name=&#34;cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mastering the Cell Broadband Engine architecture through a Boost based parallel communication library&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#lionel-lacassagne&#34; target=&#34;_blank&#34;&gt;Lionel Lacassagne&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sebastian-schaetz&#34; target=&#34;_blank&#34;&gt;Sebastian Schaetz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/cell_mpi.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/cell_mpi.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セルブロードバンドエンジン(CBE)は、内部のリングバスによって接続しているPowerPCプロセッサと、8ベクトル共同処理要素(8 vector co-processing elemens)を組み合わせる、組み込みシステムである。それは、マルチメディア、シグナルプロセッシング、ハイパフォーマンスコンピューティングなどのアプリケーションにふさわしいプラットフォームである。&lt;/p&gt;
&lt;p&gt;現行のセルプロセッサ(PowerXCell 8i)は、204.8 GFlop/sの最大の単精度のパフォーマンスと、102.4 GFlops/sの倍精度のパフォーマンスで規定される。この巨大な計算力とアーキテクチャのパワー効率(IBM BladeCenter QS22のための1ワットあたり0.87の倍精度GFlops/s)の観点から、グラフィック処理装置(graphics processing units:GPGPU)上の現代のx86マルチコアアーキテクチャおよび汎用計算(general-purpose computation)の適切な代わりであった。これらの利点にも関わらず、セルプロセッサの採用は期待されたよりも遅かった。我々は、これがアーキテクチャの新たな性質、およびその複雑性を抽象化する、便利なツールの不足に起因すると考える。&lt;/p&gt;
&lt;p&gt;この話では、我々は、セルアーキテクチャのための効率的なアプリケーションの開発を単純化するライブラリを作る努力を示す。我々は、基礎となるハイパフォーマンスアルゴリズムで直感的なインタフェースを作るために、現代のC++コンセプト、および多くのBoostライブラリ(MPL, PP, Function, Spirit)をどのように利用するかを示す。我々は、セルアーキテクチャと、我々がどのようにそれをマスターしたかにともなう調整について議論する。&lt;/p&gt;
&lt;p&gt;我々のライブラリの不可欠な部品は、メッセージパッシングに基づくCBEのシステムデザインに向いているプログラミングモデルである。我々の実装はBoost.MPIインタフェースに基づく非同期通信を含んでおり、また、パフォーマンスは集合的な操作(collective operations)を最適化した。&lt;/p&gt;
&lt;p&gt;また、我々は非同期データ転送、およびマルチバッファリングをサポートする、分散コンテナと、セグメント化されたイテレータの実装を示す。さらに、我々は制限のあるリソースを持ったシステムに特に適している、Boost.Testのあとに設計された計量の単体テストモジュールのデモを示す。&lt;/p&gt;
&lt;p&gt;最後に、我々はそのようなアーキテクチャのためのソフトウェアエコシステムの実行可能性を評価し、また、Boostの設計にどのように影響を受けたか、そのようなシステムからのパフォーマンスにコテ入れし、おそらく、そのような特定の組み込みハードウェア上のBoostの将来に関する議論を始めることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#odb-boost&#34; name=&#34;odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Object-relational mapping with ODB and Boost&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/orm_with_odb_and_boost.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/orm_with_odb_and_boost.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ODBは、C++のためのオープンソースで、クロスプラットフォームなクロスデータベースオブジェクトリレーショナルマッピング(ORM)システムである。同様の機能を提示する他のライブラリと異なり、ODBは、永続クラス(persistent classes)とC++クラス宣言から、それらのデータベース表現との間の変換を行うコードを自動的に生成する。また、ODBは高度にカスタマイズ可能である。人気のあるフレームワーク、BoostやQtのようなライブラリの基本型、スマートポインタ、およびコンテナのようなコンポーネントは、標準のバージョンと合わせて永続クラスでシームレスに使用することができる。&lt;/p&gt;
&lt;p&gt;話の前半は、ODBシステムの基本概念とワークフローを導入する。後半は、BoostのためのODBプロファイル、永続Boost値型(例えば&lt;code&gt;boost::gregorian::date&lt;/code&gt;)のサポートを行うライブラリ、スマートポインタ(例えば&lt;code&gt;boost::shared_ptr&lt;/code&gt;)およびコンテナ(例えば&lt;code&gt;boost::optional&lt;/code&gt;、&lt;code&gt;boost::unordered_set&lt;/code&gt;)に注目する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#gcc-plugins&#34; name=&#34;gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parsing C++ with GCC plugins&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/parsing_cxx_with_gcc_plugins.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/parsing_cxx_with_gcc_plugins.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNU Compiler Collection(GCC)は、成熟し、広く使用されたC++コンパイラ実装を持ったオープンソースでクロスプラットフォームなコンパイラスイートである。GCCのバージョン4.5.0は、コンパイラコンポーネントの再利用と同様に、コンパイルプロセスのカスタマイズを許可する、新たな動的なプラグインアーキテクチャを追加した。この発表のゴールは、GCCプラグインを使用して、C++を解析する方法を示すことである。&lt;/p&gt;
&lt;p&gt;この話は、解析された翻訳単位の内部表現と、GCCプラグインアーキテクチャのハイレベルな概要から始まる。その後、C++宣言が存在することに関する情報の表示をするための、単純なプラグインの実装を示す。この話は、主翻訳単位、アプリケーション特有のプラグマと属性のハンドリング、プログラマティックなテンプレートインスタンス化に追加のC++コードを注入するなどのより高度な技術をカバーする。&lt;/p&gt;
&lt;p&gt;この発表は、Clang(最近全面的なC++98サポートを達成した別のC++コンパイラ実装)とGCCプラグインアーキテクチャの簡潔な比較なしでは不完全になる。この話は、Boostの、および(GCCプラグインを使用して実装することができる)より広いコンテキストで可能なおもしろいアプリケーションの迅速なブレーンストーミングセッションで締めくくる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#phoenix-v3&#34; name=&#34;phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Phoenix V3 –An Overview&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#thomas-heller&#34; target=&#34;_blank&#34;&gt;Thomas Heller&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hartmut-kaiser&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/phoenix_v3.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/phoenix_v3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phoenixは次世代のインラインの無名多態関数オブジェクト生成器となるだろう。V3ではBoost.Bind と Boost.Lambdaの機能が合成された新しいライブラリとなった。このライブラリを記述する際、後方互換性を保持したまま前述したライブラリ(訳註：BindとLambda)の制限を修正した。このセッションの目的は、C++における関数プログラミングが、いかに重要かつエレガントかについて概説することだ。セッションの第一部では、Phoenixで定義されたDomain Specific Embedded Language (DSEL)について述べる。DSELは演算子のオーヴァーロードと標準C++関数で構成されている。PhoenixがC++を模倣した言語を定義したのは、潜在的なユーザーが関数プログラミングに入門するハードルを下げるためだ。一方、既存のC++コードは(関数オブジェクトとして知られる)高階関数に依存している。たとえば、C++標準ライブラリはあるアルゴリズムの挙動を変更するために高階関数を使っている。第二部では関数オブジェクトの代わりにどうPhoenixを利用するか、また、Phoenix expression内でどう既存のユーザーコードを有効にするかについて例示する。しかし、Phoenixの真の力はこんなものではない。Phoenixは前のセクションで議論したように、式をデータとして扱う (C++においては)ユニークな機構を備えている。これによって、C++の標準的な手法ではなく、ユーザーの好みに応じた手法でPhoenixを利用できる。潜在的なユーザーにPhoenixを軸に展開する将来的なアプリケーションの見識を得ていただくために、このセッションの締めくくりとして、これらの機構についての概説をするつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#boost-simd&#34; name=&#34;boost-simd&#34;&gt;Boost.SIMDによる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical SIMD acceleration with Boost.SIMD&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;プレゼンテーション資料 ： &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/simd.pdf&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料 ： &lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SIMDマシン - 同じ命令で複数の要素からなるデータを並列に計算する能力を持つマシン - は、今日では、スーパーコンピュータからデスクトップコンピュータやモバイルコンピュータまで、ありふれたものとなっている。&lt;br /&gt;
数値計算のツールやライブラリは、SIMDを使用することによって計算速度を向上させることができるが、今のところ、C++デベロッパのための、最小で高レベルな、プラットフォームに依存しないインターフェイスを提供するライブラリはないといえるだろう。&lt;/p&gt;
&lt;p&gt;このチュートリアルで、我々はレビュー待ちの状態にあるBoost.SIMDライブラリについて紹介し、技術的な挑戦と、どのようにBoost.SIMDを用いて、一般的な、あるいは、あまり一般的でない問題に適用させるのかについて解説する。&lt;br /&gt;
解説では、我々のライブラリが、全ての種類のアルゴリズムを高速化するという点や、ペナルティがないようにSIMDハードウエアをちょうどよく抽象化するという点においての有用さについて述べる。&lt;/p&gt;
&lt;p&gt;Boost.SIMDの設計は、可能な限り軽量になるように、また、巨大な数値計算ライブラリNT2の一部となるように作られている。&lt;br /&gt;
NT2は、テーブルや行列を作るために、SMP、MPI、GPGPUの技術と一緒にBoost.SIMDを用いている。&lt;br /&gt;
Boost.SIMDはSIMDのみを扱う専用ライブラリとして作られている。&lt;br /&gt;
したがって、Boost.SIMDの主たる抽象化はSIMDレジスタである。(例えば、SIMDプロセッサによって処理される基本となる単位)&lt;br /&gt;
また、Boost.SIMDはプラットフォームに依存しない高レベルインターフェイスを提供するが、ローレベルな問題はユーザにとって主な関心事のままである。&lt;/p&gt;
&lt;p&gt;Boost.SIMDは、一定のコードパターンを認識し、最も効率的な解法への射影をするように、Boost.Proto DESLフレームワークを用いている。例えば、Altivecと未来の世代のx86環境に存在する積和命令や、与えられた範囲で必要とされる値を検出するために用いている。&lt;/p&gt;
&lt;p&gt;さらに、このライブラリは、与えられたアーキテクチャのプリミティブに適正に簡単に特殊化でき、新しいターゲットや関数を作成することができる強力な外部ディスパッチ機構を供えている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#real-workd-spirit-qi&#34; name=&#34;real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Qi in the Real World&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#robert-stewart&#34; target=&#34;_blank&#34;&gt;Robert Stewart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/tue/spirit_qi_in_the_real_world.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/tue/spirit_qi_in_the_real_world.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spiritの過去のセッションは、Spiritの導入や、チュートリアルによって現実の利用に注目した。実際のSpirit.Qiパーサーを書く際、速い段階で「悪魔は細部に宿る」ということに気付くだろう。思考錯誤によって、あるいはおそらくSpiritメーリングリストによって発見しなければならない特別なケース、トリック、イディオムがある。それには時間がかかり、便利とは限らないかもしれない。このセッションに、我々は&lt;code&gt;printf()&lt;/code&gt;(スタイルフォーマット文字列)のためのSpirit.Qiパーサーの開発を通じて見て回るだろう。結果として型安全で効率的な、&lt;code&gt;printf()&lt;/code&gt;の置き換えになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#sweep-line-algorithm&#34; name=&#34;sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sweep-Line Algorithm for Voronoi Diagrams of Points, Line Segments and Medial Axis of Polygons in the Plane&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#lucanus-simonson&#34; target=&#34;_blank&#34;&gt;pLucanus Simonson&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#andrii-sydorchuk&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/voronoi_diagram_of_line_segments.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/voronoi_diagram_of_line_segments.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平面上の交点のないセグメントと点の集合を入力値とするボロノイ図を演算するアルゴリズムについて述べる。&lt;/p&gt;
&lt;p&gt;点のボロノイ図の演算を行なうFortuneによる平面掃引アルゴリズムを踏まえて、理論値であるO(n log n)の計算量を維持したまま、このアルゴリズムを線分に適用できるように拡張した。&lt;br /&gt;
線分に対するボロノイ図は、多角形中間軸を自明に生成することができ、VSLI、CAD、CAMの製造など、さまざまな適用が考えられる。&lt;br /&gt;
効率を犠牲することなく数値堅牢性を保証するアプローチについても議論するつもりである。&lt;br /&gt;
lazy-exact arithmeticに基づく堅牢な述語を用いることで、このアルゴリズムが整数座標入力について確実に正しい結果を返すことを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#b-tree&#34; name=&#34;b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Proposed Boost B-tree Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;プレゼン資料：&lt;a href=&#34;https://github.com/boostcon/2011_presentations/blob/master/tue/proposed_b_tree_library.pdf&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料：&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B木はデータベースやファイルシステム、ディスクに記憶される連想コンテナなどに利用される、どこにでもあるデータ構造である。&lt;/p&gt;
&lt;p&gt;このセッションではB木について、また、ディスクに記憶されるB木による&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;ライブラリについて紹介する。&lt;br /&gt;
まずB木を概略的に説明し、提案されたライブラリコンテナとC++標準の関連するコンテナとの関連について示す。すなわち、実装されているインターフェースや、落し穴、可変長データ、パフォーマンス、また、このライブラリの実装がどこまで進んでいるかについて紹介する。&lt;br /&gt;
フィードバックや議論する時間も設ける予定だ。&lt;/p&gt;
&lt;p&gt;このセッション終了時には、参加者した方々がご自身のアプリケーションにこのライブラリを利用することができるようになり、このライブラリがBoostに正式実装されるよう、さらなるフィードバックしていただけるようになるはずである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#think-async&#34; name=&#34;think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thinking Asynchronously: Designing Applications with Boost.Asio  &lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/thinking_asynchronously.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/thinking_asynchronously.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初から、Boost.Asioは本心では、フレームワークとしてではなく、ツールキットとして設計された。ライブラリは1セットの基礎、汎用的なビルディングブロックの提供に注目する。タスクを検討するために、一つ以上の正しい方法があり、また、ライブラリは特定の書き方を強制しない。&lt;/p&gt;
&lt;p&gt;この発表では、我々は、問題を設計するためにどのように非同期の考え方を適用することができるかを考えていく。我々は、設計代案、共通の罠と落とし穴、それと複合操作によって計算量を攻撃する方法を見ることになるだろう。この話はまた、最適化、およびパフォーマンスと拡張性を管理するために、Boost.Asioが提供するツールをカバーするだろう。&lt;/p&gt;
&lt;p&gt;この話は、出席者がBoost.Asioにある程度基礎的なレベルのなじみがあると仮定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#thread-shared-variables&#34; name=&#34;thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Threads and Shared Variables in C++0x&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hans-boehm&#34; target=&#34;_blank&#34;&gt;Hans Boehm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： キーノート&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/wed/boehm-boostcon11.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/wed/boehm-boostcon11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの規格ドラフトは、言語へスレッドを導入し、スレッド間で共有される変数の意味を念入りに定義する。設計は、デフォルトでマルチスレッドのプログラムがスレッドの単純な割り込み実行に基づいたセマンティクス(つまり、順序一貫性:sequential consistency)を保証するべきであるという考えに基づく。間違ったものや無意味であるものとして、我々がデータレース(通常の共有変数への、ほとんどの種類の非保護同時アクセス)を考察するという理由だけで、これは効率的な実行を許可する。ドラフトは代わりに、とくにID付けされたオブジェクトにアクセスを許可するアトミック操作の広範囲なコレクションをサポートする。&lt;/p&gt;
&lt;p&gt;我々は、C++0xのスレッドサポートの概要を示し、次に、共有変数セマンティクスを定義するメモリモデルとアトミックライブラリの相互作用に注目する。過去の慣例とできるだけ一致するように心がけたが、我々は多くの難題と、驚きに遭遇した。我々は、コピーしないために試みた過去の誤りのいくつかに言及する。&lt;/p&gt;
&lt;p&gt;これは、Sarita Adve、Lawrence Crowl、Paul McKenney、Clark Nelson、Herb Sutter、他の多くの方との共同作業について説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#xml-processing&#34; name=&#34;xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Toward Native XML Processing Using Multi-paradigm Design in C++  &lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#aniruddha-gokhale&#34; target=&#34;_blank&#34;&gt;Aniruddha Gokhale&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sumant-tambe&#34; target=&#34;_blank&#34;&gt;Sumant Tambe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/mon/leesa_boostcon.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/mon/leesa_boostcon.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XMLプログラミングは、抽象、分割、プログラミングスタイル、およびイディオムの、それ自身の規則によって強力なデータ処理パラダイムとして出現した。経験を積んだXMLプログラマが求めるものは、それらの生産性がXMLプログラミングのドメイン固有パターンとプラクティスの使用を許可する言語とツールの有効性に依存する。しかし、これらのツールが与えられたXMLスキーマの静的に型付けされた、用語特化のオブジェクトモデル(vocabulary-specific object model)を自動的に生成するため、オブジェクト指向のコミュニティは専用XML言語よりもXMLデータバインディングツールを好む。不運にも、これらのツールはたいてい、純粋なオブジェクト指向の法則を使用して、XMLプログラミングの抽象的概念を統合する際の困難さのために、経験を積んだXMLプログラマの期待するものを避ける。この話は、C++のマルチパラダイムプログラミング能力の新たな適用によって、この普及しているギャップがどのように縮小されるのかを実証する。項目として、ジェネリックプログラミング、メタプログラミング、ジェネレーティブプログラミング、戦略プログラミング(strategic programming)、およびC++によってサポートされた演算子オーバーロードがネイティブで型付けされたXMLプログラミングをどのようにともに可能にするのかを話す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/boostcon/2011.html#why-cpp0x-is-awesomest-network-programming&#34; name=&#34;why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why C++0x is the Awesomest Language for Network Programming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/raw/master/thu/Awesomest.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/raw/master/thu/Awesomest.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;警告 ： これは臆病な人のための話ではない。最先端の言語機能があり、ハックがあり、言語の乱用があるだろう。このセッションは椅子を投げておわるかもしれない。&lt;/p&gt;
&lt;p&gt;スリルを求めるオタクにとって、それは楽しい旅であるべきだ。我々は、新たなC++0x言語とライブラリ機能のうちいくつかがどのように大きな位置を占めるのかを見ていく。また、いくつかのそれと古いものは、簡潔で、表現力があり、効率的なネットワークプログラムを作るためにBoost.Asioと連携することができる。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Norihisa Fujita, zak, DigitalGhost&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++Now! 2012 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/cppnow/2012.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:cppnow/2012.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;C++Now! 2012&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://cppnow.org/2012/&#34; target=&#34;_blank&#34;&gt;C++Now! 2012&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012&#34; target=&#34;_blank&#34;&gt;C++Now! Presentations 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/cpp_online_reading&#34;&gt;C++オンライン読書会&lt;/a&gt; にて有志が一部の資料を読んでいるので、そちらも資料を読むお供にどうぞ。&lt;/p&gt;
&lt;h2&gt;ビデオ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/user/BoostCon&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/user/BoostCon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加レポート&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/redboltz/20120519/1337385881&#34; target=&#34;_blank&#34;&gt;C++Now2012体験記 - redboltzの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120522/1337650107&#34; target=&#34;_blank&#34;&gt;C++Now! 2012に参加してきました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25007975614/c-now-boostcon-c-now-boost-konferenz-im&#34; target=&#34;_blank&#34;&gt;C++Now! - BoostCon新装開店 (C++Now! – Boost-Konferenz im neuen Gewand) - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#more-useful-computations&#34;&gt;おなじ環境でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#ustring&#34;&gt;Ustring - 現代的な&lt;code&gt;std::string&lt;/code&gt;の代替&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#moving-forward&#34;&gt;キーノート：C++11で前進せよ!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における今日的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#compile-time-reparsing&#34;&gt;コンパイル時 再パース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#50-boost-libs&#34; name=&#34;50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;50 Boost Libraries in 180 minutes&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/boris-schaeling/&#34; target=&#34;_blank&#34;&gt;Boris Schäling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/50_boost_libraries.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/50_boost_libraries.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションでは、50個のBoost Libraryを180分かけて紹介する。多くのBoost Libraryについて、幅広く俯瞰する。あまりboostに詳しくない方、または、いくつかのライブラリしか知らない方は、今後、boostが提供すべきすぐれたアイデアを得ることができるだろう。このセッションは、後程どのライブラリについて学びたいか、いまのプロジェクトで使えるか、さらには貢献できそうか判断する指針となるだろう。 このセッションは、プレゼンターの著書である「The Boost C++ Libraries」(英語版 2011/6刊行)と「Die Boost C++ Bibliotheken」(ドイツ語版 2012/1刊行)に基づいている。これらの書籍ではすぐに習得できる一般的なライブラリを紹介している。このセッションでは、これらの本から例を引用するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#more-useful-computations&#34; name=&#34;more-useful-computations&#34;&gt;おなじ時間でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More Useful Computations in the Same Duration: Optimizing Embedded Hard Real-Time Code in C++
スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は非常に広い問題領域に適用可能なマルチパラダイム言語である。このセッションでは限られたメモリリソース、かつ、200KHz(5マイクロ秒)サーボインタラプト割合のリアルタイム組み込みシステムにC++を利用した際の最適化と拡張について紹介する。二年以上かけて、このシステムのデータ処理帯域幅は、ハードウェアの強化をすることなく大きく改善した。この改善を達成するために、様々なアプローチとテクニックについて議論した。その結果、ほとんどのよく知られているC++イディオムは組み込みのリアルタイムシステム環境にはよく合わないことが分かった。しかし、C++はCよりもメンテナンスの面でもコード実行速度の面でも優位な性能を見せた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションは、組み込み向け、汎用機向けという区分なく、特定のC++コードの実行速度の高速化に興味がある方には有意だろう。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションで、特定の組み込み環境について、何が正しく動き、何が正しく動かないのか、そしてその理由はなにかについて説明する。主なテーマはパフォーマンスモニタリング、特定領域のコードデザイン、コンパイラに高速なコードを生成させる方法、スレッドセーフオプションである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#whirlwind-overview-cpp11&#34; name=&#34;whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Whirlwind Overview of C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/leor-zolman/&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/cpp_overview_handout.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/cpp_overview_handout.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このC++11の簡潔なイントロダクションでは、プレゼンターであるLeor Zolmanが言語への主要な機能追加について調査する。また以下の項目についても述べる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コード可読性の向上について(ラムダ, 統一初期化, &lt;code&gt;auto&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;パフォーマンスの向上について(右辺値参照とムーブコンストラクタ)&lt;/li&gt;
&lt;li&gt;マルチスレッドについて(並行性とアトミック型)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、他の多岐に渡る便利な機能や、標準ライブラリのコンポーネント(スマートポインタと新しいSTLコンテナ)についても触れる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションはC++11の簡潔な概要を知りたい方向けである。そのため、詳細をカヴァーしきれない言語機能、ライブラリが多々あることをご了承いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#odeint&#34; name=&#34;odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;odeint – Solving ordinary differential equations in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/odeint.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/odeint.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常微分方程式(ODE: Ordinary differential equation)は自然科学、応用分野の諸領域で重要な役割を果たしている。&lt;br /&gt;
例示すると、古典的ニュートン物理学、化学反応式、量子系から神経系にわたる、個体群動態における反応速度式などである。&lt;br /&gt;
さらに、常微分方程式は偏微分方程式(PDE: partial differential equation)の離散化をする際頻出する。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、odeint(&lt;a href=&#34;http://odeint.com&#34; target=&#34;_blank&#34;&gt;odeint.com&lt;/a&gt;) -常微分方程式の数値解法を探索するためだけのC++ライブラリ- を紹介する。このライブラリはBoost入りを目指している。&lt;/p&gt;
&lt;p&gt;odeintは非常にジェネリックに実装されており、高速に相互運用することができる。&lt;/p&gt;
&lt;p&gt;odeintはODEソルバのためのC++コンセプトを導入しており、標準的なメソッドを数多く実装している。例えば、古典的Runge-Kuttaスキーム、ステップサイズコントロールと稠密出力のメソッド、非明示なメソッドとシンプレティック解法などである。； odeintはコンテナ非依存であることを強調しておきたい。つまり、使用者はstd::vectorのような特定の型を使うことを強いられない。 それゆえ、ネットワーク、ラティス上のODEを解くこともできる。 さらに、多倍精度か区間演算を利用できる。 ジェネリックな設計を取っているので、odeintは容易に並列化してCUDA GPUで実行できる。 それにもかかわず、odeintはわかりやすいインターフェースを備えているので、簡単に、容易に使うことができる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではodeintの主要な機能ならびにそのソフトウェアデザインについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#fresh-paint&#34; name=&#34;fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fresh Paint&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11では様々な方法で言語を拡張する興味深い新機能が導入された。&lt;/p&gt;
&lt;p&gt;このセッションではそれらを完全に無視して、別のテーマに焦点を当てる。すなわち、C++11でよりシンプルに、クリーンに、エレガントに記述する方法について述べる。このセッションはソフトウェアデザインの最先端についてあまりよく知らないけれど、クリーンかつシンプルかつ効率的なコードを書くことに関心がある方に最適である。話のなかでデザインについて知見が得られれば幸いである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#openmp-for-better-high&#34; name=&#34;openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP for better high-level parallelism, not just for High Performance Computing&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenMPは高次の言語を用いたインクリメンタル並列化をサポートする、C,C++,FORTRAN向けの分散メモリ並列化の仕様である。&lt;/p&gt;
&lt;p&gt;OpenMPはハイパフォーマンスコンピューティング、スーパーコンピューティングのためのもの、と思っている方がいるかもしれないが、実際は他にほぼ類をみない分散メモリ並列化 - これは3つの汎用言語で実装されている - に適しており、それ自体高次言語である。OpenMPはグラフィクスや可視化の分野や、組み込みやリアルタイムアプリケーション分野、コミュニケーションとネットワーク分野、自動化とロボディクス分野、財務や通商分野、医療と生命工学分野、石油・ガス業界、シミュレーション、データベースとミドルウェア、音声・オーディオ処理、汎用データ解析などの分野でも有効であることが知られている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#hpx&#34; name=&#34;hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HPX: A C++11 parallel runtime system&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/bryce-adelstein-lelbach/&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/hartmut-kaiser/&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/matthew-anderson/&#34; target=&#34;_blank&#34;&gt;Matthew Anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;計算科学のアプリケーションは、しばしば基になる実行モデルから受けついだ選択の影響を受ける。並列計算アプリケーションにおいては、MPIが注目をあつめている。しかし、電源や、プロセッサコアの複雑性、マルチコアソケット、GPUの異種混在という問題が深刻になってきたため、並列アプリケーションはスケーリング不全の危機に陥っている。&lt;/p&gt;
&lt;p&gt;HPX実行時システムはモジュラーであり、完全実装であり、SMPノードとコモディティ・クラスターのような従来型の並列計算アーキテクチャを対象としたParalleX実行モデルのパフォーマンス指向の表現である。MPIの代替として、HPXは軽量ユーザースレッドを管理するためのルーチンに加えて、アクティヴグローバルアドレス空間(AGAS: Active Global Address Space)を提供している。HPXはC++11で実装され、20のBoostライブラリ/Boostライブラリ候補を利用している。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、実行時システムアーキテクチャに焦点を当てるとともに、HPXでどのようにBoost C++ライブラリやC++11機能を利用しているかについて議論する。HPXの概要についてプレゼンテーションし、さらに、競合するランタイムシステムおよび科学計算コミュニティ向けアプリケーションとの比較とベンチマークを紹介する。HPXに興味、関心をもたれて、実際に試用していただければ幸いである。ダウンロードはこちらから： &lt;a href=&#34;http://stellar.cct.lsu.edu/&#34; target=&#34;_blank&#34;&gt;http://stellar.cct.lsu.edu/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#lambda-functions&#34; name=&#34;lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lambda Functions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無名関数は多くの言語で有用なツールとして成功を収めている。その局所性と明瞭な構文により、高い表現力と、バグの少ないコードを記述できる。Boost.LambdaやBoost.Phoenix、そしてFC++といったライブラリによって、C++にラムダ式がもたらされたが、今日、C++11には言語機能としてラムダ関数がある。ラムダ関数は無名関数オブジェクトとよく似ている。というのは、ラムダのスコープ外でキャプチャ/識別子の状態の変更が可能だからだ。&lt;/p&gt;
&lt;p&gt;この90分のチュートリアルセッションで、この新しい言語機能の構文と利用方法を概観する。上達を図るために練習問題や例を多数用意している。ラムダが利用可能なコンパイラを持参し、ぜひラムダ関数を使うとコードがどれほどよくなるか体験していただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#future-cpp1x-proposals&#34; name=&#34;future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future C++1x proposals&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11が公開された今、C++1xに搭載される次の機能は何だろうか？ このプレゼンテーションでは2月のコナ会議で提案されたものを紹介していく。Evolution Working Groupでレヴュー済みのペーパーと、ConcurrencyおよびLibrary Working Groupの活動についても焦点を当てる。 おまけ： 主要なコンパイラについて、最新のC++11実装状態についてもお伝えしたい。&lt;/p&gt;
&lt;p&gt;2012年2月のコナ会議を経て、標準委員会は次のC++標準を暫定的に2017年に、その次を2022年に、おおよそ五年毎に公開するように決定した。また、いくつか主要なものを例にあげると、モジュールや高度な並列抽象化、リフレクションといった次の標準にむけての提案についても精査した。このプレゼンテーションではこれらの機能について焦点をあて、C++11にどのような影響を与えるかについて議論する。&lt;/p&gt;
&lt;p&gt;カナダ、IBMのC++標準委員会代表や、BoostConでトランザクショナル・メモリからC++11の並行について多様なトピックを長きにわたってプレゼンターを務めた者として、標準委員会でC++の将来搭載されるべき機能についての議論にはできるだけ参加するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#variadic-tmp&#34; name=&#34;variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variadic Template Metaprogramming using Monads&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/bartosz-milewski/&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/eric-niebler/&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/compile_time_runtime_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/compile_time_runtime_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11 の新機能である可変引数テンプレートは，パワフルだが気の触れた制限がついている．なんと template parameter pack が一級市民ではないので，一部のよくある(メタ)プログラミングの定石で使いにくいのだ．うれしいことに偶然，関数型プログラミング，正確に言うと Haskell では，おもしろい方法でこの問題を解決している．というわけで我々は，可変個継続，継続モナド，カリー化，その他C++メタプログラミングで使うためのエキゾチックな構成を使った方法について話す．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#ustring&#34; name=&#34;ustring&#34;&gt;Ustring - 現代的なstd::stringの代替&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ustring – A Modern Alternative to &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alan-talbot/&#34; target=&#34;_blank&#34;&gt;Alan Talbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/ustring.pdf&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/raw/master/mon/ustring.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++プログラミングで推奨される文字列表現はstd::stringである。しかし、実際には、あるプログラムには三つ以上の文字列型(例えば、&lt;code&gt;std::string&lt;/code&gt;、MFCの&lt;code&gt;CString&lt;/code&gt;、&lt;code&gt;char*&lt;/code&gt;)が混在していることがほとんどである。われらが&lt;code&gt;std::&lt;/code&gt;stringは長年よくやってくれているが、いろいろな制限やときどき見せる奇行に悩まされることもままある。そして、他の文字列クラスが備えている便利な機能、特に言うならUnicodeサポートが欠けている。C++11が公開されたことと、&lt;code&gt;std::string&lt;/code&gt;が実装されてから数十年来の知見を集めて、よりよいツールを創ってみた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの前半は、将来、強力かつ競争力のあるツールとなるよう、&lt;code&gt;std::string&lt;/code&gt;の制限や問題を解決することをめざした新しいクラスの設計について述べる。多くの知見を集積して、C++11にふさわしい、簡便で、表現力豊かで、強力な文字列処理を創りだすことが目標である。そのために、後半は理論や秘話、懸案事項やアイデアなどをいただきたく、聴講されている皆様とブレインストーミングするセッションにするつもりである。このライブラリは開発の初期段階にあるので、変更の余地はあるし、どんなアイデアでも歓迎する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#high-level-threading&#34; name=&#34;high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: High-Level Threading&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11は並行処理の新しい機構を備えている。慎重に設計されたシステムのプログラミング言語であるならば当然のことだが、言語機能は厳格な理論的基礎(メモリモデル)に基いて構築され、低レヴェルプリミティヴ(atomic)へのアクセスを提供している。幸運にも、C++11ではスレッドを効果的に使う際に、こうした難解な詳細について理解する必要はない。(もし低レヴェルの事柄について詳細を知りたければ、Tony Van Eerdのプレゼンテーションを見るべし)&lt;/p&gt;
&lt;p&gt;その基礎の上に、プログラマが日々のコンカレントなコードを記述する際、実際に使うべきAPIが用意されている。すなわち、大量のロックやミューテクスや条件変数、そして、より高いレヴェルの&lt;code&gt;future&lt;/code&gt;, &lt;code&gt;promise&lt;/code&gt;, &lt;code&gt;packaged_task&lt;/code&gt;などだ。また、スレッドセーフなプログラミングの中核的問題についても述べ、これら問題を解決するためのコンポーネントの使いかたについても述べる。&lt;/p&gt;
&lt;p&gt;メモ： このプレゼンテーションに興味を持たれたかたは、&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cpp11-gems&#34;&gt;&#34;Other C++11 Gems&#34;&lt;/a&gt;のプレゼンテーションにも食指が動くかもしれない。そちらのプレゼンテーションでは、時刻や時間、タイムアウトでのロック、スリープといった優れたデザインの新機能について取りあげるそうだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#grill-the-committee&#34; name=&#34;grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grill the Committee&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準のなれそめについて知りたくないか？ このパネルディスカッションではC++標準委員会のメンバーに登壇いただき、聴衆の皆様に気になっていることを質問していただく趣旨である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#moving-forward&#34; name=&#34;moving-forward&#34;&gt;キーノート： C++11で前進せよ!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Moving Forward with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料&lt;ul&gt;
&lt;li&gt;前編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;後編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前編・後編一括：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右辺値参照はC++に二つの新しい相乗的に機能するプログラミングイディオムをもたらす。すなわちムーブセマンティクスと完全転送である。このプレゼンテーションでは右辺値参照とは何か、ムーブセマンティクスとは何か、完全転送とは何か、といった基礎からはいる。また、このプレゼンテーションではこれらが導入された動機や利用法、コンパイラがこれらを自動生成する条件についても述べる。さらに、クラスを設計した後でも、条件に合致すれば自動的に、ムーブセマンティクスが最適化の役目を果たすことができるけれども、ムーブセマンティクスの知識は直接的にクラス設計に影響を与えることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#metaparse&#34; name=&#34;metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaparse – Complie-time parsing with template metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/abel-sinkovics/&#34; target=&#34;_blank&#34;&gt;Ábel Sinkovics&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/zoltan-porkolab/&#34; target=&#34;_blank&#34;&gt;Zoltan Porkolab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/2b6b26f9fcc28fa7b2c777819111012217116ff5/tue/metaparse.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/tue/metaparse.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Metaparseは、C++のコンパイル時文字列を解析する、パーサー生成のためのC++テンプレートメタプログラミングライブラリである。Boostはすでに2つのパーサージェネレータライブラリを持っている：Boost.SpiritとBoost.Proto。MetaparseとBoost.Spiritの主な違いは、Metaparseによって生成されたパーサーはコンパイル時に実行され、Boost.Spiritによって生成されたパーサーは実行時に実行されるということである。Boost.ProtoパーサーはC++の有効な式をコンパイル時に処理し、Metaparseは自由形式の文字列を入力としてパーサーを構築する。&lt;/p&gt;
&lt;p&gt;コンパイル時の任意なテキストを解析することは、多くの状況で有用である。我々はより複雑なユースケースを比較的に簡単にする方法を提供する。一般的な構文は、以下の正規表現のコンパイル時検証を有効にすることでBoost.Xpressiveのラッパーを作成できる。より複雑な例として、printfの書式指定文字列を解析し、コンパイル時に引数の型を検査する。コンパイル時パーサーの別な手段は、組み込みDSLスクリプトをC++のネイティブな関数への変換をコンパイル時に行い、実行時にそれを実行することである。最も複雑な例では、テンプレートメタ関数を定義するために、組み込みDSLをどのようにして実装するかを示す。Metaparseはパーサー生成のDSLをメタ関数に変換する能力を持つ。&lt;/p&gt;
&lt;p&gt;Metaparseの内部構造と、それをどのようにして拡張するかを説明する。ライブラリの正確なエラー報告の機能を紹介する。モナドの概念の入門と、それを使用することでパーサーの構築を容易にすることを示す。新たなC++標準の&lt;code&gt;constexpr&lt;/code&gt;は、コンパイル時にアルゴリズムを実行するための構造を提供する。メタプログラミングと&lt;code&gt;constexpr&lt;/code&gt;の間を繋ぎ、パーサーによって処理される入力の構文的なオーバーヘッドを最小限にしてそれを利用する方法を提供する。&lt;/p&gt;
&lt;p&gt;Metaparseと、その元となるライブラリは、以下から利用可能である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://abel.web.elte.hu/mpllibs&#34; target=&#34;_blank&#34;&gt;http://abel.web.elte.hu/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sabel83/mpllibs&#34; target=&#34;_blank&#34;&gt;https://github.com/sabel83/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これはユーザーと開発者にとって高度な話である。Boost.MPLに精通していることを前提とする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#ladon&#34; name=&#34;ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ladon - A Distributed State-Machine Framework&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;階層的な状態マシンは、多くのドメインにエレガントな解決策を提供する。それらの厳格な要件は、高い信頼性のシステムのための規律を一段階強化する。状態マシンはシステムの反応的な振る舞い(reactive behavior)について記述するのに役立つ。ポート束縛、メッセージ配信、およびプロトコル変換を提供する一方で、コミュニケーションポートや包含コンセプト(containment concepts)のようないくつかの(ROOMのような)構造的コンポーネントを加える。そうすれば、分散状態マシンフレームワークが生まれる。よく定義されたインタフェースを持ったより小さな分散マシンに分割することは、大きな反応的システムのための強力なツールである。&lt;/p&gt;
&lt;p&gt;このセッションでは、Ladon分散状態マシンフレームワーク(C++Now 2012でデビューするciere consultingのオープンソースプロジェクト)を導入する。Ladonは、反応的なシステムのためのリッチな分散ソリューションを作成するために、Boost.MSM、Boost.AsioおよびBoost.Spiritを融合させる。フレームワークの設計と基本的な使用法についての議論に加え、我々はあなたのシステムで使用できるおもしろいパターンと解決策のいくつかを紹介する。我々が言及するライブラリは、以下のものを含む：MSM、Spirit、Asio、Fusion、Signals2、そしてPhoenix。&lt;/p&gt;
&lt;p&gt;この90分間のセッションは、初心者と中級レベルの出席者に、いくつかのBoostライブラリと現代的なC++手法の概観を提供する。&lt;/p&gt;
&lt;p&gt;語源 - Ladon(Λάδων)は、ヘスペリデスの庭のトマトを守護する、ギリシャの100の頭を持つヘビのようなドラゴンである。頭がそれぞれ異なる言語を話したという噂がある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#low-level-threading&#34; name=&#34;low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t Try This at Work – Low Level Threading with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のC++は&#34;メモリモデル&#34;がある。しかしこれはどんな意味で、どうして導入されたのか、また、以前のC++に必要なかったのは何故か？ これを使って何ができるか？ そしてこれらの新しい原子操作にはなにやら相関があるようだ… むむむ…&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#exception-safety&#34; name=&#34;exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exception-Safe Coding in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;皆様のコードは100%例外安全を達成していると言えるだろうか？&lt;/p&gt;
&lt;p&gt;例外を安全に利用するのはなまはんかな問題ではない。この業界では20年来この問題に奮闘してきた。もし皆様が恐怖や不透明感、例外安全に疑いをもっていたり、純粋にC++で例外のベストプラクティスを知りたいと思っているならば、ぜひこのプレゼンテーションを聞いていただきたい。まず始めに、&#34;何を解決しようとしているか&#34;から入り、代案について議論し、例外の利用に関する問題を確認し、例外安全について曲解されやすい試みについて述べる。また、安全な例外の利用法についての基本的なガイドラインと過去の例外安全ではないコードベースから移行するための鉄板の実装テクについても述べる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの目的は、皆様に、簡単に記述できて、理解しやすく、高速に動作し、例外が発生しても100%の堅牢性を誇るコードをどうやったら書けるようになるかお伝えすることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#moving-boost-to-git&#34; name=&#34;moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Moving Boost to Git&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitヴァージョン管理システムはSubversionに比べてBoostの開発者、利用者双方に利益がある。このセッションではBoostからみたGitについて紹介し、徐々に高度な議題について述べていく：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;なぜGitなのか？ - 成層圏から俯瞰してみよう&lt;/li&gt;
&lt;li&gt;皆様にGitの基礎を知っていただくために、駆け足のGitのチュートリアル&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost開発者の視点から&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost利用者の視点から&lt;/li&gt;
&lt;li&gt;Boostのモジュール化への試み - 課題、アプローチ、トレードオフについて&lt;/li&gt;
&lt;li&gt;Boost開発者にあわせたワークフロー構築の試み&lt;/li&gt;
&lt;li&gt;BoostをGitに移行してみるワークショップ - 実行計画の開発&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この&#34;BoostをGitに移行しよう の前準備&#34;と題したドキュメントとファイルをC++Now!の二週間前くらいまでに用意するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#learned-developing-std-lib&#34; name=&#34;learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lessons Learned Developing the C++11 Standard Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11の標準化作業はおおよそ8年かかり、標準ライブラリのサイズは少なくともページ数上では倍増した。標準化作業は標準ライブラリの設計を再確認し、おおよそ十年間で蓄積したBoostライブラリで得られた知見や開発技術をもって仕様をクリーンアップし、右辺値参照やコンセプト、並行処理のサポートといった、言語に導入が考えられた新しいアイデアについて学び、最後に新しい機能でライブラリを拡張した。この経験は有意だったか、それとも無意だったか？ 次の機会によりうまくやるために、いったい何を学んだのか？ 次のライブラリ TR を策定するにあたり、このレッスンをどう生かせばいいのか？&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#utilizing-modern-programming&#34; name=&#34;utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における現代的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Utilizing Modern Programming Techniques and the Boost Libraries for Scientific Software Development&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/josef-weinbub/&#34; target=&#34;_blank&#34;&gt;Josef Weinbub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現代的プログラミングテクニックとライブラリを利用することで、ソフトウェア開発者は膨大な機能と柔軟性を手にいれることができる。しかし、ジェネリックプログラミング、関数型プログラミング、メタプログラミングのような関連技術を利用するには、高度なプログラミングスキルが要求されるので、マニアかコンピュータサイエンティストでなければ使い熟し得ない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、Boostライブラリのような現代的プログラミング技術を利用する科学的コンピューティングの範疇に含まれる3つの仕事について報告する。まず、主にBoost GraphライブラリとBoost Phoenixライブラリを利用した順次および並列タスクグラフ実行のための拡張可能なプラグインスケジューラを紹介する。次に、Boost MetaprogrammingライブラリとBoost Fusionライブラリを利用した、コンパイルタイムに任意のプロパティに基づいてコンポーネントのサブセットを選択するというメタプロパティの選択方法について紹介する。最後に、ジェネリックパラダイムのもと幾何学的アルゴリズムを一般化するためのアプローチについて示す。&lt;/p&gt;
&lt;p&gt;これらアプローチの紹介を通じて、現代的プログラミングテクニックとBoostライブラリの適用により、非常に汎用的で、維持可能で、コンパクトで、拡張可能なコードを生み出せることを示す。以上から、長期的には高度なC++スキルを習得するために費した時間はペイすると結論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#vs-ide&#34; name=&#34;vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new in Visual Studio IDE for C++ Developers&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sumit-kumar/&#34; target=&#34;_blank&#34;&gt;Sumit Kumar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;きたるVisual Studio 11のリリースには、IDEとのやりとりやチーム内の他のC++開発者と共同作業するといった、日々のコーディング作業でC++開発をより効率的にするような新しい機能や革新が数多く詰まっている。&lt;/p&gt;
&lt;p&gt;本プレゼンテーションではデモをごらんいただきながら、構文の色分け、参照のハイライト、進化したインテリセンス、コード解析、プロファイリングといった機能に焦点を当てて紹介する。また、ドキュメントとの連携、検索やナビゲーションといった普段の作業を非常に簡易化するIDEの改善点についてもひととおりごらんいただく。このプレゼンテーションではコードレヴューやテスト、コードカヴァレッジといった統合機能についても概説する。Visual Studio 11はC++開発者チーム全体に有益である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#modules&#34; name=&#34;modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Modules in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/david-vandevoorde/&#34; target=&#34;_blank&#34;&gt;David Vandevoorde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の幕開け以来、プリプロセッサはC++ライブラリインターフェースとやりとりするための手段としての役割を果たしてきた。しかし、長年にわたり、プリプロセッサであるがゆえに生じる制約によって、不愉快なビルド時間は増加の一途をたどっている。今日、プリプロセッサはよりよいC++開発ツールをつくるにあたり唯一最大の阻害要因になっている。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、C++に&#34;モジュール&#34;の概念を導入するための選択肢を紹介し、それらがもたらす課題と恩恵について議論する。次のC++標準仕様に向けて、C++標準委員会はこれらの選択肢について活発に検討している段階である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#generic-programming-real-world&#34; name=&#34;generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming in C++: A Real-World Example&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/marshall-clow/&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この90分のセッションでは、Boost MLでいただいたリクエストに答えようと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜBoostには&lt;code&gt;hex&lt;/code&gt;／&lt;code&gt;unhex&lt;/code&gt;関数がないのか？ とても有用だと思うけど。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、Boost.Algorithmライブラリにマッチしたこれらのアルゴリズムのデザインと実装についても概説する。&lt;/p&gt;
&lt;p&gt;この関数は単純であるけれども、非常に多くの興味深い設計決定が実装中になされている。これについてもこのプレゼンテーションで述べるつもりだ。&lt;/p&gt;
&lt;p&gt;カヴァーする議題は以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックプログラミングデザイン&lt;/li&gt;
&lt;li&gt;イテレータの取り扱い(出力イテレータの問題についても述べる)&lt;/li&gt;
&lt;li&gt;テンプレートメタプログラミング(&lt;code&gt;enable_if&lt;/code&gt;の用法についても述べる)&lt;/li&gt;
&lt;li&gt;Boost.Exception&lt;/li&gt;
&lt;li&gt;コードの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#lowest-variational-methods&#34; name=&#34;lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Implementing a Domain Specific Embedded Language for lowest-order variational methods with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jean-marc-gratien/&#34; target=&#34;_blank&#34;&gt;Jean-Marc Gratien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このペーパーでは、FreeFEM様のドメイン特化言語を用いて線型離散と双線型離散の定義を対象とする拡散問題を解くための最低次変分法族の原実装を示す。Boost Protoフレームワークの利用によって、この言語のバックエンドとフロントエンドをどう実装したかについて議論する。種々の学術的問題の実装を行なうことで、このDSEL設計を検証する。この言語のオーヴァーヘッドは従来の実装と比較することで評価する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cpp11-containers&#34; name=&#34;cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new with C++11 containers?&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11でピカピカのコンテナがいくつか導入された。すなわち、単方向リスト、ハッシュコンテナ、固定長同型コンテナ、そして異形コンテナである。しかしこれだけではない。前仕様C++98/03のコンテナも新しいメンバ関数の追加、ムーブのサポート、&#34;移動のみ&#34;のコンテナをつくれるように、&lt;code&gt;value_type&lt;/code&gt;に課されていた制限の緩和といった手直しがなされている。さあC++11のコンテナを有効利用する方法についてみていこう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#concept-clang&#34; name=&#34;concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ConceptClang: An Implementation Model for C++ Concepts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrew-lumsdaine/&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;,&lt;a href=&#34;http://cppnow.org/participant/larisse-voufo/&#34; target=&#34;_blank&#34;&gt;Larisse Voufo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conceptはテンプレートに安全性を付与することを意図として、制約ベースのポリモルフィズムを行うために提案されたC++の拡張である。本プレゼンテーションではConceptClangを紹介する。これは、C族言語のLLVMフロントエンドであるClangをベースとする、Conceptデザインの検証を行うための基盤の実装例である。このプレゼンテーションでは、Conceptの提案された主要な機能(コンセプトに基づく探索、テンプレートのオーヴァーロード、テンプレートの拘束など)をどう実装したかについて述べるとともに、種々のConcept設計を深めていくために、ConceptClang基盤をいかに利用すればいいかについても示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#modern-cpp-techniques&#34; name=&#34;modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Modern C++ Techniques&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ポリシー、SFINAE、タグディスパッチ… ktkr! 現代的C++にノって弾みをつける準備はOK? Ciere C++ ニンジャシリーズから、このセッションでは基本的なことから、ジェネリックプログラミングで使われているテクニックやストラテジーを紹介する。このセッションで話すトピックは以下のとおり：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concept&lt;/li&gt;
&lt;li&gt;Trait&lt;/li&gt;
&lt;li&gt;ポリシークラス&lt;/li&gt;
&lt;li&gt;CRTP (Curiously Recurring Template Pattern)&lt;/li&gt;
&lt;li&gt;SFINAE (Substitution Failure is not an Error)&lt;/li&gt;
&lt;li&gt;タグディスパッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この3時間のハンズオンチュートリアルは例がびっしりの参加型セッションである。ノートPCを持参されたし! 日々のコーディングで現代的C++の技法を使いたい開発者には、きっと得るものがあるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#smart-pointers-algorithm&#34; name=&#34;smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 Smart Pointers and Algorithms&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++03で言うところのスマートポインタとは&lt;code&gt;auto_ptr&lt;/code&gt;だった。&lt;code&gt;auto_ptr&lt;/code&gt;は最良の型であり最悪の型である。このプレゼンテーションでは&lt;code&gt;auto_ptr&lt;/code&gt;がどのように&lt;code&gt;unique_ptr&lt;/code&gt;を触発したか、その違いはなにかについて説明する。&lt;code&gt;unique_ptr&lt;/code&gt;を比較対象として、&lt;code&gt;shared_ptr&lt;/code&gt;についても概説する。これらを使うべきときはいつか？ どちらのスマートポインタを使うべきか？&lt;/p&gt;
&lt;p&gt;加えて、このプレゼンテーションではC++11に新しく追加されたアルリズムについて、また、&lt;code&gt;unique_ptr&lt;/code&gt;のようなムーブのみ可能な型で動作するよう修正された多数の新旧アルゴリズムについても述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#voronoi&#34; name=&#34;voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Robust and efficient multi precision algorithms design based on Boost.Polygon.Voronoi library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrii-sydorchuk/&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/lucanus-simonson/&#34; target=&#34;_blank&#34;&gt;Lucanus Simonson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複雑な数値計算アルゴリズムの設計と実装はユーザビリティ、拡張性、効率性、堅牢性という4つの要素を満たさねばならない。&lt;/p&gt;
&lt;p&gt;ユーザビリティとは、その分野に精通していないユーザーにとっての、公開されているアルゴリズムインターフェースのわかりやすさである。同時に、精通しているユーザーにとっての、アルゴリズムを構成できる幅のことでもある。&lt;/p&gt;
&lt;p&gt;拡張性とは、アルゴリズムそれ自身、依存するデータ構造、計算カーネル、数値型といった部分を再構成または置換する際、アルゴリズムに汎用性と柔軟性を持たせることである。&lt;/p&gt;
&lt;p&gt;効率性はまずアルゴリズムの複雑度とデータ構造の分析に始まり、メモリやパフォーマンスプロファイルを行い、システム/コンパイラ特異的な最適化に終わる。これには、数値型の操作および現実装と他のよく知られたアプローチとの比較も含まれる。&lt;/p&gt;
&lt;p&gt;堅牢性は数値アルゴリズムの最も重要な研究分野であろう。もし内部データ構造が実行時に破壊されたらどうなるか、という問いに対する答を用意しておくことである。アルゴリズムの出力と、出力がどの範囲で正常かつ信頼できるかを定義することでもある。言い変えれば、受けとった出力とランダムデータとの違いは何か、ということである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、アルゴリズムの動機となった実世界の問題を見ていきながらアルゴリズムを紹介する。Boost.Polygon.Voronoiライブラリで用いているアルゴリズム設計テクニックと実装をもとに、上記で言及した要素全てについて示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#tool-for-class-and-library-authors&#34; name=&#34;tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: New Tools for Class and Library Authors&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この新しい標準はクラスやライブラリ実装者のために、可変引数テンプレートや&lt;code&gt;static_assert&lt;/code&gt;、&lt;code&gt;constexpr&lt;/code&gt;、明示的な変換関数、および&lt;code&gt;decltype&lt;/code&gt;といった多数のツールが用意されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cmake-modularization&#34; name=&#34;cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CMake, Modularization and Ryppl Developer Preview&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rypplは、C++の開発や、構築、テストならびにBoostとそのユーザーの要求、すなわちC++コミュニティに合わせて設計された配信のための基盤フレームワークである。巨大化、複雑化、また潜在的にモジュール化がすすむBoostは、Rypplの完全なテストケースになりえる。このため我々は一年間、このコンセプトを証明するために必要なシステムと変更に取りくんできた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、CMakeを使ってビルドおよびテストできるように、なにもインストールせずに配置できるように、またBuildBotを用いてリモートでビルド、テストできるようにするための、Boostのモジュール化にむけた作業の進捗について示す。BoostCon(訳註：C++Now2012のことか)が始まった時点で、Boost開発者に利用いただける、コミュニティ全体で予備的なレヴュー可能なシステムの機能を完全に揃えている予定である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#now-what&#34; name=&#34;now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Now What? A vignette in 3 parts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;パート1： 美しさ&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は効率性が要求されるところでは復権を果たした。しかし、C++へ移行してきた者に対して、いまだ多くの者が歓迎していない。これはJavaやJavaScript、Pythonからきたプログラマにとって移行の脅威になりえる。C++コミュニティとして、美しく、効率的なコードを書くための、C++11で提供されるツールを梃入れする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート2： 真実&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のハードウェア上では、単一スレッドで実行されるC++コードではマシン性能のたった0.25%ほどしか引き出せない。C++11ではほんのちょっとだけスレッドサポートが解禁された。未来を見据える言語、ライブラリに課せられた最大の試練は、いかにマシン性能の残り99.75%を引き出すか、ということに尽きるだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート3： 美点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過剰なネットワークディヴァイスはソフトウェアの展望を変えつつある。インターネットの基盤は次第に裏方にまわり、増えつづける顧客はディヴァイス上にある情報を簡便に取得できるよう要求している。そのようなシステムが我々のソフトウェア設計と記述にどんな影響を与えるだろうか？この新しい世界におけるC++の果たす役割とは何だろうか。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#compile-time-reparsing&#34; name=&#34;compile-time-reparsing&#34;&gt;コンパイル時 &#39;再パース&#39;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compile-time ‘reparsing’&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/gordon-woodhull/&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コンパイラは今コードをパースしているとする。さて、その一部を再度パースしたいとしたらどうだろう？&lt;/p&gt;
&lt;p&gt;数年前から、ドメイン固有特化言語のためのメタプログラミングライブラリ群が提案され、ユーザーや特殊なライブラリアンはC++内に独自の言語を構築できるようになった。このようなユーザーやライブラリアンは皆、実行時表現のEric Niebler氏によるBoost.Protoに精通する必要がある。しかし、Ábel Sinkovic氏による、コンパイル時文字列パースのためのMetaparseや、&amp;lt;&amp;gt;表記をパースするための、プレゼンターが作成した&#34;とんがった(原：Angly)&#34;パーサもある。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら三つのライブラリを研究し、計算的に等価であることを(一方で、ドメインや表現力の違いについても)示す。コンピュータサイエンスの視点からは、これらライブラリは全てプッシュダウン・オートマトンである。ではなぜインターフェースがこうも違っているのだろう？対象ドメインの違いから生れるものなのか？それともライブラリ著者のバックグラウンドによるものなのか？&lt;/p&gt;
&lt;p&gt;また、コードをごらんいただきながら、これらのライブラリが実際にどのように動作するかごらんいただきたいと思う。このプレゼンテーションの大きな目的は、これらライブラリでどんなテクニックが一般的になっているか見ていくことと、共通のパターンがあるかどうか見ること、そして聴衆の皆様にメタプログラミングテクニックについて習熟していただくことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#type-string-conversions&#34; name=&#34;type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type to string conversions, and vice-versa&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jeroen-habraken/&#34; target=&#34;_blank&#34;&gt;Jeroen Habraken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、型から文字列への変換、またその逆に変換する際の、さまざまな選択肢について研究していく。古くは&lt;code&gt;atoi&lt;/code&gt;や&lt;code&gt;strtol&lt;/code&gt;から、真新しくは&lt;code&gt;std::stoi&lt;/code&gt;や、&lt;code&gt;boost::lexical_cast&lt;/code&gt;のようなBoostで提供されているものまで見る。これら選択肢のエラーハンドリングやフォールバック機構、localeサポートといった観点からみた利点と欠点についても研究する。&lt;/p&gt;
&lt;p&gt;利点と欠点を見ていただいた後は、それら利点と欠点をもとにGoogle Summer of Codeで作成したboost::coerceについて、現在の選択肢をどう補間するか紹介したい。このライブラリは速度や拡張性の面で優れている。このプレゼンテーションでは設計について概説し、またどう達成したかについて、使用法の豊富な例とともに紹介する。&lt;/p&gt;
&lt;p&gt;時間が許すなら、カスタマイズポイントやSpiritとの関連を見ていきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#cpp11-gems&#34; name=&#34;cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Other C++11 Gems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jeff-garland/&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非常に重要だが、それ単品では1セッションに満たないようなトピックについてとりあげる。GarlandとHinnantは&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;から。またstateful allocatorとregexへのサポートについてもとりあげる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#linear-programming-proto&#34; name=&#34;linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear programming made easy with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/patrick-mihelich/&#34; target=&#34;_blank&#34;&gt;Patrick Mihelich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オペレーションリサーチや金融、チップデザインに渡る分野の問題は、線型計画にモデル化できる。決定問題のための高度に汎用的で効率的なアルゴリズムがあるメソッドとして、線型計画法は有効なツールである。&lt;/p&gt;
&lt;p&gt;GLPKのような、線型計画を解くための強力なソフトウェアライブラリが存在するが、低レヴェルAPIが非常に使いにくいので、問題を一旦人が読みづらい形式に変換する必要がある。AMPLのようなモデリング言語を使えば、問題を容易に叙述的に表現できるが、汎用プログラミング言語としての力量と親和性が足りない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは線型計画法を表現し解くための、Boost.Protoを用いたDSELであるCVX++を紹介する。Protoはどちらの世界、すなわちC++に組み込まれた叙述的プログラミングスタイルとして最高の役割を果たしてくれる。CVX++はGLPKをバックエンドソルバとして備え、Protoを用いて目的関数と制約をより機械が読みとりやすい表現に変換する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#solidfire&#34; name=&#34;solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How we switched to C++11 at SolidFire and how it worked out&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/travis-gockel/&#34; target=&#34;_blank&#34;&gt;Travis Gockel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、SolidFireのコードベースをC++03からC++11に移行する過程について、まず作業チームがワクワクするところから順に見ていく。正確性の検証やパフォーマンステストをどう行なったか、またそれとともに、C++03とC++11のどちらでも動作するコードをどう書いたらいいか紹介していくつもりだ(また、どうやって障害を迅速に乗り越えたかについても)。&lt;/p&gt;
&lt;p&gt;C++03/C++11開発で最初の月を越したころ、我々はよりよいコードを書くためにC++03コードベースのサポートを放棄した。このプレゼンテーションの第二部は、新しい標準によってもたらされる新しいコーディングスタイルについて述べる。また、それなしでは実装できなかったとんでもなくトリッキーなクラスや、可読性を上げるためにややトリッキーなことをしているクラスについても紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#refactoring-clang&#34; name=&#34;refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring C++ with Clang&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/chandler-carruth/&#34; target=&#34;_blank&#34;&gt;Chandler Carruth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十年来、C++開発者はJavaなどの言語が持っているツールをうらやましく思っていた。Clangでとうとう、我々は安全な自動変換を構築することができるほど簡便にC++コードの推論ができるようになる。このプレゼンテーションでは特殊なC++パターンの自動認識と変換をサポートする、Clang上に組まれた基盤について紹介する。また、古いAPIから新しい別のAPIへ更新するための、実際のソースコード変換ツールを実装するために必要な知識・技術についても示す。&lt;/p&gt;
&lt;p&gt;ライブラリの利用者が自身のコードを新しいAPIに置換するためのユーザー向けのスタンドアロンツールを組みあげることは、Boostのような広く利用されているライブラリでは非常に重要だが、C++11においては、新しい言語機能の利益を教授するために大量のインターフェースが更新されることになる。これらのインターフェースの採用を自動化することは、広く利用されているライブラリでは、長期にわたってサポートしなければならない非推奨APIの増加を抑える意味でも、急速な進歩をする上でも極めて重大なことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#state-machine-coroutine&#34; name=&#34;state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Boost.Coroutine to untangle a state machine&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/nat-goodspeed/&#34; target=&#34;_blank&#34;&gt;Nat Goodspeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションはイヴェント駆動型プログラムにおけるスタートアップのケーススタディである。このプログラムは外部サーバーへの一連のリクエストを生成し、それぞれ結果が返ってくるまで次のリクエストの生成を待機している。&lt;/p&gt;
&lt;p&gt;もともと、これはグローバルな&lt;code&gt;int&lt;/code&gt;状態変数を使って、巨大な&lt;code&gt;switch&lt;/code&gt;文として実装されていた。内在する関数はすべてのフレームで呼び出され、現在のステートロジックにジャンプし、結果を受けて状態を更新する。&lt;/p&gt;
&lt;p&gt;共同研究者がこれをBoost.Statechartを使って、ロジックをクラスのコレクションとして表現することで再実装した。&lt;/p&gt;
&lt;p&gt;どちらのケースでもロジックの構造は明確だった。実際の制御フローを解明するために、全てのコンポーネントの念入りな研究が必要だった。&lt;/p&gt;
&lt;p&gt;我々は同じロジックを、外部サーバーへのリクエストを結果が返ってくるまで待機する関数呼び出しとして表現するコルーチンとして再実装した。このような関数呼び出しはコルーチンだけを阻害する。すなわち、メインスタックの通常のフレーム毎の処理が継続する。実際のスタートアップ制御フローは、C++に精通していれば誰でも読める三重ループとして表現できる。さらに、メンテナンス(例えば、新しいリクエストを挿入するとか)は非常に容易である - これは前の実装ではとても言えなかったことであるが。&lt;/p&gt;
&lt;p&gt;このようなユースケースにおけるスレッドとコルーチンの対比を行う。&lt;/p&gt;
&lt;p&gt;coroutine オブジェクトの操作法について示す。&lt;/p&gt;
&lt;p&gt;Boost.Coroutineライブラリの微調整についても触れる。&lt;/p&gt;
&lt;p&gt;Boost.Contextがマージされたら、CoroutineをContextで再実装するつもりである。これこそまさにContextがサポートしようとしている種類のライブラリである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#metaprogramming-cpp11&#34; name=&#34;metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming in C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11で導入された新機能で、メタプログラマの世界は変化した。このプレゼンテーションでは、C++11メタプログラムをどう記述するかについての研究結果と、特にこの新しい言語にあわせたBoost.MPLの設計について述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#numerical-problems-metaprogramming&#34; name=&#34;numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming Applied to Numerical Problems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルンゲ=クッタ法と呼ばれるメソッドの高速かつ汎用的な実装をつくるために、現代的テンプレートメタプログラミングの手法をつかう。ルンゲ=クッタ法は常微分方程式(ODE: Ordinary Differential Equation)の初期値問題の近似解を探索する数値アルゴリズムである。常微分方程式を解くのは化学者、物理学者、生物学者にとっては日常のことである…&lt;/p&gt;
&lt;p&gt;今日、異なる一連のパラメータ値をとり、近似解の精度が違う、様々なルンゲ=クッタ法が存在する。そこで、これらのルンゲ=クッタ法を汎用的に実装し、テンプレートメタプログラミングを利用することで、非常に汎用的な実装であるにもかかわらず、非常に高いパフォーマンスを達成した。これは数値計算アルゴリズムの領域においてもテンプレートメタプログラミングの力を印象づける事例である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#tr2-boost&#34; name=&#34;tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boosting Libraries for TR2&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準委員会のLibrary Working Group(LWG)は新しいライブラリの技術報告、TR2に向けたライブラリ提案を待っている。開発者以外の方でも、BoostライブラリをTR2に提案できる。&lt;/p&gt;
&lt;p&gt;このセッションはまず、TR2にBoost ライブラリをうまく提案し、委員会を通して提案を導いていく方法についてのチュートリアルから入る。話す予定のトピックは以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どうしてわざわざこんなことを - 経験から得られるもの&lt;/li&gt;
&lt;li&gt;標準化プロセスの概略&lt;/li&gt;
&lt;li&gt;提案募集&lt;/li&gt;
&lt;li&gt;委員会ウェブサイトの案内&lt;/li&gt;
&lt;li&gt;システム - 提案はどのようなものか、 いつどこで提出するのか&lt;/li&gt;
&lt;li&gt;初期の提案 - 何を詳細に見て、何を詳細に見るべきではないかについて - 演習つき&lt;/li&gt;
&lt;li&gt;提案の用語と標準の記述&lt;/li&gt;
&lt;li&gt;ドラフトとレヴューを手伝ってもらう&lt;/li&gt;
&lt;li&gt;提案提出 - のるかそるか&lt;/li&gt;
&lt;li&gt;委員会からのフィードバックへの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セッションの後ろ半分はTR2にむけて実際にBoostライブラリの提案を一緒にやるワークショップを開く。まず提案のテンプレートの空欄を埋めていくところから始める。このワークショップにはLWGメンバが何人かいらっしゃるので、彼らに助言をもらったり、意見を聞いたりするといいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#how-i-code-and-why&#34; name=&#34;how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How I Code and Why&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost委員会の方々(まだ未定。だが以前のBoostConで参加していただける旨をうかがった方の暫定リストはある)に、日々のコーディングで従っている原則について、なぜこの原則を適用していうのか、どのあたりに価値があると思っているかについて説明していただこうと思う。&lt;/p&gt;
&lt;p&gt;(例えば、私は、なぜ自分の好きなコミットワードが&#39;otherwise&#39;なのか、以前聞いたり読んだりされているかもしれないが、これに関連するどのようなアドヴァイスがあるか、この天啓に至った事件は何かを説明するつもりだ)
このプレゼンテーションの目的は、現実世界の話を時として書籍や講義で語られる高尚な理念に引き上げることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#preparation-cppnow-2013&#34; name=&#34;preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparation of C++ Now! 2013&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来年の会合の準備委員会は早期に動きだす。提案があったり、支援していただける方はぜひご参加いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ Component Extensions for WinRT&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/ale-contenti/&#34; target=&#34;_blank&#34;&gt;Ale Contenti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は他のプログラミング言語やテクノロジー(例えば、 iOSのObjective-C、AndroidのJava、Windowsの.NETなど)を適用するプラットフォームにおいても活用されている。異種プログラミングプロジェクトがもたらす課題の一つに、C++の外部オブジェクトモデルとの結合という要求がある。CORBAやCOMといった既存の方法は一定の成功を収めているが、開発者は複雑性の増大というツケを払う羽目になる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、この問題に対処するために、Microsoftが取った二つのアプローチの詳細について述べる。最初のアプローチは、同じアプリケーションの中に、C++と非C++コンポーネント(外部オブジェクトモデル)が 混在するという複雑性に対処するためにC++抽象化レイヤを採用するというものである。この抽象化レイヤ(例えば Boostユーザーや開発者の方々にはおなじみの今日的C++テクニックをがっつり使ったWRLライブラリとか)はCOMコンポーネントの実装を単純化したが、このソリューションにある一般概念は他のいかなる異種混在環境においても拡張可能である。二つ目のアプローチは、異種言語で記述されたピア(訳註： 同格のコンポーネント)とやりとりするコンポーネントの宣言と定義ができるように、その構文にいくつかの拡張を追加して、C++自身の境界を押し上げることである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら二つのアプローチについて、長所と短所、利点と注意事項についてそれぞれ説明していく。最後に、これらの設計が、C++の進化にとって潜在的にどのような影響を与えるかについてお話しする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#value-semantics&#34; name=&#34;value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Semantics and Concepts-based Polymorphism&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プレゼンターであるSeanは先のキーノートの &lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#now-what&#34;&gt;&#34;Now What? A vignette in 3 parts.&#34;&lt;/a&gt; で話した値のセマンティクスとConceptベースの多態コンセプトについて、更に深めていくつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2012.html#future-of-boost&#34; name=&#34;future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Future of Boost&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostとC++Now!の発起人であるお三方が将来について語り、どう考えているのかお答えする。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi、zak、DigitalGhost&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++Now! 2013 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/cppnow/2013.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:cppnow/2013.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;C++Now! 2013&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://cppnow.org/schedule-table/&#34; target=&#34;_blank&#34;&gt;http://cppnow.org/schedule-t&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2013&#34; target=&#34;_blank&#34;&gt;C++Now! Presentations 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#doe&#34;&gt;キーノート： DOEによるC++の高性能コンピューティング - 過去と未来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#survey-of-mt&#34;&gt;C++11とBoostにおけるマルチスレッドプログラミングサポートの概説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#qt-eventloop&#34;&gt;Qtのイベントループ、ネットワーク、入出力API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#container-boost&#34;&gt;Boostのコンテナ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#low-level-threading&#34;&gt;C++11での低レベルスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#zephyr-cpp11&#34;&gt;&#39;優しきそよ風&#39;の見たC++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#proto-0x&#34;&gt;Proto-0x初お披露目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#nonalloc-future&#34;&gt;アロケートしない&lt;code&gt;std::future&lt;/code&gt;／&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#debug-tmp&#34;&gt;C++テンプレートメタプログラムのデバッグとプロファイリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#optimize-structure&#34;&gt;キーノート： C++の創発的構造を最適化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#small-stuff&#34;&gt;おいしい小さな機能たち： 波カッコ初期化、共用体、列挙型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#agda&#34;&gt;Agdaへの知識向上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#hpx&#34;&gt;HPX: 非同期並列と分散コンピューティングのためのC++標準準拠ランタイムシステム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#scaling-cpp11&#34;&gt;C++11でスケールさせる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#charm&#34;&gt;Charm++を使った並列プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#easy-binary-compatible&#34;&gt;C++の複数コンパイラ間バイナリ互換インタフェースを簡単に作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#transactional-memory&#34;&gt;C++でのトランザクショナルメモリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#libcppa&#34;&gt;libcppa - C++11でのアクターセマンティックな設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#binary-compatibility&#34;&gt;ライブラリ開発者が知るべきバイナリ互換性について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#yet-another-paradigm-shift&#34;&gt;さらなるパラダイムシフト? (並行のMeta4モデル)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#spirit-x3&#34;&gt;Inside Spirit X3: C++11で再設計されたBoost.Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#weak-hiding&#34;&gt;C++コンセプトのための弱い隠蔽: プログラミング言語の名前バインディングについて推論するフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cpp11-qt5&#34;&gt;Qt5でC++11を使う： 課題と解法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#thread-safe-bag&#34;&gt;スレッドセーフでスレッド中立なbag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#practical-cpp11-odb&#34;&gt;実践C++11：ODBへのC++11サポート追加で学んだこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#bloomberg&#34;&gt;応用階層的再利用: Bloomberg基盤ライブラリの利用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#boost-dispatch&#34;&gt;Boost.Dispatch - 汎用タグディスパッチ基盤ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#vienna&#34;&gt;計算科学向けViennaライブラリについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#alignment&#34;&gt;C++のアラインメント: 利用法、制限、および拡張法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#community-dev&#34;&gt;C++ コミュニティの発展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#dynamic&#34;&gt;動的なC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#debruijn&#34;&gt;DeBruijn Bind: シンプルさを維持するより強力なbind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#multi-threading&#34;&gt;C++11とBoostを利用したマルチスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#concept-lite&#34;&gt;軽量コンセプト: 述語による制約テンプレート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#html5&#34;&gt;ママ見て “C++を使ってデータベース更新からHTML5が生成されたよ”, 自動化して!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#odb&#34;&gt;C++(11)のためのORマッパー：ODB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#fusion&#34;&gt;Fusionで世界の謎を解く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#dds&#34;&gt;モダンなC++向けのデータ分散サーヴィス(DDS: Data Distribution Service)の標準化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#member-access-operator&#34;&gt;メンバーアクセス演算子のオーヴァーロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cern&#34;&gt;CERNでの対話的で内省的なC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#haskell&#34;&gt;Haskellの力でMPLを強化しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#object-transmission&#34;&gt;Boost.AsioとBoost.Serialization: オブジェクト受け渡しのデザインパターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cppnow-2014&#34;&gt;C++Now 2014の準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#hetero&#34;&gt;静的型付け言語における、動的で再帰的なヘテロ型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#projucer&#34;&gt;Projucer: C++とLLVM JIT エンジンを利用したライブコーディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#matrix&#34;&gt;EigenとBoost Protoライブラリを用いた有限要素マトリックス式の組み立て&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#deadlock-prevention&#34;&gt;侵入的動的解析を使用したリソースデッドロック防止システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#future-of-boost&#34;&gt;Boostの未来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#doe&#34; name=&#34;doe&#34;&gt;キーノート： DOEによるC++の高性能コンピューティング - 過去と未来&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: C++ Use in High Performance Computing Within DOE: Past and Future&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/daniel-quinlan/&#34; target=&#34;_blank&#34;&gt;Daniel Quinlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=zZGYfM1iM7c&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=zZGYfM1iM7c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#survey-of-mt&#34; name=&#34;survey-of-mt&#34;&gt;C++11とBoostにおけるマルチスレッドプログラミングサポートの概説&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Survey of Multi-Threaded Programming Support in C++11 and Boost&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/rob-stewart/&#34; target=&#34;_blank&#34;&gt;Rob Stewart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このチュートリアルではBoostとC++11によるマルチスレッドプログラミング向けのツールについて概説します。&lt;/p&gt;
&lt;p&gt;このセッションの内容に取り入れる事が明らかな項目としては、例えば &lt;code&gt;std::thread&lt;/code&gt; や &lt;code&gt;boost::thread&lt;/code&gt; 、またより先進的な機能、 例えば &lt;code&gt;std::async&lt;/code&gt; 、それに、これらを実現する為のより基本的な部品として、例えばミューテックス(&lt;code&gt;std::mutex&lt;/code&gt;)、条件変数(&lt;code&gt;std::condition_variable&lt;/code&gt;)、アトミック(&lt;code&gt;std::atomic&lt;/code&gt;) などが挙げられる。&lt;/p&gt;
&lt;p&gt;つまるところこのセッションでは全体として、BoostやC++11が如何に皆さんのマルチスレッドプログラムのコーディングを助けてくれるのかについて概説します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#qt-eventloop&#34; name=&#34;qt-eventloop&#34;&gt;Qtのイベントループ、ネットワーク、入出力 API&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Qt event loop, networking and I/O API&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/thiago-macieira/&#34; target=&#34;_blank&#34;&gt;Thiago Macieira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qtフレームワークが誕生したのは1990年台始めの頃の事、その時Qtはまだ、単純な目的の為だけに開発されたんだ。そう、グラフィカルプリケーションを作る為のクロスプラットフォームなAPI（それもその当時はせいぜいデスクトップとワークステーション程度を対象にね）としてね。それからQtはその目標を遥かに超えてよく成長してくれました。今日ではGUIツールキットの枠を超えて他の多くのサブシステム群、データベース接続、WEB技術との統合、そしてパワフルな非同期I/Oとネットワーク周りの機能等々を提供するに至っている。このセッションではそれらの中から、QtのI/Oとネットワーク周りについてチュートリアル形式で紹介します。&lt;/p&gt;
&lt;p&gt;Qtの全ての非同期的なメカニズム群はイベントループないしメインループによるセントラルイベントハンドリングのループから呼び出されています。そうしてQtが提供する非同期I/Oによる子プロセスの動作や、TCP接続群のアクセプト、TCP接続群の発信の生成、TCPとUDPのI/Oハンドリング、その他のタスク群が構築されています。もちろんそれはHTTPとFTPのダウンロードとアップロードと言った高レベルなイベントにも至ります。このセッションではそれら全てのサブシステム群についてを取り上げ、どうやってアプリケーションにそれらを組み込んで使うのかについて、例示をしたり、それに一緒に議論をしたいと考えています。このセッションを通じてライブラリー開発者とアプリケーション開発者、双方の理解をQtを通して深める機会として頂ければ幸いです。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#container-boost&#34; name=&#34;container-boost&#34;&gt;Boostのコンテナ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Containers in Boost&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/boris-schaeling/&#34; target=&#34;_blank&#34;&gt;Boris Schäling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostライブラリは、多くの便利なコンテナと、標準コンテナの素敵な拡張を提供している。このセッションでは、Boostにある以下のコンテナ群を見ていく： Boost.Multiindex、Boost.Bimap、Boost.CircularBuffer、Boost.PropertyTree、Boost.DynamicBitset、Boost.PointerContainer、Boost.Intrusive。開発者は、自分のプロジェクトに恩恵をもたらすコンテナを選択できるようになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#low-level-threading&#34; name=&#34;low-level-threading&#34;&gt;C++11での低レベルスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Low Level Threading with C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は現在、「メモリモデル」を持っている。それは何を意味するのか、それはなぜあるのか、それが必要ならなぜこれまでなかったのか？これがあると我々は何ができるのか？これは新しく入ったアトミック操作と多少関連があるようだ。うーん・・・。&lt;/p&gt;
&lt;p&gt;(これは昨年やったチュートリアル「C++11の新たなメモリモデルとアトミック」のアップデートである。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#zephyr-cpp11&#34; name=&#34;zephyr-cpp11&#34;&gt;&#39;優しきそよ風&#39;の見たC++11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Zephyr Overview of C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/leor-zolman/&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;去年の事、私はC++11の殆どの機能について、たった90分だけの&#34;嵐の様な&#34;セッションで質問に答える間も無く、その可能性について示すに留まった。&lt;/p&gt;
&lt;p&gt;そして今年、私は1本90分のセッション枠を拡大して、2本分のセッションを使える事になった。参加してくれるみんな（それに私自身も含めて）、今回はきちんと息をする余裕もあるよ。だから今回は質問に答えたり、それにひょっとしたらライブコーディングをできるチャンスもあるかもしれないね。&lt;/p&gt;
&lt;p&gt;内容については凡そ去年のそれと同じにするつもりだけど、去年は時間が無くて扱えなかった言語とライブラリーの機能、それと実装例なんかも用意したいね。&lt;/p&gt;
&lt;p&gt;(訳者註: Zephyr(ゼファー)はギリシア神話の風の神様の中で最も温和で春の訪れを告げる豊穣の優しいそよ風の神様のこと。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#proto-0x&#34; name=&#34;proto-0x&#34;&gt;Proto-0x初お披露目&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A First Look at Proto-0x&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/eric-niebler/&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Protoは、C++に組み込みドメイン特化言語(EDSL)を構築するためのライブラリである。Boostでは、Spirit、Phoenix、Xpressive、MSM、それと提案中ではあるがBoost.SIMDのようなライブラリが、Protoによる式テンプレートベースで構築されている。Protoで定義されたEDSLは、手間のかかるテンプレートメタプログラミングの雑用からライブラリ作者を解放し、構文やセマンティックアクションといった面で、高レベルに表現できる。&lt;/p&gt;
&lt;p&gt;Boost.Protoの現在利用可能なバージョンは、C++03言語の限界を押し上げてはいるが、言語によって課せられる制約で苦しんでいる。このトークでは、C++11で再設計されたProtoの新バージョンについて話す。これは、EDSLの設計を、これまで以上に簡単かつ安全にできる。&lt;/p&gt;
&lt;p&gt;このトークでは、Proto-0xによる小さなEDSL定義の基本をカバーする。新しいProtoは、古いProtoと異なるポイントはあるが、その事前知識は必要ない。C++11の新機能がProtoの設計にどのような影響をもたらしたか、また、それらの機能が一般的なライブラリ設計を、根本的なところでより良くすることを紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#nonalloc-future&#34; name=&#34;nonalloc-future&#34;&gt;アロケートしないstd::future／promise&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Non-Allocating &lt;code&gt;std::future&lt;/code&gt;/&lt;code&gt;promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;共有状態 - mutex/convarが待ち合わせるように別スレッドの処理の結果を置く場所 - は、&lt;code&gt;future&lt;/code&gt;と&lt;code&gt;promise&lt;/code&gt;はいつでもムーヴ、破棄され得るので、&lt;code&gt;future&lt;/code&gt;と&lt;code&gt;promise&lt;/code&gt;で別々にアロケートされる必要があると予想される。故に共有状態には別個のメモリ配置が必要である。&lt;/p&gt;
&lt;p&gt;本当にそうだろうか？&lt;/p&gt;
&lt;p&gt;このセッションでは、等式の右辺、左辺ともにムーヴ中もしくは破棄されようとしていても、アロケートなしで状態を共有するために細心の注意を払ってロックフリーの技術を用いる&lt;code&gt;std::future&lt;/code&gt;／&lt;code&gt;promise&lt;/code&gt;の草案について説明する。&lt;/p&gt;
&lt;p&gt;このセッションは非常にインタラクティヴなものになるだろう。聴者諸氏は実装に漏れがなくなるまで、実装のどのステップについても問題点を指摘していただきたい。このセッションでは、ロックフリーテクニックを現実のコードにどう適用したらいいか、感覚がつかめるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#debug-tmp&#34; name=&#34;debug-tmp&#34;&gt;C++テンプレートメタプログラムのデバッグとプロファイリング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debugging and Profiling C++ Template Metaprograms&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/zoltan-porkolab/&#34; target=&#34;_blank&#34;&gt;Zoltan Porkolab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++テンプレートメタプログラミングは、テンプレートの巧妙な定義によって、C++コンパイラにコンパイル時にアルゴリズムを実行させる、よく知られた手法である。アプリケーションにおけるテンプレートメタプログラムには、式テンプレート、静的なインタフェースチェック、アダプトによるコード最適化、組み込みドメイン特化言語とアクティブライブラリなどがある。C++11の新機能は、テンプレートメタプログラミングをさらに魅力的にする。&lt;/p&gt;
&lt;p&gt;その重要性にもかかわらず、C++テンプレートメタプログラミングの設計、保守、分析を支援するためのツールは、驚くほど少ない。テンプレートの重いコードを使用することでプログラムに増加されるコンパイル時間は、その分野への挑戦が少なくなっている理由のひとつである。利用できるデバッガ、プロファイラといったツールの欠如は、テンプレートメタプログラミングの広い使用を妨げている。&lt;/p&gt;
&lt;p&gt;我々は、これまでの経験に基づいて、テンプレートメタプログラムのデバッガとプロファイラのプロトタイプツールセットを開発している。このツールセットの目的は、C++テンプレートの使用率が高い、大きなコードベースで作業している、開発者やメンテナのためのサポートを提供することだ。このツールセットは、C++テンプレートメタプログラムのバグやコンパイルボトルネックを調査するという、おもしろいことができる。&lt;/p&gt;
&lt;p&gt;このツールセットは、LLVM/ClangオープンソースC++コンパイラインフラストラクチャ上に構築されている。テンプレートに関連するコンパイラアクションの最も重要なキャプチャは、プログラムの「インスタンス化スタック」を記録し、XML形式のトレースファイルを出力する。このファイル内の全てのエントリは、テンプレートインスタンス化の最初か最後を表す。エントリには、Clang仕様のイベントの型が含まれる。さらにくわしい情報は、テンプレートの名前へのインスタンス化、およびインスタンス化によるコードの位置(通常は、呼び出し元)である。プロファイルに関連する情報は、インスタンス化の時間(これは実行時間:wall time)と実際のメモリ使用量が含まれるタイムスタンプである。時間とリソース消費のメモリプロファイリングは、オフにすることができる。プロファイリングの歪み(distortion)を最小限に抑えるには、XMLトレースファイルの内部バッファと生成の遅延を行う。我々の計測では、時間の歪みは3%未満だった。&lt;/p&gt;
&lt;p&gt;また、我々はトレースファイルに格納されている結果を資格する、Qtベースのフロントエンドも開発した。このフロントエンドは、実行時デバッガと同様、ユーザーがブレークポイントを設定でき、ステップバイステップでインスタンス化を再生できる、ソースコードビューを持っている。興味のないインスタンス化は、正規表現を使用して可視化から除外できる。他のビューとしては、インスタンス化にかかる時間と、オプショナルなメモリ使用量のプロファイル情報がある。最後に、インスタンス化の依存関係を表現し、インスタンス化手順のアニメーション化とグラフ化を行う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#optimize-structure&#34; name=&#34;optimize-structure&#34;&gt;キーノート： C++の創発的構造を最適化する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Optimizing the Emergent Structures of C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/chandler-carruth/&#34; target=&#34;_blank&#34;&gt;Chandler Carruth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=eR34r7HOU14&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=eR34r7HOU14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日、C++ソフトウェアの複雑さはいや増している。この複雑さを管理し、大規模アプリケーションやシステムを構築するべく、C++は、シンプルなパターンを組み合わせて非常に複雑かつ強力なシステムをつくりだす創発的構造(自然界ではよく見られる、雪の結晶のような対象構造)をつくりだすべく努力している。このような構造により、各コンポーネントの複雑性を制限し、ソフトウェア開発する上で信頼できるスケーラビリティが得られる。&lt;/p&gt;
&lt;p&gt;手持ちのディヴァイスからウェアハウス級データセンターまで、よりディヴァイスを小さくしようとしたりと電力消費を抑えようとして、C++を利用すると、効率と複雑さが相応しないシステムになってしまうことは疑いない。今日も最適化がすすむC++コンパイラはかつてないほどその重要性が高まっているが、現役プログラマにはほとんどそれが伝わっていない。これらのことを鑑みると、高度創発的構造はC++システムを拡大し、しばしば最適化に関する独創的で未解決の問題を提起することがある。&lt;/p&gt;
&lt;p&gt;このセッションでは、今日の最適化されたコンパイラがC++コードをいかに高度にコンパイルするか、という概観から始める。次に、C++コードの創発的構造を単純かつエレガントに形成する鍵となる特殊な構造とパターンについて概説する。さらに、このような相互作用をいかに効率的にモデル化し解析できるかについて、効率的な完成プログラムを作るためのコンパイラを使って検証する。実際のケーススタディを例としてとりあげ、最新のC++コードベースで表現され、広く適用可能であることを示す。これらのパターンによる意味に気付いていただくために、最適化されたコンパイラとC++コード双方の相互作用を理解するためのフレームワークを示すことが目的である。最後に、特にそれぞれのコンポーネントが単純さを保持し、組み合わせによって力を発揮する、今日の最適化向けの方法を示すため、C++プログラムやライブラリの設計上、実装上の技術および原理について示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#small-stuff&#34; name=&#34;small-stuff&#34;&gt;おいしい小さな機能たち： 波カッコ初期化、共用体、列挙型&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sweating the Small Stuff: Brace Initialization, Unions and Enums&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11は多くの派手な新機能がある： ラムダ式、ムーブコンストラクタみたいな。このようなカッコイイ機能に比べてセクシーさでは劣るが、便利な変更がいくつか入った。このトークでは、初心者から中級レベルの専門家に向けて、C++11の波カッコ初期化(一様初期化とも呼ばれる)、共用体、列挙型について話す。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;agda&#34;&gt;Agdaへの知識向上&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Intellectual Ascent to Agda&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/david-sankel/&#34; target=&#34;_blank&#34;&gt;David Sankel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数学とコンピュータサイエンスについて考えていると、漸近解析と物理シミュレーションのビックリするようなアルゴリズムが思いつくことがある。これらはいつも見過ごされがちな表示的意味論であり、構文と意味論の数学である。&lt;/p&gt;
&lt;p&gt;表示的設計(denotative design)、表示的意味論の実践は、シンプルで、合成可能で、信じられないほどパワフルなライブラリを作るトップダウン設計の方法論である。これは全く異なる文化のものだが、一般的に使用できる。そのパワフルなテンプレートエンジンは、C++に特に適している。&lt;/p&gt;
&lt;p&gt;このセッションでは、純粋関数型で依存型言語であるAgdaの構文を使用して、ドメイン固有の数学的エンティティからC++プログラムに派生させる表示的設計を、以下にして適用するかを学ぶ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#hpx&#34; name=&#34;hpx&#34;&gt;HPX: 非同期並列と分散コンピューティングのためのC++標準準拠ランタイムシステム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HPX: A C++ Standards Compliant Runtime System For Asynchronous Parallel And Distributed Computing&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/hartmut-kaiser/&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/vinay-amatya/&#34; target=&#34;_blank&#34;&gt;Vinay Amatya&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マルチコアとマルチスレッディングは、新しい計算手法であり、科学分野か非科学分野かに関わらず、システムの継続的なスケーラビリティを得るためには、ノード内だけでなくノード間もスケールさせる必要がある。新しいアーキテクチャにおける計算量やサイズ増加といったものは、スタベーション、レイテンシー、オーバーヘッド、競合解決待ちと呼ばれ、これらはシングルコアマシンでも存在はしていたが、表面化しにくかった。Exaflopレベルにシステムを拡張すると、この大幅に少ないリソース使用率の面でコストが増加する。その間、スケーリングシステムであっても、特定クラスのアプリケーションは従来の計算モデルを使用してスケールすることはできない。&lt;/p&gt;
&lt;p&gt;HPXは、新たな計算モデルに対する新たなランタイムシステムである(ParalleXは、上述した問題への挑戦である)。HPXはC++で実装され、最新のC++標準とBoostに準拠している。HPXは、新たな計算モデルに対する新たなランタイムシステムである(ParalleXは、上述した問題への挑戦である)。HPXは、様々な実績あるソフトウェア技術とアルゴリズムを、理解しやすくすることができます。HPX APIは、マルチコア・マルチスレッド化された混在アークテキチャとユーザーレベルソフトウェアアプリケーションのシームレスな統合のためのインタフェースを提供し、学ぶのを容易にする。&lt;/p&gt;
&lt;p&gt;非同期と計算、通信、それらを組み合わせることは、新たなマルチコア混在アーキテクチャをサポートする、新たな計算モデル要件のひとつとして重要である。非同期タスク(アクションという形式でのローカル関数やリモート関数)は、HPXの主要設計機能のひとつである。HPXは最新のC++標準がサポートしているローカル非同期関数だけでなく、リモート非同期関数も実装している：Actionという。これに加えて、非同期をサポートするのに本質的な、タスク実行中にFutureやDataFlowとしてデータを構築することができる。&lt;/p&gt;
&lt;p&gt;マルチコアドメインはシステムアーキテクチャ分野での巨大な飛躍にも関わらず、数十コアを超えたスケーラビリティ制限の課題がある。したがって、高パフォーマンスシステムでは、我々は複数ノードのBeowulfタイプのクラスターに依存している。通信の待ち時間が大幅に増加するようなシステムでは、非同期が大きな役割を果たしている。これに加えて、コアを数万を超えて拡張すると、新たなアドレッシングシステムが必要となり、アクティブアプリケーションのリモートスレッドオブジェクトを一時的に停止するのを許可するだけでなく、リソースの必要性(システム的な失敗やビジー状態)に従ってタスクを移動する必要がある。このアクティブなアドレッシングスキームは、HPXではActive Global Address Space(AGAS)として実装されている。このアドレッシングスキームは、HPXを、アプリケーションの必要性に応じた正しいリソース配置のためのリソースマネージャーをサポートすることを可能にする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#scaling-cpp11&#34; name=&#34;scaling-cpp11&#34;&gt;C++11でスケールさせる！&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scaling with C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/edouard-alligand/&#34; target=&#34;_blank&#34;&gt;Edouard Alligand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロセッサのコア数が増加するにつれて、ソフトウェアはムーアの法則からの恩恵を受けるために、複数のタスクを実行できるようにする必要がでてきます。これは並列アルゴリズムを書くという問題だけではなく、スレッド間の依存関係を正しく減らす、アプリケーション設計の問題でもあります。これらの依存関係を見つけることは、シリアルプログラミングの数十年の結果から見ても、非常に難しいことです。したがって、真にスケーラブルなソフトウェアを書くことは、精神状態を適切に適応させることよりも小さな、技術的な専門知識の問題です。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションは、超スケーラブルなデータベースである「quasardb」を書いたチームによって使用されている、設計、手法、ツールについて話します。具体的なスケーラビリティの課題として、典型的なマルチスレッドプログラミングのアンチパターンと、それを避ける方法を紹介します。説明するトピックは、以下のものをカバーします：アトミック、マイクロロック、Lock-freeとwait-freeなコンテナ、メモリ管理戦略(copy on write、スマートポインタ、完全転送)、スレッドローカル記憶域、非同期I/I、その他いろいろ！&lt;/p&gt;
&lt;p&gt;このプレゼンテーションは、システムプログラミングとC++11(ラムダと右辺値参照)の十分な知識を想定しています。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#charm&#34; name=&#34;charm&#34;&gt;Charm++を使った並列プログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parallel Programming using Charm++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/phil-miller/&#34; target=&#34;_blank&#34;&gt;Phil Miller&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/axmikant-kale/&#34; target=&#34;_blank&#34;&gt;Laxmikant Kale&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/ramprasad-venkataraman/&#34; target=&#34;_blank&#34;&gt;Ramprasad Venkataraman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Charm++は、20年の実績があり、シングルワークステーションから世界最大のスーパーコンピュータまでカヴァーするハイパフォーマンスなC++ベースの並列プログラミングフレームワークである。このフレームワークは共有メモリシステムと分散メモリシステムを、双方のシステムで共通な技術で横断できる並列実行機能を備える。&lt;/p&gt;
&lt;p&gt;並列の単位としてオブジェクトを利用することで、Charm++は、関連するオブジェクトのコレクションによる並列アプリケーションロジックが表現できる。これにより、現存するハードウェアを十分効率的に利用する、結合可能な並列ソフトウェアが作成できる。実行中、Charm++のランタイムシステムはアプリケーションの挙動とシステムの状態を観測し、その結果に応じて、オブジェクトとプロセッサのマッピングを行なう。そうすることで、ランタイムシステムは効率よくロードバランスやエネルギー管理といったドメインに依存しない要求を自動化できる。それゆえ、アプリケーション開発者は、アプリケーションやユーザーからのそういった要求に取り組むことから解放される。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではCharm++での並列アプリケーション開発の原理について示す。このパラダイムを使った並列アルゴリズムを記述する利点についても述べる。高速でスケーラブルなソフトウェアを作成するためにCharm++をどのように使うかという例もいくつか紹介する。Charm++を使って、自身の並列プログラムを構築するための並列ロジックをどう組みあげるかについて学習する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#easy-binary-compatible&#34; name=&#34;easy-binary-compatible&#34;&gt;C++の複数コンパイラ間バイナリ互換インタフェースを簡単に作る&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy Binary Compatible C++ Interfaces Across Compilers&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/johnbandela/&#34; target=&#34;_blank&#34;&gt;John Bandela&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は他の生産性が高い言語から、使うのが難しいと認識されています。その理由のひとつに、バイナリコンポーネントの互換運用性の欠如があります。ライブラリを使用するとそのうち、ソースから構築したり、複数のバイナリを配布したりする必要が出てきます。たとえばWindowsでは、GCC Mingw、Visual C++ 2010(のリリース、デバッグ、静的と動的のCRT)、Visual C++ 2012などのバイナリを配布する必要があります。この問題を回避するための試みがいくつかある。たとえば、選択肢のひとつとしてextern Cを拡張してCOMやXPCOM、C++/CXといったものを追加することが考えられるが、このオプションにはコンパイラの拡張機能を必要とするとともに、現代のC++では低レベルであるように感じる。&lt;/p&gt;
&lt;p&gt;C++11を実装している多くのコンパイラは、ラムダ式や可変引数テンプレートといった便利な機能を持っており、これらを使用して簡単に複数のコンパイラ間で動作するバイナリインタフェースを実装できます。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、以下の恩恵を受けるための、ライブラリの設計と実装について議論します：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部ツールを必要としない&lt;/li&gt;
&lt;li&gt;インタフェースを一度だけ定義し、その定義を実装とユーザーコードで使用する&lt;/li&gt;
&lt;li&gt;インタフェースは、簡単に実装でき、一度だけ定義すればよい&lt;/li&gt;
&lt;li&gt;そのインタフェースで&lt;code&gt;std::string&lt;/code&gt;、&lt;code&gt;std::vector&lt;/code&gt;、&lt;code&gt;std::pair&lt;/code&gt;を使用する&lt;/li&gt;
&lt;li&gt;現実的な戻り値で使用する(エラーコードではない)&lt;/li&gt;
&lt;li&gt;例外を使用する実装と使い方&lt;/li&gt;
&lt;li&gt;COMとバイナリ互換性を持つ&lt;/li&gt;
&lt;li&gt;インタフェースの継承をサポートする&lt;/li&gt;
&lt;li&gt;実装の継承をサポートする&lt;/li&gt;
&lt;li&gt;実装は、WindowsのVisual C++の実行ファイルとGCCの.dllでテストした&lt;/li&gt;
&lt;li&gt;実装は、LinuxのGCCの実行ファイルと、Clangの.soでテストした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、上記の機能の実装について議論し、そのいくつかのトレードオフを見ていきます。私は、参加者との、異なるアプローチでこれよりうまく作る方法について議論するのを待ちわびている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#transactional-memory&#34; name=&#34;transactional-memory&#34;&gt;C++でのトランザクショナルメモリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transactional Memory in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準のSG5は、2種類のトランザクションに基いて&lt;a href=&#34;https://sites.google.com/site/tmforcplusplus/&#34; target=&#34;_blank&#34;&gt;V1.1 of the Draft Transactional Memory for C++&lt;/a&gt;を4年間取り組んでいる。&lt;/p&gt;
&lt;p&gt;この提案は、2種類のトランザクションをサポートする：&lt;/p&gt;
&lt;p&gt;分離トランザクション(isolated transaction)はいくつかの種類の安全性アノテーションを通じて、非トランザクションコード(と同様のトランザクション)と通常のトランザクションを通信できる。&lt;/p&gt;
&lt;p&gt;我々はさらに、完全なコンパイル時チェックから動的チャックまで、様々なレベルの安全性アノテーションをサポートするための異なる手法を示し、プログラマの負担を軽減させる。&lt;/p&gt;
&lt;p&gt;これがSG5の技術仕様としてのBrisol 2013の提案意図である。&lt;/p&gt;
&lt;p&gt;現在あるいくつかのTMは、時期尚早だと考えているが、ハードウェアサポートが間もなく来るだろう、ということを言わせてほしい。Intelは最近Haswellを発表したし、IBMのBG/Q、それ以前にはSunのRockもある。ソフトウェアTMサポートとしては、IntelはSTMのDraft 1.0をかなり前からサポートしているし、直近ではGCC 4.7がほぼ完全なDraft 1.1をサポートしている。&lt;/p&gt;
&lt;p&gt;それでもまだ早すぎると思う場合は、Hans Boehmの発見のひとつが、ロックはジェネリックプログラミングでは実用的ではない、ということだったと言わせてほしい。なぜなら、ロックの順序は一般的にインスタンス化されるまで見えないからだ。C++11で導入されたロック(とアトミック)では、この問題を回避するのが困難だ。トランザクショナルメモリは、この問題を解決するひとつの方法である。それは不規則なデータ構造や、読み取りを主に行うデータ構造(read-mostly structure)に対して細粒度ロックするのにも役立つ。&lt;/p&gt;
&lt;p&gt;このトークでは、我々は使用経験やパフォーマンスデータを含む、標準C++への提案を紹介する。&lt;/p&gt;
&lt;p&gt;トランザクショナルメモリが十分に速いことに、まだ疑問を持っている？多くのソフトウェアトランザクショナルメモリシステムは異なるパフォーマンス特性を持っているので、どれかはあなたのニーズを満たすと思う。&lt;/p&gt;
&lt;p&gt;TMは様々な形(ハードウェア、ソフトウェア、ハイブリッドシステム、ロック省略)で到来している。すでに多くの言語がTMをサポートしているので、C++にこれを提案するのはいい時期だろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#libcppa&#34; name=&#34;libcppa&#34;&gt;libcppa - C++11でのアクターセマンティックな設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libcppa - Designing an Actor Semantic for C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/dominik-charousset/&#34; target=&#34;_blank&#34;&gt;Dominik Charousset&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/matthias-vallentin/&#34; target=&#34;_blank&#34;&gt;Matthias Vallentin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;並列ハードウェアで効率的にプログラムを実行させるには、並行性は必須である。しかし、並行ソフトウェアを書くことは、挑戦的であり、エラーが起こりやすい。C++はマルチスレッドプログラミングの標準的な設備、acquire/relaseセマンティクスによるアトミック操作とRAIIのミューテックスロッキングを提供するが、これらのプリミティブはあまりにも低レベルである。それらを正しくかつ効率的に使用するには、まだ専門的な知識と手作りが必要だ。アクターモデルは、暗黙的な通信を、明示的なメッセージパッシングメカニズムによる共有で置き換える。これは分散的な並行性として適用でき、事前に次元が決定されたスレッドプール内の全てのアクターをスケジュールした軽量アクターモデルの実装は、スレッドベースアプリケーションと同等のパフォーマンスを出すことができる。しかしアクターモデルは、ネイティブプログラミング言語のベンダー固有のソリューションには入れない。オープンソースライブラリであるlibcppaで我々は、C++11のパフォーマンスとリソース効率を持つアクターモデルによって、信頼性の高い分散システムを構築する能力を統合したい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cppnow.org/files/2013/03/dominik_charousset_paper_cppnow2013.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#binary-compatibility&#34; name=&#34;binary-compatibility&#34;&gt;ライブラリ開発者が知るべきバイナリ互換性について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Binary compatibility for library developers&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/thiago-macieira/&#34; target=&#34;_blank&#34;&gt;Thiago Macieira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C標準のように、C++標準はコンパイラの重要なふるまいと、合法なプログラムを構成するものを規定している。しかし、ABIとバイナリ互換性に関する問題については、意図的にうまく避けられている。今でさえ、それぞれ独自に管理されるモジュールやダイナミックリンクに関する問題や経験について、あまり議論されていない。Cよりもはるかに複雑かつ強力なので、コンパイラはCよりもはるかにややこしいC++ABIを作る。(原文: Because it is much more complex and powerful than C, compilers implement a C++ ABI that is an order of magnitude more complex than C++. 訳註: Cのtypoか)また、Cとは異なり、単一のプラットフォーム(オペレーティングシステムとアーキテクチャ)であっても、C++のABIはコンパイラごとに異なる。&lt;/p&gt;
&lt;p&gt;未だライブラリ開発者はしばしばCやC++標準に定義されていないこの種の問題について、理解したり解決したりする必要に迫られる。これは決して不可能なことではなく、リリース間のバイナリ互換性を保証するための信頼できる単純なガイドラインやチェックリスト、ツールや作業が存在する。これらを利用して、複数のリリースにわたって、大きなライブラリの長期間以前のヴァージョンとの互換性を維持することが可能である。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、この種の現実にある問題と主にQtやKDEで使われた解法について述べる。特に、Qt4がどうやって7年間にわたり、9つの機能リリースと数十個のパッチリリースをしてなおリリースバイナリの互換性を維持したのかについて示す。また、間違いとその修正についても示す。その後、どのようにコンパイラがABIを作るのかについて詳細な議論をしたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#yet-another-paradigm-shift&#34; name=&#34;yet-another-paradigm-shift&#34;&gt;さらなるパラダイムシフト? (並行のMeta4モデル)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: yet another paradigm shift (yaps) ? (A Meta4 model of concurrency)   &lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/stanley-lippman/&#34; target=&#34;_blank&#34;&gt;Stanley Lippman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=SLLOSAm-OS0&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=SLLOSAm-OS0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特にC++の話として、C++の後ろに見え隠れする非常に先進的なアイデア/技術の兆候から、同型の多細胞生物の受精を例にとって、進化でも革新でもなく、単にmeta4layersの同期をとるだけというさらなるパラダイムシフトの提案に至るまでの言語のライフサイクルについて議論したい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#spirit-x3&#34; name=&#34;spirit-x3&#34;&gt;Inside Spirit X3: C++11で再設計されたBoost.Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inside Spirit X3: Redesigning Boost.Spirit for C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/joel-de-guzman/&#34; target=&#34;_blank&#34;&gt;Joel de Guzman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostCon ’07、’08、’09、’10で行ったSpiritの使い方に関するチュートリアルは、大きな成功を収めた。この時間では、Spiritの設計と実装に焦点を当てたプレゼンテーションを行う。さらなる挑戦として、C++11の新機能のアドバンテージを活かして、Boost.Spiritを大きく再設計した。この実験的なバージョン(X3)の、ひとつの大きな目標は、C++の言語機能不足のために失われた「Classic」のエレガントなシンプルさを取り戻すことだ。この90分のプレゼンテーションでは、現代的なC++11コードで今汚いポイントに挑み、私の経験に基づくC++11の欠点を共有した上でC++1yの希望について話したい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#weak-hiding&#34; name=&#34;weak-hiding&#34;&gt;C++コンセプトのための弱い隠蔽: プログラミング言語の名前バインディングについて推論するフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Weak Hiding for C++ Concepts: via a Framework for Reasoning about Name Binding in Programming Languages&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/larisse-voufo/&#34; target=&#34;_blank&#34;&gt;Larisse Voufo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の名前探索とオーバーロード解決の規則は複雑で(伝統的なスコープ、ADL、テンプレート引数の推論とSFINAE、オーバーロード、それらの組み合わせ)、コンセプトを言語に追加すると、これらの規則がさらに複雑になります。コンセプト付きC++のために名前探索とオーバーロード解決の規則の最高の代替設計を行うことは、現在の規則が不透明であることから困難です。&lt;/p&gt;
&lt;p&gt;現在のものと提案中のもの、両方の規則を解説するために、プログラミング言語の名前探索(名前バインディングとも言う)のための解説システムのための統合フレームワークを紹介します。このフレームワークは、現在の規則を説明できるだけでなく、名前探索(とオーバーロード解決)に対してコンセプトの提案がどのような影響を与えるのか理解するのを用意にするためにも使用できます。このモデルは、異なる言語の微妙な違いや潜在的な拡張機能、ADLの複雑さ、演算子を使用する際の標準的な規則の誤解といったものを表現します。さらに、Clangの拡張であるConceptClangなどの既存のコンパイラに対して、C++のコンセプトの実装を調査することも可能にします。&lt;/p&gt;
&lt;p&gt;たとえば、C++にコンセプトが含まれていた最後のドラフト(N2914)での名前探索とオーバーロード解決の仕様では、制約テンプレートのところで、現在の規則の元で正しいコードを無効にしてしまいます。この問題が起きる原因は、制約名が、テンプレートの外で定義された名前と同じように扱われるからです。&lt;/p&gt;
&lt;p&gt;我々が提案するフレームワークは、「弱い隠蔽(Weak Hiding)」という別な選択肢をとります。これは周囲のスコープ(と関連する名前空間)にある名前が、テンプレート制約の名前のみを使用してオーバーロード解決に成功した場合のみ隠す、という中間のアプローチです。名前バインディングのための我々の統合フレームワークでは、このモデルは、名前バインディング、バインディングなし、(ADLのために)開く、弱い隠蔽という、4つのスコープの関係で表現され、そして関連するその他のアイディアは、言語と設計抽象的な最小限の2つの概念です。このプレゼンテーションでは、名前バインディングインフラストラクチャと主要な調査結果の要約をし、制約テンプレートを定義するための、弱い隠蔽の導入に焦点を当てます。はじめに、初心者と専門家両方の視点から、問題に対する実用的な例として、弱い隠蔽の必要性を示します。その後、我々のConceptClangが行ったいくつかの設計上の決定を説明します。このセッションが終わったあと、参加者は、現在のものと拡張案、両方のC++の名前探索のルールについてより良い理解が得られるでしょう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cpp11-qt5&#34; name=&#34;cpp11-qt5&#34;&gt;Qt5でC++11を使う： 課題と解法&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 use in Qt5: Challanges and Solutions&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/thiago-macieira/&#34; target=&#34;_blank&#34;&gt;Thiago Macieira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qt5は昨年12月にリリースされた、有名なQtフレームワークの最新メジャー版である。C++フレームワークであるので、Qtの開発はもちろんC++11に大きな影響を受け、C++11のおもしろい機能、特に高速なコードの作成や可読性を向上させるような機能を利用しようとした。コンパイラがC++11の機能を実装するほどには、Qtのようなフレームワークは早く実装できなかった。加えて、Qtは二つの問題に直面した。一つ目は、まだ利用しているユーザーがいるので昔のコンパイラとツールチェインをサポートする必要があったこと。二つ目は、Qt4と可能な限りソース互換性を維持するというのが、Qt5の目標ひとつだったことである。このような要求に応えるために、当面のあいだ、C++11の大規模な採用は見送ることなった。&lt;/p&gt;
&lt;p&gt;それゆえ、Qt開発者はどのC++11機能を使うべきでないか、どの機能を使うべきか、C++98/03コンパイラ互換をどうやって維持するかについて考える必要性にせまられた。このセッションでは、結局どういう決定を下したのか、また、C++98/03とC++11モードそれぞれでさまざまなコンパイラをサポートする措置について話そうと思う。Qtで適用した解決法、およびC++11とC++03で利用可能である巨大なC++クラスライブラリ構築を試みる際の一般的な考えかたについて知見が得られるだろう。このプレゼンテーションでは、ようするに我々のように、C++03コンパイラ互換性を維持したまま、ライブラリやアプリケーションをC++11に移植する必要にせまられた、C++開発者向けの実践的ガイドラインを示すことが狙いである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#thread-safe-bag&#34; name=&#34;thread-safe-bag&#34;&gt;スレッドセーフでスレッド中立なbag&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thread-safe and Thread-neutral Bags&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/richard-saunders/&#34; target=&#34;_blank&#34;&gt;Richard Saunders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bagは多数のスレッドが処理を実行するために継続的かつ非同期にbagからデータを取り出すようなスレッドシステムで使う基本的なコンテナである。bagはキー操作(get)を持ち、概念上はシンプルであるが、スレッドセーフ(bagの状態は複数のスレッドからアクセスされても一貫性を保持する)かつスレッド中立(スレッド同士が競合しない)に実装しようとするととてつもなく難しくなる。&lt;/p&gt;
&lt;p&gt;このセッションではスレッド環境下でのbagの実装について、さまざまな角度から、特に、多数のスレッドがbagに絶えまないアクセスや、作業の性質、マシンに積んでいるプロセッサの数とタイプ、高速な生産者/消費者関係などについて見ていく。ただ一種類のbagではあらゆる要求を満足できないのは明らかだ。この論文ではbagに関して、アプリケーションの性質に応じて引き出しと戸棚という二つの抽象化を紹介している。これらの新しい抽象化を、スレッドセーフでスレッド中立なbagを担保しうるC++11のマルチスレッドまわりの機能を利用して実装する。いずれの実装についても人工のベンチマークと実際のアプリケーションで利用し十分な吟味を行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cppnow.org/files/2013/04/saunders_paper_cppnow2013.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#practical-cpp11-odb&#34; name=&#34;practical-cpp11-odb&#34;&gt;実践C++11：ODBへのC++11サポート追加で学んだこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical C++11: What I Learned Adding C++11 Support to ODB&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/boris-kolpackov/&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ORMにC++11サポートを加えていく過程で、新しい言語機能や他のコンパイラのサポート状況といった実践的な経験が得られた。また、想像できるかもしれないが、これは大変な仕事だった。このセッションでは、新しい言語機能について利用できる経験則について議論したい。&lt;/p&gt;
&lt;p&gt;このセッションでは、完全転送とオーヴァーロードはとても相性が悪い(また、その対処方法)、値渡しと参照渡し(また、左辺値参照か右辺値参照か)の使いわけ、範囲forループの内側について話すつもりである。また、C++98とC++11をサポートするクロスプラットフォームライブラリで、実際に遭遇した実装面での問題についても取りあげたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#bloomberg&#34; name=&#34;bloomberg&#34;&gt;応用階層的再利用: Bloomberg基盤ライブラリの利用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Applied Hierarchical Reuse: Capitalizing on Bloomberg’s Foundation Libraries&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/john-lakos/&#34; target=&#34;_blank&#34;&gt;John Lakos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ライブラリの設計は大変な仕事である。特に、相互運用性のある組み換え可能なライブラリセットの設計ともなるといっそう困難である。複数のライブラリを機能面で分割すれば、それ固有の課題がでてくる。すなわち、ライブラリの機能はわかりやすく、冗長性は排除しなければならず、コンポーネントとライブラリにまたがるインターフェースと契約関係は、高性能なIDEがなくても容易に理解できるようにしなければならない、ということだ。さらに、ライブラリ間の依存性にはよく気をつけなければならない - ライブラリは首尾一貫して機能し、よく精査された語彙を定義、利用しながら、クライアントが必要とする機能分だけのコンパイル時間やリンク時間、実行ファイルサイズで済むものでなければならない。&lt;/p&gt;
&lt;p&gt;複数の相互運用可能なライブラリセット作成にも、それぞれのライブラリ作成と同様に多くの課題がある。そのライブラリセットは理解しやすく、利用しやすく、高性能で信頼性がなければならない。さらに、ライブラリ全体が共通の構造を取り、表現を根拠なく変えず、一貫した用語を使っていなければならない。ライブラリ全体でこのような高度な一貫性や性能、信頼性を達成することで、個々のライブラリにおける部分的な信頼性は非常に高くなる。さらに、単一のライブラリを作成する際にも、このような手法を採用すれば、かなりの恩恵にあずかれるだろう。&lt;/p&gt;
&lt;p&gt;小-中規模プロジェクト向けのソフトウェア方法論は多くあるが、これらをごく単純には大規模な開発にスケールすることはできない。このセッションでは、大規模開発における問題点や、実績のあるコンポーネントベースの方法論ではどうにもならない問題に対処すべく見いだし、Bloombergの実用的なアプリケーション開発を通じて洗練された関連技術について述べる。これらの方法論 - 三階層集約、非循環依存性、名詞句結合、高粒度機能分解、クラスカテオゴリ、限定的契約、コンポーネントレヴェルテスティングなど - の現実的応用については、最近リリースされたばかりのオープンソースディストリビューションであるBloomberg基盤ライブラリを利用して紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#boost-dispatch&#34; name=&#34;boost-dispatch&#34;&gt;Boost.Dispatch - 汎用タグディスパッチ基盤ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Dispatch - Generalized Tag Dispatching Infrastructure Library&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/joel-falcou/&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mathias-gaunard/&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型制約を自由に組み合わせる種の関数特殊化を規定するのは、C++ではめんどうな仕事である。というのも、そのような制約はすぐにどんどん増えるし、どんどんややこしくなるからだ。この問題を解決するために、SFINAEやタグディスパッチなど様々なイディオムが利用されてきた。&lt;/p&gt;
&lt;p&gt;このセッションではBoost.Dispatchを紹介する。これは、タグやその関連性を定義するプロトコルを備え、任意のタグの組み合わせと関数実装とをマップし、自由で結合可能な方法で前述の特殊化リストを拡張できる、タグディスパッチの利用や管理を容易にする基盤ライブラリである。Boost.Dispatchの新しい利点は、関数の特性や型特性のより古典的な用法に加えてディスパッチを導くための構造上の情報を分類できる機能だ。&lt;/p&gt;
&lt;p&gt;このセッションではまずSFINAEや、C++でのオーヴァーロードとタグディスパッチの意味と、その限界についてざっと説明する。単純なライブラリ設計から、自明でない構造に依存する情報に基づいて、関数の最適な実装を選択するためのライブラリを利用する、実際の高効率コンピューティングコードにわたるサンプルとともに、Boost.Dispatchを紹介していく。さらに、ライブラリの実装についての詳細を見ていただき、未解決の課題について概説したい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#vienna&#34; name=&#34;vienna&#34;&gt;計算科学向けViennaライブラリについて&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Discussion of Selected Vienna-Libraries for Computational Science&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/karl-rupp/&#34; target=&#34;_blank&#34;&gt;Karl Rupp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CUDA、OpenCL、OpenMPが利用可能な線型代数ライブラリであるViennaCL、メッシュデータ構造ライブラリであるViennaGrid、データ保存を受けもつViennaData、シンボリック計算カーネルであるViennaMathといった直交するライブラリ群を紹介することで、計算科学のとっつきにくさに取り組む。結びに、有限要素法パッケージであるViennaFEM内で、これら直交するライブラリ群がどのように相互作用しているか考察する。このセッションの主眼は様々なプログラミング技法の適用について、またC++がいかに計算科学向けの言語になりうるかについてである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cppnow.org/files/2013/03/karl.rupp_.paper_.2013.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#alignment&#34; name=&#34;alignment&#34;&gt;C++のアラインメント: 利用法、制限、および拡張法&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alignment in C++: Use, Limitations, and Extension&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-spencer/&#34; target=&#34;_blank&#34;&gt;Michael Spencer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションではC++におけるアラインメントを調査する。まず最初に、C++11でのアラインメントまわりの変更について概説し、効果的な利用法について述べる。次にその制限について述べる。その次に、それら問題点に対処するために、アラインメントを型システムに載せることで解決する方法を提案する。最後に型安全性と実行時効率の恩恵について述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#community-dev&#34; name=&#34;community-dev&#34;&gt;C++コミュニティの発展&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ Community Development&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/jens-weller/&#34; target=&#34;_blank&#34;&gt;Jens Weller&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JensとJonは両名ともC++コミュニティの発展に意欲があり、C++カンファレンスに出席した経験がある。彼らはコミュニティの発展にはローカルグループこそがC++コミュニティ発展の鍵であると感じている。&lt;/p&gt;
&lt;p&gt;Jensは、ヨーロッパのC++Nowとも言えるMeeting C++の主催者として、またデュッセルドルフとベルリンのC++ユーザーグループを立ちあげた経験について紹介する。&lt;/p&gt;
&lt;p&gt;JonはシリコンバレーのACCU支部での経験や、シリコンバレーコードキャンプでのC++プログラミング経歴、C++Nowでの活動について紹介する。&lt;/p&gt;
&lt;p&gt;その後、パネルディスカッションスタイルで、質問やコメントを受けつけたり、聴講者の経験についてうかがう。&lt;/p&gt;
&lt;p&gt;ローカルでグループを立ちあげるコツや、個人的人脈やソーシャルメディアを通じてスピーカーや聴講者を募る方法、他のグループと連携する方法についても述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#dynamic&#34; name=&#34;dynamic&#34;&gt;動的なC++&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/alex-fabijanic/&#34; target=&#34;_blank&#34;&gt;Alex Fabijanic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部ソースから取り込むべき様々な型のデータには、データ型変換がつきものです。C++プログラマの皆さんは、リレーショナル・データベースやXMLデータベースからJSON形式やHTMLへのデータ変換をC++の型チェックという障壁を越えて、正確かつ効率的に、どのように変換されていますか？答えは型消去というテクニックを使用する事にあります。この講義では、最も一般的な C++型消去の手法について、列挙探査と比較を行います。&lt;/p&gt;
&lt;p&gt;上記の問題と同様に与えられた、歴史的なライブラリ（ANSI Cの共用体、&lt;code&gt;void*&lt;/code&gt;、マイクロソフト COMの&lt;code&gt;Variant&lt;/code&gt;型、&lt;code&gt;boost::variant&lt;/code&gt;、&lt;code&gt;boost::any&lt;/code&gt;、&lt;code&gt;boost::lexical_cast&lt;/code&gt;)と最近のライブラリ(&lt;code&gt;boost::type_erasure&lt;/code&gt;、Facebook &lt;code&gt;folly::dynamic&lt;/code&gt;)といった、開発トレンド(保留中の &lt;code&gt;boost::any&lt;/code&gt; というC++標準案を含む)、それは、C++言語の静的な型システムという性質を回避する手法が必要であることを示唆しています。この問題に関する解決法は複数存在します。この講義では、&lt;code&gt;boost::variant&lt;/code&gt;、&lt;code&gt;boost::any&lt;/code&gt;、&lt;code&gt;boost::type_erasure&lt;/code&gt;、&lt;code&gt;folly::dynamic&lt;/code&gt;、&lt;code&gt;Poco::Dynamic&lt;/code&gt;、これらに焦点を当てて掘り下げます。設計デザインと機能だけでなく、各ライブラリの長所と短所についても検討します。パフォーマンスベンチマークの比較も同様に検討されます。&lt;/p&gt;
&lt;p&gt;型安全はC++の重要な要素です。型消去は、現代のソフトウェア開発のために必要なテクニックです。この講義では、これら重要な型消去のライブラリの比較検討を行います。&lt;/p&gt;
&lt;p&gt;＊ Type Erasure を型消去と訳してます&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#debruijn&#34; name=&#34;debruijn&#34;&gt;DeBruijn Bind: シンプルさを維持するより強力なbind&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DeBruijn Bind: A more powerful bind that retains its simplicity&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/david-sankel/&#34; target=&#34;_blank&#34;&gt;David Sankel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.LambdaやBoost.Phoenixのような、より強力なライブラリがあるなかでも、Boost.Bindはその非常に単純な構文と、学習のハードルが低いという点でその立ち位置を守っている。その構文はBoost.MPLのなかでコンパイル時variantとして利用されている。&lt;/p&gt;
&lt;p&gt;しかし、テンプレート実引数とともに使うため、または、&lt;code&gt;boost::protect&lt;/code&gt;を使いはじめるために、&lt;code&gt;boost::bind&lt;/code&gt;のネストに手を染めると、この単純さは&lt;code&gt;boost::bind&lt;/code&gt;のセマンティクスとその限界については不鮮明になってしまう。&lt;/p&gt;
&lt;p&gt;このセッションでは、解析を行ない、Boost.Bindのセマンティクスとは何かについて数学的に正しい理解に到達することを目的とする。ひととおりセマンティクスについて学べば、Boost.Bindがカヴァーしている要求を満たし、再帰可能であり、学習のハードルが低い単純な構文を維持する、説得力のある代替案の設計についての見識が得られるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#multi-threading&#34; name=&#34;multi-threading&#34;&gt;C++11とBoostを利用したマルチスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Multi-Threading With C++11 and Boost&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/rob-stewart/&#34; target=&#34;_blank&#34;&gt;Rob Stewart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このチュートリアルでは、マルチスレッドコードを記述するためのC++11とBoostの機能を利用した多くの例をもとに、より深くその効用についいて段階的に学んでいく。&lt;/p&gt;
&lt;p&gt;例としてスレッドセーフキューについても取りあげ、独立したスケジュール上で並列タスクを実行するためにスレッドを利用したり、長時間実行中の並列タスクに割り込みを掛けてみる。これらの例をもとにスレッドやミューテックス、条件変数などの利用法を示す。C++11とBoostの機能的相違点についても議論するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#concept-lite&#34; name=&#34;concept-lite&#34;&gt;軽量コンセプト: 述語による制約テンプレート&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Concepts Lite: Constraining Templates with Predicates&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/andrew-sutton/&#34; target=&#34;_blank&#34;&gt;Andrew Sutton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このトークでは、C++14に提案されている新言語機能である「テンプレート制約(またの名を軽量コンセプト)」について話します。制約は、テンプレートにおいてテンプレート引数が使えるかどうかを判定するための述語です。&lt;/p&gt;
&lt;p&gt;制約を使用して要件を直接示すことによって、テンプレートの宣言を改善できます。もちろん、制約に基いて関数オーバーロードすることもできます。制約は、型のエラーを使用時にすぐ捕捉できるため、コンパイルエラーのスタックを短いスクロールで確認できるようになることを意味します。&lt;/p&gt;
&lt;p&gt;言語機能としては、テンプレート制約は最小限で複雑でないものに抑え、テンプレート使用の正確さではなく、テンプレート定義の正確さを強化します。これは段階的かつ簡単に、既存のコードベースに採用できることを意味します。&lt;/p&gt;
&lt;p&gt;このトークは一般的なデータ構造、メンバ関数とコンストラクタ、オーバーロード、クラステンプレートの特殊化、制約の定義といった例を通して、制約をどのように使用するかを説明します。また、私が普段のプログラミングで制約を使用してきた経験についても説明します。これは制約のいいアイデアと、それほどよくないアイデアの両方を含みます。&lt;/p&gt;
&lt;p&gt;GCC 4.8ベースの実験的なコンパイラは、みなさんがすでに使えるよう公開してあります。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#html5&#34; name=&#34;html5&#34;&gt;ママ見て “C++を使ってデータベース更新からHTML5が生成されたよ”, 自動化して!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Look ma, “update DB to HTML5 using C++”, no hands!&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/alex-fabijanic/&#34; target=&#34;_blank&#34;&gt;Alex Fabijanic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ウェブを取り巻く環境は急速に変化しています。AJAXや非同期JSONの登場により、ユーザ・インタフェイスの応答性は、大幅に改善されてきました。この流れの基礎となるデータ・トランスポートのメカニズムは、まだ、リクエスト/レスポンスによるポーリング（プル）・モデルに基づいています。WebSocket規格は、ネットの先のストレージから標準となるHTML5インタフェイスへ、イベント・ドリブンなプッシュ・モデルというシームレスな接続の最後の障壁を取り除きました。流れとして、データ転送はイベント・ドリブン・モデルを使用し、リクエスト/レスポンス・モデルで行われていたネットワークおよびウェブサーバのオーバーヘッドを下げ、パフォーマンスの改善を標準規格に準拠して行う事ができます。講義の最初に、POCOフレームワーク・ネット・ライブラリを使用して、WebSocket HTML5ページを生成するHTTPサーバを構築します。次に、POCOデータ・ライブラリを使用して、SQLデータベースと連帯する機能をHTTPサーバに追加し、コールバック・フックを確立します。そのフックは、透過的にデータベースのデータ更新からウェブ・ページ変更を引き起こすためにパスを開きます。このソリューション・電子ブロックの構成要素である、データ型消去のための &lt;code&gt;Poco::Dynamic&lt;/code&gt;モジュール、動的フォーマット出力のための&lt;code&gt;Poco::Data::RowFormatter&lt;/code&gt;クラス、を詳細に説明します。&lt;/p&gt;
&lt;p&gt;この講義は、いくつかの鋭い問題に現実的解決案を提示します - 効率的かつ独立して転送されたデータ型からエンドユーザにシームレスウェブにネットワーク経由でストレージからデータを提供します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#odb&#34; name=&#34;odb&#34;&gt;C++(11)のためのORマッパー：ODB&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ODB, an ORM for C++(11)&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/boris-kolpackov/&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ODBは、C++によるオブジェクト・リレーショナル・マッピング(ORM)システムのライブラリで、クロス・プラットフォームかつクロス・データベースなオープンソースです。&lt;/p&gt;
&lt;p&gt;このライブラリを使用すると、テーブル・カラム・SQLや、リレーショナル・マッピングのコードを手作業で書く事なく、C++のオブジェクトをリレーショナル・データベースに格納できます。&lt;/p&gt;
&lt;p&gt;Boostカンファレンス2011より数ヶ月前に、私はODBを導入しました。今回は我々が過去2年間に行った成果をお見せしたいと思います。講義の最初では、ODBの助けを借りて、リレーショナルデータベースにC++のオブジェクトを格納することが、いかに簡単できるかを話します。次に多様な興味深いトピック、C++11サポート、BoostとQtプロファイル、ポリモーフィズム、楽観的な同時実行制御、およびマルチデータベースサポートについて話します。私は、これからも、データベース・スキーマ革命！という野心的な困難に取り組むつもりです。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusionで世界の謎を解く&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Solving World Problems with Fusion&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンパイル時MPLと実行時タプルの融合。Boost.Fusionはメタプログラミング世界のSTLである。FusionはBoostライブラリの内部的な機構を提供し、私たち自身のソースの一般的な要素となっている。&lt;/p&gt;
&lt;p&gt;この90分のセッションでは、Boost.Fusionライブラリの現実世界でのユースケースを探求する。具体的には、ライブラリインタフェースのシンプル化、宣言的なユーザーエクスペリエンス、効率的で非侵入的なハンドリングの例を見ていく。&lt;/p&gt;
&lt;p&gt;参加者は、いくつかの実用的な使用パターンの理解を得てさらなる先に進んで行くでしょう。ぜひSpirit、Xpressive、Geometry、Accumulators、odeint、Proto、Phoenix、MSMを自分のソースに取り入れる方法を学んでみてほしい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#dds&#34; name=&#34;dds&#34;&gt;モダンなC++向けのデータ分散サーヴィス(DDS: Data Distribution Service)の標準化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Standardizing the Data Distribution Service (DDS) API for Modern C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/sumant-tambe/&#34; target=&#34;_blank&#34;&gt;Sumant Tambe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++復権は多くの工業分野で広まっている。アプリケーション移植性の視点からC++を対象にした国際的なコンピュータシステム標準は、迅速にモダンなC++を導入してきている。国際標準化機構のObject Management Group(OMG)では、DDS-PSM-CxxとIDL2C++11標準が時代の先を行っている。DDS-PSM-Cxxは、高性能な分散リアルタイムシステム開発向けの主要なデータ分散サーヴィス(DDS)標準の関連標準である。正式には&#34;ISO/IEC C++ 2003 Language Platform Specific Mapping (PSM) for DDS&#34;として知られるDDS-PSM-Cxx標準は、2012/12に策定完了した。DDS-PSM-Cxxはモダンで、自然で、STLと親和性があり、表現力が高く、安全で、効率的なDDSプログラミング向けに可搬性のあるC++APIを提供している。DDS-PSM-CxxはC++03をターゲットにしており、C++11環境移行を可能にすべく特別な準備をしている。このセッションではDDS-PSM-Cxx標準の&#34;なぜ&#34; &#34;どうして&#34;について述べる。OMG標準化作業部会の投票委員と主要な貢献者が登壇する予定である。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションはDDS - リアルタイム分散システム向けのデータ中心の出版-購読型アーキテクチャの基礎を説明するところから始める。DDSと組み合わせたモダンなC++で記述した&#34;Hello World!&#34;アプリケーションとともに、DDS-PSM-Cxx標準の動機や問題点、高次構造について示す。また、規格に合致しているベンダー実装の当分の代替のサポートやベンダー固有拡張のための文脈的手掛かりといった、標準の興味深い点について深く掘りさげていく。この標準はBoostを直接的に利用していないものの、いくつかのBoostライブラリからアイディアを拝借している。このプレゼンテーションでは、DDSアプリケーション向けのクリーンで安全かつ効率的なAPIを提供するための、種々のC++03イディオム(例えば、RAII、型消去、型安全列挙、メソッドチェイン)の利用についても詳しく説明していく。さらに、聴者の興味を引くであろう、APIを構築する上で重要な点である例外安全の考慮についても述べる。特に、例外安全なAPIを設計する上で、ムーヴセマンティクスが如何に有用かご覧いただけるだろう。最後に、C++03規格に合致しているアプリケーションが、C++11環境でも合法となるように、標準に加えた特別なルールについて議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#member-access-operator&#34; name=&#34;member-access-operator&#34;&gt;メンバーアクセス演算子のオーヴァーロード&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Overloading the Member Access Operator&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/sebastian-redl/&#34; target=&#34;_blank&#34;&gt;Sebastian Redl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接メンバーアクセス演算子(&lt;code&gt;operator.&lt;/code&gt;)のオーヴァーロードは通常またはメタプログラミングでおもしろいユースケースがある。この演算子のオーヴァーロードの古典的な利用法は、アロー演算子のオーヴァーロードと同じく、別のオブジェクトを参照させたい場合に利用することである。&lt;/p&gt;
&lt;p&gt;このセッションでは、メタプログラミングを利用してプログラマが別の名前を利用できるようにする別の方法を紹介する。Clangコンパイラを利用したこの機能の実験的実装を紹介し、この実装のユースケースや、この機能の有用性、問題点、これを実装するにあたって得られた知見について述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cern&#34; name=&#34;cern&#34;&gt;CERNでの対話的で内省的なC++&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interactive, Introspected C++ at CERN&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/vassil-vassilev/&#34; target=&#34;_blank&#34;&gt;Vassil Vassilev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CERNは、世界最大の素粒子物理学研究所である。そのような科学的ブレイクスルーを作るために、約15PB/yearを処理している。ROOTフレームワークのユニークな能力は物理学者がデータ解析するのをより効率的で、計算的で、賢いストレージを可能にする。ROOTの最新バージョンのコアはClingである。これは対話的なC++インタプリタで、C++11もサポートしている。Clingは、以前まで使用していたROOTの伝統的なメインユーザーインタフェースを置き換える。Clingは、Clang/LLVMインフラストラクチャ上に構築される。このインタプリタはそれだけでなく、ROOTのシリアライズ、デシリアライズ、C++のオブジェクト指向データの操作にも使用され、それでいて初心者がC++をより早く学ぶのを支援してくれる。&lt;/p&gt;
&lt;p&gt;C++のような静的言語のインタプリタを構築するのは、決して簡単ではない。私はClingの要件を説明し、その後コンパイラフレームワーク上にインタプリタを実装することに挑戦する。C++をより対話的な言語に変えるために、C++標準のいくつかの概念を説明する。インタプリタを使用して、型のイントロスペクション機構を簡単に説明する。C++の文脈解析で、ランタイムの力を改善する方法を提案する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#haskell&#34; name=&#34;haskell&#34;&gt;Haskellの力でMPLを強化しよう&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boosting MPL with Haskell elements&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/abel-sinkovics/&#34; target=&#34;_blank&#34;&gt;Abel Sinkovics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HaskellとC++テンプレートメタプログラミングの類似性が指摘されている[1,2]一方で、Haskellのほとんどの要素がテンプレートに導入されていない。これらをいくらかでも導入すれば、メタプログラミングはより使いやすくなり、テンプレートメタプログラミングツールセットであるBoost.MPLの強化につながるだろう。&lt;/p&gt;
&lt;p&gt;Haskellを含む関数プログラミング言語で利用されている式を、コードを読みやすくするために、そして構築しやすくするために利用してみよう。これはC++テンプレートメタプログラミングに対しても同じ目的で適用できるはずである。&lt;/p&gt;
&lt;p&gt;関数型プログラムを記述するとき、とりわけ、Haskellのdo notationとMonadの組み合わせは、書かなければならない鋳型コードの量を削減できる強力なツールである。コンパイル時計算にこの要素を導入すれば、これを利用したテンプレートメタプログラムの可読性の向上に寄与するだろう。&lt;/p&gt;
&lt;p&gt;多くのプログラミング言語について、リスト内包表記はリスト変換の理解に寄与する。リスト内包表記を実装するためにHaskellのList monadとdo notationを利用が利用されるように、テンプレートメタプログラミングでも同様にこれらを使って実装できる。&lt;/p&gt;
&lt;p&gt;エラーハンドリングはEither monadを利用すれば単純化できる。構文糖を混ぜることで、monadや例外ハンドリングがC++テンプレートメタプログラムで実装されていることを意識せずに、テンプレートメタプログラムにおいてもこのような例外ハンドリングが理解でき、利用可能である。&lt;/p&gt;
&lt;p&gt;これらのツールはBoost.MPL ライブラリを基礎として構築され、その拡張として利用されるので、既にBoost.MPLを利用しているメタプログラムに容易に展開可能である。&lt;/p&gt;
&lt;p&gt;このセッションで紹介するツールはMetamonadライブラリの構成要素である。Metamonadライブラリについては以下のリンクを参照すること:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://abel.web.elte.hu/mpllibs/metamonad&#34; target=&#34;_blank&#34;&gt;http://abel.web.elte.hu/mpllibs/metamonad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sabel83/mpllibs&#34; target=&#34;_blank&#34;&gt;https://github.com/sabel83/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションは高度なので、Boost.MPLに精通していることが望ましい。&lt;/p&gt;
&lt;p&gt;参考文献:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[1] Stuart Golodetz – Functional programming using c++ templates (part 1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://accu.org/index.php/journals/1422&#34; target=&#34;_blank&#34;&gt;http://accu.org/index.php/journals/1422&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[2] Bartosz Milewski – What does Haskell have to do with C++?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/&#34; target=&#34;_blank&#34;&gt;http://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#object-transmission&#34; name=&#34;object-transmission&#34;&gt;Boost.AsioとBoost.Serialization: オブジェクト受け渡しのデザインパターン&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Asio and Boost.Serialization: Design Patterns for Object Transmission&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/bryce-adelstein-lelbach/&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jeroen-habraken/&#34; target=&#34;_blank&#34;&gt;Jeroen Habraken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++でネットワークプログラミングするには、他のネットワーク終端へ受けわたしできる、再構築可能なバイトシーケンスとして、C++オブジェクトを表現する方法が必要である。PODのような単純なオブジェクトなら、シリアライズするのが一般的だろう。&lt;/p&gt;
&lt;p&gt;多態オブジェクトのような、より複雑なC++構造については、シリアライズする方法はより困難になる。このセッションでは、Boostにある二つの強力なライブラリであるAsioとSerializationについて、巨大な配列を扱えるC++ネットワークコードを構築するという観点から、その有用性について議論していく。&lt;/p&gt;
&lt;p&gt;このセッションではBoost.MPIとHPX(分散/並列プログラミング用のC++ランタイムシステム)を使って、Boost.AsioとBoost.Serializationを利用したオブジェクト変換を行う方法についても議論する。また、ほんの少しだが、別の解法についても議論するつもりだ。&lt;/p&gt;
&lt;p&gt;このセッションは、ネットワークプログラミングに従事している、もしくは興味がある(けれどもBoost.AsioやBoost.Serializationについてよく知らない)方を対象にしている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#cppnow-2014&#34; name=&#34;cppnow-2014&#34;&gt;C++Now 2014の準備&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparation of C++Now 2014&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participants/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participants/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来年の会議にむけた計画委員会を早期に発足させる。もしご提案や、ご支援いただける方はぜひご参加ください。&lt;/p&gt;
&lt;p&gt;このセッションにはスライドはない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#hetero&#34; name=&#34;hetero&#34;&gt;静的型付け言語における、動的で再帰的なヘテロ型&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic, Recursive, Heterogeneous Types in Statically-Typed Languages&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/richard-saunders/&#34; target=&#34;_blank&#34;&gt;Richard Saunders&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/clinton-jeffery/&#34; target=&#34;_blank&#34;&gt;Clinton Jeffery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のソフトウェアはいろいろな言語で記述されている。すなわち Python、C++、Perl、Java、Javascript、Lua、Unicon、C言語などが、複雑なシステムの別個のコンポーネントを構成する環境のなかに混在している。このような言語の急激な拡散により、動的型づけ言語のコンセプトが静的型づけ言語に流入していく。&lt;/p&gt;
&lt;p&gt;動的言語によく見られる要素として、動的で、再帰的な、ヘテロな辞書構造が挙げられる。たとえば、Pythonのdict、Perlのhash、Javascriptのobject、Luaのtable、JSONにおけるIcon/Unicon tableはこの種の抽象化の実現であるし、より低水準なものとしては、XMLは言語に依存しない動的辞書構造と言えるだろう。C++やJavaのような静的型づけ言語は、スジがいい動的辞書構造の設計と実装に苦労してきた。さて、このセッションでは、C++言語の静的型に特有の機能を &lt;em&gt;採用&lt;/em&gt; し、動的構築を行なうためのシンプルで新規性のある解法で、いかにC++で辞書構造を表現するかについて考察する。その機能とは型推論、ユーザー定義の型変換、型選択、オーヴァーロードである。&lt;/p&gt;
&lt;p&gt;これらのこと組みあわせて、動的言語における動的辞書の操作性に近づけるべく、逆説的だがこれらの静的な機能から、C++からの操作が非常に容易な動的辞書構造を構築する。&lt;/p&gt;
&lt;p&gt;注意：これらのテクニックには特別なリフレクション機能やライブラリを必要としない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cppnow.org/files/2013/03/saunders-jeffery.pdf&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#projucer&#34; name=&#34;projucer&#34;&gt;Projucer: C++とLLVM JIT エンジンを利用したライブコーディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Projucer: Live coding with C++ and the LLVM JIT engine&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/julian-storer/&#34; target=&#34;_blank&#34;&gt;Julian Storer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれのクラスを連続的にリコンパイルし実行するために、Projucer IDE がいかにしてClangとLLVM JITエンジンを利用したC++コードのリファクタリングとリアルタイム実行を成しとげたのか、その裏側からごらんいただこう。&lt;/p&gt;
&lt;p&gt;JUCE GUI toolkitライブラリを利用しているこのProjucerは、C++プロジェクトの編集やアセンブルを行なうためのIDEである。Projucerは、Clangを利用してコンパイルを行ない、ユーザーコードベースのAST(Abstract Syntax Tree: 抽象構文木)を走査することで、適切なGUIクラスを決定し、スタンドアロンの実体としてインスタンス化する。このインスタンスはそのコードが編集された際、即座に更新される。これらのGUIクラスを動的に生成されるコードにラップすることで、ドラッグやリサイズといった一般的なGUI操作は、元のコードを動的にリファクタリングすることによって機能しその上で実行される。&lt;/p&gt;
&lt;p&gt;実際の動作についてのムービーは&lt;a href=&#34;http://boostjp.github.io/&#34;&gt;こちら&lt;/a&gt;。より詳細については&lt;a href=&#34;http://boostjp.github.io/&#34;&gt;私のサイト&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;p&gt;C++通向きに、もっと細かいことや、諸問題、このシステムを効率的にするために使った狡猾なトリック、そしてClangやLLVMの特徴について掘り下げてみるつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#matrix&#34; name=&#34;matrix&#34;&gt;EigenとBoost Protoライブラリを用いた有限要素マトリックス式の組み立て&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Building finite-element matrix expressions with Boost Proto and the Eigen library&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/bart-janssens/&#34; target=&#34;_blank&#34;&gt;Bart Janssens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このチュートリアルでは、我々がドメイン特化言語を開発するにあたり障害となった二つの問題、すなわちBoost.Proto内での外部Expression Template Library(ここではEigen)の利用と、ユーザー定義関数の導入についていかに解決したかを示す。&lt;/p&gt;
&lt;p&gt;どちらの話についても、我々の有限要素マトリックスのコードとは関係のない、一般的な計算機様のプログラムで紹介するつもりである。これはステップバイステップ方式のBoost.Protoのチュートリアルになるだろう。最後に&lt;a href=&#34;http://coolfluid.github.com/&#34; target=&#34;_blank&#34;&gt;Coolfluid 3 code&lt;/a&gt;にあるアプリケーションを例にとって、Protoのようなライブラリが、実際のコードにどのような利点をもたらすかを示す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cppnow.org/files/2013/03/janssens.abstract.pdf&#34; target=&#34;_blank&#34;&gt;Extended Abstract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#deadlock-prevention&#34; name=&#34;deadlock-prevention&#34;&gt;侵入的動的解析を使用したリソースデッドロック防止システム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A system for resource deadlock prevention using intrusive dynamic analysis&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/louis-dionne/&#34; target=&#34;_blank&#34;&gt;Louis Dionne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ミューテックス等を使用して共有データへ同期にアクセスするという旧来の方法は、2つ以上のスレッドがお互いに再帰的にブロックをしてしまう、リソースのデッドロックを可能にしてしまう。&lt;/p&gt;
&lt;p&gt;このようなバグは特定の状況下でしか発生しないため、多くの場合、その摘発は困難なものとなる。&lt;/p&gt;
&lt;p&gt;このトークでは、intrusive dynamic analysis(侵入的動的解析?)を使用して潜在的なリソースデッドロックを事前に発見するシンプルなフレームワークを、私達がどのように実装したかを説明する。&lt;/p&gt;
&lt;p&gt;また、そのフレームワークを既存のコードとどのように統合するかも説明する。&lt;/p&gt;
&lt;p&gt;そして最終的には、このプロジェクトをC++のより汎用的なdynamic analysisフレームワークにする可能性をもつ、プロジェクトの進化について議論しよう。&lt;/p&gt;
&lt;p&gt;マルチスレッドあるいはdynamic analysisについて興味のあるプログラマ向け。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2013.html#future-of-boost&#34; name=&#34;future-of-boost&#34;&gt;Boostの未来&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future of Boost&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participants/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participants/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostとC++ Now!のリーダー達が将来どうなるかについて話し、質問に答える。&lt;/p&gt;
&lt;p&gt;このセッションにスライドはない。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Usagi Ito, hotwatermorning, Miyuki OKI, zak&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++Now! 2014 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/cppnow/2014.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:cppnow/2014.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;C++Now! 2014&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://cppnow.org/schedule-2014/&#34; target=&#34;_blank&#34;&gt;http://cppnow.org/schedule-2014/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#axiomatic-programming&#34;&gt;キーノート： 公理的プログラミング： ユークリッド推論からC++テンプレート、その先へ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#through-the-looking-glass&#34;&gt;鏡の国のC++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#coroutine-fiber-thread&#34;&gt;Coroutines, Fibers, and Threads, Oh My&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#canonical-class&#34;&gt;規範的なクラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#geometric-algebra&#34;&gt;ジェネリック空間のジェネリックプログラミング： C++11を使用したコンパイル時幾何学的代数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#concept-clang&#34;&gt;ConceptClang：完全なC++コンセプトによる理論的な前進&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#tdd-with-boost-test-turtle&#34;&gt;Boost.TestとTurtle Mockによるテスト駆動開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#bounded-integer&#34;&gt;整数演算から未定義動作を排除する、&lt;code&gt;bounded::integer&lt;/code&gt;ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#afio&#34;&gt;Boostのピアレビューに向けてのC++11ライブラリAFIOの準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#value-semantics-range&#34;&gt;値セマンティクスと範囲アルゴリズム - 合成と効率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#beware-cpp&#34;&gt;キーノート：C++に気をつけろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#configuration-framework&#34;&gt;実用的なType Erasure： &lt;code&gt;boost::any&lt;/code&gt;ベースの構成フレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#mach7&#34;&gt;Mach7： C++のためのパターンマッチングライブラリの設計と進化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-cpp11-14-1&#34;&gt;C++11/14入門 パート1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-cpp11-14-2&#34;&gt;C++11/14入門 パート2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#space-plasma&#34;&gt;宇宙プラズマモデル開発でのC++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp11-library-design&#34;&gt;C++11ライブラリ設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#octopus&#34;&gt;Octopus: CFDシミュレーションのためのポリシー駆動フレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#better-code&#34;&gt;よりよいコードへの道しるべ：完全な型を実装する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#multiplatform-cpp&#34;&gt;マルチプラットフォームでのC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#boost-library-incubator&#34;&gt;Boost Library Incubator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#optimization-network-server&#34;&gt;Boost.Asioベースのネットワーク・サーバ最適化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#undefined-behavior&#34;&gt;C++の未定義動作； それは何か、そしてなぜ気にしなければいけないか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#mpl11&#34;&gt;MPL11: C++11の新たなメタプログラミングライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#libcppa&#34;&gt;libcppa: C++での型安全なメッセージングシステム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#unicode&#34;&gt;C++でのUnicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#metaprogramming-shell&#34;&gt;Clangベースのインタラクティブなメタプログラミングシェル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp-amp&#34;&gt;C++ AMPを用いたアクセラレータプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp-components&#34;&gt;CppComponents: C++11のモダン,ポータブルなコンポーネントシステム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ui&#34;&gt;UI、美学、C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#design-xml-api&#34;&gt;最新C++を使ったXML API設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#understanding-double-and&#34;&gt;&amp;amp;&amp;amp;を理解しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#concurrent-assembly&#34;&gt;並行アセンブリとしての最新のC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#value-semantics&#34;&gt;値のセマンティクス：シンタックスについてじゃないよ!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#iterators-may-stay&#34;&gt;イテレータはまだ生き残る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#refactoring-tool&#34;&gt;Clangを使ったリファクタリングツールの自作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#combinatorial-algorithm&#34;&gt;C++を用いた複雑な組み合わせ最適化アルゴリズムの設計と実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-fp&#34;&gt;C++における関数型プログラミング入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#object-lifetimes&#34;&gt;オブジェクト生存期間の管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#badcode&#34;&gt;0xBADC0DE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#global-threadlocal-static&#34;&gt;グローバル、スレッドローカル、および静的データの生存期間と利用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#expected&#34;&gt;Expected — 例外フレンドリーなエラーモナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#async-msm&#34;&gt;Boost.MetaStateMachineと次世代非同期ライブラリを利用した非同期プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#functional-data-structures&#34;&gt;C++での関数型データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ownership-memory&#34;&gt;C++におけるメモリの所有権&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#disambiguation&#34;&gt;曖昧性解決における黒魔術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#frp&#34;&gt;関数リアクティヴプログラミング - 滑かに抽象化された双方向性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#accelerator-programming&#34;&gt;将来のC++におけるアクセラレータプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ripple-management&#34;&gt;C++におけるRipple Managementによる巨大なコードベース変更についての私見&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2014&#34; target=&#34;_blank&#34;&gt;C++Now! Presentations 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#axiomatic-programming&#34; name=&#34;axiomatic-programming&#34;&gt;キーノート： 公理的プログラミング： ユークリッド推論からC++テンプレート、その先へ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Axiomatic Programming: From Euclidean Deductions to C++ Templates and Beyond&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/gabriel_dos_reis.1rzxpiif?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Gabriel Dos Reis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公理的プログラミング(Axiomatic Programming)は構造的ジェネリックプログラミングとして一般に定義されている。ユークリッド幾何学はそれとは違い、シンプルで建設的な論理システムに依存する。これは、STLや多くの成功しているジェネリックライブラリの基盤でもある。このトークではツールのサポートに焦点を当て、C++テンプレートによる開発に現在および未来で可能な自動推論や証明の方式について話す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#through-the-looking-glass&#34; name=&#34;through-the-looking-glass&#34;&gt;鏡の国のC++14&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14: Through the Looking Glass&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/michael_wong.1rzxpihy?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ISO曰く、「さぁいろんなことを話しあうときがついにやってきたのだ。ムーヴキャプチャやリテラルだの、lambdaを上手に歌わせるには、あるいは型推論がどうしてアツいのか、はたまた数値にハネ(&lt;code&gt;&#39;&lt;/code&gt;)が生えたらどうなるか。」&lt;/p&gt;
&lt;p&gt;次期C++標準について聞いたことがありますか？ &lt;br /&gt;
いやいや、C++11のことではありません。C++11が批准されてからそう時間が経っていませんが、来年にはC++11はC++14に刷新されることで
しょう。今や、私達はC++11について十分な知見を得て、C++11に欠けている、細かな、しかし重要な機能を知るに至りました。すなわち、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ラムダ式にムーヴキャプチャがないのはなぜか？&lt;/li&gt;
&lt;li&gt;標準ユーザー定義リテラルがあってもいいんじゃ？&lt;/li&gt;
&lt;li&gt;多態ラムダがないはどうして？&lt;/li&gt;
&lt;li&gt;ラムダ式の戻り型が推論できるのに、普通の関数でできないのはなぜ？&lt;/li&gt;
&lt;li&gt;数値リテラルに桁区切り文字が欲しいんだけど？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++14はバグフィックスリリース以上のもので、C++11をさらに機能強化したものが含まれています。これによって、C++11で知られていたいくつかの厄介な問題が解決されるでしょう。しかし、より重要なことは、C++14で言語やライブラリ、重要なイディオムがどのように変わるかではないでしょうか？&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#coroutine-fiber-thread&#34; name=&#34;coroutine-fiber-thread&#34;&gt;Coroutines, Fibers, and Threads, Oh My&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/nat_goodspeed.1rzxt7iu?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Nat Goodspeed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前世紀では、オペレーティングシステムが一つのマシンで複数のプロセスを並行に走らせられるようになったのが大きなニュースだった。だがそれは必要十分ではなかった。この業界で数十年前から知られている問題を、C++11標準も公式に認めている：生産プロセスは、I/Oや他の時間のかかる作業を通常、ブロックできない。標準は2番目のレベルの並行性を与える：プロセス内で複数スレッドを使用する、ライブラリの機能を使用して同期とデータの受け渡しを管理する。&lt;/p&gt;
&lt;p&gt;新たなBoost.Fiberライブラリは、同様に細かい粒度の並行性を我々に与える：各スレッドで複数ファイバーを使用する、ライブラリの機能を使用して同期とデータの受け渡しを管理する。どのようなときに、スレッドの代わりにその機能を選択するだろうか？コルーチンとはどんなもので、どのようにこれら全体に適合するのか。&lt;/p&gt;
&lt;p&gt;C++標準に考えられているいくつかの並行機能についても触れる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#canonical-class&#34; name=&#34;canonical-class&#34;&gt;規範的なクラス&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Canonical Class&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/michael_caisse?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは簡単だった。どの大学の学生も、週末にC++を学ぶ人も、クラスを定義する際にはコピーしたときと代入したときの振る舞いだけを自信を持って書くことができた。そこにはチェックリストがあった。チェックリストを埋め、ドメイン特化の振る舞いを追加し、回帰テストを行い、それで終わりだった。&lt;/p&gt;
&lt;p&gt;C++11になり、&lt;code&gt;delete&lt;/code&gt;キーワードの新たな使い道、演算子の&lt;code&gt;explicit&lt;/code&gt;指定、右辺値参照、完全転送など、魅力的な機能がいろいろ入った。いまあなたは、「シンプルな」クラスをどのように書くだろうか？&lt;code&gt;swap&lt;/code&gt;を含めた方がいいだろうか？ムーブ可能であるとは何だっただろうか、それに期待するセマンティクスとは何だろうか？&lt;code&gt;noexcept&lt;/code&gt;指定子を使用するのはどんなときか？&lt;/p&gt;
&lt;p&gt;この90分のセッションでは、C++11での定型コードを探求する。このセッションでは、クラスや構造体を定義する際に適用する、右辺値参照、ムーブセマンティクス、完全転送、&lt;code&gt;explicit&lt;/code&gt;、&lt;code&gt;noexcept&lt;/code&gt;、初期化子リスト、その他多くのセマンティクスに触れる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#geometric-algebra&#34; name=&#34;geometric-algebra&#34;&gt;ジェネリック空間のジェネリックプログラミング： C++11を使用したコンパイル時幾何学的代数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming of Generic Spaces: Compile-Time Geometric Algebra with C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/pablo_colapinto.1rzy8qoa?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Pablo Colapinto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このグラフィクスハンズオンでは、組み合わせ生成計算量のためのテンプレートメタプログラミングの強力さを事例として、Versorと呼ばれるC++11の軽量なライブラリを使用してコンパイル時にN次元ジオメトリと空間を合成することを探求する。
ジオメトリを構築するテンプレート(アフィン、投影、等角、または実験)は、可変引数テンプレートと定数式を器用に使用することによって表現した。具体的には、コンパイル時に独自の最適化戦略として、リスト操作、並べ替え、幾何学的代数(geometric algebra)の評価をコンパイル時に行う新技術を提案する。&lt;/p&gt;
&lt;p&gt;この議論では、これら技術の開発を補助するために使用したC++11の基本的な機能と幾何学的代数の論理を解説する。対話(interactive)と視覚(visual)の両方で、ジェネリックプログラミング技法とジェネリック空間コンピューティング(generic spatial computing)の融合が、次元的流動性の式(a dimensional fluidity of expression)を可能にすることを調査する。2次元を介して4次元あるいはその上で、群論、ベクトル、行列、テンソル、リー代数(lie algebra)の効率的な実装をC++11のイディオムに結びつけることができる。これら関数は、物質科学(material science)から量子計算(quantum computation)まで、幅広い分野の多様なアプリケーション集合に適用できる。このアプローチで作成したビデオは &lt;a href=&#34;http://vimeo.com/wolftype&#34; target=&#34;_blank&#34;&gt;http://vimeo.com/wolftype&lt;/a&gt; で見ることができる。Versorの詳細については、 &lt;a href=&#34;http://versor.mat.ucsb.edu/&#34; target=&#34;_blank&#34;&gt;http://versor.mat.ucsb.edu/&lt;/a&gt; を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#concept-clang&#34; name=&#34;concept-clang&#34;&gt;ConceptClang：完全なC++コンセプトによる理論的な前進&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ConceptClang: Theoretical Advances with Full C++ Concepts&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/larisse_voufo.6ee82o0?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Larisse Voufo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンセプトはジェネリックプログラミングに不可欠な機能であり、C++の言語拡張として10年以上前から期待されてきた。これまでにいくつかの異なる設計のコンセプトが提案されてきたが、標準化への合意がとれなかった。2010年に私たちは、コンセプト機能の理解を補助することを主な目的として、コンセプトの異なる設計をConceptClangを実装した。それによって浮上した問題のひとつに、名前のバインディング、すなわち使用する名前と参照する宣言を一致させるプロセスがあった。これは、あらゆるコンセプトの設計をフルサポートするには、「弱い隠蔽(weak hiding)」と呼ばれる名前バインディングの新たなスコープルールが有用だということを意味する。弱い隠蔽は、合法に見えるプログラムを維持するために、制約のないテンプレートを制約付きテンプレートに遷移させることを可能にする。弱い隠蔽を実装するために、私たちは2ステージの名前バインディング(Bindx2)を導入した。これは既存の名前バインディングを弱い隠蔽でいかに拡張するかを定義する。Bindx2は、単純な関数呼び出しを、関連メンバ(associated members, 特殊メンバを含む)、演算子、型の要件といった名前の使用へと一般化する。驚くべき結果として、オープン／拡張可能なクラス／構造体は、完全なC++コンセプトのためにこれをコストなしに提供できた。&lt;/p&gt;
&lt;p&gt;このトークは主に、ConceptClangを使用する練習や、ハイライティング、Bindx2や「構造オープニング(structure opening)」アーキタイプなどの実装構造の動機を与える主要コンポーネントに焦点を当てる。参加者はコンセプトをいかに実装するかというだけでなく、C++コンセプトの設計を学ぶことを期待できるが、それだけでなく、コンセプトの必要性が高まる他言語にも影響する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#tdd-with-boost-test-turtle&#34; name=&#34;tdd-with-boost-test-turtle&#34;&gt;Boost.TestとTurtle Mockによるテスト駆動開発&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Test-Driven Development With Boost.Test and Turtle Mock&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/richard_thomas.1rzxpiib?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Richard Thomson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テスト駆動開発に含まれる3つの簡単なルールは、以下のようになっている：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失敗するユニットテストのパスを作らない限り、プロダクトコードを書くことは許可しない。&lt;/li&gt;
&lt;li&gt;失敗している間は、それ以上のユニットテストを書くことは許可しない。コンパイルの失敗も失敗である。&lt;/li&gt;
&lt;li&gt;一つでもユニットテストが失敗してる間は、プロダクトコードを書くことは許可しない。一言で言えば、テスト駆動開発では、ユニットテストの失敗への応答としてプロダクトコードを書いていく。
このチュートリアルでは、単体テストフレームワークであるBoost.Testを使用して、C++でテスト駆動開発のアイディアを適用する方法を示す。Boost.Testの主要な機能は、アサーションからテストケースの設計、その管理までをカバーする。我々は、Boost.TestのためのモックオブジェクトであるTurtle Mockを通じて、状態ベーステストと振る舞いベーステストの違いまでをカバーする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;はじめに、テスト駆動開発のメカニクスを示すために、いくつかの演習をやっていく。その次に、機能を実装していくにあたって設計活動としてテスト駆動開発を適用していく考え方を学んでいく。このチュートリアルでは、小さく、凝集度が高く、関心の分離をしているクラスを設計するために、テスト駆動開発が強力な設計ツールになることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#bounded-integer&#34; name=&#34;bounded-integer&#34;&gt;整数演算から未定義動作を排除する、bounded::integerライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Removing undefined behavior from integer operations: the &lt;code&gt;bounded::integer&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/david_stone.1rzy8qkl?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;David Stone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cから派生した言語では、整数の算術演算が悪名高く危険です。符号付き整数では、オーバーフローすると未定義動作になってしまい、符号なしではエラーも起こらず静かに値が一周します。符号ありと符号なしの整数を比較すると、暗黙に符号なしと見なされるため、符号ありの-1は符号ありの12よりも大きくなります。&lt;code&gt;int&lt;/code&gt;に保証されたサイズは、人々が期待し、必要とするよりも小さいです。この状況を改善する多くの試みは、すべての整数演算に、実行時にオーバーヘッドを追加するというものでした。&lt;/p&gt;
&lt;p&gt;このトークでは、&lt;code&gt;bounded::integer&lt;/code&gt;ライブラリを紹介する( &lt;a href=&#34;https://bitbucket.org/davidstone/bounded_integer&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/davidstone/bounded_integer&lt;/a&gt; )。&lt;/p&gt;
&lt;p&gt;C++14で書かれたこのライブラリは、以下を目標とする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時チェックが可能な場合には、決して実行時チェックを行わない。&lt;/li&gt;
&lt;li&gt;確実によくない変換は許可しない。&lt;/li&gt;
&lt;li&gt;よくない可能性のある変換については、明示的な変換のみを許可する。&lt;/li&gt;
&lt;li&gt;より大きい整数型への暗黙変換を許可する。&lt;/li&gt;
&lt;li&gt;空間的および時間的なオーバーヘッドを持たず、インライン化のようなコンパイラの基本的な最適化を仮定し、&lt;code&gt;bounded::integer&lt;/code&gt;を非常に大きなデータセットやリアルタイム要件なシステムで使用できるようにする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;bounded::integer&lt;/code&gt;は、整数型に対して静的な境界要件による保証を提供します。典型的な宣言としては、 &lt;code&gt;bounded::integer&amp;lt;1, 10&amp;gt; x(5);&lt;/code&gt; のように書くと、&lt;code&gt;x&lt;/code&gt;は1から10の範囲を生成します。算術式は、算術結果を自動的に範囲内に範囲内に維持し、境界を調整します。つまり、 &lt;code&gt;x + x&lt;/code&gt; と書くと、結果の型は &lt;code&gt;bounded::integer&amp;lt;2, 20&amp;gt;&lt;/code&gt; となります。&lt;code&gt;auto&lt;/code&gt;とテンプレートの型推論のおかげで、ユーザーは(コンパイル時に)保証されるすべての中間結果が正しいことを、型のみで規定できます。さらに、コンパイラはすべての整数の正確な境界を知っているので、このライブラリは「&lt;code&gt;int&lt;/code&gt;を使用する場合は、どこでも危険を避けること」という戦略よりも、空間的／時間的最適化が高速になります。&lt;/p&gt;
&lt;p&gt;このトークは、このライブラリを使用する際のイディオムである、&lt;code&gt;boost::constrained_value&lt;/code&gt;、Adaの整数型、無限範囲の整数モデル、それと制限と設計に関するトレードオフといった従来の研究も含むつもりです。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#afio&#34; name=&#34;afio&#34;&gt;Boostのピアレビューに向けてのC++11ライブラリAFIOの準備&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparing the C++11 Library AFIO for Boost Peer Review&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/paul_kirth.1rzy8qjc?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Paul Kirth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost C++ Librariesは、その卓越さのために当然ながらよい評価がされており、それは彼らに貢献する抗い難い魅力です。&lt;/p&gt;
&lt;p&gt;このトークでは、AFIOの経験を元に、既存のライブラリをBoostに移植するプロセスを、実例を通して解説します。このライブラリは、Boostのピアレビューに提出するために、Google Summer of Code 2013の期間中にC++11のみで書きました。なぜなら、示すコード例は開発者が直面する問題を強調すべきで、かつ問題に対するひとつのソリューションセットを提供すべきだからです。このトークは、Boostのビルドシステムによるコンパイラの内部エラーへの対処、プロセスの明確化、その他私が遭遇した困難な問題への解決策を示します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#value-semantics-range&#34; name=&#34;value-semantics-range&#34;&gt;値セマンティクスと範囲アルゴリズム - 合成と効率&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Semantics and Range Algorithms - Composability and Efficiency&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/chandlerc?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Chandler Carruth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特定の条件を満たすシーケンス内の先頭N要素を計算するコードを、1行で書きたい。そして、適切な場所(in-place)でそれができるかどうかに関わらず、同じ行でコードを書きたい：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;slice(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sort(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filter(y, predicate)), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

このトークでは、範囲アルゴリズムの設計に値のセマンティクスを与え、その合成を通じて設計上重要な表現力を提供する方法を紹介する。最後に、この設計の効率的な問題と、それを解決する多くの合理的な詳細を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#beware-cpp&#34; name=&#34;beware-cpp&#34;&gt;キーノート：C++に気をつけろ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Beware of C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/nicolai_josuttis.1rzxpihg?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Nicolai Josuttis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11(やC++14)によって、C++は別な言語になっている。アプリケーションプログラマは、宣言、初期化、イテレート、ムーブといったことが、以前よりもはるかに簡単にできるようになった。しかしながら、そこには理想的な「基礎ライブラリ開発者」だけが支払わなければならないコストが存在する。それは本当だろうか？平均的なアプリケーションプログラマは、C++11で効果的なプログラムを書くためのトリッキーな詳細についてどのくらい知る必要があるだろうか？物事の変化にともなって、我々の基本的なプログラミングパターンや方向性はどのように／どれくらい変化する必要があるだろうか。たとえば、C++11で、我々はテンプレートパラメータをどのように宣言し、&lt;code&gt;explicit&lt;/code&gt;をいつ使うべきだろうか？&lt;/p&gt;
&lt;p&gt;しかし、C++標準化委員会のライブラリワーキンググループは、これらの質問に明確な答えを持っていない。私のこのプレゼンテーションでは、平均的なアプリケーションプログラマのために、C++11標準ライブラリにおけるいくつかの問題点(detects)についての議論に基いて、洞察の組み合わせによって問題を解決する方法を紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#configuration-framework&#34; name=&#34;configuration-framework&#34;&gt;実用的なType Erasure： boost::anyベースの構成フレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical Type Erasure: A boost::any Based Configuration Framework&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/cheinan_marks.1rzy8qja?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Cheinan Marks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;構成(コンフィグレーション)フレームワークは、古典的なINIファイルからBoost.PropertyTree、その他とても多くのものが長い間存在してきた。しかしC++による実装での一つの問題として、健全なインタフェースを保ちながら異なる型を保持したり返したりするには、どうすればいいかというものがある。&lt;/p&gt;
&lt;p&gt;このトークで紹介する構成フレームワークは、文字列キーに基いて、コピー可能なあらゆるC++オブジェクトを返すことを可能にするフロントエンドの機能を持っている。バックエンドは、フロントエンドが意識することなくデータをメモリ、ファイル、データベース、その他任意のストレージに保持する仕組みを持っている。グルーレイヤー(glue layer : レイヤー間を繋ぐレイヤー)はフロントエンドとバックエンドを繋ぎ、渡されるデータの性質を気にしなくていいようにする。このマジックは、&lt;code&gt;boost::any&lt;/code&gt;とオブジェクトの組み合わせで、C++03の範囲で全て完結できます。このプレゼンテーションでは、このフレームワークの目標、設計、使用方法、&lt;code&gt;boost::any&lt;/code&gt;とtype erasureを使用することによる実用例を紹介する。時間があれば、簡単なバックエンドのストレージオブジェクトを開発する。&lt;/p&gt;
&lt;p&gt;このフレームワークのオリジナルは、アメリカ政府のプロジェクトで開発され、アメリカ納税者の好意によってパブリックドメインとなっている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#mach7&#34; name=&#34;mach7&#34;&gt;Mach7： C++のためのパターンマッチングライブラリの設計と進化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mach7: The Design and Evolution of a Pattern Matching Library for C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/solodon?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Yuriy Solodkyy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パターンマッチングは、ソースコードを大幅にシンプルにする抽象メカニズムです。とくに、型の検査を行うビジターパターンを、より使いやすく、より高速にする代替手段となります。C++で実装されたMach7という、関数型スタイルのパターンマッチングのライブラリを紹介します。その解決策は非侵入的で、かつ新たなパターンマッチングの導入とクラスの拡張性、両方に対してオープンになっています。このプレゼンテーションは、いくつかの設計選択、実装詳細、初期ユーザーからのフィードバック、およびその他の要因を主に話します。このプレゼンテーションは、より多くの開発者にパターンマッチングに興味を持ってもらうこと、そしてそれがC++のようなオブジェクト指向言語にとりいれることができることを知ってもらうことを、目的とします。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-cpp11-14-1&#34; name=&#34;intro-cpp11-14-1&#34;&gt;C++11/14入門 パート1&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Tutorial Introduction to C++11/14 Part I&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/leor_zolman.1rzxt7h5?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは、C++11とC++14の機能を紹介する2つのプレゼンテーションのひとつめです。言語の小さな側面(aspect)のほとんどをカバーしています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++のタイムライン&lt;/li&gt;
&lt;li&gt;C++11/14の目標&lt;/li&gt;
&lt;li&gt;よりシンプルなコア言語の新機能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;decltype&lt;/code&gt;, 末尾の戻り値型&lt;/li&gt;
&lt;li&gt;非メンバ関数版の&lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;範囲&lt;code&gt;for&lt;/code&gt;文&lt;/li&gt;
&lt;li&gt;テンプレートに特化した&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;extern template&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可変引数テンプレート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;関数とデータ&lt;/li&gt;
&lt;li&gt;テンプレートによる別名付け&lt;/li&gt;
&lt;li&gt;新たな文字リテラル型&lt;/li&gt;
&lt;li&gt;生文字列リテラル&lt;/li&gt;
&lt;li&gt;リテラル文字列と&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、スコープ付きの&lt;code&gt;enum&lt;/code&gt;、&lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;alignas&lt;/code&gt;/&lt;code&gt;alignof&lt;/code&gt;、属性、インライン名前空間、汎用&lt;code&gt;union&lt;/code&gt;／POD、ガベージコレクションABI、ユーザー定義リテラルも紹介します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-cpp11-14-2&#34; name=&#34;intro-cpp11-14-2&#34;&gt;C++11/14入門 パート2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Tutorial Introduction to C++11/14 Part II&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/leor_zolman.1rzxt7h5?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは、C++11とC++14の機能を紹介する2つのプレゼンテーションのふたつめです。言語に追加された、大きめな機能をカバーしています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クラス設計のための機能：生成される関数への&lt;code&gt;default&lt;/code&gt;／&lt;code&gt;delete&lt;/code&gt;指定、移譲／継承コンストラクタ、柔軟性のある新たなクラス内初期化、明示的な型変換演算子、&lt;/li&gt;
&lt;li&gt;初期化： initializer list、一様初期化, 精度を損なうことの防止&lt;/li&gt;
&lt;li&gt;ラムダ式&lt;/li&gt;
&lt;li&gt;右辺値参照：左辺値と右辺値 (その現代的な見方)、ムーブセマンティクス、普遍的な参照(universal references)、完全転送(perfect forwarding)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;space-plasma&#34;&gt;宇宙プラズマモデル開発でのC++11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 in Space Plasma Model Development&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/ilja_honkonen.1rzxt7jj?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Ilja Honkonen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最新のC++標準規格の利点として、超並列計算(宇宙プラズマ)モデルの開発に関する議論ができるようになったというのがある。とくに可変引数テンプレートは、直列でも並列でもどちらに対しても、パフォーマンスを損なうことなく、読みやすく、非常に拡張性の高い計算モデルの開発を可能にする。このプレゼンテーションでは、可変引数テンプレートの基礎を理解しておくことは必要だが、宇宙プラズマの知識は必要ない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp11-library-design&#34; name=&#34;cpp11-library-design&#34;&gt;C++11ライブラリ設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 Library Design&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/eric_niebler?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;君がもしいま再利用可能なコードを書いていて、C++11の新機能をフル活用できないなら、ちょっと立ち止まってみてほしい！そのようなことをするためのルールは、下から(パラメータの渡し方とか)上まで(ライブラリのバージョニングとか)変わっている。C++11によって書かれたコードは、これまで以上に簡単に、より強力に、より安全に使えて、モジュール性が高く組み合わせもしやすくなり、ボイラープレートも少なくなる。つまり、妥協のないライブラリ設計ができるということだ。&lt;/p&gt;
&lt;p&gt;このトークでは、いくつかの関数、クラス、「モジュール」を、効率的に、再利用性が高く、組み合わせがしやすく、バージョニングもできるよう設計する、C++11をフル活用したベストプラクティスについて説明する。これは全体的に、作者が今日の現代的なコンパイラで数年間、再利用可能なコードについて学んだことだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#octopus&#34; name=&#34;octopus&#34;&gt;Octopus: CFDシミュレーションのためのポリシー駆動フレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Octopus: A Policy-Driven Framework for CFD Simulations&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/brycelelbach?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Octopusは、HPX C++ランタイムシステム上に実装した、科学アプリケーション向けの解適合格子(Adaptive Mesh Refinement、AMR法)ライブラリである。Octopusは、ドメイン科学者が、AMR法として知られている技術を利用し、空間分解能の異なるスケールを持つ直交格子(Cartesian Mesh)の階層に対して計算流体力学(CFD : computational fluid dynamics)の問題を解くことを可能にする。ルイジアナ州立大学の天体物理学者は、連星合体(binary star mergers)のような重要な現象のシミュレートをするために、Octopusを使用している。&lt;/p&gt;
&lt;p&gt;Octopusはポリシー駆動のフレームワークである。ドメイン科学者はポリシーを選択し、カスタマイゼーションポイントとして知られているインタフェースを、コンパイル時または実行時に決定する。これらのポリシーは、アプリケーション機能を実装するために基礎フレームワークで使用される。Octopusの多くの側面は、時間の離散化(time discretization)、補完(interpolation)や空間分解(spatial decomposition)を、ポリシーによって完全にコントロールできる。&lt;/p&gt;
&lt;p&gt;このトークでは、効率的で、拡張性が高く、アクセスしやすいライブラリを、ポリシーを使用していかに構築するのかについて説明する。我々は、この強力なジェネリックプログラミング手法が、複雑なネットワークや同期コードを抽象化によって科学者から引き離せることを示す。&lt;/p&gt;
&lt;p&gt;このトークの対象者は、科学計算、ライブラリ設計やジェネリックプログラミングといった分野に関心のある開発者である。参加者は、背景となる数学や天体物理学といった専門知識を持っている必要はない。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#better-code&#34; name=&#34;better-code&#34;&gt;よりよいコードへの道しるべ：完全な型を実装する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Goals for Better Code: Implement Complete Types&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/sean_parent?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GoingNative 2013の「C++ Seasoning」という発表では、よりよいコードのために3つの道しるべを説明した。その発表では、C++における基本的な要素である型、参照と、それらの基礎的な動作について話した。今回は、一般的なすべての型について、その型を定義すること（と、その物理的な本質）によって導かれる結果、そしてなぜ完全な型を実装することが賢いゴールなのかを見ていく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#multiplatform-cpp&#34; name=&#34;multiplatform-cpp&#34;&gt;マルチプラットフォームでのC++&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Multiplatform C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/edouard_alligand.1rzxt7if?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Edouard Alligand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションは、クロスプラットフォームなソフトウェアを開発するに際によくある疑問を解決するためにある。「各環境によって提供される様々なツールチェインを使ってWindowsやLinuxでビルドするにはどうすればよいか？」「LinuxとFreeBSDのような違いにはどう対処すべきか？」「各環境を横断するツールはどのように使うべきか？」「急激に増えるメンテナンスコストをいかに抑えるか？」
さらにこのセッションでは、マルチプラットフォーム開発における隠れた恩恵なども紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#boost-library-incubator&#34; name=&#34;boost-library-incubator&#34;&gt;Boost Library Incubator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/robert_ramey.1rzy8qo7?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Robert Ramey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boostはこれまでとんでもない成功を収めてきたが、同時に自身がその成功の餌食となってきている。泥沼なのである：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各ライブラリのレビューにはずいぶん時間がかかる&lt;/li&gt;
&lt;li&gt;レビューマネージャを探すのが大変&lt;/li&gt;
&lt;li&gt;満足にレビューされていない&lt;/li&gt;
&lt;li&gt;ライブラリの中にはメンテナがいないために放っておかれているものがある&lt;/li&gt;
&lt;li&gt;ライブラリのドキュメントは十分とはいいがたい&lt;/li&gt;
&lt;li&gt;ライブラリサイズはどんどん大きくなり、そして管理とデプロイがどんどん大変になっている&lt;/li&gt;
&lt;li&gt;いくつかのライブラリは時代遅れだが、それを廃止する方法もない&lt;b&gt;しかし&lt;/b&gt;、今まで以上に、C++はさらなるよりよいライブラリを必要としている!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は、上記のような問題に対する自分のアイディア考え、ウェブサイトに落とし込んだ。それがBoost Library Incubatorだ (&lt;a href=&#34;http://rrsd.com/blincubator.com/&#34; target=&#34;_blank&#34;&gt;http://rrsd.com/blincubator.com/&lt;/a&gt;)。私は、このウェブサイトを通して上記のような問題を提言していくつもりである。これが、これからのBoostのさらなる発展と革命に役立てばと思っている。ここにいるたくさんの熱意ある参加者達に期待しているよ!&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#optimization-network-server&#34; name=&#34;optimization-network-server&#34;&gt;Boost.Asioベースのネットワーク・サーバ最適化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Optimization of a Boost.Asio-Based Networking Server&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/nikita_chumakov?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Nikita Chumakov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yandexはロシア最大のインターネット企業の一つです．Yandexは，ウェブ検索や，e-mail, 地図，写真，ホスティングなどの双方向なネットワークサービスを提供しています．私達のチームでは，600万人のアクティブユーザが発する一日あたり5000万以上のメッセージを送信，処理，受診するためのe-mailバックエンドシステムを開発しています．&lt;/p&gt;
&lt;p&gt;本講演では，これらのタスクに対して，Boost-basedなソリューションを検討し，そのパフォーマンスに対する効果を議論します．まず初めに，シンプルなAsio+Spiritベースの実装についてその問題点と限界について議論し，その後，ワークアラウンドと最適化手法を提案します．特に，私達はどのようにリアクターパターンがパフォーマンスに影響を与えるか，どのようにコルーチンと私達が特別に改造したスマートstreambufsがメモリ/CPUリソースを削減するかについて示します．&lt;/p&gt;
&lt;p&gt;(最後に，我々は，本講演に参加こそされていませんが，本発表で用いているコードの作成に尽力して頂いたAlexander Drachevskiyの努力に感謝を表明します．)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#undefined-behavior&#34; name=&#34;undefined-behavior&#34;&gt;C++の未定義動作； それは何か、そしてなぜ気にしなければいけないか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Undefined Behavior in C++; what is it, and why should I care&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/marshall15?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CやC++の未定義動作(UB : Undefined Behavior)は、先人たちによって次々と明らかにされてきた。これらはいくつかの大学では研究の題材としても注目されているが、コード生成器では最適化の際にごく普通にUBの情報を利用している。&lt;/p&gt;
&lt;p&gt;このセッションでは、まず初めにUBの例について示す。次に、コード生成時にオプティマイザはどのようにUBを処理しているかを示す。さらに、あなたのコードにUBが入り込まないようにするための戦略について述べる（これはBoostを題材にする）。そして最後に、既存コードからUBを発見するための最新の（＋将来の）ツールを紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#mpl11&#34; name=&#34;mpl11&#34;&gt;MPL11: C++11の新たなメタプログラミングライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MPL11: A New Metaprogramming Library for C++11&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/ldionne?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Louis Dionne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このトークには、2つの異なる、だが関連のある目標があります。はじめに、C++03からのピンポイントな改善として、C++11でのテンプレートメタプログラミングのベンチマークと事例研究を示します。これは、Boost.MPLの将来を客観的に議論できるようにするための基礎を提供します。ふたつめは、Boostに提案するBoost.MPLの後継となるC++11テンプレートメタプログラミングライブラリ( &lt;a href=&#34;https://github.com/ldionne/mpl11&#34; target=&#34;_blank&#34;&gt;https://github.com/ldionne/mpl11&lt;/a&gt; )の、一般的な目的を示します。ライブラリの中核となるコンセプトを導入し、いくつかの設計選択を説明し、現在のBoost.MPLと客観的な比較を行います。&lt;/p&gt;
&lt;p&gt;このトークは、テンプレートメタプログラミングと関数型プログラミングをよく知っている人向けです。TMPを多用し、FPに興味を持っている人は、最も恩恵を受けるでしょう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#libcppa&#34; name=&#34;libcppa&#34;&gt;libcppa: C++での型安全なメッセージングシステム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libcppa: Type-safe Messaging Systems in C++&lt;/li&gt;
&lt;li&gt;スピーカー：  &lt;a href=&#34;http://cppnow2014.sched.org/speaker/dominik_charousset.1rzy8qml?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Dominik Charousset&lt;/a&gt;, &lt;a href=&#34;http://cppnow2014.sched.org/speaker/matthias_vallentin.1rzy8qmx?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Matthias Vallentin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アクターモデル(actor model)というメッセージ指向のプログラミングパラダイムでは、並行および分散のアプリケーションを標準C++の機能を使うよりも、エラーを少なくし、簡潔に記述でき、理解しやすく、デバッグしやすくします。このトークでは、C++で複雑な分散アプリケーションを構築するために、libcppaによって提供されるコンセプトとサポートを調査します。&lt;/p&gt;
&lt;p&gt;前半は、Dominik CharoussetがC++Now! 2013以前から開発している、C++による新たなアクタープログラミングを導入する。具体的には、分散をアプリケーションで強い型付けのメッセージングを可能にする、アクターの型安全インタフェースという新機能を紹介する。&lt;/p&gt;
&lt;p&gt;後半は、Matthias Vallentinが、libcppaを使用して分散データベースを構築する、&#34;巨大な&#34;スケーラビリティについての事例研究をカバーします。このシステムは、アクターのみならずクラスターベースのデプロイでのネットワーク透明性機能を使用するが、データ取得やクエリ処理などといった、クリティカルパスへのきめ細やかな並列処理によってタスクをスピードアップする。また、プロファイラの結果分析を通じて並列パイプライン処理でのボトルネックコンポーネントを並列化する方法を紹介します。さらに、libcppaのアクターモデルが分散索引システム(distributed indexing system)の設計にどのように役立つかを示します。&lt;/p&gt;
&lt;p&gt;このトークのVallentinの部分は、録画されません。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#unicode&#34; name=&#34;unicode&#34;&gt;C++でのUnicode&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unicode in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/james_mcnellis.6ee6ir6?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;James McNellis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一部のプログラミング言語では、テキスト処理は簡単です。残念ながら、C++はその「一部」には含まれない言語です。C++の状況は改善されはじめてはいますが、Unicodeの組み込みサポートが欠如しています。&lt;/p&gt;
&lt;p&gt;このセッションは、テキストエンコーディングの概要、Unicodeの入門と、さまざまなUnicodeのエンコーディングから始めます。C++98の悲惨なUnicodeサポートを確認し、C++11で行われた改善と、標準化委員会に最近提案されているその他の改善を見てみましょう。最後に、C++で広く使われているUnicodeを操作しやすくするよう設計されたオープンソースライブラリ、International Components for Unicode (ICU)について説明します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#metaprogramming-shell&#34; name=&#34;metaprogramming-shell&#34;&gt;Clangベースのインタラクティブなメタプログラミングシェル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interactive Metaprogramming Shell Based on Clang&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/abel_sinkovics.1rzy8qla?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Ábel Sinkovics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メタプログラミングの開発はしんどい。Templight ( &lt;a href=&#34;http://plc.inf.elte.hu/templight/&#34; target=&#34;_blank&#34;&gt;http://plc.inf.elte.hu/templight/&lt;/a&gt; )はテンプレートメタプログラムの開発とデバッグをサポートしているが、コードの小さな変更のたびに再コンパイルが必要だし、結果に関する有用な情報を得るためにトリックを必要とする。&lt;/p&gt;
&lt;p&gt;多くの言語(Python, Haskell, Erlangなど)は、コードを試すとすぐに結果を表示する、インタラクティブなシェルを提供している。たとえばPythonのシェルで、簡単なリストへの要素追加は、以下のように結果表示される：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; l &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; l.insert(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; l
[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

このシェルはすぐに結果を表示できる。開発者は、自分のコードをコンパイルし、式の結果を確認するデバッガを起動する必要はない。&lt;/p&gt;
&lt;p&gt;このトークでは、テンプレートメタプログラミングのためのインタラクティブなシェルである、Metashellを紹介する。これはPythonのシェルのように使いやすい、テンプレート メタプログラミングのためのテストと開発の環境を提供する。たとえば以下のように操作できる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;vector.hpp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;push_front.hpp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;metashell&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;formatter.hpp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl;

&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; push_front&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
boost_&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

このシェルは結果として、テンプレートメタプログラムを表示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metashellはここで利用できる： &lt;a href=&#34;https://github.com/sabel83/metashell&#34; target=&#34;_blank&#34;&gt;https://github.com/sabel83/metashell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ブラウザでオンラインで試すのはここ： &lt;a href=&#34;http://abel.web.elte.hu/shell&#34; target=&#34;_blank&#34;&gt;http://abel.web.elte.hu/shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MetashellはlibClangライブラリをベースとしている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp-amp&#34; name=&#34;cpp-amp&#34;&gt;C++ AMPを用いたアクセラレータプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Accelerator Programming with C++ AMP&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/brycelelbach?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日，ヘテロジニアスプログラミングはC++が用いられる多くの領域で利用されています．データセンタでは大量のデータを処理するためにGPGPUを用い，スーパコンピューティングの分野では計算能力の大部分を提供するためにアクセラレータの利用が進み，モバイルデバイスでは，&#34;計算能力(capability)&#34;の高いCPU群と&#34;計算容量(capacity)&#34;の高いGPUを組み合わせることで，高効率な計算能力を提供しています．&lt;/p&gt;
&lt;p&gt;一般的には，アクセラレータはプログラムの一部の部分を実行することに適しています．アクセラレータは，プログラム全体の実行方針の決定やメインメモリへのアクセス，周辺ハードウェアへのアクセスのためにCPUに依存しています．この，CPUとアクセラレータ，その他システムコンポーネント間の頻繁なインタラクションは，ヘテロジニアスシステムを複雑にしています．&lt;/p&gt;
&lt;p&gt;さらに，アクセラレータはオフチップに実装されていたり，自身のプライベートメモリをもっていたり，大きな通信レイテンシを持っていたりします．ヘテロジニアスシステムは複数のベンダ固有のプロセッサインタコネクトで通信する複数のCPUを持っていることもあります．システムは，ストレージやネットワークを多用するアプリケーションによってさらに複雑になることがあります．&lt;/p&gt;
&lt;p&gt;多くのC++プログラマにとって，ヘテロジニアスプログラミングはもはや贅沢品ではなく，必要なものです．C++14は，ヘテロジニアスプログラミングに関する仕組みを提供していません．C++プログラマがアクセラレータの能力を利用するためには，ソフトウェアライブラリに頼る必要があります．アクセラレータを利用するための高品質なフレームワークは多くありますが，それらは特定のアクセラレータのみで利用可能であるか，純粋な同期オフローディングモデルを重要視したものです．&lt;/p&gt;
&lt;p&gt;マイクロソフトによって公開されたC++ AMPの仕様では，モダンなC++からアクセラレータを利用するためのハードウェアに依存しないインタフェースを提供しています．C++ AMPは，言語拡張と，STLライクなライブラリコンポーネントで構成され，同期，非同期両方のオフローディングモデルを提供します．C++ AMPによって，ユーザはヘテロジニアスなハードウェアについての詳細な知識なしに，アクセラレータを活用したアプリケーションを記述することが出きます．&lt;/p&gt;
&lt;p&gt;Visual Studioによる成熟したC++ AMP実装に加え，C++ AMPの実装は複数のプラットフォーム上に存在します．いくつか例を挙げると，インテルのShevlin Parkと呼ばれるものや，HSA Foundationが開発しているClang-based C++ AMP実装などが挙げられます．&lt;/p&gt;
&lt;p&gt;このチュートリアルでは，C++ AMPの概要について，ソフトウェア中心の視点から，以下のトピックスについて紹介します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセラレータに対するデータの準備&lt;/li&gt;
&lt;li&gt;アークセラレータとの間のデータ転送&lt;/li&gt;
&lt;li&gt;アクセラレータへのコードのオフロード（例. &lt;code&gt;restring(amp)&lt;/code&gt;, &lt;code&gt;parallels_for_each&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;アクセラレータの並列性のコントロール(例. &lt;code&gt;tilling&lt;/code&gt;, &lt;code&gt;barrires&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本講演では，書き込み待ちなし(write wait-free offloading)のコードオフローディングを行うためにC++ AMPが提供する非同期インタフェースについて，特に強調します．&lt;/p&gt;
&lt;p&gt;対象とする聴衆は，アクセラレータを用いている/用いる予定のあるC++デベロッパです．本講演では，特定のアクセラレータや特定のC++ AMP実装に限った話が含まれます．本プレゼンテーションは，全てのプラットフォーム開発者に関係があり，windowsに限ったものではありません．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#cpp-components&#34; name=&#34;cpp-components&#34;&gt;CppComponents: C++11のモダン,ポータブルなコンポーネントシステム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/john_bandela.1rzy8qkp?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;John Bandela&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;優れたコンポーネントシステムを持っていないことは，C++の大きな問題点の一つである．他の言語は、プレビルドされたライブラリを簡単にあなたのプロジェクトに組み入れる能力を持っている。一方，C++では、異なるコンパイラ、同じコンパイラの異なるバージョン、デバッグ/リリースビルドの違い、どの場合においてもABI互換性がないため、頻繁にコードのリビルドを行うことになる．良いコンポーネントシステムは、パッケージングや、ライブラリの利用を簡単にする．本講演では、あなたにCppComponetsを紹介する。CppComponetsは、あなたに別のプロジェクトでコンパイルされたバイナリや、スタンダードライブラリなどを簡単に利用する手段を与える。あなたはstring,vector,tuple,chronoなど標準ライブラリを関数パラメータや返り値，例外などに利用し続けたままCppComponentsを使用することが出来る．加えて，CppComponetはクロスABI互換関数，&lt;code&gt;futures&lt;/code&gt;, &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;executors&lt;/code&gt;, 及び&lt;code&gt;channels&lt;/code&gt;を提供する．これら全てはヘッダオンリライブラリであり，C++11標準ライブラリのみに依存する．&lt;/p&gt;
&lt;p&gt;本講演ではまず，CppComponetsを支える技術について紹介し，CppComponetsを使い，複数のコンパイラから利用可能なバイナリコンポーネントを簡単に作成する例を提供し，そのコンポーネントがマルチスレッドプログラムやネットワークプログラムをシンプルにする例をお見せする．その後，簡単な依存性注入や，動的な名前ベース呼び出しなどのいくつかの高度なテクニックを見ていく．
本講演のまとめとして，CppComponetsがどのようにC++PyPIや，C++を簡単に多くのドメインで利用可能にするためのC++ components renaissanceを可能とするかなどのCppComponetsの将来的な方向性についてまとめる．&lt;/p&gt;
&lt;p&gt;本講演の対象者は，中級，上級のC++プログラマであるが，初級のC++プログラマにとっても，有用な情報が含まれる．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ui&#34; name=&#34;ui&#34;&gt;UI、美学、C++&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UI. Aesthetics. C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/tony_van_eerd.1rzy8qjc?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そそられる感覚&lt;br /&gt;
作用と応答、原因と結果&lt;br /&gt;
これらのシンボルは何だろう？  &lt;/p&gt;
&lt;p&gt;このセッションはたぶんUIについてであり、もしかしたら美学についてであるが、もちろんC++についてである。願わくは新人プログラマにも熟練プログラマにもかかわる話になればよいのだが。少々哲学的かもしれないが、日々のコーディングに役立つかもしれない。&lt;/p&gt;
&lt;p&gt;ロックフリープログラミングについてではもちろんないので、どうぞ気分転換にでも。:-) &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#design-xml-api&#34; name=&#34;design-xml-api&#34;&gt;最新C++を使ったXML API設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Designing XML API for Modern C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/boris5?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++向けのXMLパース/シリアライズライブラリが氾濫しているが、もともと他の言語向けに開発され、イディオムを最低限考証した程度のC++対応になっているものがほとんどであるようだ。万人が満足しうるXML APIを設計するのは極めて難しい。事実、Boostコミュニティで度々試みられたにもかかわらず、C++標準はもちろん、BoostにさえもXMLライブラリがないことがその証左となるだろう。実際、ストリーミング(SAX)対インメモリ(DOM)の議論から先にすすむことは滅多にない。&lt;/p&gt;
&lt;p&gt;このセッションでは、別のアプローチを試み、C++アプリケーションで一般的なXMLの利用パターンについてまず考えてみる。次に、このことから導出される、パースおよびシリアライズ可能なXML API設計と実装について示す。利用パターンは低レヴェルXML加工(ドキュメント中心アプリケーション)から、単にデータ保持媒体としてXMLを閲覧する(データ中心アプリケーション)まで幅があるので、提示するAPIは低レヴェルアクセスから始め、それをもとにより高度な抽象化を組みあげていく。&lt;/p&gt;
&lt;p&gt;完全を期すため、XML1.0パーサ適合であるとはどういうことか(ヒント：週末におもしろ半分で作ったようなものは多分適合していない)、既存のC++向けのXMLライブラリ/ツールと、その利点と欠点について、そしてXML Schema、XPath、XQueryのようなXML関連技術と、それらが全体図のどこに嵌まるのかについて、といったトピックにも触れることにする。&lt;/p&gt;
&lt;p&gt;聴講者が実際に直面しているユースケースを、このXML APIで満足できるかどうかについてのフィードバックも歓迎する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#understanding-double-and&#34; name=&#34;understanding-double-and&#34;&gt;&amp;amp;&amp;amp;を理解しよう&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding &amp;amp;&amp;amp;&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/s.scott.schurr?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11では右辺値参照、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;が導入された。この単なる二つの&lt;code&gt;&amp;amp;&lt;/code&gt;はムーヴセマンティクスを与える魔力を持っている。しかし、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;は実のところ、さらに強力だ。&lt;code&gt;std::move&lt;/code&gt;と&lt;code&gt;std::forward&lt;/code&gt;に隠された力もやはり&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;だ。加えて、聞いたことがあるかもしれないがUniversal Referencesも&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;を基礎にしている。&lt;/p&gt;
&lt;p&gt;このような力をもつので、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;はややトリッキーであることがわかる。このプレゼンテーションでは&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;のさまざまな使いかたを説明する。読んだり書いたりするコードにでてくる&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;の持つさまざまな意味をどう区別するかについても触れる。さらに、コード中で&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;を利用するベストプラクティスについても述べる。このプレゼンテーションは、いったいぜんたい&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;ってどういう事か知りたいC++初心者から、&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;を使おうとして思った通りに動かなかった中級者向けである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#concurrent-assembly&#34; name=&#34;concurrent-assembly&#34;&gt;並行アセンブリとしての最新のC++&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Modern C++ as Concurrent Assembly&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/diego_perini.1rzy8qlm?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Diego Perini&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ — あらたに採用された、高速に進化する開発サイクルの助けを持つ — は、現世代のアセンブリ言語となった。C++には、それ自体で、並行性をサポートする、真新しい、ドメインに依存しない言語を開発する基礎が揃っている。&lt;/p&gt;
&lt;p&gt;Dopplは効率的なキャッシュ、高度な並行性、データ指向デザイン、言語の構成としてノンブロッキングロジックをもつプログラミング言語である。この言語はC++11と最新の安定標準ライブラリ実装の上に実装されている。&lt;/p&gt;
&lt;p&gt;このセッションでは、Dopplの機能を実現するにあたり利用した、&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;由来のツールや関数型プログラミング由来の材料、CそしてC++11で導入された機能について焦点をあてる。Dopplのサンプルソースコードはその高次構造を聴衆に紹介するために、参考としてのみご覧いただくつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#value-semantics&#34; name=&#34;value-semantics&#34;&gt;値のセマンティクス：シンタックスについてじゃないよ!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Semantics: It ain’t about the syntax!&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/john_lakos.1rzy8qns?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;John Lakos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;値のセマンティクス&lt;/strong&gt;を持つような型について議論するとき、値で関数に渡せる(もしくは返せる)、ということに着目しているだろう。このような型を設計するために、C++はその型についてコピーコンストラクタを要求するので、プログラマは「この型のオブジェクトはそもそもコピー可能であるべきか？」という疑問にフタをして、日常的に自分のクラスにコピーコンストラクタを実装している。もしそうなら、コピーの真実とはなんだろう？元のオブジェクトと完全に同じ状態を持つべきなのか？オブジェクトをコピーするとはなんなんだ？!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;値型&lt;/strong&gt;については、型は(値の)セットを特に表現するものと捉える人が多い。しかし、&lt;strong&gt;値のセマンティック型&lt;/strong&gt;については、数値と同様の操作を提供する抽象数値型(例えば整数、文字セット、複素数の配列)と捉えている。値のセマンティック型のオブジェクトをコピーしたとき、適切な値のセマンティック型の新しいオブジェクトは、元のオブジェクトと同じ値を持っているにもかかわらず、コピー先のオブジェクトは元のオブジェクトと同じ状態を保持していない可能性、さらには同じふるまいをしない可能性がある。&lt;/p&gt;
&lt;p&gt;このセッションでは、たとえば値の&lt;strong&gt;顕著な属性&lt;/strong&gt;の識別、および 自然に値を表現するオブジェクトとそうでないものとを比較することで、値の意味について直感的な感覚を得ることから始める。一般的な値型のシンタックス上特徴を概説した後、値のセマンティクスにかかわるより深い問題について考えていく。特に、値セマンティックオブジェクトにおいて、あらゆる&lt;strong&gt;顕著な&lt;/strong&gt;変化を伴う操作に適用される、微妙な「値の基本的性質」について探求し、より興味深い(値セマンティクスの)クラスを正しく設計するために、この特性を有効利用してみる。 &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#iterators-may-stay&#34; name=&#34;iterators-may-stay&#34;&gt;イテレータはまだ生き残る&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Iterators May Stay&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/sebastian_redl.1rzy8qkf?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Sebastian Redl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンテナとアルゴリズムを繋ぐ便利なインタフェースへの探究は、標準ライブラリのイテレータでも止められなかった。Boost.Rangeは、たくさんあるインタフェース候補の1つにすぎない。近年、異なるアプローチがあれこれ現れ、C++標準化委員会のRangesグループもこの探究に参加し始めた。&lt;/p&gt;
&lt;p&gt;このセッションでは、これらの様々なアプローチを比較し、それぞれの利点と欠点を述べる。聴講者には、標準のアルゴリズム/コンテナライブラリに関する知識・経験を有していること、ジェネリックプログラミングに関する要点を理解していることが求められる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#refactoring-tool&#34; name=&#34;refactoring-tool&#34;&gt;Clangを使ったリファクタリングツールの自作&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create Your Own Refactoring Tool with Clang&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/richard_thomas.1rzxpiib?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Richard Thomson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++のリファクタリングツールは他の言語よりも遅れている。だれしもC++でパースと推論するのが非常に難しいからだという言いわけを聞いたことがあるだろう。それじゃ、Clangを使ったツール基盤を見てメロメロになってもらおうか。実に簡単にリファクタリングツールが書けるようになる。&lt;/p&gt;
&lt;p&gt;このセッションでは、段階的にClangを使って、関数の仮引数リストが「&lt;code&gt;(void)&lt;/code&gt;」になっているのを空のリスト「&lt;code&gt;()&lt;/code&gt;」に変換するリファクタリングツールを作っていく。この過程で、Clang由来のツールライブラリをどう使えばよいか、すなわち、パース済みの抽象構文木(AST: abstract syntax tree)の探査法、ASTの要素に合致するコードの記述、ツールライブラリを利用した、ソースコード変換を行なうための合致するノードの操作法といったことついて十分な知見が得られるだろう。&lt;/p&gt;
&lt;p&gt;時間があれば、リファクタリングツールの別の例についてもごらんいただき、その動作について議論したい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#combinatorial-algorithm&#34; name=&#34;combinatorial-algorithm&#34;&gt;C++を用いた複雑な組み合わせ最適化アルゴリズムの設計と実装&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to Design C++ Implementations of Complex Combinatorial Algorithms&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/piotr_wygocki.1rzy8qmt?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Piotr Wygocki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本講演では、最適化フレームワークの設計についての具体的な一つの方法に焦点を当てます。最適化アルゴリズムを設計する際には、汎用的かつ簡単に拡張可能であることだけでなく、ユーザフレンドリーなインタフェースを提供するという問題に直面するでしょう。私達は、C++11で導入された新しい機能を含む、テンプレートを主に用います。&lt;/p&gt;
&lt;p&gt;一つの例として、ローカルメタヒューリスティックサーチ問題を例にあげましょう。ローカルサーチは非常に有名な最適化手法の一つです。この手法は非常に自然な手法である一方、実際の問題に対して非常によい結果をもたらします。多くのシミュレーテッドアニーリングなどのヒューリスティック最適化アルゴリズムの非常に良い一般化であるローカルサーチに言及することには、大きな価値があります。&lt;/p&gt;
&lt;p&gt;本講演では、複雑なアルゴリズムをテンプレートメタプログラミングを用いて設計することに興味を持っている人に向けたものです。講演を理解するためには、一部C++11のスキルが必要となります．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#intro-fp&#34; name=&#34;intro-fp&#34;&gt;C++における関数型プログラミング入門&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intro to Functional Programming in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/david_sankel.1rzy8ql9?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;David Sankel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;関数プログラミングの核心とはなんだろう？ Haskellをやる必要はないのか？ 関数プログラミングはオールオアナッシングなものか？ C++を「より関数型に」するメリットは？ もしメリットがあるなら、どうやって関数型にしていけばいいの？ &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#object-lifetimes&#34; name=&#34;object-lifetimes&#34;&gt;オブジェクト生存期間の管理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Managing Object Lifetimes&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/marshall15?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の強力な機能として、決定性の、スコープベースのオブジェクト生存期間が挙げられる。適切に利用すれば、リソースリークのない、例外安全なコードが記述できる。このセッションでは例を示し、コードを単純に、読みやすく、もちろん正しく書くための技法について議論する。&lt;/p&gt;
&lt;p&gt;まずは構築/破棄の基礎からはじめ、RAIIとスマートポインタについて触れ、例外安全について議論し、最後にパラメータを渡すさいの所有権について議論する。&lt;/p&gt;
&lt;p&gt;話の途中で、このスタイルのプログラミングがより容易になるC++11とC++14の変更についても議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#badcode&#34; name=&#34;badcode&#34;&gt;0xBADC0DE&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/jens_weller.1rzy8qkc?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Jens Weller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自身のフリーランサーやコーチとしての経験が、このセッションを行う動機になっている。いろいろなところで、いいコードも悪いコードもたくさん見てきた。&lt;/p&gt;
&lt;p&gt;このセッションでは悪いコードの例をみていくだけではなく、そもそも何故それが存在しているのか解析し、どのように対処ならびに修正していけばよいか述べる。話のなかでアンチパターンについて触れるけれども、このセッションはアンチパターンについてではなく、あくまで問題のなかの一つの例として取りあげる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#global-threadlocal-static&#34; name=&#34;global-threadlocal-static&#34;&gt;グローバル、スレッドローカル、および静的データの生存期間と利用法&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lifetime and Usage of Global, Thread-local, and Static Data&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/daniel_dilts.1rzy8qlc?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Daniel Dilts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cはプログラム全体でデータを初期化、未初期化の如何にかかわらず宣言する機能がある。C++はグローバル、スレッドローカルなオブジェクトを生成するためにこの機能を拡張している。全てのオブジェクトと同じく、グローバルおよびスレッドローカルオブジェクトは生存期間の開始とともに構築され、終了とともに破棄される。&lt;/p&gt;
&lt;p&gt;このセッションでは、グローバル、スタティックそしてスレッドローカルオブジェクトの生存期間について、C++11標準が保証していることについて述べる。よって、コンパイラが実際にどうしているかについても話すつもりだ。複雑な初期化のために、どうグローバルデータを使ったらよいかについて議論する。&lt;/p&gt;
&lt;p&gt;グローバルデータの利用パターンや、グローバルデータの縮小についても議論したい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#expected&#34; name=&#34;expected&#34;&gt;Expected — 例外フレンドリーなエラーモナド&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Expected — An Exception-friendly Error Monad&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/vicente_j_botet_escriba.1rzy8qjh?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Vicente J. Botet Escriba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expectedライブラリは、2012年にAndrei Alexandrescuによって紹介されたものをベースにしている。これはC++における新たなエラーハンドリングの方法であり、古典的なエラーコードを返す方法と例外の中間に位置する。Expectedは例外を送出するコードと完全な互換を持ち、例外フリーなインタフェースを設計することを補助する。クリーンなコードを維持しながらエラーハンドリングを強制するこの新技術は、Haskellのような関数型言語のモナドから拝借してきたものだ。しかし、モナドの事前知識は必要ない。&lt;/p&gt;
&lt;p&gt;このトークでは、既存のエラーハンドリング技法の紹介から始める。エラーコードの返却と例外システムを比較し、Expectedを導入する。&lt;code&gt;std::future&lt;/code&gt;クラスと&lt;code&gt;std::experimental::optional&lt;/code&gt;クラスが、類似のユーティリティクラスと概念的にどう異なるのかについても話す。&lt;/p&gt;
&lt;p&gt;Expectedライブラリのコアとなる、様々な機能とセマンティクスを、次の例を使用して紹介する。ユーザー定義のエラー型を使用した例外フリーなインタフェース定義を、expectedクラスではどのように使用するのかを議論する。&lt;/p&gt;
&lt;p&gt;monad errorのメソッドである&lt;code&gt;next&lt;/code&gt;と&lt;code&gt;recover&lt;/code&gt;を、いくつかの例を通じて紹介する。これらのプログラミング技法によって、エラーハンドリングのレイヤーと通常のコードフローを明確に見分けられるようになる。さらに、プログラマがエラーハンドリングを非侵入的に行うことも補助する。それと、関数型言語のモナドについて簡単な解説を行い、&lt;code&gt;expected&lt;/code&gt;がなぜモナドと見なせるのかについても話す。&lt;/p&gt;
&lt;p&gt;残りの時間では、潜在的なモナドクラスである&lt;code&gt;std::experimental::optional&lt;/code&gt;と&lt;code&gt;std::future&lt;/code&gt;について議論する。&lt;/p&gt;
&lt;p&gt;Haskellのモナドは、いくつかのシンタックスシュガーによって、コードをより読みやすくする。N3858 Resumable functionsのawait式と同様に、我々の新たなexpect式が例外送出のコードを読みやすくすることを示す。&lt;/p&gt;
&lt;p&gt;注： このライブラリは、C++標準にはまだ提案されていないが、カンファレンスのあとに提案するつもりだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#async-msm&#34; name=&#34;async-msm&#34;&gt;Boost.MetaStateMachineと次世代非同期ライブラリを利用した非同期プログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Asynchronous Programming Using Boost.MetaStateMachine and the Upcoming Asynchronous Library&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/christopher_henry.1rzy8qko?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Christophe Henry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現実を直視しよう。巨大なアプリケーションでは&lt;code&gt;future&lt;/code&gt;が帰ってくるまで待っていては使いものにならないので、&lt;code&gt;std::async&lt;/code&gt;は成功したとは言えない。N3558、N3650でもまだ問題は解決していない。&lt;/p&gt;
&lt;p&gt;ASIO様のコールバックベースの解法ならよりよさそうではないか？&lt;/p&gt;
&lt;p&gt;まずはBoost Meta State Machineや次世代非同期ライブラリの非同期の部分を使った関数のふるまいについてQtアプリケーション(CDプレーヤー)を調査する。&lt;/p&gt;
&lt;p&gt;次に、非同期ライブラリのアクティヴオブジェクト、スレッドプール、アルゴリズムやその他の話題について焦点をあてる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#functional-data-structures&#34; name=&#34;functional-data-structures&#34;&gt;C++での関数型データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Functional Data Structures in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/bartosz_milewski.1rzy8qnm?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正しく効率的な並行、並列プログラムを書くには並行データ構造が必要である。vectorの頭にmutexをぽんと置くのが最適な解になるのは非常に稀である。関数プログラマ達は偉大なる技法を編み出した - すなわち本質的にスレッドセーフになる不変データ構造を使ったのである。だが、もしデータを変更できないとして、どうやってプログラムを書いたらいいのだろうか？また、単に&lt;code&gt;const vector&lt;/code&gt;を使うだけではなぜダメなのだろうか？&lt;/p&gt;
&lt;p&gt;つまり、効率的な関数型データ構造を設計するための研究分野があることがあることが分かる。&lt;/p&gt;
&lt;p&gt;舞台裏にはデータの変形や共有、そしてトリッキーな同期問題がある。例えば、(まぁ言ってみれば)単方向リストを定数時間で反転できる遅延評価をもちいてデータのコピーを引き伸ばすための技法がある。&lt;/p&gt;
&lt;p&gt;このセッションでは、関数型プログラミング、特にChris Okasakiの名著、『Purely Functional Data Structures』から得られた知識に基づいて、C++で効率的なスレッドセーフデータ構造の実装について紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ownership-memory&#34; name=&#34;ownership-memory&#34;&gt;C++におけるメモリの所有権&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ownership of Memory in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/david_stone.1rzy8qkl?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;David Stone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションでは、(&#34;スタックベース&#34;の)自動変数、生ポインタ、そしてスマートポインタといった、オブジェクトの所有権を定義する一般的な方法について検討する。また、C++標準ライブラリにあるスマートポインタの集合に対して細かな改良点を提案する。&lt;/p&gt;
&lt;p&gt;C++の所有権に関する議論では(たとえあったとしても)ほとんどが軽くパフォーマンスについて言及するのみで、それを使うべき(もしくは使わないべき)かについての切言が主になっている。このセッションでは、正しさを維持したままパフォーマンスとメモリ効率を効果的に最適化するにはどうするべきかについてのみ扱う時間を設けるつもりである。&lt;/p&gt;
&lt;p&gt;このセッションの主題はメモリに関連した所有権についてである。RAIIのような重要な指針についても概説するが、メモリ管理の文脈に限るものとし、一般的なリソース管理については対象外とする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#disambiguation&#34; name=&#34;disambiguation&#34;&gt;曖昧性解決における黒魔術&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Disambiguation: The Black Technology&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/zhihao_yuan.1rzy8qjx?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Zhihao Yuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の関数呼び出しはCのそれよりも、オーヴァーロードにより高い柔軟性を備えている。だがオーヴァーロードはあいまいさの原因ともなるので、SFINAEやMPLのintegral_constant、タグディスパッチといった、一般的なツールを利用する。ところが、このようなツールの利用は関数名をただ変えるのに比べるとより&#34;黒魔術&#34;に近い。このセッションでは、関数のオーヴァーロードセットを管理するために、どのようにこれらのツールをつかえばよいかについて学ぶ。また、これらのツールで関数呼び出しのあいまいさを解決しなけらばならない時、すべき時、すべきでない時、できない時について理解できるだろう。&lt;/p&gt;
&lt;p&gt;ライブラリの提案、libc++、libstdc++、Boostなどの実装から例示する。MPLの経験は必要ではない。 &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#frp&#34; name=&#34;frp&#34;&gt;関数リアクティヴプログラミング - 滑かに抽象化された双方向性&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Functional Reactive Programming - Cleanly Abstracted Interactivity&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/david_sankel.1rzy8ql9?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;David Sankel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1997年にConal ElliotとPaul Hudakにより、関数リアクティヴプログラミング(FRP:functional reactive programming)と呼ばれる、双方向性の新しい数学モデルの発見が公開された。時間-関数に基づくモデルは根本的に典型的なイヴェントとコールバックパラダイムから出発し、対話型プログラムを書く上で、より自然かつ簡潔な方法 - タイムステップやフレーム、接続、またその他検討事項は完全に抽象化されている - をゴールとしている。&lt;/p&gt;
&lt;p&gt;このセッションではFRP方法論を紹介し、&#39;sfrp&#39;という、ロボット工学やコンピュータアニメーション、UIといったドメインで容易に利用可能な、新規の業務用途に耐える関数リアクティヴプログラミングフレームワークを紹介する。 &#39;sfrp&#39;と他のC++やHaskellのFRP実装との比較についてや、商用アプリケーションで&#39;sfrp&#39;を利用した経験についても紹介するつもりだ。このセッションに参加した各位がFRPパラダイムをいつつかうか、また&#39;sfrp&#39;をつかってどのようにアプリケーションに適用するか知っていただければ幸いである。&lt;/p&gt;
&lt;p&gt;本セッションの対象聴講者は、より強力かつ簡潔な対話型プログラムを作成することに興味がある、すべてのスキルレヴェルのC++開発者である。関数リアクティヴプログラミングや関数プログラミングの経験は不要である。 &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#accelerator-programming&#34; name=&#34;accelerator-programming&#34;&gt;将来のC++におけるアクセラレータプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Future of Accelerator Programming in C++
スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/sebastian_schaetz.1rzxpija?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Sebastian Schaetz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCL、CUDA、C++AMP、OpenACC、RenderScript、Thrust、Bolt、VexCL、Boost.Compute、ViennaCL、MTL4、NT2、Arrayfire — このようにアクセラレータプログラミングのためのツールや環境、フレームワークやライブラリはいろいろある。 このセッションではこれらのツールについて概説し、アクセラレータ利用の異なるケースとひもづけていく。 開発者の生産性や、汎用性、性能といった観点でどのように比較したらよいだろうか？&lt;/p&gt;
&lt;p&gt;これらのツールを自由に使ってしまうと、アクセラレータプログラミングの問題は解決からほど遠くなってしまう。C++でデータ並列と並行を表現するよりよい方法があるはずだ。関数プログラミングコミュニティが我々の助けになるだろうか？または、Bret Victorが適切に述べたように、よりよい解を探すために単に「コンピュータについて考え、理解したことを全て忘れ、コンピュータが存在することを忘れ」るべきか。聴衆からのコメントはこのセッションの第二部で歓迎する。 &lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/cppnow/2014.html#ripple-management&#34; name=&#34;ripple-management&#34;&gt;C++におけるRipple Managementによる巨大なコードベース変更についての私見&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;My Thoughts on Large Code Base Change Ripple Management in C++&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow2014.sched.org/speaker/nialldouglas?iframe=yes&amp;amp;w=700&amp;amp;sidebar=yes&amp;amp;bg=no&#34; target=&#34;_blank&#34;&gt;Niall Douglas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他の言語に比べて、C++98/03は非常に複雑だと言われつづけて久しい。C++11/14で追加された多数の機能は、次世代のC++コードベースがより一層複雑化することを示唆している。おそらく、計画中のC++17では、現時点で予測できない方向で事態はさらに悪化するだろう。&lt;/p&gt;
&lt;p&gt;ソフトウェアの複雑化に対し、2020年ごろまで見つもられている指数関数的成長からはずれたコンピュータハードウェアの性能向上では対抗できない。つまり全てのコンピューターソフトウェアについて予測することがより困難になるだろう。&lt;/p&gt;
&lt;p&gt;WG21 C++17の研究グループであるSG2 (モジュール)、SG7 (リフレクション)、SG8 (コンセプト)および、これらほどではないにせよ、SG10 (機能テスト) や、SG12 (未定義動作)は、C++17における複雑性管理を大幅に進化させる基礎であるが、C++の複雑性管理を進化させるこれらの研究についてまだあまり明確に言及されていない。&lt;/p&gt;
&lt;p&gt;本プレゼンテーションでは、全てのC++ユーザーにとって、将来のC++コードベースを大幅に扱いやすく理解しやすくするために、SG2とSG7をSG3 (ファイルシステム)で組み合わせることで、このような複雑性がスケールする問題に対するあたらしい実装方法、すなわち、C++ランタイムの根幹にBoost.ASIOやBoost.AFIO、そしてBoost.Graphを基礎とする標準化された非常に軽量なトランザクショナルグラフデータベースを提案する。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak, eagle_raptor, chichimotsu&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.45.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_45_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_45_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.45.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：
&lt;a href=&#34;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_45_0.qbk&#34; target=&#34;_blank&#34;&gt;http://beta.boost.org/users/news/version_1_45_0&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#polygon&#34;&gt;Polygon(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#property-tree&#34;&gt;Property Tree(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#serialization&#34;&gt;Serialization(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#thread&#34;&gt;Thread(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kqueueベースプラットフォームにおいて、&lt;code&gt;io_service&lt;/code&gt;がバックグラウンドスレッドで走っている場合に&lt;code&gt;deadline_timer&lt;/code&gt;が着火しないかもしれない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4568&#34; target=&#34;_blank&#34;&gt;#4568&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;メンバ関数である&lt;code&gt;has_service()&lt;/code&gt;中で、非constメンバ関数である&lt;code&gt;init_key()&lt;/code&gt;を呼んでいたためコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4638&#34; target=&#34;_blank&#34;&gt;#4638&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MinGWのクロスコンパイルを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4491&#34; target=&#34;_blank&#34;&gt;#4491&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Boost.Systemの非推奨関数に依存していた部分を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4672&#34; target=&#34;_blank&#34;&gt;#4672&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;/&lt;code&gt;closesocket()&lt;/code&gt;の失敗を正しく伝播されることを保証(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4573&#34; target=&#34;_blank&#34;&gt;#4573&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InitializeCriticalSectionAndSpinCount&lt;/code&gt;によって返されたエラー値のチェックを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4574&#34; target=&#34;_blank&#34;&gt;#4574&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;QNXのハードウェア制御フローサポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4625&#34; target=&#34;_blank&#34;&gt;#4625&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;HP-UX上で&lt;code&gt;pselect()&lt;/code&gt;が利用可能な場合、常にそれを使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4578&#34; target=&#34;_blank&#34;&gt;#4578&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ハンドラ引数が左辺値として渡されることを保証(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4744&#34; target=&#34;_blank&#34;&gt;#4744&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;スレッドサポートが無効にされた場合のWindowsビルドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4680&#34; target=&#34;_blank&#34;&gt;#4680&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;5分以上の未来が指定された場合、&lt;code&gt;deadline_timer&lt;/code&gt;オブジェクトが終了しないことがあるWindows特有の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4745&#34; target=&#34;_blank&#34;&gt;#4745&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;空のサービス名がポート番号0に解決されるよう、ドキュメントに従ってBSDプラットフォーム上のバックエンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4690&#34; target=&#34;_blank&#34;&gt;#4690&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_buffers_1&lt;/code&gt;型のバッファシーケンスを受け入れないよう、&lt;code&gt;read&lt;/code&gt;操作を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4746&#34; target=&#34;_blank&#34;&gt;#4746&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Objective-C++のキーワードである&lt;code&gt;protocol&lt;/code&gt;と&lt;code&gt;id&lt;/code&gt;を避けるように再定義(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4191&#34; target=&#34;_blank&#34;&gt;#4191&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;実行中の&lt;code&gt;deadline_timer&lt;/code&gt;オブジェクトが数多くある場合に起こる、&lt;code&gt;vector&lt;/code&gt;の再確保問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4780&#34; target=&#34;_blank&#34;&gt;#4780&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;NetBSD上でコンパイルできるよう、kqueueバックエンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4662&#34; target=&#34;_blank&#34;&gt;#4662&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;64ビット Mac OS X、およびBSD上での&lt;code&gt;is_control()&lt;/code&gt;の実装を用意した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4782&#34; target=&#34;_blank&#34;&gt;#4782&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/asio/impl/src.hpp&amp;gt;&lt;/code&gt;をサポートし、&lt;code&gt;&amp;lt;boost/asio/impl/src.cpp&amp;gt;&lt;/code&gt;を非推奨にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4560&#34; target=&#34;_blank&#34;&gt;#4560&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数マクロが実装されているコンパイラかどうかを判定する&lt;code&gt;BOOST_NO_VARIADIC_MACROS&lt;/code&gt;マクロ追加。 &lt;/li&gt;
&lt;li&gt;C++0xから追加された&lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;::lowest()&lt;/code&gt;が実装されているかどうかを判定する&lt;code&gt;BOOST_NO_NUMERIC_LIMITS_LOWEST&lt;/code&gt;マクロ追加。 &lt;/li&gt;
&lt;li&gt;OpenVMS環境でのコンフィグレーションサポートを追加。&lt;code&gt;boost/config/platform/vms.hpp&lt;/code&gt;(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4474&#34; target=&#34;_blank&#34;&gt;#4474&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cygwin + GCC環境でWIN32マクロが定義されないと仮定していたためリンクエラーを起こしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4670&#34; target=&#34;_blank&#34;&gt;#4670&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/config/auto_link.hpp&lt;/code&gt;の&lt;code&gt;BOOST_AUTO_TAGGED&lt;/code&gt;で、「&lt;code&gt;#pragma commentcomment&lt;/code&gt;」になっていたのを「&lt;code&gt;#pragma comment&lt;/code&gt;」に修正。VC8ではunknown pragma警告が出ていた。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4563&#34; target=&#34;_blank&#34;&gt;#4653&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/config/platform/bsd.hpp&lt;/code&gt;で&lt;code&gt;__NetBSD_GCC__&lt;/code&gt;がdefineされていると仮定して書かれていたため、OpenBSD環境でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4508&#34; target=&#34;_blank&#34;&gt;#4508&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path_traits::is_pathable&lt;/code&gt;を追加した。&lt;code&gt;path&lt;/code&gt;メンバテンプレートが非pathableな型でオーバーロード解決されるのを防ぐためにこれを使用する。この問題は、Adam Baduraによって報告された(rev.64986)。&lt;/li&gt;
&lt;li&gt;古いWindows SDKに関するV2 create_hard_linkの問題を解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4487&#34; target=&#34;_blank&#34;&gt;#4487&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Boost.Mathで発生していた&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4799&#34; target=&#34;_blank&#34;&gt;#4799&lt;/a&gt;のリンクエラーと同じ問題が、他3箇所でも発生していたので修正。&lt;/li&gt;
&lt;li&gt;Boost 1.44.0でV3を追加した際に、V2の&lt;code&gt;boost::filesystem::slash&lt;/code&gt;が見つからないというコンパイルエラーが出ていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4712&#34; target=&#34;_blank&#34;&gt;#4712&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;不正にsymlinkと識別されるfilesystemオブジェクトの問題を修正し、テストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4663&#34; target=&#34;_blank&#34;&gt;#4663&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temp_directory_path&lt;/code&gt;関数を追加(rev.66028)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;チケット&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4606&#34; target=&#34;_blank&#34;&gt;#4606&lt;/a&gt;で記述されたBoost.Interprocessと関係する、Win32プラットフォーム上で &lt;a href=&#34;http://beta.boost.org/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;intermodule_holder&lt;/code&gt;&lt;/a&gt; のぶら下がり問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::exit&lt;/code&gt;によって、非互換の内部拡張によるプログラム終了を削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto_any&lt;/code&gt;のコンストラクタを&lt;code&gt;explicit&lt;/code&gt;に修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラスをRandom Access Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラステンプレートをRandom Access Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_TPL_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラスをRandom Access SequenceかつAssociative Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ASSOC_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラステンプレートをRandom Access SequenceかつAssociative Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ASSOC_TPL_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daniel TrebbienによるStoer-Wagnerの最小カットを求めるアルゴリズム(無向グラフを二つに分けたときに、重みが最小になるような分け方を求める)を追加。&lt;/li&gt;
&lt;li&gt;W. P. McNeillによる暗黙的グラフ(&lt;code&gt;implicit_graph&lt;/code&gt;)(メモリをあまり使わないグラフ)と&lt;code&gt;A*&lt;/code&gt;(astar_maze)(最短経路を求めるアルゴリズム)のサンプルを追加。&lt;/li&gt;
&lt;li&gt;グラフのプロパティのための、バンドルされたプロパティ（？）の追加。&lt;ul&gt;
&lt;li&gt;→&lt;strong&gt;補足(Akira)&lt;/strong&gt;： 分散グラフの&lt;code&gt;compressed_sparse_row_graph&lt;/code&gt;に&lt;code&gt;graph_bundled&lt;/code&gt;プロパティを追加。分散グラフの方はold-styleのプロパティを持たないので、非分散グラフとインタフェースを合わせるために持たせただけ(rev.65764)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4556&#34; target=&#34;_blank&#34;&gt;#4556&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4622&#34; target=&#34;_blank&#34;&gt;#4622&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4631&#34; target=&#34;_blank&#34;&gt;#4631&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4715&#34; target=&#34;_blank&#34;&gt;#4715&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4753&#34; target=&#34;_blank&#34;&gt;#4753&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4758&#34; target=&#34;_blank&#34;&gt;#4758&lt;/a&gt; 及び &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4793&#34; target=&#34;_blank&#34;&gt;#4793&lt;/a&gt;と、Tracに登録されていないバグを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4731&#34; target=&#34;_blank&#34;&gt;#4731&lt;/a&gt; と &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4737&#34; target=&#34;_blank&#34;&gt;#4737&lt;/a&gt;の、ドキュメントのバグを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Win32環境において、グローバルなファイルマッピングが行えない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1080&#34; target=&#34;_blank&#34;&gt;#1080&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_memory_mapping::get_size&lt;/code&gt;のドキュメントがおかしかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3284&#34; target=&#34;_blank&#34;&gt;#3284&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;named semaphoreの説明に、named conditionが出てきていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3439&#34; target=&#34;_blank&#34;&gt;#3439&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess_condition&lt;/code&gt;がデッドロックを起こしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3448&#34; target=&#34;_blank&#34;&gt;#3448&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;同じファイルがほかのところで閉じられると、排他的な&lt;code&gt;file_lock&lt;/code&gt;が失われてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3582&#34; target=&#34;_blank&#34;&gt;#3582&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy_ptr&lt;/code&gt;時にセグメンテーションフォルトになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3682&#34; target=&#34;_blank&#34;&gt;#3682&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory&lt;/code&gt;のムーブコンストラクタで、初期化されてないハンドルで&lt;code&gt;swap&lt;/code&gt;していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3829&#34; target=&#34;_blank&#34;&gt;#3829&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline&lt;/code&gt;内で、変数が二重定義されていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3846&#34; target=&#34;_blank&#34;&gt;#3846&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;にセキュリティ属性を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3914&#34; target=&#34;_blank&#34;&gt;#3914&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;が動いていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3947&#34; target=&#34;_blank&#34;&gt;#3947&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;のデストラクタが、そうするべきではないところで&lt;code&gt;shm&lt;/code&gt;を&lt;code&gt;delete&lt;/code&gt;していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3950&#34; target=&#34;_blank&#34;&gt;#3950&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_shared_memory&lt;/code&gt;の&lt;code&gt;find&lt;/code&gt;が、GCCの最適化によって&lt;code&gt;assert&lt;/code&gt;に引っかかっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3951&#34; target=&#34;_blank&#34;&gt;#3951&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;非推奨となっているBoost.Configの&lt;code&gt;BOOST_HAS_*&lt;/code&gt;マクロを使用していたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3985&#34; target=&#34;_blank&#34;&gt;#3985&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;のために、bootstamp名のフォルダを使用していたため、長時間動かすようなシステムで突然動かなくなってしまう問題があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4010&#34; target=&#34;_blank&#34;&gt;#4010&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4352&#34; target=&#34;_blank&#34;&gt;#4352&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_mapping&lt;/code&gt;がVC10でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4417&#34; target=&#34;_blank&#34;&gt;#4417&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;例外メッセージをいくつか追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4019&#34; target=&#34;_blank&#34;&gt;#4019&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex&lt;/code&gt;が冬眠していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4039&#34; target=&#34;_blank&#34;&gt;#4039&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linux版の&lt;code&gt;set_file_pointer&lt;/code&gt;の結果判定が間違っていたため、成功しても失敗で返っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4218&#34; target=&#34;_blank&#34;&gt;#4218&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;時に&lt;code&gt;operator==&lt;/code&gt;がないというコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4230&#34; target=&#34;_blank&#34;&gt;#4230&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;プログラムを実行したユーザーの権限でtmpフォルダが作られていたため、ユーザーを切り替えるとそのフォルダにアクセスできなくなる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4250&#34; target=&#34;_blank&#34;&gt;#4250&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/mem_algo/rbtree_best_fit.hpp&amp;gt;&lt;/code&gt;の警告をとった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4297&#34; target=&#34;_blank&#34;&gt;#4297&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;パーミッションを指定できるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4350&#34; target=&#34;_blank&#34;&gt;#4350&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC 4.6でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4426&#34; target=&#34;_blank&#34;&gt;#4426&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MinGWでregression testがリンクエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4516&#34; target=&#34;_blank&#34;&gt;#4516&lt;/a&gt;) ←&amp;lt;font color=&#34;red&#34;&amp;gt;直ってないぞ、と言われている…。&amp;lt;/font&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::interprocess_semaphore&lt;/code&gt;が&lt;code&gt;wait&lt;/code&gt;してる間CPUを消費する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4524&#34; target=&#34;_blank&#34;&gt;#4524&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/code&gt;をdefineしたらコンパイルエラーになっていたので、Interprocess内の&lt;code&gt;assert&lt;/code&gt;を全て&lt;code&gt;BOOST_ASSERT&lt;/code&gt;に置き換えた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4557&#34; target=&#34;_blank&#34;&gt;#4557&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Flyweightと合わせて、&lt;code&gt;test_intermod_holder&lt;/code&gt;のregression testが通らなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4606&#34; target=&#34;_blank&#34;&gt;#4606&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::interprocess::winapi::get_last_bootup_time(std::wstring&amp;amp;)&lt;/code&gt;のregression testが通らなかったので修正&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4685&#34; target=&#34;_blank&#34;&gt;(#4685&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Jailed FreeBSD環境でregression testが通らなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4694&#34; target=&#34;_blank&#34;&gt;#4694&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ムーブセマンティクスに対応(GCC 4.5とVC10でテストしてある)&lt;/li&gt;
&lt;li&gt;interprocess named resourceのためにパーミッションを可能にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region::flush&lt;/code&gt;が汎用的な実装ではなかったので修正。&lt;/li&gt;
&lt;li&gt;FreeBSDとMacOS環境においてnamed semaphoreとmutexを実装するためにposix semaphoreを使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;逆ガンマ分布(inverse gamma distribution)、逆カイ二乗(inverse chi square)、Scaled逆カイ二乗(scaled inverse chi square)を追加。&lt;/li&gt;
&lt;li&gt;標準乱数ライブラリでの分布と関数の名前における曖昧さへの更なる警告を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントのリビジョン修正と、FAQの追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シリアライズに対応。&lt;/li&gt;
&lt;li&gt;eUMLのアクションに通常の関数オブジェクトを使用できるようにした。&lt;/li&gt;
&lt;li&gt;引数としてサブ状態、サブ状態マシンをとるコンストラクタを追加。これによって引数をサブ状態マシンに渡すことができる。&lt;/li&gt;
&lt;li&gt;Bugfixes (anonymous transitions) ←なにこれ？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3820&#34; target=&#34;_blank&#34;&gt;#3820&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3989&#34; target=&#34;_blank&#34;&gt;#3989&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt; のバグと、Trac に登録されていないその他のバグを修正（←その他のバグってなんやねん！）。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt; ―― &lt;a href=&#34;http://www.boost.org/doc/libs/1_40_0/libs/multi_array/doc/user.html#sec_storage&#34; target=&#34;_blank&#34;&gt;boost::fortran_storage_order example&lt;/a&gt; のサンプルが間違っている（&lt;code&gt;boost::fortran_storage_order&lt;/code&gt; ではなく &lt;code&gt;boost::fortran_storage_order()&lt;/code&gt;）のを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3820&#34; target=&#34;_blank&#34;&gt;#3820&lt;/a&gt; ―― &lt;a href=&#34;http://www.boost.org/doc/libs/1_41_0/libs/multi_array/doc/reference.html&#34; target=&#34;_blank&#34;&gt;Boost.MultiArray Reference Manual&lt;/a&gt; で &lt;code&gt;std::times&lt;/code&gt; を使っているが、これは標準の関数ではないので &lt;code&gt;std::multiplies&lt;/code&gt; に修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3989&#34; target=&#34;_blank&#34;&gt;#3989&lt;/a&gt; ―― &lt;code&gt;detail/ptree_implementation.hpp&lt;/code&gt; でメンバ呼び出しの際に &lt;code&gt;template&lt;/code&gt; が無いのと、&lt;code&gt;libs/multi_array/example/for_each.hpp&lt;/code&gt; で &lt;code&gt;typename&lt;/code&gt; が無いのを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt; ―― &lt;code&gt;boost::detail::ConstMultiArrayConcept&lt;/code&gt; と &lt;code&gt;boost::detail::MutableMultiArrayConcept&lt;/code&gt; はよく使うものなので Boost.ConceptCheck へ移動。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいサンプルとテストケースを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに載ってない変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;negative strideを適切に処理するために、&lt;code&gt;generate_array_view&lt;/code&gt;の&lt;code&gt;assert&lt;/code&gt;を修正(rev.53879)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_array_view&lt;/code&gt;において、合法な範囲(legal range)を考慮するとき、リサイズが空の配列から始まるのを説明する必要がある、ということで小さな修正を行った(rev.62963)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.44.0リリース以降の様々なバグを修正(rev.66403) ←なんですかそれ…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#property-tree&#34; name=&#34;property-tree&#34;&gt;Property Tree(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XMLパーサーがi18nに対応していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4340&#34; target=&#34;_blank&#34;&gt;#4340&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4602&#34; target=&#34;_blank&#34;&gt;#4602&lt;/a&gt; のバグを修正。&lt;code&gt;proto::N&lt;/code&gt; の大きな障害を取り除いた。&lt;/li&gt;
&lt;li&gt;RTTI のないコンパイラをサポート。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::matches&lt;/code&gt; の配列型とワイルドカードパターンのバグを修正。&lt;/li&gt;
&lt;li&gt;MSVC に &lt;code&gt;/clr&lt;/code&gt; オプションを付けた状態で Proto が動くように修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::eval&lt;/code&gt; のオーバーロードに const 修飾を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#serialization&#34; name=&#34;serialization&#34;&gt;Serialization(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializationの新しいバージョンをMPIで使うために同様の修正を行った(rev.65965)。&lt;/li&gt;
&lt;li&gt;XML構文を、Spirit.Qiで書き直した(rev.66030)。&lt;/li&gt;
&lt;li&gt;アーカイブバージョン1.41-, 1.42, 1.43,1.44+の互換性を修正(rev.66107)。&lt;/li&gt;
&lt;li&gt;MinGWのビルドを修正(rev.66123)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;optional attributeのSpirit.Qiデバッグ機能が壊れていたので修正&lt;/li&gt;
&lt;li&gt;Spirit.Qiの&lt;code&gt;auto&lt;/code&gt;パーサーおよびSpirit.Karmaの&lt;code&gt;auto&lt;/code&gt;ジェネレータが&lt;code&gt;signed char&lt;/code&gt;および&lt;code&gt;unsigned char&lt;/code&gt;で適切に動作するようになった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutli_pass fixed_size_queue&lt;/code&gt;ポリシーの問題を解決した。 ←問題ってなんだ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip&lt;/code&gt;ディレクティブでproper modifier handlingが可能になった。 ←何それどこにも書いてない。&lt;/li&gt;
&lt;li&gt;Spirit.Karmaの浮動小数点数フォーマットにおいて、&lt;code&gt;scientific&lt;/code&gt;モードで出力したときの値に誤差がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4742&#34; target=&#34;_blank&#34;&gt;#4742&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt;ディレクティブ中でのパース失敗時に&lt;code&gt;first&lt;/code&gt;イテレータがリセットされない問題を修正(&lt;a href=&#34;http://stackoverflow.com/questions/4009752/boost-spirit-bug-when-mixing-alternates-with-optionals&#34; target=&#34;_blank&#34;&gt;Stack Overflowを参照&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_time.hpp&lt;/code&gt;が、&lt;code&gt;BOOST_DATE_TIME_HAS_HIGH_PRECISION_CLOCK&lt;/code&gt;がdefinedされていることに依存した実装になっていた問題を修正。Androidでのクロスコンパイルに失敗していた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4727/&#34; target=&#34;_blank&#34;&gt;#4727&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;raceを回避するために、&lt;code&gt;promise::lazy_init&lt;/code&gt;を&lt;code&gt;shared_ptr&lt;/code&gt;のatomic accessを使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4531&#34; target=&#34;_blank&#34;&gt;#4531&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::wait&lt;/code&gt;の書き込み割り込みチェックの競合条件を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2330&#34; target=&#34;_blank&#34;&gt;#2330&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型に右辺値参照(&lt;code&gt;&amp;amp;&amp;amp;)&lt;/code&gt;を付加する&lt;code&gt;add_rvalue_reference&lt;/code&gt;メタ関数を追加。&lt;/li&gt;
&lt;li&gt;型に左辺値参照(&lt;code&gt;&amp;amp;&lt;/code&gt;)を追加する&lt;code&gt;add_lvalue_reference&lt;/code&gt;メタ関数を追加。&lt;/li&gt;
&lt;li&gt;可変個テンプレートパラメータを受け取り、それらが共通して変換可能な型を返す&lt;code&gt;common_type&lt;/code&gt;メタ関数を追加。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Ratioの実装に必要。このメタ関数の元ネタはD言語。&lt;/p&gt;
&lt;p&gt;参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kmonos.net/alang/d/2.0/phobos/std_traits.html#CommonType&#34; target=&#34;_blank&#34;&gt;template CommonType(T...) - std.traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;マイナー修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_signed&lt;/code&gt;, &lt;code&gt;is_unsigned&lt;/code&gt;メタ関数の内部で&lt;code&gt;static const T&lt;/code&gt;を使用していたのを&lt;code&gt;BOOST_STATIC_CONSTANT&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_virtual_base_of&lt;/code&gt;メタ関数の内部実装で使用する型名を変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;疎行列/パックド行列の行列要素割当て時に型変換エラーが起こる可能性がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4410&#34; target=&#34;_blank&#34;&gt;#4410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;行列/ベクトル&amp;lt;-&amp;gt;スカラー間の&lt;code&gt;operator*&lt;/code&gt;を新規に提供(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3397&#34; target=&#34;_blank&#34;&gt;#3397&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/795&#34; target=&#34;_blank&#34;&gt;#795&lt;/a&gt;を修正(何も変わっていない。rejected?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix&amp;lt;complex&amp;gt;&lt;/code&gt;と&lt;code&gt;matrix&amp;lt;double&amp;gt;&lt;/code&gt;のように異なる型同士の四則演算を追加。また、テストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3514&#34; target=&#34;_blank&#34;&gt;#3514&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;
- &lt;code&gt;size&amp;lt;&amp;gt;&lt;/code&gt;演算子。たとえば、&lt;code&gt;size&amp;lt;1&amp;gt;(A+B)&lt;/code&gt;は、行列Aと行列Bの和の行の数を表します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix inserting from iterators which return by copy from &lt;code&gt;operator*&lt;/code&gt; in &lt;code&gt;boost::unordered_map&lt;/code&gt; and &lt;code&gt;boost::unordered_set&lt;/code&gt;. ←変更点を見たらTODOになってたので保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++0xでの &lt;code&gt;pp_tokens&lt;/code&gt; の定義に従って形成されたトークン（列）である場合に限りトークン連結が妥当となるようにした。今までは &lt;code&gt;--variadic&lt;/code&gt; モードにおいて、非 &lt;code&gt;pp_tokens&lt;/code&gt; に対して（訳注：トークン（列）の）形成を許していた。&lt;/li&gt;
&lt;li&gt;マクロ定義中、 &lt;code&gt;/##/&lt;/code&gt; を不正なトークン連結として prevented reporting する問題を修正&lt;/li&gt;
&lt;li&gt;&#39;inactive&#39; conditional preprocessing directive tokens に対する &lt;code&gt;skipped_token&lt;/code&gt; フック呼び出し禁止の問題を修正。 conditional preprocessing directives 処理時における、 reporting skipped tokens 中の関数フックの全体的な整合性を向上した。 skipped_token フックの呼び出しを検証する新しいテストケースを追加した(t_2_020.cpp)。&lt;/li&gt;
&lt;li&gt;真で戻ってくる場合の &#39;expanding_object_like_macro&#39;, &#39;expanding_function_like_macrol&#39; pp フックが、正しくマクロ展開を抑制せずに全ての preprocessing を停止してしまうことによる問題を修正。&lt;/li&gt;
&lt;li&gt;inactive conditional branches 内部で preprocessing directives に対して skipped_token pp フックを重複して呼びだしているのを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::xpressive::as&amp;lt;T&amp;gt;&lt;/code&gt;が&lt;code&gt;std::wstring&lt;/code&gt;で動作していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4496&#34; target=&#34;_blank&#34;&gt;#4496&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#boostbook&#34; name=&#34;boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コードブロック終了にあるコメントのシンタックスハイライトを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインマクロを修正&lt;/li&gt;
&lt;li&gt;ネストしたコードスニペット&lt;/li&gt;
&lt;li&gt;ネストしたドキュメンテーションコメント&lt;/li&gt;
&lt;li&gt;ドキュメント情報をエスケープするXMLを差し戻し。この問題はいくつかのドキュメントファイルを壊した(現在のバージョンは1.6)。&lt;/li&gt;
&lt;li&gt;他の小さな修正に関しては、&lt;a href=&#34;http://beta.boost.org/doc/html/quickbook/change_log.html#quickbook.change_log.releases.version_1_5_3___boost_1_45_0&#34; target=&#34;_blank&#34;&gt;修正履歴&lt;/a&gt;を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要テストコンパイラ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.1. &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0. &lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1 &lt;/li&gt;
&lt;li&gt;Pathscale: 3.2. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4. &lt;/li&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0 and 10.0. &lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.3.3. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1, 32 bit. &lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追加のテストコンパイラ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.0, 4.6.0 (dev version). &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0. &lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1. &lt;/li&gt;
&lt;li&gt;pgCC 10.1. &lt;/li&gt;
&lt;li&gt;PathScale: 3.2. &lt;/li&gt;
&lt;li&gt;Clang from subversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel C++ Compiler: 10.1, 11.0, 11.1. &lt;/li&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4.4 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4 &lt;/li&gt;
&lt;li&gt;Clang from subversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Borland: 5.9.3, 6.1.3 (2009), 6.2.1 (2010), 6.3.0 &lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.3.3, 4.4.5, 4.5.1 &lt;/li&gt;
&lt;li&gt;GCC, mingw, C++0x mode: 4.5.1 &lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AIX: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sun C++: 5.10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, melpon, DigitalGhost, kambk, rigarash&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.46.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_46_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_46_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.46.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/news/version_1_46_0&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/news/version_1_46_0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interval Container Library。interval setとmap、および interval に関連づけられた値の集約。作者：Joachim Faulhaber。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#bind&#34;&gt;Bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#pool&#34;&gt;Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#signals&#34;&gt;Signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#tokenizer&#34;&gt;Tokenizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#inspect&#34;&gt;Inspect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#array&#34; name=&#34;array&#34;&gt;Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cbegin&lt;/code&gt;/&lt;code&gt;cend&lt;/code&gt;のサポートを追加(&lt;a href=&#34;http://boostjp.github.io/document/version/javascript:void(0);&#34;&gt;#4761&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Sunコンパイラでの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4757&#34; target=&#34;_blank&#34;&gt;#4757&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4::broadcast()&lt;/code&gt; を64ビット環境で使用する場合に生じる整数オーバーフローの問題を修正。&lt;/li&gt;
&lt;li&gt;プログラムがしばらく動作したあとに、 &lt;code&gt;deadline_timer&lt;/code&gt; ハンドラーの期限内の呼び出しを阻む、古い Linux カーネル上の問題を修正( &lt;code&gt;timerfd&lt;/code&gt; サポートなしで &lt;code&gt;epoll&lt;/code&gt; が使われるところ) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5045&#34; target=&#34;_blank&#34;&gt;#5045&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#bind&#34; name=&#34;bind&#34;&gt;Bind&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_adaptable&lt;/code&gt;のドキュメントを記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4532&#34; target=&#34;_blank&#34;&gt;#4532&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己代入による警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4918&#34; target=&#34;_blank&#34;&gt;#4918&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトのライブラリバージョンをv3にした。&lt;/li&gt;
&lt;li&gt;IBM vacpp: コンパイラのバグによる&lt;code&gt;iterator_facade&lt;/code&gt;のworkaroundに対応(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4912&#34; target=&#34;_blank&#34;&gt;#4912&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;検証し、ドキュメント化された &lt;code&gt;&amp;lt;boost/config/user.hpp&amp;gt;&lt;/code&gt; は、&lt;code&gt;BOOST_FILESYSTEM_VERSION&lt;/code&gt; の規定のために使用される(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4891&#34; target=&#34;_blank&#34;&gt;#4891&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Cスタイルの &lt;code&gt;assert&lt;/code&gt; を &lt;code&gt;BOOST_ASSERT&lt;/code&gt; で置き換えた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique_path()&lt;/code&gt; の非推奨を取りやめた。代わりに、スレッド安全性と cwd のための代替手段を注記するようにした。 &lt;code&gt;unique_path()&lt;/code&gt; は非推奨にするにはあまりに便利すぎる！&lt;/li&gt;
&lt;li&gt;GCC のいくつかの警告を解消。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt; を使用するよう、 v2 コードを修正。&lt;/li&gt;
&lt;li&gt;Windows: 非symlink reparseポイントを正確に報告するよう &lt;code&gt;status()&lt;/code&gt; を修正。&lt;/li&gt;
&lt;li&gt;directory symlink に再帰の制御を許可するために、 &lt;code&gt;recursive_directory_iterator&lt;/code&gt; に &lt;code&gt;symlink_option&lt;/code&gt; を追加。&lt;ul&gt;
&lt;li&gt;※注： directory symlink はデフォルトでは再帰できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リファレンスドキュメントをクリーンナップした：リンク切れ、インクルード漏れ、記載されていない関数の追加。&lt;/li&gt;
&lt;li&gt;雑なコードをクリーンナップ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; のコピーコンストラクタを、異なる環境でも同じ順序でシーケンスメンバをコピーするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2823&#34; target=&#34;_blank&#34;&gt;#2823&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 7.1 で Graphviz 出力が動作するよう修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt; を &lt;code&gt;BOOST_ASSERT&lt;/code&gt; に置き換え。&lt;/li&gt;
&lt;li&gt;使用する Boost.Filesystem のバージョンを v3 に変更。&lt;/li&gt;
&lt;li&gt;(&lt;code&gt;graph_traits&lt;/code&gt; 等を用いて) アダプトされたユーザー定義グラフを、&lt;code&gt;reverse_graph&lt;/code&gt; アダプタとともに使用する際の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1021&#34; target=&#34;_blank&#34;&gt;#1021&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GraphML を使用する場合はビルドが必要であることをドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4556&#34; target=&#34;_blank&#34;&gt;#4556&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r_c_shortest_path&lt;/code&gt; のオーバーロードのうち一本の経路を要求するバージョンについて経路が見つからなかった場合にクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4631&#34; target=&#34;_blank&#34;&gt;#4631&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;BGL ヘッダファイルと &lt;code&gt;boost/range/irange.hpp&lt;/code&gt; で名前衝突が発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4642&#34; target=&#34;_blank&#34;&gt;#4642&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;カスタム &lt;code&gt;property_map&lt;/code&gt; が &lt;code&gt;astar_search&lt;/code&gt; で動作しない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4715&#34; target=&#34;_blank&#34;&gt;#4715&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_path&lt;/code&gt; （ダイクストラ法）のドキュメント中で、最小スパニングツリーでないものを最小スパニングツリーとして記述していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4731&#34; target=&#34;_blank&#34;&gt;#4731&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt; （プリムの最小全域木）のドキュメント中で &lt;code&gt;distance_map&lt;/code&gt; に関する記述が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4737&#34; target=&#34;_blank&#34;&gt;#4737&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph.hpp&lt;/code&gt; の &lt;code&gt;remove_edge_if&lt;/code&gt; と &lt;code&gt;clear_vertex&lt;/code&gt; が(遅いが正しいコードなのに) &#34;wrong&#34; とコメントで記述されていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4753&#34; target=&#34;_blank&#34;&gt;#4753&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt; の結果が指定通りの辺数にならない場合がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4758&#34; target=&#34;_blank&#34;&gt;#4758&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy_component&lt;/code&gt; が正しく動作しない場合がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4793&#34; target=&#34;_blank&#34;&gt;#4793&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GraphML の parser が &lt;code&gt;edge&lt;/code&gt; の省略可能なプロパティ &lt;code&gt;id&lt;/code&gt; を必須としていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4843&#34; target=&#34;_blank&#34;&gt;#4843&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ドキュメントのスペルミスを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4851&#34; target=&#34;_blank&#34;&gt;#4851&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Dijkstra アルゴリズムの計算量の記述が誤っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4852&#34; target=&#34;_blank&#34;&gt;#4852&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clustering_coefficient&lt;/code&gt; が &lt;code&gt;graph_traits&lt;/code&gt; を使っていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4887&#34; target=&#34;_blank&#34;&gt;#4887&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt; でグラフに対するプロパティの扱いが抜けていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4914&#34; target=&#34;_blank&#34;&gt;#4914&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;部分グラフに対してループ辺を追加した場合に二重に追加される問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4966&#34; target=&#34;_blank&#34;&gt;#4966&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Trac 上に無い種々の問題の修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::type_index&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wconversion&lt;/code&gt;警告を回避&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;implicit_cast&lt;/code&gt; での問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3645&#34; target=&#34;_blank&#34;&gt;#3645&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_input_iterator&lt;/code&gt; を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2893&#34; target=&#34;_blank&#34;&gt;#2893&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform_iterator&lt;/code&gt; は &lt;code&gt;function_object_result&lt;/code&gt; という独自の result type を使うのではなくて &lt;code&gt;boost::result_of&lt;/code&gt; を使うように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1427&#34; target=&#34;_blank&#34;&gt;#1427&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wald分布(Wald distribution)、 逆ガウス分布(Inverse Gaussian distribution)、幾何分布(geometric distributions)を追加。&lt;/li&gt;
&lt;li&gt;configurationマクロの情報を追加。&lt;/li&gt;
&lt;li&gt;real-numered 型のために &lt;code&gt;mpreal&lt;/code&gt; のサポートを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Back-end チュートリアルに、&lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-compile-time-analysis&#34; target=&#34;_blank&#34;&gt;コンパイル時状態マシン解析(Compile-time state machine analysis)&lt;/a&gt;の節を追加。&lt;/li&gt;
&lt;li&gt;Back-end チュートリアルに、 &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-boost-parameter&#34; target=&#34;_blank&#34;&gt;Boost.Parameter によるポリシー定義(Policy definition with Boost.Parameter)&lt;/a&gt;の節を追加。&lt;/li&gt;
&lt;li&gt;Back-end チュートリアルに、&lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-queues&#34; target=&#34;_blank&#34;&gt;メッセージキューのカスタマイズ(Customizing the message queues)&lt;/a&gt;の節を追加。
イベント、もしくは遅延されたイベントのキューのコンテナを提供することが可能になった。 Boost.CircularBuffer による効率的な実装。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msm::back::state_machine&amp;lt;&amp;gt;::is_flag_active&lt;/code&gt; メソッドの &lt;code&gt;const&lt;/code&gt; 版を用意した。&lt;/li&gt;
&lt;li&gt;Back-end チュートリアルに、&lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-enqueueing&#34; target=&#34;_blank&#34;&gt;遅延処理のためのイベントキューイング(Enqueueing events for later processing)&lt;/a&gt;の節を追加。&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;deferred eventsがVC++8.0で動かなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4926&#34; target=&#34;_blank&#34;&gt;#4926&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Defer functorでスタックオーバーフローしていた問題を修正。&lt;/li&gt;
&lt;li&gt;initial stateで、匿名サブマシンの遷移が動作していなかった問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラのバグでテストが失敗する可能性があるということをテスト結果に記述(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2294&#34; target=&#34;_blank&#34;&gt;#2294&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#pool&#34; name=&#34;pool&#34;&gt;Pool&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;poolに&lt;code&gt;max_size&lt;/code&gt;をセット可能になった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2696&#34; target=&#34;_blank&#34;&gt;#2696&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/pool/pool.hpp&lt;/code&gt; &lt;code&gt;static_cast&lt;/code&gt;のかわりに&lt;code&gt;reinterpret_cast&lt;/code&gt;が使われている問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2941&#34; target=&#34;_blank&#34;&gt;#2941&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::pool_allocator&lt;/code&gt; &lt;code&gt;vector&lt;/code&gt;の&lt;code&gt;vector&lt;/code&gt;でも動作するように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/386&#34; target=&#34;_blank&#34;&gt;#386&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Microsoftのメモリリーク検出機能との互換性を確立した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4346&#34; target=&#34;_blank&#34;&gt;#4346&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントのサンプルのエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3992&#34; target=&#34;_blank&#34;&gt;#3992&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4858&#34; target=&#34;_blank&#34;&gt;#4858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argv&lt;/code&gt; に &lt;code&gt;const&lt;/code&gt; を付けるように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3909&#34; target=&#34;_blank&#34;&gt;#3909&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;※破壊的変更： &lt;code&gt;&amp;lt;boost/proto/core.hpp&amp;gt;&lt;/code&gt; で定義されていた &lt;code&gt;functional::pop_front&lt;/code&gt; と &lt;code&gt;functional::reverse&lt;/code&gt; を &lt;code&gt;&amp;lt;boost/proto/functional&amp;gt;&lt;/code&gt; に移動。&lt;/li&gt;
&lt;li&gt;多くのFusionアルゴリズムのラッパー(&lt;code&gt;fusion::at&lt;/code&gt;等)と、標準ユーティリティライクな &lt;code&gt;make_pair&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; を 新たな `&amp;lt;boost/proto/functional&amp;gt;&amp;gt; ディレクトリに追加。&lt;/li&gt;
&lt;li&gt;文法から個別に変換を指定するのを許可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::matches&lt;/code&gt; は、ドメイン固有式(domain-specific expression)を保存するラッパー。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::and_&lt;/code&gt; 内での &lt;code&gt;operator,&lt;/code&gt; の ADL 問題を修正。&lt;/li&gt;
&lt;li&gt;複数ドメインの式における文法チェックのハンドリングを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4675&#34; target=&#34;_blank&#34;&gt;#4675&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::display_expr&lt;/code&gt; で &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; が曖昧になっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4910&#34; target=&#34;_blank&#34;&gt;#4910&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Proto expression で &lt;code&gt;fusion::is_sequence&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5006&#34; target=&#34;_blank&#34;&gt;#5006&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC で &lt;code&gt;-Wundef&lt;/code&gt; オプションを使用したときに &lt;code&gt;&amp;lt;boost/proto/fusion.hpp&amp;gt;&lt;/code&gt; で警告が出ていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5075&#34; target=&#34;_blank&#34;&gt;#5075&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#signals&#34; name=&#34;signals&#34;&gt;Signals&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gcc で警告が出ないようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4365&#34; target=&#34;_blank&#34;&gt;#4365&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spirit V2.4.2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Qi および Spirit.Karma のドキュメントに、キーワードインデックスを追加。&lt;/li&gt;
&lt;li&gt;コンテナに対して属性値を追加する場合に呼ばれる新たなカスタマイゼーションポイントとして &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/advanced/customize/assign_to/assign_to_container_from_value.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;traits::assign_to_container_from_value&lt;/code&gt;&lt;/a&gt; を追加。&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;lit(foo)&lt;/code&gt;」か「&lt;code&gt;foo&lt;/code&gt;」かを区別することを可能にするために、 &lt;code&gt;sprit::lit&lt;/code&gt; を実装するために使われていた &lt;code&gt;proto::lit&lt;/code&gt; を独立したバージョンに置き換えた。この変更によってセマンティクスは全く変更されないはずであり、既存コードも破壊されないはずである。&lt;/li&gt;
&lt;li&gt;コンテナ属性型として代入可能にするために、 Spirit.Qi に &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/qi/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as&amp;lt;T&amp;gt;[]&lt;/code&gt;&lt;/a&gt; ディレクティブを追加(また、 &lt;code&gt;string&lt;/code&gt; の特殊化バージョンである &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/qi/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as_string&lt;/code&gt;&lt;/a&gt; および &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/qi/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as_wstring&lt;/code&gt;&lt;/a&gt; を追加)。&lt;/li&gt;
&lt;li&gt;出力生成中にコンテナ属性型として処理可能にするために、 Spirit.Karma に &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/karma/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as&amp;lt;T&amp;gt;[]&lt;/code&gt;&lt;/a&gt; ディレクティブを追加(また、 &lt;code&gt;string&lt;/code&gt; の特殊化バージョンである &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/karma/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as_string&lt;/code&gt;&lt;/a&gt; および &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/karma/reference/directive/as.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;as_wstring&lt;/code&gt;&lt;/a&gt; を追加)。&lt;/li&gt;
&lt;li&gt;Spirit.Qi において、 &lt;code&gt;lit()&lt;/code&gt; を数値に対しても使用できるようにした。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/qi/reference/string/symbols.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;symbols&amp;lt;Ch, T&amp;gt;&lt;/code&gt;&lt;/a&gt; パーサーで、明示的な名前をエラーハンドリングとデバッギングに使用できるようにした。これは新メンバ関数 &lt;code&gt;sym.name(...)&lt;/code&gt; を使用することで設定できる。パッチを送ってくれた teajay に感謝する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/karma/reference/string/symbols.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;symbols&amp;lt;Attrib, T&amp;gt;&lt;/code&gt;&lt;/a&gt; ジェネレータで、明示的な名前をエラーハンドリングとデバッギングに使用できるようにした。これは新メンバ関数 &lt;code&gt;sym.name(...)&lt;/code&gt; を使用することで設定できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Qi もしくは Karma のバグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Qi シーケンスでコンテナ属性を扱う際の問題を解決した。先頭要素に対して適切に解析された属性がシーケンスの後ろの方の値によって上書きされてしまっていた。&lt;/li&gt;
&lt;li&gt;Spirit.Karma の &lt;a href=&#34;http://www.boost.org/doc/libs/1_46_0/libs/spirit/doc/html/spirit/karma/reference/string.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;string(s)&lt;/code&gt;&lt;/a&gt; ジェネレータを修正。 &lt;code&gt;s&lt;/code&gt; が属性のプレフィックスだけとマッチした場合でも成功していた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spirit.Lex の変更内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;qi::tokenid()&lt;/code&gt; プリミティブパーサーで、与えられた token id に基づいた任意の lexer token とマッチすることを可能にした。&lt;/li&gt;
&lt;li&gt;デフォルト &lt;code&gt;lexertl::token&amp;lt;&amp;gt;&lt;/code&gt; 定義のためのテンプレートパラメータを追加： token id の型。この型はデフォルトで &lt;code&gt;std::size_t&lt;/code&gt; となる。 id 型として使用されるあらゆる型は、(明示的に) &lt;code&gt;std::size_t&lt;/code&gt; に変換可能でなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lex::char_()&lt;/code&gt; および &lt;code&gt;lex::string()&lt;/code&gt; に基づいたトークン定義に、 &lt;code&gt;lexer&lt;/code&gt; のセマンティックアクションを付加できるようにした。&lt;/li&gt;
&lt;li&gt;あるトークンとマッチした後、 &lt;code&gt;lexer&lt;/code&gt; が自動的に切り替わるように &lt;code&gt;lexer&lt;/code&gt; 状態を指定することを可能にした。この理由のために、トークン定義構文を拡張した：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; lexer &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; lex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    lexer()
    {
        int_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;[1-9][0-9]*&#34;&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;self(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;INITIAL&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;TARGETSTATE&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; int_;
     }
     lex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;token_def&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; int_;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この例の &lt;code&gt;lexer&lt;/code&gt; は &lt;code&gt;int_&lt;/code&gt; にマッチし、 &#34;TARGETSTATE&#34; 状態に切り替わる。第2引数が指定されない場合は、(これまで通り)前の状態のままである。&lt;/li&gt;
&lt;li&gt;パーサープリミティブ &lt;code&gt;qi::tokens&lt;/code&gt; および &lt;code&gt;qi::tokenid&lt;/code&gt; を引数なしで使用できるようにした。その場合、あらゆるトークンにマッチする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lex::lit()&lt;/code&gt; を削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spirit.Lexのバグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべての &lt;code&gt;lexer&lt;/code&gt; 状態にただちにトークンを割り当てるために、 &lt;code&gt;Lexer&lt;/code&gt; を与える問題を解決した。これは現在、状態の名前として &lt;code&gt;&#34;*&#34;&lt;/code&gt; を使用することで可能となる。たとえば、以下は全ての &lt;code&gt;lexer&lt;/code&gt; 状態にトークン &lt;code&gt;int_&lt;/code&gt; を加えるだろう：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; lexer &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; lex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Lexer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
      lexer()
      {
          int_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;[1-9][0-9]*&#34;&lt;/span&gt;;
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;self(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;*&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; int_;
      }
      lex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;token_def&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; int_;
};
&lt;/pre&gt;&lt;/div&gt;

注：すべての &lt;code&gt;lexer&lt;/code&gt; 状態が &lt;code&gt;lexer&lt;/code&gt; オブジェクトに導入されたあと、 &lt;code&gt;self(&#34;*&#34;) = ...&lt;/code&gt; が実行されなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexer&lt;/code&gt; 先読みを修正。先読み操作は現在、その引数として使用される &lt;code&gt;token_def&lt;/code&gt; インスタンスが使用した &lt;code&gt;lexer&lt;/code&gt; 状態を使用して評価される。&lt;/li&gt;
&lt;li&gt;multi_pass iterator の中で間違ったトークンがユーザーに返される問題を解決した。これは &lt;code&gt;lexer&lt;/code&gt; 状態変更を実行し、トークンマッチを失敗させるためにセマンティックアクションの中で &lt;code&gt;pass_fail&lt;/code&gt; を使用していた &lt;code&gt;lexer&lt;/code&gt; とともの起こるかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;既知の問題&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数リテラル(&lt;code&gt;int_(10)&lt;/code&gt;のような)は、失敗に関して入力を消費する。これは代替演算子に関する問題に結びつくかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#tokenizer&#34; name=&#34;tokenizer&#34;&gt;Tokenizer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isspace&lt;/code&gt;/&lt;code&gt;ispunct&lt;/code&gt; が間違ったキャラクタ型で呼ばれていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4791&#34; target=&#34;_blank&#34;&gt;#4791&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;value type での &lt;code&gt;operator&amp;amp;&lt;/code&gt; の使用を回避。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wconversion&lt;/code&gt; での警告を回避。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++0xでキーワードとされる語をRe2C lexerに追加。&lt;/li&gt;
&lt;li&gt;コマンドラインオプション &lt;code&gt;--c++0x&lt;/code&gt; を追加。このオプションを付けると、C++0xでキーワードされる語と、それらのC++0xトークンへの変換が有効になる。&lt;/li&gt;
&lt;li&gt;全ライブラリをBoost.Filesystem V3と協調動作するように適合 (デフォルトで有効)。&lt;/li&gt;
&lt;li&gt;拡張文字・文字列リテラルのサポートと、それに関するテストケースを追加 (テストアプリケーションへのC++0xサポートの追加が要求される)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--c++0x&lt;/code&gt; modeに仕様に沿った定義済みマクロの追加。現在&lt;code&gt;__cplusplus&lt;/code&gt;は&lt;code&gt;201101L&lt;/code&gt;と定義されているが、言語仕様が決定する際に変更されるかもしれない。&lt;/li&gt;
&lt;li&gt;オブジェクト形式マクロがカッコと隣接していて、&lt;code&gt;expanding_object_like_macro()&lt;/code&gt;フック関数によってマクロ展開が抑制されるとき、カッコが消えてしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pragma option(preserve)&lt;/code&gt;のバグを修正 (以前の値が&lt;code&gt;preserve=2&lt;/code&gt;だった場合、&lt;code&gt;perserve=1&lt;/code&gt;がセットされないバグ)。&lt;/li&gt;
&lt;li&gt;waveコマンドの&lt;code&gt;--preserve&lt;/code&gt;オプションのinteger argumentの解釈を少し変更:&lt;ul&gt;
&lt;li&gt;0: 空白文字は全て処理する&lt;/li&gt;
&lt;li&gt;1: 行頭の空白文字だけそのままにする&lt;/li&gt;
&lt;li&gt;2: 行頭とコメントの空白文字だけそのままにする&lt;/li&gt;
&lt;li&gt;3: 全ての行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#pragma wave option(preserve)&lt;/code&gt; は次の引数をサポートする: [0|1|2|3|push|pop]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#boostbook&#34; name=&#34;boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ルート要素に対する属性のより良いサポート(&lt;code&gt;lang&lt;/code&gt;を含む)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#inspect&#34; name=&#34;inspect&#34;&gt;Inspect&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boostのヘッダで、Cの&lt;code&gt;assert&lt;/code&gt;マクロが使われていないかをチェック&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメント情報中での &lt;code&gt;lang&lt;/code&gt; 属性のサポートを追加&lt;/li&gt;
&lt;li&gt;アンカーを改善&lt;/li&gt;
&lt;li&gt;条件節での &lt;code&gt;import&lt;/code&gt;、&lt;code&gt;include&lt;/code&gt; 、 &lt;code&gt;xinclude&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;Filesystem v3を使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要テストコンパイラ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.2,&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;Clang: 2.8&lt;/li&gt;
&lt;li&gt;Pathscale: 3.2.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.&lt;/li&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0 and 10.0.&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.0, 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2&lt;/li&gt;
&lt;li&gt;pgCC [/ 10.1,] 11.1&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;PathScale: 3.2, 4.0&lt;/li&gt;
&lt;li&gt;Visual Age C++ 10.1&lt;/li&gt;
&lt;li&gt;Clang from subversion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel C++ Compiler: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Clang from subversion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.5.1, 4.6.0&lt;/li&gt;
&lt;li&gt;GCC, mingw, C++0x mode: 4.5.1&lt;/li&gt;
&lt;li&gt;Borland: 6.1.3 (2009), 6.2.1 (2010)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AIX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 64 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sun C++: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, melpon, zakkas783, yak_ex&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.46.1リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_46_1.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_46_1.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.46.1リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/news/version_1_46_1&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/news/version_1_46_1&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#icl&#34;&gt;Icl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#property-tree&#34;&gt;Property Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#signals2&#34;&gt;Signals2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#tr1&#34;&gt;TR1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt; のデストラクタが &lt;code&gt;close()&lt;/code&gt; システムコール内で固まるという問題が、Mac OS Xのあるヴァージョンで &lt;code&gt;EV_ONESHOT&lt;/code&gt; が原因で発生している。キューのバックエンドに &lt;code&gt;EV_CLEAR&lt;/code&gt; を代わりに用いるように変更 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5021&#34; target=&#34;_blank&#34;&gt;#5021&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;g++のあるヴァージョンで、無名&lt;code&gt;enum&lt;/code&gt;を利用しているためにコンパイルに失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4883&#34; target=&#34;_blank&#34;&gt;#4883&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EWOULDBLOCK&lt;/code&gt; で繰り返し失敗するあるシステムコールがkqueue に正しく再登録されないような kqueue ベースのプラットフォームでのバグを修正&lt;/li&gt;
&lt;li&gt;データが &lt;code&gt;std::streambuf&lt;/code&gt;メンバ関数により変更された後、内部ポインタが正しく更新されるように &lt;code&gt;asio::streambuf&lt;/code&gt; を変更した
Windows以外のプラットフォームにおいて linger socket optionが機能しないバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 7.1/8.0での&lt;code&gt;disable_if&lt;/code&gt;の問題を修正(詳細：&lt;a href=&#34;http://thread.gmane.org/gmane.comp.lib.boost.devel/215210/&#34; target=&#34;_blank&#34;&gt;fusion compare is broken&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STLportで動作しない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5217&#34; target=&#34;_blank&#34;&gt;#5217&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;PGI巨大ファイルをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;boost subgraph &lt;code&gt;remove_edge_if&lt;/code&gt;でのイテレータ無効問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5181&#34; target=&#34;_blank&#34;&gt;#5181&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;多重辺のpresentenceでのboost subgraph &lt;code&gt;remove_edge(e, g)&lt;/code&gt;のバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5180&#34; target=&#34;_blank&#34;&gt;#5180&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;のドキュメントで、テンプレートがHTMLでエスケープされていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5199&#34; target=&#34;_blank&#34;&gt;#5199&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism()&lt;/code&gt; : バッファオーバーフローしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5175&#34; target=&#34;_blank&#34;&gt;#5175&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#icl&#34; name=&#34;icl&#34;&gt;Icl&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interval_map&lt;/code&gt; と、&lt;code&gt;element_type&lt;/code&gt; あるいは &lt;code&gt;segment_type&lt;/code&gt; との &lt;code&gt;intersect&lt;/code&gt; がコンパイルできなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5207&#34; target=&#34;_blank&#34;&gt;#5207&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost&lt;/code&gt; 名前空間と &lt;code&gt;std&lt;/code&gt; 名前空間とで曖昧な関数呼び出しがあった問題を修正。&lt;/li&gt;
&lt;li&gt;その他バグ、ドキュメントの修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの小さなバグを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;45-degreeのブーリアン最適化を無効化(詳細：&lt;a href=&#34;http://thread.gmane.org/gmane.comp.lib.boost.devel/215677&#34; target=&#34;_blank&#34;&gt;Boost.Polygon issues&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display_expr&lt;/code&gt;をコピー可能にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5096&#34; target=&#34;_blank&#34;&gt;#5096&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass_through&lt;/code&gt;の&lt;code&gt;const&lt;/code&gt; correctness問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#property-tree&#34; name=&#34;property-tree&#34;&gt;Property Tree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JSON パーサでのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#signals2&#34; name=&#34;signals2&#34;&gt;Signals2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用していないパラメータの警告を解消。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#tr1&#34; name=&#34;tr1&#34;&gt;TR1&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::tr1::hash&lt;/code&gt;の特殊化を許可。&lt;/li&gt;
&lt;li&gt;PathscaleおよびSunのコンパイラのサポートを改善。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_46_1.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照を使用する場合に、不足しているコピーコンストラクタとコピー代入演算子を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5119&#34; target=&#34;_blank&#34;&gt;#5119&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他の変更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Buildの変更に合わせ、Getting Startedのページを更新。&lt;/li&gt;
&lt;li&gt;Quickbookの、g++ 4.4での最適化バグを回避。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;Boostの主要テストコンパイラは以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.1, 4.4.3, 4.4.5, 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;Clang: 2.8&lt;/li&gt;
&lt;li&gt;Pathscale: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.&lt;/li&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0 and 10.0.&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0.&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostの追加コンパイラは以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.4, 4.4.5, 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.2&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;PathScale: 3.2, 4.0.8&lt;/li&gt;
&lt;li&gt;Visual Age C++: 10.1&lt;/li&gt;
&lt;li&gt;Clang from subversion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel C++ Compiler: 10.1, 11.0, 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Clang from subversion, with GNU libstdc++, libc++ and libc++ in C++0x mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.5.1&lt;/li&gt;
&lt;li&gt;GCC, mingw, C++0x mode: 4.5.1&lt;/li&gt;
&lt;li&gt;Borland: 6.1.3 (2009), 6.2.1 (2010)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AIX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sun C++: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.47.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_47_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_47_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.47.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_47_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_47_0.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chrono&lt;ul&gt;
&lt;li&gt;有用な時間ユーティリティ。&lt;/li&gt;
&lt;li&gt;作者：Vicente J. Botet Escribá&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geometry&lt;ul&gt;
&lt;li&gt;幾何学ライブラリ。&lt;/li&gt;
&lt;li&gt;作者：Barend Gehrels, Bruno Lalande and Mateusz Loskot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phoenix&lt;ul&gt;
&lt;li&gt;呼び出し側での小さな無名関数の定義と、より多くのもの。&lt;/li&gt;
&lt;li&gt;作者：Joel de Guzman, Dan Marsden and Thomas Heller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ratio&lt;ul&gt;
&lt;li&gt;コンパイル時有理数ライブラリ。&lt;/li&gt;
&lt;li&gt;作者：Vicente J. Botet Escribá&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#function-types&#34;&gt;Function Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#logic&#34;&gt;Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/multi-index&#34;&gt;MultiIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#range&#34;&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#tokenizer&#34;&gt;Tokenizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#boostbook&#34;&gt;BoostBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな統計アキュムレータを追加 : &lt;code&gt;sum_kahan&lt;/code&gt;, &lt;code&gt;sum_of_weights_kahan&lt;/code&gt;, &lt;code&gt;sum_of_variates_kahan&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シグナルハンドリング。&lt;code&gt;signal_set&lt;/code&gt;クラスを追加。&lt;/li&gt;
&lt;li&gt;非同期プログラムのデバッグ支援。&lt;code&gt;BOOST_ASIO_ENABLE_HANDLER_TRACKING&lt;/code&gt;をdefineすることで利用可能。&lt;/li&gt;
&lt;li&gt;ソケット&lt;code&gt;iostream&lt;/code&gt;に対するタイムアウト。&lt;code&gt;ip::tcp::iostream&lt;/code&gt;で&lt;code&gt;expires_at()&lt;/code&gt;もしくは&lt;code&gt;expires_from_now()&lt;/code&gt;を使用する。&lt;/li&gt;
&lt;li&gt;ソケット&lt;code&gt;iostream&lt;/code&gt;に&lt;code&gt;error()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_deadline_timer::cancel_one()&lt;/code&gt;を追加。この関数は、タイマーに対する待機ハンドラを解除するのに使用できる。ハンドラはFIFO順に解除される。&lt;/li&gt;
&lt;li&gt;完了条件の&lt;code&gt;transfer_exactly()&lt;/code&gt;関数を追加。これは、バッファの合計サイズ(またはバッファのシーケンス)が大きい場合でも、指定されたバイト数を送受信するのに使用することができる。&lt;/li&gt;
&lt;li&gt;接続操作の合成。&lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;async_connect()&lt;/code&gt;フリー関数の追加。これらの操作は、ソケットが正常に接続されるまで、リスト内の各エンドポイントを試みる。IPv4とIPv6の両方で動作するTCPクライアントを作成するために便利。&lt;/li&gt;
&lt;li&gt;個々のバッファに加え、バッファシーケンスを動作するように&lt;code&gt;buffer_size()&lt;/code&gt;関数を拡張。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_copy()&lt;/code&gt;関数を追加。個々のバッファと、バッファシーケンスの間で生のバイトデータをコピーするのに使用できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;read_at()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, &lt;code&gt;write_at()&lt;/code&gt;のno throw版オーバーロードを追加。&lt;/li&gt;
&lt;li&gt;終了ハンドラが必要な型要件を満たさない場合のよりフレンドリーなコンパイルエラーを追加。C++0xの&lt;code&gt;static_assert&lt;/code&gt;が利用可能な環境で自動的にONになる(g++やVC10以降など)。&lt;code&gt;BOOST_ASIO_DISABLE_HANDLER_TYPE_REQUIREMENTS&lt;/code&gt;をdefineすることでこのモードを無効にできる。&lt;/li&gt;
&lt;li&gt;SSL実装の書き直し。新たな実装は、高速コンパイル、パフォーマンスの大幅向上、カスタムメモリアロケートとハンドラの呼び出しをサポートする。証明書検証コールバックなどの新たなAPI関数が含まれていて、エラー報告機能の強化がある。新たな実装は、ほとんどの場合に古いソースに互換性がある。ただし、必要に応じて&lt;code&gt;BOOST_ASIO_ENABLE_OLD_SSL&lt;/code&gt;を定義することで以前の実装を使用する可能性がある(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3702&#34; target=&#34;_blank&#34;&gt;#3702&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3958&#34; target=&#34;_blank&#34;&gt;#3958&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;AsioのSSL機能を使うために、あなたのプログラムにひとつのソースファイル&lt;code&gt;boost/asio/ssl/impl/src.hpp&lt;/code&gt;を含める、というように、分割コンパイルサポートを変更した。&lt;/li&gt;
&lt;li&gt;SSL v2を明示的に無効化できるようにSSL実装を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5453&#34; target=&#34;_blank&#34;&gt;#5453&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_loopback()&lt;/code&gt;, &lt;code&gt;is_unspecified()&lt;/code&gt;, &lt;code&gt;is_multicast()&lt;/code&gt;関数を、&lt;code&gt;ip::address&lt;/code&gt;, &lt;code&gt;ip::address_v4&lt;/code&gt;, &lt;code&gt;ip::address_v6&lt;/code&gt;の全てで使用できるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3939&#34; target=&#34;_blank&#34;&gt;#3939&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ソケットやdescriptorでノンブロッキングの振る舞いを管理するための&lt;code&gt;non_blocking()&lt;/code&gt;関数を追加。&lt;code&gt;non_blocking_io&lt;/code&gt;という名前の&lt;code&gt;io_control&lt;/code&gt;コマンドは、この新たな関数によって非推奨(deprecated)となる。&lt;/li&gt;
&lt;li&gt;ソケットやdescriptorでノンブロッキングモードの基礎的なものをを管理するための、&lt;code&gt;native_non_blocking()&lt;/code&gt;関数を追加。この関数は、ソケットオブジェクトのユーザーに透過的な方法での非同期操作として、任意のノンブロッキングシステムコールのカプセル化を許可するものである。この関数は、ソケットやdescriptorの同期操作の挙動に影響を及ぼす。&lt;/li&gt;
&lt;li&gt;socket acceptorのための&lt;code&gt;io_control()&lt;/code&gt;メンバ関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3297&#34; target=&#34;_blank&#34;&gt;#3297&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;posix descriptorに&lt;code&gt;release()&lt;/code&gt;メンバ関数を追加。この関数は、ネイティブなdescriptorの所有権を解放する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3900&#34; target=&#34;_blank&#34;&gt;#3900&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;sequenced packet sockets(&lt;code&gt;SOCK_SEQPACKET&lt;/code&gt;)のサポートを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;が停止しているかどうかを判定するための&lt;code&gt;io_service::stopped()&lt;/code&gt;関数を追加(&lt;code&gt;reset()&lt;/code&gt;呼び出しは、&lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;run_one()&lt;/code&gt;, &lt;code&gt;poll()&lt;/code&gt;, &lt;code&gt;poll_one()&lt;/code&gt;呼び出しの前に必要になる)。&lt;/li&gt;
&lt;li&gt;C++0x標準ライブラリとの整合性のために、&lt;code&gt;native_type&lt;/code&gt; typedefを非推奨とし、&lt;code&gt;native_handle_type&lt;/code&gt;を推奨とした。また、&lt;code&gt;native()&lt;/code&gt;メンバ関数を非推奨とし、&lt;code&gt;native_handle()&lt;/code&gt;メンバ関数を推奨とした。&lt;/li&gt;
&lt;li&gt;C++0xのmoveに対応。ソケット、シリアルポート、posix descriptor、Windowsハンドルのムーブコンストラクト、ムーブ代入に対応。&lt;/li&gt;
&lt;li&gt;(C++0xのmoveなどにより)ハンドラ関数オブジェクトのコピーを減らした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt;システムコールのサポートを追加。&lt;code&gt;fork()&lt;/code&gt;を使用するプログラムは、&lt;code&gt;io_service.notify_fork()&lt;/code&gt;を適切なタイミングで呼び出す必要がある。この機能の2つのサンプルを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3238&#34; target=&#34;_blank&#34;&gt;#3238&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4162&#34; target=&#34;_blank&#34;&gt;#4162&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;システムコールによって報告されたエラーのクリーンアップ。ほとんどのオペレーティングシステムは、&lt;code&gt;EWOULDBLOCK&lt;/code&gt;によって&lt;code&gt;close()&lt;/code&gt;が失敗するが、それはブロッキングモードを設定して呼び出しを再起動していない場合に起こる。その他のエラーの場合には、descriptorは閉じられると想定する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3307&#34; target=&#34;_blank&#34;&gt;#3307&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio::buffer()&lt;/code&gt;関数に、&lt;code&gt;std::array&lt;/code&gt;のオーバーロードを追加。&lt;/li&gt;
&lt;li&gt;その実装がBoostと同等以上である場合に、C++0x標準ライブラリの&lt;code&gt;array&lt;/code&gt;, &lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;atomic&lt;/code&gt;を使用するよう内部実装を修正。&lt;/li&gt;
&lt;li&gt;C++0x可変引数テンプレートが利用可能である場合に、Boost.Preprocessorによるオーバーロードの代わりにそちらの実装を使用するようにした。&lt;/li&gt;
&lt;li&gt;例外の&lt;code&gt;what()&lt;/code&gt;メンバ関数で返されるメッセージに、関数名を含めるようにした。&lt;/li&gt;
&lt;li&gt;MinGWでの未初期化変数警告を修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown_service()&lt;/code&gt;メンバ関数を&lt;code&gt;private&lt;/code&gt;にした。&lt;/li&gt;
&lt;li&gt;ソケットオプション関数のテストを追加。&lt;/li&gt;
&lt;li&gt;Boost.Asioの例でBoost.Threadを使用しないようにした。&lt;/li&gt;
&lt;li&gt;IPv4とIPv6のための、OSが提供するマクロへの依存をやめた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3741&#34; target=&#34;_blank&#34;&gt;#3741&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_endpoint&amp;lt;&amp;gt;&lt;/code&gt;(と同じく&lt;code&gt;ip::tcp::endpointとip::udp::endpoint&lt;/code&gt;も)のサイズを小さくした。&lt;/li&gt;
&lt;li&gt;任意のソケットやdescriptorが、&lt;code&gt;dup()&lt;/code&gt;を持っている場合に&lt;code&gt;assign()&lt;/code&gt;を使用するようリアクターのバックエンドを変更し、リアクターの明示的な要件から削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4971&#34; target=&#34;_blank&#34;&gt;#4971&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;非推奨だったメンバ関数&lt;code&gt;io_service()&lt;/code&gt;を削除した。&lt;code&gt;get_io_service()&lt;/code&gt;を使用するべきである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::tcp&lt;/code&gt;, &lt;code&gt;ip::udp&lt;/code&gt;, &lt;code&gt;ip::icmp&lt;/code&gt;クラスから、非推奨だったtypedefである&lt;code&gt;resolver_query&lt;/code&gt;, &lt;code&gt;resolver_iterator&lt;/code&gt;を削除した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffers_iterator&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;ip::basic_resolver_iterator&lt;/code&gt;の&lt;code&gt;value_type&lt;/code&gt;を非&lt;code&gt;const&lt;/code&gt; &lt;code&gt;byte&lt;/code&gt;型に修正。&lt;/li&gt;
&lt;li&gt;g++の-Wshadowコンパイルオプションによる警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3905&#34; target=&#34;_blank&#34;&gt;#3905&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;一部の環境でのコンパイラ警告を抑制するために、&lt;code&gt;FIONBIO&lt;/code&gt;定数を&lt;code&gt;int&lt;/code&gt;に明示的にキャストするようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5128&#34; target=&#34;_blank&#34;&gt;#5128&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;acceptorの例で、エラーを許容するように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5124&#34; target=&#34;_blank&#34;&gt;#5124&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tick_count_timer&lt;/code&gt;の例での間違いを修正。&lt;code&gt;signed&lt;/code&gt;な&lt;code&gt;duration&lt;/code&gt;を作るようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5418&#34; target=&#34;_blank&#34;&gt;#5418&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マクロの名称変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1988&#34; target=&#34;_blank&#34;&gt;#1988&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_THREADEX&lt;/code&gt; -&amp;gt; &lt;code&gt;BOOST_HAS_THREADEX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_GETSYSTEMTIMEASFILETIME&lt;/code&gt; -&amp;gt; &lt;code&gt;BOOST_HAS_GETSYSTEMTIMEASFILETIME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;サンプルの間違いを修正。typoなど(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4920&#34; target=&#34;_blank&#34;&gt;#4920&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ドキュメントにあるサンプルの変数名、関数名などの間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3651&#34; target=&#34;_blank&#34;&gt;#3651&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;サンプルの間違いを修正。&lt;code&gt;end_of_month_day()&lt;/code&gt; -&amp;gt; &lt;code&gt;end_of_month()&lt;/code&gt;(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4845&#34; target=&#34;_blank&#34;&gt;#4845&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;OpenVMSの64ビットプラットフォームサポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4475&#34; target=&#34;_blank&#34;&gt;#4475&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC 4.3での&lt;code&gt;time_facet&lt;/code&gt;の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4952&#34; target=&#34;_blank&#34;&gt;#4952&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_serialize&lt;/code&gt;で、依存名に対して&lt;code&gt;typename&lt;/code&gt;が付いていなかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5345&#34; target=&#34;_blank&#34;&gt;#5345&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;clangでの、二重カッコによる警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5250&#34; target=&#34;_blank&#34;&gt;#5250&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;valgrindプラットフォームでの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4798&#34; target=&#34;_blank&#34;&gt;#4798&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;オーストラリアでの、夏時間の開始と終了が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4754&#34; target=&#34;_blank&#34;&gt;#4754&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Australia/Euclaのタイムゾーンデータベースが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4411&#34; target=&#34;_blank&#34;&gt;#4411&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;SCCキーワードのエスケープに関するバグ修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5126&#34; target=&#34;_blank&#34;&gt;#5126&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;タイムゾーンデータベースの、ファイルからの読み込みをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2475&#34; target=&#34;_blank&#34;&gt;#2475&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;グローバルロケールを使用した場合に、&lt;code&gt;ymd_formatter&lt;/code&gt;で年が&lt;code&gt;2,008&lt;/code&gt;のようにフォーマットされる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1674&#34; target=&#34;_blank&#34;&gt;#1674&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#dynamic-bitset&#34; name=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCで&lt;code&gt;-Wshadow&lt;/code&gt;コンパイラオプションを付けた際に出る警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5439&#34; target=&#34;_blank&#34;&gt;#5439&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCで&lt;code&gt;-Wold-style-cast&lt;/code&gt;コンパイラオプションを付けた際に出る警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3410&#34; target=&#34;_blank&#34;&gt;#3410&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MSVCでの未使用変数警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3618&#34; target=&#34;_blank&#34;&gt;#3618&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Visual Age C++の古いバージョンのためのworkaroundに、新しいバージョン(&lt;code&gt;__IBMCPP__ &amp;gt;= 800&lt;/code&gt;)が適用されないよう修正。新しいバージョンでは、&lt;code&gt;boost::function&lt;/code&gt;の引数が11個以上使用できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3912&#34; target=&#34;_blank&#34;&gt;#3912&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;VC10で、&lt;code&gt;function&lt;/code&gt;内部で&lt;code&gt;boost::mem_fn&lt;/code&gt;が呼ばれるべきところを、ADLによって&lt;code&gt;std::mem_fn&lt;/code&gt;が探索されコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4073&#34; target=&#34;_blank&#34;&gt;#4073&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::function&lt;/code&gt;に、関数の参照を持たせるために&lt;code&gt;boost::ref&lt;/code&gt;でラップして渡すとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4325&#34; target=&#34;_blank&#34;&gt;#4325&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::function&lt;/code&gt;内部の&lt;code&gt;stored_vtable&lt;/code&gt;が非&lt;code&gt;const&lt;/code&gt;のために書き込み可能メモリに配置されてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4717&#34; target=&#34;_blank&#34;&gt;#4717&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;関数呼び出し演算子で、&lt;code&gt;inline&lt;/code&gt;キーワードの書く場所を間違えていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4765&#34; target=&#34;_blank&#34;&gt;#4765&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++0xムーブセマンティクスに対応。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#function-types&#34; name=&#34;function-types&#34;&gt;Function Types&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;デフォルトビルドにおいてプリプロセス済みの &lt;code&gt;function_types&lt;/code&gt; ヘッダを作成しようとし、waveの実行ファイルが要求される問題をデフォルトビルド対象外とすることで修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1653&#34; target=&#34;_blank&#34;&gt;#1653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_types&lt;/code&gt;/&lt;code&gt;components&lt;/code&gt; のtypoを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3162&#34; target=&#34;_blank&#34;&gt;#3162&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;非推奨な関数であった&lt;code&gt;kolmogorov_max_flow&lt;/code&gt;を削除した。以降は&lt;code&gt;boykov_kolmogorov_max_flow&lt;/code&gt;を使う。&lt;/li&gt;
&lt;li&gt;Boost.Type_Traitsに同等の機能があるため&lt;code&gt;&amp;lt;boost/graph/detail/is_same.hpp&amp;gt;&lt;/code&gt;ヘッダを削除した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#iostreams&#34; name=&#34;iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Filesystem V3の&lt;code&gt;path&lt;/code&gt;をサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4485&#34; target=&#34;_blank&#34;&gt;#4485&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chain&lt;/code&gt;でのメモリリークを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4922&#34; target=&#34;_blank&#34;&gt;#4492&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function_input_iterator&lt;/code&gt;追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2893&#34; target=&#34;_blank&#34;&gt;#2893&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform_iterator&lt;/code&gt;の戻り型の推論に&lt;code&gt;boost::result_of&lt;/code&gt;を使うよう修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1427&#34; target=&#34;_blank&#34;&gt;#1427&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip_iterator&lt;/code&gt;が&lt;code&gt;BidirectionalInputIterator&lt;/code&gt;を&lt;code&gt;zip&lt;/code&gt;できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1517&#34; target=&#34;_blank&#34;&gt;#1517&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/iterator.hpp&lt;/code&gt;のコメントのtypoを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3434&#34; target=&#34;_blank&#34;&gt;#3434&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lexical Cast&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;と&lt;code&gt;Target&lt;/code&gt;型の特殊化を追加し、パフォーマンスとメモリ効率を改善した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;signed char&lt;/code&gt;と&lt;code&gt;unsigned char&lt;/code&gt;の特殊化 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5564&#34; target=&#34;_blank&#34;&gt;#5564&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;整数型 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5417&#34; target=&#34;_blank&#34;&gt;#5417&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;と&lt;code&gt;Target&lt;/code&gt;が同じ型の場合 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4397&#34; target=&#34;_blank&#34;&gt;#4397&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;から&lt;code&gt;Target&lt;/code&gt;を直接コンストラクト可能な場合 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5350&#34; target=&#34;_blank&#34;&gt;#5350&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;整数型のグルーピングが0の場合 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5576&#34; target=&#34;_blank&#34;&gt;#5576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント更新&lt;ul&gt;
&lt;li&gt;パフォーマンスセクションの追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5576&#34; target=&#34;_blank&#34;&gt;#5576&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;FAQに&lt;code&gt;lexical_cast&amp;lt;unsigned int&amp;gt;(&#34;-1&#34;)&lt;/code&gt;が例外を送出する件について追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5494&#34; target=&#34;_blank&#34;&gt;#5494&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#logic&#34; name=&#34;logic&#34;&gt;Logic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logic/tribool&lt;/code&gt;のGCC Shadow errorを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3093&#34; target=&#34;_blank&#34;&gt;#3093&lt;/a&gt;)   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_TRIBOOL_THIRD_STATE&lt;/code&gt;の未使用変数警告を抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3600&#34; target=&#34;_blank&#34;&gt;#3600&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nonfinite facetを容易に追加するために、&lt;code&gt;changesign&lt;/code&gt;関数を&lt;code&gt;sign.hpp&lt;/code&gt;に追加した&lt;/li&gt;
&lt;li&gt;Johan Rade氏によるnonfinite facetと、そのテスト、C99形式の無限大と&lt;code&gt;NaN&lt;/code&gt;での利用例、およびドキュメントの追加&lt;/li&gt;
&lt;li&gt;Johan Rade氏による&lt;code&gt;changesign&lt;/code&gt;のテストとドキュメントの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バックエンドに&lt;code&gt;stop()&lt;/code&gt;メソッドを追加&lt;/li&gt;
&lt;li&gt;Boost.Phoenix ファンクタのeUML表現を部分的にサポートした&lt;/li&gt;
&lt;li&gt;ステートスイッチングが発生した際に選択する可能性を考慮&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5117&#34; target=&#34;_blank&#34;&gt;#5117&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5253&#34; target=&#34;_blank&#34;&gt;#5253&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5533&#34; target=&#34;_blank&#34;&gt;#5533&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5573&#34; target=&#34;_blank&#34;&gt;#5573&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;gccで未使用変数の警告がでる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;favor_compile_time&lt;/code&gt; バックエンドポリシーをさらに統合した&lt;/li&gt;
&lt;li&gt;ステート構築とeUMLのバグを修正&lt;/li&gt;
&lt;li&gt;eUML イヴェントとステートマクロの誤りを修正&lt;/li&gt;
&lt;li&gt;直接入力のステートの&lt;code&gt;on_entry&lt;/code&gt;アクションに間違ったイヴェントタイプが渡される問題を修正&lt;/li&gt;
&lt;li&gt;コードサンプルを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;MultiIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Refに関連する&lt;code&gt;composite_key_compare&lt;/code&gt;のADL問題を修正した&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新たな標準(C++0x)に同期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多くの分布を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fisher_f_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;student_t_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weibull_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extreme_value_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discrete_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;piecewise_constant_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;piecewise_liear_distribution&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;名称変更：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uniform_int&lt;/code&gt; → &lt;code&gt;uniform_int_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_real&lt;/code&gt; → &lt;code&gt;uniform_real_distribution&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全ての分布クラスに以下のメンバを追加：&lt;code&gt;param_type&lt;/code&gt;, &lt;code&gt;param&lt;/code&gt;, ストリーム演算子, 比較演算子, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分布クラスを、&lt;code&gt;variate_generator&lt;/code&gt;を通さずに直接ジェネレータを使用できるようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;と&lt;code&gt;lognormal_distribution&lt;/code&gt;のパラメータの意味を変えた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;に第2パラメータを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seed_seq&lt;/code&gt;を追加し、対応するコンストラクタと&lt;code&gt;seed&lt;/code&gt;オーバーロードジェネレータを追加。- &lt;code&gt;generate_canonical&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;エンジンテンプレートの名称変更。たとえば、&lt;code&gt;mersenne_twister&lt;/code&gt;は&lt;code&gt;mersenne_twister_engine&lt;/code&gt;となる。&lt;/li&gt;
&lt;li&gt;新たなエンジンアダプタ&lt;code&gt;independent_bits_engine&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;新たな事前定義&lt;code&gt;typedef&lt;/code&gt;を追加：&lt;code&gt;mt19937_64&lt;/code&gt;, &lt;code&gt;ranlux[24|48][_base]&lt;/code&gt;, &lt;code&gt;knuth_b&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;シードアルゴリズムを更新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;discard&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;全ての定義済みエンジンで、符合あり型の代わりに符号なし型を使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全てのケースで剰余演算が実装されていなかったので、&lt;code&gt;linear_congruential_engine&lt;/code&gt;が&lt;code&gt;assert&lt;/code&gt;する可能性があった。&lt;code&gt;shuffle_output&lt;/code&gt;は整数オーバーフローを起こす可能性があったため、今は&lt;code&gt;shuffle_order_engine&lt;/code&gt;を呼ぶようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_small_int&lt;/code&gt;は現在、ドキュメント通りに動作する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;その他変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;と&lt;code&gt;poisson_distribution&lt;/code&gt;のための新たな効率的なアルゴリズム。&lt;/li&gt;
&lt;li&gt;全ての機能を&lt;code&gt;boost::random&lt;/code&gt;名前空間に移動。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;下位互換性の問題&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シードアルゴリズムが変更した。これは標準との互換性のために避けられなかった。既存のいくつかのアルゴリズムに矛盾があったことは言うまでもない。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;によるシード：&lt;code&gt;lagged_fibonacci&lt;/code&gt;と&lt;code&gt;subtract_with_carry&lt;/code&gt;(つまり&lt;code&gt;ranlux&lt;/code&gt;)を除くほとんどのジェネレータを変更する必要がある。&lt;/li&gt;
&lt;li&gt;別のジェネレータとジェネレータのシード：これは全てのジェネレータモデル&lt;code&gt;SeedSeq&lt;/code&gt;を作ることで有効になっている。したがって、非Boost.RandomジェネレータでBoost.Randomジェネレータのシードを使用した場合、それはコンパイルに成功しない。アルゴリズムが変更されたため、このシード処理のメソッドを使用したコードが異なる値を生成する。&lt;/li&gt;
&lt;li&gt;イテレータの組からシードを生成する：全てではないがいくつかの場所で、暗黙的に要素が32ビット整数であることを仮定する。この要件を追加し、それに応じてアルゴリズムを更新した。ジェネレータの&lt;code&gt;value_type&lt;/code&gt;が32ビット以上の場合には、動作を変更する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;名称変更&lt;ul&gt;
&lt;li&gt;クラス名が変更されたものには、古い名前によるラッパーを用意した。また、名前空間が移動された全てのもののために、&lt;code&gt;boost&lt;/code&gt;名前空間での&lt;code&gt;using&lt;/code&gt;宣言を行うようにした。&lt;/li&gt;
&lt;li&gt;分布クラスのいくつかのアクセッサ名が変更された。古いものと新しいもの両方を使用できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;と&lt;code&gt;lognormal_distribution&lt;/code&gt;：実行時に異なる動作をするようになった。これまでの動作をする&lt;code&gt;boost::geometric_distribution&lt;/code&gt;と&lt;code&gt;boost::lognormal_distribution&lt;/code&gt;、新たな動作をする&lt;code&gt;boost::random::geometric_distribution&lt;/code&gt;と&lt;code&gt;boost::random::lognormal_distribution&lt;/code&gt;を提供する。&lt;/li&gt;
&lt;li&gt;ストリーミング：&lt;code&gt;gamma_distribution&lt;/code&gt;は新たなパラメータを持っているため、古いバージョンでストリーム演算子を使用して出力されたテキストを新しいバージョンで読み込むことはできない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;variate_generator&lt;/code&gt;は現在、単なるラッパーである。ジェネレータの結果が分布の結果型と一致することを期待しているコードは動作しなくなる。これはBoost.Randomが提供する分布の問題ではない。&lt;/li&gt;
&lt;li&gt;戻り値の型：いくつかのジェネレータの&lt;code&gt;result_type&lt;/code&gt;を変更した。標準に合わせて、いくつかの符号あり型は符号なし型に変更された。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_fixed_range&lt;/code&gt;：これは常に&lt;code&gt;false&lt;/code&gt;を返し、非常に有用ではあるが過度に複雑だった。最初に&lt;code&gt;has_fixed_range&lt;/code&gt;をチェックせずに&lt;code&gt;const_min&lt;/code&gt;, &lt;code&gt;const_max&lt;/code&gt;を使用していたのがはじめから間違いだった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイルタイム改善のためにプリプロセス済みのマクロ(Pre-preprocessed)を用意した&lt;/li&gt;
&lt;li&gt;デフォルトのプリプロセッサ制限を引き上げた&lt;ul&gt;
&lt;li&gt;式の引数の数(&lt;code&gt;BOOST_PROTO_MAX_ARITY&lt;/code&gt;)を5から10に増やした&lt;/li&gt;
&lt;li&gt;関数呼び出しの引数の数(&lt;code&gt;BOOST_PROTO_MAX_FUNCTION_CALL_ARITY&lt;/code&gt;)を5から10に増やした&lt;/li&gt;
&lt;li&gt;論理演算子の引数の数(&lt;code&gt;BOOST_PROTO_MAX_LOGICAL_ARITY&lt;/code&gt;)を8から10に増やした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要な&lt;code&gt;proto::expr&lt;/code&gt;のインスタンス化を避けるために&lt;code&gt;proto::basic_expr&lt;/code&gt;をさらに統合した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#range&#34; name=&#34;range&#34;&gt;Range&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;irange&lt;/code&gt;で、&lt;code&gt;step&lt;/code&gt;が2以上のときの終端の計算が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5544&#34; target=&#34;_blank&#34;&gt;#5544&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spirit V2.5&lt;/p&gt;
&lt;p&gt;Boost 1.47.0でリリースされるBoost.Phoenix V3に対応した。&lt;/p&gt;
&lt;p&gt;これによってユーザーコードに影響を与えることはない。&lt;/p&gt;
&lt;p&gt;Boost.Phoenix V3を有効にするには、Spiritのヘッダをインクルードする前に以下のプリプロセッサ定数を定義する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define BOOST_SPIRIT_USE_PHOENIX_V3 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;Qi or Karmaの新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックで、階層的で、抽象構文木を表すことができる動的なデータ構造であるutreeを追加。これはSpirit.QiとSpirit.Karmaに統合される。これはほぼすべての構文を解析の属性として渡すことができる。同時に、その属性を使用して出力を生成できる。&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;BOOST_SPIRIT_TERMINAL_NAME&lt;/code&gt;は、2つのパラメータをとる(ターミナルの名前と型)。ターミナルの名前のみを引数にとる&lt;code&gt;BOOST_SPIRIT_TERMINAL&lt;/code&gt;マクロもあり、これは「ターミナル名 + &lt;code&gt;_type&lt;/code&gt;」という型名を生成する。&lt;code&gt;int_&lt;/code&gt;のような名前の場合には&lt;code&gt;int__type&lt;/code&gt;のような、C++言語でシステムに予約されているダブルアンダーバーを含む型が生成されるので注意。&lt;/li&gt;
&lt;li&gt;数値パーサーで2..10と16の基数を許可。&lt;/li&gt;
&lt;li&gt;プレースホルダー &lt;code&gt;_val&lt;/code&gt; が、トップレベルセマンティックルールの右辺で使用できるようになった。以下がその例である：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
BOOST_TEST(test_attr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;456&#34;&lt;/span&gt;, int_[_val &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _1], i) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;456&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

この場合、&lt;code&gt;parse()&lt;/code&gt; または &lt;code&gt;phrase_parse()&lt;/code&gt; 関数に渡された属性の値 &lt;code&gt;_val&lt;/code&gt; を指す。これはSpirit.Karmaでも同様に可能となる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;123&lt;/span&gt;;
BOOST_TEST(test(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;, int_[_1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; _val], i));
&lt;/pre&gt;&lt;/div&gt;

この変更により&lt;code&gt;_val&lt;/code&gt;プレースホルダーがどこでも使えるようになり、セマンティックアクションのルールが統一される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Karmaに、2..36基数のunsigned numericジェネレータのサポートを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Qi or Karmaのバグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int_(10)&lt;/code&gt;のような整数リテラルのパース失敗時に入力を消費してしまう問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap_file_iterator&lt;/code&gt;の初期化に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5246&#34; target=&#34;_blank&#34;&gt;#5246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;karma::real_policies&lt;/code&gt;で&lt;code&gt;const&lt;/code&gt;浮動小数点数を使用する際の&lt;code&gt;const&lt;/code&gt; correctness問題を修正。パッチとテストを送付してくれたJeroen Habraken(a.k.a VeXocide)に感謝する。&lt;/li&gt;
&lt;li&gt;Spirit.Qi &lt;code&gt;attr(attrib)&lt;/code&gt;パーサー, Spirit.Qi &lt;code&gt;symbols&amp;lt;&amp;gt;&lt;/code&gt;パーサー, Spirit.Karma &lt;code&gt;symbols&amp;lt;&amp;gt;&lt;/code&gt;ジェネレータでのコンテナ属性のプロパティハンドルを修正。これはBoost V1.46.1で壊れていた(この問題を報告してくれたAaron Graham, Joerg Beckerに感謝する)。&lt;/li&gt;
&lt;li&gt;streamパーサーコンポーネントが成功したときに、もとになる入力ストリームのイテレータを正しく調整するようstream パーサーを修正。Stackoverflowで問題を報告してくれたBrian O’Kennedyに感謝する。&lt;/li&gt;
&lt;li&gt;アダプトされたADTを使用するときにKarma数値ジェネレータが失敗する問題を修正(問題を報告してくれたColin Rundelに感謝する)。
破壊的変更&lt;/li&gt;
&lt;li&gt;Spirit.Qi &lt;code&gt;repeat&lt;/code&gt;ディレクティブが失敗した場合に値を残し、その属性のコミット／ロールバックのセマンティクスを実装した。同様のコンポーネントが矛盾している動作を削除した。この機能に依存する既存のコードは破壊される。コードを修正する方法は、Spirit.Qi &lt;code&gt;hold&lt;/code&gt; ディレクティブを参照。&lt;/li&gt;
&lt;li&gt;コンパイル時間を大きく低下させていた定義済みターミナルのインスタンス化を防ぐために、&lt;code&gt;BOOST_SPIRIT_NO_PREDEFINED_TERMINALS&lt;/code&gt;プリプロセッサマクロを追加した。&lt;code&gt;BOOST_SPIRIT_NO_PREDEFINED_TERMINALS&lt;/code&gt; が定義されている場合は、ユーザーは必要なターミナルをインスタンス化する。したがって、&lt;code&gt;using qi::uint_&lt;/code&gt;の代わりに&lt;code&gt;qi::uint_type uint_&lt;/code&gt;のように書く。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lexの新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lex::char_&lt;/code&gt;と&lt;code&gt;lex::string&lt;/code&gt;を使用して、トークンの定義を作成中にトークンの&lt;code&gt;id&lt;/code&gt;を指定することを可能にした。両方のプリミティブはこの定義から生成されたトークンの要求されたトークンIDとして解釈され、2番目のパラメータを受け付けるようになった。&lt;/li&gt;
&lt;li&gt;新たなトークン型&lt;code&gt;lex::lexertl::position_token&amp;lt;&amp;gt;&lt;/code&gt;を追加。これは本質的には、既存の&lt;code&gt;lex::lexertl::token&amp;lt;&amp;gt;&lt;/code&gt;によるプラグイン互換である。基になる入力シーケンスとして、&lt;code&gt;iterator_range&lt;/code&gt;を指すイテレータのペアを格納する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lexのバグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクションに添付されたトークン定義のすべての状態(状態名 &lt;code&gt;&#34;*&#34;&lt;/code&gt; を使用する)を関連付けて問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Making Stuff Work&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性がコンテナの場合(&lt;code&gt;traits::is_container&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す属性)に、古いカスタマイズポイント&lt;code&gt;traits::extract_from&lt;/code&gt;の代わりに呼び出される、Spirit.Karmaカスタマイズポイント&lt;code&gt;traits::extract_from_container&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hold_any&lt;/code&gt;型がテンプレート引数をとるようにした：&lt;code&gt;basic_hold_any&amp;lt;Char&amp;gt;&lt;/code&gt;。&lt;code&gt;Char&lt;/code&gt;は、ストリーム演算子(&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;と&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;)で使用される。&lt;code&gt;hold_any&lt;/code&gt;は、&lt;code&gt;typedef basic_hold_any&amp;lt;char&amp;gt; hold_any&lt;/code&gt;と定義される。&lt;/li&gt;
&lt;li&gt;セマンティックアクションで属性の互換性がサポートされた。これは破壊的な変更だが、&lt;code&gt;#define BOOST_SPIRIT_ACTIONS_ALLOW_ATTR_COMPAT&lt;/code&gt;で新しい動作を定義する必要がある。規定ではこれまでの動作である。&lt;/li&gt;
&lt;li&gt;属性互換性の選択肢をサポート。&lt;/li&gt;
&lt;li&gt;シーケンス&amp;amp;コンテナコンポーネント(list, Kleene, Plus, repeat)のコンテナ属性のための属性ハンドリングが書き直された。これによって多くの場合に予測可能な動作をするようになった。Thomas Taylor, Richard Crossley, Semen, Adalberto Casteloそして問題を報告し、支援してくれた方々に感謝する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#tokenizer&#34; name=&#34;tokenizer&#34;&gt;Tokenizer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio で&lt;code&gt;/W4&lt;/code&gt;にてビルドすると、warning C4127(条件文が定数)がでる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4649&#34; target=&#34;_blank&#34;&gt;#4699&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2010でwarning number 4284がなくなったことによるwarningの抑制(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4432&#34; target=&#34;_blank&#34;&gt;#4432&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例外を無効にした場合に&lt;code&gt;string_generator.hpp&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5570&#34; target=&#34;_blank&#34;&gt;#5570&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;VC8での暗黙の型変換警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4601&#34; target=&#34;_blank&#34;&gt;#4601&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GHSコンパイラ(Green Hills Compiler)でこのライブラリが動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4991&#34; target=&#34;_blank&#34;&gt;#4991&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;論理演算子周りの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5145&#34; target=&#34;_blank&#34;&gt;#5145&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;uuidのテストに、まだリリースされていない&lt;code&gt;lightweight_test_ex.hpp&lt;/code&gt;を使用していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5235&#34; target=&#34;_blank&#34;&gt;#5235&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#pragma wave option()&lt;/code&gt; のプリプロセス後、連続した文字列リテラルを一つにまとめるようにした。&lt;/li&gt;
&lt;li&gt;空白文字のハンドリングを修正し、そのテストを追加 (&lt;code&gt;t_9_020.cpp&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;新しいプリプロセスフック &lt;code&gt;locate_include_file&lt;/code&gt; を追加。インクルードするファイルの決定方法をカスタマイズできる。&lt;/li&gt;
&lt;li&gt;Wave コマンドに新しいオプション &lt;code&gt;--noexpand&lt;/code&gt;/&lt;code&gt;-N&lt;/code&gt; を追加。指定した名前のマクロ（オブジェクト形式でも関数形式でもOK）の展開を抑制できる。このオプションは、出力結果中のマクロ全部が実行されないだけでなく、Wave自身からもその存在が消されるので、よく考えて使うべきである。もし展開を抑制されたマクロがあとでどこかの &lt;code&gt;#ifdef&lt;/code&gt; に影響がある場合、予期しない結果を引き起こす可能性がある。&lt;/li&gt;
&lt;li&gt;Wave コマンドの対話モードで、定義された全マクロをコマンドラインに出すのを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5554&#34; target=&#34;_blank&#34;&gt;#5554&lt;/a&gt; の修正 (wave slex parser が &lt;code&gt;eol&lt;/code&gt; の前に &lt;code&gt;eof&lt;/code&gt; を見つけると最終行を処理しない問題)。&lt;/li&gt;
&lt;li&gt;コンパイル時のオプション設定に、&lt;code&gt;BOOST_WAVE_WCHAR_T_SIGNEDNESS&lt;/code&gt; を追加。これには &lt;code&gt;BOOST_WAVE_WCHAR_T_AUTOSELECT&lt;/code&gt;, &lt;code&gt;BOOST_WAVE_WCHAR_T_FORCE_SIGNED&lt;/code&gt;, または &lt;code&gt;BOOST_WAVE_WCHAR_T_FORCE_UNSIGNED&lt;/code&gt; を指定できる。デフォルトは auto select.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#pragma&lt;/code&gt; のオプション (output) を付けて実行した Wave コマンドがすぐに終了した場合、上書きせずに追記してしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5569&#34; target=&#34;_blank&#34;&gt;#5569&lt;/a&gt; を修正 (slex の CONTLINE が LF で改行するファイルでしか動かない)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#boostbook&#34; name=&#34;boostbook&#34;&gt;BoostBook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;doxygenタグをハンドル : &lt;code&gt;\see&lt;/code&gt;, &lt;code&gt;tparam&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt; (クラスのみ)&lt;/li&gt;
&lt;li&gt;クラスと関数のメモをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_47_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;見出しの一貫性あるID生成&lt;/li&gt;
&lt;li&gt;WindowsでのUnicodeサポートを改善&lt;/li&gt;
&lt;li&gt;移植性のないWindowsのパスで警告を出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[br]&lt;/code&gt;の非推奨を取りやめ&lt;/li&gt;
&lt;li&gt;copyright属性で、日付の範囲と、カンマ区切りされた節をサポート&lt;/li&gt;
&lt;li&gt;簡単なマークアップ(例えば&lt;strong&gt;bold&lt;/strong&gt;)のために、区切り文字のチェック機能を改善&lt;/li&gt;
&lt;li&gt;コードスニペット内でのコメントをそのまま使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FILENAME__&lt;/code&gt;マクロが相対パスを生成するようにした&lt;/li&gt;
&lt;li&gt;コード内でエスケープによる強調表示を許可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要テストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM Clang 2.8&lt;/li&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.1, 4.4.3, 4.4.5, 4.5.1, 4.5.2, 4.6.0, 4.6.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;li&gt;Intel 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apple Clang 2.1&lt;/li&gt;
&lt;li&gt;Intel 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 7.1, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 64 bit&lt;/li&gt;
&lt;li&gt;QNX:- QCC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clang from subversion, with GNU libstdc++.&lt;/li&gt;
&lt;li&gt;LLVM Clang 2.8&lt;/li&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.1, 4.5.2, 4.6.0, 4.6.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.2&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;PathScale: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clang from subversion, with GNU libstdc++.&lt;/li&gt;
&lt;li&gt;Intel 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 7.1, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode, mingw: 4.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AIX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zakkas783, digitalghost, yak_ex&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.48.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_48_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_48_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.48.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_48_0.qbk&#34; target=&#34;_blank&#34;&gt;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_48_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Container&lt;ul&gt;
&lt;li&gt;標準ライブラリコンテナとその拡張。&lt;/li&gt;
&lt;li&gt;作者：Ion Gaztañaga&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Locale&lt;ul&gt;
&lt;li&gt;ローカライズとUnicodeハンドリングのためのツール。&lt;/li&gt;
&lt;li&gt;作者：Artyom Beilis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move&lt;ul&gt;
&lt;li&gt;C++03/C++11のための汎用的なムーブセマンティクスの実装。&lt;/li&gt;
&lt;li&gt;作者：Ion Gaztañaga&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#accumulators&#34;&gt;Accumulators(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#numeric-conversion&#34;&gt;Numeric Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(+)が付いているものは本家のリリースノートには記載されていない変更。&lt;/p&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator_set&lt;/code&gt;の要素型が&lt;code&gt;std::numeric_limits&lt;/code&gt;で特殊化されていない場合、&lt;code&gt;min&lt;/code&gt;の結果が不正な値になっていた。&lt;code&gt;std::numeric_limits&lt;/code&gt;の特殊化をコンパイル時にチェックするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5491&#34; target=&#34;_blank&#34;&gt;#5491&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;様々なパフォーマンス向上を実装：&lt;ul&gt;
&lt;li&gt;スレッドローカルな操作のキューを使用することにより、シングルスレッドで使う際(つまり&lt;code&gt;concurrency_hint&lt;/code&gt;が&lt;code&gt;1&lt;/code&gt;のとき)のロック／アンロックのペアを排除。&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;epoll_reactor&lt;/code&gt;で、投機的(speculative)な操作についてロックを保持することなく実行できるようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_reactor&lt;/code&gt;のI/O操作をハンドラを実行する前に行うことにより、参照の局所性を向上。また、CPU間のスケーラビリティが向上。&lt;/li&gt;
&lt;li&gt;非同期の読み書き操作を、配列(&lt;code&gt;boost::array&lt;/code&gt; or &lt;code&gt;std::array&lt;/code&gt;)で特殊化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read_until&lt;/code&gt;の&lt;code&gt;regex&lt;/code&gt;オーバーロードのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5688&#34; target=&#34;_blank&#34;&gt;#5688&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;グローバル名前空間の&lt;code&gt;signal()&lt;/code&gt;を明示的に呼び出すことにより、Windows固有のコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5722&#34; target=&#34;_blank&#34;&gt;#5722&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;タイマーヒープが空の場合に、クロックを読みにいかないよう&lt;code&gt;deadline_timer&lt;/code&gt;を修正。&lt;/li&gt;
&lt;li&gt;完全なTLSレコードを保持するために、SSLのバッファサイズを十分に持つよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5854&#34; target=&#34;_blank&#34;&gt;#5854&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ユーザーのノンブロッキング設定に従うよう&lt;code&gt;null_buffer&lt;/code&gt;を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5756&#34; target=&#34;_blank&#34;&gt;#5756&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Windows上で、&lt;code&gt;fd_set&lt;/code&gt;のサイズを実行時に設定するよう修正。&lt;/li&gt;
&lt;li&gt;関数型(function type)の&lt;code&gt;const&lt;/code&gt;修飾で出ていたMSVCの警告を無効化。&lt;/li&gt;
&lt;li&gt;Intel C++ Compilerで発生するクラッシュを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5763&#34; target=&#34;_blank&#34;&gt;#5763&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;全ての利用可能なアルゴリズムをサポートするために、OpenSSLを初期化。&lt;/li&gt;
&lt;li&gt;セッションをシャットダウンする際のSSLエラーマッピングを修正。&lt;/li&gt;
&lt;li&gt;いくつかのレイテンシーテストプログラムを追加。&lt;/li&gt;
&lt;li&gt;バッファがいっぱいになった際に、読み書き操作が終了することを明らかにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5999&#34; target=&#34;_blank&#34;&gt;#5999&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_reactor&lt;/code&gt;の初期化での例外安全性の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6006&#34; target=&#34;_blank&#34;&gt;#6006&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand&lt;/code&gt;の実装数を、&lt;code&gt;BOOST_ASIO_STRAND_IMPLEMENTATIONS&lt;/code&gt;マクロで設定可能にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand&lt;/code&gt;のアロケーションにround-robinアプローチを使用できるようにするために&lt;code&gt;BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION&lt;/code&gt;フラグを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand.post()&lt;/code&gt;を使用する可能性のある飢餓問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丸め演算ユーティリティを追加。作者：Howard Hinnant。(「&lt;a href=&#34;http://home.roadrunner.com/%7Ehinnant/duration_io/chrono_util.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt; utilities&lt;/a&gt;」,  &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5979&#34; target=&#34;_blank&#34;&gt;#5979&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_clock&lt;/code&gt;が使用可能かを調べる&lt;code&gt;BOOST_CHRONO_HAS_PROCESS_CLOCKS&lt;/code&gt;を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5978&#34; target=&#34;_blank&#34;&gt;#5978&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;高水準なエラーハンドリングを無効にすることを可能にした。&lt;code&gt;BOOST_CHRONO_DONT_PROVIDE_HYBRID_ERROR_HANDLING&lt;/code&gt;をdefineすると無効になる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5998&#34; target=&#34;_blank&#34;&gt;#5998&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;標準C++11に合わせて、&lt;code&gt;duration&lt;/code&gt;と&lt;code&gt;time_point&lt;/code&gt;のいくつかの関数に&lt;code&gt;constexpr&lt;/code&gt;を設定(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5906&#34; target=&#34;_blank&#34;&gt;#5906&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;に対応(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5907&#34; target=&#34;_blank&#34;&gt;#5907&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel Compilerで&lt;code&gt;duration.hpp&lt;/code&gt;のコンパイルに失敗する問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5669&#34; target=&#34;_blank&#34;&gt;#5669&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;visibilityをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2114&#34; target=&#34;_blank&#34;&gt;#2114&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clock::now()&lt;/code&gt;が、MAC上では1/1000秒の&lt;code&gt;time_point&lt;/code&gt;を返すようにした(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5909&#34; target=&#34;_blank&#34;&gt;#5909&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Windows上でreal cpu clockが&lt;code&gt;steady_clock&lt;/code&gt;になるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5946&#34; target=&#34;_blank&#34;&gt;#5946&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;real cpu clockが、MAC上では&lt;code&gt;clock()&lt;/code&gt;の代わりに&lt;code&gt;times()&lt;/code&gt;を使用するようにした。これは2倍高速で、より良い精度を持っている(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5974&#34; target=&#34;_blank&#34;&gt;#5974&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;クリーンアップ&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テスト時間を50%速くするために、ヘッダオンリー、共有、静的リンクの組み合わせを削減&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrono_accuracy_test&lt;/code&gt;は決定性がないため、レギュレッションテストから削除&lt;/li&gt;
&lt;li&gt;以下の古いファイルを削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/timer.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/process_times.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/process_clock.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/mac/process_clock.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/posix/process_clock.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/win/process_clock.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/run_timer.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/detail/run_timer_static.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_DECLTYPE_N3276&lt;/code&gt;マクロを追加(see &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&#34; target=&#34;_blank&#34;&gt;N3276&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;single_view&lt;/code&gt;がrandom access sequenceを生成するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fusion::distance&lt;/code&gt;から、嘘のコンパイル時アサートを削除&lt;/li&gt;
&lt;li&gt;segmented Fusionの実装を整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堅牢性の問題。いくつかの状況で&lt;code&gt;union&lt;/code&gt;の出力に失敗していた。&lt;/li&gt;
&lt;li&gt;堅牢性の問題。いくつかの状況で計算された交差点(&lt;code&gt;intersection&lt;/code&gt;)がセグメント外だった。&lt;/li&gt;
&lt;li&gt;コンセプトの問題。デカルト交差(cartesian intersect)が提供されたもの以外のセグメントを理解していなかった。&lt;/li&gt;
&lt;li&gt;いくつかの状況で、linestringの自己交差点を逃していた。(&lt;a href=&#34;http://groups.google.com/group/boost-list/browse_thread/thread/a5ad044022bb08de/&#34; target=&#34;_blank&#34;&gt;boost users : [geometry] intersects bug?&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fusionの座標系が登録されていなかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;セグメントの&lt;code&gt;intersection&lt;/code&gt;が&lt;code&gt;first&lt;/code&gt; / &lt;code&gt;second&lt;/code&gt;という名前のメンバを想定している(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5726&#34; target=&#34;_blank&#34;&gt;#5726&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fusionアダプトのサンプルで、座標系の登録が間違っている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5744&#34; target=&#34;_blank&#34;&gt;#5744&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント用のコードに、&lt;code&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/code&gt;が必要(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5748&#34; target=&#34;_blank&#34;&gt;#5748&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_pythagoras&lt;/code&gt;が&lt;code&gt;sqrt()&lt;/code&gt;を行なっていない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5954&#34; target=&#34;_blank&#34;&gt;#5954&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;アルゴリズムの改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己交差点の計算を自動では行わないようにした。これはパフォーマンスを爆発的に向上させる。&lt;/li&gt;
&lt;li&gt;その他に、自己交差点の計算を高速化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection&lt;/code&gt;が、重複するポイントの出力を避けるようにした。したがって、これは最小限の集合を出力する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追加アルゴリズム&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;covered_by&lt;/code&gt; : &lt;code&gt;within&lt;/code&gt;は「境界線上ではない内側」だが、&lt;code&gt;covered_by&lt;/code&gt;は「境界線上もしくは内側」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追加機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;within&lt;/code&gt; : &lt;code&gt;strategy&lt;/code&gt;で&lt;code&gt;within&amp;lt;point, box&amp;gt;&lt;/code&gt;と&lt;code&gt;within&amp;lt;box, box&amp;gt;&lt;/code&gt;が可能になった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;convert&lt;/code&gt; : より広い範囲の変換をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt; : 同上。引数の順番は逆だが、&lt;code&gt;convert&lt;/code&gt;の別名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;座標型の追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Rationalをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libboost_graph_parallel shared library内で&lt;code&gt;exit()&lt;/code&gt;を使用していたのを削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5185&#34; target=&#34;_blank&#34;&gt;#5185&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_graphml&lt;/code&gt;が&lt;code&gt;key&lt;/code&gt;を無視していたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5506&#34; target=&#34;_blank&#34;&gt;#5506&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MSVCで、&lt;code&gt;max&lt;/code&gt;マクロの問題で&lt;code&gt;csr_graph&lt;/code&gt;がコンパイルエラーになっていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5813&#34; target=&#34;_blank&#34;&gt;#5813&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_graph&lt;/code&gt;の&lt;code&gt;removing_vertex&lt;/code&gt;で、&lt;code&gt;vertex&lt;/code&gt;を直接削除していたのを、vertex nameを削除するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5919&#34; target=&#34;_blank&#34;&gt;#5919&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Tracにないその他いくつかのバグを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reverse_graph&lt;/code&gt;の&lt;code&gt;edge_descriptor&lt;/code&gt;型を変更し、曖昧さを解消。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows上で&lt;code&gt;interprocess::file_lock&lt;/code&gt;が正しく動作していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2796&#34; target=&#34;_blank&#34;&gt;#2796&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vectorstream&lt;/code&gt;の構築でメモリリークしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4031&#34; target=&#34;_blank&#34;&gt;#4301&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OSX Leopard 64ビット版でboot stampの取得が常に失敗していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4251&#34; target=&#34;_blank&#34;&gt;#4251&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCC 4.5/4.6で&lt;code&gt;NDEBUG&lt;/code&gt; + 最適化オプション(例えば&lt;code&gt;O1&lt;/code&gt;)を付けると&lt;code&gt;managed_mapped_file&lt;/code&gt;が落ちる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4452&#34; target=&#34;_blank&#34;&gt;#4452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で&lt;code&gt;boost::interprocess::managed_shared_memory&lt;/code&gt;が間違ったtmpパスに作ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4895&#34; target=&#34;_blank&#34;&gt;#4895&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_shared_memory&lt;/code&gt;を&lt;code&gt;open_only&lt;/code&gt;モードで作成すると、権限が変更されてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5077&#34; target=&#34;_blank&#34;&gt;#5077&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;boot stampを取得する処理の互換性問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5120&#34; target=&#34;_blank&#34;&gt;#5120&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Linux上でmemory segmentを開く際、アクセス許可がリセットされる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5123&#34; target=&#34;_blank&#34;&gt;#5123&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;32-64bit間の共用memoryにおける構造体のメモリレイアウトが実装意図と異なる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5230&#34; target=&#34;_blank&#34;&gt;#5230&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;libc++で&lt;code&gt;std&lt;/code&gt;名前空間にある&lt;code&gt;allocator&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;pair&lt;/code&gt;, &lt;code&gt;char_traits&lt;/code&gt;の前方宣言ができない問題に対応 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5197&#34; target=&#34;_blank&#34;&gt;#5197&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/interprocess/sync/file_lock.hpp&lt;/code&gt;がmsvc10で64bitコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5287&#34; target=&#34;_blank&#34;&gt;#5287&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp&lt;/code&gt;が&lt;code&gt;#ifndef&lt;/code&gt;で終端されていない問題を修正(ただしここのクラスはもう実装に利用していないので信頼すべきでない) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5294&#34; target=&#34;_blank&#34;&gt;#5294&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/interprocess/detail/win32_api.hpp&lt;/code&gt; にある&lt;code&gt;get_wmi_class_attribute&lt;/code&gt;呼び出しでクラッシュする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5306&#34; target=&#34;_blank&#34;&gt;#5306&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;interprocessの、&lt;code&gt;boost/interprocess/managed_windows_shared_memory.hpp&lt;/code&gt;などのヘッダをインクルードすると、多くの警告が無効になる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5308&#34; target=&#34;_blank&#34;&gt;#5308&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;メッセージキューのテンポラリディレクトリに関する問題がまだ発生していたので修正。&lt;code&gt;get_wmi_class_attribute&lt;/code&gt;が間違った文字列を返していたため、WMIごと利用しないようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5392&#34; target=&#34;_blank&#34;&gt;#5392&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;
&lt;h1&gt;訳註：Windows 7 64 bit と Windows XP SP3 32 bit、Boost1.47でまだ発生した、という報告の後にre-open -&amp;gt; fixの流れがないので警戒する必要があるかも&lt;/h1&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowsで名前付き&lt;code&gt;mutex&lt;/code&gt;の生成に非常に時間がかかる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5409&#34; target=&#34;_blank&#34;&gt;#5409&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;カスタマイズのサポートを追加。また、32-64bitプロセス間で共用可能なカスタム管理セグメントを作成可能にした。 &lt;/li&gt;
&lt;li&gt;Windowsにおける共用memoryは再びファイルシステムと同じ生存期間になった。これはkernel bootstampとWMIを利用して信頼できるタイムスタンプを得ようとすると問題が頻発したため。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基底クラスのメンバフックが動作しない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4797&#34; target=&#34;_blank&#34;&gt;#4797&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;ドキュメントのエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5165&#34; target=&#34;_blank&#34;&gt;#5165&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;safe_link&lt;/code&gt;モード時に&lt;code&gt;intrusive::tree_algorithms::replace_node&lt;/code&gt;が失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5183&#34; target=&#34;_blank&#34;&gt;#5183&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;unordered_set&lt;/code&gt;の&lt;code&gt;iterator_to()&lt;/code&gt;に&lt;code&gt;const&lt;/code&gt;付きの引数を渡すとコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5191&#34; target=&#34;_blank&#34;&gt;#5191&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;どのプラットフォームにおいても&lt;code&gt;Inf&lt;/code&gt;と&lt;code&gt;NaN&lt;/code&gt;が正しく処理されるようにコードを追加した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5689&#34; target=&#34;_blank&#34;&gt;#5689&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Quickbookドキュメントの更新 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5723&#34; target=&#34;_blank&#34;&gt;#5723&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;多くの&lt;code&gt;Source&lt;/code&gt;と&lt;code&gt;Target&lt;/code&gt;型の組みあわせにおいて、パフォーマンスの最適化ならびに省メモリ化がなされるようにした &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;ロケールにおけるパフォーマンス最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cyclic Bessel I, J, K, Y 関数に新シリーズの評価メソッドを追加した。またこれら関数のオーバーフロー/アンダーフロー問題が発生しないように修正した。&lt;code&gt;cyl_bessel_j&lt;/code&gt;関数が小さい数を入力した場合にNaNを返す問題を修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5560&#34; target=&#34;_blank&#34;&gt;#5560&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Thomas Mangにいただいたベイズ統計の逆カイ二乗分散の例を追加した。 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;global facet&lt;/code&gt;を使わずに、C99の&lt;code&gt;nonfinite&lt;/code&gt;を扱うことができる改善版&lt;code&gt;lexical_cast&lt;/code&gt;を用いたテストを追加 &lt;/li&gt;
&lt;li&gt;一様分布における累積分布関数の補数値に範囲外の値を設定した場合の誤りを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5733&#34; target=&#34;_blank&#34;&gt;#5733&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;OpenBSD環境下で&lt;code&gt;long double&lt;/code&gt;サポートを有効にした (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6014&#34; target=&#34;_blank&#34;&gt;#6014&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;他の実装と同じように振る舞うように、&lt;code&gt;nextafter&lt;/code&gt;関数と関連する関数を変更した。これにより、&lt;code&gt;nextafter(+INF, 0)&lt;/code&gt; は有限数(finite)となる (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5832&#34; target=&#34;_blank&#34;&gt;#5832&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Boost.Tr1と同時に利用するときに発生する問題を修正するために、&lt;code&gt;tuple&lt;/code&gt;のインクルード元を変更した (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5934&#34; target=&#34;_blank&#34;&gt;#5934&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;両端とも&lt;code&gt;0&lt;/code&gt;のrangeが設定された場合の&lt;code&gt;eps_tolerance&lt;/code&gt;クラスの振る舞いが正しくなるように修正した (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6001&#34; target=&#34;_blank&#34;&gt;#6001&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;prime.hpp&lt;/code&gt;にインクルードガードがなかったため追加 (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5927&#34; target=&#34;_blank&#34;&gt;#5927&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;constants.hpp&lt;/code&gt;にある使っていない/アンドキュメントな定数を削除 (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5982&#34; target=&#34;_blank&#34;&gt;#5982&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonfinite_num_facets.hpp&lt;/code&gt;中で&lt;code&gt;std::&lt;/code&gt;プレフィクス一部欠けている問題を修正 (issue &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5914&#34; target=&#34;_blank&#34;&gt;#5914&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Crayコンパイラ互換にするためのパッチを適用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;eUMLにおいて、&lt;code&gt;event&lt;/code&gt;再処理を容易にする機能(&lt;code&gt;process(event_)&lt;/code&gt;と&lt;code&gt;reprocess()&lt;/code&gt;)を追加 &lt;/li&gt;
&lt;li&gt;内部遷移テーブルを書きなおした。いくつかのバグ(サブ-サブマシンの内部遷移テーブルの再帰が失敗する)や、不足していた機能(メインステートマシンの内部遷移テーブルが使われていない問題)があったため。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;favor_compile_time&lt;/code&gt;ポリシーをBoost 1.46の状態に戻した &lt;/li&gt;
&lt;li&gt;none eventは他のいかなる&lt;code&gt;event&lt;/code&gt;からでも変換可能にした &lt;/li&gt;
&lt;li&gt;eUMLとexit疑似状態 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flag_AND&lt;/code&gt;が機能していない問題を修正 &lt;/li&gt;
&lt;li&gt;ある&lt;code&gt;event&lt;/code&gt;とそのbase eventが遷移テーブルにあるサブマシンで同じ&lt;code&gt;event&lt;/code&gt;が複数回処理されてしまう稀なバグを修正&lt;/li&gt;
&lt;li&gt;gccで未使用変数の警告が出る問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;
- 新規内部遷移テーブル機能にはマイナーな破壊的変更がある。サブマシンにおいて、&lt;code&gt;internal_transition_table&lt;/code&gt;で利用される&lt;code&gt;guard&lt;/code&gt;/&lt;code&gt;action&lt;/code&gt;のための&lt;code&gt;Fsm&lt;/code&gt;テンプレートパラメータは、上位のステートマシンではなくサブマシンに変更される。 上位のステートマシンの internal row 記法を使って表現されている内部遷移の振る舞いは変更されない。(&lt;code&gt;Fsm&lt;/code&gt;パラメータは上位のステートマシンである)。 要するに、内部遷移&lt;code&gt;Fsm&lt;/code&gt;パラメータはこの遷移を含む最も近いステートマシンとなる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#numeric-conversion&#34; name=&#34;numeric-conversion&#34;&gt;Numeric Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_48_0/libs/numeric/conversion/doc/html/boost_numericconversion/improved_numeric_cast__.html#boost_numericconversion.improved_numeric_cast__.numeric_cast_traits&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;numeric_cast_traits&lt;/code&gt;&lt;/a&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;：コンパイラサポートの右辺値参照を使用してオーバーロード数を減少させた。この変更により、Proto式に対する加算演算子のオーバーロードが曖昧になる。これの解決策は、あいまいと言われるProtoの演算子を、ユーザー定義の演算子によって、無効化にする&lt;code&gt;grammar&lt;/code&gt;を使用することである。&lt;/li&gt;
&lt;li&gt;Protoのタグ型を、ADLブロックされた名前空間へ移動。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::switch_&lt;/code&gt;に、ディスパッチ用の第2テンプレートパラメータを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_PROTO_EXTENDS&lt;/code&gt;と&lt;code&gt;BOOST_PROTO_BASIC_EXTENDS&lt;/code&gt;を指定することによって、依存するドメインを許可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャラクタクラスの直後に配置された大文字と小文字を区別しない修飾子が機能していない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/698&#34; target=&#34;_blank&#34;&gt;#698&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cregex.cpp&lt;/code&gt;, &lt;code&gt;fileiter.cpp&lt;/code&gt;, &lt;code&gt;posix_api.cpp&lt;/code&gt; に書式文字列攻撃の対象になる&lt;code&gt;sprintf&lt;/code&gt;が使われている問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5835&#34; target=&#34;_blank&#34;&gt;#5835&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;省略符号(…)でnon-POD型の&lt;code&gt;boost::match_results&lt;/code&gt;を実引数として渡すとコンパイルエラーになる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5958&#34; target=&#34;_blank&#34;&gt;#5958&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;のソースファイルを併合すると、&lt;code&gt;c_regex_type&lt;/code&gt;の多重定義でコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5736&#34; target=&#34;_blank&#34;&gt;#5736&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spirit V2.5.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V2.5(Boost 1.47.0)からの変更点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spirit::istream_iterator&lt;/code&gt; (&lt;a href=&#34;http://www.boost.org/doc/libs/1_48_0/libs/spirit/doc/html/spirit/support/multi_pass.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;multi_pass&lt;/code&gt;&lt;/a&gt;を参照)が、構築時にストリームの&lt;code&gt;eof&lt;/code&gt;をチェックするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;属性に埋め込まれた&lt;code&gt;optional&lt;/code&gt;属性を適切に折りたたむようにした(例えば &lt;code&gt;-(&#39;(&#39; &amp;gt; -int_ &amp;gt;&amp;gt; &#39;)&#39;)&lt;/code&gt; )。これは、&lt;code&gt;optional&amp;lt;optional&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;が&lt;code&gt;optional&amp;lt;int&amp;gt;&lt;/code&gt;に折りたたまれることを意味する。問題を報告してくれたPeter Schuellerに感謝する。&lt;/li&gt;
&lt;li&gt;バイナリパーサーがアクションを正しく伝播するよう修正した。問題を報告してくれたMathias Bornに感謝する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lexのバグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexertl&lt;/code&gt;の&lt;code&gt;token_value_type&lt;/code&gt;が、&lt;code&gt;const&lt;/code&gt;な未使用変数を返していたところを、非&lt;code&gt;const&lt;/code&gt;参照な変数を返すようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5701&#34; target=&#34;_blank&#34;&gt;#5701&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lexer&lt;/code&gt; (&lt;code&gt;position_token&lt;/code&gt;)で、有効なパーサーのデバッグで発生する問題を修正(MSVC2010)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;演算子サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メタ関数&lt;/th&gt;
&lt;th&gt;持っているかを判定する演算子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_and_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; | &lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_ot_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; |&lt;code&gt;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_xor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a ^ b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_bit_xor_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a ^= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_complement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_dereference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_divide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a / b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_divide_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a /= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_equal_to&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a == b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_greater&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_greater_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_left_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_left_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_less&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_less_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_logical_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp;&amp;amp; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_logical_not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_logical_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; || &lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a - b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_minus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a -= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_modulus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a % b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_modulus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a %= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_multiples&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a * b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_multiples_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a *= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_negate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_new_operator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;new a&lt;/code&gt;&lt;br /&gt; &lt;code&gt;new (std::nothrow) a&lt;/code&gt;&lt;br /&gt; &lt;code&gt;new a[n]&lt;/code&gt;&lt;br /&gt; &lt;code&gt;new (std::nothrow) a[n]&lt;/code&gt;&lt;br /&gt; &lt;code&gt;new (allocate_area) a[b]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_not_equal_to&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a != b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_nothrow_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a = b&lt;/code&gt;&lt;br /&gt; ※ &lt;code&gt;throw()&lt;/code&gt; or &lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_nothrow_constructor&lt;/code&gt;&lt;br /&gt; &lt;code&gt;has_nothrow_default_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A a A()&lt;/code&gt; &lt;br /&gt;※ &lt;code&gt;throw()&lt;/code&gt; or &lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_nothrow_copy&lt;/code&gt;&lt;br /&gt; &lt;code&gt;has_nothrow_copy_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A a(a_type_value)&lt;/code&gt;&lt;br /&gt; &lt;code&gt;A a = a_type_value&lt;/code&gt;&lt;br /&gt; ※ &lt;code&gt;throw()&lt;/code&gt; or &lt;code&gt;noexcept&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_plus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a += b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_post_decrement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a--&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_post_increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a++&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_pre_decrement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_pre_increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_right_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_right_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt;= b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_trivial_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a = b&lt;/code&gt;&lt;br /&gt; ※ 暗黙定義される&lt;code&gt;=&lt;/code&gt;演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_trivial_constructor&lt;/code&gt;&lt;br /&gt; &lt;code&gt;has_trivial_default_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A a A()&lt;/code&gt;&lt;br /&gt; ※暗黙定義されるデフォルトコンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_trivial_copy&lt;/code&gt;&lt;br /&gt; &lt;code&gt;has_trivial_copy_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A a(a_type_value) A a = a_type_value&lt;/code&gt;&lt;br /&gt; ※暗黙定義されるコピーコンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_trivial_destructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~a()&lt;/code&gt;&lt;br /&gt; &lt;code&gt;delete a&lt;/code&gt;&lt;br /&gt; ※暗黙定義されるデストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_unary_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_unary_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has_virtual_destructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~a()&lt;/code&gt;&lt;br /&gt; &lt;code&gt;delete a&lt;/code&gt;&lt;br /&gt; ※仮想デストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準 C++ 11 のサポートを改善 - &lt;code&gt;emplace&lt;/code&gt;と&lt;code&gt;equality&lt;/code&gt;に破壊的変更あり。&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスの実装にBoost.Moveを使用。&lt;/li&gt;
&lt;li&gt;全ての詳細はchange logを見よ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Change Log (Boost 1.48.0 - Major Update)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メジャーな変更として、Boost.Moveによるムーブのエミュレーションを使用するようになり、また、より標準C++11に対応しました。 詳細はcompliance sectionを御覧ください。&lt;/li&gt;
&lt;li&gt;このライブラリのコンテナはC++11の計算量要件を満たすようになりました。ただ、使用に当たっては、わずかだけ多くメモリを使用することになります。&lt;/li&gt;
&lt;li&gt;これにより&lt;code&gt;quick_erase&lt;/code&gt;と&lt;code&gt;erase_return_void&lt;/code&gt;は必要なくなるため、これらは将来のバージョンで取り除かれるでしょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11サポートはいくつかの破壊的変更をもたらしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equality comparisonはC++11の仕様に合わせて変更されました。equivalentなキーを持つコンテナについて、同じ(equal)キーに属する要素はこれまで、considered equalでなければならなかったため、同じ順序で整列している必要がありました。現在は、それら要素たちの順列組み合わせでも良いことになりました。これまでの振る舞いで使用するには、&lt;code&gt;BOOST_UNORDERED_DEPRECATED_EQUALITY&lt;/code&gt;マクロを定義します。（訳註：不安なので間違ってたら訂正お願いします）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;される2つのコンテナが同じでない&lt;code&gt;allocator&lt;/code&gt;を持つ場合の挙動が異なります。これまでは、&lt;code&gt;allocator&lt;/code&gt;を借用して新しいノードを&lt;code&gt;allocate&lt;/code&gt;していました。これからは、もし&lt;code&gt;allocator&lt;/code&gt;が、&lt;code&gt;propagate_on_container_swap::value&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;であるような&lt;code&gt;propergate_on_containe_swap&lt;/code&gt;構造体をメンバに持っている場合、&lt;code&gt;allocator&lt;/code&gt;を&lt;code&gt;swap&lt;/code&gt;するようになりました。（訳註：不安なので間違ってたらｒｙ）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Allocator&lt;/code&gt;の&lt;code&gt;construct&lt;/code&gt;関数、&lt;code&gt;destruct&lt;/code&gt;関数は、&lt;code&gt;allocator&lt;/code&gt;の&lt;code&gt;pointer type&lt;/code&gt;ではなく、生ポインタと共に呼び出されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace&lt;/code&gt;は初期のC++0x draftで登場したvariadic pair constructorをemulateしていましたが、それは取り除かれたので、emulateしないようになりました。そして、新たな&lt;code&gt;piecewise_construct_&lt;/code&gt; pair constructをemulateするようになりました（あなたが&lt;code&gt;boost::piecewise_construct&lt;/code&gt;の使用を必要としたときに限って）。これまでのvariadic constructorのemulationを使用する場合は、&lt;code&gt;BOOST_UNORDERED_DEPRECATED_PAIR_CONSTRUCT&lt;/code&gt;を定義します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_48_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V.2.3.1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;support_option_emit_contnewlines&lt;/code&gt; フラグの追加。このオプションは、Wave libraryがバックスラッシュ+改行をemitするかどうか制御する。デフォルト今までと同じ（無視して、そこから後ろは適当に処理する）※SLexモジュールのみがサポートしている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5887&#34; target=&#34;_blank&#34;&gt;#5887&lt;/a&gt; の修正：flex_string.hpp needs to include &lt;code&gt;&amp;lt;ios&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;LLVM Clang 2.8&lt;/li&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.1, 4.5.2, 4.6&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;li&gt;Intel 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Intel 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++ 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 32 and 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, C++0x mode: 4.4.2, 4.6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang from subversion, with libc++ and GNU libstdc++&lt;/li&gt;
&lt;li&gt;LLVM Clang 2.8 x&lt;/li&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.5.4, 4.6.1, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.4.4, 4.5.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.2 x&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;PathScale: 4.0.8&lt;/li&gt;
&lt;li&gt;Visual Age 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang from subversion, with libc++ and GNU libstdc++.&lt;/li&gt;
&lt;li&gt;Intel 11.1.&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.4.4.&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++ 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.1&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode, mingw: 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, mingw 64-bit: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX:&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 32 and 64 bit.&lt;/li&gt;
&lt;li&gt;Solaris:&lt;/li&gt;
&lt;li&gt;Sun 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, digitalghost, hotwatermorning, zak, Takatoshi Kondo&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.49.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_49_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_49_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.49.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_49_0.qbk&#34; target=&#34;_blank&#34;&gt;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_49_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Heap&lt;ul&gt;
&lt;li&gt;優先順位付きキューデータ構造の実装&lt;/li&gt;
&lt;li&gt;作者：Tim Blechmann&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#icl&#34;&gt;Icl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#property-tree&#34;&gt;Property Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の&lt;code&gt;Clock&lt;/code&gt;要件に基づく新たなクラステンプレート&lt;code&gt;basic_waitable_timer&lt;/code&gt;を追加。C++11 &lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;ライブラリのクロックや、Boost.Chronoのクロックを使用することができる。&lt;code&gt;high_resolution_timer&lt;/code&gt;、 &lt;code&gt;steady_timer&lt;/code&gt;、 &lt;code&gt;system_timer&lt;/code&gt;という名前の&lt;code&gt;typedef&lt;/code&gt;は、標準クロックのオブジェクトを生成して使用する。&lt;/li&gt;
&lt;li&gt;Windowsカーネルオブジェクトに対して待機を実行するための&lt;code&gt;windows::object_handle&lt;/code&gt;クラスを追加。この機能の開発に貢献してくれたBoris Schaelingに感謝する。&lt;/li&gt;
&lt;li&gt;Linux上において、&lt;code&gt;connect()&lt;/code&gt;関数が特定の状況で&lt;code&gt;EAGAIN&lt;/code&gt;を返すことを可能にした。エラーマッピングを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6048&#34; target=&#34;_blank&#34;&gt;#6048&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;NetBSDでのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6098&#34; target=&#34;_blank&#34;&gt;#6048&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OS X上でのデッドロックを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6275&#34; target=&#34;_blank&#34;&gt;#6275&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バッファストリームの書き込みが壊れていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6310&#34; target=&#34;_blank&#34;&gt;#6310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で、&lt;code&gt;io_service&lt;/code&gt;が何もせず繰り返し実行される場合に、非ページプールの(メモリ)リークを起こしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6321&#34; target=&#34;_blank&#34;&gt;#6321&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;以前の変更によってマルチスレッド環境下で競合状態が発生したため、この変更を撤回した。このため危険な操作をロックなしに実行できるようになっている。&lt;/li&gt;
&lt;li&gt;2つの&lt;code&gt;buffer&lt;/code&gt;からなる配列があった場合、0番目の&lt;code&gt;buffer&lt;/code&gt;が空だと、1番目の&lt;code&gt;buffer&lt;/code&gt;が無視される可能性があった問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非整数型の&lt;code&gt;duration&lt;/code&gt;でのIOでコンパイルエラーが出ていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6092&#34; target=&#34;_blank&#34;&gt;#6092&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration&lt;/code&gt;の入力ストリームにおいて、単数形が入力されると失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6093&#34; target=&#34;_blank&#34;&gt;#6093&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CHRONO_HEADER_ONLY&lt;/code&gt;が定義されている場合に、シンボルの重複によるリンクエラーが発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6113&#34; target=&#34;_blank&#34;&gt;#6113&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sandia-pgi-11.9において、&lt;code&gt;/libs/chrono/test/../example/min_time_point.cpp&lt;/code&gt;中の&lt;code&gt;min&lt;/code&gt;関数の使用がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6243&#34; target=&#34;_blank&#34;&gt;#6243&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linux/Mac上において、&lt;code&gt;process_cpu_clock::now()&lt;/code&gt;がマイクロ秒ではなくナノ秒を使用するように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5909&#34; target=&#34;_blank&#34;&gt;#5909&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6257&#34; target=&#34;_blank&#34;&gt;#6257&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;at()&lt;/code&gt;ドキュメントの要件が逆だった問題、および例外を投げる条件のドキュメントが間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6499&#34; target=&#34;_blank&#34;&gt;#6499&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map::emplace&lt;/code&gt;の戻り型がドキュメントと一致していない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6336&#34; target=&#34;_blank&#34;&gt;#6336&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;で&lt;code&gt;void&lt;/code&gt;への参照ができる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6335&#34; target=&#34;_blank&#34;&gt;#6335&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;gccで&lt;code&gt;-enable-symvers=gnu-versioned-namespace&lt;/code&gt;のあるなしに関わらずハードコードした前方宣言が機能しない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6287&#34; target=&#34;_blank&#34;&gt;#6287&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;ドキュメント修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6205&#34; target=&#34;_blank&#34;&gt;#6205&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;STLPort使用時に、Interprocessにある&lt;code&gt;char_traits&lt;/code&gt;の前方宣言がC4099警告を起こす問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4383&#34; target=&#34;_blank&#34;&gt;#4383&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;内部の&lt;code&gt;allocator_traits&lt;/code&gt;のクローンを使って、C++11/03のいずれのコンパイラでも&lt;code&gt;allocator_traits&lt;/code&gt;が利用できるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストケースの追加。自インスタンス自体(もしくは部分)をソースとするような代入や伸長をした場合にパスがエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3714&#34; target=&#34;_blank&#34;&gt;#3714&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Locale&lt;/code&gt;の&lt;code&gt;codecvt_facet&lt;/code&gt;がWindows環境でスレッドセーフではない。WindowsとMac OS Xの&lt;code&gt;locale&lt;/code&gt;と&lt;code&gt;codecvt facet&lt;/code&gt;をネームスペーススコープに戻した。OS Xを除くPOSIX環境はもし環境変数が間違っていた場合に例外をキャッチできるように、またもし実際に使用されない場合&lt;code&gt;locale(&#34;&#34;)&lt;/code&gt;の使用を避けることができるように&lt;code&gt;local static initialization&lt;/code&gt;を利用する(IE lazy)(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4889&#34; target=&#34;_blank&#34;&gt;#4889&lt;/a&gt;), (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6320&#34; target=&#34;_blank&#34;&gt;#6320&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;循環するシンボリックリンクに対する&lt;code&gt;recursive_directory_iterator&lt;/code&gt;が失敗する。パッチを送ってくれたDaniel Aarnoに感謝する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5652&#34; target=&#34;_blank&#34;&gt;#5652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recursive_directory_iterator(error_code)&lt;/code&gt;がまだ&lt;code&gt;filesystem_error&lt;/code&gt;例外を送出していた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5653&#34; target=&#34;_blank&#34;&gt;#5653&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows環境で&lt;code&gt;error&lt;/code&gt;が例外送出されたとき、&lt;code&gt;directory_iterator&lt;/code&gt;がアクセス違反になる(パッチを送ってくれたAndreas Ecklederに感謝)(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5900&#34; target=&#34;_blank&#34;&gt;#5900&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&lt;/code&gt;を引数にとる&lt;code&gt;directory_iterator&lt;/code&gt;の構築時に&lt;code&gt;ec&lt;/code&gt;実引数が渡されることなくインクリメントが呼び出されてしまうバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5900#comment:2&#34; target=&#34;_blank&#34;&gt;#5900 comment 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;このチケット自体は問題なかったが、テストスィートの&lt;code&gt;path_test.cpp&lt;/code&gt;のコードとドキュメントをわかりやすく修正した。すなわち、&lt;code&gt;path&lt;/code&gt;にまたがるiterationは一般的な形式を返す(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5989&#34; target=&#34;_blank&#34;&gt;#5989&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows環境下での&lt;code&gt;codecvt&lt;/code&gt;処理が参照するコードページを&lt;code&gt;CP_THREAD_ACP&lt;/code&gt;から&lt;code&gt;CP_ACP&lt;/code&gt;に変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5592&#34; target=&#34;_blank&#34;&gt;#5592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PGIコンパイラのために作業関数を修正した。Noel Belcourtに感謝する&lt;/li&gt;
&lt;li&gt;パーミッション・テストの基準を現実に即して(特にSandiaテストプラットフォームに合わせて)緩和した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multi-geometriesの距離が、特定のdistance strategyで無視される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polygon/multi_polygon&lt;/code&gt;の差異(&lt;a href=&#34;http://boost-geometry.203548.n3.nabble.com/Quick-question-about-bg-difference-td3449479.html&#34; target=&#34;_blank&#34;&gt;2011/10/24にGGL-list&lt;/a&gt;に投稿された)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi-geometrie(s)&lt;/code&gt;のいずれか一点が空の場合、距離を計算すると例外が送出される&lt;/li&gt;
&lt;li&gt;Multi DSVが正しくセッティングを反映していない&lt;/li&gt;
&lt;li&gt;自己交差がまれに失われる(1.48で発生した)&lt;/li&gt;
&lt;li&gt;空のrangeに対する凸包がクラッシュする(例えば、空の&lt;code&gt;multi point&lt;/code&gt;で)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;チケット消化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;closure&lt;/code&gt;に関するドキュメント(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6028&#34; target=&#34;_blank&#34;&gt;#6028&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;covered_by.hpp&lt;/code&gt;ヘッダファイルの欠損(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6178&#34; target=&#34;_blank&#34;&gt;#6178&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;多点の凸包の計算をするコードがコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6021&#34; target=&#34;_blank&#34;&gt;#6021&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;の交差と差をサポートした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment&lt;/code&gt;/&lt;code&gt;box&lt;/code&gt;の、異なる&lt;code&gt;point&lt;/code&gt;型の変換をサポートした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi point&lt;/code&gt;への追加をサポートした&lt;/li&gt;
&lt;li&gt;スカラ関数(&lt;code&gt;distance&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;perimeter&lt;/code&gt;)が空の入力に対し&lt;code&gt;empty_input_exception&lt;/code&gt;を投げるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ドキュメント&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サポート状態を更新した&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt;/&lt;code&gt;convert&lt;/code&gt;/&lt;code&gt;assign&lt;/code&gt;/&lt;code&gt;area&lt;/code&gt; についての &lt;code&gt;specializations&lt;/code&gt;/&lt;code&gt;not_implemented&lt;/code&gt; を更新した&lt;/li&gt;
&lt;li&gt;ドメインを冗長にするために、&lt;code&gt;wkt&lt;/code&gt;と&lt;code&gt;dsv&lt;/code&gt;を&lt;code&gt;io&lt;/code&gt;フォルダへ移動した&lt;/li&gt;
&lt;li&gt;clangでの警告を抑制するために&lt;code&gt;Strategy&lt;/code&gt;コンセプトを&lt;code&gt;0&lt;/code&gt;に割りあてた(Vishnuのパッチを適用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;degree_vertex_invariant::max&lt;/code&gt;の実装が間違っていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5881&#34; target=&#34;_blank&#34;&gt;#5881&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;biconnected_components(…)&lt;/code&gt;で計算した低点マップが稀に間違っている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6033&#34; target=&#34;_blank&#34;&gt;#6033&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;のドキュメントの&lt;code&gt;end for&lt;/code&gt;が抜けている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6061&#34; target=&#34;_blank&#34;&gt;#6061&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph_edge_descriptor&lt;/code&gt;型の演算子に抜けがある(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6137&#34; target=&#34;_blank&#34;&gt;#6137&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrobak_payne_drawing.hpp&lt;/code&gt;が&lt;code&gt;&amp;lt;stack&amp;gt;&lt;/code&gt;をインクルードしていない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6246&#34; target=&#34;_blank&#34;&gt;#6246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kamada_kawai_spring_layout&lt;/code&gt;にデバッグ出力用のコードが残っている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6239&#34; target=&#34;_blank&#34;&gt;#6239&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BGLの&lt;code&gt;function_requires&lt;/code&gt;(非推奨)を&lt;code&gt;BOOST_CONCEPT_ASSERT&lt;/code&gt;に置換(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6293&#34; target=&#34;_blank&#34;&gt;#6293&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost:edge(u, v, reverse_graph)&lt;/code&gt;が非&lt;code&gt;reverse graph&lt;/code&gt;の&lt;code&gt;edge_decriptor&lt;/code&gt;を返す(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6306&#34; target=&#34;_blank&#34;&gt;#6306&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;trunkにある&lt;code&gt;reverse_graph&lt;/code&gt;が動作するように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6313&#34; target=&#34;_blank&#34;&gt;#6313&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directed_graph&lt;/code&gt;/&lt;code&gt;undirected_graph&lt;/code&gt;でコンパイルエラーが発生する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6371&#34; target=&#34;_blank&#34;&gt;#6371&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;およびTracに含まれていないもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再度LEDA graphサポートを有効にした(パッチを作ったJens Mullerに感謝する)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_predecessor_recorder&lt;/code&gt;のドキュメント追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#icl&#34; name=&#34;icl&#34;&gt;Icl&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特定の開区間について&lt;code&gt;boost::icl::is_empty&lt;/code&gt;が失敗する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6095&#34; target=&#34;_blank&#34;&gt;#6095&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;区間のカスタマイズをするとコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6210&#34; target=&#34;_blank&#34;&gt;#6210&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブコンストラクタ、ムーブ代入演算子、ならびに二項演算子にムーブセマンティクスを導入した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC用の属性名にアンダースコア追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6412&#34; target=&#34;_blank&#34;&gt;#6412&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで&lt;code&gt;intermodule_singleton&lt;/code&gt;がクラッシュする(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6398&#34; target=&#34;_blank&#34;&gt;#6398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc 3.4.6で&lt;code&gt;message_queue&lt;/code&gt;が&#34;ambiguous class template instantiation&#34;(無名クラステンプレートのインスタンス化)によりコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6319&#34; target=&#34;_blank&#34;&gt;#6319&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gccで&lt;code&gt;-enable-symvers=gnu-versioned-namespace&lt;/code&gt;のあるなしに関わらずハードコードした前方宣言が機能しない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6287&#34; target=&#34;_blank&#34;&gt;#6287&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed memory segment&lt;/code&gt;上にSTLコンテナが構築できない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6265&#34; target=&#34;_blank&#34;&gt;#6265&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_ptr::reset(p, d)&lt;/code&gt;で&lt;code&gt;deleter&lt;/code&gt;が構築されない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6233&#34; target=&#34;_blank&#34;&gt;#6233&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;サンプルが32-bitでコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6147&#34; target=&#34;_blank&#34;&gt;#6147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;boost 1.48.0 interprocessがFreeBSD環境下でコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6134&#34; target=&#34;_blank&#34;&gt;#6134&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore_timed_wait()&lt;/code&gt;の挙動がglibcの&lt;code&gt;sem_timedwait()&lt;/code&gt;と一貫性がない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6058&#34; target=&#34;_blank&#34;&gt;#6058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OSX上でx86からx64(およびその逆)のShared Memoryの読み込みに失敗する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6054&#34; target=&#34;_blank&#34;&gt;#6054&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::interprocess::message_queue&lt;/code&gt;クラスリファレンスのtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5772&#34; target=&#34;_blank&#34;&gt;#5772&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトコンストラクトした&lt;code&gt;mapped_region&lt;/code&gt;のアドレスが&lt;code&gt;NULL&lt;/code&gt;でない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5738&#34; target=&#34;_blank&#34;&gt;#5738&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;`interprocess::named_semaphore::removePの戻り値がPOSIX環境で逆になっている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5622&#34; target=&#34;_blank&#34;&gt;#5622&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_wmi_class_attribute&lt;/code&gt;関数がwindows server 2003でハングする(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5552&#34; target=&#34;_blank&#34;&gt;#5552&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boost.Interprocessの&lt;code&gt;scoped_ptr&lt;/code&gt;は&lt;code&gt;detail::do_swap&lt;/code&gt;を要求するが、&lt;code&gt;detail/utilities.hpp&lt;/code&gt;がインクルードされていない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5518&#34; target=&#34;_blank&#34;&gt;#5518&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_memory_object::remove&lt;/code&gt;関数が成功時に&lt;code&gt;false&lt;/code&gt;を返している(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4655&#34; target=&#34;_blank&#34;&gt;#4655&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NDEBUG&lt;/code&gt;指定すると&lt;code&gt;interprocess::managed_mapped_file&lt;/code&gt;でsegvが発生する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4452&#34; target=&#34;_blank&#34;&gt;#4452&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;STLPort使用時に、Interprocessにある&lt;code&gt;char_traits&lt;/code&gt;の前方宣言がC4099警告を起こす問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4383&#34; target=&#34;_blank&#34;&gt;#4383&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&#34;enumeral and non-enumeral type in conditional expression&#34;警告の抑制(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4297&#34; target=&#34;_blank&#34;&gt;#4297&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;/code&gt;実装でのtimed functionがPOSIXの要求を満たすように修正した：どんな状況においても、&lt;code&gt;mutex&lt;/code&gt;が即時にロックできない場合、この関数がタイムアウトで失敗してはならない。&lt;code&gt;mutex&lt;/code&gt;が即時にロックできない場合、&lt;code&gt;abs_timeout&lt;/code&gt;パラメータの有効性をチェックする必要はない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;detail/memory_util.hpp&lt;/code&gt;が余計な&lt;code&gt;;&lt;/code&gt;があるためエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6347&#34; target=&#34;_blank&#34;&gt;#6347&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice&lt;/code&gt; / &lt;code&gt;splice_after&lt;/code&gt;に関するドキュメントの間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6223&#34; target=&#34;_blank&#34;&gt;#6223&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intrusive::unordered&lt;/code&gt;と&lt;code&gt;-std=c++0x&lt;/code&gt;の組み合わせでコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6153&#34; target=&#34;_blank&#34;&gt;#6153&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正ならびに警告解消&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Androidプラットフォームで&lt;code&gt;lexical_cast(wchar_t)&lt;/code&gt;のコンパイルができない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6127&#34; target=&#34;_blank&#34;&gt;#6127&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;が&lt;code&gt;void*&lt;/code&gt;のとき、コンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6132&#34; target=&#34;_blank&#34;&gt;#6132&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cwchar&lt;/code&gt;がないプラットフォームで、&lt;code&gt;lexical_cast&lt;/code&gt;がコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6159&#34; target=&#34;_blank&#34;&gt;#6159&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不完全型への変換でコンパイルエラーが発生するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6182&#34; target=&#34;_blank&#34;&gt;#6182&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;VS2005 &lt;code&gt;/Zc:wchar_t&lt;/code&gt;オプション付きでコンパイルできない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6186&#34; target=&#34;_blank&#34;&gt;#6186&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lexical_cast&lt;/code&gt;のオーヴァーフロー処理が正常に動作しない場合がある(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6193&#34; target=&#34;_blank&#34;&gt;#6193&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ある条件下でユーザー型から&lt;code&gt;ostream&lt;/code&gt;への変換関数を与えても&lt;code&gt;lexical_cast&lt;/code&gt;が&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外を送出するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6264&#34; target=&#34;_blank&#34;&gt;#6264&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;64ビット環境下での警告抑制(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6290&#34; target=&#34;_blank&#34;&gt;#6290&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;から&lt;code&gt;ostream&lt;/code&gt;への変換関数を与えても、&lt;code&gt;vector&lt;/code&gt;が空の場合に&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外が送出される(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6298&#34; target=&#34;_blank&#34;&gt;#6298&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc3.4.4(cygwin)環境下で&lt;code&gt;BOOST_NO_STD_WSTRING&lt;/code&gt;がマクロ定義されている場合に、&lt;code&gt;lexical_cast&lt;/code&gt;内で&lt;code&gt;BOOST_LCAST_NO_WCHAR&lt;/code&gt;が定義されるためコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6400&#34; target=&#34;_blank&#34;&gt;#6400&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不正な入力シーケンスの検出時に&lt;code&gt;MultiByteToWideChar&lt;/code&gt;を不正に使用していた問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;が複数書いてあってGCCの&lt;code&gt;-std=c++11&lt;/code&gt;モードでコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6417&#34; target=&#34;_blank&#34;&gt;#6417&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;のドキュメントに戻り値の型が記載されていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6183&#34; target=&#34;_blank&#34;&gt;#6183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCで、セキュリティ関連のデバッグモードに関するマクロの書き方が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6185&#34; target=&#34;_blank&#34;&gt;#6185&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの関数に&lt;code&gt;inline&lt;/code&gt;指定がされていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6395&#34; target=&#34;_blank&#34;&gt;#6395&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;クラステンプレートのテンプレートパラメータTに対してムーブコンストラクタを定義しようとするとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6396&#34; target=&#34;_blank&#34;&gt;#6396&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#property-tree&#34; name=&#34;property-tree&#34;&gt;Property Tree&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XMLの書き込みで、適切な&lt;code&gt;attribute&lt;/code&gt;エンコーディングが使用されない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4840&#34; target=&#34;_blank&#34;&gt;#4840&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;が埋め込まれたフィールドがあると、そこで文字列が途切れてしまう(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5259&#34; target=&#34;_blank&#34;&gt;#5259&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rapidxml.hpp&lt;/code&gt;にある&lt;code&gt;alloc_func&lt;/code&gt;の&lt;code&gt;typedef&lt;/code&gt;をVC++系のコンパイラが探索できない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5281&#34; target=&#34;_blank&#34;&gt;#5281&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;プリミティヴ型をデータとして使う場合にコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5944&#34; target=&#34;_blank&#34;&gt;#5944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::property_tree::ptree_bad_data::data&amp;lt;T&amp;gt;()&lt;/code&gt;関数は&lt;code&gt;const&lt;/code&gt;であるべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5757&#34; target=&#34;_blank&#34;&gt;#5757&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptree::sort()&lt;/code&gt;がコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5710&#34; target=&#34;_blank&#34;&gt;#5710&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel Compiler XEおよびVS 2010でProperty Treeがコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5307&#34; target=&#34;_blank&#34;&gt;#5307&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spirit 2.5.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vitaly Budovskiのパッチを統合し、2進浮動小数点数のパーサーとジェネレータを追加&lt;/li&gt;
&lt;li&gt;レキサの&lt;code&gt;stream type&lt;/code&gt;が&lt;code&gt;wchar_t&lt;/code&gt;だった場合に、&lt;code&gt;lex::lexertl::generate_static_dfa&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6253&#34; target=&#34;_blank&#34;&gt;#6253&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qi::token(min, max)&lt;/code&gt; もしくは &lt;code&gt;qi::tokenid(min, max)&lt;/code&gt; を使用してレキサで解析した際に、トークンの範囲にマッチすることを可能にした。どちらのパーサーも、範囲[min, max]のあらゆるトークンIDにマッチする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt;、&lt;code&gt;Kleene&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;plus&lt;/code&gt;などのような複合ジェネレータで&lt;code&gt;center(num)[a]&lt;/code&gt;と&lt;code&gt;center(num, g)&lt;/code&gt;を使用する際の問題を修正 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;repository::karma::subrule&lt;/code&gt;が壊れていたので修正(Lee Clagettの&lt;a href=&#34;http://thread.gmane.org/gmane.comp.parsers.spirit.general/24395&#34; target=&#34;_blank&#34;&gt;パッチ&lt;/a&gt;に感謝する)&lt;/li&gt;
&lt;li&gt;Spirit.Karmaのサンプルを修正(Lee Clagettのパッチに感謝する)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi pass iterator&lt;/code&gt;の&lt;code&gt;clear_queue&lt;/code&gt;で、&lt;code&gt;checking&lt;/code&gt;ポリシーはクリアしても、&lt;code&gt;storage&lt;/code&gt;ポリシーはクリアしてなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6368&#34; target=&#34;_blank&#34;&gt;#6368&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Spirit.Karmaにおいて、コンテナを保持しているバリアントをシーケンス(&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;)の中でジェネレータとして使用した際の問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCCのシンボル可視化に対応(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2309&#34; target=&#34;_blank&#34;&gt;#2309&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ロックのオプションに関するドキュメントを記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2639&#34; target=&#34;_blank&#34;&gt;#2639&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LinuxのSun 5.9でコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3639&#34; target=&#34;_blank&#34;&gt;#3639&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;winscw(CodeWarrior)でコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3762&#34; target=&#34;_blank&#34;&gt;#3762&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boost.ThreadとネイティブスレッドAPIとの組み合わせに関するドキュメントを記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3885&#34; target=&#34;_blank&#34;&gt;#3885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promise::set_wait_callback()&lt;/code&gt;のドキュメントで誤記があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3975&#34; target=&#34;_blank&#34;&gt;#3975&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::thread::id&lt;/code&gt;のストリーム出力の際のフォーマット設定に、&lt;code&gt;io_state_saver&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4048&#34; target=&#34;_blank&#34;&gt;#4048&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不要なシンボル可視化の指定により警告が出ていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4315&#34; target=&#34;_blank&#34;&gt;#4315&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenVMSのDECCXXコンパイラで動作するようworkaroundを導入(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4480&#34; target=&#34;_blank&#34;&gt;#4480&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_ref&lt;/code&gt;の&lt;code&gt;operator&amp;lt;=&lt;/code&gt;のドキュメントで「&lt;code&gt;operator&amp;gt;=&lt;/code&gt;」と誤記していたので修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4819&#34; target=&#34;_blank&#34;&gt;#4819&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future.hpp&lt;/code&gt;がVisual C++環境で&lt;code&gt;/clr&lt;/code&gt;オプションを付けるとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5040&#34; target=&#34;_blank&#34;&gt;#5040&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++0x環境でBoost.Threadを使用すると、&lt;code&gt;try_lock&lt;/code&gt;/&lt;code&gt;lock&lt;/code&gt;でクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5423&#34; target=&#34;_blank&#34;&gt;#5423&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;の&lt;code&gt;timed_lock&lt;/code&gt;/&lt;code&gt;lock_shared&lt;/code&gt;で競合が発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5502&#34; target=&#34;_blank&#34;&gt;#5502&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;がWindows CE環境で動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5594&#34; target=&#34;_blank&#34;&gt;#5594&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel Compiler環境で、&lt;code&gt;thread::id&lt;/code&gt;のコピーコンストラクトができないというコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5617&#34; target=&#34;_blank&#34;&gt;#5617&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5739&#34; target=&#34;_blank&#34;&gt;#5739&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スレッドの生成に失敗した際にリソースリークが発生していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5826&#34; target=&#34;_blank&#34;&gt;#5826&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ThreadProxy&lt;/code&gt;で例外が発生するとリソースリークする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5839&#34; target=&#34;_blank&#34;&gt;#5839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GLIBCシステム上で&lt;code&gt;hardware_concurrency()&lt;/code&gt;を計算するのに&lt;code&gt;get_nprocs()&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6100&#34; target=&#34;_blank&#34;&gt;#6100&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boost.ThreadとBoost.Moveを一緒に使用すると発生するコンパイルエラーを解消(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6141&#34; target=&#34;_blank&#34;&gt;#6141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recursive_mutex&lt;/code&gt;のconfigマクロ名をtypoしていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6168&#34; target=&#34;_blank&#34;&gt;#6168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique_lock&lt;/code&gt;がSunStudio環境でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6175&#34; target=&#34;_blank&#34;&gt;#6175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable&lt;/code&gt;と&lt;code&gt;mutex&lt;/code&gt;が、&lt;code&gt;EINTR&lt;/code&gt;シグナルが発生した場合にエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6200&#34; target=&#34;_blank&#34;&gt;#6200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Clang 3.0のC++11モードで、&lt;code&gt;shared_lock&lt;/code&gt;がコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6207&#34; target=&#34;_blank&#34;&gt;#6207&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Clang 3.0のC++11モードで、&lt;code&gt;try_lock_wrapper&lt;/code&gt;がコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6208&#34; target=&#34;_blank&#34;&gt;#6208&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラがムーブに対応していない場合、デフォルトではBoost.Moveによるエミュレーションを行わないようにした。有効にしたい場合は、&lt;code&gt;BOOST_UNORDERED_USE_MOVE&lt;/code&gt;でdefineする(&lt;a href=&#34;https://svn.boost.org/trac/boost/tickets/6167&#34; target=&#34;_blank&#34;&gt;#6167&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/tickets/6311&#34; target=&#34;_blank&#34;&gt;#6311&lt;/a&gt;)。Boost.Moveがまだ、要素の型に関わらずムーブしてしまうための対処。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unordered_map::iterator&lt;/code&gt;のインクリメントで発生するGCCの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6370&#34; target=&#34;_blank&#34;&gt;#6370&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古い標準ライブラリを使用してC++11のサポートを強化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_49_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.0での、&lt;code&gt;int&lt;/code&gt;から&lt;code&gt;unsigned int&lt;/code&gt;への暗黙の型変換で出ていた警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6258&#34; target=&#34;_blank&#34;&gt;#6258&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SHA1の実装として、長いメッセージの処理に対応(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5325&#34; target=&#34;_blank&#34;&gt;#5325&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCでの、random_generatorで出ていた警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6118&#34; target=&#34;_blank&#34;&gt;#6118&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;LLVM Clang 2.8&lt;/li&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.2, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X: &lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++ 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;/li&gt;
&lt;li&gt;GCC 4.2.1, 32 and 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX: &lt;ul&gt;
&lt;li&gt;QCC, C++0x mode: 4.4.2, 4.6.1, 4.6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;ul&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.6.2 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.2 &lt;/li&gt;
&lt;li&gt;pgCC: 11.9 &lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0 &lt;/li&gt;
&lt;li&gt;PathScale: 4.0.8 &lt;/li&gt;
&lt;li&gt;Visual Age 10.1 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang from subversion &lt;/li&gt;
&lt;li&gt;Intel 11.1, 12.0 &lt;/li&gt;
&lt;li&gt;GCC: 4.4.4 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++ 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode, mingw: 4.5.2&lt;/li&gt;
&lt;li&gt;GCC, mingw 64-bit: 4.4.7, 4.5.4, 4.6.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX: &lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 32 and 64 bit &lt;/li&gt;
&lt;li&gt;Solaris: &lt;/li&gt;
&lt;li&gt;Sun 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak, Norihisa Fujita&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.50.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_50_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_50_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.50.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_50_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_50_0.qbk&lt;/a&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_50_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_50_0.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/algorithm/&#34; target=&#34;_blank&#34;&gt;Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;便利なジェネリックアルゴリズム集&lt;/li&gt;
&lt;li&gt;作者：Marshall Clow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/functional/overloaded_function/&#34; target=&#34;_blank&#34;&gt;Functional/OverloadedFunction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;オーバーロードされた複数の関数を単一の関数オブジェクトにまとめるライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/local_function/&#34; target=&#34;_blank&#34;&gt;LocalFunction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;ローカルな関数を他の関数内や任意のスコープ内で定義するライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/utility/identity_type/&#34; target=&#34;_blank&#34;&gt;Utility/IdentityType&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;でラップすることでマクロのパラメータとして渡せるようにするライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#fusion&#34;&gt;Fusion(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#scope-exit&#34;&gt;ScopeExit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+が付いているものは本家のリリースノートには記載されていない変更。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インクルードが抜けていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6702&#34; target=&#34;_blank&#34;&gt;#6702&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCでコンストラクタの転送がコンパイルエラーになっていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6535&#34; target=&#34;_blank&#34;&gt;#6535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boostの開発者ガイドラインに従い、ファイル名を短くした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6196&#34; target=&#34;_blank&#34;&gt;#6196&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;※ファイル名は31文字以下でなければならない：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/accumulators/statistics/p_square_cumulative_distribution.hpp&lt;/code&gt; →  &lt;code&gt;boost/accumulators/statistics/p_square_cumul_dist.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/accumulators/statistics/weighted_p_square_cumlative_distribution.hpp&lt;/code&gt; → &lt;code&gt;boost/accumulators/statistics/weighted_p_square_cuml_dist.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#array&#34; name=&#34;array&#34;&gt;Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Hashのサポートを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6791&#34; target=&#34;_blank&#34;&gt;#6791&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EPOLL_OUT&lt;/code&gt;イベントのために、&lt;code&gt;epoll_reactor&lt;/code&gt;のバックエンドを遅延登録するよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_reactor&lt;/code&gt;の帯域外データが、前回のリリースでは不完全な修正によって壊れていたので修正した&lt;/li&gt;
&lt;li&gt;Boost.AsioのSSLラッパーを、&lt;code&gt;OPENSSL_NO_ENGINE&lt;/code&gt;のdefineに配慮するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6432&#34; target=&#34;_blank&#34;&gt;#6432&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11のムーブセマンティクスをサポートするWindowsコンパイラ(g++など)のために、&lt;code&gt;windows::object_handle&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand&lt;/code&gt;の再スケジューリングのパフォーマンスを向上&lt;/li&gt;
&lt;li&gt;g++4.7のC++11モードでのコンパイルをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6620&#34; target=&#34;_blank&#34;&gt;#6620&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;g++4.7で名称が変更になった&lt;code&gt;std::chrono::monotonic_clock&lt;/code&gt; → &lt;code&gt;std::chrono::steady_clock&lt;/code&gt;の差異に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;が&lt;code&gt;concurrency_hint&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;で構築した場合に、&lt;code&gt;signal_set&lt;/code&gt;が配信されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6657&#34; target=&#34;_blank&#34;&gt;#6657&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#bimap&#34; name=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;怪しいBoost.Serializationへの依存を削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3868&#34; target=&#34;_blank&#34;&gt;#3868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5749&#34; target=&#34;_blank&#34;&gt;#5749&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map views&lt;/code&gt;に&lt;code&gt;key_type&lt;/code&gt;と&lt;code&gt;mapped_type&lt;/code&gt;の&lt;code&gt;typedef&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6031&#34; target=&#34;_blank&#34;&gt;#6031&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;ただし後方互換性のために&lt;code&gt;data_type&lt;/code&gt;は残してある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::chrono::process_real_cpu_clock::now()&lt;/code&gt;が32ビット版Windowsでオーバーフローする問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6361&#34; target=&#34;_blank&#34;&gt;#6361&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clocks.hpp&lt;/code&gt;の警告を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6628&#34; target=&#34;_blank&#34;&gt;#6628&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_clock.hpp&lt;/code&gt;で&lt;code&gt;pthread.h&lt;/code&gt;のインクルードが抜けていたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6666&#34; target=&#34;_blank&#34;&gt;#6666&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;変数シャドウの警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6738&#34; target=&#34;_blank&#34;&gt;#6738&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非推奨だったv2を削除。v3への完全移行が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正の結果、より問題が発生したため  &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6131&#34; target=&#34;_blank&#34;&gt;#6131&lt;/a&gt; の修正を取り消した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;, &lt;code&gt;front_extended_deque&lt;/code&gt;, &lt;code&gt;back_extended_deque&lt;/code&gt;のドキュメントを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数の点のための&lt;code&gt;projected point strategy&lt;/code&gt;の戻り値型が間違っていたので修正&lt;/li&gt;
&lt;li&gt;セグメントとポリゴンの交差でのいくつかの信頼性問題を修正&lt;/li&gt;
&lt;li&gt;無効な交差点を出力から除外した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_polygon&lt;/code&gt;の&lt;code&gt;disjoint&lt;/code&gt;が、不正に&lt;code&gt;true&lt;/code&gt;を返してしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multi pointの代替シンタックスパッチを適用(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6585&#34; target=&#34;_blank&#34;&gt;#6585&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;MULTIPOINT ((10 40), (40 30), (20 20), (30 10))&#34;&lt;/code&gt;と&lt;code&gt;&#34;MULTIPOINT (10 40, 40 30, 20 20, 30 10)&#34;&lt;/code&gt;のどちらでも書けるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;と&lt;code&gt;linestring&lt;/code&gt;の&lt;code&gt;distance&lt;/code&gt;計算が間違っていたので修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6584&#34; target=&#34;_blank&#34;&gt;#6584&lt;/a&gt;, &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5730&#34; target=&#34;_blank&#34;&gt;#5730&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デカルトの3次元座標から球状の赤道3次元座標への変換を行うパッチを適用(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6166&#34; target=&#34;_blank&#34;&gt;#6166&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;無効な交差点が出力されてしまう問題。報告より前にtrunkで修正されていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6696&#34; target=&#34;_blank&#34;&gt;#6696&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*polygon&lt;/code&gt;/&lt;code&gt;*polygon&lt;/code&gt;のための新たなアルゴリズム&lt;code&gt;touches&lt;/code&gt;を追加(OGC SF準拠)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clear_vertex&lt;/code&gt;が自己閉路の&lt;code&gt;vertex&lt;/code&gt;でセグメンテーションフォルトする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4622&#34; target=&#34;_blank&#34;&gt;#4622&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;biconnected_components()&lt;/code&gt;による&lt;code&gt;lowpoint map&lt;/code&gt;の計算が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6033&#34; target=&#34;_blank&#34;&gt;#6033&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism()&lt;/code&gt;関数で、Iso Mappingがリセットされない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6242&#34; target=&#34;_blank&#34;&gt;#6242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cube_topology&lt;/code&gt;のドキュメントに、3次元なのに2次元と書かれていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6435&#34; target=&#34;_blank&#34;&gt;#6435&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph_parallel&lt;/code&gt;のドキュメントにある&lt;code&gt;small_world_1_70_6_0p02.png&lt;/code&gt;が壊れていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6520&#34; target=&#34;_blank&#34;&gt;#6520&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;のコピーコンストラクタが&lt;code&gt;local_vertex&lt;/code&gt;/&lt;code&gt;local_edge&lt;/code&gt;プロパティをコピーしていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6564&#34; target=&#34;_blank&#34;&gt;#6564&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isormorphism()&lt;/code&gt;関数に巨大なグラフを与えると計算に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6573&#34; target=&#34;_blank&#34;&gt;#6573&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dijkstra Visitor Concept&lt;/code&gt;のドキュメントにあったtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6583&#34; target=&#34;_blank&#34;&gt;#6583&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;DistanceMap&#34;&lt;/code&gt; → &lt;code&gt;&#34;WeightMap&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components()&lt;/code&gt;がMSVC8でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6647&#34; target=&#34;_blank&#34;&gt;#6647&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;の実装で、依存名に&lt;code&gt;typename&lt;/code&gt;が付いていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6656&#34; target=&#34;_blank&#34;&gt;#6656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_straight_line_drawing.hpp&lt;/code&gt;で&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;のインクルードが抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6707&#34; target=&#34;_blank&#34;&gt;#6707&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_straight_line_drawing.hpp&lt;/code&gt;の&lt;code&gt;boost::intersects()&lt;/code&gt;関数でシンボルの重複エラーが出ていたので&lt;code&gt;inline&lt;/code&gt;を付けた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6708&#34; target=&#34;_blank&#34;&gt;#6708&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constified subgraph&lt;/code&gt;を&lt;code&gt;write_graphviz_dp()&lt;/code&gt;を使用して出力できない(コンパイルエラーになる)問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6739&#34; target=&#34;_blank&#34;&gt;#6739&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;reverse_graphに対するboost::get()がg++でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6858&#34; target=&#34;_blank&#34;&gt;#6858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bron_kerbosch_all_cliques()はVertexIndexGraphConceptを満たす必要がないので要件を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6892&#34; target=&#34;_blank&#34;&gt;#6892&lt;/a&gt;)その他、Tracに含まれていないいくつかの警告とバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;と&lt;code&gt;std::tuple&lt;/code&gt;のサポートを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6806&#34; target=&#34;_blank&#34;&gt;#6806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCにおける&lt;code&gt;-Wfloat-equal&lt;/code&gt;警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6771&#34; target=&#34;_blank&#34;&gt;#6771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/functional/detail/container_fwd.hpp&lt;/code&gt;に非推奨である旨の警告を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iostreams&#34; name=&#34;iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gzipのサポート (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5908&#34; target=&#34;_blank&#34;&gt;#5908&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最新のBoost.Filesystem及びBoost.Testのテストに更新&lt;/li&gt;
&lt;li&gt;幾つかのドキュメントのエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6530&#34; target=&#34;_blank&#34;&gt;#6530&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6650&#34; target=&#34;_blank&#34;&gt;#6650&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform_iterator&lt;/code&gt;のドキュメントでの&lt;code&gt;result_of&lt;/code&gt;の使い方が正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5127&#34; target=&#34;_blank&#34;&gt;#5127&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterator_facade::operator-&amp;gt;&lt;/code&gt;がproxy referencesに対して正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5697&#34; target=&#34;_blank&#34;&gt;#5697&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Conceptのバグ修正とVisual Studio 2010向けのワークアラウンド(&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/78496&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert.cpp&lt;/code&gt;のテストケース修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/78498&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bad_lexical_cast&lt;/code&gt;例外は現在グローバルに見えるので&lt;code&gt;-fvisibility=hidden&lt;/code&gt;でコンパイルされていてもキャッチできる&lt;/li&gt;
&lt;li&gt;例外を無効にしていてもコンパイル、使用が可能になった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5800&#34; target=&#34;_blank&#34;&gt;#5800&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::iterator_range&amp;lt;character_type*&amp;gt;&lt;/code&gt;の変換に対してメモリ使用量を減らしバグを修正しパフォーマンスを改善した&lt;/li&gt;
&lt;li&gt;バグと警告の修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6645&#34; target=&#34;_blank&#34;&gt;#6645&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6562&#34; target=&#34;_blank&#34;&gt;#6562&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6812&#34; target=&#34;_blank&#34;&gt;#6812&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6852&#34; target=&#34;_blank&#34;&gt;#6852&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6717&#34; target=&#34;_blank&#34;&gt;#6717&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6670&#34; target=&#34;_blank&#34;&gt;#6770&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6504&#34; target=&#34;_blank&#34;&gt;#6504&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STLPortを使用した場合でのビルドの問題を修正&lt;/li&gt;
&lt;li&gt;Boost.Systemが依存ライブラリとなった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTFエンコード関数が&lt;code&gt;OutputIterator&lt;/code&gt;に間違った型の値を渡している (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6635&#34; target=&#34;_blank&#34;&gt;#6635&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ICUの名前空間をつけ忘れている箇所がある (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6833&#34; target=&#34;_blank&#34;&gt;#6833&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数学定数を第1級クラスに：ビルトインへの便利なアクセス方法も含む&lt;/li&gt;
&lt;li&gt;Benjamin Sobottaにより、OwenのT関数とSkew標準分散を追加&lt;/li&gt;
&lt;li&gt;Hankel関数を追加&lt;/li&gt;
&lt;li&gt;K R Walkerのパッチをベースにして&lt;code&gt;0.0&lt;/code&gt;における&lt;code&gt;nonfinite_num_put&lt;/code&gt;のフォーマットを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6627&#34; target=&#34;_blank&#34;&gt;#6627&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ユーザー定義型でもスレッドセーフになるように定数初期化メカニズムを変更、また&lt;code&gt;long double&lt;/code&gt;型でなくともユーザー定義型の定数が最大精度を得られるように変更例えば&lt;code&gt;long double&lt;/code&gt;が64または80bitであっても、128bit有理数への近似がユーザー定義型で動作する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y[sub 8.5](4π)&lt;/code&gt;で&lt;code&gt;bessel_iy&lt;/code&gt;関数が&lt;code&gt;NaN&lt;/code&gt;になってしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;eUML : eUMLで遷移表としてのみ定義されたフロントエンドのためのよりよい構文。&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;注意：破壊的変更！&amp;lt;/font&amp;gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正： グラフ構築がシーケンスとして定義されたinitial_stateでのみ動作していた&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;Terminate&lt;/code&gt;か&lt;code&gt;Interrupt&lt;/code&gt;状態のために定義されたフラグが、これらの状態のブロッキング関数を壊さないようにした&lt;/li&gt;
&lt;li&gt;バグ修正： いくつかの領域からの多重遅延イベント(multiple deferred event)が、全てのケースで動作するとは限らなかった&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;visitor&lt;/code&gt;が、サブマシンに値渡しを行っていた&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;no_transition&lt;/code&gt;が、それ自身にイベントを送るサブマシンのためには呼ばれなかった&lt;/li&gt;
&lt;li&gt;GCCの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;エラーレポートの強化(Leo Goodstadt氏の&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/77827&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ヘルプメッセージ中のオプション値の名前のカスタマイズをサポート (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4781&#34; target=&#34;_blank&#34;&gt;#4781&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCC4.7でのコンパイルエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6790&#34; target=&#34;_blank&#34;&gt;#6790&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#property-map&#34; name=&#34;property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメント中の&lt;code&gt;get()&lt;/code&gt;の戻り値が正しくなかったのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6539&#34; target=&#34;_blank&#34;&gt;#6539&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map_traits&lt;/code&gt;のドキュメントが&lt;code&gt;reference&lt;/code&gt;に関して記述されていなかったのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6721&#34; target=&#34;_blank&#34;&gt;#6721&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;N3276を実装しているコンパイラにかぎり、&lt;code&gt;decltype&lt;/code&gt;ベースの&lt;code&gt;result_of&lt;/code&gt;を使うようにした&lt;/li&gt;
&lt;li&gt;C++11向けに, &lt;code&gt;mpl::eval_if_c&lt;/code&gt;と&lt;code&gt;mpl::if_c&lt;/code&gt;の評価型が強制的に&lt;code&gt;bool&lt;/code&gt;になるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__forceinline&lt;/code&gt;による、「指定された関数がインライン展開の対象として選択されましたが、実際にはインライン展開されませんでした。」という警告がmsvcで出ないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::ratio&lt;/code&gt;がデフォルト設定でコンパイルされない問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6498&#34; target=&#34;_blank&#34;&gt;#6498&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#scope-exit&#34; name=&#34;scope-exit&#34;&gt;ScopeExit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャプチャにカンマ区切りリストを使用できるように可変長マクロを使用 (後方互換性のためにシーケンス構文でのキャプチャもサポート)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_&lt;/code&gt;の使用によるオブジェクトのキャプチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void&lt;/code&gt;の使用による空のキャプチャをサポート&lt;/li&gt;
&lt;li&gt;コンパイラがC++11のlambdaをサポートする場合、&lt;code&gt;BOOST_SCOPE_EXIT_ALL&lt;/code&gt;で暗黙的なlambdaに似たキャプチャをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;廃止予定だったヘッダを除去した。このヘッダは2,3年間そのままだったが、そろそろクリーンアップの時期になったからである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock_guard&lt;/code&gt;/&lt;code&gt;unique_lock&lt;/code&gt;に対応する&lt;code&gt;unlock_guard&lt;/code&gt;のリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/1850&#34; target=&#34;_blank&#34;&gt;#1850&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;に&lt;code&gt;timed_lock&lt;/code&gt;と&lt;code&gt;timed_lock_shared&lt;/code&gt;メンバをリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2637&#34; target=&#34;_blank&#34;&gt;#2637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ポータブル及びポータブルではないスレッド属性の対応の提案(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2741&#34; target=&#34;_blank&#34;&gt;#2741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_lock_guard&lt;/code&gt;のリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/3567&#34; target=&#34;_blank&#34;&gt;#3567&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boost.Moveベースのムーブセマンティクスへの変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6194&#34; target=&#34;_blank&#34;&gt;#6194&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;時間関係のインターフェースをBoost.Chronoで実装(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6195&#34; target=&#34;_blank&#34;&gt;#6195&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;Howard Hinnantが提案したインターフェースに&lt;code&gt;shared_mutex&lt;/code&gt;を拡張(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6217&#34; target=&#34;_blank&#34;&gt;#6217&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;をコンパイラがサポートしている場合&lt;code&gt;noexcept&lt;/code&gt;を指定(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6224&#34; target=&#34;_blank&#34;&gt;#6224&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locks&lt;/code&gt;に明示的な&lt;code&gt;bool&lt;/code&gt;型への変換を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6226&#34; target=&#34;_blank&#34;&gt;#6226&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promise&lt;/code&gt;にアロケータ指定可能なコンストラクタを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6228&#34; target=&#34;_blank&#34;&gt;#6228&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;C++11標準で定められた例外の通知方法に変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6230&#34; target=&#34;_blank&#34;&gt;#6230&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;のデストラクタは&lt;code&gt;joinable&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す場合に&lt;code&gt;terminate&lt;/code&gt;を呼ぶ様に変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6266&#34; target=&#34;_blank&#34;&gt;#6266&lt;/a&gt;)(C++11標準への追従)(&lt;strong&gt;破壊的変更&lt;/strong&gt;)→ デフォルトではこれまで通りの&lt;code&gt;detach&lt;/code&gt;動作。&lt;code&gt;BOOST_THREAD_PROVIDES_THREAD_DESTRUCTOR_CALLS_TERMINATE_IF_JOINABLE&lt;/code&gt;を&lt;code&gt;define&lt;/code&gt;することで新しい動作に切り替えることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;はムーブ代入時に&lt;code&gt;joinable&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す場合に&lt;code&gt;terminate&lt;/code&gt;を呼ぶように変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6269&#34; target=&#34;_blank&#34;&gt;#6269&lt;/a&gt;)(C++11標準への追従)(&lt;strong&gt;破壊的変更&lt;/strong&gt;)→ デフォルトではこれまで通りの動作。&lt;code&gt;BOOST_THREAD_PROVIDES_THREAD_MOVE_ASSIGN_CALLS_TERMINATE_IF_JOINABLE&lt;/code&gt;を&lt;code&gt;define&lt;/code&gt;することで新しい動作に切り替えることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::id&lt;/code&gt;用の&lt;code&gt;hash&lt;/code&gt;の特殊化を用意(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6272&#34; target=&#34;_blank&#34;&gt;#6272&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;条件変数の&lt;code&gt;wait&lt;/code&gt;系関数用の&lt;code&gt;cv_status&lt;/code&gt;列挙型を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6273&#34; target=&#34;_blank&#34;&gt;#6273&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;BasicLockagle&lt;/code&gt;要件に関する記述を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6231&#34; target=&#34;_blank&#34;&gt;#6231&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;C++11標準向けに&lt;code&gt;once_flag&lt;/code&gt;を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6342&#34; target=&#34;_blank&#34;&gt;#6342&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;に&lt;code&gt;mutex&lt;/code&gt;と&lt;code&gt;release&lt;/code&gt;メンバが不足していたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6671&#34; target=&#34;_blank&#34;&gt;#6671&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;に時間をメンバに取るコンストラクタが不足していたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6672&#34; target=&#34;_blank&#34;&gt;#6672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;用のフリー関数版&lt;code&gt;swap&lt;/code&gt;が無かったのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6675&#34; target=&#34;_blank&#34;&gt;#6675&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;に&lt;code&gt;result_type&lt;/code&gt;とアロケータを取るコンストラクタが不足していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task::reset()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Itanium環境でリンク等に失敗する(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2575&#34; target=&#34;_blank&#34;&gt;#2575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;をカスケードした状態で&lt;code&gt;thread::id&lt;/code&gt;を使用しながら&lt;code&gt;join&lt;/code&gt;すると適切に&lt;code&gt;join&lt;/code&gt;されない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4345&#34; target=&#34;_blank&#34;&gt;#4345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_USE_DLL&lt;/code&gt;及び&lt;code&gt;BOOST_THREAD_USE_LIB&lt;/code&gt;は重大であるにもかかわらずアンドキュメントである(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4921&#34; target=&#34;_blank&#34;&gt;#4921&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;中で&lt;code&gt;pthread_exit&lt;/code&gt;を呼ぶと&lt;code&gt;terminate&lt;/code&gt;が呼ばれるのをドキュメント化(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5013&#34; target=&#34;_blank&#34;&gt;#5013&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::get_id&lt;/code&gt;が非常に遅い(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5173&#34; target=&#34;_blank&#34;&gt;#5173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;を&lt;code&gt;interrupt&lt;/code&gt;すると&lt;code&gt;unknown_exception&lt;/code&gt;が投げられる(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5351&#34; target=&#34;_blank&#34;&gt;#5351&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;read lockが行われている状態で前の&lt;code&gt;upgrade_lock&lt;/code&gt;が解放を行っても&lt;code&gt;upgrade_lock&lt;/code&gt;が取得を行わない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5516&#34; target=&#34;_blank&#34;&gt;#5516&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_future&amp;lt;T&amp;gt;::get()&lt;/code&gt;が正しくない戻り値型になっている(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5990&#34; target=&#34;_blank&#34;&gt;#5990&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がムーブした結果を受け取る事ができない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6174&#34; target=&#34;_blank&#34;&gt;#6174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SunStudioにおいて&lt;code&gt;unique_future&lt;/code&gt;のムーブがコンパイルエラーになる(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6222&#34; target=&#34;_blank&#34;&gt;#6222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11環境で&lt;code&gt;shared_lock&lt;/code&gt;のムーブ代入が正しく動作しない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6673&#34; target=&#34;_blank&#34;&gt;#6673&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;の&lt;code&gt;try_lock_upgrade_until&lt;/code&gt;が正しく動作しない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6674&#34; target=&#34;_blank&#34;&gt;#6674&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ML上で指摘された&lt;code&gt;task_object&lt;/code&gt;のムーブコンストラクタの存在下で&lt;code&gt;task_object&lt;/code&gt;のコピーコンストラクタが削除される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;と&lt;code&gt;unordered_multimap&lt;/code&gt;の等価比較関数を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;を実装 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6857&#34; target=&#34;_blank&#34;&gt;#6857&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wfloat-equal&lt;/code&gt;と&lt;code&gt;-Wshadow&lt;/code&gt;による警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6190&#34; target=&#34;_blank&#34;&gt;#6190&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6771&#34; target=&#34;_blank&#34;&gt;#6771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bcpで正しく展開されない名前空間の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6905&#34; target=&#34;_blank&#34;&gt;#6905&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SunStudio12.3でのコンパイルエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6784&#34; target=&#34;_blank&#34;&gt;#6784&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Bucket allocationのために内部の一部を変更&lt;/li&gt;
&lt;li&gt;すべての変更点は /doc/html/unordered/changes.html#unordered.changes.boost_1_50_0 を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.3.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部のメンバを &lt;code&gt;base_iteration_context&lt;/code&gt; コンストラクタで初期化していなかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6758&#34; target=&#34;_blank&#34;&gt;#6758&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force_include&lt;/code&gt; で追加したインクルードファイルが &lt;code&gt;#line&lt;/code&gt; ディレクティブを失敗させる問題の修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6838&#34; target=&#34;_blank&#34;&gt;#6838&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;testwave に &lt;code&gt;--forceinclude&lt;/code&gt; オプションのテスト用サポートを入れて，#6838 の修正確認のためのテストケースを追加&lt;/li&gt;
&lt;li&gt;wave ドライバのビルドに失敗するのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6870&#34; target=&#34;_blank&#34;&gt;#6870&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非常に醜い&lt;code&gt;lexical_cast&lt;/code&gt;ハックをまぁ我慢できるものに置きかえた&lt;/li&gt;
&lt;li&gt;C++11で問題になるMPL &lt;code&gt;assert&lt;/code&gt;を&lt;code&gt;static assert&lt;/code&gt;に置きかえたことで、 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6846&#34; target=&#34;_blank&#34;&gt;#6846&lt;/a&gt; が修正された。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode:4.3.4, 4.4.3, 4.5.4, 4.6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1 (32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX&lt;ul&gt;
&lt;li&gt;QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテスト済みコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;Visual Age: 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5 with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode, mingw: 4.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V12.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1 (32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solaris&lt;ul&gt;
&lt;li&gt;Sun: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak, Flast, DigitalGhost&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.51.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_51_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_51_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.51.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_51_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_51_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_51_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_51_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_51_0/libs/context/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Context&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;コンテキストスイッチライブラリ&lt;/li&gt;
&lt;li&gt;作者：Oliver Kowalke&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#algorithm&#34; name=&#34;algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_sorted_until&lt;/code&gt;の値が重複している区間に対する挙動をC++11標準の挙動に修正&lt;/li&gt;
&lt;li&gt;範囲バージョンが無かった検索アルゴリズムに範囲バージョンを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unhex&lt;/code&gt;は不正な入力に対してBoost.Exceptionを用いて例外を送出するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ip::tcp::iostream&lt;/code&gt;のC++11での非互換性を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7162&#34; target=&#34;_blank&#34;&gt;#7162&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの属性名との相互作用を防ぐために、ユーザー定義マクロをアンダースコアで装飾(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6415&#34; target=&#34;_blank&#34;&gt;#6415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;cctype&amp;gt;&lt;/code&gt;が抜けていたのを追加。MinGWで必要。&lt;/li&gt;
&lt;li&gt;GCCのARM CPU向け組み込み&lt;code&gt;atomic&lt;/code&gt;機能が利用可能な場合はそれを使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7140&#34; target=&#34;_blank&#34;&gt;#7140&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand&lt;/code&gt;のデストラクト時に何もしない(no-op)ようにした。この修正によって、&lt;code&gt;strand&lt;/code&gt;オブジェクトが関連付けられている&lt;code&gt;io_service&lt;/code&gt;オブジェクトが破棄されたあとでも破棄可能になる&lt;/li&gt;
&lt;li&gt;新しいバージョンのglibcの場合、&lt;code&gt;epoll_create1()&lt;/code&gt;関数を提供するようにした。だけどこの関数は常に&lt;code&gt;ENOSYS&lt;/code&gt;で失敗する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7012&#34; target=&#34;_blank&#34;&gt;#7012&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SSLの初期化に失敗した場合に例外を投げるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6303&#34; target=&#34;_blank&#34;&gt;#6303&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffered_write_stream&lt;/code&gt;の回帰バグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6310&#34; target=&#34;_blank&#34;&gt;#6310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linuxのx86、x86-64プラットフォームでの様々な小さいパフォーマンス向上を実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11標準であることが明示されていないC++11向けマクロを非推奨にした。新しいマクロを使用するのが好ましい&lt;ul&gt;
&lt;li&gt;編集注: 非推奨マクロ及び新しいマクロへの対応表は次を参照　&lt;a href=&#34;http://www.boost.org/doc/libs/1_51_0/libs/config/doc/html/boost_config/boost_macro_reference.html#boost_config.boost_macro_reference.boost_deprecated_macros&#34; target=&#34;_blank&#34;&gt;Boost Deprecated Macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::wstring&lt;/code&gt;がサポートされない環境でのコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6241&#34; target=&#34;_blank&#34;&gt;#6241&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HP uX上で&lt;code&gt;pthread_getcpuclockid&lt;/code&gt;が定義されてないことによるコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6918&#34; target=&#34;_blank&#34;&gt;#6918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントのC++0xをC++11に更新 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6987&#34; target=&#34;_blank&#34;&gt;#6987&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point.hpp&lt;/code&gt;のBoost.Systemへの依存を削除 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7041&#34; target=&#34;_blank&#34;&gt;#7041&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point.hpp&lt;/code&gt;の&lt;code&gt;time.h&lt;/code&gt;と&lt;code&gt;CLOCK_REALTIME&lt;/code&gt;への依存を削除 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7042&#34; target=&#34;_blank&#34;&gt;#7042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;が定義されていてもコンパイルできる様に修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7058&#34; target=&#34;_blank&#34;&gt;#7058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clock_string&amp;lt;thread_clock&amp;gt;&lt;/code&gt;が返す文字列のtypoを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7069&#34; target=&#34;_blank&#34;&gt;#7069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;クロスコンパイルのために&lt;code&gt;WinError.h&lt;/code&gt;を小文字に修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7081&#34; target=&#34;_blank&#34;&gt;#7081&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Graphが提供する型の内部プロパティ、バンドルプロパティをリファクタリングし、名前付きパラメータをクリーンアップ&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compressed_sparse_row_graph&lt;/code&gt;の旧スタイル内部プロパティ(非バンドルプロパティ)を有効にした&lt;/li&gt;
&lt;li&gt;バンドルプロパティは、すべてのグラフ型とアダプタで動作しなければならない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;バンドルプロパティのドキュメント誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6993&#34; target=&#34;_blank&#34;&gt;#6993&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;双方向CSRグラフに対して&lt;code&gt;BGL_FORALL_VERTICES&lt;/code&gt;を使用できるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7002&#34; target=&#34;_blank&#34;&gt;#7002&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cpp&lt;/code&gt;ファイルで定義される&lt;code&gt;graphml_reader&lt;/code&gt;クラスを無名名前空間で囲み、不必要にエクスポートされないようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7023&#34; target=&#34;_blank&#34;&gt;#7023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;その他Tracに載っていないバグおよび警告の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11標準のスマートポインタをサポート&lt;/li&gt;
&lt;li&gt;暗黙の型変換を回避するために、&lt;code&gt;hash_value()&lt;/code&gt;関数をSFINAEを使用するよう修正&lt;/li&gt;
&lt;li&gt;新しいコンフィグマクロを使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンスの改善、&lt;code&gt;boost::array&amp;lt;character_type, N&amp;gt;&lt;/code&gt;と&lt;code&gt;std::array&amp;lt;character_type, N&amp;gt;&lt;/code&gt;のメモリ使用量の削減&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volatile&lt;/code&gt;修飾された入力値に対する実行時アサーションを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7157&#34; target=&#34;_blank&#34;&gt;#7157&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンフィグマクロを使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;受け取り可能なイベントとして&lt;code&gt;boost::any&lt;/code&gt;(&lt;a href=&#34;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&#34; target=&#34;_blank&#34;&gt;参照&lt;/a&gt;)と&lt;code&gt;kleene&lt;/code&gt;(&lt;a href=&#34;http://www.boost.org/doc/libs/1_51_0_beta1/libs/msm/doc/HTML/ch03s04.html#kleene-event&#34; target=&#34;_blank&#34;&gt;参照&lt;/a&gt;)をサポート&lt;/li&gt;
&lt;li&gt;バグ修正：&lt;code&gt;fsm&lt;/code&gt;内部テーブルでの&lt;code&gt;none&lt;/code&gt;(複合)イベントでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;バグ修正：&lt;code&gt;euml::defer_leading&lt;/code&gt;のスタックオーバーフローを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ptoro式の擬似的なパラメータパックの展開をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コンパイルエラーのためのワークアラウンド ： テンプレートパラメータ定数&lt;code&gt;n1&lt;/code&gt;に依存した部分特殊化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7075&#34; target=&#34;_blank&#34;&gt;#7075&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンフィグマクロを使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MinGW/gcc4.5でリンクエラーが起きるのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4258&#34; target=&#34;_blank&#34;&gt;#4258&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;プロセスが終了する際に&lt;code&gt;set_tss_data&lt;/code&gt;でアクセス違反が発生する問題を修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4885&#34; target=&#34;_blank&#34;&gt;#4885&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intelコンパイラで&lt;code&gt;/debug:parallel&lt;/code&gt;を使用した際に&lt;code&gt;mutex&lt;/code&gt;が永遠に待ち続けるのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6931&#34; target=&#34;_blank&#34;&gt;#6931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ヘッダファイルが不足している問題を修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7044&#34; target=&#34;_blank&#34;&gt;#7044&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0&lt;/code&gt;で&lt;code&gt;thread::op==&lt;/code&gt;,&lt;code&gt;thread::op!=&lt;/code&gt;の定義がされない問題を修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7052&#34; target=&#34;_blank&#34;&gt;#7052&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current_thread_tls_key&lt;/code&gt;の初期化順を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7066&#34; target=&#34;_blank&#34;&gt;#7066&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::allocator_arg&lt;/code&gt;の多重定義エラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7074&#34; target=&#34;_blank&#34;&gt;#7074&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;64bit Windows環境下での警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7078&#34; target=&#34;_blank&#34;&gt;#7078&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6130&#34; target=&#34;_blank&#34;&gt;#6130&lt;/a&gt;で適用された&lt;code&gt;condition_variable::timed_wait&lt;/code&gt;へのworkaroundを巻き戻し (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7089&#34; target=&#34;_blank&#34;&gt;#7089&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11コンパイラでC++03のアロケータを使用する場合の、コンストラクト／デストラクトの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7100&#34; target=&#34;_blank&#34;&gt;#7100&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;例外を無効にしている環境でコンパイルできるように&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;GCC 3.4をサポートするようにSFINAEを調整 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7175&#34; target=&#34;_blank&#34;&gt;#7175&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;新しいコンフィグマクロを使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_51_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexing_exception&lt;/code&gt;でのメモリへの不正な書き込みを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7050&#34; target=&#34;_blank&#34;&gt;#7050&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;プリプロセス済み行にディレクティブがあっても処理をしないように修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7159&#34; target=&#34;_blank&#34;&gt;#7159&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;編集注: この挙動は標準で定められた挙動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コマンドラインオプションを &lt;code&gt;--c++0x&lt;/code&gt; から &lt;code&gt;--c++11&lt;/code&gt; に変更&lt;ul&gt;
&lt;li&gt;編集注: &lt;code&gt;--c++0x&lt;/code&gt; オプションは使用されない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;GCC: 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.4.7, 4.5.4, 4.6.3&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテスト済みコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;LLVM Clang: 3.0, subversion&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;Visual Age: 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang, C++11 mode: subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.6.3, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: V12.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solaris&lt;ul&gt;
&lt;li&gt;Sun: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Kohei Takahashi&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.52.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_52_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_52_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.52.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_52_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_52_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_52_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_52_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#datetime&#34;&gt;Date Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#result-of&#34;&gt;Result Of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オリジナルのtagを実装する時に既存のタグを継承すると、依存性がその意図した通りに解決されない長年の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7409&#34; target=&#34;_blank&#34;&gt;#7409&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;訳者注：このバグは2008年の6月から存在していた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.4のSFINAEがあまりにもバギーだったので、&lt;code&gt;BOOST_NO_SFINAE_EXPR&lt;/code&gt;を定義した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrono I/Oの強化。これはHoward Hinnantによって提案された機能である(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5980&#34; target=&#34;_blank&#34;&gt;#5980&lt;/a&gt;, &lt;a href=&#34;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&#34; target=&#34;_blank&#34;&gt;proposal&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&lt;/code&gt;フォーマット状態のためのio state saverを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5981&#34; target=&#34;_blank&#34;&gt;#5981&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;低レベルのI/O機能群を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7059&#34; target=&#34;_blank&#34;&gt;#7059&lt;/a&gt;)非推奨機能&lt;/li&gt;
&lt;li&gt;Boost.Chrono 1.2.xに含まれるchrono i/o。これはバージョン2.0でリファクタリングされている。&lt;/li&gt;
&lt;li&gt;chrono i/o ： マニピュレータ&lt;code&gt;duration_short&lt;/code&gt;および&lt;code&gt;duration_long&lt;/code&gt;を非推奨とする。代わりにパラメータ化された&lt;code&gt;duration_fmt&lt;/code&gt;、もしくは名前変更されたマニピュレータ&lt;code&gt;duration_style::symbol&lt;/code&gt;および&lt;code&gt;duration_style::prefix&lt;/code&gt;を推奨する。&lt;/li&gt;
&lt;li&gt;chrono i/o ： &lt;code&gt;duration_punct&amp;lt;&amp;gt;&lt;/code&gt;ファセットを非推奨とする。ローカライズ用途には、&lt;code&gt;get_duration_style&lt;/code&gt;フリー関数で情報を取得し、&lt;code&gt;duration_units&lt;/code&gt;ファセットを使用する必要がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CHRONO_VERSION==2&lt;/code&gt;の場合には、非推奨機能は使用できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠 ： &lt;code&gt;constexpr duration&lt;/code&gt;から非&lt;code&gt;const&lt;/code&gt;ローカル変数への代入で、未解決シンボルになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7381&#34; target=&#34;_blank&#34;&gt;#7381&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修正なし&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrono_io.hpp&lt;/code&gt; ： &lt;code&gt;operator&amp;lt;&amp;lt;(ostream&amp;amp; os, …)&lt;/code&gt;によって&lt;code&gt;os&lt;/code&gt;の状態が変更される。バージョン2.0で提供される新たなI/Oではこの問題が解決される。新たなバージョンに移行する必要がある(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6871&#34; target=&#34;_blank&#34;&gt;#6871&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Betaリリース後に追加された修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラが&lt;code&gt;constexpr&lt;/code&gt;を対応しているが、標準ライブラリインターフェースが&lt;code&gt;constexpr&lt;/code&gt;に対応していない場合のコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7479&#34; target=&#34;_blank&#34;&gt;#7479&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stable_vector&lt;/code&gt;のテンプレートコード膨張と型安全性を改良した&lt;/li&gt;
&lt;li&gt;doxygenドキュメントを改良するために、シーケンスコンテナのtypedefを変更し、関数の並びを変えた&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;ドキュメントのリンクを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6615&#34; target=&#34;_blank&#34;&gt;#6615&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;flat_multimap&lt;/code&gt;のドキュメントで、比較述語の型が&lt;code&gt;std::less&amp;lt; std::pair&amp;lt; Key, T&amp;gt; &amp;gt;&lt;/code&gt;と記述されていたので、&lt;code&gt;std::less&amp;lt;Key&amp;gt;&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7139&#34; target=&#34;_blank&#34;&gt;#7139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string::insert()&lt;/code&gt;が返すイテレータが、標準と異なり、+1の位置を返すようになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7215&#34; target=&#34;_blank&#34;&gt;#7215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;範囲を引数にとる&lt;code&gt;Container::insert()&lt;/code&gt;メンバ関数が、C++11からイテレータを返す仕様になったためその機能を実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7232&#34; target=&#34;_blank&#34;&gt;#7232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;範囲を引数にとる&lt;code&gt;vector::insert()&lt;/code&gt;メンバ関数が、逆順で挿入されたりクラッシュしたりする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7269&#34; target=&#34;_blank&#34;&gt;#7269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;set::insert(ordered_unique_range_t, …)&lt;/code&gt;の挙動がおかしかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7439&#34; target=&#34;_blank&#34;&gt;#7439&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11の、範囲を引数にとる&lt;code&gt;insert()&lt;/code&gt;メンバ関数がイテレータを返すという仕様を実装し、ほとんどのコンテナの挿入コードをクリーンナップした&lt;/li&gt;
&lt;li&gt;エイリアシングエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#datetime&#34; name=&#34;datetime&#34;&gt;Date Time&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DATE_TIME_NO_LIB&lt;/code&gt;をドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6077&#34; target=&#34;_blank&#34;&gt;#6077&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nth_as_str()&lt;/code&gt;関数内で、AND条件をORで書いていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7022&#34; target=&#34;_blank&#34;&gt;#7022&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7234&#34; target=&#34;_blank&#34;&gt;#7234&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCでのアライメント警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタとムーブ代入演算子を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7330&#34; target=&#34;_blank&#34;&gt;#7330&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;C++11で右辺値参照が使える環境のみサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grid_graph&lt;/code&gt;のドキュメントに「2次元以上」と記載していたが、そんな制限はなかったのでドキュメントを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6950&#34; target=&#34;_blank&#34;&gt;#6950&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;辺の&lt;a href=&#34;http://stackoverflow.com/questions/2592769/what-is-the-relaxation-condition-in-graph-theory&#34; target=&#34;_blank&#34;&gt;緩和条件(relaxation condition)&lt;/a&gt;を判定する&lt;code&gt;relax.hpp&lt;/code&gt;の&lt;code&gt;relax()&lt;/code&gt;関数において、先行マップが変更された場合でも&lt;code&gt;false&lt;/code&gt;を返してしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7226&#34; target=&#34;_blank&#34;&gt;#7226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バンドルプロパティに継承関係のあるクラスを指定した場合、基本クラスのメンバを使おうとするとコンパイルエラーになっていた。バンドルプロパティの取得・設定には、指定した型のみではなく継承関係にある型を許可するよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7308&#34; target=&#34;_blank&#34;&gt;#7308&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テンプレートパラメータの&lt;code&gt;Graph&lt;/code&gt;から直接&lt;code&gt;null_vertex()&lt;/code&gt;を呼び出していたのを、&lt;code&gt;graph_traits&lt;/code&gt;を経由するよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7327&#34; target=&#34;_blank&#34;&gt;#7327&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt;/&lt;code&gt;indirect_cmp&lt;/code&gt;の戻り値型が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7338&#34; target=&#34;_blank&#34;&gt;#7338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コア数を計算する&lt;code&gt;weighted_core_numbers()&lt;/code&gt;アルゴリズムで、正しい使用方法にも関わらず&lt;code&gt;out_of_range&lt;/code&gt;例外が送出されていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7341&#34; target=&#34;_blank&#34;&gt;#7341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lookup_one_property_internal&lt;/code&gt;プロパティクラスが&lt;code&gt;type&lt;/code&gt;型を持っていなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7378&#34; target=&#34;_blank&#34;&gt;#7378&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astar_search_no_init()&lt;/code&gt;の名前付き引数バージョンから通常のバージョンを呼び出す際に、&lt;code&gt;color&lt;/code&gt;パラメータと&lt;code&gt;index_map&lt;/code&gt;パラメータを逆に渡していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7380&#34; target=&#34;_blank&#34;&gt;#7380&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;/&lt;code&gt;dijkstra_shortest_paths_no_color_map()&lt;/code&gt;において、無限の重さは正しく動作する保証がないことをドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7398&#34; target=&#34;_blank&#34;&gt;#7398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正(#&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7428&#34; target=&#34;_blank&#34;&gt;7428&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アクシデントにより&lt;code&gt;enum&lt;/code&gt;のサポートが削除されたのをリストア (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7437&#34; target=&#34;_blank&#34;&gt;#7437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;新しい浮動小数点数用&lt;code&gt;hasher&lt;/code&gt;を用意&lt;ul&gt;
&lt;li&gt;バイナリを&lt;code&gt;hash&lt;/code&gt;することで多くのプラットフォームで高速に動作するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;に&lt;code&gt;shrink_by()&lt;/code&gt;関数と&lt;code&gt;advise()&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;ABI破壊&amp;lt;/font&amp;gt;： &lt;code&gt;circular buffer index&lt;/code&gt;で&lt;code&gt;message_queue&lt;/code&gt;を再実装(古い実装では、順序付けされた配列を過度にコピーしていた)。これはパフォーマンスを大幅に改善するが、ABIは壊れる。古い挙動とABIが必要な場合は、&lt;code&gt;boost/interprocess/detail/workaround.hpp&lt;/code&gt;の&lt;code&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/code&gt;をundefineすること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;への挿入時間を改善。一般的なケースでの優先探索を回避(配列と循環バッファ両方の構成)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interproces_sharable_mutex&lt;/code&gt;と&lt;code&gt;interproces_condition_any&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;のパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;整数のオーバーフローチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンストラクタで関数が呼ばれて１つ要素が食われていたのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5825&#34; target=&#34;_blank&#34;&gt;#5825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_input_iterator&lt;/code&gt;のドキュメントのエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7194&#34; target=&#34;_blank&#34;&gt;#7194&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5825&#34; target=&#34;_blank&#34;&gt;#5825&lt;/a&gt; を修正するに伴い、不必要な関数の実行は行われなくなった。例えば、終端イテレータの生成に関数は実行されない。つまり、イテレータの参照外しとインクリメントをN回実行すれば関数はN+1回ではなくN回実行される。古い挙動に関連しているユーザコードは調整する必要がある。&lt;ul&gt;
&lt;li&gt;訳者注：このバグの修正方法では参照外しとインクリメントはセットで行わなければならない。つまり、イテレータのインクリメントだけを行なって読み飛ばそうとすると&lt;code&gt;BOOST_ASSERT&lt;/code&gt;によりアサートが発生する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexycal_cast(const CharType* chars, std::size_t count)&lt;/code&gt; というオーバーロードを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6663&#34; target=&#34;_blank&#34;&gt;#6663&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7228&#34; target=&#34;_blank&#34;&gt;#7228&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1.51.0でMSVC2003でコンパイルできなくなったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7255&#34; target=&#34;_blank&#34;&gt;#7255&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与えられた分布に対して&lt;code&gt;moments(mean, variance, …)&lt;/code&gt;が定義されていない場合、それを求めようとするとコンパイルエラーも例外も吐かずに数学的に間違っている値を返したりする問題を修正。長い議論の末、全ての&lt;code&gt;moments&lt;/code&gt;は数学的なポリシーに沿わない場合、&lt;code&gt;domain_error&lt;/code&gt;を投げる（例外が無効な場合はNaNを返す）ことに既になっていた。よってこのバグはそれにあたって解決されている。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7177&#34; target=&#34;_blank&#34;&gt;#7177&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;多くの分布で不正な値を検出するルーチンが間違っていた問題を &lt;code&gt;check_out_of_range&lt;/code&gt; を実装できる機能を追加したことで修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6934&#34; target=&#34;_blank&#34;&gt;#6934&lt;/a&gt;) 。これに付随して、不正な値を検出できていなかった分布が更に発見され、同時に修正されている。&lt;/li&gt;
&lt;li&gt;Hankel 関数で &lt;code&gt;x &amp;lt; 0&lt;/code&gt; かつ&lt;code&gt;ν&lt;/code&gt; が奇数の場合に不正な値が返される問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7135&#34; target=&#34;_blank&#34;&gt;#7135&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::math::isfinite&lt;/code&gt; が &lt;code&gt;unsigned int 0&lt;/code&gt; に対して &lt;code&gt;false&lt;/code&gt; を返す問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6517&#34; target=&#34;_blank&#34;&gt;#6517&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCC 4.4で &lt;code&gt;bessel_ik.hpp&lt;/code&gt; 内の匿名&lt;code&gt;enum&lt;/code&gt;による問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6362&#34; target=&#34;_blank&#34;&gt;#6362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boostによる必要なマクロ等の定義後に &lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt; をインクルードしていたことによって Boost.TR1 がうまく動かない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7053&#34; target=&#34;_blank&#34;&gt;#7053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Golden ratio等を数学的な定数のリストに新たに追加する提案をfixedとしてマーク。このチケットは相当に古く、現在のバージョンでは phi として既に実装されているため。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2693&#34; target=&#34;_blank&#34;&gt;#2693&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdf&lt;/code&gt;/&lt;code&gt;pdf&lt;/code&gt;/&lt;code&gt;quantile&lt;/code&gt; による 問題のある分布のチェックが不正だった問題は、不正な値を検出するルーチンの改良によって既に修正された。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6937&#34; target=&#34;_blank&#34;&gt;#6937&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;浮動小数点数のビット数が小さい特定のコンパイラでそれによって例外が投げられる問題のcompiler workaround (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7099&#34; target=&#34;_blank&#34;&gt;#7099&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decltype&lt;/code&gt;ベースの&lt;code&gt;boost::result_of&lt;/code&gt;が動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ボロノイ図に関する拡張機能を追加&lt;/li&gt;
&lt;li&gt;新たな&lt;code&gt;Segment&lt;/code&gt;コンセプトを導入&lt;/li&gt;
&lt;li&gt;コンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;データパラメータのプリミティブな変換は &lt;code&gt;key&lt;/code&gt; でインデックスされたスロットを持つこともできるようになった&lt;/li&gt;
&lt;li&gt;プリミティブな変換は &lt;code&gt;const&lt;/code&gt; 参照されていないtemporary expressionにも適用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;とBoost.Rangeに存在する幾つかのフリー関数について、呼び出し可能な関数オブジェクトの型を追加&lt;/li&gt;
&lt;li&gt;Protoのexpression nodesにMPLのalgorithmが動くようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::pass_through&lt;/code&gt; プリミティブ変換は、&lt;code&gt;Domain&lt;/code&gt; テンプレートパラメータを新たに取るようになった。これによって結果の表現についてのドメインを指定できるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short_name&lt;/code&gt; と &lt;code&gt;long_name&lt;/code&gt; 関数はそれぞれ &lt;code&gt;symbol&lt;/code&gt; と &lt;code&gt;prefix&lt;/code&gt; 関数に置き換えられた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;非推奨&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ratio_string&amp;lt;&amp;gt;::short_name&lt;/code&gt; と &lt;code&gt;ratio_string&amp;lt;&amp;gt;::long_name&lt;/code&gt; は非推奨となった。それぞれ &lt;code&gt;ratio_string&amp;lt;&amp;gt;::symbol&lt;/code&gt; と &lt;code&gt;ratio_string&amp;lt;&amp;gt;::prefix&lt;/code&gt; を使用することが推奨される。非推奨となった関数は1.55まで提供される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ベータリリース後に追加された修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラが&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;に対応しているが、標準ライブラリが&lt;code&gt;std::u16string&lt;/code&gt;と&lt;code&gt;std::u32string&lt;/code&gt;に対応していない場合のコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7478&#34; target=&#34;_blank&#34;&gt;#7478&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#result-of&#34; name=&#34;result-of&#34;&gt;Result Of&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decltype&lt;/code&gt;が”満足に動作する”のであれば&lt;code&gt;boost::result_of&lt;/code&gt;は&lt;code&gt;decltype&lt;/code&gt;で実装される。つまりコンパイラがn3276の提案を実装していることが要求される&lt;ul&gt;
&lt;li&gt;現在、n3276を実装しているのは非常に最近のコンパイラであるClang 3.1のみである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::result_of&lt;/code&gt;が&lt;code&gt;decltype&lt;/code&gt;で実装されているのであればn3436で実装される&lt;ul&gt;
&lt;li&gt;n3436の提案は&lt;code&gt;result_of&lt;/code&gt;でSFINAEできるようにする提案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;廃止予定機能&amp;lt;/font&amp;gt;： Boost 1.50.0からBoost 1.55.0まで利用可能な廃止予定機能。これらの廃止予定機能は、Boost 1.52.0までデフォルトで提供される。非推奨機能が必要ない場合は、&lt;code&gt;BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0&lt;/code&gt;をdefineすればよい。1.53.0移行で廃止予定機能を使いたい場合は、&lt;code&gt;BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0&lt;/code&gt;をdefineすること。これらの廃止予定機能は、Boost 1.55.0までの提供なので、1年以内に新機能に移行すること。&lt;ul&gt;
&lt;li&gt;時間関連の関数にBoost.DateTimeライブラリを使わず、代わりにChronoオーバーロードを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_VERSION==3&lt;/code&gt;での破壊的変更(Boost 1.53.0からのデフォルト)： いくつかの新機能は、インタフェースが同じで挙動が異なる。&lt;code&gt;BOOST_THREAD_VERSION&lt;/code&gt;が3の場合でも、マクロによる動作切り替えで限定的に2の機能を提供する。廃止予定機能はBoost 1.55.0まで利用可能である。&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;C++11準拠&amp;amp;破壊的変更&amp;lt;/font&amp;gt;： &lt;code&gt;unique_future&lt;/code&gt;を、C++11に従って&lt;code&gt;future&lt;/code&gt;に名前変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6229&#34; target=&#34;_blank&#34;&gt;#6229&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;C++11準拠&amp;amp;破壊的変更&amp;lt;/font&amp;gt;： &lt;code&gt;thread&lt;/code&gt;のデストラクタは、&lt;code&gt;join&lt;/code&gt;可能な状態で呼び出されたら&lt;code&gt;terminate&lt;/code&gt;を呼ぶようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6266&#34; target=&#34;_blank&#34;&gt;#6266&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;C++11準拠&amp;amp;破壊的変更&amp;lt;/font&amp;gt;： &lt;code&gt;thread&lt;/code&gt;のムーブ代入は、&lt;code&gt;join&lt;/code&gt;可能な状態で呼び出されたら&lt;code&gt;terminate&lt;/code&gt;を呼ぶようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6269&#34; target=&#34;_blank&#34;&gt;#6269&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： 不足していた&lt;code&gt;async()&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4710&#34; target=&#34;_blank&#34;&gt;#4710&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;notify_all_at_thread_exit&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7283&#34; target=&#34;_blank&#34;&gt;#7283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;recursive mutex&lt;/code&gt;の&lt;code&gt;try_lock&lt;/code&gt;に&lt;code&gt;noexcept&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7345&#34; target=&#34;_blank&#34;&gt;#7345&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_specific_ptr&lt;/code&gt;のキーの本質、計算量、論拠をドキュメント化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2361&#34; target=&#34;_blank&#34;&gt;#2361&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_specific_ptr&lt;/code&gt;の2つの問題を修正： 1. dllでスレッドが使われる場合、スレッドローカルストレージのクリーンナップコードが呼ばれる前にdllがアンロードされるとクラッシュする。 2. 微妙にリークしてる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2797&#34; target=&#34;_blank&#34;&gt;#2797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future.hpp&lt;/code&gt;のコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5274&#34; target=&#34;_blank&#34;&gt;#5274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WIndows CE 6.0上でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5431&#34; target=&#34;_blank&#34;&gt;#5431&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once&lt;/code&gt;が、いくつかのプラットフォームで動作しない可能性があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5752&#34; target=&#34;_blank&#34;&gt;#5752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threadライブラリのビルドで、&lt;code&gt;date_time&lt;/code&gt;が自動的にビルドされない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7045&#34; target=&#34;_blank&#34;&gt;#7045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;誤字修正：ドキュメントで&lt;code&gt;interrupt_point()&lt;/code&gt;と書いていたところを&lt;code&gt;interruption_point()&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7173&#34; target=&#34;_blank&#34;&gt;#7173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;libs以下にあるテストコード中で、&lt;code&gt;#include &amp;lt;libs/thread/src/pthread/timeconv.inl&amp;gt;&lt;/code&gt;のようなパス指定でインクルードを行っていた。これはCMakeで問題になるので、相対パスでインクルードするようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7200&#34; target=&#34;_blank&#34;&gt;#7200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;インライン関数に&lt;code&gt;dllimport&lt;/code&gt;を指定していて警告が出ていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7220&#34; target=&#34;_blank&#34;&gt;#7220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::sleep_for()&lt;/code&gt;が&lt;code&gt;interrupt()&lt;/code&gt;に対応してなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7238&#34; target=&#34;_blank&#34;&gt;#7238&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バージョン3関連のドキュメントtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7245&#34; target=&#34;_blank&#34;&gt;#7245&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;win32/thread_primitives.hpp&lt;/code&gt;の、Intel C++ compiler 12.1での警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7272&#34; target=&#34;_blank&#34;&gt;#7272&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared mutex&lt;/code&gt;に対する&lt;code&gt;lock&lt;/code&gt;と&lt;code&gt;shared lock&lt;/code&gt;へのアクセスには優先順位がないことを明記(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7284&#34; target=&#34;_blank&#34;&gt;#7284&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/thread/future.hpp&lt;/code&gt;がHPUXでコンパイルエラーになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7329&#34; target=&#34;_blank&#34;&gt;#7329&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/code&gt;が動作していなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7336&#34; target=&#34;_blank&#34;&gt;#7336&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がアロケータを指定された場合、アロケータへの参照をメンバに保持していたので、コピーを保持するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7349&#34; target=&#34;_blank&#34;&gt;#7349&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がアロケータを指定された場合、デストラクタを呼んでいなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7350&#34; target=&#34;_blank&#34;&gt;7350&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inplace_solve()&lt;/code&gt;のパフォーマンス向上(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4024&#34; target=&#34;_blank&#34;&gt;#4024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coordinate_matrix::sort()&lt;/code&gt;がGCC 4.7でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7363&#34; target=&#34;_blank&#34;&gt;#7363&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;std::inplace_merge()&lt;/code&gt;を使用していたが、&lt;code&gt;index_triple&lt;/code&gt;のイテレータはプロキシオブジェクトを返すため、標準アルゴリズムの要件を満たしていなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要素の追加時に既存のノードを再利用できる時は再利用するようにした&lt;/li&gt;
&lt;li&gt;その他、実装のリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区間を&lt;code&gt;erase&lt;/code&gt;するときにクラッシュしていたのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7471&#34; target=&#34;_blank&#34;&gt;#7471&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;警告、エラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6118&#34; target=&#34;_blank&#34;&gt;#6118&lt;/a&gt;), (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6788&#34; target=&#34;_blank&#34;&gt;#6788&lt;/a&gt;), (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7375&#34; target=&#34;_blank&#34;&gt;#7375&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;536,870,912バイト以上のメッセージに対して&lt;code&gt;sha1.hpp&lt;/code&gt;が正しく計算できていなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7128&#34; target=&#34;_blank&#34;&gt;#7128&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::filesystem::create_directories()&lt;/code&gt; の仕様変更に応じて &lt;code&gt;util::create_directories()&lt;/code&gt; を新たに定義した&lt;/li&gt;
&lt;li&gt;直前の行が空のマクロの展開だけの場合、プリプロセス時の文脈が認識されなくなる、非常に発見しづらいバグを修正 （テスト t_9_023.cpp を追加）&lt;/li&gt;
&lt;li&gt;新たなオプション &lt;code&gt;--license=&amp;lt;file&amp;gt;&lt;/code&gt; を追加。これによって、生成される新しいファイル全ての先頭に対して &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; の中身をプリペンドできるようになった。これはPhoenixやFusionで使用されている部分的なプリプロセッシングの実装を簡単にする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt; オプションの動作を変更。以前はマクロ自体が無いものとして扱われていたが、この変更によってマクロ展開全てはスキップされず、引数の展開は行い、そのマクロ自身の展開のみ行わないようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Xpressive&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sub_match&lt;/code&gt;をBoost.Rangeで動作するようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7237&#34; target=&#34;_blank&#34;&gt;#7237&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;GCC: 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテスト済みコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Cray: 8.0&lt;/li&gt;
&lt;li&gt;LLVM Clang: from subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang:&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0, 12.1&lt;ul&gt;
&lt;li&gt;Visual Age: 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang, C++11 mode: subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: V12.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solaris&lt;ul&gt;
&lt;li&gt;Sun: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Kohei Takahashi, Akira Takahashi, manga_osyo, Nana Sakisaka(saki7)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.53.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_53_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_53_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.53.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_53_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_53_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Atomic&lt;ul&gt;
&lt;li&gt;Helge Bahmannによる、C++11スタイルの&lt;code&gt;atomic&lt;/code&gt;ライブラリ。Tim Blechmannによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine&lt;ul&gt;
&lt;li&gt;Oliver Kowalkeによるコルーチンライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lockfree&lt;ul&gt;
&lt;li&gt;Tim Blechmannによるロックフリーデータ構造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiprecision&lt;ul&gt;
&lt;li&gt;John MaddockとChristopher Kormanyosによる、拡張精度の算術型演算(浮動小数点数型、整数型、有理数型)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Odeint&lt;ul&gt;
&lt;li&gt;Karsten AhnertとMario Mulanskyによる、常微分方程式ライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#minmax&#34;&gt;MinMax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#range&#34;&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#string-algo&#34;&gt;String Algo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#array&#34; name=&#34;array&#34;&gt;Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::get&lt;/code&gt;と&lt;code&gt;std::get&lt;/code&gt;をサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7652&#34; target=&#34;_blank&#34;&gt;#7652&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#algorithm&#34; name=&#34;algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非ASCIIのコメントを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7781&#34; target=&#34;_blank&#34;&gt;#7781&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Knuth-Morris-Prattのドキュメントを更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7656&#34; target=&#34;_blank&#34;&gt;#7656&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの64ビットから32ビットへの変換警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7459&#34; target=&#34;_blank&#34;&gt;#7459&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントとコメントの小さな間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7761&#34; target=&#34;_blank&#34;&gt;#7761&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket::get_option()&lt;/code&gt;のドキュメントにある例で、古い関数を使用していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7562&#34; target=&#34;_blank&#34;&gt;#7562&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenSSLに合わせて、&lt;code&gt;SSL_CTX&lt;/code&gt;に使用する型を&lt;code&gt;long&lt;/code&gt;から&lt;code&gt;int&lt;/code&gt;に変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7209&#34; target=&#34;_blank&#34;&gt;#7209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のMinGWバージョンでは、&lt;code&gt;_snwprintf&lt;/code&gt;がコンパイルエラーとなるため、&lt;code&gt;swprintf&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7373&#34; target=&#34;_blank&#34;&gt;#7373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で&lt;code&gt;io_service&lt;/code&gt;のスレッドプールをシャットダウンするときに、デッドロックする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7552&#34; target=&#34;_blank&#34;&gt;#7552&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;修飾子を使うようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7797&#34; target=&#34;_blank&#34;&gt;#7797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UNIXドメインソケットの例で、&lt;code&gt;accept&lt;/code&gt;が致命的なエラーにならないよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7488&#34; target=&#34;_blank&#34;&gt;#7488&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトメモリアロケーションの振る舞いを改善するために、小さいブロックの再利用をする最適化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#bimap&#34; name=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;エラーメッセージを改善するために、&lt;code&gt;map_view_iterator&lt;/code&gt;をリファクタ&lt;/li&gt;
&lt;li&gt;情報で比較する際の&lt;code&gt;replace_&lt;/code&gt;(&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt;/&lt;code&gt;data&lt;/code&gt;)のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector_of&lt;/code&gt;ビューと&lt;code&gt;list_of&lt;/code&gt;ビューの&lt;code&gt;assign(size_type,value_type)&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector_of&lt;/code&gt;ビューの&lt;code&gt;operator[](size_type)&lt;/code&gt;と&lt;code&gt;at(size_type)&lt;/code&gt;の戻り値を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;非推奨&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Chrono 1.2.xに含まれていたchrono i/oを、2.0で完全にリファクタリングした&lt;/li&gt;
&lt;li&gt;chrono i/o : &lt;code&gt;duration_short&lt;/code&gt;、&lt;code&gt;duration_long&lt;/code&gt;マニピュレータを非推奨にした。その代わりに、パラメータ付きのフォーマットマニピュレータである&lt;code&gt;duration_fmt&lt;/code&gt;、もしくは名前変更したマニピュレータである&lt;code&gt;duration_symbol&lt;/code&gt;、&lt;code&gt;duration_prefix&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;li&gt;chrono i/o : &lt;code&gt;duration_punct&amp;lt;&amp;gt;&lt;/code&gt;ファセットを非推奨にした。代わりに、情報取得のために&lt;code&gt;get_duration_style&lt;/code&gt;フリー関数、ローカライズのために&lt;code&gt;duration_units&lt;/code&gt;ファセットを使用すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CHRONO_VERSION==2&lt;/code&gt;とした場合、非推奨機能は使用できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time_point&amp;lt;system_clock&amp;gt;&lt;/code&gt;の出力バージョンがコンパイルに失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7546&#34; target=&#34;_blank&#34;&gt;#7546&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&amp;lt;system_clock&amp;gt;&lt;/code&gt;の入力バージョンがコンパイルに失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7547&#34; target=&#34;_blank&#34;&gt;#7547&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;chrono i/oで時間の解析が不完全だった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7868&#34; target=&#34;_blank&#34;&gt;#7868&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list::const_iterator&lt;/code&gt;の&lt;code&gt;operator-&amp;gt;()&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7650&#34; target=&#34;_blank&#34;&gt;#7650&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;の挿入パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために、実験的にマルチアロケーションのインタフェースを再度変更(まだ実験)&lt;/li&gt;
&lt;li&gt;例外無効化の環境に対応&lt;/li&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARMのiOS、x86(32ビット)のMacOS Xのサポートを追加&lt;/li&gt;
&lt;li&gt;Win32のSEH上書き保護サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部リングが最小サイズ以下の場合(たとえば、1か2個の点)に、ポリゴンの生成を回避するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::disjoint&lt;/code&gt;へのセグメント縮退(Karsten Ahnertによるパッチ)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::difference&lt;/code&gt;で、正接のハンドリングが不足していた問題を修正(H2からの報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::for_each&lt;/code&gt;でのラムダを使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::comparable_distance&lt;/code&gt;の&lt;code&gt;point-linestring&lt;/code&gt;、&lt;code&gt;point-range&lt;/code&gt;、&lt;code&gt;point-polygon&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geometry::disjoint&lt;/code&gt;の組み合わせ： &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;ring&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multi_polygon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::intersects&lt;/code&gt;の組み合わせ： &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;ring&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multi_polygon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;様々なアルゴリズムの特殊バージョンと未実装バージョンを更新(以前のバージョンから引き続いての変更。これらは構造を簡略化し、より良いエラー報告をし、ドキュメント化の自動的に行う)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#gil&#34; name=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己代入の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4919&#34; target=&#34;_blank&#34;&gt;#4919&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kolmogorov_max_flow()&lt;/code&gt;がmax flow値を見つけてこない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3468&#34; target=&#34;_blank&#34;&gt;#3468&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7728&#34; target=&#34;_blank&#34;&gt;#7728&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アルゴリズムの要件が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4386&#34; target=&#34;_blank&#34;&gt;#4386&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_search()&lt;/code&gt;に、&lt;code&gt;on_finish_edge&lt;/code&gt;イベントを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5269&#34; target=&#34;_blank&#34;&gt;#5269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7428&#34; target=&#34;_blank&#34;&gt;#7428&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kamada_kawai_spring_layout.hpp&lt;/code&gt;のコメント誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7457&#34; target=&#34;_blank&#34;&gt;#7457&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph&lt;/code&gt;/&lt;code&gt;reverse_graph.hpp&lt;/code&gt;の不要なセミコロンを削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7467&#34; target=&#34;_blank&#34;&gt;#7467&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_graph&lt;/code&gt;に対する&lt;code&gt;add_vertex()&lt;/code&gt;関数のオーバーロードが曖昧になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7600&#34; target=&#34;_blank&#34;&gt;#7600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/graph/labeled_graph.hpp&lt;/code&gt;内の誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7648&#34; target=&#34;_blank&#34;&gt;#7648&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/graph/tiernan_all_cycles.hpp&lt;/code&gt;内の誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7684&#34; target=&#34;_blank&#34;&gt;#7684&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Graph&lt;/code&gt;コンセプトの、必須ではない関連型を要件から削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7741&#34; target=&#34;_blank&#34;&gt;#7741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_world_iterator&lt;/code&gt;のドキュメントに、デフォルト引数が記載されていない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7771&#34; target=&#34;_blank&#34;&gt;#7771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inserted_labeled_vertex()&lt;/code&gt;でプロパティが追加されていなかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7773&#34; target=&#34;_blank&#34;&gt;#7773&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Push Relabel Max Flowのドキュメント上のサンプルにあった誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7780&#34; target=&#34;_blank&#34;&gt;#7780&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Graph&lt;/code&gt;コンセプトのドキュメントで、&lt;code&gt;examples/undirected.cpp&lt;/code&gt;へのリンクが切れていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7787&#34; target=&#34;_blank&#34;&gt;#7787&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;その他、Tracにないいくつかのバグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数のグラフを含むGraphMLの読み込みをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A*&lt;/code&gt;検索の新バージョンを追加。具体的にはツリーや、同じ頂点を何度も通ることを許可するために、必要ならカラーマップを削除する。&lt;/li&gt;
&lt;li&gt;VF2 subgraph isomorphismアルゴリズムを追加(Flavio De Lorenziに感謝する！)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用可能な環境で&lt;code&gt;boost::int128_type&lt;/code&gt;と&lt;code&gt;boost::uint128_type&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;プラットフォームが標準の浮動小数点数関数を持っている場合は、自動推論を使用しないようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7221&#34; target=&#34;_blank&#34;&gt;#7221&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7470&#34; target=&#34;_blank&#34;&gt;#7470&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために、実験的にマルチアロケーションのインタフェースを再度変更(まだ実験)&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;li&gt;[&amp;lt;font color=&#34;red&#34;&amp;gt;ABI破壊&amp;lt;/font&amp;gt;] 効率改善のため、ノードプールアロケータを内部的に変更&lt;/li&gt;
&lt;li&gt;ファイルマッピングのデータ構造を作る際、小さいサイズを指定するとクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7795&#34; target=&#34;_blank&#34;&gt;#7795&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7174&#34; target=&#34;_blank&#34;&gt;#7174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;等値キーの要素が挿入される位置についてドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7529&#34; target=&#34;_blank&#34;&gt;#7529&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/intrusive/detail/has_member_function_callable_with.hpp&lt;/code&gt;でのコンパイルエラーを修正。&lt;code&gt;const&lt;/code&gt;付きの型を継承していた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7815&#34; target=&#34;_blank&#34;&gt;#7815&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;侵入コンテナのコンストラクタに、不足していた&lt;code&gt;explicit&lt;/code&gt;を付けた&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザー定義クラスのための、新たな文字型(&lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt;)検出アルゴリズム(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6786&#34; target=&#34;_blank&#34;&gt;#6786&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7582&#34; target=&#34;_blank&#34;&gt;#7582&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7831&#34; target=&#34;_blank&#34;&gt;#7831&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;の変換が、最適化の効かない書き方になっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7799&#34; target=&#34;_blank&#34;&gt;#7799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;g++で&lt;code&gt;-ftrapvオプション&lt;/code&gt; (trap overflow errors : オーバーフローを検知して&lt;code&gt;abort()&lt;/code&gt;させる)をつけるとエラーになるケースを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7814&#34; target=&#34;_blank&#34;&gt;#7814&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;セキュリティ関連のバグ修正。いくつかの不正なUTF-8シーケンスを、有効なものとして受け入れていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7743&#34; target=&#34;_blank&#34;&gt;#7743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsのコードページ名として不正な名前を使用していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7386&#34; target=&#34;_blank&#34;&gt;#7386&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Doxygenのフォーマットミスによって、ドキュメントが不足していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7734&#34; target=&#34;_blank&#34;&gt;#7734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの場所で &lt;code&gt;std::&lt;/code&gt; 指定が抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7701&#34; target=&#34;_blank&#34;&gt;#7701&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの誤字と、英語の構文を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7368&#34; target=&#34;_blank&#34;&gt;#7368&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7762&#34; target=&#34;_blank&#34;&gt;#7762&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;問題点の修正：&lt;ul&gt;
&lt;li&gt;Lanczos近似の背景ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7325&#34; target=&#34;_blank&#34;&gt;#7325&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atanh()&lt;/code&gt;の正の値を渡した場合、&lt;code&gt;domain_error&lt;/code&gt;例外が送出されるべきだが、&lt;code&gt;overflow&lt;/code&gt;例外が送出されていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7415&#34; target=&#34;_blank&#34;&gt;#7415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asinh()&lt;/code&gt;のエラーポリシーとして&lt;code&gt;ignore_error&lt;/code&gt;を設定していても、大きな負数を渡すと&lt;code&gt;overflow&lt;/code&gt;例外が送出されてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7416&#34; target=&#34;_blank&#34;&gt;#7416&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;FBSD環境での&lt;code&gt;isinf()&lt;/code&gt;のコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7183&#34; target=&#34;_blank&#34;&gt;#7183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/math/constants/calculate_constants.hpp&lt;/code&gt;ヘッダのコメント誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7649&#34; target=&#34;_blank&#34;&gt;#7649&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math/minimax/main.cpp&lt;/code&gt;に、インクルードするヘッダが足りていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7694&#34; target=&#34;_blank&#34;&gt;#7694&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float_advance()&lt;/code&gt;に非正規化数として0を設定するとスタックオーバーフローする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4445&#34; target=&#34;_blank&#34;&gt;#4445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;libc++でコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7492&#34; target=&#34;_blank&#34;&gt;#7492&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;two-sample students tの例が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7402&#34; target=&#34;_blank&#34;&gt;#7402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complex&lt;/code&gt;の&lt;code&gt;acos&lt;/code&gt;/&lt;code&gt;asin&lt;/code&gt;/&lt;code&gt;atan&lt;/code&gt;を改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7290&#34; target=&#34;_blank&#34;&gt;#7290&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7291&#34; target=&#34;_blank&#34;&gt;#7291&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_j&lt;/code&gt;と&lt;code&gt;gamma_p&lt;/code&gt;/&lt;code&gt;gamma_q&lt;/code&gt;のいくつかのコーナーケースで精度を改善。Rocco Romeoに感謝する。&lt;/li&gt;
&lt;li&gt;整数でのベッセルJとYの精度を改善。Rocco Romeoに感謝する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#minmax&#34; name=&#34;minmax&#34;&gt;MinMax&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;カンマ演算子の誤用を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7752&#34; target=&#34;_blank&#34;&gt;#7752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント上の壊れたリンクを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7751&#34; target=&#34;_blank&#34;&gt;#7751&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/move/move.hpp&lt;/code&gt;に全ての機能を入れていたので、&lt;code&gt;core.hpp&lt;/code&gt;と&lt;code&gt;utility.hpp&lt;/code&gt;に分離した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6524&#34; target=&#34;_blank&#34;&gt;#6524&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの小さな修正&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uninitialized_move()&lt;/code&gt;の実装に、例外のチェックが抜けていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7830&#34; target=&#34;_blank&#34;&gt;#7830&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マクロの不足と間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7832&#34; target=&#34;_blank&#34;&gt;#7832&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::polygon::contains()&lt;/code&gt;が、含まれていても&lt;code&gt;false&lt;/code&gt;を返す場合があったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6366&#34; target=&#34;_blank&#34;&gt;#6366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::polygon::belongs()&lt;/code&gt;の、ODR違反によるリンクエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7678&#34; target=&#34;_blank&#34;&gt;#7678&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;/&lt;code&gt;segment&lt;/code&gt;/&lt;code&gt;interval&lt;/code&gt;と&lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;をリファクタ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;と&lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;区間のユニットテストを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform.hpp&lt;/code&gt;の2次元操作を簡略化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point_3d&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例外が無効な状態で、コンパイルが通るように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5399&#34; target=&#34;_blank&#34;&gt;#5399&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#range&#34; name=&#34;range&#34;&gt;Range&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range/any_range.hpp&lt;/code&gt;にインクルードが不足している問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5603&#34; target=&#34;_blank&#34;&gt;#5603&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_n&lt;/code&gt;の実装詳細名前空間が&lt;code&gt;boost::range::range_detail&lt;/code&gt;になっていたので、他に合わせて&lt;code&gt;boost::range_detail&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6103&#34; target=&#34;_blank&#34;&gt;#6103&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのドキュメント修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラステンプレート&lt;code&gt;br_mul&lt;/code&gt;のメンバ変数&lt;code&gt;nan&lt;/code&gt;の初期値のシフト演算において、シフトカウントがマイナスになったり、大きすぎる数になった場合に、未定義動作を引き起こすという警告が発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7616&#34; target=&#34;_blank&#34;&gt;#7616&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_u32regex()&lt;/code&gt;のUTF-8検証が不十分だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7744&#34; target=&#34;_blank&#34;&gt;#7744&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc4.7.2でC++11オプションを有効にした際の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7644&#34; target=&#34;_blank&#34;&gt;#7644&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#smart-pointers&#34; name=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Glen Fernandes氏による、配列用の&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;実装を取り込んだ。これにより、デフォルト初期化と値なし初期化についてのオーバーロードと同じく、コンストラクタ実引数かinitializer listで初期化されうる配列についてのシングルアロケーションが可能になった。詳細はこちら[&lt;a href=&#34;http://www.boost.org/doc/libs/1_53_0/libs/smart_ptr/make_shared_array.html&#34; target=&#34;_blank&#34;&gt;/libs/smart_ptr/make_shared_array.html make_shared and allocate_shared for arrays&lt;/a&gt;]を参照のこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を、配列へのポインタを保持できるようにした。これには、テンプレートパラメータで配列型(&lt;code&gt;T[]&lt;/code&gt;もしくは&lt;code&gt;T[N]&lt;/code&gt;)を指定する。&lt;/li&gt;
&lt;li&gt;C++11コンパイラでは&lt;code&gt;explicit operator bool()&lt;/code&gt;を使用するようにした。これは、以下のようなケースでコードを破壊する：  1. &lt;code&gt;bool&lt;/code&gt;をとる関数にスマートポインタを渡しているコード  2. &lt;code&gt;bool&lt;/code&gt;を返す関数でスマートポインタを返しているコードこのようなケースでは、 &lt;code&gt;p != 0&lt;/code&gt; もしくは &lt;code&gt;!!p&lt;/code&gt; を使用してください&lt;/li&gt;
&lt;li&gt;[追加リリースノート] だいぶ前から非推奨だった&lt;code&gt;shared_ptr&lt;/code&gt;の&lt;code&gt;value_type&lt;/code&gt;を削除した。代わりに&lt;code&gt;element_type&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#string-algo&#34; name=&#34;string-algo&#34;&gt;String Algo&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;パターンがオーバーラップしている時に、オーバーラップしている箇所がヒットしない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7784&#34; target=&#34;_blank&#34;&gt;#7784&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;あいまいな&lt;code&gt;insert&lt;/code&gt;呼び出しを排除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7346&#34; target=&#34;_blank&#34;&gt;#7346&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;廃止された機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost 1.53で廃止された機能はboost 1.58までは利用可能である&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task&amp;lt;R&amp;gt;&lt;/code&gt;を廃止した。以降は&lt;code&gt;packaged_task&amp;lt;R()&amp;gt;&lt;/code&gt;を使うこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mutex::scoped_lock&lt;/code&gt;、&lt;code&gt;scoped_try_lock&lt;/code&gt;、&lt;code&gt;boost::condition&lt;/code&gt;を廃止にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7537&#34; target=&#34;_blank&#34;&gt;#7537&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： ムーブ可能な関数オブジェクトと実引数をとれる&lt;code&gt;thread&lt;/code&gt;コンストラクタを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6270&#34; target=&#34;_blank&#34;&gt;#6270&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： システムまわりの関数に&lt;code&gt;noexcept&lt;/code&gt;をつけた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7279&#34; target=&#34;_blank&#34;&gt;#7279&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;promise&lt;/code&gt;::&lt;code&gt;…at_thread_exit&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7280&#34; target=&#34;_blank&#34;&gt;#7280&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task&lt;/code&gt;テンプレートに&lt;code&gt;ArgTypes&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task::make_ready_at_thread_exit&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7282&#34; target=&#34;_blank&#34;&gt;#7282&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： ムーブ可能な関数オブジェクトと実引数をとれる&lt;code&gt;async&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7412&#34; target=&#34;_blank&#34;&gt;#7412&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;launch&lt;/code&gt;ポリシーが&lt;code&gt;defferred&lt;/code&gt;のとき、&lt;code&gt;async&lt;/code&gt;を追加する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7413&#34; target=&#34;_blank&#34;&gt;#7413&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;future::get&lt;/code&gt; の事後条件が &lt;code&gt;valid()==false&lt;/code&gt; になるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7414&#34; target=&#34;_blank&#34;&gt;#7414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ゼロオーバーヘッドな&lt;code&gt;condition_variable&lt;/code&gt;を提供(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7422&#34; target=&#34;_blank&#34;&gt;#7422&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Async: &lt;code&gt;make_future&lt;/code&gt;と&lt;code&gt;make_shared_future&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7444&#34; target=&#34;_blank&#34;&gt;#7444&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thread: デストラクタで&lt;code&gt;thread&lt;/code&gt;を&lt;code&gt;join&lt;/code&gt;するヘルパークラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7540&#34; target=&#34;_blank&#34;&gt;#7540&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thread: デストラクタで&lt;code&gt;thread&lt;/code&gt;を&lt;code&gt;join&lt;/code&gt;する&lt;code&gt;thread&lt;/code&gt;のラッパークラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7541&#34; target=&#34;_blank&#34;&gt;#7541&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;async&lt;/code&gt;で作成した&lt;code&gt;future&lt;/code&gt;がデストラクタで&lt;code&gt;join&lt;/code&gt;するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7575&#34; target=&#34;_blank&#34;&gt;#7575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: &lt;code&gt;strict_lock&lt;/code&gt;と&lt;code&gt;nested_strict_lock&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7587&#34; target=&#34;_blank&#34;&gt;#7587&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: 依存関係を制限するために&lt;code&gt;locks.hpp&lt;/code&gt;を分割した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7588&#34; target=&#34;_blank&#34;&gt;#7588&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: Boost.ConceptCheckを利用して&#34;ロック可能コンセプト&#34;チェッカーを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7590&#34; target=&#34;_blank&#34;&gt;#7590&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable_if&lt;/code&gt;で使える&#34;ロック可能トレイト&#34;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7591&#34; target=&#34;_blank&#34;&gt;#7591&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: なにもしない、&lt;code&gt;UpgardeLockable&lt;/code&gt;コンセプトに適合する&lt;code&gt;null_mutex&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7592&#34; target=&#34;_blank&#34;&gt;#7592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: &lt;code&gt;externally_locked&lt;/code&gt;クラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7593&#34; target=&#34;_blank&#34;&gt;#7593&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threads: スレッド中断禁止設定を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7590&#34; target=&#34;_blank&#34;&gt;#7594&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回帰テストツールで、データ競合によって&lt;code&gt;BOOST_TEST(n_alive == 1);&lt;/code&gt;が失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7464&#34; target=&#34;_blank&#34;&gt;#7464&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::generations&lt;/code&gt;メンバ関数が&lt;code&gt;notify_one&lt;/code&gt;か&lt;code&gt;notify_all&lt;/code&gt;を呼び続ける状態になり、メモリー消費とパフォーマンスに甚大な影響を及してしまう(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7657&#34; target=&#34;_blank&#34;&gt;#7657&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スレッド内で&lt;code&gt;this_thread::sleep_for&lt;/code&gt; はもう&lt;code&gt;steady_clock&lt;/code&gt;を使わない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7665&#34; target=&#34;_blank&#34;&gt;#7665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_group::join_all()&lt;/code&gt;は&lt;code&gt;thread&lt;/code&gt;が&lt;code&gt;join&lt;/code&gt;可能かチェックすべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7668&#34; target=&#34;_blank&#34;&gt;#7668&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_group::join_all()&lt;/code&gt;は&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;を&lt;code&gt;catch&lt;/code&gt;すべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7669&#34; target=&#34;_blank&#34;&gt;#7669&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockable_traits.hpp&lt;/code&gt;の&#34;defined&#34;トークンがtypoしている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7672&#34; target=&#34;_blank&#34;&gt;#7672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::future&lt;/code&gt;の&lt;code&gt;set_wait_callback&lt;/code&gt;のスレッドセーフ問題(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7798&#34; target=&#34;_blank&#34;&gt;#7798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::sleep_for&lt;/code&gt;と&lt;code&gt;this_thread::sleep_until&lt;/code&gt;の説明が正しくない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7808&#34; target=&#34;_blank&#34;&gt;#7808&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv_status::no_timeout&lt;/code&gt;が&lt;code&gt;rel_time&lt;/code&gt;で指定した時間を越えたときに返却されている。&lt;code&gt;cv_status::timeout&lt;/code&gt;であるべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7812&#34; target=&#34;_blank&#34;&gt;#7812&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::id&lt;/code&gt;に、シンボル可視の属性が付いていなかったことによる警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7874&#34; target=&#34;_blank&#34;&gt;#7874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED&lt;/code&gt;をデフォルトで有効にするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7875&#34; target=&#34;_blank&#34;&gt;#7875&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;)&lt;/code&gt;で発生する例外のメッセージが不適切だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7882&#34; target=&#34;_blank&#34;&gt;#7882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::do_try_join_until()&lt;/code&gt;に戻り値の型が抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7890&#34; target=&#34;_blank&#34;&gt;#7890&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準以前の古いvariadic pairコンストラクタのサポートを外し、同等の実装をしなおした。いずれもBoost 1.48からdeprecated指定である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erase&lt;/code&gt;のより単純な実装の導入や、deprecated指定されていたコンフィグマクロの除去など、内部実装をさらに変更した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字列への所有権を持たない参照を保持する&lt;code&gt;string_ref&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11環境に対してのみだが、ムーブコンストラクタとムーブ代入演算子を追加した。Variantライブラリは今、コピー不可でムーブ可なオブジェクトが使用できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7620&#34; target=&#34;_blank&#34;&gt;#7620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7576&#34; target=&#34;_blank&#34;&gt;#7576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context&amp;lt;&amp;gt;::add_macro_definition&lt;/code&gt;がマクロ置換リストにまれに余計な&lt;code&gt;T_EOF&lt;/code&gt;を追加する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近のスマートポインタに対応するための修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7809&#34; target=&#34;_blank&#34;&gt;#7809&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#build&#34; name=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Qt5ツールセット&lt;/li&gt;
&lt;li&gt;rccサポートを改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7576&#34; target=&#34;_blank&#34;&gt;#7576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;li&gt;LLVM Clang, with libc++: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;GCC: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1, 32 and 64 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Cray: 4.6.1&lt;/li&gt;
&lt;li&gt;Clang: from subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang, with libc++: 3.2&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.1&lt;/li&gt;
&lt;li&gt;Intel, C++11 mode: 13.0.1&lt;/li&gt;
&lt;li&gt;Visual Age:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: from subversion&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: from subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX:&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: V12.1.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Takatoshi Kondo, zak&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.54.0リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_54_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_54_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.54.0リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_54_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_54_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Log&lt;ul&gt;
&lt;li&gt;Andrey Semashevによる、ロギングライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TTI&lt;ul&gt;
&lt;li&gt;Edward Dienerによる、型特性の内省ライブラリ(Type Traits Introspection)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Erasure&lt;ul&gt;
&lt;li&gt;Steven Watanabeによる、コンセプトに基づいた実行時多相性のライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#range&#34;&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ニュース&lt;/h2&gt;
&lt;p&gt;Boostはこのバージョンから、80386ターゲットCPUをサポートしない。x86 32ビットの最小サポートはi486となる。&lt;/p&gt;
&lt;p&gt;80386ターゲットは、このリリース以前からBoost.SmartPtrとBoost.Atomicで適切なサポートがされていなかった。&lt;/p&gt;
&lt;p&gt;いくつかのBoostライブラリ(たとえばBoost.Log)は、CPUに求める要件を定めているので、詳細は各ライブラリのドキュメントを参照すること。&lt;/p&gt;
&lt;p&gt;x86 32ビットターゲットのデフォルトでは、i686(Pentium Pro)とそれ以降でビルドされる。これはb2とbjamのコマンドラインオプションで変更指定できる。例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;選択可能な命令セットは以下である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ホストCPUのターゲット: native&lt;/li&gt;
&lt;li&gt;汎用x86 CPU: i486, i586, i686&lt;/li&gt;
&lt;li&gt;Intel CPU: pentium, pentium-mmx, pentiumpro, pentium2, pentium3, pentium3m, pentium-m, pentium4, pentium4m, prescott, nocona, core2, corei7, corei7-avx, core-avx-i, conroe, conroe-xe, conroe-l, allendale, merom, merom-xe, kentsfield, kentsfield-xe, penryn, wolfdale, yorksfield, nehalem, sandy-bridge, ivy-bridge, haswell, atom&lt;/li&gt;
&lt;li&gt;AMD CPU: k6, k6-2, k6-3, athlon, athlon-tbird, athlon-4, athlon-xp, athlon-mp, k8, opteron, athlon64, athlon-fx, k8-sse3, opteron-sse3, athlon64-sse3, amdfam10, barcelona, bdver1, bdver2, bdver3, btver1, btver2&lt;/li&gt;
&lt;li&gt;VIA CPU: c3, c3-2&lt;/li&gt;
&lt;li&gt;IDT CPU: winchip-c6, winchip2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;非推奨ライブラリ&lt;/h2&gt;
&lt;p&gt;Boost 1.54.0から、Boost.Signalsが非推奨となる。まだ削除はされない。&lt;/p&gt;
&lt;p&gt;Boost.Signals2に移行すること。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コメントのtypoを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7917&#34; target=&#34;_blank&#34;&gt;#7917&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6926&#34; target=&#34;_blank&#34;&gt;#6926&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#algorithm&#34; name=&#34;algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;copy_while&lt;/code&gt;と&lt;code&gt;copy_until&lt;/code&gt;の戻り型を変更した。これはインターフェースの変更である。もしこれらの関数の戻り値を利用しているなら、コードを変更しなければならない。単に更新済みの&lt;code&gt;OutputIterator&lt;/code&gt;を返すのではなく、これらの関数は&lt;code&gt;std::pair&amp;lt;InputIterator, 
OutputIterator&amp;gt;&lt;/code&gt;を返す。もしこの変更が運用中のコードに影響を与えるならば、呼び出しの最後に&lt;code&gt;.second&lt;/code&gt;を加えるのが以前と同じ挙動になる最も簡単な変更になるだろう。&lt;/li&gt;
&lt;li&gt;C++14版の&lt;code&gt;is_permutation()&lt;/code&gt;、&lt;code&gt;equal()&lt;/code&gt;、&lt;code&gt;mismatch()&lt;/code&gt;を追加。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の機能サポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6999&#34; target=&#34;_blank&#34;&gt;#6999&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタとムーブ代入演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなトレイトクラス、&lt;code&gt;handler_type&lt;/code&gt;と&lt;code&gt;async_result&lt;/code&gt;を追加。これらを使用することで、開始関数(&lt;code&gt;async_read()&lt;/code&gt;とか)の戻り値型をカスタマイズできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio::spawn()&lt;/code&gt;関数を追加。これはBoost.Coroutineベースのスタックフルコルーチンによる高レベルなラッパーである。&lt;code&gt;spawn()&lt;/code&gt;関数を使用することで、同期ロジックのように非同期ロジックを書けるようになる。&lt;ul&gt;
&lt;li&gt;例：&lt;code&gt;size_t n = my_socket.async_read(my_buffer, yield);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊な値、&lt;code&gt;asio::use_future&lt;/code&gt;を追加。これを開始関数に指定することで、C++11環境で非同期の開始関数が&lt;code&gt;std::future&lt;/code&gt;を返すようにできる。&lt;ul&gt;
&lt;li&gt;例： &lt;code&gt;future&amp;lt;size_t&amp;gt; = my_socket.async_read(my_buffer, asio::use_future);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPサーバー4の例で使用していた、スタックレスコルーチンのクラスとマクロを、正式にドキュメントに記載し、推進するようにした。&lt;/li&gt;
&lt;li&gt;新たなハンドラーフックである&lt;code&gt;asio_handler_is_continuation()&lt;/code&gt;関数を追加。非同期操作が、現在実行中のハンドラに関連付けられた非同期制御フローの継続を表現する場合がある。&lt;code&gt;asio_handler_is_continuation()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返すようカスタマイズすれば、Asioの実装はその知識を使ってハンドラのスケジューリングを最適化することができる。一般的なケースとしては、&lt;code&gt;strand&lt;/code&gt;、&lt;code&gt;spawn&lt;/code&gt;、非同期操作の組み合わせなどがある。&lt;/li&gt;
&lt;li&gt;4つの汎用的なプロトコルクラスを追加。&lt;code&gt;generic::datagram_protocol&lt;/code&gt;、&lt;code&gt;generic::raw_protocol&lt;/code&gt;、&lt;code&gt;generic::seq_packet_protocol&lt;/code&gt;、&lt;code&gt;generic::stream_protocol&lt;/code&gt;。これらは&lt;code&gt;Protocol&lt;/code&gt;要件に基いて実装しているが、アドレスファミリ(たとえば&lt;code&gt;AF_INET&lt;/code&gt;)とプロトコル種類(たとえば&lt;code&gt;IPPROTO_TCP&lt;/code&gt;)は、実行時にユーザーが指定できる。&lt;/li&gt;
&lt;li&gt;C++11のムーブコンストラクタを追加。これによって、&lt;code&gt;socket&lt;/code&gt;(や&lt;code&gt;acceptor&lt;/code&gt;)からジェネリックな型への変換が可能になる。たとえば、&lt;code&gt;ip::tcp::socket&lt;/code&gt;から&lt;code&gt;generic::stream_protocol::socket&lt;/code&gt;へのムーブ構築が可能である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor&amp;lt;&amp;gt;&lt;/code&gt;クラスの&lt;code&gt;accept()&lt;/code&gt;と&lt;code&gt;async_accept()&lt;/code&gt;を拡張。新たなコネクションとして、&lt;code&gt;socket&lt;/code&gt;をよりジェネリックな型に直接accept可能になる。たとえば、&lt;code&gt;ip::tcp::acceptor&lt;/code&gt;を&lt;code&gt;generic::stream_protocol::socket&lt;/code&gt;オブジェクトにaccept可能である。&lt;/li&gt;
&lt;li&gt;既存のサンプルをC++03用ディレクトリに移動し、C++11用のディレクトリを新たに作った。C++03の限定的なサブセットとして、C++11に等価に変換可能である。&lt;/li&gt;
&lt;li&gt;SSLの機能を多々強化した。Nick Jonesに感謝する。&lt;ul&gt;
&lt;li&gt;すでにワイヤーから読み取られたデータを再利用することによって、SSLのハンドシェイクをサポートした。&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;クラスの&lt;code&gt;handshake()&lt;/code&gt;と&lt;code&gt;async_handshake()&lt;/code&gt;に新たなオーバーロードを追加した。これらは、SSLエンジンのハンドシェイクプローシージャに入力を渡すために、&lt;code&gt;ConstBufferSequence&lt;/code&gt;を受け付けるようにした。&lt;/li&gt;
&lt;li&gt;TLSv1.1とTLSv1.2の&lt;code&gt;ssl::context&lt;/code&gt;オブジェクトを作成できるようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::context&lt;/code&gt;クラスと&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;クラスに、&lt;code&gt;set_verify_depth()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;SSLの証明書とキーのデータを、メモリバッファから読み込む機能を追加。&lt;code&gt;ssl::context&lt;/code&gt;クラスに、以下の新たな関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_certificate_authority()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_certificate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_certificate_chain()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_private_key()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_rsa_private_key()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_tmp_dh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::context&lt;/code&gt;を、デフォルトでは自動的にSSL圧縮を無効化するよう変更。新たな関数&lt;code&gt;ssl::context::clear_options()&lt;/code&gt;を使用して、内部的に&lt;code&gt;my_context.clear_options(ssl::context::no_compression)&lt;/code&gt;が行われる。&lt;ul&gt;
&lt;li&gt;[訳注] : SSLの圧縮は、ブルートフォースによる攻撃を容易にするため、使用してはいけない模様。&lt;/li&gt;
&lt;li&gt;参照 : &lt;a href=&#34;http://www.scutum.jp/information/waf_tech_blog/2012/09/waf-blog-014.html&#34; target=&#34;_blank&#34;&gt;SSL/SPDYを攻撃するCRIMEはBEASTの正統な後継者だ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_set&lt;/code&gt;でデッドロックの可能性があった実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acceptor&lt;/code&gt;のサンプルにあった間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8421&#34; target=&#34;_blank&#34;&gt;#8421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waitable timer&lt;/code&gt;のドキュメントにあったコピペミスを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8602&#34; target=&#34;_blank&#34;&gt;#8602&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コード解析ツールの要件を満たすために、いくつかの&lt;code&gt;assert&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7739&#34; target=&#34;_blank&#34;&gt;#7739&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不正な&lt;code&gt;#warning&lt;/code&gt;ディレクティブを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7939&#34; target=&#34;_blank&#34;&gt;#7939&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linuxでデータ競合の可能性があった&lt;code&gt;epoll()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;Windows限定のバグで、限定された操作によって、&lt;code&gt;NULL&lt;/code&gt;の&lt;code&gt;error_category&lt;/code&gt;へのポインタを持つ&lt;code&gt;error_code&lt;/code&gt;を生成してしまう可能性があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8613&#34; target=&#34;_blank&#34;&gt;#8613&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer&lt;/code&gt;の内部実装で使用している&lt;code&gt;time_point&lt;/code&gt;の計算で、中間結果の&lt;code&gt;duration&lt;/code&gt;オブジェクトがオーバーフローしてしまう問題を修正&lt;/li&gt;
&lt;li&gt;同じ&lt;code&gt;io_service&lt;/code&gt;オブジェクトに対して平行に&lt;code&gt;run()&lt;/code&gt;と&lt;code&gt;poll()&lt;/code&gt;を呼び出すと、スレッドの起床がロストしてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8354&#34; target=&#34;_blank&#34;&gt;#8354&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;非同期の接続操作が、reactorからの見かけ上の準備完了通知(spurious readiness notifications)に対処できるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7961&#34; target=&#34;_blank&#34;&gt;#7961&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入出力でのメモリリークを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8079&#34; target=&#34;_blank&#34;&gt;#8079&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&lt;/code&gt;と&lt;code&gt;duration&lt;/code&gt;のコンストラクタに、&lt;code&gt;BOOST_FORCEINLINE&lt;/code&gt;を付けた(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8318&#34; target=&#34;_blank&#34;&gt;#8318&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Xcode 4.5.2のClangで、標準ライブラリとしてlibc++を使用していると&lt;code&gt;duration&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8367&#34; target=&#34;_blank&#34;&gt;#8367&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;リファレンスのtypoを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8370&#34; target=&#34;_blank&#34;&gt;#8370&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HP-UXでChronoのコンパイルが通らない問題を修正。ワークアラウンドの判定条件が逆だった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8435&#34; target=&#34;_blank&#34;&gt;#8435&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8032&#34; target=&#34;_blank&#34;&gt;#8032&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Andrew HundtとAdam Wulkiewiczのハイパフォーマンスな&lt;code&gt;vararray&lt;/code&gt;の実装をベースにした&lt;code&gt;static_vector&lt;/code&gt;クラスを、実験的に追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;のコンストラクタ／コピー／ムーブ／スワップの速度を改善。&lt;code&gt;memcpy&lt;/code&gt;が可能な場合には、それをディスパッチするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;をサポートした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7227&#34; target=&#34;_blank&#34;&gt;#7227&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::container::slist&lt;/code&gt;クラス内部で、&lt;code&gt;intrusive::pointer_traits::to_pointer&lt;/code&gt;が呼び出せないというコンパイルエラーが発生していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7921&#34; target=&#34;_blank&#34;&gt;#7921&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;がGCCで使用できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7969&#34; target=&#34;_blank&#34;&gt;#7969&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_vector::back()&lt;/code&gt;が不正な値を返す問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8118&#34; target=&#34;_blank&#34;&gt;#8118&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque::insert(const_iterator, Itr, Itr)&lt;/code&gt;の計算オーダーが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8294&#34; target=&#34;_blank&#34;&gt;#8294&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;の&lt;code&gt;swap&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8553&#34; target=&#34;_blank&#34;&gt;#8553&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPARCアーキテクチャをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分割スタック(要求に対して成長するスタック)のサポートを追加&lt;/li&gt;
&lt;li&gt;以下のチケットを修正&lt;ul&gt;
&lt;li&gt;ドキュメントのtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7805&#34; target=&#34;_blank&#34;&gt;#7805&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントが不正なURLリンクを指していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7899&#34; target=&#34;_blank&#34;&gt;#7899&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCでの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7972&#34; target=&#34;_blank&#34;&gt;#7972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;iterator&lt;/code&gt;を取得しようとしてコンパイルエラーが出る問題を修正。&lt;code&gt;iterator_traits&lt;/code&gt;を使っていなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8023&#34; target=&#34;_blank&#34;&gt;#8023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt;文で、&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;const_iterator&lt;/code&gt;が使用できない問題を修正。&lt;code&gt;boost::const_begin()&lt;/code&gt;をオーバーロードしていなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8024&#34; target=&#34;_blank&#34;&gt;#8024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine&lt;/code&gt;のイテレータが後置インクリメント演算子を持っていなかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8101&#34; target=&#34;_blank&#34;&gt;#8101&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spartial Index(空間インデックス)を追加。これはAdam WulkiewiczによってBoost.Geometry向けに開発された。オリジナルの実装は、Hartmut Kaiserがメンターを勤めたGoogle Summer of Code 2008のプロジェクトで、Federico J. Fernandezが始めた。&lt;/li&gt;
&lt;li&gt;SVG出力を追加。これは拡張機能として数年前からある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ドキュメント&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつか説明不足だったところを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共線の反対セグメント(collinear opposite segments)が(主に円:circleで)持っていた、堅牢性の問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertion()&lt;/code&gt;が、交点の挿入に失敗する問題を修正&lt;/li&gt;
&lt;li&gt;Vladimir Petrovicのパッチによる、横断のデバッグ機能を適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;の縮退&lt;code&gt;union()&lt;/code&gt;の結果を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7462&#34; target=&#34;_blank&#34;&gt;#7462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_transformer&lt;/code&gt;クラスのコンストラクタが&lt;code&gt;private&lt;/code&gt;になっていたので、&lt;code&gt;public&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7465&#34; target=&#34;_blank&#34;&gt;#7465&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cart_intersect.hpp&lt;/code&gt;の、未使用パラメータ警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7802&#34; target=&#34;_blank&#34;&gt;#7802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt;が誤った交点を検出する問題を修正(レアケース)。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8254&#34; target=&#34;_blank&#34;&gt;#8254&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;polygon modelが、ドキュメントに記載された&lt;code&gt;Polygon&lt;/code&gt;コンセプトを厳守していなかった。ドキュメントを更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8393&#34; target=&#34;_blank&#34;&gt;#8393&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;「条件式は定数式でなければならない」というコンパイラの警告をを黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8403&#34; target=&#34;_blank&#34;&gt;#8403&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8405&#34; target=&#34;_blank&#34;&gt;#8405&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのアルゴリズムのバリエーションを作った(&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;convert&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;num_points&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jakob Lykke AndersenとFlavio De Lorenziによる、VF2 subgraph isomorphishmへの更新を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8166&#34; target=&#34;_blank&#34;&gt;#8166&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fernando Vilasによる、maximum adjacency search(最大隣接探索)アルゴリズムを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6780&#34; target=&#34;_blank&#34;&gt;#6780&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Brammert Ottensによる、resource-constrained shortest paths (&lt;code&gt;r_c_shortest_paths&lt;/code&gt;, リソース制限最短経路)アルゴリズムへのタイムアウトサポートを追加。&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードへの様々な修正。古いコンパイラ向けのワークアラウンドを除去。&lt;/li&gt;
&lt;li&gt;以下のバグを修正：&lt;ul&gt;
&lt;li&gt;graphmlの値に&#34;for&#34;属性を設定すると例外が投げられてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7016&#34; target=&#34;_blank&#34;&gt;#7016&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7155&#34; target=&#34;_blank&#34;&gt;#7155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism()&lt;/code&gt;に異なる2つのグラフ型を与えると、コンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7845&#34; target=&#34;_blank&#34;&gt;#7845&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;削除した名前付き頂点を再度追加すると、不正なグラフになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7863&#34; target=&#34;_blank&#34;&gt;#7863&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph/example/dijkstra-example.cpp&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7877&#34; target=&#34;_blank&#34;&gt;#7877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;の構築が、コンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8192&#34; target=&#34;_blank&#34;&gt;#8192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;において、距離の比較がドキュメントとは異なる実装になっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8398&#34; target=&#34;_blank&#34;&gt;#8398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PBGLのビルドが、C++11モードで失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8411&#34; target=&#34;_blank&#34;&gt;#8411&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Johnson APSPのドキュメントで、&lt;code&gt;DistanceMap&lt;/code&gt;の値型に&lt;code&gt;addable&lt;/code&gt;(&lt;code&gt;a + b&lt;/code&gt;が可能なこと)を要求していたが、これは不要なので要求を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8427&#34; target=&#34;_blank&#34;&gt;#8427&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Johnson APSPのドキュメントで、&lt;code&gt;DistanceMap&lt;/code&gt;と&lt;code&gt;WeightMap&lt;/code&gt;の値型に、実装にある「2項減算が可能なこと(&lt;code&gt;a - b&lt;/code&gt;)」が記載されていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8428&#34; target=&#34;_blank&#34;&gt;#8428&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sloan orderingの実装が、特定の値型を使用していたので、テンプレートの型を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8434&#34; target=&#34;_blank&#34;&gt;#8434&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astar_search()&lt;/code&gt;の&lt;code&gt;DistanceType&lt;/code&gt;に、&lt;code&gt;numeric_limits&lt;/code&gt;の特殊化を必要としないよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8490&#34; target=&#34;_blank&#34;&gt;#8490&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;に、プラットフォーム規定のフラグサポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8030&#34; target=&#34;_blank&#34;&gt;#8030&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_memory_object&lt;/code&gt;の&lt;code&gt;m_mode&lt;/code&gt;メンバ変数が、デフォルトコンストラクタで初期化されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7484&#34; target=&#34;_blank&#34;&gt;#7484&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::unique_ptr&lt;/code&gt;が代入できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7598&#34; target=&#34;_blank&#34;&gt;#7598&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex&lt;/code&gt;/&lt;code&gt;named_condition&lt;/code&gt;の組み合わせが壊れる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7682&#34; target=&#34;_blank&#34;&gt;#7682&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex::remove()&lt;/code&gt;を連続で呼び出すと、成功しても&lt;code&gt;false&lt;/code&gt;が返ってきてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7923&#34; target=&#34;_blank&#34;&gt;#7923&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BSD向けのワークアラウンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7924&#34; target=&#34;_blank&#34;&gt;#7924&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_memory_object&lt;/code&gt;の生成が無限ループに陥ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7928&#34; target=&#34;_blank&#34;&gt;#7928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OSの起動時間が、時計で変更できてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7936&#34; target=&#34;_blank&#34;&gt;#7936&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess/mem_algo/rbtree_best_fit.hpp&lt;/code&gt;のアサートに副作用がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8521&#34; target=&#34;_blank&#34;&gt;#8521&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region::flush()&lt;/code&gt;で、&lt;code&gt;async&lt;/code&gt;パラメータの比較条件が逆だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8595&#34; target=&#34;_blank&#34;&gt;#8595&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&amp;lt;/font&amp;gt;：Windowsにおいて、OSの起動時間をイベントログから取得してくるように修正した。以前使用していた&lt;code&gt;LastBootupTime()&lt;/code&gt;は、WMIから使用すると、不正な時刻同期を行ってしまう。1.54.0より前のOS起動時間が本当に必要であれば、&lt;code&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/code&gt;を定義すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt; サポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7849&#34; target=&#34;_blank&#34;&gt;#7849&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#iostreams&#34; name=&#34;iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tee()&lt;/code&gt;が&lt;code&gt;std::streams&lt;/code&gt;で正しく動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8315&#34; target=&#34;_blank&#34;&gt;#8315&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント修正&lt;ul&gt;
&lt;li&gt;リンクの間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8385&#34; target=&#34;_blank&#34;&gt;#8385&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;typo修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8460&#34; target=&#34;_blank&#34;&gt;#8460&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;オプションで発生する警告を回避(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8482&#34; target=&#34;_blank&#34;&gt;#8482&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字ポインタへの変換が実行時ではなくコンパイル時アサートになるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8334&#34; target=&#34;_blank&#34;&gt;#8334&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::int128_type&lt;/code&gt;と&lt;code&gt;boost::uint128_type&lt;/code&gt;の変換に対応した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7909&#34; target=&#34;_blank&#34;&gt;#7909&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;内部ストリームバッファの扱いを変えて、libc++で動作するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8267&#34; target=&#34;_blank&#34;&gt;#8267&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7704&#34; target=&#34;_blank&#34;&gt;#7704&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1.53.0で&lt;code&gt;lexical_cast()&lt;/code&gt;のアドレス取得ができなくなっていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7421&#34; target=&#34;_blank&#34;&gt;#7421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;警告、内部実装、テストの修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2558&#34; target=&#34;_blank&#34;&gt;#2558,&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7949&#34; target=&#34;_blank&#34;&gt;#7949&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8162&#34; target=&#34;_blank&#34;&gt;8162&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8369&#34; target=&#34;_blank&#34;&gt;#8369&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8547&#34; target=&#34;_blank&#34;&gt;#8547&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;他のBoost.Math用の整数ユーティリティ(最大公約数と最小公倍数)、四元数や八元数を組み込むために大きな再構成を行った。これについて新しく章見出しを作った。&lt;/li&gt;
&lt;li&gt;Boost.Multiprecisionのリファレンスを追加し、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;をユーザー定義型(UDT:User-defined Type)の例として追加した&lt;/li&gt;
&lt;li&gt;Clangをサポートコンパイラに加えた&lt;/li&gt;
&lt;li&gt;任意の精度で計算結果のスレッドセーフなキャッシュを使うための定数を修正した。&lt;/li&gt;
&lt;li&gt;Christopher Kormanyos氏により、&lt;code&gt;cyl_bessel_j_zero&lt;/code&gt;、&lt;code&gt;cyl_neumann_zero&lt;/code&gt;、&lt;code&gt;airy_ai_zeros&lt;/code&gt;、&lt;code&gt;airy_bi_zeros&lt;/code&gt;というベッセル関数の零点を求める関数が追加された。&lt;/li&gt;
&lt;li&gt;Rocco Romeo氏に協力いただき、第一種ベッセル関数と、第二種ベッセル関数の精度が向上した&lt;/li&gt;
&lt;li&gt;ヘッダがコンパイルされないひどい循環依存バグを解消した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7999&#34; target=&#34;_blank&#34;&gt;#7999&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tgamma&lt;/code&gt;が142.5から143の実引数を与えると奇妙なオーヴァーフローを起こすバグを修正した。&lt;/li&gt;
&lt;li&gt;例外がキャッチされたときに正しくない結果を返す&lt;code&gt;raise_rounding_error&lt;/code&gt;のバグを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7905&#34; target=&#34;_blank&#34;&gt;#7905&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;のサポートを最小限追加した&lt;/li&gt;
&lt;li&gt;ポワソン分位数が境界値ぎりぎりの場合に発生するバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8308&#34; target=&#34;_blank&#34;&gt;#8308&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;導関数が平坦になっている領域で、不完全ベータ逆関数に対処するためのHalley iterationで利用しているヒューリスティックを調整した。例えば計算機イプシロンよりも確率が小さい場合におけるフィッシャーF分布の四元数を算出する場合などである。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8314&#34; target=&#34;_blank&#34;&gt;#8314&lt;/a&gt; を参照のこと。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;を使うとC++11でGCCコンテナ型が利用できなくなる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7969&#34; target=&#34;_blank&#34;&gt;#7969&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_RVALUE_REFERENCES&lt;/code&gt;が未定義だと、&lt;code&gt;has_move_emulation_enabled&lt;/code&gt;が&lt;code&gt;boost&lt;/code&gt;名前空間に定義されないバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8231&#34; target=&#34;_blank&#34;&gt;#8231&lt;/a&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; ： &lt;code&gt;rational_adapter&lt;/code&gt;を&lt;code&gt;rational_adaptor&lt;/code&gt;に名前変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perso.ens-lyon.fr/nathalie.revol/software.html&#34; target=&#34;_blank&#34;&gt;MPFI&lt;/a&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logged_adaptor&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;128ビット浮動小数点数型として、GCCの&lt;code&gt;__float128&lt;/code&gt;とIntelの&lt;code&gt;_Quad&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;にユーザー定義リテラルのサポートを追加。&lt;code&gt;constexpr&lt;/code&gt;サポートを改善。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;による符号あり整数の除算が、正しくない結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8126&#34; target=&#34;_blank&#34;&gt;#8126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;single limbの&lt;code&gt;cpp_int&lt;/code&gt;で、減算が正しくない結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8133&#34; target=&#34;_blank&#34;&gt;#8133&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;で0を何かで割っても、結果が0にならない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8160&#34; target=&#34;_blank&#34;&gt;#8160&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;変数を再利用するケース(たとえば&lt;code&gt;a = pow(a, b)&lt;/code&gt;)で、超越関数が不正な結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8326&#34; target=&#34;_blank&#34;&gt;#8326&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Voronoiドキュメントの修正と更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Point&lt;/code&gt;コンセプトのドキュメントで、&lt;code&gt;typedef&lt;/code&gt;が抜けていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8026&#34; target=&#34;_blank&#34;&gt;#8026&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range/algorithm&lt;/code&gt;と名前衝突する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8197&#34; target=&#34;_blank&#34;&gt;#8197&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#pragma warning&lt;/code&gt;する際に、&lt;code&gt;default&lt;/code&gt;ではなく&lt;code&gt;push&lt;/code&gt;と&lt;code&gt;pop&lt;/code&gt;を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8257&#34; target=&#34;_blank&#34;&gt;#8257&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#property-map&#34; name=&#34;property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Guillaume Pinotによる、&lt;code&gt;compose_property_map&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#range&#34; name=&#34;range&#34;&gt;Range&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのRangeコンセプトが、正しくないイテレータコンセプトを使用していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6944&#34; target=&#34;_blank&#34;&gt;#6944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istream_range&lt;/code&gt;に&lt;code&gt;wcin&lt;/code&gt;を渡すとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7407&#34; target=&#34;_blank&#34;&gt;#7407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istream_range&lt;/code&gt;の内部で&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;をインクルードしていたが、&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;で十分なため、インクルードするヘッダを変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7408&#34; target=&#34;_blank&#34;&gt;#7408&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irange&lt;/code&gt;に渡すステップサイズが3以上だと、最終要素がステップサイズの倍数の場合に、rangeの要素に含まれない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7731&#34; target=&#34;_blank&#34;&gt;#7731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムに&lt;code&gt;r | indexed&lt;/code&gt;を渡すとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7827&#34; target=&#34;_blank&#34;&gt;#7827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterator_range&lt;/code&gt;に、配列へのポインタを入れられない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8338&#34; target=&#34;_blank&#34;&gt;#8338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION&lt;/code&gt;マクロを使用した設定が正しくない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8453&#34; target=&#34;_blank&#34;&gt;#8453&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;call_once()&lt;/code&gt;の引数をムーブで渡すことを可能にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7285&#34; target=&#34;_blank&#34;&gt;#7285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;非同期： &lt;code&gt;future&lt;/code&gt;に&lt;code&gt;then()&lt;/code&gt;メンバ関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7445&#34; target=&#34;_blank&#34;&gt;#7445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;同期： &lt;code&gt;synchronized_value&lt;/code&gt;クラスを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7449&#34; target=&#34;_blank&#34;&gt;#7449&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MinGW 4.5.0での、&lt;code&gt;interruptible_wait()&lt;/code&gt;関数のリンクエラーを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4878&#34; target=&#34;_blank&#34;&gt;#4878&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;win32で&lt;code&gt;shared_mutex&lt;/code&gt;のタイムアウトが正しく動作していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4882&#34; target=&#34;_blank&#34;&gt;#4882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;pthread環境の&lt;code&gt;call_once()&lt;/code&gt;実装が、いくつかの環境でうまく動作しない可能性がある問題を修正。エポックの値として&lt;code&gt;uintmax_t&lt;/code&gt;を使用していたが、アトミックであることが保証される型を使用するようにした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5752&#34; target=&#34;_blank&#34;&gt;#5752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;の警告を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6652&#34; target=&#34;_blank&#34;&gt;#6652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel C++ Compilerで、&lt;code&gt;#include &amp;lt;atomic&amp;gt;&lt;/code&gt;しているところがコンパイルエラーになっていた問題を修正 &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6843&#34; target=&#34;_blank&#34;&gt;#6843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::future_category&lt;/code&gt;のDLLリンケージを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6966&#34; target=&#34;_blank&#34;&gt;#6966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;のロック／アンロックで、&lt;code&gt;lock_error&lt;/code&gt;例外が送出される問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7720&#34; target=&#34;_blank&#34;&gt;#7720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上の&lt;code&gt;shared_mutex&lt;/code&gt;で、デッドロックが発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7755&#34; target=&#34;_blank&#34;&gt;#7755&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVC 11.0で&lt;code&gt;BOOST_THREAD_DONT_USE_DATETIME&lt;/code&gt;を使用するとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7980&#34; target=&#34;_blank&#34;&gt;#7980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIX上で&lt;code&gt;pthread_delay_np()&lt;/code&gt;呼び出しがコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7982&#34; target=&#34;_blank&#34;&gt;#7982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual Studio 2003でThreadライブラリのコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8027&#34; target=&#34;_blank&#34;&gt;#8027&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsの64ビット環境で、&lt;code&gt;GetTickCount()&lt;/code&gt;の代わりに&lt;code&gt;GetTickCount64()&lt;/code&gt;を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で&lt;code&gt;boost::this_thread::sleep_for()&lt;/code&gt;のスリープ時間が長い問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8136&#34; target=&#34;_blank&#34;&gt;#8136&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Solaris 10上で&lt;code&gt;future&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8212&#34; target=&#34;_blank&#34;&gt;#8212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントで、&lt;code&gt;thread_group&lt;/code&gt;のインクルードヘッダが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8237&#34; target=&#34;_blank&#34;&gt;#8237&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;barrier::wait()&lt;/code&gt;に割り込みポイントが設定されていることを、ドキュメントに明記(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8239&#34; target=&#34;_blank&#34;&gt;#8239&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_join_for()&lt;/code&gt;に時間0を渡すと、無限ループしてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8323&#34; target=&#34;_blank&#34;&gt;#8323&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future_error::what()&lt;/code&gt;が、死んだオブジェクトの文字列を返していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8337&#34; target=&#34;_blank&#34;&gt;#8337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;が使用できない環境で、完全なC++11実装の&lt;code&gt;call_once()&lt;/code&gt;が有効になっていたので、条件一致しない場合はC++03実装を選択するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8371&#34; target=&#34;_blank&#34;&gt;#8371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex.hpp&lt;/code&gt;と&lt;code&gt;recursive_mutex.hpp&lt;/code&gt;の両方でpthreadのタイムアウト付きロックが使用可能かをチェックしていたが、片方のチェック条件が緩かったために、利用可能でないタイムアウト付きロックが選択できてしまっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8443&#34; target=&#34;_blank&#34;&gt;#8443&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::scoped_thread::joinable()&lt;/code&gt;のドキュメントが抜けていたので修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8451&#34; target=&#34;_blank&#34;&gt;#8451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8530&#34; target=&#34;_blank&#34;&gt;#8530&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11が有効な場合に、&lt;code&gt;packaged_task&lt;/code&gt;に関数オブジェクトのコピーではなく参照を保持するようにした(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8596&#34; target=&#34;_blank&#34;&gt;#8596&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなType Traitsを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8189&#34; target=&#34;_blank&#34;&gt;#8189&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_nothrow_move_constructible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_nothrow_move_assignable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_trivial_move_assign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_trivial_move_constructor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ベータ後の変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型による除算に&lt;code&gt;enable_if&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6511&#34; target=&#34;_blank&#34;&gt;#6511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フリー関数&lt;code&gt;num_columns()&lt;/code&gt;と&lt;code&gt;num_rows()&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7297&#34; target=&#34;_blank&#34;&gt;#7297&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assignment.hpp&lt;/code&gt;の、リンケージ問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6010&#34; target=&#34;_blank&#34;&gt;#6010&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すごく基本的な&lt;code&gt;noexcept&lt;/code&gt;をサポートした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string_ref::find()&lt;/code&gt;が、発見したかどうかを判定するために&lt;code&gt;==&lt;/code&gt;ではなく&lt;code&gt;=&lt;/code&gt;を使っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8067&#34; target=&#34;_blank&#34;&gt;#8067&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noncopyable&lt;/code&gt;のC++11版を作成(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6578&#34; target=&#34;_blank&#34;&gt;#6578&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noncopyable&lt;/code&gt;のDLLインタフェースを使用したときに発生する警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6935&#34; target=&#34;_blank&#34;&gt;#6935&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SolarisStudioコンパイラで発生する&lt;code&gt;boost::function&lt;/code&gt;に対する&lt;code&gt;boost::addressof()&lt;/code&gt;でのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7079&#34; target=&#34;_blank&#34;&gt;#7079&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.TypeTraitsの、&lt;code&gt;noexcept&lt;/code&gt;なコンストラクタと代入演算子を判定する新たなトレイトを使用するようにした。これによって、C++11の&lt;code&gt;boost::variant&lt;/code&gt;は、多くの型に対してパフォーマンス向上する。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8296&#34; target=&#34;_blank&#34;&gt;#8296&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;multiple visitationを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8459&#34; target=&#34;_blank&#34;&gt;#8459&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11機能サポートに関するドキュメントの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.waveをClangの &lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt; 診断に対応させた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8478&#34; target=&#34;_blank&#34;&gt;#8478&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;未使用変数を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8039&#34; target=&#34;_blank&#34;&gt;#8039&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glx.h&lt;/code&gt;のマクロ&lt;code&gt;None&lt;/code&gt;と名前が衝突していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8204&#34; target=&#34;_blank&#34;&gt;#8204&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8138&#34; target=&#34;_blank&#34;&gt;#8138&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++98 mode: 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0&lt;/li&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;GCC: 4.2&lt;/li&gt;
&lt;li&gt;Apple Clang: 4.2.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11 mode: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, from Subversion&lt;/li&gt;
&lt;li&gt;Clang, with libc++: 3.2&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++98 mode: 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.7.3, 4.8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 4.2.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11 mode: 4.2.1&lt;/li&gt;
&lt;li&gt;Clang: from Subversion&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: from Subversion&lt;/li&gt;
&lt;li&gt;GCC: 4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0&lt;/li&gt;
&lt;li&gt;Visual C++: 9.0, 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX:&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: 12.1.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.55.0 リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_55_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_55_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.55.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_55_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_55_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_55_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_55_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Predef&lt;ul&gt;
&lt;li&gt;Rene Rivera氏作のこのライブラリには、C、C++、Objective C、Objective C++で提供されているマクロや、それらに存在するヘッダ内で定義されているマクロをまとめた情報をもとに、コンパイラやアーキテクチャ、OS、ライブラリ、その他のヴァージョン番号がひととおり定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#geometry&#34;&gt;Geometory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multi-index&#34;&gt;Multi-index Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#rational&#34;&gt;Rational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#smart-pointer&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#timer&#34;&gt;Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Quickbook(#quickbook)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ニュース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本バージョンよりいくつかの古いコンパイラのサポートが終了した&lt;/li&gt;
&lt;li&gt;新しくサポートされる最低環境は以下の通り。なお他のコンパイラに変更はない&lt;ul&gt;
&lt;li&gt;Digitial Mars 8.41&lt;/li&gt;
&lt;li&gt;GCC 3.3&lt;/li&gt;
&lt;li&gt;Intel 6.0&lt;/li&gt;
&lt;li&gt;Visual C++ 7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;なお、更に以下のコンパイラのサポートを終了することも考えている。もし使用しているのであればメーリングリストで知らせてほしい&lt;ul&gt;
&lt;li&gt;Metrowoks C++ (ie. codewarrior)&lt;/li&gt;
&lt;li&gt;SunPro 5.3 またはそれ以前&lt;/li&gt;
&lt;li&gt;Borland C++ Builder 2006 (bcc 5.82) またはそれ以前&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio 2013／Visual C++ 12.0での既知の問題&lt;/h2&gt;
&lt;p&gt;Visual Studio 2013がリリースされた時期が、Boostのリリースプロセスの遅い段階であったため、いくつかの未解決問題が存在する。これは以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializationがコンパイルできない。&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;のインクルードが不足しているためである。&lt;/li&gt;
&lt;li&gt;Boost.Containerの&lt;code&gt;allocator_traits&lt;/code&gt;から&lt;code&gt;has_member_function_callable_with&lt;/code&gt;を使用するとコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9332&#34; target=&#34;_blank&#34;&gt;#9332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのライブラリで&lt;code&gt;initializer_list&lt;/code&gt;のオーバーロードが曖昧になり、コンパイルエラーになる。これはVisual C++のバグであり、現在有効な回避策は見つかっていない。UnorderedとMulti-Indexの関数オーバーロードでその問題が発生する。&lt;/li&gt;
&lt;li&gt;Threadの&lt;code&gt;ex_scoped_thread&lt;/code&gt;がコンパイルに失敗する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9333&#34; target=&#34;_blank&#34;&gt;#9333&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの誤字を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7915&#34; target=&#34;_blank&#34;&gt;#7915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCでの警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8850&#34; target=&#34;_blank&#34;&gt;#8850&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;average&lt;/code&gt;を&lt;code&gt;fdiv&lt;/code&gt;に名称変更 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8262&#34; target=&#34;_blank&#34;&gt;#8262&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bad_any_cast&lt;/code&gt;を、モジュール間で見えるようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8751&#34; target=&#34;_blank&#34;&gt;#8751&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;不足していた&lt;code&gt;BOOST_NOEXCEPT&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; rvaluesの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9215&#34; target=&#34;_blank&#34;&gt;#9215&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windowsランタイム向けに、限定的なポートを実装した。このサポートは、言語拡張機能を有効にする必要がある。ポートはWindowsランタイムAPIによって公開される制限機能により、以下の制限事項も付いてくる：&lt;ul&gt;
&lt;li&gt;コア機能である&lt;code&gt;io_service&lt;/code&gt;、&lt;code&gt;strand&lt;/code&gt;、バッファ、複合操作、タイマー等は、今まで通り動作する。&lt;/li&gt;
&lt;li&gt;ソケットは、クライアントTCP側のみサポートする。&lt;/li&gt;
&lt;li&gt;クライアント側TCPソケットの明示的なバインディングは、サポートされない。&lt;/li&gt;
&lt;li&gt;ソケットでは&lt;code&gt;cancel()&lt;/code&gt;関数をサポートしない。非同期操作は、クローズによってのみキャンセルを行うことになるだろう。&lt;/li&gt;
&lt;li&gt;null bufferを使用した操作はサポートされない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tcp::no_delay&lt;/code&gt;、&lt;code&gt;socket_base::keep_alive&lt;/code&gt;オプションのみサポートされる。&lt;/li&gt;
&lt;li&gt;名前解決はサーバー名をサポートせず、番号のみ。例として、&#34;http&#34;ではなく&#34;80&#34;を使用する必要がある。&lt;/li&gt;
&lt;li&gt;ほとんどの名前解決クエリフラグは、効果を持たない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Boost 1.54.0から導入された)レギュレッションテストを、いくつかの環境向けに修正。&lt;code&gt;async_connect()&lt;/code&gt;からのエラーが完了ハンドラに伝達されていなかった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8795&#34; target=&#34;_blank&#34;&gt;#8795&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;(Boost 1.54.0から導入された)Windows向けの、&lt;code&gt;io_service&lt;/code&gt;が複数スレッドから着火されるケースのレギュレッションテストを修正。バグが発生した際、非同期操作の結果は正しくないとして破棄され、代わりに&lt;code&gt;0&lt;/code&gt;が使用されていた。TCPソケットでは、見かけ上(spurious)のファイル終端通知で起きていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8933&#34; target=&#34;_blank&#34;&gt;#8933&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのバグを修正。いくつかのハンドラIDが正しく出力されていなかった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8808&#34; target=&#34;_blank&#34;&gt;#8808&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;非同期&lt;code&gt;accept&lt;/code&gt;操作のテストに使用する比較がコンパイルエラーになっていた問題を修正。符号なしソケット記述子が正しく動作するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8752&#34; target=&#34;_blank&#34;&gt;#8752&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;すでに発生されたシグナルに対する&lt;code&gt;async_wait&lt;/code&gt;を開始した際、完了ハンドラにシグナル番号が正しく確実に渡されるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8738&#34; target=&#34;_blank&#34;&gt;#8738&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC 4.8の、未使用&lt;code&gt;typedef&lt;/code&gt;警告を抑制(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8980&#34; target=&#34;_blank&#34;&gt;#8980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;default invocation hookで使用するハンドラの、ムーブ最適化を有効にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8624&#34; target=&#34;_blank&#34;&gt;#8624&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;重複する&lt;code&gt;async_write_at&lt;/code&gt;操作を発行すべきではない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8669&#34; target=&#34;_blank&#34;&gt;#8669&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Windowsの&lt;code&gt;HANDLE&lt;/code&gt;を、同期&lt;code&gt;read&lt;/code&gt;の&lt;code&gt;GetOverlappedResult&lt;/code&gt;によって返される、非致命的な&lt;code&gt;ERROR_MORE_DATA&lt;/code&gt;を取り扱うように変更。&lt;/li&gt;
&lt;li&gt;Visual C++は言語拡張として「&lt;code&gt;generic&lt;/code&gt;」をキーワードとして扱う。これを回避するために、名前空間名を&lt;code&gt;cpp_generic&lt;/code&gt;に変更。&lt;/li&gt;
&lt;li&gt;Boost 1.54でサポートされた&lt;code&gt;async_result&lt;/code&gt;の結果を取り逃すという、いくつかの非同期操作の問題を修正。とくに、buffer streamテンプレートを、現在のハンドラパターンに従うように更新した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9000&#34; target=&#34;_blank&#34;&gt;#9000&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9001&#34; target=&#34;_blank&#34;&gt;#9001&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Visual Studio 2012向けに、ムーブサポートを有効にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8959&#34; target=&#34;_blank&#34;&gt;#8959&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Visual Studio 2012向けに、&lt;code&gt;use_future&lt;/code&gt;サポートを追加した。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8758&#34; target=&#34;_blank&#34;&gt;#8758&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;いくつかの、不要なハンドラのコピーを排除した。&lt;/li&gt;
&lt;li&gt;その他、コードとドキュメントの小さな問題を修正した。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8347&#34; target=&#34;_blank&#34;&gt;#8347&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8950&#34; target=&#34;_blank&#34;&gt;#8950&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8953&#34; target=&#34;_blank&#34;&gt;#8953&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8965&#34; target=&#34;_blank&#34;&gt;#8965&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8997&#34; target=&#34;_blank&#34;&gt;#8997&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x86ターゲットのGCC、MSVCおよびその互換コンパイラに対して、64ビットアトミック操作のサポートを追加。このサポートは、ターゲットCPUの要求するインストラクションがコンパイル時にわかる場合に有効になる&lt;/li&gt;
&lt;li&gt;x86-64ターゲットのGCCと互換コンパイラに対して、128ビットアトミック操作のサポートを追加。このサポートは、ターゲットCPUの要求するインストラクションがコンパイル時にわかる場合に有効になる。このサポートは、新たなマクロ&lt;code&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/code&gt;でテストできる&lt;/li&gt;
&lt;li&gt;GCC環境で、より効率的な&lt;code&gt;atomic&amp;lt;&amp;gt;&lt;/code&gt;の実装を追加。これはGCC 4.7以降で導入された&lt;code&gt;__atomic*&lt;/code&gt;インストラクションを使用する&lt;/li&gt;
&lt;li&gt;ARM v7のサポートを追加。Thumb 2のサポートを改善&lt;/li&gt;
&lt;li&gt;GCCとその互換コンパイラに、x32ターゲットのサポートを追加(たとえば、64ビット x86で32ビットポインタを使用できるような環境)&lt;/li&gt;
&lt;li&gt;Boost.Threadへの依存を削除&lt;/li&gt;
&lt;li&gt;False Sharingを避けるために、内部的なロックプールに適切なパディングとアラインメントが含まれるようになった&lt;/li&gt;
&lt;li&gt;Windows上のIntelコンパイラのコンパイル問題を修正。Windows上の重複した内部マクロを削除&lt;/li&gt;
&lt;li&gt;いくつかのコードを、使用可能な場合にC++11機能を使用するようリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.52と1.53でchrono_ioが文字列を正しくパースできていない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7868&#34; target=&#34;_blank&#34;&gt;#7868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/stopwatches/formatters/base_formatter.hpp&lt;/code&gt;のtypoを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9028&#34; target=&#34;_blank&#34;&gt;#9028&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註]: &lt;code&gt;=&lt;/code&gt;とするべきところ&lt;code&gt;==&lt;/code&gt;としていたため、&lt;code&gt;duration_style&lt;/code&gt;を変更出来ないでいた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;std::tmを初期化していなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9147&#34; target=&#34;_blank&#34;&gt;#9147&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Circular Buffer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Moveによりムーブセマンティクスをサポートした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7888&#34; target=&#34;_blank&#34;&gt;#7888&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;これによりCircular Bufferはムーブ可能かつコピー不可能な型をサポートする&lt;/li&gt;
&lt;li&gt;ただし&lt;code&gt;noexcept&lt;/code&gt;なムーブコンストラクタかつムーブ代入演算子の両方が実装されている必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメントの改良&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;指定されているとコンパイル出来ない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5362&#34; target=&#34;_blank&#34;&gt;#5362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不要な&lt;code&gt;const&lt;/code&gt;に対する警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7025&#34; target=&#34;_blank&#34;&gt;#7025&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCにおいて、Circular Buffer以外で定義されたコンマ演算子によって警告が出るのを抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7950&#34; target=&#34;_blank&#34;&gt;#7950&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;： 古いコンパイラのサポートを終了した&lt;/li&gt;
&lt;li&gt;新しいサポート対象は以下のバージョン及びそれ以後のみである。なお、他のコンパイラに変更はない&lt;ul&gt;
&lt;li&gt;Digital Mars 8.41&lt;/li&gt;
&lt;li&gt;GCC 3.3&lt;/li&gt;
&lt;li&gt;Intel C++ 6.0&lt;/li&gt;
&lt;li&gt;Visual C++ 7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SCARYイテレータを実装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat_set&lt;/code&gt;と&lt;code&gt;flat_map&lt;/code&gt;のイテレータがランダムアクセスイテレータであることが言及されていないのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8269&#34; target=&#34;_blank&#34;&gt;#8269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;によってswitch-caseでwarningが出力されるのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8473&#34; target=&#34;_blank&#34;&gt;#8473&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註] warningを抑制する&lt;code&gt;BOOST_FALLTHROUGH&lt;/code&gt;マクロが (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8408&#34; target=&#34;_blank&#34;&gt;#8408&lt;/a&gt;) で提案されている。用例は次の通り：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;switch&lt;/span&gt; (cond) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; A:
    ... ;
    BOOST_FALLTHROUGH;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; B:
    ... ;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;break&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

- C++11で&lt;code&gt;std::map&lt;/code&gt;に新規追加されたコンストラクタと同様のものを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8892&#34; target=&#34;_blank&#34;&gt;#8892&lt;/a&gt;)
    - [訳者註] 例えば次のようなものである&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; flat_map( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;a )
&lt;/pre&gt;&lt;/div&gt;

- &lt;code&gt;flat_set::insert&lt;/code&gt;の呼び出しが曖昧になっていた問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9009&#34; target=&#34;_blank&#34;&gt;#9009&lt;/a&gt;)
- &lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;とともに使用した場合、コピーでSEGVる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9064&#34; target=&#34;_blank&#34;&gt;#9064&lt;/a&gt;)
- ソート済みの非ユニークなシーケンスをflat_setに挿入するとクラッシュする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9092&#34; target=&#34;_blank&#34;&gt;#9092&lt;/a&gt;)
- &lt;code&gt;flat_multimap::insert(itr,itr)&lt;/code&gt;でリークする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9108&#34; target=&#34;_blank&#34;&gt;#9108&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スタックが正しくアラインメントされていないことにより、SSE2のIntrinsic命令によってセグメンテーションフォルトが起きる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8650&#34; target=&#34;_blank&#34;&gt;#8650&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいインターフェイス(unidirectional data transfer)を追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/libs/coroutine/doc/html/unidirect.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_55_0/libs/coroutine/doc/html/unidirect.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;所謂Generatorの実装である。以下に簡単なコード例を示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutines&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;pull_type gen(
    [](boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutines&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;push_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;yield)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}) yield(i);
    });

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; gen) std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
&lt;/pre&gt;&lt;/div&gt;

これまでの様に&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;caller&lt;/code&gt;から&lt;code&gt;callee&lt;/code&gt;に値を渡すことができない単方向(unidirectional)のインターフェイスとなる&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;このインターフェイスを実装したことにより、従来の双方向なインターフェイスは&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;非推奨&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;となった&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;ただし、`&lt;/span&gt;BOOST_COROUTINES_OLD&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;`マクロを定義することで古いインターフェイスも従来通り使用可能となる。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jamfile.v2でのターゲット名が間違っていることによって、ビルドができない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8782&#34; target=&#34;_blank&#34;&gt;#8782&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows環境でのauto-linkを有効にした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8801&#34; target=&#34;_blank&#34;&gt;#8801&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Android環境でコンパイルエラーになる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8706&#34; target=&#34;_blank&#34;&gt;#8706&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::map&lt;/code&gt;の&lt;code&gt;convert&lt;/code&gt;がコンパイルエラーになる問題を修正。&lt;code&gt;map_tag&lt;/code&gt;に対する&lt;code&gt;convert_impl&lt;/code&gt;の特殊化を実装 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8759&#34; target=&#34;_blank&#34;&gt;#8759&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;centroid()&lt;/code&gt;に、&lt;code&gt;segment type&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersects()&lt;/code&gt;と&lt;code&gt;disjoints()&lt;/code&gt;に、Segment-BoxとLinestring-Boxのサポートを追加&lt;/li&gt;
&lt;li&gt;パッキングアルゴリズムを使用した&lt;code&gt;rtee&lt;/code&gt;の作成を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains()&lt;/code&gt;と&lt;code&gt;covers()&lt;/code&gt;に、空間クエリ述語(spatial query predicates)を追加&lt;/li&gt;
&lt;li&gt;イテレーティブクエリを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのケースで、コンセプトに違反して&lt;code&gt;.back()&lt;/code&gt;と&lt;code&gt;.clear()&lt;/code&gt;が呼ばれていた。報告された例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cart_intersect&lt;/code&gt;、&lt;code&gt;get_turn_info&lt;/code&gt;、&lt;code&gt;handle_tangencies&lt;/code&gt;、&lt;code&gt;enrich_intersection_info&lt;/code&gt;で、一貫性のあるサイド情報を使用するようにした。これは(必要に応じて)6ポイントのみの整数、4 or 3セグメント上でのズームに切り替えることによって行われる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スパイクによって引き起こされる、Intersectionで自己交差が生成される問題を修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6958&#34; target=&#34;_blank&#34;&gt;#6958&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;直前ステップのスパイクによって引き起こされる、不正な入力例外(invalid input exception)問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8364&#34; target=&#34;_blank&#34;&gt;#8364&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8365&#34; target=&#34;_blank&#34;&gt;#8365&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::geometry::model::point&lt;/code&gt;の単一引数コンストラクタに、&lt;code&gt;explicit&lt;/code&gt;を付けた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8969&#34; target=&#34;_blank&#34;&gt;#8369&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントにメンバ変数が記載されるよう、doxygen_xml2qbkツールを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8825&#34; target=&#34;_blank&#34;&gt;#8825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スパイクによって引き起こされる、triangle-triangleのintersectionが失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8652&#34; target=&#34;_blank&#34;&gt;#8652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/geometry/strategies/intersection.hpp&amp;gt;&lt;/code&gt;が自身のファイルをインクルードしていたので修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9047&#34; target=&#34;_blank&#34;&gt;#9047&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バンドルプロパティとして&lt;code&gt;void&lt;/code&gt;型は許可していなかったが、指定できてしまっていた(たとえば、&lt;code&gt;VertexProperties&lt;/code&gt;テンプレートパラメータへのグラフ型指定で)。現在は、静的アサートで完全に禁止した。代わりに&lt;code&gt;boost::no_property&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_search&lt;/code&gt;に、ビジターイベントポイント&lt;code&gt;finish_edge&lt;/code&gt;のサポートを追加。この変更は、そのメンバ関数を持たないビジターとの下位互換性を持つ (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5269&#34; target=&#34;_blank&#34;&gt;#5269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sunコンパイラでのビルドテストを無効にした&lt;/li&gt;
&lt;li&gt;マルチソース頂点のサポートを、非名前付きパラメータ版の&lt;code&gt;breadth_first_visit&lt;/code&gt;、&lt;code&gt;breadth_first_search&lt;/code&gt;、&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;、&lt;code&gt;dijkstra_shortest_paths_no_init&lt;/code&gt;に追加した。これはまだドキュメントに記載していない。これを使用する場合は、それらの関数の単一頂点パラメータを、同じ型を指す2つのInput Iteratorで置き換える&lt;/li&gt;
&lt;li&gt;Louis Dionneのコントリビュートにより、Hawick circuitsアルゴリズムを追加した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8433&#34; target=&#34;_blank&#34;&gt;#8433&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Maciej Piechotkaのコントリビュートにより、edge coloringアルゴリズムを追加した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8317&#34; target=&#34;_blank&#34;&gt;#8317&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Piotr Wygockiのコントリビュートにより、min-cost max-flowアルゴリズムを追加した&lt;/li&gt;
&lt;li&gt;以下のバグ、および機能リクエストを修正した：&lt;ul&gt;
&lt;li&gt;ヘッダーファイルのインクルード順に依存していた問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8791&#34; target=&#34;_blank&#34;&gt;#8791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCでの未使用変数警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8877&#34; target=&#34;_blank&#34;&gt;#8877&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8986&#34; target=&#34;_blank&#34;&gt;#8986&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;に、辺の重みとして負の値を入れると、予期しないエラーが発生する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9012&#34; target=&#34;_blank&#34;&gt;#9012&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;の擬似コードが間違っていたので修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9080&#34; target=&#34;_blank&#34;&gt;#9080&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sunコンパイラが複雑なSFINAE構文をコンパイル出来なかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8822&#34; target=&#34;_blank&#34;&gt;#8822&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SVCで無限ループとして推論され警告されてしまうのを抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8568&#34; target=&#34;_blank&#34;&gt;#8568&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSVCのSTLの実装の問題によりリークする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7156&#34; target=&#34;_blank&#34;&gt;#7156&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_ptr&lt;/code&gt;の代入演算子の実装の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7164&#34; target=&#34;_blank&#34;&gt;#7164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8277&#34; target=&#34;_blank&#34;&gt;#8277&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCにてコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8976&#34; target=&#34;_blank&#34;&gt;#8976&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マルチプロセスなブラウザを開くと&lt;code&gt;condition_variable&lt;/code&gt;が加速する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9008&#34; target=&#34;_blank&#34;&gt;#9008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PPCのCASに渡す引数の順番が正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9065&#34; target=&#34;_blank&#34;&gt;#9065&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCにて&lt;code&gt;realloc&lt;/code&gt;という関数が意図しないマクロ置き換えされるのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9073&#34; target=&#34;_blank&#34;&gt;#9073&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註] この&lt;code&gt;realloc&lt;/code&gt;は標準の&lt;code&gt;realloc&lt;/code&gt;ではなく、Interprocessの内部で定義される関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; &lt;code&gt;splay&lt;/code&gt;コンテナの &lt;code&gt;xxx_dont_splay&lt;/code&gt;関数を廃止した。また、&lt;code&gt;splay_set_hook&lt;/code&gt;も廃止した。この代替として、&lt;code&gt;bs_set_hook&lt;/code&gt;を利用すること。いずれもBoost 1.56で削除予定である&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&amp;lt;/font&amp;gt; ハッシュコンテナの&lt;code&gt;end&lt;/code&gt;イテレータがバケット配列の&lt;code&gt;end&lt;/code&gt;よりひとつ後ろを指すよう実装されていた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8698&#34; target=&#34;_blank&#34;&gt;#8698&lt;/a&gt;)。このため、バケット配列の隣に値を挿入したときにひどいバグが発生していた。&lt;code&gt;end&lt;/code&gt;イテレータはバケット配列の先頭を指すように修正した&lt;/li&gt;
&lt;li&gt;テンプレートおよびデバッグシンボルの削減のために大規模なリファクタリングを行った。MSVCのデバッグモードで生成されるテストオブジェクトファイルサイズが約半分になった。Identical COMDAT Folding (ICF)がないコンパイラでもサイズ削減に寄与するはずである&lt;/li&gt;
&lt;li&gt;SCARYイテレータを実装した &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;例外は&lt;code&gt;boost::bad_lexical_cast&lt;/code&gt;に変換されなくなった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8966&#34; target=&#34;_blank&#34;&gt;#8966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;の128bit整数型に対する特殊化された値が変換のために必要になった場合に、それをチェックする&lt;code&gt;static assert&lt;/code&gt;を追加。128bit整数型をサポートしているかどうかを判定するために&lt;code&gt;BOOST_HAS_INT128&lt;/code&gt;を使用するように変更。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8790&#34; target=&#34;_blank&#34;&gt;#8790&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントを改善し、さらに多くの使用例を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;修正点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/code&gt;環境設定マクロを追加した。このマクロを定義すると、設定パーサでのフォーマッタファクトリとデフォルトフィルタのコンパイルをしないようになる。これにより、設定パーサのサポートを維持したままバイナリサイズを削減できる可能性がある&lt;/li&gt;
&lt;li&gt;パーサを書きなおして生成されるバイナリサイズを削減した。この修正により、あいまいな入力や正しくない入力の検出精度が向上し、より堅牢になった&lt;/li&gt;
&lt;li&gt;以下のヘッダを廃止予定にした。これらのヘッダは将来のリリースで削除される。また、内容については他のライブラリに移譲した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/intrusive_ref_counter.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/explicit_operator_bool.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/empty_deleter.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows上で&lt;code&gt;QueryPerformanceCounter&lt;/code&gt; APIを利用した場合、激しいスレッド間競合により、&lt;code&gt;timer&lt;/code&gt;アトリビュートが間違った時間になってしまう問題を修正&lt;/li&gt;
&lt;li&gt;パース済みフィルターとあるアトリビュートの組み合わせを防止するフィルターパーサのバグを修正&lt;/li&gt;
&lt;li&gt;デフォルトシンクとフォーマッタ間でスレッドIDの書式が違う問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;完了したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android上で&lt;code&gt;posix_memalign&lt;/code&gt;が宣言されていない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8815&#34; target=&#34;_blank&#34;&gt;#8815&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mingw w64上でコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8819&#34; target=&#34;_blank&#34;&gt;#8819&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/detail/spin_mutex.hpp&lt;/code&gt;が&lt;code&gt;pthread_&lt;/code&gt;系関数からのエラーを完全に無視している (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8915&#34; target=&#34;_blank&#34;&gt;#8915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libs/log/src/once_block.cpp&lt;/code&gt;が&lt;code&gt;pthread_&lt;/code&gt;系関数からのエラーをほとんど無視している (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8917&#34; target=&#34;_blank&#34;&gt;#8917&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;attribute_value_set.cpp&lt;/code&gt;がコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9139&#34; target=&#34;_blank&#34;&gt;#9139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;boost/log/detail/snprintf.hpp&lt;/code&gt;が&lt;code&gt;snprintf&lt;/code&gt;と&lt;code&gt;vsnprintf&lt;/code&gt;が定義されていないためコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9140&#34; target=&#34;_blank&#34;&gt;#9140&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;boost::log::aux::light_function&lt;/code&gt;がビルドできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9153&#34; target=&#34;_blank&#34;&gt;#9153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;solaris studio 12.3でstlport4を利用するとき、&lt;code&gt;&amp;lt;cstudio&amp;gt;&lt;/code&gt;をインクルードすれば&lt;code&gt;fflush&lt;/code&gt;は&lt;code&gt;std&lt;/code&gt;名前空間にあるが、&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;をインクルードしても&lt;code&gt;std&lt;/code&gt;名前空間にある(&lt;code&gt;using&lt;/code&gt;しているだけ)ので、&lt;code&gt;std::&lt;/code&gt;を指定しなければならない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9155&#34; target=&#34;_blank&#34;&gt;#9155&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳細は&lt;a href=&#34;http://www.boost.org/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;変更履歴&lt;/a&gt;を参照のこと&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多数の警告を抑制。（主にGCC-4.8とMSVCからのもの）(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8384&#34; target=&#34;_blank&#34;&gt;#8384&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8855&#34; target=&#34;_blank&#34;&gt;#8855&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9107&#34; target=&#34;_blank&#34;&gt;#9107&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9109&#34; target=&#34;_blank&#34;&gt;#9109&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PGIでのコンパイルエラーを修正。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8333&#34; target=&#34;_blank&#34;&gt;#8333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PGIで、&lt;code&gt;erf&lt;/code&gt;関数が不正な値を生成する原因となる、定数初期化の問題を修正。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8621&#34; target=&#34;_blank&#34;&gt;#8621&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++の関数と同じ名前で定義されているC99のいくつかのマクロでマクロ展開されてしまうのを防止。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8732&#34; target=&#34;_blank&#34;&gt;#8732&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8733&#34; target=&#34;_blank&#34;&gt;#8733&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自由度が巨大な（&lt;code&gt;integer&lt;/code&gt;で表現可能な値よりも大きな）場合でもStudentのT分布が正しく振る舞うように修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8873&#34; target=&#34;_blank&#34;&gt;#8873&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;プラットフォームで&lt;code&gt;long double&lt;/code&gt;がサポートされていない場合でも、いくつかのコア関数で&lt;code&gt;long double&lt;/code&gt;が使用できるようにした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8940&#34; target=&#34;_blank&#34;&gt;#8940&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;確率変数が無限大の時に不正な尺度母数や位置母数のエラーを捕捉できるように、分布関数のエラーハンドリングを修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9126&#34; target=&#34;_blank&#34;&gt;#9126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel C++ 14の不完全な&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;のためのワークアラウンドを追加。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9083&#34; target=&#34;_blank&#34;&gt;#9083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;楕円積分の中で行われる、引数を約分する処理の整合性を向上。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9104&#34; target=&#34;_blank&#34;&gt;#9104&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数がarcsineもしくはStudentのT分布である時に、逆不完全ベータ関数の結果で桁落ちが発生してしまうバグを修正。([訳注]：訳に自信ないのでダブルチェックお願いします)&lt;/li&gt;
&lt;li&gt;一種のベッセル関数ならびにK関数の連分数で擬似的な(Spurious)オーバーフローやアンダーフローが発生する問題を修正。([訳注]：訳に自信ないのでダブルチェックお願いします)&lt;/li&gt;
&lt;li&gt;Thomas Luuによる、非中央のカイ二乗分布変位値の改善を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの誤りを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7952&#34; target=&#34;_blank&#34;&gt;#7952&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MoveのTraitsを改善 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8764&#34; target=&#34;_blank&#34;&gt;#8764&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::move&lt;/code&gt;と&lt;code&gt;boost::forward&lt;/code&gt;に&lt;code&gt;noexcept&lt;/code&gt;指定をつけた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8765&#34; target=&#34;_blank&#34;&gt;#8765&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++98/03で&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;マクロを適用すると正しく動作しない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8842&#34; target=&#34;_blank&#34;&gt;#8842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/move/algorithm.hpp&lt;/code&gt;で自身をインクルードしていた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8979&#34; target=&#34;_blank&#34;&gt;#8979&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; : interrupt stateは中断を終了させるためのイベント列をサポートした。&lt;/li&gt;
&lt;li&gt;例外を無効にしたgcc-4.2でコンパイルが通らなかった問題を修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8686&#34; target=&#34;_blank&#34;&gt;#8686&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Serialization サポートの追加&lt;/li&gt;
&lt;li&gt;GCC による警告を抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8872&#34; target=&#34;_blank&#34;&gt;#8872&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow&lt;/code&gt; の引数に大きな値を設定した際に発生するバグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8809&#34; target=&#34;_blank&#34;&gt;#8809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow&lt;/code&gt; で &lt;code&gt;0&lt;/code&gt; のべき乗を計算した場合のバグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8798&#34; target=&#34;_blank&#34;&gt;#8798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; の IO で &lt;code&gt;CHAR_BIT&lt;/code&gt; 以下の値の出力 (文字列への変換) が正常に行われていなかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8745&#34; target=&#34;_blank&#34;&gt;#8745&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で固定サイズのときに左シフトをするとオーバフローが発生する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8741&#34; target=&#34;_blank&#34;&gt;#8741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で発生する警告を抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8748&#34; target=&#34;_blank&#34;&gt;#8748&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C99 のマクロが必要になる関数を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8732&#34; target=&#34;_blank&#34;&gt;#8732&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で &lt;code&gt;INT_MIN&lt;/code&gt;, &lt;code&gt;LONG_MIN&lt;/code&gt; 等の構築が失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8711&#34; target=&#34;_blank&#34;&gt;#8711&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.MultiIndexのC++11標準準拠度向上&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を効率的にムーヴできるようになった&lt;/li&gt;
&lt;li&gt;Initializer listのサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace&lt;/code&gt;系関数のサポート&lt;/li&gt;
&lt;li&gt;コピー不可の要素(&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;など)をサポート。また、要素と互換性のある型のイテレータについて、無駄なコピーをせず、&lt;code&gt;[first,last)&lt;/code&gt;の形式で範囲挿入できるようになった&lt;/li&gt;
&lt;li&gt;ランダムアクセスインデックスへの&lt;code&gt;shrink_to_fit()&lt;/code&gt;実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11以前のコンパイラでの制限については&lt;a href=&#34;http://www.boost.org//libs/multi_index/doc/compiler_specifics.htmll&#34; target=&#34;_blank&#34;&gt;compiler specifics&lt;/a&gt;参照のこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下のクラスは&lt;strong&gt;非推奨&lt;/strong&gt;になった：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;member_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;const_mem_fun_explicit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mem_fun_explicit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_equal_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_less&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_greater&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_hash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#mpi&#34; name=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MPI の非推奨な関数を入れ替え&lt;/li&gt;
&lt;li&gt;マルチスレッド初期化のサポートを追加&lt;/li&gt;
&lt;li&gt;in-prace collectives の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;phonenix::funcion&lt;/code&gt;のコンストラクタを&lt;code&gt;constexpr&lt;/code&gt;にした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9049&#34; target=&#34;_blank&#34;&gt;#9049&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sebastien Loriotによるパッチで、VoronoiベンチマークのCGAL部分を更新した。&lt;/li&gt;
&lt;li&gt;(Intelからのパッチにより、)&lt;code&gt;polygon_90_set_data&lt;/code&gt;に多角形分解機能(polygon decomposition capability)を追加した。&lt;/li&gt;
&lt;li&gt;Tracチケットのバグ修正：&lt;ul&gt;
&lt;li&gt;Polygonと&lt;code&gt;range/algorithm&lt;/code&gt;が衝突する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8197&#34; target=&#34;_blank&#34;&gt;#8197&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#property-map&#34; name=&#34;property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_properties&lt;/code&gt;オブジェクトを非破壊的に &lt;code&gt;.property(name, pm)&lt;/code&gt; メソッドチェインで構築できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_properties()
  .property(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;color&#34;&lt;/span&gt;, color_map)
  .property(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pos&#34;&lt;/span&gt;, position_map)
&lt;/pre&gt;&lt;/div&gt;

- 生ポインタをプロパティマップとして利用できないようにした。これは以前、Visual Studioでしばしば失敗したためである。このような用法はBoost.Graphの例やテストにあったが全て削除した。&lt;code&gt;graph&lt;/code&gt;で&lt;code&gt;vertex&lt;/code&gt;プロパティを使う際(この機能のもっとも一般的な利用法である)には次のように記述する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_iterator_property_map(
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pointer or container .begin() iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
  get(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_index, &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;graph object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

(註：このコードで&lt;code&gt;get()&lt;/code&gt;の名前空間が省略されているのはコードを汎化する上で重要である)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;graph&lt;/code&gt;以外では、以下のように記述するとよい&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_iterator_property_map(
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;typed_identity_property_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;&amp;lt;boost/property_map/property_map.hpp&amp;gt;&lt;/code&gt;の151行目と159行目にはコメントアウトした&lt;code&gt;static&lt;/code&gt;アサーションがあるが、これを有効にすることで、ユーザーコード中にあるこのような廃止予定のポインタの用法を検出することができる&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#rational&#34; name=&#34;rational&#34;&gt;Rational&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11モードでコンパイルする場合、Boost.Testが&lt;code&gt;lowest&lt;/code&gt;と&lt;code&gt;max_digits10&lt;/code&gt;のどちらかを参照するため、C++11で追加された&lt;code&gt;std::numeric_limits&lt;/code&gt;のメンバ、&lt;code&gt;lowest&lt;/code&gt;と&lt;code&gt;max_digits10&lt;/code&gt;をユニットテストコードに追加した。&lt;/li&gt;
&lt;li&gt;C++11でナローイングがエラーになるため、内部変数の初期化でナローイングがおこらないように修正した。これにより &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5855&#34; target=&#34;_blank&#34;&gt;#5855&lt;/a&gt; が解決された。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#smart-pointer&#34; name=&#34;smart-pointer&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Logから抽出された&lt;code&gt;boost/smart_ptr/intrusive_ref_counter.hpp&lt;/code&gt;ヘッダーが加えられた。このヘッダーはユーザーのクラスに&lt;code&gt;intrusive_ptr&lt;/code&gt;サポートを加えるミックスイン基底クラスを実装する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8519&#34; target=&#34;_blank&#34;&gt;#8519&lt;/a&gt; 同期: completion function（バリアの待機完了時に呼ばれる関数）の機能を追加して&lt;code&gt;barrier&lt;/code&gt;クラスを更新。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8515&#34; target=&#34;_blank&#34;&gt;#8515&lt;/a&gt; 非同期: &lt;code&gt;shared_future::then&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8615&#34; target=&#34;_blank&#34;&gt;#8615&lt;/a&gt; 非同期: &lt;code&gt;make_future&lt;/code&gt;/&lt;code&gt;make_shared_future&lt;/code&gt;を&lt;code&gt;make_ready_future&lt;/code&gt;に置き換え。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8627&#34; target=&#34;_blank&#34;&gt;#8627&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::unwrap&lt;/code&gt;メンバ関数と&lt;code&gt;unwrap&lt;/code&gt;するコンストラクタを追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8677&#34; target=&#34;_blank&#34;&gt;#8677&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::get_or&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8678&#34; target=&#34;_blank&#34;&gt;#8678&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::fallback_to&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8891&#34; target=&#34;_blank&#34;&gt;#8891&lt;/a&gt; &lt;code&gt;upgrade_to_unique_lock&lt;/code&gt;に&lt;code&gt;mutex()&lt;/code&gt;メンバ関数が無かったので追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8955&#34; target=&#34;_blank&#34;&gt;#8955&lt;/a&gt; &lt;code&gt;future&lt;/code&gt;から効率的に&lt;code&gt;exception_ptr&lt;/code&gt;を取得したいという要望に対応。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7461&#34; target=&#34;_blank&#34;&gt;#7461&lt;/a&gt; &lt;code&gt;count_to_release&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;のときに&lt;code&gt;detail::win32::ReleaseSemaphore&lt;/code&gt;が呼ばれてしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt; &lt;code&gt;GetTickCount&lt;/code&gt;より適切な&lt;code&gt;GetTickCount64&lt;/code&gt;を使用するように変更。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8768&#34; target=&#34;_blank&#34;&gt;#8768&lt;/a&gt; win32で稀に&lt;code&gt;condition_variable&lt;/code&gt;が永遠に&lt;code&gt;wait&lt;/code&gt;してしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8817&#34; target=&#34;_blank&#34;&gt;#8817&lt;/a&gt; Windows CE用のコードによって、mingw w64環境でコンパイルができない問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8943&#34; target=&#34;_blank&#34;&gt;#8943&lt;/a&gt; Window上のIntel C++ Composer XE 2013で&lt;code&gt;boost::call_once&lt;/code&gt;を使用したコードのコンパイルに失敗する問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8931&#34; target=&#34;_blank&#34;&gt;#8931&lt;/a&gt; &lt;code&gt;external_locking&lt;/code&gt;のリファレンスにtypoがあったのを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9029&#34; target=&#34;_blank&#34;&gt;#9029&lt;/a&gt; ドキュメントの誤植を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9073&#34; target=&#34;_blank&#34;&gt;#9037&lt;/a&gt; gcc &lt;code&gt;-Wshadow&lt;/code&gt;でコンパイルしたときに&lt;code&gt;conditional_variable{,_fwd}.hpp&lt;/code&gt;で警告が発生する問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9041&#34; target=&#34;_blank&#34;&gt;#9041&lt;/a&gt; Boost.Threadの動的共有オブジェクトがBoost.Atomicへのシンボル参照を解決できない問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9048&#34; target=&#34;_blank&#34;&gt;#9048&lt;/a&gt; &lt;code&gt;boost::scoped_thread&lt;/code&gt;の可変長テンプレート引数を使用するコンストラクタが使いにくい問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9079&#34; target=&#34;_blank&#34;&gt;#9079&lt;/a&gt; Windows環境で、Condition variableが永遠にwaitしてしまう問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#timer&#34; name=&#34;timer&#34;&gt;Timer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel compilerで&lt;code&gt;progress.hpp&lt;/code&gt;がコンパイルできない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8956&#34; target=&#34;_blank&#34;&gt;#8956&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_copy_contructible&lt;/code&gt;トレイト追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8802&#34; target=&#34;_blank&#34;&gt;#8802&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の警告を修正&lt;ul&gt;
&lt;li&gt;未使用の変数への警告 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8851&#34; target=&#34;_blank&#34;&gt;#8851&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用の&lt;code&gt;typedef&lt;/code&gt;への警告 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8874&#34; target=&#34;_blank&#34;&gt;#8874&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;detail&lt;/code&gt;な関数がADLによってエクスポートされてしまうのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::result_of&lt;/code&gt;で、デフォルトでTR1のプロトコルを使うようにし、もしこの関数オブジェクトがサポートしていない場合(たとえばC++11のラムダ関数)には&lt;code&gt;decltype&lt;/code&gt;を使うように設定できるようになった。このモードを利用するには&lt;code&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/code&gt;環境設定マクロを定義する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::base_from_member&lt;/code&gt;クラステンプレートのC++11対応度向上。このクラスはコンパイラが右辺値参照、可変引数テンプレート、関数テンプレートのデフォルト実引数機能を備えている際に、コンストラクタ実引数の完全転送を実装する&lt;/li&gt;
&lt;li&gt;Boost.Logから&lt;code&gt;boost/utility/explicit_operator_bool.hpp&lt;/code&gt;と&lt;code&gt;boost/utility/empty_deleter.hpp&lt;/code&gt;を受け継いだ。それぞれ、&lt;code&gt;bool&lt;/code&gt;への明示的な型変換演算子となにもしないデリータを定義するためのユーティリティである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; rvalueをコンストラクタ/代入演算子の仮引数にしたときコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8988&#34; target=&#34;_blank&#34;&gt;#8988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ある&lt;code&gt;variant&lt;/code&gt;クラステンプレートが&lt;code&gt;nothrow&lt;/code&gt;コピーコンストラクタと例外を送出するムーヴコンストラクタを持っている場合に、ムーヴ代入演算子がコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8772&#34; target=&#34;_blank&#34;&gt;#8772&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;例外が無効の環境下でのコンパイルに対応 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8717&#34; target=&#34;_blank&#34;&gt;#8717&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;到達不能コード警告を解消 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8665&#34; target=&#34;_blank&#34;&gt;#8665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;重複したコードを削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7601&#34; target=&#34;_blank&#34;&gt;#7601&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Waveドライバーが0xFFFFui64トークンを不適切に処理する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8848&#34; target=&#34;_blank&#34;&gt;#8848&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;--c++0x&lt;/code&gt;オプションが記載されていたが、実際には不正なオプションになる。ドキュメント表記を&lt;code&gt;--c++11&lt;/code&gt;に修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9098&#34; target=&#34;_blank&#34;&gt;#9098&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不完全なキャラクタセットについて&lt;code&gt;assert&lt;/code&gt;ではなく例外を投げるようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8843&#34; target=&#34;_blank&#34;&gt;#8843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用の&lt;code&gt;typedef&lt;/code&gt;削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8880&#34; target=&#34;_blank&#34;&gt;#8880&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence_stack.hpp&lt;/code&gt;で&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;のかわりにRAIIを使うようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8882&#34; target=&#34;_blank&#34;&gt;#8882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;診断がきちんと動くようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8474&#34; target=&#34;_blank&#34;&gt;#8474&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Quickbook 1.6の言語実装を完了した。詳細は以下を参照&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/quickbook/versions.html#quickbook.versions.1_6&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/doc/html/quickbook/versions.html#quickbook.versions.1_6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;＜ライブラリ名＞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt; (必要であれば分類分けをする)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;＜追加、変更、削除内容＞ (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/0&#34; target=&#34;_blank&#34;&gt;#0&lt;/a&gt;) (←svn.boost.orgのissuesへのリンク)&lt;/li&gt;
&lt;li&gt;＜追加、変更、削除内容＞ (&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/0&#34; target=&#34;_blank&#34;&gt;r0&lt;/a&gt;) (←svn.boost.orgのcommitへのリンク)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt;： 赤文字+ボールドではっきりと分かるように&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&amp;lt;/font&amp;gt;： これも赤文字で&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[訳注] 本家ノートの記述が不十分であると考えるときは、適宜注釈を入れる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://blog.example.com/path/to/references&#34; target=&#34;_blank&#34;&gt;必要であれば外部の文献へのリンクを挿入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:
- Linux:
    - Clang: 3.3, 3.2, 3.1, 3.0
    - Clang, C++11, libc++: 3.4, 3.3
    - GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
    - GCC, C++11: 4.8.1
    - GCC, C++98: 4.8.1
- OS X:
    - GCC: 4.2
    - Apple Clang: 5.0
    - Apple Clang, C++11: 5.0
- Windows:
    - GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
    - Visual C++: 11.0, 10.0, 9.0&lt;/p&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 5.0&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.3, 3.2, 3.1, 3.0, trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4, 3.3&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1&lt;/li&gt;
&lt;li&gt;Intel: 13.0.1, 12.1.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Kohei Takahashi, Yuta Hirokawa, zak, sscrisk, hotwatermorning&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.56.0リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_56_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_56_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.56.0リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;モジュール化&lt;/h2&gt;
&lt;p&gt;Boostのバージョン管理を、Subversionから、Gitのサブモジュールを使用するシステムに移行した。ディレクトリの構成が、以前と少し異なる。&lt;/p&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新モジュール&lt;/h2&gt;
&lt;p&gt;以下のモジュールは、既存のコードから抽出されたもの。ヘッダのパスは今までと同じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assert&lt;ul&gt;
&lt;li&gt;カスタマイズ可能なassertマクロ。Peter Dimovによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core&lt;ul&gt;
&lt;li&gt;他のライブラリから使用される、最小の依存関係を持つコアユーティリティ。Peter Dimov、Glen Fernandes、Andrey Semashevによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lexical_Cast&lt;ul&gt;
&lt;li&gt;Kevlin Henney氏による、テキストと整数間の汎用的な変換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throw_Exception&lt;ul&gt;
&lt;li&gt;Emil Dotchevski氏による、Boostから例外を送出するための一般的なインフラストラクチャ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WinApi&lt;ul&gt;
&lt;li&gt;Boost内部で使用する、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;を必要としない宣言。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/align.html&#34; target=&#34;_blank&#34;&gt;Align&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Glen Fernandes氏による、メモリアラインメントの関数、アロケータ、アダプタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/boost_typeindex.html&#34; target=&#34;_blank&#34;&gt;Type_Index&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Antony Polukhin氏による、実行時とコンパイル時両方で使用できる、コピー可能なtype info。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#assign&#34;&gt;Assign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#mpl&#34;&gt;MPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#tti&#34;&gt;TTI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;非推奨ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TR1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなアキュムレータとして、&lt;code&gt;rolling_variance&lt;/code&gt;と&lt;code&gt;rolling_moment&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照関係の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9215&#34; target=&#34;_blank&#34;&gt;#9215&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9462&#34; target=&#34;_blank&#34;&gt;#9462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coroutineの新しいインタフェースで&lt;code&gt;boost::asio::spawn()&lt;/code&gt;が動かなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9442&#34; target=&#34;_blank&#34;&gt;#9442&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9928&#34; target=&#34;_blank&#34;&gt;#9928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;のデストラクタによるクリーンナップ処理が走ったとき、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;のコルーチンが正しくアンワインド(スタック巻き戻しによるスタック内のデストラクタ呼び出し)されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9731&#34; target=&#34;_blank&#34;&gt;#9731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::wrap()&lt;/code&gt;と&lt;code&gt;strand::wrap()&lt;/code&gt;によって生成されるハンドラのための継続フックの移譲を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9741&#34; target=&#34;_blank&#34;&gt;#9741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;接続志向IPソケットのために、WindowsのI/O完了ポートバックエンドに、使用可能なら&lt;code&gt;ConnectEx()&lt;/code&gt;関数を使用するようにした。&lt;/li&gt;
&lt;li&gt;非Windows(および非IOCP Windows)環境において、&lt;code&gt;io_service&lt;/code&gt;のインスタンスひとつに付き、ひとつの条件変数を使用するよう変更した。これによって、&lt;code&gt;run_one()&lt;/code&gt;が複数スレッドから呼ばれる際の、潜在的な競合状態を解決した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono&lt;/code&gt;と&lt;code&gt;std::chrono&lt;/code&gt;のクロックをベースにしてタイムアウト時間を計算する際の整数オーバーフローを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9662&#34; target=&#34;_blank&#34;&gt;#9662&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9778&#34; target=&#34;_blank&#34;&gt;#9778&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;kqueueバックエンドの&lt;code&gt;EV_CLEAR&lt;/code&gt;ハンドリングに、さらに変更を加えた。Mac OS Xの&lt;code&gt;close()&lt;/code&gt;システムコールがハングするケースがあったため。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolver_query_base::flags::operator~&lt;/code&gt;の実装で無限再帰が起こっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9548&#34; target=&#34;_blank&#34;&gt;#9548&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;膨大な数のソケットを使うWindows上で&lt;code&gt;select&lt;/code&gt;リアクタがより効率的に動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9528&#34; target=&#34;_blank&#34;&gt;#9528&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのGCCで起きるtype aliasingの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9550&#34; target=&#34;_blank&#34;&gt;#9550&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アドレスサニタイザーの警告を回避するために、バッファのテストをコンパイル時のみ走らせるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のWindowsバージョンで、&lt;code&gt;GetQueuedCompletionStatus()&lt;/code&gt;のタイムアウトワークアラウンドを無効にした(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/9d13af49f80f2f12e3b99c9c8b4219b0c4bfe8eb&#34; target=&#34;_blank&#34;&gt;9d13af4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスを使用する際の、文字列ベースのスコープIDをサポートした&lt;/li&gt;
&lt;li&gt;IPv6マルチキャストグループのジョインに、明示的に指定されなければアドレスのスコープIDを使用するよう変更した&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスのテストがMac OS XとBSD環境で失敗していたので修正&lt;/li&gt;
&lt;li&gt;GCCで無名enumを使用すると発生する問題のワークアラウンドを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10042&#34; target=&#34;_blank&#34;&gt;#10042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsの&lt;code&gt;HANDLE&lt;/code&gt;バックエンドを、&lt;code&gt;ERROR_MORE_DATA&lt;/code&gt;を無視するよう巻き戻した。代わりに、他のもの(&lt;code&gt;error_code&lt;/code&gt;を使うか、&lt;code&gt;system_error&lt;/code&gt;例外の送出)を使ってエラーを伝搬するようにし、転送されたバイト数が返るようにした。部分的なメッセージを処理する必要がある場合は、&lt;code&gt;error_code&lt;/code&gt;のオーバーロードを使用すること(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10034&#34; target=&#34;_blank&#34;&gt;#10034&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_set&lt;/code&gt;の実装に含まれるシグナル番号チェックでの、&lt;a href=&#34;http://ja.wikipedia.org/wiki/Off-by-one%E3%82%A8%E3%83%A9%E3%83%BC&#34; target=&#34;_blank&#34;&gt;off-by-oneエラー&lt;/a&gt;を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9324&#34; target=&#34;_blank&#34;&gt;#9324&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Crayコンパイラで動くように、SSE2を組み込み関数ではなくインラインアセンブラを使用するようにした&lt;/li&gt;
&lt;li&gt;最新のVisual C++とWindows SDKで非推奨マークが付いているWinsockの機能を使用停止(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/cc9730e493c015e8ae089da1b8438fb6477710f7&#34; target=&#34;_blank&#34;&gt;cc9730e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのGCCで単体テストを通すためのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;多くのドキュメントの細かい部分を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9605&#34; target=&#34;_blank&#34;&gt;#9605&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9771&#34; target=&#34;_blank&#34;&gt;#9771&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#assign&#34; name=&#34;assign&#34;&gt;Assign&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11での曖昧さを解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3073&#34; target=&#34;_blank&#34;&gt;#3073&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリを再設計した。内部的なリファクタリングのほか、さまざまなバグの修正、機能テストマクロの不適切な値やオーバーフローハンドリングの割り込みといったことも含む。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory_order&lt;/code&gt;列挙型の値を変更した。列挙型の値はインタフェースの一部ではないが、ユーザーのインタフェースとして使用する場合、ABIが壊れる可能性がある。&lt;/li&gt;
&lt;li&gt;MSVCのWindows x64向けに、128ビットのアトミック操作を実装した。ターゲットCPUにcmpxchg16b命令が存在していることを想定している。初期のいくつかのAMD CPUはこの命令をサポートしていない。そのようなターゲットのためには、&lt;code&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/code&gt;マクロを定義する。&lt;/li&gt;
&lt;li&gt;実験的に、MSVCのWindows ARMターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;実験的に、GCCのDEC Alphaターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;GCCのARMv6とそれ以降のサポートを改善した。全てのアトミック操作を、CASベースのループの代わりに、アセンブラブロックで実装した。ARMv7で64ビット操作をサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_FLAG_INIT&lt;/code&gt;マクロと&lt;code&gt;atomic_flag&lt;/code&gt;の初期化の、オプショナルなサポートを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8158&#34; target=&#34;_blank&#34;&gt;#8158&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;デフォルトコンストラクタによる初期化に依存する。以下の記事を参照：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25490513807/constant-initialization&#34; target=&#34;_blank&#34;&gt;Constant Initialization - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPARCv9ターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9446&#34; target=&#34;_blank&#34;&gt;#9446&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;PowerPCターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9447&#34; target=&#34;_blank&#34;&gt;#9447&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;x86とx86-64に対するClangでのいくつかの互換性問題を修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9610&#34; target=&#34;_blank&#34;&gt;#9610&lt;/a&gt;、&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9842&#34; target=&#34;_blank&#34;&gt;#9842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのIA64プラットフォームに特化したコードを削除した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11のアロケータモデルをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9970&#34; target=&#34;_blank&#34;&gt;#9970&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5012&#34; target=&#34;_blank&#34;&gt;#5012&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLMallocベースの拡張アロケータを追加&lt;ul&gt;
&lt;li&gt;参照：「&lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/04/21/141406&#34; target=&#34;_blank&#34;&gt;Boost.Containerにrealloc相当の機能が入る予定&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::allocator&amp;lt;T, 2&amp;gt;&lt;/code&gt;を使用することで(2はバージョン)、&lt;code&gt;vector&lt;/code&gt;の内部実装に&lt;code&gt;realloc()&lt;/code&gt;相当の機能が使われるようになる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::node_allocator&lt;/code&gt;を追加。これは、シンプルな分離ストレージのアロケータ。明示的に要求しない限り、システムにメモリを返さない、Boost.Poolと同じようなアプローチをとっている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::adaptive_pool&lt;/code&gt;を追加。これは、&lt;code&gt;node_allocator&lt;/code&gt;が低コストでシステムにメモリを返せるようにするためのもの。&lt;/li&gt;
&lt;li&gt;これらの機能を使うには、Boost.Containerのビルドが必要。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーベースの順序付き連想コンテナのカスタマイズ性を改善した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(multi)map&lt;/code&gt;および&lt;code&gt;(multi)set&lt;/code&gt;の実装に、AVL tree、Scapegoat tree、Splay treeを使用できるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS2005でcontainer/memory_util.hppをインクルードしたあとに&lt;code&gt;swap()&lt;/code&gt;を使うとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9338&#34; target=&#34;_blank&#34;&gt;#9338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize()&lt;/code&gt;のパフォーマンス問題を解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9637&#34; target=&#34;_blank&#34;&gt;#9637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;の構築を最適化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9648&#34; target=&#34;_blank&#34;&gt;#9648&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_vector&lt;/code&gt;のイテレータから&lt;code&gt;iterator_range&lt;/code&gt;を作れない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9801&#34; target=&#34;_blank&#34;&gt;#9801&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize(size, default_init)&lt;/code&gt;のドキュメントでvalue initializedされると書かれていたので、default initializedに修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9915&#34; target=&#34;_blank&#34;&gt;#9915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほとんどのコンテナの代入演算子で、アロケータの伝搬が間違っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9916&#34; target=&#34;_blank&#34;&gt;#9916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;の中で、重複メモリ範囲で&lt;code&gt;memcpy()&lt;/code&gt;を行っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9955&#34; target=&#34;_blank&#34;&gt;#9955&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt;：&lt;code&gt;fcontext_t&lt;/code&gt;型を、構造体から、&lt;code&gt;void*&lt;/code&gt;の別名に変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fcontext_t&lt;/code&gt;型に関連する&lt;code&gt;make_fcontext()&lt;/code&gt;関数のシグニチャの一部が、&lt;code&gt;fcontext_t*&lt;/code&gt;から&lt;code&gt;fcontext_t&lt;/code&gt;に変わる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux環境において、コンテキストに使用するスタックがexecutable stackではないことを示すマーカーを付けた。これにより、executable stackを作る権限が必要なくなる。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8826&#34; target=&#34;_blank&#34;&gt;#8826&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;iOSとWindows 8環境において、Boost.Contextの例外を捕捉できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9437&#34; target=&#34;_blank&#34;&gt;#9437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;x32 ABIをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9445&#34; target=&#34;_blank&#34;&gt;#9445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64leをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9522&#34; target=&#34;_blank&#34;&gt;#9522&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64 le/beの、エンディアン周りのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9743&#34; target=&#34;_blank&#34;&gt;#9743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OS X + clangに対するx86のバグ修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9774&#34; target=&#34;_blank&#34;&gt;#9774&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symmetric_coroutine&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;Boost.Coroutineがサポートするアーキテクチャのリストを、ドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9551&#34; target=&#34;_blank&#34;&gt;#9551&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数スレッドで&lt;code&gt;pull_coroutine&lt;/code&gt;を使用する際に発生する、&lt;code&gt;protected_stack_allocator&lt;/code&gt;での競合状態を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9355&#34; target=&#34;_blank&#34;&gt;#9355&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;POSIX実装のstack_allocator内で&lt;code&gt;mmap&lt;/code&gt;のエラーチェックをしていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9734&#34; target=&#34;_blank&#34;&gt;#9734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap&lt;/code&gt;後に&lt;code&gt;memset&lt;/code&gt;で0を埋める必要はなかったので削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9735&#34; target=&#34;_blank&#34;&gt;#9735&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;coroutineのイテレータが&lt;code&gt;const&lt;/code&gt;修飾版の&lt;code&gt;operator==&lt;/code&gt;を持っていなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9760&#34; target=&#34;_blank&#34;&gt;#9760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap()&lt;/code&gt;の戻り値を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10070&#34; target=&#34;_blank&#34;&gt;#10070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected_stack_allocator&lt;/code&gt;でファイル記述子は必要なかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10157&#34; target=&#34;_blank&#34;&gt;#10157&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HP ux上で、&lt;code&gt;pthread_getcpuclockid()&lt;/code&gt;が定義されていないために、コンパイルエラーになる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6918&#34; target=&#34;_blank&#34;&gt;#6918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで起動時に&lt;code&gt;steady_clock::now()&lt;/code&gt;を呼ぶと、アサーション失敗になる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8006&#34; target=&#34;_blank&#34;&gt;#8006&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrono::process_cpu_clock&lt;/code&gt;のtime pointでの1000の係数が、Linux上で間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9337&#34; target=&#34;_blank&#34;&gt;#9337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clock::time_point&lt;/code&gt;の出力フォーマットが{real;user;system}の3つになっているはずが、V2ではrealのみが出力されていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9342&#34; target=&#34;_blank&#34;&gt;#9342&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono::floor()&lt;/code&gt;／&lt;code&gt;round()&lt;/code&gt;に負のdurationを渡した結果が間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9419&#34; target=&#34;_blank&#34;&gt;#9419&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_clock&lt;/code&gt;がMac OS X向けに定義されていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9698&#34; target=&#34;_blank&#34;&gt;#9698&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::this_thread::sleep_for()&lt;/code&gt;が、Win32上でときどき、すぐに返ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9720&#34; target=&#34;_blank&#34;&gt;#9720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windowsを使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9859&#34; target=&#34;_blank&#34;&gt;#9859&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Solaris上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーをが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9918&#34; target=&#34;_blank&#34;&gt;#9918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;の静的メンバ関数が&lt;code&gt;constexpr&lt;/code&gt;実装になっていなかった場合にコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9811&#34; target=&#34;_blank&#34;&gt;#9811&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clocks&lt;/code&gt;が32ビット環境でオーバーフローする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10069&#34; target=&#34;_blank&#34;&gt;#10069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;QNX上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10151&#34; target=&#34;_blank&#34;&gt;#10151&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34; name=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタのサポートを追加&lt;/li&gt;
&lt;li&gt;MSVC2013の警告を修正&lt;/li&gt;
&lt;li&gt;C++11の最小アロケータ要件をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;仕様に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数テンプレートを使用した、&lt;code&gt;flyweight&amp;lt;T&amp;gt;&lt;/code&gt;で&lt;code&gt;T::T()&lt;/code&gt;への完全転送をサポートした。(以前まではエミュレーションをしていた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;を受け取るコンストラクタと代入演算子をサポート。元となる型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数として使用する。&lt;/li&gt;
&lt;li&gt;DLLモジュール間の静的初期化で発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9553&#34; target=&#34;_blank&#34;&gt;#9553&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス関係の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FusionをGPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;buffer()&lt;/code&gt;を追加。これは、ジオメトリの膨張／収縮(inflating/deflating)を行う。(&lt;code&gt;buffer()&lt;/code&gt;アルゴリズム自体は以前からあったが、Boxを大きくするのみだった。)&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;remove_spikes()&lt;/code&gt;を追加。これは、Ring、Polygon、もしくはMulti Polygonからスパイクを削除するアルゴリズム。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;point_on_surface()&lt;/code&gt;を追加。このアルゴリズムは、Polygonのサーフェイス(インテリア)上のPointを生成する。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_simple()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従ってシンプルなら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_valid()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従って適格なら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;crosses()&lt;/code&gt;を追加。このアルゴリズムは、OGC標準に従って空間的関係をチェックする。&lt;/li&gt;
&lt;li&gt;集合演算アルゴリズム(&lt;code&gt;difference()&lt;/code&gt;, &lt;code&gt;intersection()&lt;/code&gt;, &lt;code&gt;sym_difference()&lt;/code&gt;, &lt;code&gt;union_()&lt;/code&gt;)に対して、入力としてPointと見なせる型の組、および線形ジオメトリをサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance()&lt;/code&gt;アルゴリズムと&lt;code&gt;comparable_distance()&lt;/code&gt;アルゴリズムを、全てのジオメトリの組み合わせに対応した。&lt;/li&gt;
&lt;li&gt;空間関係のアルゴリズム(&lt;code&gt;covered_by()&lt;/code&gt;, &lt;code&gt;touches()&lt;/code&gt;, &lt;code&gt;within()&lt;/code&gt;, etc...)に、線形ジオメトリと面積ジオメトリのサポートを追加。&lt;/li&gt;
&lt;li&gt;様々なアルゴリズムの入力ジオメトリとして、&lt;code&gt;boost::variant&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;に、インデックス付きセグメントのサポートを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;nearest()&lt;/code&gt;に、述語のサポートを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重なっているポリゴンに対する多くのアルゴリズムの結果がおかしくなる問題を、&lt;code&gt;disjoint()&lt;/code&gt;の実装に&lt;code&gt;point_on_surface()&lt;/code&gt;を使用することで解決した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8310&#34; target=&#34;_blank&#34;&gt;#8310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自己交差がないポリゴンから自己交差が作られてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9081&#34; target=&#34;_blank&#34;&gt;#9081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;make_qbk.pyの実行がエラーになってドキュメント生成に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9245&#34; target=&#34;_blank&#34;&gt;#9245&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(sym_)difference()&lt;/code&gt;が成功しない問題を、堅牢な型への再スケーリングによって修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9563&#34; target=&#34;_blank&#34;&gt;#9563&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほぼ水平のSegmentに対してwinding戦略を付けた&lt;code&gt;within()&lt;/code&gt;の実行結果がおかしい問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9628&#34; target=&#34;_blank&#34;&gt;#9628&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スパイクのみのポリゴンの、スパイクを削除するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9871&#34; target=&#34;_blank&#34;&gt;#9871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WKTのドキュメントがなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9947&#34; target=&#34;_blank&#34;&gt;#9947&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LinestringとBoxに対するdifferenceがintersectionを返す問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10019&#34; target=&#34;_blank&#34;&gt;#10019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;boost/geometry/arithmetic.hppのコンセプトチェックがおかしかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10077&#34; target=&#34;_blank&#34;&gt;#10077&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intersects(polygon)&lt;/code&gt;が自己交差のPointを返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;が、OGC標準の非シンプルなジオメトリに対して不正な結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touches()&lt;/code&gt;が、CCW面積ジオメトリに対して正しく動作していなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のnearestクエリが、非デカルト(cartesian)座標系において間違った結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;にInterprocessのアロケータを使うと、いくつかのケースでクラッシュしていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 6.0向けのワークアラウンドをいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_combine()&lt;/code&gt;の継続的な改善。これは、以前からドキュメント化されていたアルゴリズムの変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Linux上で&lt;code&gt;message_queue&lt;/code&gt;がデッドロックする問題を修正(#Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのコンピュータではCommon AppDataのレジストリが空であるため、Interprocessが動かない問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9226&#34; target=&#34;_blank&#34;&gt;#9226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WaitForSingleObject(mutex)&lt;/code&gt;を呼び出しているところで、&lt;code&gt;WAIT_ABANDONED&lt;/code&gt;をハンドリングするよう修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9284&#34; target=&#34;_blank&#34;&gt;#9284&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CreateMutex()&lt;/code&gt;を呼び出しているところで、失敗値を&lt;code&gt;winapi::invalid_handle_value(-1)&lt;/code&gt;と比較していたが、実際の失敗値は&lt;code&gt;NULL&lt;/code&gt;なので、比較する値を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9285&#34; target=&#34;_blank&#34;&gt;#9285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timed_wait&lt;/code&gt;が寿命切れをチェックしていなかったので修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9288&#34; target=&#34;_blank&#34;&gt;#9288&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AndroidはXSI共有メモリオブジェクトをサポートしていないので、ワークアラウンドを修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9408&#34; target=&#34;_blank&#34;&gt;#9408&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_external_buffer&lt;/code&gt;オブジェクトの構築でクラッシュする問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9729&#34; target=&#34;_blank&#34;&gt;#9729&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsでイベントログが破損しているとbooststampの生成に失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9767&#34; target=&#34;_blank&#34;&gt;#9767&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Android NDK GCC 4.8でコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9835&#34; target=&#34;_blank&#34;&gt;#9835&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで共有フォルダが使用可能でない場合に、&lt;code&gt;get_tmp_base_dir()&lt;/code&gt;が失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9911&#34; target=&#34;_blank&#34;&gt;#9911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init_atomic_func()&lt;/code&gt;と&lt;code&gt;fini_atomic_func()&lt;/code&gt;での、変数の未初期化警告を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9946&#34; target=&#34;_blank&#34;&gt;#9946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_manager::find(unique_instance_t*)&lt;/code&gt;がコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10011&#34; target=&#34;_blank&#34;&gt;#10011&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cray C++ Compilerのサポートを追加(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/2&#34; target=&#34;_blank&#34;&gt;#2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW環境のために、&lt;code&gt;interprocess_exception&lt;/code&gt;例外を送出する部分を修正。エラー内容の取得とthrowを同一行に書くと、&lt;code&gt;GetLastError()&lt;/code&gt;がリセットされてしまうため、2行に分離した(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/3&#34; target=&#34;_blank&#34;&gt;#3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&amp;lt;/font&amp;gt; &lt;code&gt;message_queue&lt;/code&gt;に、&lt;code&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/code&gt;オプションを追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock()&lt;/code&gt;の&lt;code&gt;(timed_)lock&lt;/code&gt;コードをリファクタリングし、統一化した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable&lt;/code&gt;のデストラクタの挙動として、POSIXのセマンティクスを許可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/code&gt;オプションを追加。これは、共有メモリオブジェクトの実装としてメモリマップドファイルが使われた場合に、使用する共有ディレクトリの場所を指定するためのもの。&lt;/li&gt;
&lt;li&gt;他のライブラリと同じように、&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;をサポートした。これが定義されている場合、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;や他のWindows SDKの構造体を使用し、そうでなければ、重いヘッダーの負担を軽減する構造体を定義して使用する。(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory&lt;/code&gt;に&lt;code&gt;get_size()&lt;/code&gt;メンバ関数を追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenによって生成されるリファレンスを改善し、先行宣言のヘッダーを修正、更新した。&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&amp;lt;/font&amp;gt; 1.55.0で導入したABIレギュレッションを修正した。主にMSVCコンパイラ周りで。&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; 以前から非推奨としていた機能を削除した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;xxx_dont_splay()&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;splay_set_base_hook&lt;/code&gt;と&lt;code&gt;splay_set_member_hook&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splaytree_algorithms&lt;/code&gt;の関数の追加パラメータ「&lt;code&gt;bool splay = true&lt;/code&gt;」を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Visual Studio 2010/2012で&lt;code&gt;has_member_function_callable_with_construct_impl&lt;/code&gt;がコンパイルエラーになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9332&#34; target=&#34;_blank&#34;&gt;#9332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list_impl::iterator_to()&lt;/code&gt;メンバ関数内で使用する&lt;code&gt;value_traits&lt;/code&gt;を、ステートフルにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9650&#34; target=&#34;_blank&#34;&gt;#9650&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のSun CC CompilerでIntrusiveのコンパイルができなくなっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9746&#34; target=&#34;_blank&#34;&gt;#9736&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;safe_link(or auto_unlink)を付けたintrusive listが、解放後のメモリを操作していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9940&#34; target=&#34;_blank&#34;&gt;#9940&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9949&#34; target=&#34;_blank&#34;&gt;#9949&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_cast&lt;/code&gt;の使用をやめた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9948&#34; target=&#34;_blank&#34;&gt;#9948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトフックから派生しない場合の、侵入フックのテストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9961&#34; target=&#34;_blank&#34;&gt;#9961&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーの再バランスコードの冗長な代入を回避して、最適化した&lt;/li&gt;
&lt;li&gt;64ビット環境の&lt;code&gt;suggested_upper_bucket_count()&lt;/code&gt;と&lt;code&gt;suggested_lower_bucket_count()&lt;/code&gt;用に、64ビットの素数値を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いSun CC Compilerのworkaroundを削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;try_lexical_convert()&lt;/code&gt;関数を追加。この関数は変換失敗時に&lt;code&gt;false&lt;/code&gt;を返し、出力パラメータの型にDefault Constructibleを要求しない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6700&#34; target=&#34;_blank&#34;&gt;#6700&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;先頭が0の文字列を&lt;code&gt;bool&lt;/code&gt;に変換する処理を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9659&#34; target=&#34;_blank&#34;&gt;#9659&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Boost 1.47.0まで&lt;code&gt;boost::lexical_cast&amp;lt;bool&amp;gt;(&#34;00&#34;)&lt;/code&gt;は成功し&lt;code&gt;false&lt;/code&gt;を返していたが、それ以降で&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外を送出していた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より小さなバイナリを生成し、コンパイラの作業をよりシンプルにする変更を行った(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9046&#34; target=&#34;_blank&#34;&gt;#9046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;このライブラリを、Boost Conversion Libraryから分離した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8991&#34; target=&#34;_blank&#34;&gt;#8991&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;全体的な変更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsターゲットにおいて、このライブラリはデフォルトでWindows XP向けにコンパイルするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;record&lt;/code&gt;と&lt;code&gt;record_view&lt;/code&gt;の添字演算子に&lt;code&gt;attribute_name&lt;/code&gt;引数を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;で、一時オブジェクトを出力できるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9389&#34; target=&#34;_blank&#34;&gt;#9389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フォーマット文字列に、名前付きスコープの関数名とソースファイル名を入れられるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9263&#34; target=&#34;_blank&#34;&gt;#9263&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;named scope formatterに、不完全および空のmarkerのサポートを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9123&#34; target=&#34;_blank&#34;&gt;#9123&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不完全な名前付きスコープリストのデフォルトの出力フォーマットを変更した：末尾のスコープ区切り文字を省略するようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::regex&lt;/code&gt;のサポートを追加。&lt;/li&gt;
&lt;li&gt;Boost.Logのデフォルトで、Boost.Regexを内部的な正規表現に使用するようにした。この正規表現バックエンドは、マクロで変更できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;バグ修正：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AVX2を有効にしたCPU(たとえばIntelのHaswell)での&lt;code&gt;dump&lt;/code&gt;マニピュレータを修正&lt;/li&gt;
&lt;li&gt;ロガークラスの&lt;code&gt;get_attribute()&lt;/code&gt;メンバ関数のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;同期／非同期sinkフロントエンドの&lt;code&gt;locked_backend()&lt;/code&gt;関数の実装で発生していたデータ競合を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block_on_overflow&lt;/code&gt;戦略を使用した非同期sinkの&lt;code&gt;enqueue()&lt;/code&gt;メンバ関数での、ロギングスレッドの無限ブロックを修正より詳細な変更は、ChangeLogを参照：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; メンテナンス用の機能を、libs/math/include_privateディレクトリ以下に移動した。影響を受けるヘッダは以下：&lt;ul&gt;
&lt;li&gt;boost/math/tools/test_data.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/remez.hpp&lt;/li&gt;
&lt;li&gt;boost/math/constants/generate.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/solve.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/test.hpp&lt;/li&gt;
&lt;li&gt;もしこれらの機能を引き続き使いたい場合は、libs/math/include_privateディレクトリへのパスを通せばよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; 分布関数と特殊関数が、overflow errorを吐き出す変わりに、正の無限大の値を返すよう修正し、ドキュメントに挙動を明記した。これまでoverflow errorが発生したときのデフォルトの動作は&lt;code&gt;std::overflow_error&lt;/code&gt;例外の送出だったが、例外を送出するかしないかは、関数ごとに違っていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10111&#34; target=&#34;_blank&#34;&gt;#10111&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;影響がある特殊関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inv()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影響がある分布関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pareto_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beta_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;round()&lt;/code&gt;と&lt;code&gt;trunc()&lt;/code&gt;の引数として、整数を受け取れるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10066&#34; target=&#34;_blank&#34;&gt;#10066&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;0階導関数(zero derivative)をハンドリングするよう、Halleyのイテレーションを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10046&#34; target=&#34;_blank&#34;&gt;#10046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;geometric distribution (幾何分布)の内部処理で、渡されたポリシーを使っていない箇所があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9833&#34; target=&#34;_blank&#34;&gt;#9833&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;negative binomial distribution (負の二項分布)のコーナーケースを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9834&#34; target=&#34;_blank&#34;&gt;#9834&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OSでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;スターリングの近似を使うために、&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;の精度を任意に変更できる&lt;code&gt;bernoulli_numbers&lt;/code&gt;を追加(Nikhar Agrawal氏作)&lt;/li&gt;
&lt;li&gt;ベッセル関数の最初の導関数を追加(Anton Bikineev氏作)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_j_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_i_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_k_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_bessel_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Studentのt分布のサンプルコードにあったバグを修正。sample meanの透過性テストも一緒に修正。&lt;/li&gt;
&lt;li&gt;より良いルート探索コードに使えるmax_iterパラメータをドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9225&#34; target=&#34;_blank&#34;&gt;#9225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;型の定数を有効／無効にするオプションを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9240&#34; target=&#34;_blank&#34;&gt;#9240&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベッセルのI0とI1における、負数のハンドリングを整理した(それと、もう使っていないコードを削除した)。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9512&#34; target=&#34;_blank&#34;&gt;#9512&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;に非常に小さい値が渡された場合でもハンドリングできるよう修正した。これらはspuriousオーバーフローを生成しないようになった。(Rocco Romeoに感謝)&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9672&#34; target=&#34;_blank&#34;&gt;#9672 Laplace distribution(ラプラス分布)のPDFとCDFがdomain error例外を送出する&lt;/a&gt;」ランダムな変量(variate)を無限にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rising_factorial&lt;/code&gt;、&lt;code&gt;falling_factorial&lt;/code&gt;、&lt;code&gt;tgamma_delta_ratio&lt;/code&gt;にあったいくつかのコーナーケースを修正した。Rocco Romeoに感謝。&lt;/li&gt;
&lt;li&gt;使っていなかった定数&lt;code&gt;pow23_four_minus_pi&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;マクロを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;MSVC向けの設定マクロがundefされていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9482&#34; target=&#34;_blank&#34;&gt;#9482&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;BOOST_RV_REF_START&lt;/code&gt;というマクロが記載されていたが、&lt;code&gt;BOOST_RV_REF_BEG&lt;/code&gt;の間違いだったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9045&#34; target=&#34;_blank&#34;&gt;#9045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アラインメント指定された型に対して、Boost.Moveが自前実装している&lt;code&gt;is_convertible&lt;/code&gt;がコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8420&#34; target=&#34;_blank&#34;&gt;#8420&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#mpl&#34; name=&#34;mpl&#34;&gt;MPL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::mpl::for_each&lt;/code&gt;を、GPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator()&lt;/code&gt;がCollectionコンセプトをチェックしているが、実際にはRandomAccessCollectionを要求していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5664&#34; target=&#34;_blank&#34;&gt;#5664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual C++ 2010デバッグモードでのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4874&#34; target=&#34;_blank&#34;&gt;#4874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fortran_storage_ordering&lt;/code&gt;のサンプルコードが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コンセプトが&lt;code&gt;detail&lt;/code&gt;名前空間に置かれていたので、&lt;code&gt;detail&lt;/code&gt;の外に出した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++標準文書へのリンクが壊れていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9212&#34; target=&#34;_blank&#34;&gt;#9212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの-Wundefオプションで発生する&lt;code&gt;BOOST_MULTI_ARRAY_NO_GENERATORS&lt;/code&gt;関係の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8368&#34; target=&#34;_blank&#34;&gt;#8368&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;erase(iterator)のオーバーロードが、次を指すイテレータを返す必要があるためにパフォーマンスが遅かった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4264&#34; target=&#34;_blank&#34;&gt;#4264&lt;/a&gt;を参照)。&lt;a href=&#34;http://lwg.github.io/issues/lwg-closed.html#579&#34; target=&#34;_blank&#34;&gt;LWG issue #579&lt;/a&gt;の解決策に基いて、ひとつ以上の要素メモリを使用することを犠牲にして、eraseのインタフェースを維持したままこの問題を解決した。実際には、非順序連想コンテナに対する計算量の要件は、hashed indicesで以下のように改善した：&lt;ul&gt;
&lt;li&gt;与えられた要素の削除を、無条件に定数時間にした&lt;/li&gt;
&lt;li&gt;最悪ケースの計算量はO(n)ではなく、O(n&lt;sub&gt;dist&lt;/sub&gt;)となる。n&lt;sub&gt;dist&lt;/sub&gt;は、そのインデックスにおける要素数とは同等でない数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hashed indiciesの&lt;code&gt;iterator&lt;/code&gt;と&lt;code&gt;local iterator&lt;/code&gt;の内部表現が、新しいデータ構造に依存して変更される。これはシリアライズに影響を与えるため、対応するシリアライズのバージョンが0から1に上がる。hashed indiciesの&lt;code&gt;(local) iterator&lt;/code&gt;を含む古いアーカイブは、1.56.0のBoost.Multi-Indexに読み込める。&lt;/li&gt;
&lt;li&gt;hashed indiciesに&lt;code&gt;reserve&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;hashed indiciesの等値／非等値のチェックを、C++標準規格の[unord.req]仕様に合わせた。&lt;/li&gt;
&lt;li&gt;Boost.Multi-Indexの&lt;code&gt;public&lt;/code&gt;インタフェースを、&lt;code&gt;noexcept&lt;/code&gt;に対応した。(&lt;code&gt;noexcept&lt;/code&gt;が使用可能なコンパイラで)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;への挿入失敗のパフォーマンスを改善した。&lt;/li&gt;
&lt;li&gt;MSVC 7.0以前のサポートを目的とした内部コードを削除した。この修正によって、コンパイル時間がわずかに速くなる可能性がある。&lt;/li&gt;
&lt;li&gt;右辺値を挿入できなかったバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9665&#34; target=&#34;_blank&#34;&gt;#9665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/code&gt;に対応し、名前空間修飾なしのプレースホルダーを直接使用しないように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9798&#34; target=&#34;_blank&#34;&gt;#9798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス上の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-precision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数型から&lt;code&gt;rational&lt;/code&gt;への変換を&lt;code&gt;implicit&lt;/code&gt;にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10082&#34; target=&#34;_blank&#34;&gt;#10082&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked_cpp_rational&lt;/code&gt; typedefの定義を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の、文字列からの代入でのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2進浮動小数点のバックエンドとして、&lt;code&gt;cpp_bin_float&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の文字列からの代入で発生するバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;符号がクリアされない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVCのコンパイラintrinsicをインクルードするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9336&#34; target=&#34;_blank&#34;&gt;#9336&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9432&#34; target=&#34;_blank&#34;&gt;#9432&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gmp_rational&lt;/code&gt;をムーブコピーできるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9497&#34; target=&#34;_blank&#34;&gt;#9497&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numeric_limits&lt;/code&gt;の値のリストをドキュメントに追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#odeint&#34; name=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;適切な代数と操作を自動検出するディスパッチャーを追加&lt;/li&gt;
&lt;li&gt;Eigen、Boost.Multiarray、Boost.MPI、Boost.Compute、Blaze、NT2のサポートを追加&lt;/li&gt;
&lt;li&gt;代数インタフェースを、algebra.norm_inf関数を使用するよう変更した&lt;/li&gt;
&lt;li&gt;ODEの解をイテレートするためのイテレータを追加。これは、積分(integrate)関数の代わりに使用できる。&lt;/li&gt;
&lt;li&gt;Velocity-Verletメソッドを追加&lt;/li&gt;
&lt;li&gt;小さなバグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照のサポートを追加。&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;が、ムーブ可能でコピー不可な&lt;code&gt;T&lt;/code&gt;型を扱えるようになった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;を改善した。(ムーブ操作を使うようにした)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace()&lt;/code&gt;メンバ関数を追加。これは &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1841&#34; target=&#34;_blank&#34;&gt;#1841&lt;/a&gt; でリクエストされたもの。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;をムーブ可能にした。&lt;code&gt;std::move_if_noexcept&lt;/code&gt;と組み合わせられる、条件付きの&lt;code&gt;noexcept&lt;/code&gt;仕様にした。&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; プラットフォームがサポートしていれば、safe boolイディオムの代わりに&lt;code&gt;explicit operator bool()&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4227&#34; target=&#34;_blank&#34;&gt;#4227&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;オブジェクトを誤って不適切にシリアライズしないように、&lt;code&gt;operator&amp;lt;&amp;lt;(ostream&amp;amp;, optional const&amp;amp;)&lt;/code&gt;の先行宣言を定義した。&lt;/li&gt;
&lt;li&gt;非推奨なメンバ関数である&lt;code&gt;reset()&lt;/code&gt;の使用を、サンプルコードから削除した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9005&#34; target=&#34;_blank&#34;&gt;#9005&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;との比較では、&lt;code&gt;T&lt;/code&gt;にEqualityComparableを要求しないようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&amp;lt;T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;を明確に禁止した。&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;への一時オブジェクトの束縛を、明確に禁止した。&lt;/li&gt;
&lt;li&gt;包含している値にアクセスする新たな手段として、&lt;code&gt;value()&lt;/code&gt;、&lt;code&gt;value_or()&lt;/code&gt;、&lt;code&gt;value_or_eval()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントを更新し、再編した。チュートリアルとクイックガイドの項を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34; name=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数マクロを使用する場合のタプル機能を、配列機能と一致するものとして追加した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全てのグループ間でのヘルプメッセージの縦位置を合わせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6114&#34; target=&#34;_blank&#34;&gt;#6114&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ハイフン区切りされたオプション名が、エラーメッセージ内で切り捨てられる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8009&#34; target=&#34;_blank&#34;&gt;#8009&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_regex&amp;lt;&amp;gt;::mark_count()&lt;/code&gt;の挙動を、ドキュメントに一致するよう修正した。&lt;code&gt;basic_regex&amp;lt;&amp;gt;::subexpression(n)&lt;/code&gt;も同様に、一致するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8903&#34; target=&#34;_blank&#34;&gt;#8903&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9283&#34; target=&#34;_blank&#34;&gt;#9283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ロケールによって生成された照合文字列へのnul埋め込みが失敗した場合の、照合コードのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9451&#34; target=&#34;_blank&#34;&gt;#9451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threadライブラリの非推奨なミューテックスを使っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9461&#34; target=&#34;_blank&#34;&gt;#9461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不正なUTF-8シーケンスの、より良いチェッカーを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9473&#34; target=&#34;_blank&#34;&gt;#9473&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34; name=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;のオーバーロードを更新し、C++言語規格に&lt;a href=&#34;http://http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&#34; target=&#34;_blank&#34;&gt;N3939&lt;/a&gt;で提案されている配列型(&lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;T[N]&lt;/code&gt;)に対応した。&lt;/li&gt;
&lt;li&gt;C++標準の欠陥レポート&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&#34; target=&#34;_blank&#34;&gt;LWG #2070&lt;/a&gt;に対応し、&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;におけるスカラ型と配列型の実装を修正した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7446&#34; target=&#34;_blank&#34;&gt;#7446&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_all()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7447&#34; target=&#34;_blank&#34;&gt;#7447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async()&lt;/code&gt;関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7448&#34; target=&#34;_blank&#34;&gt;#7448&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;並行キューとして、&lt;code&gt;sync_queue&lt;/code&gt;と&lt;code&gt;sync_bounded_queue&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8274&#34; target=&#34;_blank&#34;&gt;#8274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool&lt;/code&gt; executorを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8513&#34; target=&#34;_blank&#34;&gt;#8513&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latch&lt;/code&gt;クラスを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8518&#34; target=&#34;_blank&#34;&gt;#8518&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;／&lt;code&gt;shared_future&lt;/code&gt;の&lt;code&gt;then()&lt;/code&gt;メンバ関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8516&#34; target=&#34;_blank&#34;&gt;#8516&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_lock_guard()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9058&#34; target=&#34;_blank&#34;&gt;#9058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;動的なexecutorと、executorアダプタを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9571&#34; target=&#34;_blank&#34;&gt;#9571&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsの64ビット環境上で、&lt;code&gt;GetTickCount()&lt;/code&gt;関数の代わりに、&lt;code&gt;GetTickCount64()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_thread&lt;/code&gt;がmsvc-12.0でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9333&#34; target=&#34;_blank&#34;&gt;#9333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;intel-linux-14.0.1上で&lt;code&gt;scoped_thread&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9341&#34; target=&#34;_blank&#34;&gt;#9341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、&lt;code&gt;async(Executor, ...)&lt;/code&gt;のコンパイルに失敗する問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9366&#34; target=&#34;_blank&#34;&gt;#9366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、executorのテストを通した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9402&#34; target=&#34;_blank&#34;&gt;#9402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_future&lt;/code&gt;のテストを通した(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9404&#34; target=&#34;_blank&#34;&gt;#9404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchronizationドキュメントの細かい修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9471&#34; target=&#34;_blank&#34;&gt;#9471&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future_waiter::add()&lt;/code&gt;がクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9535&#34; target=&#34;_blank&#34;&gt;#9535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock_for()&lt;/code&gt;に0ミリ秒を指定した場合、Windows上でプログラムが終了しない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9618&#34; target=&#34;_blank&#34;&gt;#9618&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスのデストラクタの説明が不明瞭だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9625&#34; target=&#34;_blank&#34;&gt;#9625&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスに、アンドキュメントな&lt;code&gt;public&lt;/code&gt;メンバ関数&lt;code&gt;start_thread()&lt;/code&gt;があったので、&lt;code&gt;private&lt;/code&gt;に移動(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9632&#34; target=&#34;_blank&#34;&gt;#9632&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW上で、&lt;code&gt;boost::thread::physical_concurrency()&lt;/code&gt;関数がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9673&#34; target=&#34;_blank&#34;&gt;#9673&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;にBoost.DateTimeの無限時間を指定すると、意図と違ってすぐに目覚めてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9708&#34; target=&#34;_blank&#34;&gt;#9708&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future::then()&lt;/code&gt;に指定した関数が、2回呼ばれてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9711&#34; target=&#34;_blank&#34;&gt;#9711&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&lt;code&gt;&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windows&lt;/code&gt;を使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9867&#34; target=&#34;_blank&#34;&gt;#9867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;のドキュメントの誤字を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10008&#34; target=&#34;_blank&#34;&gt;#10008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;内でヌルポインタにアクセスする可能性があったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10058&#34; target=&#34;_blank&#34;&gt;#10058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の右辺値参照エミュレーションでの可変引数バージョンがコンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10125&#34; target=&#34;_blank&#34;&gt;#10125&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の&lt;code&gt;(Function, once_flag&amp;amp;)&lt;/code&gt;のオーバーロードを非推奨化(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10126&#34; target=&#34;_blank&#34;&gt;#10126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのgcc上の&lt;code&gt;pthread_delay_np()&lt;/code&gt;関数はパラメータが異なっているため、コンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10147&#34; target=&#34;_blank&#34;&gt;#10147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PowerPC上での&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が常に0を返していたので、修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10155&#34; target=&#34;_blank&#34;&gt;#10155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;と&lt;code&gt;when_all()&lt;/code&gt;に&lt;code&gt;inline&lt;/code&gt;を付け忘れていて、シンボルの重複定義でリンクエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10184&#34; target=&#34;_blank&#34;&gt;#10184&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#tti&#34; name=&#34;tti&#34;&gt;TTI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Solaris Studio C++ compilerのサポートを強化した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9441&#34; target=&#34;_blank&#34;&gt;#9441&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テンプレート引数としてクラスではない型が渡される、全ての状況をサポートした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9444&#34; target=&#34;_blank&#34;&gt;#9444&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小さなドキュメントと警告の修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9377&#34; target=&#34;_blank&#34;&gt;#9377&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9719&#34; target=&#34;_blank&#34;&gt;#9719&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;整数のバケットに、常に素数を使用するようにした。連続した整数を挿入するときのパフォーマンスを改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9282&#34; target=&#34;_blank&#34;&gt;#9282&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11標準仕様に基づき、アロケータのみを使用してメモリ確保するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのコンポーネントを、Boost.Coreモジュールに移動した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty_deleter&lt;/code&gt;を非推奨とした。代わりにBoost.Coreの&lt;code&gt;null_deleter&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base_from_member&lt;/code&gt;ユーティリティで、左辺値参照のメンバ型をサポートした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7577&#34; target=&#34;_blank&#34;&gt;#7577&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#uuid&#34; name=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的なC++11機能のサポートを追加。&lt;/li&gt;
&lt;li&gt;SSE最適化バージョンの関数を実装した。これには、&lt;code&gt;swap&lt;/code&gt;や比較演算子も含まれる。SSE版は、コンパイラによって自動的に有効になるが、明示的に有効／無効を設定できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8509&#34; target=&#34;_blank&#34;&gt;#8509&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_UUID_NO_SIMD&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE2&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE3&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE41&lt;/code&gt;のいずれかをdefineする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8495&#34; target=&#34;_blank&#34;&gt;#8495&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8697&#34; target=&#34;_blank&#34;&gt;#8697&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PLAT_*&lt;/code&gt;のプラットフォーム定義に、MinGWとWindowsのバリエーションを追加。&lt;/li&gt;
&lt;li&gt;Windows 8のモバイルデバイスをターゲットとするWindowsで、ARMアーキテクチャを検出できるようにした。&lt;/li&gt;
&lt;li&gt;64ビットARMの検出を改善。&lt;/li&gt;
&lt;li&gt;オペレーティング・システムとして、iOSの検出を追加。&lt;/li&gt;
&lt;li&gt;いくつかのプラットフォームでのエンディアン検出を改善。&lt;/li&gt;
&lt;li&gt;プラットフォームとコンパイラを検出するための、エミュレーション機能を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt; サポートしているコンパイラでは、可変引数テンプレートを使用するようにした。これによってバイナリが小さくなり、コンパイル速度も改善することを期待できるが、いくつかのケースで既存のメタプログラミングコードを破壊する可能性がある。とくに、&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_PARAMS.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/code&gt;&lt;/a&gt;が使われなくなったことについて注意が必要だ。可変引数テンプレートを使用する場合、&lt;code&gt;BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES&lt;/code&gt;が無効になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic_get()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9479&#34; target=&#34;_blank&#34;&gt;#9479&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブのみ可能な型をビジターから返せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;variant::swap()&lt;/code&gt;を最適化し、&lt;code&gt;move_swap()&lt;/code&gt;との曖昧さを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2839&#34; target=&#34;_blank&#34;&gt;#2839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブ代入演算子、デフォルトコンストラクタ、ムーブコンストラクタに条件付きの&lt;code&gt;noexcept&lt;/code&gt;を追加し、&lt;code&gt;variant&lt;/code&gt;を&lt;code&gt;move_if_noexcept()&lt;/code&gt;フレンドリーにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fvisibility=hidden&lt;/code&gt;フラグが設定されていても、例外をモジュール間で見えるようにした。&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3020&#34; target=&#34;_blank&#34;&gt;#3020&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;＜ライブラリ名＞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt; (必要であれば分類分けをする)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/0&#34; target=&#34;_blank&#34;&gt;#0&lt;/a&gt;) (←svn.boost.orgのissuesへのリンク)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/0&#34; target=&#34;_blank&#34;&gt;r0&lt;/a&gt;) (←svn.boost.orgのcommitへのリンク)&lt;b&gt;バグ修正&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&amp;lt;/font&amp;gt;： 赤文字+ボールドではっきりと分かるように&lt;/li&gt;
&lt;li&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&amp;lt;/font&amp;gt;： これも赤文字で&lt;/li&gt;
&lt;li&gt;[訳注] 本家ノートの記述が不十分であると考えるときは、適宜注釈を入れる&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://blog.example.com/path/to/references&#34; target=&#34;_blank&#34;&gt;必要であれば外部の文献へのリンクを挿入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 5.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++14, libc++: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.9.0, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1, 13.0, 12.1, 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, ARM: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, x86: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.57.0リリースノート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/document/version/1_57_0.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:document/version/1_57_0.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.57.0リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_57_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_57_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_57_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_57_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multi-index&#34;&gt;Multi Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#type-index&#34;&gt;Type Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#units&#34;&gt;Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RTTIは必須ではなくなった（RTTIのエミュレートには&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#type-index&#34;&gt;Type Index&lt;/a&gt;が使用される）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8958&#34; target=&#34;_blank&#34;&gt;#8958&lt;/a&gt;を修正。&lt;ul&gt;
&lt;li&gt;訳者註：cv修飾子を無視したany_castが可能になっており、未定義動作を引き起こす原因となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FreeBSDで動作する&lt;code&gt;kqueue&lt;/code&gt;リアクタを修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10606&#34; target=&#34;_blank&#34;&gt;#10606&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac OS上でシリアルポートを読む際に、&lt;code&gt;kqueue&lt;/code&gt;リアクタがビジーループに陥るのを修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10496&#34; target=&#34;_blank&#34;&gt;#10496&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;読み込み専用ファイル記述子を使用した場合の&lt;code&gt;kqueue&lt;/code&gt;リアクタの問題を修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10367&#34; target=&#34;_blank&#34;&gt;#10367&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dev/poll&lt;/code&gt;リアクタを使用した場合のコンパイルエラーを修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10572&#34; target=&#34;_blank&#34;&gt;#10572&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windowsバックエンドにおいて、非推奨の&lt;code&gt;WSASocketA&lt;/code&gt;を&lt;code&gt;WSASocketW&lt;/code&gt;に置き換えた。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10534&#34; target=&#34;_blank&#34;&gt;#10534&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ 2013でのいくつかの警告を修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10376&#34; target=&#34;_blank&#34;&gt;#10376&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WinRT環境におけるバイトオーダー変換関数の整数型を修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10539&#34; target=&#34;_blank&#34;&gt;#10539&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_future&lt;/code&gt;と&lt;code&gt;spawn()&lt;/code&gt;は&lt;code&gt;asio.hpp&lt;/code&gt;をインクルードしただけでは利用できない為、ドキュメントを修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10567&#34; target=&#34;_blank&#34;&gt;#10567&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio::strand&lt;/code&gt;は非推奨となった。代わりに&lt;code&gt;asio::io_service::strand&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Moveの&lt;code&gt;move_if_noexcept&lt;/code&gt;を使用した際のいくつかの警告を修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7888&#34; target=&#34;_blank&#34;&gt;#7888&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/code&gt;マクロを新規追加。&lt;ul&gt;
&lt;li&gt;コンパイラが&lt;code&gt;#pragma detect_mismatch(&#34;name&#34;, &#34;value&#34;)&lt;/code&gt;をサポートするかを調べられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initializer_list&lt;/code&gt;のサポートを追加。Robert Matusewiczによる貢献。&lt;/li&gt;
&lt;li&gt;後方に拡大可能なアロケータを使用する場合の&lt;code&gt;vector&lt;/code&gt;において、二重破棄の問題を修正&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10263&#34; target=&#34;_blank&#34;&gt;Trac #10263&lt;/a&gt; AIX 6.1環境において、&lt;code&gt;sched_yield()&lt;/code&gt;関数がスコープ外になっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/16&#34; target=&#34;_blank&#34;&gt;GitHub #16&lt;/a&gt; 不完全型コンテナのイテレータを修正。Mikael Perssonに感謝。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スタック用に確保した領域がスタック用であるとValgrindへ登録することができるようになった。&lt;ul&gt;
&lt;li&gt;訳者註：&lt;ul&gt;
&lt;li&gt;通常Valgrindはコンテキストスイッチが発生したことを知ることができず、スイッチ後にスタックトレースを出力するとSegfaultを起こすが、これを回避することができるようになる。&lt;/li&gt;
&lt;li&gt;通常この機能は無効化してビルドされる。有効にするにはビルド時にBoost.Buildへ&lt;code&gt;&amp;lt;valgrind&amp;gt;on&lt;/code&gt;を渡す必要がある（コマンドラインでは&lt;code&gt;valgrind=on&lt;/code&gt;）が、生成物利用する際にはABI互換性に注意する必要がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVCにおいて、asymmetric_coroutine.hppで定義されているシンボルが重複するためリンクエラーになる問題を修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10386&#34; target=&#34;_blank&#34;&gt;#10386&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;begin(...pull_coroutine&amp;lt; R &amp;gt; &amp;amp; c)&lt;/code&gt; の呼び出しが曖昧になる問題を修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10536&#34; target=&#34;_blank&#34;&gt;#10536&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Serializationによるシリアライズのサポートを追加。&lt;/li&gt;
&lt;li&gt;1.56にて&lt;code&gt;flyweight&lt;/code&gt;のデフォルトコンストラクタはexplicit指定されたが、いくつかの初期化方法で問題が見つかった。そのため以前のexplicit指定されないコンストラクタを復帰させた。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10439&#34; target=&#34;_blank&#34;&gt;#10439&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のメンバ関数&lt;code&gt;insert()&lt;/code&gt;、&lt;code&gt;remove()&lt;/code&gt;、&lt;code&gt;count()&lt;/code&gt;のパラメータとして、&lt;code&gt;value_type&lt;/code&gt;に変換可能な型をサポート。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8402&#34; target=&#34;_blank&#34;&gt;#8402&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10668&#34; target=&#34;_blank&#34;&gt;#10668&lt;/a&gt; 暗黙変換の警告&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9354&#34; target=&#34;_blank&#34;&gt;#9354&lt;/a&gt; 非デカルト座標系(non-cartesian coordinate systems)におけるwinding strategyの&lt;code&gt;within()&lt;/code&gt;と&lt;code&gt;covered_by()&lt;/code&gt;のバグ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10177&#34; target=&#34;_blank&#34;&gt;#10177&lt;/a&gt; インクルード漏れ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10345&#34; target=&#34;_blank&#34;&gt;#10345&lt;/a&gt; いくつかの座標系型で&lt;code&gt;distance()&lt;/code&gt;のコンパイルに失敗する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10398&#34; target=&#34;_blank&#34;&gt;#10398&lt;/a&gt; 回転の計算で、バッファの近接チェックが間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10421&#34; target=&#34;_blank&#34;&gt;#10421&lt;/a&gt; spherical CSのpoint-box間の&lt;code&gt;distance()&lt;/code&gt;が不正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10615&#34; target=&#34;_blank&#34;&gt;#10615&lt;/a&gt; &lt;code&gt;rtree&lt;/code&gt;のコンストラクタに対する機能リクエスト&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10643&#34; target=&#34;_blank&#34;&gt;#10643&lt;/a&gt; 大きな座標での&lt;code&gt;point_on_surface()&lt;/code&gt;の結果が不正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの、アルゴリズムのバッファのバグを修正&lt;/li&gt;
&lt;li&gt;CCW Polygon (&lt;code&gt;extreme_points()&lt;/code&gt;)に対する&lt;code&gt;point_on_surface()&lt;/code&gt;のバグと数値的な問題を修正(Matt Amosに感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point_on_surface()&lt;/code&gt;と&lt;code&gt;point_on_border()&lt;/code&gt;の交換によるA/Aの&lt;code&gt;disjoint()&lt;/code&gt;のバグを修正(Matt Amosに感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;convex_hull()&lt;/code&gt;が結果として重複した&lt;code&gt;point&lt;/code&gt;を返す問題を修正。非常に少ない&lt;code&gt;point&lt;/code&gt;(1〜2)を入力として与えると発生する。&lt;/li&gt;
&lt;li&gt;大きな座標での&lt;code&gt;centroid()&lt;/code&gt;が不正確であった問題について、&lt;code&gt;point&lt;/code&gt;の変換を修正(#10643のチケットに関連)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for_each_segment()&lt;/code&gt;が、開いている&lt;code&gt;Geometry&lt;/code&gt;の最後の&lt;code&gt;segment&lt;/code&gt;を考慮していない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique_ptr&lt;/code&gt;は削除された。現在&lt;code&gt;boost::interprocess::unique_ptr&lt;/code&gt;は&lt;strong&gt;Boost.Move&lt;/strong&gt;から提供される一般化された&lt;code&gt;boost::movelib::unique_ptr&lt;/code&gt;を指す。&lt;ul&gt;
&lt;li&gt;この実装は標準の&lt;code&gt;std::unique_ptr&lt;/code&gt;に近く、またよくメンテナンスされている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10262&#34; target=&#34;_blank&#34;&gt;#10262&lt;/a&gt; AIX 6.1における変数&lt;code&gt;hz&lt;/code&gt;のバグを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10229&#34; target=&#34;_blank&#34;&gt;#10229&lt;/a&gt; &lt;code&gt;interprocess\detail\os_file_functions.hpp&lt;/code&gt;内でのコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10506&#34; target=&#34;_blank&#34;&gt;#10506&lt;/a&gt; &lt;code&gt;create_or_open_file&lt;/code&gt;内での無限ループを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/11&#34; target=&#34;_blank&#34;&gt;pull request 11&lt;/a&gt; &lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;が定義されている際のコンパイルエラーを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リファレンスを改善するためにDoxygenのマーカを整理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実験的なノードチェッカを追加（Matei Davidからのコントリビュート、ありがとう！）。&lt;/li&gt;
&lt;li&gt;C++14のNull Forward Iteratorsを実装。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3644.pdf&#34; target=&#34;_blank&#34;&gt;N3644: Null Forward Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/intrusive/pull/12&#34; target=&#34;_blank&#34;&gt;pull request 12&lt;/a&gt; MSVC14の警告を修正（&lt;code&gt;C4456: declaration of &#39;x_parent_right&#39; hides previous local declaration&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10520&#34; target=&#34;_blank&#34;&gt;#10520&lt;/a&gt; &lt;code&gt;intrusive/detail/utilities.hpp&lt;/code&gt;での暗黙の型変換による警告を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10469&#34; target=&#34;_blank&#34;&gt;#10469&lt;/a&gt; &lt;code&gt;optimize_multikey&lt;/code&gt;を使用した&lt;code&gt;unordered_multiset&lt;/code&gt;から削除する際に無限ループに陥るのを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ほとんどのコンポーネントを、&lt;code&gt;boost::iterators&lt;/code&gt;名前空間に移動した。後方互換性のため、従来の&lt;code&gt;boost&lt;/code&gt;名前空間でもアクセスできる。&lt;/li&gt;
&lt;li&gt;イテレータの演算子が、条件付きでイテレータのカテゴリを元に定義するようにした。&lt;/li&gt;
&lt;li&gt;ライブラリの内部コンポーネントを一部を&lt;code&gt;public&lt;/code&gt;にした(たとえば&lt;code&gt;minimum_category&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical-Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの内部的な変更を行った。これまでは一つのヘッダファイルでライブラリを構成していたが、複数のヘッダファイルに分割した。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10391&#34; target=&#34;_blank&#34;&gt;#10391&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10173&#34; target=&#34;_blank&#34;&gt;#10173&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超指数分布を追加。&lt;/li&gt;
&lt;li&gt;不完全なガンマ関数によるいくつかのオーバーフローを修正（Rocco Romeoに感謝）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = b = 0.5&lt;/code&gt;の時の不完全なベータ関数の導関数によるバグを修正。&lt;ul&gt;
&lt;li&gt;これはいくつかの非心分布へも影響を与える。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10480&#34; target=&#34;_blank&#34;&gt;#10480&lt;/a&gt;を参照せよ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;round()&lt;/code&gt;関数のいくつかのコーナーケースを修正。&lt;/li&gt;
&lt;li&gt;標準ライブラリのサポートが不完全な場合、cstdfloat.hppによる80bit浮動小数点型のサポートを行わない。&lt;ul&gt;
&lt;li&gt;訳者註：FreeBSD等、いくつかの環境では&lt;code&gt;long double&lt;/code&gt;型へのサポートが不完全であり、まともな精度を期待できないためである。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スマートポインタである&lt;code&gt;unique_ptr&lt;/code&gt;を実装（素晴らしい実装とテストをくれたHoward Hinnantに感謝）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move_if_noexcept&lt;/code&gt;を追加（Antony Polukhinに感謝）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9785&#34; target=&#34;_blank&#34;&gt;#9785&lt;/a&gt; &lt;code&gt;boost/move/core.hpp&lt;/code&gt;でのIntel ICCの警告を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10460&#34; target=&#34;_blank&#34;&gt;#10460&lt;/a&gt; 緩い例外指定によるコンパイルエラーを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/move/pull/3&#34; target=&#34;_blank&#34;&gt;pull request 3&lt;/a&gt; 右辺値参照が利用できない場合、コピーコンストラクタを消去しないように変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi-Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clangにおいてfriend宣言で警告が出るのを修正（Marcel Raadからのコントリビュート）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有理数から浮動小数点数への変換の際に、近い方へ丸め込む様に変更。&lt;/li&gt;
&lt;li&gt;浮動小数点数から有理数への変換を改善。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_bin_float&lt;/code&gt;の指数関数で稀に発生するバグを修正。&lt;/li&gt;
&lt;li&gt;多くの些細なドキュメントの問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::tuple&lt;/code&gt;が利用可能なとき、複合キーの検索に使用することが可能になった。&lt;ul&gt;
&lt;li&gt;従来のBoost.Tupleも後方互換性のためにサポートされている。&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://www.boost.org/doc/libs/1_57_0/libs/multi_index/doc/tutorial/key_extraction.html#composite_keys&#34; target=&#34;_blank&#34;&gt;Tutorial - Key extraction - 1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#preprocessor&#34; name=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_begin_parens&lt;/code&gt;と&lt;code&gt;remove_parens&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;配列と同等の機能をタプルに追加。&lt;/li&gt;
&lt;li&gt;空のタプルデータに関するVC++の問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_empty&lt;/code&gt;の内部実装を、可変引数マクロが使用可能な場合に、より優れた実装としてそれによる実装に切り替えるようにした。&lt;/li&gt;
&lt;li&gt;可変引数マクロのサポートを、GCCと同様になるようClangの方を更新。&lt;/li&gt;
&lt;li&gt;新たな機能についてのドキュメントを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchro: コンパイラがサポートする場合、汎用ロックアルゴリズムで可変長テンプレートを使用する。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6227&#34; target=&#34;_blank&#34;&gt;#6227&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Synchro: 並行キューにviewを追加。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10298&#34; target=&#34;_blank&#34;&gt;#10298&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Async: &lt;code&gt;generic_executor_ref&lt;/code&gt;を追加。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10300&#34; target=&#34;_blank&#34;&gt;#10300&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_valid_future&lt;/code&gt;を追加。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10552&#34; target=&#34;_blank&#34;&gt;#10552&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSVCにおいて、&lt;code&gt;call_once&lt;/code&gt;が正しくない組み込み関数を使っていたのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6782&#34; target=&#34;_blank&#34;&gt;#6782&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;システム時刻が巻き戻った場合に、&lt;code&gt;boost::thread::sleep()&lt;/code&gt;がハングしていたのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;#6787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スレッド中で&lt;code&gt;this_thread::sleep_for&lt;/code&gt;が_steady_になっていなかったのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7665&#34; target=&#34;_blank&#34;&gt;#7665&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future::fallback_to&lt;/code&gt;がassertで落ちる問題を修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9307&#34; target=&#34;_blank&#34;&gt;#9307&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future::async&lt;/code&gt;がlambdaの呼び出しで例外を投げて終了するのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9308&#34; target=&#34;_blank&#34;&gt;#9308&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test_4648_lib&lt;/code&gt;が失敗するのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9310&#34; target=&#34;_blank&#34;&gt;#9310&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promise&lt;/code&gt;と&lt;code&gt;future&lt;/code&gt;が値の格納に指定されたアロケータを使用していなかったのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9425&#34; target=&#34;_blank&#34;&gt;#9425&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;の単体テストが&lt;code&gt;get()&lt;/code&gt;/&lt;code&gt;pthread_cond_wait()&lt;/code&gt;でハングするのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9558&#34; target=&#34;_blank&#34;&gt;#9558&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[windows] &lt;code&gt;basic_timed_mutex::try_lock_until&lt;/code&gt;及び&lt;code&gt;condition_variable::wait_until&lt;/code&gt;に短い期間を渡すと無限に（若しくは無限に近いぐらい）待ち続けるのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9787&#34; target=&#34;_blank&#34;&gt;#9787&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[windows] システム時刻が1970年以前の場合に&lt;code&gt;boost::condition_variable.timed_wait()&lt;/code&gt;が例外を送出していたのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9880&#34; target=&#34;_blank&#34;&gt;#9880&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC 4.4のバグを回避。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10159&#34; target=&#34;_blank&#34;&gt;#10159&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;参考： &lt;a href=&#34;http://stackoverflow.com/questions/1989552/gcc-error-with-variadic-templates-sorry-unimplemented-cannot-expand-identi&#34; target=&#34;_blank&#34;&gt;http://stackoverflow.com/questions/1989552/gcc-error-with-variadic-templates-sorry-unimplemented-cannot-expand-identi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_specific_ptr&lt;/code&gt;での&lt;code&gt;void *&lt;/code&gt;をサポート。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10196&#34; target=&#34;_blank&#34;&gt;#10196&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;_Boost.Thread 1.56 RC1_が_MinGW_でコンパイル出来ないのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10296&#34; target=&#34;_blank&#34;&gt;#10296&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;_Boost.Thread 1.56 RC1_が_armhf_でビルドするとハングする。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10297&#34; target=&#34;_blank&#34;&gt;#10297&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;訳者註：このバグはClang 3.4固有のものであり、Boost.Threadは何も変更されない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::promise&amp;lt;T&amp;gt;::set_value(const T&amp;amp;)&lt;/code&gt;のオーバーロードがC++03モードで正しく提供されていないのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10340&#34; target=&#34;_blank&#34;&gt;#10340&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_all&lt;/code&gt;/&lt;code&gt;when_any&lt;/code&gt;のドキュメントがないのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10425&#34; target=&#34;_blank&#34;&gt;#10425&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_all&lt;/code&gt;に_deferred_な&lt;code&gt;future&lt;/code&gt;を渡すと直ちに制御が戻ってきてしまうのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10426&#34; target=&#34;_blank&#34;&gt;#10426&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_any&lt;/code&gt;に_deferred_な&lt;code&gt;future&lt;/code&gt;若しくは_ready_状態にある&lt;code&gt;future&lt;/code&gt;を渡した際に、他の_deferred_な&lt;code&gt;future&lt;/code&gt;を実行していなかったのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10427&#34; target=&#34;_blank&#34;&gt;#10427&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Boost.Moveが提供する&lt;code&gt;unique_ptr&lt;/code&gt;を使用するように変更。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10428&#34; target=&#34;_blank&#34;&gt;#10428&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;未実装だった&lt;code&gt;when_all&lt;/code&gt;/&lt;code&gt;when_any&lt;/code&gt;が&lt;code&gt;tuple&lt;/code&gt;を返す場合を実装。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10465&#34; target=&#34;_blank&#34;&gt;#10465&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_MOVABLE_ONLY&amp;lt;T&amp;gt;&lt;/code&gt;なクラスが&lt;code&gt;is_copy_constructible&amp;lt;T&amp;gt;::value == false&lt;/code&gt;を満たさないのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10476&#34; target=&#34;_blank&#34;&gt;#10476&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/thread/future.hpp&lt;/code&gt;のデータレースを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10478&#34; target=&#34;_blank&#34;&gt;#10478&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread/condition_variable_any&lt;/code&gt;のコンストラクタが&lt;code&gt;pthread_cond_init&lt;/code&gt;のエラーコードで間違った値を返していたのを修正。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10529&#34; target=&#34;_blank&#34;&gt;#10529&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_future&amp;lt;R&amp;gt;::then&lt;/code&gt;をconstにした。 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10563&#34; target=&#34;_blank&#34;&gt;#10563&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#type-index&#34; name=&#34;type-index&#34;&gt;Type-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ODR違反の検出に&lt;code&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/code&gt;を使用するようになった。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10404&#34; target=&#34;_blank&#34;&gt;#10404&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;typoの修正。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10294&#34; target=&#34;_blank&#34;&gt;#10294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type-Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいトレイトとして&lt;code&gt;is_copy_assignable&lt;/code&gt;及び&lt;code&gt;is_final&lt;/code&gt;を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#units&#34; name=&#34;units&#34;&gt;Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たな単位系を追加。&lt;code&gt;&amp;lt;boost/units/systems/information.hpp&amp;gt;&lt;/code&gt;ヘッダに、以下の単位が含まれる：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hartley&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shannon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/2%E9%80%B2%E6%8E%A5%E9%A0%AD%E8%BE%9E&#34; target=&#34;_blank&#34;&gt;2進接頭辞&lt;/a&gt;の大きさ単位として、以下のIEC接頭辞を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kibi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mebi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gibi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tebi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pebi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zebi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yobi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVC-14での、NaNの出力を修正&lt;/li&gt;
&lt;li&gt;C++11の&lt;code&gt;numeric_limits&lt;/code&gt;機能である&lt;code&gt;digits10&lt;/code&gt;と&lt;code&gt;lowest&lt;/code&gt;をサポート&lt;/li&gt;
&lt;li&gt;警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterator&lt;/code&gt;における&lt;code&gt;pointer&lt;/code&gt;の&lt;code&gt;typedef&lt;/code&gt;を修正。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10672&#34; target=&#34;_blank&#34;&gt;#10672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coverity&lt;/code&gt;による警告を修正。 (&lt;a href=&#34;https://github.com/boostorg/unordered/pull/2&#34; target=&#34;_blank&#34;&gt;pull request 2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;距離を受け取る&lt;code&gt;next()&lt;/code&gt;と&lt;code&gt;prior()&lt;/code&gt;を再実装した。&lt;ul&gt;
&lt;li&gt;距離が&lt;code&gt;unsigned&lt;/code&gt;、若しくはどちらも整数であっても正しく動作する。&lt;/li&gt;
&lt;li&gt;これは第1引数の演算子のサポートの仕方で適切な実装を選択している。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_57_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たに2つの型、&lt;code&gt;matrix_row&lt;/code&gt;と&lt;code&gt;matrix_column&lt;/code&gt;ファサードを追加。これは、行列のデータに行の配列、列の配列としてアクセスできるようにするものである。&lt;/li&gt;
&lt;li&gt;小さな機能として、固定サイズのコンテナを追加：&lt;code&gt;fixed_vector&lt;/code&gt;と&lt;code&gt;fixed_matrix&lt;/code&gt;。実装に&lt;code&gt;std::array&lt;/code&gt;を使用しているため、C++11が必要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;banded_matrix&lt;/code&gt;のフォーマットを、標準BLASにマッチするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7549&#34; target=&#34;_blank&#34;&gt;#7549&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix&lt;/code&gt;と&lt;code&gt;vector&lt;/code&gt;のインタフェースに、C++11の&lt;code&gt;cbegin()&lt;/code&gt;、&lt;code&gt;cend()&lt;/code&gt;、&lt;code&gt;crbegin()&lt;/code&gt;、&lt;code&gt;crend()&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントの配布を容易にするために、doxygenのドキュメントを削除。&lt;/li&gt;
&lt;li&gt;MSVCでの未使用パラメータ警告を修正&lt;/li&gt;
&lt;li&gt;uBLASの開発用フォルダの構成を変更した(ユーザーのライブラリに影響はない)&lt;/li&gt;
&lt;li&gt;さまざまなコンパイラでの警告、およびコンパイルエラーについて、大規模な修正を行った。いくつかの、古いコンパイラのための警告や非互換を解決するのは難しかったが、uBLASのコンパイルは非常に整理された状態になった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.1&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.1&lt;/li&gt;
&lt;li&gt;Intel: 13.1, 14.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 13.1, 14.0&lt;/li&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 6.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 6.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 6.0&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.9.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7. 4.5.4, 4.6.3, 4.7.2, 4.7.3, 4.8.0, 4.8.2, 4.9.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 5.0 (experimental)&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.1&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.1, 13.0, 13.1, 14.0&lt;/li&gt;
&lt;li&gt;Intel, C++11: 13.1, 14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 6.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 6.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 6.0&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 4.9.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.0, 4.8.2, 4.9.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave/&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost逆引きリファレンス -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost逆引きリファレンス&lt;/h1&gt;
&lt;p&gt;逆引きリファレンスは、やりたいことから方法を調べるためのリファレンスです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/tips/template_page&#34;&gt;テンプレートページ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目次&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#data_structure&#34;&gt;データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#concurrent_data_structure&#34;&gt;並行データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#io&#34;&gt;入出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#numeric&#34;&gt;数値演算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#string&#34;&gt;文字列操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#function&#34;&gt;関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#class&#34;&gt;クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#idiom&#34;&gt;イディオム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#memory&#34;&gt;メモリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#validation&#34;&gt;検証&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#process&#34;&gt;プロセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#math&#34;&gt;数学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#compile_time&#34;&gt;コンパイル時処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#concurrency&#34;&gt;並行処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#network&#34;&gt;ネットワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#datetime&#34;&gt;日付・時間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#lang_binding&#34;&gt;言語バインディング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#data_structure&#34; name=&#34;data_structure&#34;&gt;データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html&#34;&gt;配列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_array.html&#34;&gt;多次元配列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html&#34;&gt;タプル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html&#34;&gt;ハッシュ表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html&#34;&gt;グラフ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html&#34;&gt;コンテナに複数の並び順を持たせる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html&#34;&gt;for each文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html&#34;&gt;リスト処理の遅延評価&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html&#34;&gt;動的型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html&#34;&gt;サイズを動的に変更できるビット集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html&#34;&gt;循環バッファ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/priority_sort.html&#34;&gt;優先順位を付けて並べ替える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#concurrent_data_structure&#34; name=&#34;concurrent_data_structure&#34;&gt;並行データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-queue.html&#34;&gt;ロックフリーキュー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-stack.html&#34;&gt;ロックフリースタック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#io&#34; name=&#34;io&#34;&gt;入出力&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html&#34;&gt;ファイル／ディレクトリ操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html&#34;&gt;シリアライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html&#34;&gt;XMLの読み込み／書き込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html&#34;&gt;JSONの読み込み／書き込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/ini.html&#34;&gt;iniファイルの読み込み／書き込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html&#34;&gt;メモリマップドファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/io_state.html&#34;&gt;ストリームの状態を戻す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html&#34;&gt;ロギング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#numeric&#34; name=&#34;numeric&#34;&gt;数値演算&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html&#34;&gt;多倍長整数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html&#34;&gt;多倍長浮動小数点数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#string&#34; name=&#34;string&#34;&gt;文字列操作&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html&#34;&gt;文字列操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html&#34;&gt;文字列フォーマット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html&#34;&gt;構文解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html&#34;&gt;静的な正規表現&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html&#34;&gt;動的な正規表現&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#function&#34; name=&#34;function&#34;&gt;関数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/function.html&#34;&gt;関数ポインタと関数オブジェクトを統一的に扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html&#34;&gt;カリー化／部分適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html&#34;&gt;無名関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/named_parameter.html&#34;&gt;名前付き引数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#class&#34; name=&#34;class&#34;&gt;クラス&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/noncopyable.html&#34;&gt;クラスをコピー不可にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/noncopyable_container.html&#34;&gt;コピー不可なオブジェクトを持ちまわる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html&#34;&gt;ムーブ可能なクラスを定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/initialize.html&#34;&gt;組み込み型を必ず初期化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html&#34;&gt;無効値の統一的な表現&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html&#34;&gt;ユーザー定義型を扱える型安全な共用体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/uuid.html&#34;&gt;オブジェクトにユニークなIDを付ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html&#34;&gt;演算子自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html&#34;&gt;イテレータを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#idiom&#34; name=&#34;idiom&#34;&gt;イディオム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html&#34;&gt;有限状態マシン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/scope_guard.html&#34;&gt;スコープを抜ける際に実行されるブロック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html&#34;&gt;シグナル／スロット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コルーチン&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#memory&#34; name=&#34;memory&#34;&gt;メモリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html&#34;&gt;リソースを自動的に解放する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;プロセス間共有メモリ&lt;/li&gt;
&lt;li&gt;値の共有／Flyweightパターン&lt;/li&gt;
&lt;li&gt;メモリプール&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#validation&#34; name=&#34;validation&#34;&gt;検証&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html&#34;&gt;単体テスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html&#34;&gt;実行時アサート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#process&#34; name=&#34;process&#34;&gt;プロセス&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html&#34;&gt;コマンドラインオプションの定義／取得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#math&#34; name=&#34;math&#34;&gt;数学&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/random.html&#34;&gt;乱数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html&#34;&gt;線形代数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html&#34;&gt;数学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;単位演算&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html&#34;&gt;区間演算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html&#34;&gt;統計処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html&#34;&gt;計算幾何&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;常微分方程式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#compile_time&#34; name=&#34;compile_time&#34;&gt;コンパイル時処理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EDSLの作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html&#34;&gt;型特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;型リスト操作&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/constcond_overload.html&#34;&gt;コンパイル時条件によるオーバーロード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#concurrency&#34; name=&#34;concurrency&#34;&gt;並行処理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html&#34;&gt;スレッド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html&#34;&gt;MPI並列計算&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#network&#34; name=&#34;network&#34;&gt;ネットワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html&#34;&gt;TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;li&gt;SSL&lt;/li&gt;
&lt;li&gt;シリアルポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#datetime&#34; name=&#34;datetime&#34;&gt;日付・時間&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html&#34;&gt;日付の計算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html&#34;&gt;処理時間の計測&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#lang_binding&#34; name=&#34;lang_binding&#34;&gt;言語バインディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pythonバインディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#computer_vision&#34; name=&#34;computer_vision&#34;&gt;コンピュータビジョン&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;画像処理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips.html#env&#34; name=&#34;env&#34;&gt;開発環境&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/version.html&#34;&gt;Boostのバージョンを調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html&#34;&gt;コンパイラ間の差を吸収する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;コンパイラが、あるC++11の機能をサポートしているかどうかでコードを変更する&lt;/li&gt;
&lt;li&gt;コンパイラによって、テンプレート中の &lt;code&gt;hoge&amp;lt;T&amp;gt;::type x;&lt;/code&gt; や &lt;code&gt;fuga.f();&lt;/code&gt; がコンパイルエラーになったりならなかったりする問題を回避する&lt;/li&gt;
&lt;li&gt;メンバ関数テンプレートの呼び出しでコンパイルエラーになる問題を回避する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build.html&#34;&gt;ビルドツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ビルドしたバイナリを実行する&lt;/li&gt;
&lt;li&gt;ディレクトリ構造を保存した状態でインストールを行う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build_link.html&#34;&gt;ヘッダオンリー or ビルドが必要なライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/cxx11-boost-mapping.html&#34;&gt;C++11にもBoostにも存在するライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>配列 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/array.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/array.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;配列&lt;/h1&gt;
&lt;p&gt;Boostでは、標準コンテナのインタフェースで使用できる固定長配列クラス、&lt;code&gt;boost::array&lt;/code&gt;を提供する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#overview&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#size&#34;&gt;配列の要素数を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#at&#34;&gt;添字による要素アクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#iterator&#34;&gt;イテレータを取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#overview&#34; name=&#34;overview&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;クラスは、組み込み配列にゼロオーバーヘッドな固定長配列クラスである。&lt;/p&gt;
&lt;p&gt;このクラスは、組み込み配列とは異なり、&lt;code&gt;std::vector&lt;/code&gt;や&lt;code&gt;std::list&lt;/code&gt;のような標準コンテナのインタフェースを持つ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; ar &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ar.begin(), ar.end(), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 1 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;テンプレート引数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;は、第1テンプレート引数に要素の型、第2テンプレート引数に要素数を取る。&lt;/p&gt;
&lt;p&gt;この場合、「3要素の&lt;code&gt;int&lt;/code&gt;型配列」を作成している。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初期化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;は、組み込み配列と同様に、&lt;code&gt;{ 1, 2, 3 }&lt;/code&gt;のような初期化子リストによる初期化が可能である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;イテレータインタフェース&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;は、&lt;code&gt;std::vector&lt;/code&gt;や&lt;code&gt;std::list&lt;/code&gt;と同じように、イテレータを返す&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;のインタフェースを持つ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#size&#34; name=&#34;size&#34;&gt;配列の要素数を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;配列の要素数を取得するには、&lt;code&gt;size()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; ar &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ar.size();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#at&#34; name=&#34;at&#34;&gt;添字による要素アクセス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;は、組み込み配列や&lt;code&gt;std::vector&lt;/code&gt;と同じように、&lt;code&gt;operator[]()&lt;/code&gt;の添字演算子によって要素にランダムアクセスできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; ar &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; ar.size(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ar[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#iterator&#34; name=&#34;iterator&#34;&gt;イテレータ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::array&lt;/code&gt;は、&lt;code&gt;begin()&lt;/code&gt;、&lt;code&gt;end()&lt;/code&gt;メンバ関数によって、最初の要素を指すイテレータ、最後尾要素の次を指すイテレータを取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; ar &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ar.begin(), ar.end(), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/array.html#iterator-type&#34; name=&#34;iterator-type&#34;&gt;イテレータの型を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;イテレータの型は、&lt;code&gt;boost::array&amp;lt;T, N&amp;gt;&lt;/code&gt;クラスが持つ、以下のメンバ型で取得できる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterator&lt;/code&gt; : 変更可能なイテレータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_iterator&lt;/code&gt; : 読み取り専用イテレータ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; Array;
    Array ar &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    {
        Array&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find(ar.begin(), ar.end(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; ar.end())
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    {
        Array&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find(ar.begin(), ar.end(), &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; ar.end())
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビルドツール -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/build.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/build.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ビルドツール&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build.html#execute&#34;&gt;ビルドしたバイナリを実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build.html#install-with-saved-directory&#34;&gt;ディレクトリ構造を保存した状態でインストールを行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build.html#execute&#34; name=&#34;execute&#34;&gt;ビルドしたバイナリを実行する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;bjamでバイナリをビルドした場合、toolsetやvariantによって最終生成物が非常に深い位置に生成される。&lt;/p&gt;
&lt;p&gt;これを実行するのはインストールするまで困難であるが、notfileモジュールを使用することで実現できる。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;import notfile ;&lt;/span&gt;

project /sample ;

exe executable : source.cpp ;

actions exec_executable
{
        $(2)
}

&lt;span style=&#34;color:#ff0000&#34;&gt;notfile exec&lt;/span&gt; : @exec_executable : /sample//executable ;
explicit exec ;
&lt;/code&gt;&lt;/pre&gt;
explicitルールを指定しないと意図しないタイミングで実行されてしまうので注意されたい。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ cat source.cpp
#include &amp;lt;iostream&amp;gt;
int main()
{
    std::cout &amp;lt;&amp;lt; __GNUC__ &amp;lt;&amp;lt; &#34;.&#34; &amp;lt;&amp;lt; __GNUC_MINOR__ &amp;lt;&amp;lt; std::endl;
}
$ bjam --toolset=gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;
...found 9 targets...
...updating 5 targets...
common.mkdir bin
common.mkdir bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;
common.mkdir bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;/debug
gcc.compile.c++ bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;/debug/source.o
gcc.link bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;/debug/executable
...updated 5 targets...
$ bjam --toolset=gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;
...found 9 targets...
...updating 4 targets...
common.mkdir bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;
common.mkdir bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;/debug
gcc.compile.c++ bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;/debug/source.o
gcc.link bin/gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;/debug/executable
...updated 4 targets...
$ bjam --toolset=gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt; exec
...found 10 targets...
...updating 1 target...
Jamfile&amp;lt;/home/boosters&amp;gt;.exec_executable &amp;lt;l./gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;/debug&amp;gt;exec
&lt;span style=&#34;color:#ff0000&#34;&gt;4.5&lt;/span&gt;
...updated 1 target...
$ bjam --toolset=gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt; exec
...found 10 targets...
...updating 1 target...
Jamfile&amp;lt;/home/boosters&amp;gt;.exec_executable &amp;lt;l./gcc-&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;/debug&amp;gt;exec
&lt;span style=&#34;color:#ff0000&#34;&gt;4.6&lt;/span&gt;
...updated 1 target...
&lt;/code&gt;&lt;/pre&gt;
実行時はビルド時と同じtoolset,variantを指定する必要がある。ビルドされていない場合、ビルドを行ってから実行する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/build.html#install-with-saved-directory&#34; name=&#34;install-with-saved-directory&#34;&gt;ディレクトリ構造を保存した状態でインストールを行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通常インストールターゲットを定義する際、packageモジュールのinstallルールを用いることが多い。しかし、これはヘッダファイルのディレクトリ構造をデフォルトで保存しない。ヘッダファイルを細かく分けることの多いC++などではこの動作は使いにくい。以下にデフォルトの動作を例示する。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;# Jamroot.jam
&lt;span style=&#34;color:#ff0000&#34;&gt;import package ;&lt;/span&gt;
import path ;

path-constant project-root : [ path.make ./ ] ;
project /sample ;

explicit install ;
&lt;span style=&#34;color:#ff0000&#34;&gt;package.install&lt;/span&gt; install
  : # requirements
  : # binaries
  : # libraries
  : [ path.glob-tree $(project-root) : *.hpp ]
  ;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ ls -R
.:
Jamroot.jam  sample/

&lt;span style=&#34;color:#ff0000&#34;&gt;./sample:&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;detail/  sample.hpp&lt;/span&gt;

&lt;span style=&#34;color:#ff0000&#34;&gt;./sample/detail:&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;sample1.hpp&lt;/span&gt;
$ bjam install --prefix=$HOME/local
...found 10 targets...
...updating 3 targets...
common.mkdir /home/boosters/local/include
&lt;span style=&#34;color:#ff0000&#34;&gt;common.copy /home/boosters/local/include/sample.hpp&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;common.copy /home/boosters/local/include/sample1.hpp&lt;/span&gt;
...updated 3 targets...
$ ls -R $HOME/local
/home/boosters/local:
include/

&lt;span style=&#34;color:#ff0000&#34;&gt;/home/boosters/local/include:&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;sample1.hpp&lt;/span&gt;  sample.hpp
$
&lt;/code&gt;&lt;/pre&gt;
これを回避するには&lt;code&gt;&amp;lt;install-source-root&amp;gt;&lt;/code&gt;を使用すればよい。具体的には以下のようになる。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;# Jamroot.jam
import package ;
import path ;

path-constant project-root : [ path.make ./ ] ;
project /sample ;

explicit install ;
package.install install
  : &lt;span style=&#34;color:#ff0000&#34;&gt;&amp;lt;install-source-root&amp;gt;$(project-root)&lt;/span&gt;
  : # binaries
  : # libraries
  : [ path.glob-tree $(project-root) : *.hpp ]
  ;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ ls -R
.:
Jamroot.jam  sample/

./sample:
&lt;span style=&#34;color:#ff0000&#34;&gt;detail/  sample.hpp&lt;/span&gt;

./sample/detail:
&lt;span style=&#34;color:#ff0000&#34;&gt;sample1.hpp&lt;/span&gt;
$ bjam install --prefix=$HOME/local
...found 12 targets...
...updating 5 targets...
common.mkdir /home/boosters/local/include
common.mkdir /home/boosters/local/include/sample
&lt;span style=&#34;color:#ff0000&#34;&gt;common.copy /home/boosters/local/include/sample/sample.hpp&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;common.mkdir /home/boosters/local/include/sample/detail&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;common.copy /home/boosters/local/include/sample/detail/sample1.hpp&lt;/span&gt;
...updated 5 targets...
$ ls -R $HOME/local
/home/boosters/local:
include/

/home/boosters/local/include:
sample/

&lt;span style=&#34;color:#ff0000&#34;&gt;/home/boosters/local/include/sample:&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;detail/  sample.hpp&lt;/span&gt;

&lt;span style=&#34;color:#ff0000&#34;&gt;/home/boosters/local/include/sample/detail:&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;sample1.hpp&lt;/span&gt;
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>循環バッファ -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/circular_buffer.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/circular_buffer.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;循環バッファ&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#overview&#34;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#iterator&#34;&gt;イテレータ/逆イテレータ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#law-layer-api&#34;&gt;実メモリアドレスとC API対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#monitor&#34;&gt;バッファの使用状況を確認する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#element-access&#34;&gt;バッファの先頭/末尾/ランダムアクセスの確認する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#overview&#34; name=&#34;overview&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::circular_buffer&lt;/code&gt;は循環バッファのライブラリである。&lt;/p&gt;
&lt;p&gt;※FIFO (First In First Out) アルゴリズムが実現可能&lt;/p&gt;
&lt;p&gt;実際にメモリ空間のコピーが発生しているのではなく、&lt;code&gt;boost::circular_buffer&lt;/code&gt; が開始ポインタの位置を循環させている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;バッファの先頭に追加していく場合&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;メモリアドレスイメージ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt; [0] [1] [2] 
 ___ ___ ___ 
|___|___|___|

push_front( &#39;a&#39; )
 ___ ___ ___ 
|_a_|___|___|

push_front( &#39;b&#39; )
 ___ ___ ___ 
|_b_|_a_|___|

push_front( &#39;c&#39; )
 ___ ___ ___ 
|_c_|_b_|_a_|

push_front( &#39;d&#39; )
 ___ ___ ___ 
|_d_|_c_|_b_|  &amp;lt;--- &#39;a&#39;が消える
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_front&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt; );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バッファ内の任意の位置を指定可能&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// arry同様開始/終了の指定も可能&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_front&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt; );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_front&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt; );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_front&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt; );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a
a
b a
c b a
d c b
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;バッファの末尾に追加していく場合&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;メモリアドレスイメージ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt; [0] [1] [2] 
 ___ ___ ___ 
|___|___|___|

push_back( &#39;x&#39; )
 ___ ___ ___ 
|___|___|_x_|

push_back( &#39;y&#39; )
 ___ ___ ___ 
|___|_x_|_y_|

push_back( &#39;z&#39; )
 ___ ___ ___ 
|_x_|_y_|_z_|

push_back( &#39;1&#39; )
 ___ ___ ___ 
|_y_|_z_|_1_|  &amp;lt;--- &#39;x&#39;が消える
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_back&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;x&#39;&lt;/span&gt; );
    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_back&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;y&#39;&lt;/span&gt; );
    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_back&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;z&#39;&lt;/span&gt; );

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;


    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.push_back&lt;/span&gt;( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;1&#39;&lt;/span&gt; );

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;x y z 
y z 1 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;バッファの削除をする場合&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;std::vector&lt;/code&gt;と同じく、popも利用可能&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾に追加していく&lt;/span&gt;
    c_buf.push_back( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;x&#39;&lt;/span&gt; );
    c_buf.push_back( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;y&#39;&lt;/span&gt; );
    c_buf.push_back( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;z&#39;&lt;/span&gt; );

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    c_buf.pop_back();   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾バッファ &#39;z&#39; が削除&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    c_buf.pop_front();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭バッファ &#39;x&#39; が削除&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;x y z 
x y 
y 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#iterator&#34; name=&#34;iterator&#34;&gt;イテレータ/逆イテレータ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;標準コンテナと同様に、イテレータと逆イテレータも利用可能&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt; [0] [1] [2] 
 ___ ___ ___ 
|_c_|_b_|_a_|
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メンバ関数&lt;/th&gt;
&lt;th&gt;効果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[0]&lt;/code&gt;位置を指すイテレータが返る、値は &lt;code&gt;&#39;c&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[2]&lt;/code&gt;位置の次を指すイテレータが返る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rbegin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[2]&lt;/code&gt;位置を指す逆イテレータが返る、値は &lt;code&gt;&#39;a&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[0]&lt;/code&gt;位置の前を指す逆イテレータが返る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf( &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt; );

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.begin&lt;/span&gt;(), &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.end&lt;/span&gt;(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.rbegin&lt;/span&gt;(), &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.rend&lt;/span&gt;(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c b a 
a b c 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#law-layer-api&#34; name=&#34;law-layer-api&#34;&gt;実メモリアドレスとC API対応&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::circular_buffer&lt;/code&gt;クラスには、循環バッファの中身をサイズ指定で一括出力させたいときなどに利用するメンバ関数として、&lt;code&gt;array_one()&lt;/code&gt;と&lt;code&gt;array_two()&lt;/code&gt;が用意されている。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;printf()&lt;/code&gt;や&lt;code&gt;fwrite()&lt;/code&gt;のようなC APIとやりとりするためのメンバ関数として、&lt;code&gt;linearize()&lt;/code&gt;が用意されている。&lt;/p&gt;
&lt;p&gt;＊循環バッファのメモリアドレスイメージ&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;___ ___ ___ ___ ___
|_H_|_G_|_F_|_E_|___|
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;＊実メモリアドレス&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt; ___ ___ ___ ___ ___
|_E_|___|_H_|_F_|_G_|
  +       +------------&amp;gt; array_one().first :位置取得
  |                      array_one().second:その位置からの個数取得
  +--------------------&amp;gt; array_two().first :位置取得
                         array_two().second:先頭位置からの個数取得
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lambda/lambda.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lambda;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メモリ表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;mem_dump&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; num )
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( p, p&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;num, ( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; ));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf( &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;B&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;D&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;E&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;F&#39;&lt;/span&gt; );    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// これ以降、先の&#39;A&#39;から消える&lt;/span&gt;
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;G&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;H&#39;&lt;/span&gt; );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 循環バッファのメモリアドレスイメージ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_H_|_G_|_F_|_E_|_G_|&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), ( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; ));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実メモリアドレスを意識&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; num1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_one().second&lt;/span&gt;;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// begin()から終端までの個数 &#39;3&#39;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; num2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_two().second&lt;/span&gt;;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実メモリ先頭からend()までの個数 &#39;2&#39;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; num1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; num2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実メモリアドレス&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_E_|_D_|_H_|_F_|_G_|&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       |   +--------------- &#39;H&#39;がbegin()位置、この位置を含めて3つ続く&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       +------------------- &#39;D&#39;がend()  位置、先頭&#39;E&#39;を含めて2つ続く&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_one().first&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_two().first&lt;/span&gt;;
    mem_dump( p1, num1 );                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// begin()から実メモリ末尾までの出力&lt;/span&gt;
    mem_dump( p2, num2 );                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実メモリ先頭からend()までの出力&lt;/span&gt;

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.pop_back();&lt;/span&gt;                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾を消してみる&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;


    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 循環バッファのメモリアドレスイメージ&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_H_|_G_|_F_|_E_|___|&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), ( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; ));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    num1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_one().second&lt;/span&gt;;     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 再取得してみる&lt;/span&gt;
    num2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_two().second&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; num1  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; num2  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 実メモリアドレス&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_E_|___|_H_|_F_|_G_|&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   |       +--------------- &#39;H&#39;がbegin()位置、この位置を含めて3つ続く&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   +----------------------- &#39;E&#39;がend()  位置、先頭&#39;E&#39;を含めて1つ続く&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// --------------------------------------------------------------------------&lt;/span&gt;
    p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_one().first&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 再取得してみる&lt;/span&gt;
    p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.array_two().first&lt;/span&gt;;
    mem_dump( p1, num1 );
    mem_dump( p2, num2 );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// linearize()を使えば、レガシーCの様な記載も可能&lt;/span&gt;
    mem_dump( &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.linearize()&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt; );

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;H G F E D
3
2
H G F
E D

H G F E
3
1
H G F
E
H G F E
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#monitor&#34; name=&#34;monitor&#34;&gt;バッファの使用状況を確認する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズ関連&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf( &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; );

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.set_capacity&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt; );                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バッファの許容サイズを7に拡張&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.size()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 今は空なのでサイズ0&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.capacity()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バッファの許容サイズ7&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.empty()&lt;/span&gt; ){                                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// empty()==trueでバッファが空&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;buffer empty.&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt; );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.size()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1つ入れたのでサイズ1&lt;/span&gt;

    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.set_capacity&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; );                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 許容サイズを5に小さくする&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// あと、どれくらい入れれるの？&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.reserve()&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// capacity()-size() の意味&lt;/span&gt;

    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;b&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;c&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;d&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;e&#39;&lt;/span&gt; );

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.full()&lt;/span&gt; ){                               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// full()==trueでバッファが全て埋まっている&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;buffer full.&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
                                                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_e_|_d_|_c_|_b_|_a_|&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.size()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズは5&lt;/span&gt;


    &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.set_capacity&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; );                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バッファの値が埋まっていても容量を3にできる&lt;/span&gt;
                                                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ &lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_e_|_d_|_c_|&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.size()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズは3&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
7
buffer empty.
1
4
buffer full.
e d c b a
5
e d c
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/circular_buffer.html#element-access&#34; name=&#34;element-access&#34;&gt;バッファの先頭/末尾/任意の位置にアクセスする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/circular_buffer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンソール表示&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズ設定&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c_buf( &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータ、begin/end&lt;/span&gt;
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;A&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;B&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt; );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_C_|_B_|_A_|___|___|&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;circular_buffer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c_buf.begin();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭の要素を取得&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf.front()  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;C&#39;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// front()と同じ意味 &#39;C&#39;&lt;/span&gt;

     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾の要素を取得&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c_buf.back()   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;A&#39;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;( c_buf.end() &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; ) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// back()と同じ意味 &#39;A&#39;&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  std::cout &amp;lt;&amp;lt; *c_buf.end()   &amp;lt;&amp;lt; std::endl;       // これはできない&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;D&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;E&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;F&#39;&lt;/span&gt; );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_F_|_E_|_D_|_C_|_B_|&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// かつての先頭だった&#39;C&#39; &lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;G&#39;&lt;/span&gt; );
    c_buf.push_front( &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;H&#39;&lt;/span&gt; );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  ___ ___ ___ ___ ___&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |_H_|_G_|_F_|_E_|_D_|&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( c_buf.begin(), c_buf.end(), disp ); 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl; // &#39;C&#39; は消えたので、イテレータが無効になった&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ランダムアクセス&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;     &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#39;H&#39;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;c_buf.at&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲チェック付きランダムアクセス &#39;H&#39; &lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;C B A 
C
C
A
A

F E D C B 
C

H G F E D 
H
H
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイラ間の差を吸収する -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/config.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/config.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンパイラ間の差を吸収する&lt;/h1&gt;
&lt;p&gt;ここでは、コンパイラ間の差を吸収するための方法を挙げる。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/support-cpp11&#34;&gt;コンパイラが、あるC++11の機能をサポートしているかどうかでコードを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html#deduced-typename&#34;&gt;コンパイラによって、テンプレート中の &lt;code&gt;hoge&amp;lt;T&amp;gt;::type x;&lt;/code&gt; や &lt;code&gt;fuga.f();&lt;/code&gt; がコンパイルエラーになったりならなかったりする問題を回避する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html#nested-template&#34;&gt;メンバ関数テンプレートの呼び出しでコンパイルエラーになる問題を回避する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html#support-cpp11&#34; name=&#34;support-cpp11&#34;&gt;コンパイラが、あるC++11の機能をサポートしているかどうかでコードを変更する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下は可変長テンプレート引数をサポートしているコンパイラならそれを使い、そうでなければ Boost.Preprocessor などでエミュレートする例&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/config.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#if defined BOOST_NO_CXX11_VARIADIC_TEMPLATES&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#  include &amp;lt;boost/preprocessor/repetition/enum_params.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#  include &amp;lt;boost/preprocessor/repetition/enum_binary_params.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#  include &amp;lt;boost/preprocessor/facilities/intercept.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 他色々&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#  if !defined MAX_PARAM_LIMIT&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#    define MAX_PARAM_LIMIT 10&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#  endif&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#if !defined BOOST_NO_CXX11_VARIADIC_TEMPLATES&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; ...T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T ...x) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fの定義&lt;/span&gt;
}

&lt;span style=&#34;color: #BC7A00&#34;&gt;#else&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// fの定義（長くなるので省略）&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;boost/config.hpp&lt;/code&gt; をインクルードすると、コンパイラやバージョンに応じて &lt;code&gt;BOOST_NO_&lt;/code&gt;&lt;em&gt;FEATURE_NAME&lt;/em&gt; が定義される。定義されているマクロ名に対応した機能は、そのコンパイラでは使えない。&lt;/p&gt;
&lt;p&gt;以下はそのマクロ一覧である。C++11の新機能については各々で調べたし。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_ALIGNAS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の&lt;code&gt;alignas&lt;/code&gt;キーワード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_ALLOCATOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11バージョンの&lt;code&gt;std::allocator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_ATOMIC_SP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11のスマートポインタがアトミック操作をサポートしているか&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_ARRAY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/array.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_CHRONO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_CODECVT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_CONDITION_VARIABLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_FORWARD_LIST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;forward_list&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_FUNCTIONAL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11バージョンと互換のある&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_FUTURE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/future.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;future&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_INITIALIZER_LIST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;initializer_list&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ。 変数の初期化を &lt;code&gt;{1, 2, 3}&lt;/code&gt; のような記述で行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_MUTEX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_RANDOM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/random.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_RATIO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_REGEX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_SYSTEM_ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_THREAD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/thread.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_TUPLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/tuple.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_TYPEINDEX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/typeindex.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;typeindex&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_TYPE_TRAITS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_UNORDERED_MAP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_map.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_HDR_UNORDERED_SET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11の標準ライブラリ&lt;a href=&#34;http://cpprefjp.github.io/reference/unordered_set.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_INLINE_NAMESPACES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;inline namespace&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_SMART_PTR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11のスマートポインタ、&lt;code&gt;shared_ptr&lt;/code&gt;と&lt;code&gt;unique_ptr&lt;/code&gt;を提供しているか&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_AUTO_DECLARATIONS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt; による変数の型の自動決定&lt;br /&gt; &lt;code&gt;// x の型は初期化式 expr から自動的に決定する&lt;/code&gt;&lt;br /&gt; &lt;code&gt;auto x = expr;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_AUTO_MULTIDECLARATIONS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt; での宣言で、一度に複数の変数を宣言する&lt;br /&gt; &lt;code&gt;auto x = expr1, y = expr2;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_CHAR16_T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;組み込み型 &lt;code&gt;char16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_CHAR32_T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;組み込み型 &lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_TEMPLATE_ALIASES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template&lt;/code&gt; による別名宣言。&lt;br /&gt; &lt;code&gt;template&amp;lt;typename T&amp;gt; using my_vector = std::vector&amp;lt;T, my_allocator&amp;lt;T&amp;gt; &amp;gt;;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;my_vector&amp;lt;T&amp;gt; v;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_CONSTEXPR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に計算して定数に畳み込むことが可能なことを示す修飾子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_DECLTYPE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boost.Typeof のように式から型を取得する&lt;br /&gt; &lt;code&gt;// x は expr1 の型として宣言され、&lt;/code&gt;&lt;br /&gt; &lt;code&gt;// expr2 で初期化される&lt;/code&gt;&lt;br /&gt;&lt;code&gt;decltype(expr1) x = expr2;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_DECLTYPE_N3276&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N3276仕様の&lt;code&gt;decltype&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_DEFAULTED_FUNCTIONS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ、コピー代入演算子、デストラクタをデフォルト実装で宣言する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_DELETED_FUNCTIONS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の &lt;code&gt;delete&lt;/code&gt; 宣言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_EXPLICIT_CONVERSION_OPERATORS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型変換演算子に対する &lt;code&gt;explicit&lt;/code&gt; 宣言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_EXTERN_TEMPLATE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化をその翻訳単位では行わないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートのテンプレートパラメータにデフォルト引数を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_LAMBDAS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_LOCAL_CLASS_TEMPLATE_PARAMETERS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカルクラスをテンプレートパラメータに指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_LONG_LONG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(unsigned) long long&lt;/code&gt; 型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_NOEXCEPT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;キーワード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_NULLPTR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを示すキーワード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_RANGE_BASED_FOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲&lt;code&gt;for&lt;/code&gt;文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`BOOST_NO_CXX11_RAW_LITERALS&lt;/td&gt;
&lt;td&gt;文字列リテラルの新しい表記法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_RVALUE_REFERENCES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右辺値参照型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_SCOPED_ENUMS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スコープ付きの列挙型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_STATIC_ASSERT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件式によってコンパイルエラーにするための &lt;code&gt;static_assert&lt;/code&gt; 文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_STD_UNORDERD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unordered_set&lt;/code&gt;, &lt;code&gt;unordered_multiset&lt;/code&gt;, &lt;code&gt;unordered_map&lt;/code&gt;, &lt;code&gt;unordered_multimap&lt;/code&gt; の4つのコンテナクラステンプレート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_TRAILING_RESULT_TYPES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を後置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_UNICODE_LITERALS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode 文字・文字列リテラル(&lt;code&gt;u8&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;U&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの呼び出しを初期化子リストと同じ構文で記述する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_USER_DEFINED_LITERALS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザー定義リテラル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_VARIADIC_TEMPLATES&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOOST_NO_CXX11_VARIADIC_MACROS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数マクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html#deduced-typename&#34; name=&#34;deduced-typename&#34;&gt;コンパイラによって、テンプレート中の &lt;code&gt;hoge&amp;lt;T&amp;gt;::type x;&lt;/code&gt; や &lt;code&gt;fuga.f();&lt;/code&gt; がコンパイルエラーになったりならなかったりする問題を回避する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; hoge {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; type;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T x) {
    T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;type x; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (a)&lt;/span&gt;
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; g() {
    hoge x;
    f(x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この部分をコンパイルしようとすると (a) でコンパイルエラーが起きる&lt;/span&gt;
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

関数テンプレートもしくはクラステンプレート内で、上の &lt;code&gt;f&lt;/code&gt; のように内部でテンプレートパラメータの内部で宣言された型名を利用する場合、(a) の箇所では、&lt;code&gt;T::type&lt;/code&gt; が型名であることを示す必要がある。具体的には &lt;code&gt;typename&lt;/code&gt; キーワードを使って、 &lt;code&gt;typename T::type x;&lt;/code&gt; のように記述する。しかし古いコンパイラなどでは、&lt;code&gt;typename&lt;/code&gt; を付けずとも空気を読んで &lt;code&gt;T::type&lt;/code&gt; が型であると判断することで、&lt;code&gt;typename&lt;/code&gt; キーワードそのものをサポートしていない場合がある。次のように記述することで、この問題は回避可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f() {
    BOOST_DEDUCED_TYPENAME T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;type x;
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;BOOST_DEDUCED_TYPENAME&lt;/code&gt; マクロは、普通 &lt;code&gt;typename&lt;/code&gt; になるが、かかる位置での &lt;code&gt;typename&lt;/code&gt; をサポートしていないコンパイラでは空に展開される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/config.html#nested-template&#34; name=&#34;nested-template&#34;&gt;メンバ関数テンプレートの呼び出しでコンパイルエラーになる問題を回避する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上記の &lt;code&gt;typename&lt;/code&gt; と似たような問題で、次のようなコードがコンパイラによって通ったり通らなかったりする：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; hoge {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f() {}
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; fuga {};
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; g(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) {
    x.f&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (a)&lt;/span&gt;
    T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fuga&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; y; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (b)&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; h() {
    hoge x;
    g(x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この関数呼び出しをコンパイルしようとすると (a) や (b) の箇所でコンパイルエラーが起きる&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

(a) は &lt;code&gt;int&lt;/code&gt; で実体化したメンバ関数テンプレートの呼び出しとは認識されず、(b) もメンバクラステンプレートを &lt;code&gt;int&lt;/code&gt; で実体化した型の変数の宣言とは見なされない。次のように記述する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; g(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) {
    x.&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; f&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (a’)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; fuga&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; y; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (b’)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

(a’) では &lt;code&gt;f&lt;/code&gt; の前に &lt;code&gt;template&lt;/code&gt; キーワードを付けて、&lt;code&gt;f&lt;/code&gt; がテンプレートであることを明記している。(b’) も同様に &lt;code&gt;fuga&lt;/code&gt; がテンプレートであると示しているが、同時に &lt;code&gt;T::template fuga&amp;lt;int&amp;gt;&lt;/code&gt; が型であることも示すために &lt;code&gt;typename&lt;/code&gt; も付けている。しかし上の &lt;code&gt;typename&lt;/code&gt; の問題と同様に、この &lt;code&gt;template&lt;/code&gt; キーワードの使い方をサポートしないコンパイラが存在する。これについては &lt;code&gt;BOOST_NESTED_TEMPLATE&lt;/code&gt; マクロを使うことで解決する。次のように使う：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; g(T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) {
    x.BOOST_NESTED_TEMPLATE f&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (a&#39;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;BOOST_NESTED_TEMPLATE fuga&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; y; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (b&#39;)&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

この &lt;code&gt;template&lt;/code&gt; キーワードの使い方をサポートするコンパイラでは &lt;code&gt;template&lt;/code&gt; と展開され、そうでないコンパイラでは空に展開される。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>日付の計算 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/date_time.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/date_time.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;日付の計算&lt;/h1&gt;
&lt;p&gt;日付の計算には、Boost.DateTimeライブラリのGregorianを使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#end-of-month-day&#34;&gt;月末日の取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#date-add-subtract&#34;&gt;日付の加減算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#month-enum&#34;&gt;月を表す&lt;code&gt;enum&lt;/code&gt;値&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#end-of-month-day&#34; name=&#34;end-of-month-day&#34;&gt;月末日の取得&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;月末日を取得するには、&lt;code&gt;boost::gregorian::gregorian_calendar::end_of_month_day()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/date_time/gregorian/gregorian.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; day &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; gregorian_calendar&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end_of_month_day(&lt;span style=&#34;color: #666666&#34;&gt;2011&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; day &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;28
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#date-add-subtract&#34; name=&#34;date-add-subtract&#34;&gt;日付の加減算&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.DateTimeの&lt;code&gt;boost::gregorian::date&lt;/code&gt;型は、&lt;code&gt;operator+()&lt;/code&gt;や&lt;code&gt;operator-()&lt;/code&gt;を使用して、日付の加減算を行うことができる。&lt;/p&gt;
&lt;p&gt;年の加減算には&lt;code&gt;years&lt;/code&gt;型、月の加減算には&lt;code&gt;months&lt;/code&gt;型、日付の加減算には&lt;code&gt;days&lt;/code&gt;型を使用する。&lt;/p&gt;
&lt;p&gt;以下の例では、2011年4月1日に1ヶ月を加算し、その後1日を減算することで、2011年4月の末日を求めている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/date_time/gregorian/gregorian.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gregorian;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; date d1(&lt;span style=&#34;color: #666666&#34;&gt;2011&lt;/span&gt;, Apr, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; date d2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; months(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; days(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; to_simple_string(d2) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2011-Apr-30
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/date_time.html#month-enum&#34; name=&#34;month-enum&#34;&gt;月を表すenum値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Dateの月を表す&lt;code&gt;enum&lt;/code&gt;値は、&lt;code&gt;boost::date_time&lt;/code&gt;名前空間において、以下のように定義されている：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;enum&lt;/code&gt;値&lt;/th&gt;
&lt;th&gt;月&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Jan&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Feb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Mar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Apr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;May&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Jun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Jul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Aug&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Sep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Oct&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Nov&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Dec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>実行時アサート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/dynamic_assert.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/dynamic_assert.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;実行時アサート&lt;/h1&gt;
&lt;p&gt;実行時アサートには、&lt;code&gt;BOOST_ASSERT&lt;/code&gt;マクロ、もしくは&lt;code&gt;BOOST_ASSERT_MSG&lt;/code&gt;マクロを使用する。これらのマクロは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/utility/assert.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;boost/assert.hpp&amp;gt;&lt;/code&gt;&lt;/a&gt;ヘッダで定義される。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#assertion-expression&#34;&gt;式を検証する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#assertion-with-message&#34;&gt;メッセージ付きで式を検証する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#customize-fail-behavior&#34;&gt;検証失敗時の動作をカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#assertion-expression&#34; name=&#34;assertion-expression&#34;&gt;式を検証する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;式を検証するには、&lt;code&gt;BOOST_ASSERT&lt;/code&gt;マクロを使用する。このマクロは引数として条件式をとる。条件式が&lt;code&gt;true&lt;/code&gt;に評価される場合は検証成功となり、&lt;code&gt;false&lt;/code&gt;の場合は検証失敗と見なされる。&lt;/p&gt;
&lt;p&gt;検証失敗時は、プログラムが異常終了する。&lt;/p&gt;
&lt;p&gt;デフォルトでは、&lt;code&gt;NDEBUG&lt;/code&gt;が&lt;code&gt;#define&lt;/code&gt;されていない場合(デバッグモード)のみ検証が行われる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検証に成功するケース&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ASSERT&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検証に失敗するケース&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ASSERT&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

出力例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
Assertion failed!

Program: main.exe
File: main.cpp, Line 9

Expression: 1 != 1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#assertion-with-message&#34; name=&#34;assertion-with-message&#34;&gt;メッセージ付きで式を検証する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;検証失敗時にコンパイルエラーにエラーメッセージを出力するには、&lt;code&gt;BOOST_ASSERT_MSG&lt;/code&gt;マクロを使用する。基本的な使い方は&lt;code&gt;BOOST_ASSERT&lt;/code&gt;と同様で、第2引数にメッセージの文字列を取る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; argv[])
{
    &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ASSERT_MSG&lt;/span&gt;(argc &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;you must specify at least one option&#34;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

また、式を評価する必要が無く、該当箇所を通過した場合に単にデバッグ用途で無条件に落としたい場合、文字列を示すポインタの評価結果は常に真になることを利用して、イディオム的に以下のような書き方もできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; argv[])
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;option 1: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; argv[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ASSERT&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;unknown extra option specified&#34;&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;

これは&lt;code&gt;NDEBUG&lt;/code&gt;が&lt;code&gt;#define&lt;/code&gt;されているビルド（リリースビルド）では暗黙のうちに通過してしまいバグの原因となるので、あくまで簡易的なデバッグ用途に留めるべきである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_assert.html#customize-fail-behavior&#34; name=&#34;customize-fail-behavior&#34;&gt;検証失敗時の動作をカスタマイズする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_ASSERT&lt;/code&gt;での検証失敗時の動作をカスタマイズしたい場合は、以下の方法をとる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/assert.hpp&amp;gt;&lt;/code&gt;ヘッダをインクルードする前に、&lt;code&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/code&gt;を&lt;code&gt;#define&lt;/code&gt;する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost&lt;/code&gt;名前空間に&lt;code&gt;assertion_failed()&lt;/code&gt;関数を定義する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この方法をとることによって、検証失敗時に、自分で定義した&lt;code&gt;assertion_failed()&lt;/code&gt;関数が呼ばれるようになる。この関数には、以下のパラメータが渡される：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列化された式&lt;/li&gt;
&lt;li&gt;関数名(形式は環境依存)&lt;/li&gt;
&lt;li&gt;ファイル名(&lt;code&gt;__FILE__&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;行番号(&lt;code&gt;__LINE__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;assertion_failed&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; expr, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; function, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; file, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; line)
    {
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ログに出力して、アプリケーションを異常終了させる&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream log(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;log.txt&#34;&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;out &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;app);
        log &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Expression : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; expr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Function : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; function &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;File : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Line : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;abort();
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

出力例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
&lt;/code&gt;&lt;/pre&gt;
log.txt：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Expression : 1 == 2
Function : int main()
File : C:\language\cpp\main.cpp
Line : 21
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;BOOST_ASSERT_MSG&lt;/code&gt;の場合は、以下のようにする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/assert.hpp&amp;gt;&lt;/code&gt;ヘッダをインクルードする前に、&lt;code&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/code&gt;を&lt;code&gt;#define&lt;/code&gt;する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost&lt;/code&gt;名前空間に&lt;code&gt;assertion_failed_msg()&lt;/code&gt;関数を定義する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これによって、&lt;code&gt;BOOST_ASSERT_MSG&lt;/code&gt;での検証失敗時に、自分で定義した&lt;code&gt;assertion_failed_msg()&lt;/code&gt;関数が呼ばれるようになる。この関数には、以下のパラメータが渡される：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列化された式&lt;/li&gt;
&lt;li&gt;メッセージ&lt;/li&gt;
&lt;li&gt;関数名(形式は環境依存)&lt;/li&gt;
&lt;li&gt;ファイル名(&lt;code&gt;__FILE__&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;行番号(&lt;code&gt;__LINE__&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define &lt;span style=&#34;color:#ff0000&#34;&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;assertion_failed_msg&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; expr, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; msg, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; function,
                              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; file, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; line)
    {
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ログに出力して、アプリケーションを異常終了させる&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream log(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;log.txt&#34;&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;out &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;app);
        log &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Expression : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; expr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Message : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; msg &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Function : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; function &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;File : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Line : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;abort();
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    BOOST_ASSERT_MSG(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;1 is not 2&#34;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

出力例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.
&lt;/code&gt;&lt;/pre&gt;
log.txt：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Expression : 1 == 2
Message : 1 is not 2
Function : int main()
File : C:\language\cpp\main.cpp
Line : 22
&lt;/code&gt;&lt;/pre&gt;
documented boost version is 1.52.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>サイズを動的に変更できるビット集合 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/dynamic_bitset.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/dynamic_bitset.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;サイズを動的に変更できるビット集合&lt;/h1&gt;
&lt;p&gt;サイズ固定のビット集合である&lt;code&gt;std::bitset&lt;/code&gt; に対して、&lt;code&gt;boost::dynamic_bitset&lt;/code&gt; はサイズを実行時に変更できるビット集合である。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#resize&#34;&gt;サイズを指定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#nth-bit&#34;&gt;ビットの値を設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#count-one&#34;&gt;1の数を数える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#test-bit&#34;&gt;ビットの値を検査する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#string-conversion&#34;&gt;文字列との相互変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#flip&#34;&gt;ビットの値を反転する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#set&#34;&gt;集合演算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#is-subset-of&#34;&gt;2つの集合の包含関係を調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#each-one-bits&#34;&gt;1が立っているインデックスを走査する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#customize-data-size&#34;&gt;データサイズをカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#resize&#34; name=&#34;resize&#34;&gt;サイズを指定する&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;コンストラクタ、もしくはメンバ関数&lt;code&gt;resize()&lt;/code&gt;でビット集合のサイズを指定できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;bs(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズ3のビット集合(デフォルト値は全てのビットが0)&lt;/span&gt;
    assert(bs.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); 
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 000&lt;/span&gt;

    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;resize(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サイズを5に変更&lt;/span&gt;
    assert(bs.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00000&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#nth-bit&#34; name=&#34;nth-bit&#34;&gt;ビットの値を設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンバ関数&lt;code&gt;set&lt;/code&gt;/&lt;code&gt;reset&lt;/code&gt;、&lt;code&gt;[ ]&lt;/code&gt;演算子でビットの値を設定できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00000&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;set(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数setで0ビット目を1にする&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00001&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;set(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// setやresetは*thisを返すので、メソッドチェーン形式で記述可能&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00111&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;set(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;)&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// setの第2引数にはboolを指定可能&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00011&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;set()&lt;/span&gt;;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 引数なしのsetは全てのビットを1にする&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 11111&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;reset(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数resetで0ビット目を0にする&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 11110&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;reset()&lt;/span&gt;;            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 引数なしのresetは全てのビットを0にする&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00000&lt;/span&gt;
    bs[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// []演算子で0ビット目を1にする&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 00001&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#count-one&#34; name=&#34;count-one&#34;&gt;1の数を数える&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンバ関数&lt;code&gt;count()&lt;/code&gt;を使う&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 000&lt;/span&gt;
    assert(bs.&lt;span style=&#34;color:#ff0000&#34;&gt;count()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    bs.set();    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 111&lt;/span&gt;
    assert(bs.&lt;span style=&#34;color:#ff0000&#34;&gt;count()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#test-bit&#34; name=&#34;test-bit&#34;&gt;ビットの値を検査する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;特定のビットが1かを調べるにはメンバ関数&lt;code&gt;test()&lt;/code&gt;もしくは&lt;code&gt;[ ]&lt;/code&gt;演算子を使う。&lt;/p&gt;
&lt;p&gt;1のビットがあるかどうかを調べるにはメンバ関数&lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt;を使う。&lt;/p&gt;
&lt;p&gt;すべてのビットが1かどうかを調べるにはメンバ関数&lt;code&gt;count()&lt;/code&gt;と&lt;code&gt;size()&lt;/code&gt;を組み合わせて使う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// すべてのビットが0か調べる&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 000&lt;/span&gt;
    assert(bs.&lt;span style=&#34;color:#ff0000&#34;&gt;none()&lt;/span&gt;);     

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 特定のビットが1か調べる&lt;/span&gt;
    bs[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 001&lt;/span&gt;
    assert(bs[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);
    assert(bs.&lt;span style=&#34;color:#ff0000&#34;&gt;test(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1のビットがあるか調べる&lt;/span&gt;
    assert(bs.&lt;span style=&#34;color:#ff0000&#34;&gt;any()&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// すべてのビットが1か調べる    &lt;/span&gt;
    bs.set();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 111&lt;/span&gt;
    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;bs.count() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; bs.size()&lt;/span&gt;);   
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#string-conversion&#34; name=&#34;string-conversion&#34;&gt;文字列との相互変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::dynamic_bitset&lt;/code&gt;クラスでは演算子&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;および&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;がオーバーロードされているため、&lt;code&gt;istream&lt;/code&gt;/&lt;code&gt;ostream&lt;/code&gt;を通して文字列との相互変換が可能である。&lt;/p&gt;
&lt;p&gt;文字列からビット集合への変換は、コンストラクタに文字列を渡すことでも生成できる。&lt;/p&gt;
&lt;p&gt;ビット集合から文字列への変換は、&lt;code&gt;boost::to_string()&lt;/code&gt;関数を使用することもできる。&lt;/p&gt;
&lt;p&gt;文字列は&lt;code&gt;&#39;0&#39;&lt;/code&gt;か&lt;code&gt;&#39;1&#39;&lt;/code&gt;のみから構成される必要があり、文字列の右端がインデックス&lt;code&gt;0&lt;/code&gt;に対応することに注意。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::string → dynamic_bitset&lt;/span&gt;
    dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;bs(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;01&#34;&lt;/span&gt;))&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタに文字列を渡す&lt;/span&gt;
    assert(bs[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);
    assert(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;bs[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// dynamic_bitset → std::stirng&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;to_string(bs, str)&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// to_string 関数による変換&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 演算子&amp;lt;&amp;lt;, &amp;gt;&amp;gt; がオーバーロードされているため、boost::lexical_castによる変換も出来る&lt;/span&gt;
    dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;01&#34;&lt;/span&gt;);&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(bs2);&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#flip&#34; name=&#34;flip&#34;&gt;ビットの値を反転する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンバ関数&lt;code&gt;flip()&lt;/code&gt;でビットの値を反転できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 000&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;flip(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;;            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数flipで0ビット目を反転&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 001&lt;/span&gt;
    bs.&lt;span style=&#34;color:#ff0000&#34;&gt;flip()&lt;/span&gt;;             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 引数なしのflipは全てのビットを反転させる&lt;/span&gt;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bs &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 110&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#set&#34; name=&#34;set&#34;&gt;集合演算&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;各種演算子(&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;,　&lt;code&gt;-&lt;/code&gt;)およびその代入版(&lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;)によるビット毎の論理演算により、集合演算ができる。&lt;/p&gt;
&lt;p&gt;ただし、2項演算子の引数のサイズは等しくなければならない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs1(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), bs2(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    bs1.set(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0011&lt;/span&gt;
    bs2.set(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0101&lt;/span&gt;

    &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;bs1&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 1100    ビット毎の否定 = 補集合&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;bs1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; bs2&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0001    ビット毎の論理積 = 積集合&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;bs1 &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; bs2&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0111    ビット毎の論理和 = 和集合&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;bs1 &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; bs2&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0110    ビット毎の排他的論理和 = 対称差&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;bs1 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; bs2&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0010    差集合&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#is-subset-of&#34; name=&#34;is-subset-of&#34;&gt;2つの集合の包含関係を調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ビット集合A, Bがある時、AがBの部分集合（A ⊆ B)かを調べるには、メンバ関数&lt;code&gt;is_subset_of()&lt;/code&gt;を使う。&lt;/p&gt;
&lt;p&gt;同様に、AがBの真部分集合（A ⊂ B）かを調べるには、メンバ関数&lt;code&gt;is_proper_subset_of&lt;/code&gt;を、AとBが交差する（すなわち、AとBの積集合が空集合でない）かを調べるには、メンバ関数&lt;code&gt;intersects()&lt;/code&gt;をそれぞれ使う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; A(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), B(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), C(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    A.set(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0001&lt;/span&gt;
    B.set(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 0011&lt;/span&gt;
    C.set(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -&amp;gt; 1100&lt;/span&gt;

    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;A.is_subset_of(A)&lt;/span&gt;);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AはA自身の部分集合&lt;/span&gt;
    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;A.is_proper_subset_of(A)&lt;/span&gt;);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AはA自身の真部分集合ではない&lt;/span&gt;
    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;A.is_proper_subset_of(B)&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AはBの真部分集合&lt;/span&gt;
    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;A.intersects(B)&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AはBと交差する&lt;/span&gt;
    assert(&lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;B.intersects(C)&lt;/span&gt;);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// BはCと交差しない    &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#each-one-bits&#34; name=&#34;each-one-bits&#34;&gt;1が立っているインデックスを走査する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンバ関数&lt;code&gt;find_first()&lt;/code&gt;と&lt;code&gt;find_next()&lt;/code&gt;を組み合わせて、&lt;code&gt;1&lt;/code&gt;が立っているインデックスを走査できる。 &lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;);
    bs.set(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;).set(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1の立っているインデックスを走査&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;size_type pos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.find_first();&lt;/span&gt;
        &lt;span style=&#34;color:#ff0000&#34;&gt;pos &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; bs.npos;&lt;/span&gt;
        &lt;span style=&#34;color:#ff0000&#34;&gt;pos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.find_next(pos)&lt;/span&gt;)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pos &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
} 
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;10
20
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_bitset.html#customize-data-size&#34; name=&#34;customize-data-size&#34;&gt;データサイズをカスタマイズする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::dynamic_bitset&lt;/code&gt;は、第1テンプレート引数の&lt;code&gt;Block&lt;/code&gt;型の&lt;code&gt;std::vector&lt;/code&gt;でビット列を管理する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Block&lt;/code&gt;のデフォルト値は&lt;code&gt;unsigned long&lt;/code&gt;であるが、別の型を指定することでデータサイズをカスタマイズできる。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;Block&lt;/code&gt;は符号なし整数型でなければならない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/dynamic_bitset.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_bitset;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトはunsigned long&lt;/span&gt;
static_assert(dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;bits_per_block &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;*8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;);
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;unsigned short&lt;/span&gt;に変更&lt;/span&gt;
static_assert(dynamic_bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;unsigned short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;bits_per_block &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#ff0000&#34;&gt;unsigned short&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;*8&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;);  
&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的な正規表現 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/dynamic_regex.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/dynamic_regex.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;動的な正規表現&lt;/h1&gt;
&lt;p&gt;動的な正規表現には、Boost Xpressive Libraryを使用する。&lt;/p&gt;
&lt;p&gt;日本語リファレンス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://alpha.sourceforge.jp/devel/boost.regex_ja.pdf&#34; target=&#34;_blank&#34;&gt;http://alpha.sourceforge.jp/devel/boost.regex_ja.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静的な正規表現は以下のページを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html&#34;&gt;静的な正規表現&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-match&#34;&gt;文字列全体が正規表現にマッチするか調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-search&#34;&gt;文字列が正規表現にマッチする部分文字列を含むか調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-replace&#34;&gt;正規表現にマッチした部分文字列をすべて置換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[正規表現の記述時に、エスケープシーケンスを無視する]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-match&#34; name=&#34;regex-match&#34;&gt;文字列全体が正規表現にマッチするか調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列全体が正規表現にマッチするか調べるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_match.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_match()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、マッチに成功したら&lt;code&gt;true&lt;/code&gt;を返し、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。この関数が成功するのは、文字列全体の先頭から終端までが正規表現にマッチする場合である。&lt;/p&gt;
&lt;p&gt;この関数に&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.quick_start.know_your_iterator_type&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::smatch&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照を与えると、見つかったマーク済み部分式が書き込まれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string hello &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello World!&#34;&lt;/span&gt;;

    sregex rex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sregex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;compile(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)!&#34;&lt;/span&gt;);
    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;regex_match&lt;/span&gt;(hello, what, rex)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1 番目の捕捉&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 番目の捕捉&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello World!
Hello
World
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-search&#34; name=&#34;regex-search&#34;&gt;文字列が正規表現にマッチする部分文字列を含むか調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列が正規表現にマッチする部分文字列を含むか調べるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_search.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_search()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、マッチする部分文字列が見つかったら&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。対象となる文字列の次の引数として&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.quick_start.know_your_iterator_type&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::smatch&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照を与えると、見つかったマーク済み部分式が書き込まれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    sregex rex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sregex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;compile(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{4})/(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{1,2})/(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{1,2})&#34;&lt;/span&gt;);
    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (regex_search(str, what, rex)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 月&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 日&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1973/5/30
1973
5
30
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#regex-replace&#34; name=&#34;regex-replace&#34;&gt;正規表現にマッチした部分文字列をすべて置換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;正規表現にマッチした部分文字列をすべて置換するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_replace.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_replace()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、以下の引数をとる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： 対象文字列&lt;/li&gt;
&lt;li&gt;第2引数 ： 正規表現&lt;/li&gt;
&lt;li&gt;第3引数 ： 置き換え規則&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戻り値として、置き換え後の新たな文字列が返される。&lt;/p&gt;
&lt;p&gt;ここでは、日付にマッチする正規表現を書き、マッチした部分を&lt;code&gt;&amp;lt;date&amp;gt;&lt;/code&gt;タグで囲む、ということをしている。&lt;code&gt;&#34;$&amp;amp;&#34;&lt;/code&gt;はマッチした全体の部分文字列を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    sregex date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sregex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;compile(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{4}/&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{1,2}/&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d{1,2}&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string format &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&amp;lt;date&amp;gt;$&amp;amp;&amp;lt;/date&amp;gt;&#34;&lt;/span&gt;;

    str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_replace(str, date, format);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;私は&amp;lt;date&amp;gt;1973/5/30&amp;lt;/date&amp;gt;の午前7時に生まれた。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_regex.html#ignore-escape-sequence&#34; name=&#34;ignore-escape-sequence&#34;&gt;正規表現の記述時に、エスケープシーケンスを無視する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通常の文字列リテラルで正規表現を記述する場合、&lt;code&gt;\&lt;/code&gt;がエスケープシーケンスであることを示すため、&lt;code&gt;\d&lt;/code&gt;を&lt;code&gt;&#34;\\d&#34;&lt;/code&gt;と書かなければならない。この問題を回避するためには、生文字列リテラル(Raw String Literals)を使用する。この機能は、C++11以降で使用できる。&lt;/p&gt;
&lt;p&gt;生文字列リテラルは、&lt;code&gt;R&lt;/code&gt;プレフィックスを付けた文字列リテラルで、丸カッコで囲まれた範囲のエスケープシーケンスを無視する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    sregex rex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; sregex&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;compile(R&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;((\d{4})/(\d{1,2})/(\d{1,2}))&#34;&lt;/span&gt;);
    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (regex_search(str, what, rex)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 月&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 日&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1973/5/30
1973
5
30
&lt;/code&gt;&lt;/pre&gt;
documented boost version is 1.52.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>動的型 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/dynamic_type.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/dynamic_type.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;動的型&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#assign&#34;&gt;あらゆる型の値を代入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#extract-value&#34;&gt;値を取り出す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#store-to-container&#34;&gt;あらゆる型の値をコンテナに入れる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#assign&#34; name=&#34;assign&#34;&gt;あらゆる型の値を代入する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::any&lt;/code&gt;型には、あらゆる型の値を格納することができる。&lt;/p&gt;
&lt;p&gt;格納されている型のチェックには、&lt;code&gt;boost::any::type()&lt;/code&gt;メンバ関数を使用し、&lt;a href=&#34;http://cpprefjp.github.io/reference/typeinfo/type_info.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::type_info&lt;/code&gt;&lt;/a&gt;型で判定することができる。&lt;/p&gt;
&lt;p&gt;格納されている値を元の型に変換するには、&lt;code&gt;boost::any_cast()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/any.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int値を格納&lt;/span&gt;
    x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::string値を格納&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 格納されている型をチェック&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x.type() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string)) {
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 元の型に変換&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not string&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#extract-value&#34; name=&#34;extract-value&#34;&gt;値を取り出す&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::any&lt;/code&gt;に代入した値を取り出すには、&lt;code&gt;boost::any_cast()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数の使用方法は、コピーして取り出す、値を参照する、値へのポインタを取得する、の3つがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法1. 値をコピーして取り出す。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any a;
&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
T x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(a);
&lt;/pre&gt;&lt;/div&gt;

この例のように、テンプレート引数に取り出す型&lt;code&gt;T&lt;/code&gt;を指定し、引数として&lt;code&gt;boost::any&lt;/code&gt;オブジェクトへの参照を渡すことで、&lt;code&gt;boost::any&lt;/code&gt;型に格納されている型Tのオブジェクトを、コピーで取り出すことができる。&lt;/p&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;のオブジェクトが格納されていない場合には、&lt;code&gt;boost::bad_any_cast&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法2. 値を参照する。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any a;
&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(a);
&lt;/pre&gt;&lt;/div&gt;

この例のように、テンプレート引数に&lt;code&gt;T&amp;amp;&lt;/code&gt;を指定した場合、&lt;code&gt;boost::any&lt;/code&gt;型に格納されている型Tのオブジェクトを参照することができる。&lt;/p&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;のオブジェクトが格納されていない場合には、&lt;code&gt;boost::bad_any_cast&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法3. 値へのポインタを取得する。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any a;
T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;a);
&lt;/pre&gt;&lt;/div&gt;

この例のように、テンプレート引数に型&lt;code&gt;T&lt;/code&gt;を指定し、引数として&lt;code&gt;boost::any&lt;/code&gt;オブジェクトへのポインタを渡すことで、&lt;code&gt;boost::any&lt;/code&gt;型に格納されている型Tのオブジェクトへのポインタを取得できる。&lt;/p&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;のオブジェクトが格納されていない場合には、ヌルポインタが返される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/dynamic_type.html#store-to-container&#34; name=&#34;store-to-container&#34;&gt;あらゆる型の値をコンテナに入れる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::vector&amp;lt;boost::any&amp;gt;&lt;/code&gt;のようにすれば、あらゆる型の値をコンテナに入れることができる。&lt;/p&gt;
&lt;p&gt;このようなコンテナは、ヘテロなコンテナ(heterogeneous containers)と呼ばれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/any.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    v.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;));
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;);

    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, v) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x.type() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x.type() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string)) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;string : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x.type() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;any_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;unknown type&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}

&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実行結果：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ファイル／ディレクトリ操作 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/filesystem.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/filesystem.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ファイル／ディレクトリ操作&lt;/h1&gt;
&lt;p&gt;ファイル／ディレクトリ操作には、&lt;a href=&#34;http://www.boost.org/libs/filesystem/doc/index.htm&#34; target=&#34;_blank&#34;&gt;Boost Filesystem Library&lt;/a&gt;を使用する。Boost Filesystem Libraryは、多くのプラットフォーム、コンパイラで動作する汎用的なファイル／ディレクトリ操作のライブラリである。このライブラリはビルドを必要する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#error-handling&#34;&gt;エラーハンドリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#copy-file&#34;&gt;ファイルをコピーする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#remove-file&#34;&gt;ファイルの削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#rename&#34;&gt;ファイルを移動する／ファイル名を変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#exists&#34;&gt;ファイルが存在するかを調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#file-size&#34;&gt;ファイルサイズを取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#last-write-time&#34;&gt;ファイルの最終更新日時を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#create-directory&#34;&gt;ディレクトリを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#enumerate-file&#34;&gt;ディレクトリ内のファイルを列挙する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#recursive-enumerate-file&#34;&gt;ディレクトリ内の全てのファイルを再帰的に列挙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#error-handling&#34; name=&#34;error-handling&#34;&gt;エラーハンドリング&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost Filesystem Libraryのエラーハンドリングは、例外を投げるバージョン、エラーを参照で返すバージョンの2種類が存在する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例外バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;何も指定しなければ、Boost Filesystem Libraryの関数でエラーが出た場合には&lt;code&gt;boost::filesystem::filesystem_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;
try {
    fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;foo();
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;エラー発生！ : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;エラーを参照で返すバージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boost Filesystem Libraryの最後の引数として、&lt;code&gt;boost::system::error_code&lt;/code&gt;の変数を渡せば、例外ではなく渡したエラー用変数にエラー情報が格納される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;foo(error);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;エラー発生！ : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#copy-file&#34; name=&#34;copy-file&#34;&gt;ファイルをコピーする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルをコピーするには、&lt;code&gt;boost::filesystem::copy_file()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数はコピー元のパス&lt;/li&gt;
&lt;li&gt;第2引数はコピー先のパス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コピーに失敗した場合は例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー元&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path dest(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir2/a.txt&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー先&lt;/span&gt;

    try {
        fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_file(path, dest);
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

上書きコピーをする場合は、&lt;code&gt;copy_file()&lt;/code&gt;関数に、&lt;code&gt;boost::filesystem::copy_option::overwrite_if_exists&lt;/code&gt;オプションを指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path dest(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir2/a.txt&#34;&lt;/span&gt;);

    try {
        fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_file(path, dest, fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;copy_option&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;overwrite_if_exists);
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#remove-file&#34; name=&#34;remove-file&#34;&gt;ファイルを削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルを削除するには、&lt;code&gt;boost::filesystem::remove()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);

    try {
        fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;remove(path);
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#rename&#34; name=&#34;rename&#34;&gt;ファイルを移動する／ファイル名を変更する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルの移動、ファイル名の変更には、&lt;code&gt;boost::filesystem::rename()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数は、元となるファイルのパス。&lt;/li&gt;
&lt;li&gt;第2引数は、移動先のファイルパス、もしくは新たなファイル名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path dest(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir2/b.txt&#34;&lt;/span&gt;);

    try {
        fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rename(path, dest);
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#exists&#34; name=&#34;exists&#34;&gt;ファイルが存在するかを調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルが存在するか調べるには、&lt;code&gt;boost::filesystem::exists()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、ファイルが存在する場合は&lt;code&gt;true&lt;/code&gt;を返し、存在しない場合は&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;ファイルのステータス取得に失敗した場合はエラーを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exists(path, error);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ファイルがない&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ファイルがあった&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#file-size&#34; name=&#34;file-size&#34;&gt;ファイルサイズを取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルサイズを取得するには、&lt;code&gt;boost::filesystem::file_size()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);

    try {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uintmax_t&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;file_size(path);

        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ファイルサイズ: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ファイルサイズ: 5107200
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#last-write-time&#34; name=&#34;last-write-time&#34;&gt;ファイルの最終更新日時を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ファイルの最終更新日時を取得するには、&lt;code&gt;boost::filesystem::last_write_time()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は戻り値として、&lt;code&gt;std::time_t&lt;/code&gt;型として日時を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/date_time/posix_time/posix_time.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    try {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/a.txt&#34;&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;time_t&lt;/span&gt; last_update &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;last_write_time(path);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptime time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;from_time_t&lt;/span&gt;(last_update);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; time &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;エラー発生！ : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ex.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2011-Mar-30 05:56:11
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#create-directory&#34; name=&#34;create-directory&#34;&gt;ディレクトリを作成する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ディレクトリを作成するには、&lt;code&gt;boost::filesystem::create_directory()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数として、ディレクトリのパスを指定する。&lt;/p&gt;
&lt;p&gt;ネストしたディレクトリを一度に作ろうとした場合はエラーとなる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir&#34;&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;create_directory(path, error);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ディレクトリの作成に失敗&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

ネストしたディレクトリを含めて一度に作成するには、&lt;code&gt;boost::filesystem::create_directories()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1/dir2&#34;&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;create_directories(path, error);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;||&lt;/span&gt; error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ディレクトリの作成に失敗&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#enumerate-file&#34; name=&#34;enumerate-file&#34;&gt;ディレクトリ内のファイルを列挙する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ディレクトリ内のファイルを列挙するには、&lt;code&gt;boost::filesystem::directory_iterator&lt;/code&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;dir1&#34;&lt;/span&gt;);

    BOOST_FOREACH(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directory_iterator(path),
                                                    fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directory_iterator())) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_directory(p))
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.filename() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&#34;a.txt&#34;
&#34;b.png&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/filesystem.html#recursive-enumerate-file&#34; name=&#34;recursive-enumerate-file&#34;&gt;ディレクトリ内の全てのファイルを再帰的に列挙する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ディレクトリ内の全てのファイルを再帰的に列挙するには、&lt;code&gt;boost::filesystem::recursive_directory_iterator&lt;/code&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/filesystem.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D:/boost_1_49_0/boost/filesystem&#34;&lt;/span&gt;);

    BOOST_FOREACH(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_directory_iterator(path),
                                                    fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;recursive_directory_iterator())) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;fs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_directory(p))
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&#34;D:/boost_1_49_0/boost/filesystem\config.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\convenience.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\detail\utf8_codecvt_facet.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\exception.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\fstream.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\operations.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\path.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\config.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\convenience.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\exception.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\fstream.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\operations.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v2\path.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\config.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\convenience.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\exception.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\fstream.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\operations.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\path.hpp&#34;
&#34;D:/boost_1_49_0/boost/filesystem\v3\path_traits.hpp&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>有限状態マシン -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/finite_state_machine.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/finite_state_machine.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;有限状態マシン&lt;/h1&gt;
&lt;p&gt;有限状態マシン(finite state machine)を扱うライブラリとしてBoost.StatechartとBoost.MSM (Meta State Machine)のふたつが存在する。&lt;/p&gt;
&lt;p&gt;ここではBoost.MSMの利用方法を紹介する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#define-state-machine&#34;&gt;有限状態マシンの定義と利用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#state-event&#34;&gt;状態の開始と終了のタイミングで任意の処理を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#change-state-event&#34;&gt;状態遷移イベントを受け取ったタイミングで任意の処理を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#guard&#34;&gt;状態遷移を拒否する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;define-state-machine&#34;&gt;有限状態マシンの定義と利用&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有限状態マシンを利用するために、状態・イベント・有限状態マシンをそれぞれ定義する必要がある。&lt;/p&gt;
&lt;p&gt;状態遷移は有限状態マシンの中にテーブル状にして記述する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/front/&lt;span style=&#34;color:#ff0000&#34;&gt;state_machine_def&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/back/state_machine.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;front;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態の定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state1 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt; {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state2 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt; {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state3 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt; {};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イベントの定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event1 {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event2 {};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 有限状態マシンの定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;state_machine_def&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態遷移テーブル&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; transition_table &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       source  |   event  |  target&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state1, my_event1, my_state2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        , &lt;span style=&#34;color:#ff0000&#34;&gt;_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event1, my_state1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        , &lt;span style=&#34;color:#ff0000&#34;&gt;_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event2, my_state3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期状態&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; my_state1 &lt;span style=&#34;color:#ff0000&#34;&gt;initial_state&lt;/span&gt;;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;back&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;state_machine&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_machine;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    my_machine m;
    m.&lt;span style=&#34;color:#ff0000&#34;&gt;start&lt;/span&gt;();                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1&lt;/span&gt;
    m.&lt;span style=&#34;color:#ff0000&#34;&gt;process_event&lt;/span&gt;( my_event1() );  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 -&amp;gt; my_state2&lt;/span&gt;
    m.&lt;span style=&#34;color:#ff0000&#34;&gt;process_event&lt;/span&gt;( my_event2() );  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state2 -&amp;gt; my_state3&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#state-event&#34; name=&#34;state-event&#34;&gt;状態の開始と終了のタイミングで任意の処理を行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;状態クラスに &lt;code&gt;on_entry()&lt;/code&gt;, &lt;code&gt;on_exit()&lt;/code&gt; メンバ関数を定義すると、それぞれ状態の開始と終了時に、自動的に呼ばれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/front/state_machine_def.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/back/state_machine.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;front;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state1 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 状態が終わるときに呼ばれる。&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;event_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;on_exit&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;event_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e, &lt;span style=&#34;color: #B00040&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; machine )
    {
       std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;exit: my_state1&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}; 

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state2 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state2 状態が始まるときに呼ばれる。&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;event_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;on_entry&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;event_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e, &lt;span style=&#34;color: #B00040&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; machine )
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;entry: my_state2&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event1 {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_machine_def&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; transition_table &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; _row&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state1, my_event1, my_state2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; my_state1 initial_state; 
};


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;state_machine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_machine; 


&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    my_machine m; 
    m.start();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 &lt;/span&gt;
    m.process_event( my_event1() ); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 -&amp;gt; my_state2 &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;exit: my_state1
entry: my_state2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#change-state-event&#34; name=&#34;change-state-event&#34;&gt;状態遷移イベントを受け取ったタイミングで任意の処理を行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有限状態マシンがイベントを受け取ったとき、任意の処理を実行できる。&lt;/p&gt;
&lt;p&gt;状態遷移テーブルには &lt;code&gt;_row&lt;/code&gt; のかわりに &lt;code&gt;a_row&lt;/code&gt; を使う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/front/state_machine_def.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/back/state_machine.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;front;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state1 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state2 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state3 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event1 {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event2 {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_machine_def&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;on_event1&lt;/span&gt;( my_event1 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ev ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;on_event1&lt;/span&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;on_event2&lt;/span&gt;( my_event2 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ev ) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;on_event2&lt;/span&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態遷移テーブル &lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; transition_table &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector 
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// source | event | target | action &lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;a_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state1, my_event1, my_state2, &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;my_machine_&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_event1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
        ,  _row&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event1, my_state1                          &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
        , &lt;span style=&#34;color:#ff0000&#34;&gt;a_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event2, my_state3, &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;my_machine_&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_event2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; 
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {}; 

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; my_state1 initial_state; 
}; 


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;state_machine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_machine; 


&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() 
{ 
    my_machine m; 

    m.start();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 &lt;/span&gt;
    m.process_event( my_event1() ); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 -&amp;gt; my_state2 ( &lt;span style=&#34;color:#ff0000&#34;&gt;on_event1&lt;/span&gt; ) &lt;/span&gt;
    m.process_event( my_event2() ); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state2 -&amp;gt; my_state3 ( &lt;span style=&#34;color:#ff0000&#34;&gt;on_event2&lt;/span&gt; ) &lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;on_event1
on_event2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/finite_state_machine.html#guard&#34; name=&#34;guard&#34;&gt;状態遷移を拒否する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有限状態マシンがイベントを受け取ったとき、実行時に状態遷移を拒否することができる。&lt;/p&gt;
&lt;p&gt;状態遷移テーブルには &lt;code&gt;_row&lt;/code&gt; の代わりに &lt;code&gt;g_row&lt;/code&gt; を使う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;g_row&lt;/code&gt; に指定したメンバ関数が &lt;code&gt;false&lt;/code&gt; を返すとき、状態遷移は拒否される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/front/state_machine_def.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/msm/back/state_machine.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;front;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態の定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state1 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state2 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;event_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_entry( &lt;span style=&#34;color: #B00040&#34;&gt;event_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e, &lt;span style=&#34;color: #B00040&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; machine )
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;entry: my_state2&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_state3 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;event_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_entry( &lt;span style=&#34;color: #B00040&#34;&gt;event_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e, &lt;span style=&#34;color: #B00040&#34;&gt;fsm_t&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; machine )
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;entry: my_state3&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event1 {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_event2 {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; state_machine_def&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;guard_1&lt;/span&gt;( my_event1 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ev ) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;; }
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;guard_2&lt;/span&gt;( my_event2 &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ev ) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;; }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 状態遷移テーブル&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; transition_table &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// source | event | target | guard&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;g_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state1, my_event1, my_state2, &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;my_machine_&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;guard_1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        ,  _row&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event1, my_state1                        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        , &lt;span style=&#34;color:#ff0000&#34;&gt;g_row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_state2, my_event2, my_state3, &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;my_machine_&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;guard_2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {};

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; my_state1 initial_state;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;msm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;state_machine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; my_machine_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_machine;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    my_machine m;

    m.start();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1&lt;/span&gt;
    m.process_event( my_event1() ); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_state1 -&amp;gt; my_state2&lt;/span&gt;
    m.process_event( my_event2() ); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 拒否。&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;entry: my_state2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for each文 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/foreach.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/foreach.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;for each文&lt;/h1&gt;
&lt;p&gt;Boost Foreach Libraryは、C++においてシーケンスをループするためのfor each文をライブラリで提供する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#boost-foreach-macro&#34;&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#reference&#34;&gt;要素を参照する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-container&#34;&gt;標準コンテナに対して使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-map&#34;&gt;&lt;code&gt;std::map&lt;/code&gt;に対して使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#reverse-iteration&#34;&gt;逆順にループする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-multi-array&#34;&gt;配列に対して使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#difference-cpp11-range-for&#34;&gt;C++11 範囲&lt;code&gt;for&lt;/code&gt;文との違い&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#boost-foreach-macro&#34; name=&#34;boost-foreach-macro&#34;&gt;BOOST_FOREACHマクロ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;for each文には、&lt;code&gt;BOOST_FOREACH&lt;/code&gt;というマクロを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;を使用することで、シーケンスの各要素が順番にループ変数に格納され、処理される。&lt;/p&gt;
&lt;p&gt;このマクロを使用するには、&lt;code&gt;&amp;lt;boost/foreach.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, ar) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#reference&#34; name=&#34;reference&#34;&gt;要素を参照する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロは、シーケンスの各要素を参照し、書き換えることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ar[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, ar) {
        &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;x; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素を書き換える&lt;/span&gt;
    }

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, ar) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
2
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-container&#34; name=&#34;apply-container&#34;&gt;標準コンテナに対して使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロは、組み込み配列だけではなく、&lt;code&gt;std::vector&lt;/code&gt;や&lt;code&gt;std::list&lt;/code&gt;、&lt;code&gt;std::map&lt;/code&gt;といった標準ライブラリのコンテナを処理することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, v) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::vectorをループする&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-map&#34; name=&#34;apply-map&#34;&gt;std::mapに対して使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロで&lt;code&gt;std::map&lt;/code&gt;を処理するには、少し工夫が必要になる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロの第1引数には、&lt;code&gt;std::map&lt;/code&gt;の要素型である&lt;code&gt;std::pair&lt;/code&gt;を直接書きたいところではあるが、言語仕様の制限により、マクロの引数の中でカンマを使用することができない。&lt;/p&gt;
&lt;p&gt;そこで、要素型は事前に&lt;code&gt;typedef&lt;/code&gt;しておく必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m;
    m[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a&#34;&lt;/span&gt;;
    m[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;b&#34;&lt;/span&gt;;
    m[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;const_reference type;
    BOOST_FOREACH (type x, m) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1,b
3,a
4,c
&lt;/code&gt;&lt;/pre&gt;
しかし多くの場合、&lt;code&gt;std::map&lt;/code&gt;をループする際には、キーか値、どちらかがとれれば十分である。&lt;/p&gt;
&lt;p&gt;その場合は、Boost Range Libraryの&lt;code&gt;boost::adaptors::map_keys&lt;/code&gt;を使用してキーのみを抽出、&lt;code&gt;boost::adaptors::map_values&lt;/code&gt;を使用して値のみを抽出できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/map.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m;
    m[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a&#34;&lt;/span&gt;;
    m[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;b&#34;&lt;/span&gt;;
    m[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キーのみを抽出&lt;/span&gt;
    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; key, m &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map_keys) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; key &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値のみを抽出&lt;/span&gt;
    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, m &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map_values) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 3 4 
b a c 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#reverse-iteration&#34; name=&#34;reverse-iteration&#34;&gt;逆順にループする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;逆順にループするには、&lt;code&gt;BOOST_REVERSE_FOREACH&lt;/code&gt;マクロを使用するか、もしくはシーケンスに対してBoost Range Libraryの&lt;code&gt;boost::adaptors::reversed&lt;/code&gt;を適用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_REVERSE_FOREACH&lt;/code&gt;マクロを使用する場合：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    BOOST_REVERSE_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, v) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
1
3
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;boost::adaptors::reversed&lt;/code&gt;を使用する場合：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/reversed.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reversed) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
1
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#apply-multi-array&#34; name=&#34;apply-multi-array&#34;&gt;配列の配列に対して使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多次元配列のような「シーケンスのシーケンス」に対しては、&lt;code&gt;BOOST_FOREACH&lt;/code&gt;を重ねて使用することで対処できる。&lt;/p&gt;
&lt;p&gt;言語組込の配列を使用する場合：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; int_a2[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; int_a2 a[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
    };

    BOOST_FOREACH(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; int_a2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, a)
    {
        BOOST_FOREACH(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y, x)
        {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
        }
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

「配列への参照型」の記法は直感的でないため、&lt;code&gt;typedef&lt;/code&gt;を用いている。&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2
3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;std::vector&lt;/code&gt;を使用する場合：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    v.push_back(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));

    BOOST_FOREACH(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, v)
    {
        BOOST_FOREACH(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y, x)
        {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;;
        }
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 10
2 20
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/foreach.html#difference-cpp11-range-for&#34; name=&#34;difference-cpp11-range-for&#34;&gt;C++11 範囲for文との違い&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++11から、&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロ相当の言語機能である「範囲&lt;code&gt;for&lt;/code&gt;文(range-based for statement)」が導入された。この2つには、大きく以下の差異がある：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロは、イテレータの組(&lt;code&gt;std::pair&amp;lt;begin-iter, end-iter&amp;gt;&lt;/code&gt;)をサポートしている。&lt;/li&gt;
&lt;li&gt;範囲&lt;code&gt;for&lt;/code&gt;文は、要素の変数を、範囲&lt;code&gt;for&lt;/code&gt;文で定義しなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下に、その詳細を記載する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. イテレータの組&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロは、イテレータの組をループ対象にできる。&lt;/p&gt;
&lt;p&gt;C++11 範囲&lt;code&gt;for&lt;/code&gt;文は、ループ対象の型が&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数、もしくは&lt;code&gt;begin()&lt;/code&gt;/end()非メンバ関数を持っている必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// pairのfirstを先頭イテレータ、secondを終端イテレータと見なす&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; range &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(v.cbegin(), v.cend());

    BOOST_FOREACH (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, range) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
1
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 範囲&lt;code&gt;for&lt;/code&gt;文は、要素の変数を、範囲&lt;code&gt;for&lt;/code&gt;文で定義しなければならない。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;範囲&lt;code&gt;for&lt;/code&gt;文の構文規則は、以下のようになっている：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;for ( for-range-declaration : expression ) statement
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;for-range-declaration&lt;/code&gt;の部分が、要素の変数宣言を要求している。そのため、以下のようなコードは書けない：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンパイルエラー：変数xは範囲for文で定義しなければならない&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正しいコード：&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v) {}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;BOOST_FOREACH&lt;/code&gt;マクロには、このような制限はないため、定義済みの変数を要素として使用できる。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列フォーマット -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/format.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/format.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;文字列フォーマット&lt;/h1&gt;
&lt;p&gt;C言語では、&lt;code&gt;sprintf&lt;/code&gt;を使用して&lt;code&gt;char&lt;/code&gt;配列としての文字列をフォーマット設定することができたが、C++において、&lt;code&gt;std::string&lt;/code&gt;に対する文字列フォーマット機能は、C++14時点で標準ライブラリとしては提供されていない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/libs/format/&#34; target=&#34;_blank&#34;&gt;Boost Format Library&lt;/a&gt;は、&lt;code&gt;std::string&lt;/code&gt;の文字列フォーマット、およびストリームへのフォーマット出力の機能を提供するライブラリである。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#printf-like-format&#34;&gt;&lt;code&gt;printf&lt;/code&gt;風に書式を設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#make-formatted-string&#34;&gt;フォーマット設定された&lt;code&gt;std::string&lt;/code&gt;を作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Formatの基本的な使い方は、&lt;code&gt;boost::format()&lt;/code&gt;に書式文字列を設定し、&lt;code&gt;operator%()&lt;/code&gt;を使用して各プレースホルダーを置き換える値を可変引数として設定する、というものである。&lt;/p&gt;
&lt;p&gt;以下は、フォーマット指定した文字列を標準出力に出力している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/format.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello 3
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;printf()&lt;/code&gt;のフォーマットと違うところは、&lt;code&gt;&#34;%d&#34;&lt;/code&gt;や&lt;code&gt;&#34;%s&#34;&lt;/code&gt;といった型指定が必ずしも必要ないということだ。&lt;/p&gt;
&lt;p&gt;Boost.Formatでは、型指定の代わりに、&lt;code&gt;&#34;%1%&#34;&lt;/code&gt;のようにして引数の番号を指定できる。これによって、同じ引数を何度も使用することができ、順番も好きに入れ替えることができるのである。&lt;/p&gt;
&lt;p&gt;この場合、&lt;code&gt;&#34;%1%&#34;&lt;/code&gt;が&lt;code&gt;3&lt;/code&gt;に置き換えられ、&lt;code&gt;&#34;%2%&#34;&lt;/code&gt;が&#34;&#34;Hello&#34;&#34;に置き換えられて標準出力に出力される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#printf-like-format&#34; name=&#34;printf-like-format&#34;&gt;&lt;code&gt;printf&lt;/code&gt;風に書式を設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Formatでは、&lt;code&gt;printf()&lt;/code&gt;風の書式設定もサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/format.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%d %s&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;)
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3 Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::format&lt;/code&gt;には、&lt;code&gt;printf()&lt;/code&gt;関数がサポートしている&lt;code&gt;&#34;%d&#34;&lt;/code&gt;や&lt;code&gt;&#34;%s&#34;&lt;/code&gt;などの書式設定が可能である。&lt;code&gt;&#34;%d&#34;&lt;/code&gt;は整数型に対応し、&lt;code&gt;&#34;%s&#34;&lt;/code&gt;は文字列型に対応している。&lt;/p&gt;
&lt;p&gt;この場合、&lt;code&gt;&#34;%d&#34;&lt;/code&gt;が&lt;code&gt;3&lt;/code&gt;に置き換えられ、&lt;code&gt;&#34;%s&#34;&lt;/code&gt;が&lt;code&gt;&#34;Hello&#34;&lt;/code&gt;に置き換えられて標準出力に出力される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/format.html#make-formatted-string&#34; name=&#34;make-formatted-string&#34;&gt;フォーマット設定されたstd::stringを作成する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Formatで書式設定された&lt;code&gt;std::string&lt;/code&gt;を作成するには、&lt;code&gt;boost::format&lt;/code&gt;クラスの&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/format.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;format(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;%2% %1%&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;)).str();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello 3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数ポインタと関数オブジェクトを統一的に扱う -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/function.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/function.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;関数ポインタと関数オブジェクトを統一的に扱う&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/function.html&#34; target=&#34;_blank&#34;&gt;Boost Function Library&lt;/a&gt;の&lt;code&gt;boost::function&lt;/code&gt;クラスは、関数ポインタでも関数オブジェクトでもどちらでも格納、呼び出しができる型である。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/function.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/function.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::function&lt;/code&gt;型は、テンプレート引数で関数のシグニチャ、すなわち関数の形を指定する。&lt;/p&gt;
&lt;p&gt;以下は、&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;char&lt;/code&gt;を引数にとり、&lt;code&gt;double&lt;/code&gt;を返す関数のシグニチャを持つ&lt;code&gt;boost::function&lt;/code&gt;の型である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;boost::function&lt;/code&gt;は、同じシグニチャであれば関数ポインタでも関数オブジェクトでも、どちらでも同じ&lt;code&gt;boost::function&lt;/code&gt;型の変数に持つことができる。以下に例を示す。一様に扱えていることがわかるだろう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;関数ポインタを格納して呼び出す&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/function.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数ポインタをboost::functionに格納&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数呼び出し&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*関数オブジェクトを格納して呼び出す&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/function.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; add {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result_type;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクトをboost::functionに格納&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数呼び出し&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>計算幾何 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/geometry.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/geometry.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;計算幾何&lt;/h1&gt;
&lt;p&gt;計算幾何は、&lt;a href=&#34;http://www.boost.org/libs/geometry/index.html&#34; target=&#34;_blank&#34;&gt;Boost Geometry Library&lt;/a&gt;によって提供される。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#disjoint&#34; name=&#34;disjoint&#34;&gt;2つの図形が互いに素かを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が互いに素かを判定するには、&lt;code&gt;boost::geometry::disjoint()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;disjoint()&lt;/code&gt;関数は、2つの図形が重なりあっていなければ&lt;code&gt;true&lt;/code&gt;、重なり合っていたら&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;同士が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// A. &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+  b&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B. not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   b  |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   +--+---+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +---+--+   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//     +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box b(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;&lt;code&gt;box&lt;/code&gt;と&lt;code&gt;point_xy&lt;/code&gt;が重なりあっていないかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//           b&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(result);
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// not &lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |  b   |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |      |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +------+&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box a(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;disjoint&lt;/span&gt;(a, b);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersects&#34; name=&#34;intersects&#34;&gt;2つの図形が交点を持っているかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が交点を持っているかを判定するには、&lt;code&gt;boost::geometry::intersects()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;2つの線が交わっているかの判定：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  line2&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ---+---- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//    |&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っている&lt;/span&gt;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line1&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// -------- line2&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intersects&lt;/span&gt;(line1, line2);
        BOOST_ASSERT(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 交点を持っていない&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#within&#34; name=&#34;within&#34;&gt;図形がもう一方の図形の完全な内側にあるかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形がもう一方の図形の内側にあるかを判定するには、&lt;code&gt;boost::geometry::within()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;within()&lt;/code&gt;関数は、第1引数の図形が、第2引数の図形の完全な内側にあれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点が四角形内にあるかを判定：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometry.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point top_left(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point bottom_right(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box   box(top_left, bottom_right);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;within&lt;/span&gt;(p, box)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;in&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;out&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;in
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#equals&#34; name=&#34;equals&#34;&gt;2つの図形が空間的に等しいかを判定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形が空間的に等しいかを判定するには、&lt;code&gt;boost::geometry::equals()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;図形の形が同じでも位置が異なれば&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;以下は、三角形からなる四角形と、四角形が等しいか判定する処理：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/algorithms/&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/adapted/boost_tuple.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

BOOST_GEOMETRY_REGISTER_BOOST_TUPLE_CS(cs&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cartesian)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// poly&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ae    d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// | +   |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |   + |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// b     c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (0,0)&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// |     |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// +-----+&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//       (3,3)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tuple_list_of(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;equals&lt;/span&gt;(poly, box);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (result) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not equal&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;equal
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#area&#34; name=&#34;area&#34;&gt;面積を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の面積を計算するには、&lt;code&gt;boost::geometry::area()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;以下は、四角形と三角形の面積を計算する例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// box&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box x(point(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// polygon&lt;/span&gt;
    {
        polygon x;
        bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(x) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;area&lt;/span&gt;(x);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
4.5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#centroid&#34; name=&#34;centroid&#34;&gt;図形の中心座標を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の中心座標を計算するには、&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;か、&lt;code&gt;boost::geometry::return_centroid&amp;lt;Point&amp;gt;()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::geometry::centroid()&lt;/code&gt;関数は、中心座標の点を第2引数で参照として返し、&lt;code&gt;boost::geometry::return_centroid()&lt;/code&gt;関数は、中心座標の点を戻り値で返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return_centroid()&lt;/code&gt;関数は、テンプレート引数でPoint Conceptの型を指定する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三角形の中心座標を求める(&lt;code&gt;centroid&lt;/code&gt;を使用)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    point p;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;centroid&lt;/span&gt;(poly, p);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;return_centroid&lt;/code&gt;を使った場合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_centroid&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(p) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1.55556, 1.66667)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#convex_hull&#34; name=&#34;convex_hull&#34;&gt;図形の凸包を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の凸包を計算するには、&lt;code&gt;boost::geometry::convex_hull()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数で図形を渡すと、第2引数で参照として凸包の図形が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    polygon hull;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;convex_hull&lt;/span&gt;(poly, hull);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;polygon: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hull: &#34;&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(hull) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;polygon: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
hull: (((2, 1.3), (2.4, 1.7), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
&lt;/code&gt;&lt;/pre&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/convex_hull.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑色部分が入力した図形。点線部分が計算された凸包図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#distance&#34; name=&#34;distance&#34;&gt;2つの図形の距離を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の距離を計算するには、&lt;code&gt;boost::geometry::distance()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;distance()&lt;/code&gt;関数は、図形間の最短距離を返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点と点の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point a(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point b(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(a, b);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;
&lt;strong&gt;点と三角形の距離：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point p(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;distance&lt;/span&gt;(p, poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4.24264
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#difference&#34; name=&#34;difference&#34;&gt;2つの図形の差を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の差を計算するには、&lt;code&gt;boost::geometry::difference()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の差が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bx - poly&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;difference&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;

計算された差の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/difference.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;difference()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#union_&#34; name=&#34;union_&#34;&gt;2つの図形の和を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の和を計算するには、&lt;code&gt;boost::geometry::union_()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の和が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;union_&lt;/span&gt;(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;

計算された和の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/union_.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;union_()&lt;/code&gt;関数で計算された図形。&lt;/p&gt;
&lt;p&gt;注：&lt;code&gt;union_()&lt;/code&gt;関数の名前がアンダーバーで終わっているのは、&lt;code&gt;union&lt;/code&gt;がC++言語仕様において予約語と定められているためである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#intersection&#34; name=&#34;intersection&#34;&gt;2つの図形の共通部分を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つの図形の共通部分を計算するには、&lt;code&gt;boost::geometry::intersection()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数と第2引数で渡した図形の共通部分が、第3引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    box bx(point(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), point(&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4.5&lt;/span&gt;));

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; out;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;intersection(bx, poly, out);
}
&lt;/pre&gt;&lt;/div&gt;

計算された共通部分の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/intersection.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;intersection()&lt;/code&gt;で計算された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#envelope&#34; name=&#34;envelope&#34;&gt;図形の包絡線を計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の包絡線を計算するには、&lt;code&gt;boost::geometry::envelope()&lt;/code&gt;を計算する。&lt;/p&gt;
&lt;p&gt;第1引数として渡した図形の包絡線が、Box Conceptの型として第2引数で返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    box bx;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;envelope&lt;/span&gt;(poly, bx);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;
計算された包絡線の図形：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/envelope.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点線部分が、&lt;code&gt;envelope()&lt;/code&gt;で計算された包絡線。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;boost::geometry::return_envelope&amp;lt;Box&amp;gt;()&lt;/code&gt;を使用すれば、参照ではなく戻り値として包絡線が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/box.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; box;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{

    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5.4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4.9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.3&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; box bx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;return_envelope&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;poly: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bx: &#34;&lt;/span&gt;   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(bx) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;poly: (((2, 1.3), (2.4, 1.7), (3.6, 1.2), (4.6, 1.6), (4.1, 3), (5.3, 2.8), (5.4, 1.2), (4.9, 0.8), (3.6, 0.7), (2, 1.3)))
bx: ((2, 0.7), (5.4, 3))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#length&#34; name=&#34;length&#34;&gt;図形の長さを計算する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形の長さを計算するには、線の場合には&lt;code&gt;boost::geometry::length()&lt;/code&gt;関数を使用し、三角形の場合には&lt;code&gt;boost::geometry::perimeter()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;線の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;length&lt;/span&gt;(line);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;15.1127
&lt;/code&gt;&lt;/pre&gt;
&lt;strong&gt;三角形の長さを計算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;perimeter&lt;/span&gt;(poly);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;13.6569
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#reverse&#34; name=&#34;reverse&#34;&gt;図形を逆向きにする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を逆向きにするには、&lt;code&gt;boost::geometry::reverse()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;reverse&lt;/span&gt;(poly);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(poly) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, 1), (3, 3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#simplify&#34; name=&#34;simplify&#34;&gt;図形を単純化する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を単純化するには、&lt;code&gt;boost::geometry::simplify()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 : 単純化する元となる図形&lt;/li&gt;
&lt;li&gt;第2引数 : 出力先変数への参照&lt;/li&gt;
&lt;li&gt;第3引数 : 単純化の距離&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;線を単純化する例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3.8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        ;

    linestring result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;simplify&lt;/span&gt;(line, result, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((3, 3), (3.8, 4), (6, 6), (4, 9), (5, 8), (7, 7))
((3, 3), (6, 6), (4, 9), (7, 7))
&lt;/code&gt;&lt;/pre&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/simplify.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が元となった図形。オレンジの点線が&lt;code&gt;simplify()&lt;/code&gt;によって単純化された図形。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#unique&#34; name=&#34;unique&#34;&gt;図形から重複した点を削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;重複した点を削除するには、&lt;code&gt;boost::geometry::unique()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/linestring.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;linestring&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; linestring;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    linestring line &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        ;

    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;unique&lt;/span&gt;(line);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(line) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;((0, 0), (1, 1), (3, 3), (1, 1))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#translate&#34; name=&#34;translate&#34;&gt;図形を平行移動する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を平行移動するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数で、&lt;code&gt;translate_transformer&lt;/code&gt;戦略ポリシーを使用して移動量を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1.5, 1.5)移動する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数(最大3)&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : xの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : yの移動量&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : zの移動量(省略可)&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;translate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.5&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((1.5, 1.5), (4.5, 4.5), (4.5, 1.5), (1.5, 1.5)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#scale&#34; name=&#34;scale&#34;&gt;図形を拡大縮小する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を拡大縮小するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;scale_transformer&lt;/code&gt;戦略ポリシーを使用して拡大率を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3倍に拡大する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数：&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 点の要素を表す値型&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   2 : 変換元の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   3 : 変換先の次元数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンストラクタの引数&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//   1 : 倍率&lt;/span&gt;
    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;scale_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (9, 9), (9, 0), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/geometry.html#rotate&#34; name=&#34;rotate&#34;&gt;図形を回転する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;図形を回転するには、&lt;code&gt;boost::geometry::transform()&lt;/code&gt;関数に、&lt;code&gt;rotate_transformer&lt;/code&gt;戦略ポリシーを使用して回転する角度を指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotate_transformer&lt;/code&gt;のテンプレート引数で、角度の単位を選択できる。デグリ：&lt;code&gt;boost::geometry::degree&lt;/code&gt;、ラジアン：&lt;code&gt;boost::geometry::radian&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;回転は、原点(0, 0)を中心に時計回りに行われる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/point_xy.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/geometries/polygon.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; trans &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;strategy&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;d2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;point_xy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; point;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;model&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;polygon&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; polygon;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    polygon poly;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exterior_ring(poly) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        ;

    trans&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rotate_transformer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point, point, &lt;span style=&#34;color:#ff0000&#34;&gt;bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;degree&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; translate(&lt;span style=&#34;color: #666666&#34;&gt;90.0&lt;/span&gt;);

    polygon result;
    bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;transform&lt;/span&gt;(poly, result, translate);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bg&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dsv(result) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(((0, 0), (3, -3), (1.83691e-016, -3), (0, 0)))
&lt;/code&gt;&lt;/pre&gt;
&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/geometry/rotate.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;緑の実線が回転前、オレンジの点線が回転後の図形。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>グラフ -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/graph.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/graph.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;グラフ&lt;/h1&gt;
&lt;p&gt;グラフ構造とそれに対する操作を行うには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Graph Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#define-graph&#34;&gt;グラフ型を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#add-vertex-edge&#34;&gt;頂点と辺を追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#bundle-property&#34;&gt;任意のクラスをプロパティにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#dijkstra-shortest-paths&#34;&gt;ダイクストラ法で最短経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#distance-map&#34;&gt;最短経路の長さ(重みの合計)を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#is-reachable&#34;&gt;ある頂点に到達可能かどうかを調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#simple-shortest-path&#34;&gt;通過する辺が最も少ない経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#isomorphism&#34;&gt;2つのグラフが同型か判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#minimum-spanning-tree&#34;&gt;最小全域木を作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#topological-sort&#34;&gt;トポロジカルソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#euler-path&#34;&gt;一筆書きの経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#write-graphviz&#34;&gt;グラフをGraphviz形式(.dot)で出力する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#read-graphviz&#34;&gt;Graphviz形式(.dot)のデータを読み込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#define-graph&#34; name=&#34;define-graph&#34;&gt;グラフ型を定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Graphで標準的に使用する、グラフ構造のためのクラス&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/using_adjacency_list.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::adjacency_list&lt;/code&gt;&lt;/a&gt;は、様々な目的に利用できるようカスタマイズが可能になっている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutEdgeListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vecS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vecS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DirectedS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; directedS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EdgeProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;GraphProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EdgeListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; listS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;adjacency_list&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;設定例：&lt;/p&gt;
&lt;p&gt;以下は、無向グラフを定義する例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
Graph;
&lt;/pre&gt;&lt;/div&gt;

有向グラフで、辺に重みを付ける例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
Graph;
&lt;/pre&gt;&lt;/div&gt;

テンプレートパラメータの説明：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OutEdgeList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの隣接構造(入辺と出辺)を表すためのコンテナを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt; (&lt;code&gt;std::vector&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VertexList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの頂点集合を表すためのコンテナを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt; (&lt;code&gt;std::vector&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DirectedS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有向グラフか無向グラフかを選択する。&lt;br /&gt; &lt;code&gt;directedS&lt;/code&gt; : 有向グラフ&lt;br /&gt; &lt;code&gt;undirectedS&lt;/code&gt; : 無向グラフ&lt;br /&gt; &lt;code&gt;bidirectionalS&lt;/code&gt; : 双方向グラフ(有向で、辺が2本)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;directedS&lt;/code&gt; (有向グラフ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VertexProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;頂点のカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EdgeProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;辺のカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GraphProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフオブジェクトのカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EdgeListS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの辺リストを表すためのコンテナを指定する。 このコンテナは、&lt;code&gt;bidirectionalS&lt;/code&gt;もしくは&lt;code&gt;undirectedS&lt;/code&gt;の場合に実際に辺を格納するために使用され、&lt;code&gt;OutEdgeList&lt;/code&gt;はコンテナの要素を指すオブジェクトを格納する。&lt;code&gt;directedS&lt;/code&gt;の場合は&lt;code&gt;OutEdgeList&lt;/code&gt;に直接格納されるため、このパラメータは使用しない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listS&lt;/code&gt; (&lt;code&gt;std::list&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;コンテナの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutEdgeList&lt;/code&gt;, &lt;code&gt;VertexList&lt;/code&gt;, &lt;code&gt;EdgeListS&lt;/code&gt;パラメータでのコンテナの指定には、以下を指定できる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指定可能なパラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;listS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;slistS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::slist&lt;/code&gt; (非標準)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multisetS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::multiset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash_setS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash_multisetS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::unordered_multiset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;プロパティの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VertexProperties&lt;/code&gt;, &lt;code&gt;EdgeProperties&lt;/code&gt;, &lt;code&gt;GraphProperties&lt;/code&gt;に指定可能な、標準提供されているプロパティは以下：&lt;/p&gt;
&lt;p&gt;頂点プロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_distance_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_root_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ダイクストラや幅優先木での根を示す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;頂点に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_color_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_rank_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_predecessor_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行ノード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_isomorphism_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同型情報&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量(&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E4%B8%8D%E5%A4%89%E9%87%8F&#34; target=&#34;_blank&#34;&gt;Wikipedia:不変量&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次数(節点についてる辺の数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_out_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出次数(節点から出てる辺の数。無向の場合は次数と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_in_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入次数(節点に入る辺の数。無効の場合は次数と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_discover_time_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;深さ優先探索などでの発見された順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_finish_time_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;深さ優先探索などでの探索が終わった順番&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;辺プロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_index_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_weight_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重み&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_weight2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重み&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_capacity_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キャパシティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_residual_capacity_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;残りキャパシティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_reverse_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最大流アルゴリズムで使用する、向きが逆になった辺か否かを示す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;辺に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;グラフプロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graph_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graph_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフ自体に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#add-vertex-edge&#34; name=&#34;add-vertex-edge&#34;&gt;頂点と辺を追加する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;頂点と辺を追加する方法としては、コンストラクタを使用するものと、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/MutableGraph.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数と&lt;code&gt;boost::add_edge()&lt;/code&gt;関数&lt;/a&gt;を使用して動的に追加するものの2つがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. コンストラクタを使用する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boost.Graphのグラフ構造クラスは、コンストラクタで辺の範囲と頂点数をとる。&lt;/p&gt;
&lt;p&gt;これを使用することで、シンプルにグラフを構築できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B}, {A, C}, {A, D},
        {B, E}, {C, E}, {D, E}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D 
B --&amp;gt; E 
C --&amp;gt; E 
D --&amp;gt; E 
E --&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 動的に追加する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コンストラクタは初期化時のみ使用可能なため、動的に頂点や辺を追加する必要がある場合には、頂点と追加する&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数、辺を追加する&lt;code&gt;boost::add_edge()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;頂点を追加する&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数は、&lt;code&gt;for&lt;/code&gt;文や&lt;code&gt;while&lt;/code&gt;文でループして、必要な頂点数分だけ呼び出して使用する。戻り値として、頂点記述子が返される。&lt;/p&gt;
&lt;p&gt;辺を追加する&lt;code&gt;boost::add_edge()&lt;/code&gt;関数は、追加する辺の2つの頂点を指定して使用する。順番は、&lt;code&gt;source&lt;/code&gt;、&lt;code&gt;target&lt;/code&gt;の順である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Graph g;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点を追加&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, Graph&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; desc;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        desc[i] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(g);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺を追加&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[B], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[C], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[D], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[B], desc[E], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[C], desc[E], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[D], desc[E], g);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D 
B --&amp;gt; E 
C --&amp;gt; E 
D --&amp;gt; E 
E --&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
※&lt;code&gt;add_vertex()&lt;/code&gt;関数と&lt;code&gt;add_edge()&lt;/code&gt;は、&lt;code&gt;boost::adjacency_list&lt;/code&gt;以外のグラフ構造にも適用できるようにするため、名前空間の修飾なしで呼び出す。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/eagle_raptor/20111221/1324478088&#34; target=&#34;_blank&#34;&gt;Boost.Graphで動的な頂点の追加削除 - ばるの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#bundle-property&#34; name=&#34;bundle-property&#34;&gt;任意のクラスをプロパティにする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Graphのグラフ構造には、Property Mapによって頂点・辺・グラフに任意のプロパティを持たせられる。しかしながらこの方法は、プロパティが増えてくると管理しきれなくなってくるので、ひとまとめにしたくなるだろう。&lt;/p&gt;
&lt;p&gt;そこで、Boost.Graphには&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/bundles.html&#34; target=&#34;_blank&#34;&gt;Bundleプロパティ&lt;/a&gt;という機能が用意されている。これは、グラフ構造のプロパティ指定の場所にユーザー定義クラスを指定するという機能である。&lt;/p&gt;
&lt;p&gt;後述のサンプルでは、以下のプロパティを設定している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;頂点のBundleプロパティとして「名前」「人口」「郵便番号一覧」を持つ&lt;code&gt;City&lt;/code&gt;(街)クラス&lt;/li&gt;
&lt;li&gt;辺のBundleプロパティとして「名前」と「距離」を持つ&lt;code&gt;Highway&lt;/code&gt;(高速道路)クラス&lt;/li&gt;
&lt;li&gt;グラフのBundleプロパティとして「名前」を持つ&lt;code&gt;Country&lt;/code&gt;(国)クラス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そして、最短経路の計算の際に、&lt;code&gt;Highway&lt;/code&gt;クラスの&lt;code&gt;distance&lt;/code&gt;メンバ変数を辺の重みとして使用している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;City&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; population;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; zipcodes;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; distance; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// km&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Country&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bidirectionalS,
    &lt;span style=&#34;color:#ff0000&#34;&gt;City&lt;/span&gt;,    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点のBundleプロパティ&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺のBundleプロパティ&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;Country&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフのBundleプロパティ&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Map;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Map map;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフのBundleプロパティを設定&lt;/span&gt;
    map[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_bundle].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Japan&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 街(頂点)を2つ追加&lt;/span&gt;
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(map);
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(map);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点のBundleプロパティを設定&lt;/span&gt;
    map[v1].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tokyo&#34;&lt;/span&gt;;
    map[v1].population &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;13221169&lt;/span&gt;;
    map[v1].zipcodes.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1500013&lt;/span&gt;);

    map[v2].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Nagoya&#34;&lt;/span&gt;;
    map[v2].population &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2267048&lt;/span&gt;;
    map[v2].zipcodes.push_back(&lt;span style=&#34;color: #666666&#34;&gt;4600006&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺を追加&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; inserted &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;edge_descriptor e;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tie(e, inserted) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_edge(v1, v2, map);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺のBundleプロパティを設定&lt;/span&gt;
    map[e].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tomei Expessway&#34;&lt;/span&gt;;
    map[e].distance &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;325.5&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;クラスのdistanceメンバを辺の重みとして計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; distance(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(map));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(map, v1,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weight_map(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;distance, map)).
            distance_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tokyo-Nagoya : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; distance[v2] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;km&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Tokyo-Nagoya : 325.5km
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#dijkstra-shortest-paths&#34; name=&#34;dijkstra-shortest-paths&#34;&gt;ダイクストラ法で最短経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ダイクストラ法で最短経路を求めるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/dijkstra_shortest_paths.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::dijkstra_shortest_paths()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;ここでは、以下の経路図で、頂点Sから頂点Zへの最短経路を求める。&lt;/p&gt;
&lt;p&gt;経路図：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/dijkstra_shortest_paths.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (S, A)
        (A, B)
        (B, C)
        (B, D)
        (C, E)
        (C, F)
        (D, F)
        (E, D)
        (F, E)
        (E, Z)
        (F, Z)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;S
A
B
D
F
Z
&lt;/code&gt;&lt;/pre&gt;
この場合、SからZへの最短経路は、S, A, B, D, F, Zの順となる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;関数の第1引数はグラフ構造を表す変数への&lt;code&gt;const&lt;/code&gt;参照、第2引数は開始地点の頂点、第3引数は先行ノードを格納する変数へのポインタである。&lt;/p&gt;
&lt;p&gt;目的地から開始地点まで先行ノードを辿っていくことにより、最短経路を求めることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#distance-map&#34; name=&#34;distance-map&#34;&gt;最短経路の長さ(重みの合計)を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最短経路の長さを求めるには&lt;code&gt;DistanceMap&lt;/code&gt;を使用する。&lt;code&gt;DistanceMap&lt;/code&gt;は、最短経路探索の結果として取得できる、開始地点から最短経路のある頂点までの距離を保存したものである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DistanceMap&lt;/code&gt;は、最短経路探索アルゴリズムに&lt;code&gt;boost::distance_map()&lt;/code&gt;関数を使用して取得できる(他の名前付き引数に続けて記述する場合は、「&lt;code&gt;named_param.distance_map(...);&lt;/code&gt;」のようにする)。&lt;/p&gt;
&lt;p&gt;ここでは、先行ノードも一緒に求めているが、経路長のみが必要であれば、&lt;code&gt;DistanceMap&lt;/code&gt;のみを計算してもよい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (S, A)
        (A, B)
        (B, C)
        (B, D)
        (C, E)
        (C, F)
        (D, F)
        (E, D)
        (F, E)
        (E, Z)
        (F, Z)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; distance(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]).distance_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路の長さを計算&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;distance[to]&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;route length:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;route length:11
S
A
B
D
F
Z
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#is-reachable&#34; name=&#34;is-reachable&#34;&gt;ある頂点に到達可能かどうかを調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ある頂点に到達可能かどうかを調べるには、&lt;code&gt;&amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/code&gt;で定義される&lt;code&gt;boost::is_reachable()&lt;/code&gt;関数を使用する。この関数は、グラフ構造&lt;code&gt;g&lt;/code&gt;において、頂点&lt;code&gt;x&lt;/code&gt;が頂点&lt;code&gt;y&lt;/code&gt;に到達可能かどうかを調べ、到達可能であれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::is_reachable()&lt;/code&gt;の定義：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// xからyに到達可能?&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; IncidenceGraph, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; VertexColorMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_reachable(
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor x,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor y,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g,
           VertexColorMap color &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各頂点が白で開始しなければならない&lt;/span&gt;
        );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/detail/lightweight_test.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex_count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; N;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (A, B)(B, E)
        (A, C)(C, E)
    ; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Dはどこにも繋がっていない&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), vertex_count);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全部白のカラーマップを作って渡す&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_color_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; color(vertex_count, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;white_color);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AからEに到達可能か調べる&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_reachable&lt;/span&gt;(A, E, g, color.data())) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;AからEに到達可能&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        assert(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AからDに到達可能か調べる&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_reachable&lt;/span&gt;(A, D, g, color.data())) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;AからDに到達不可能&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        assert(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;AからEに到達可能
AからDに到達不可能
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#simple-shortest-path&#34; name=&#34;simple-shortest-path&#34;&gt;通過する辺が最も少ない経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;辺に重みのないグラフから最短経路を求めると、「最短単純路」という通過する辺が最も少ない経路が得られる。これは、たとえばソーシャルグラフから「Twitterで何回のRTで特定の情報に辿りつけたか」というような情報を抽出する用途に使える。&lt;/p&gt;
&lt;p&gt;&amp;lt;strike&amp;gt;Boost.Graphの&lt;code&gt;boost::dijkstra_shortest_paths()&lt;/code&gt;は重みのないグラフを与えるとコンパイルエラーになるので、辺の重みを全て1に設定することで代用できる。&amp;lt;/strike&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=&#34;red&#34;&amp;gt;※2014/02/16 修正：そのような場面では &lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/libs/graph/doc/breadth_first_search.html&#34; target=&#34;_blank&#34;&gt;Breadth-First Search&lt;/a&gt; を使うべきである。&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/simple_shortest_path.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, G, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFGZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {S, A},
        {A, B},
        {B, C},
        {B, D},
        {C, E},
        {D, G},
        {E, D},
        {G, E},
        {E, F},
        {F, Z},
        {G, Z},
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺の重みは1&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;const std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights(edges.size(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;S
A
B
D
G
Z
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#isomorphism&#34; name=&#34;isomorphism&#34;&gt;2つのグラフが同型か判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つのグラフが同型かを判定するには、&lt;code&gt;&amp;lt;boost/graph/isomorphism.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/isomorphism.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::isomorphism()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数は、引数として2つのグラフをとり、それらが同型であれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。
ここでは、以下の2つのグラフを比較する。&lt;/p&gt;
&lt;p&gt;g1:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/isomorphism_1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;g2:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/isomorphism_2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;isomorphism&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex_count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;;

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph1&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), vertex_count);
}

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph2&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        { &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), vertex_count);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph1();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph2();

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;isomorphism&lt;/span&gt;(g1, g2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;isomorphic? &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;isomorphic? true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#minimum-spanning-tree&#34; name=&#34;minimum-spanning-tree&#34;&gt;最小全域木を作る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;グラフに含まれるすべての頂点を含む最小の部分グラフを、最小全域木(minimum spanning tree)と言う。&lt;/p&gt;
&lt;p&gt;Boost.Graphには、最小全域木を作るためのアルゴリズムとして、以下の2つの関数が用意されている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.com/libs/graph/doc/kruskal_min_spanning_tree.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::kruskal_minimum_spanning_tree()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスカル法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.com/libs/graph/doc/prim_minimum_spanning_tree.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::prim_minimum_spanning_tree()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリム法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらを以下のグラフに適用すると&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/minimum_spanning_tree_1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以下のような最小全域木(赤の太線部分)が手に入る。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/minimum_spanning_tree_2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;それぞれの使い方は以下のようになる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;クラスカル法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;クラスカル法によって最小全域木を求める&lt;code&gt;boost::kruskal_minimum_spanning_tree()&lt;/code&gt;関数は、Output Iteratorで最小全域木の辺記述子(edge descriptor)を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/kruskal_min_spanning_tree.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;edge_descriptor EdgeDesc;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, C},
        {B, D},
        {B, E},
        {C, B},
        {C, D},
        {D, E},
        {E, A}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;EdgeDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; spanning_tree;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;kruskal_minimum_spanning_tree&lt;/span&gt;(g, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(spanning_tree));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; EdgeDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; spanning_tree) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;source(e, g)] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;
                         &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;target(e, g)] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(A,C)
(D,E)
(E,A)
(B,D)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;プリム法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;プリム法によって最小全域木を求める&lt;code&gt;boost::prim_minimum_spanning_tree()&lt;/code&gt;関数は、先行ノードマップ(predecessor map)として最小全域木を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/prim_minimum_spanning_tree.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor VertexDesc;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, C},
        {B, D},
        {B, E},
        {C, B},
        {C, D},
        {D, E},
        {E, A},
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;VertexDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(N);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;prim_minimum_spanning_tree(g, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[i] &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; i) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;parent[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;] = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[parents[i]] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;parent[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;] = no parent&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;parent[A] = no parent
parent[B] = D
parent[C] = A
parent[D] = E
parent[E] = A
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#topological-sort&#34; name=&#34;topological-sort&#34;&gt;トポロジカルソート&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;無閉路有向グラフ(DAG : Directed Acyclic Graph)に順序を付けるトポロジカルソートは、&lt;code&gt;&amp;lt;boost/graph/topological_sort.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/topological_sort.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::topological_sort()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は引数として、グラフ構造への&lt;code&gt;const&lt;/code&gt;参照と、頂点リストを出力するOutput Iteratorをとる。(頂点リストは逆順で返されるため、&lt;code&gt;boost::adaptors::reversed&lt;/code&gt;や&lt;code&gt;rbegin()&lt;/code&gt;/&lt;code&gt;rend()&lt;/code&gt;などで正順に直して使用する。)&lt;/p&gt;
&lt;p&gt;ここでは、以下のグラフにトポロジカルソートを適用する：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/topological_sort.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;topological_sort&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/reversed.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;topological_sort&lt;/span&gt;(g, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(result &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reversed, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vertex &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    });
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
5
0
1
4
3
&lt;/code&gt;&lt;/pre&gt;
出力から、有向グラフgがトポロジカルソートによって「2 → 5 → 0 → 1 → 4 → 3」の順序が付けられたことがわかる。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;boost::topological_sort()&lt;/code&gt;関数に、閉路のある有向グラフを指定した場合、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/exception.html#not_a_dag&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::not_a_dag&lt;/code&gt;&lt;/a&gt;例外が投げられる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#euler-path&#34; name=&#34;euler-path&#34;&gt;一筆書きの経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;オイラー閉路というのを求めると、グラフの一筆書きの経路を得ることができる。ここでは、「サンタクロースの家」と呼ばれる無向グラフの一筆書きを求める。&lt;/p&gt;
&lt;p&gt;Boost.Graphにはオイラー閉路のためのアルゴリズムは用意されていないが、以下のGitHubにある&lt;code&gt;shand::graph::euler_path()&lt;/code&gt;関数を利用することで、一筆書きを容易に求められる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/faithandbrave/Shand/blob/master/shand/graph/euler_path.hpp&#34; target=&#34;_blank&#34;&gt;shand/graph/euler_path.hpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;shand/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;euler_path&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor vertex_desc;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B},
        {B, C},
        {C, A},
        {B, D},
        {B, E},
        {C, D},
        {D, E},
        {E, C}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vertex_desc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; path;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;shand&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;euler_path&lt;/span&gt;(g, E, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;path](vertex_desc v) { path.push_front(v); })) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;euler path failed&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vertex_desc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, path) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;E
B
A
C
B
D
C
E
D
&lt;/code&gt;&lt;/pre&gt;
E, B, A, C, B, D, C, E, Dの順に頂点をたどれば一筆書きになることがわかった。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/euler_path.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#write-graphviz&#34; name=&#34;write-graphviz&#34;&gt;グラフをGraphviz形式(.dot)で出力する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;グラフをGraphviz形式(.dot)で出力するには、&lt;code&gt;&amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/code&gt;をインクルードし、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/write-graphviz.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::write_graphviz()&lt;/code&gt;&lt;/a&gt;関数を使用する。この機能のために、別途ライブラリは必要としない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write_graphviz()&lt;/code&gt;関数の引数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第1引数&lt;/td&gt;
&lt;td&gt;出力先の&lt;code&gt;std::ostream&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第2引数&lt;/td&gt;
&lt;td&gt;グラフ構造への&lt;code&gt;const&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第3引数&lt;/td&gt;
&lt;td&gt;出力方法のカスタマイズ方法 (ここでは、頂点名を出力するために&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/write-graphviz.html#concept:PropertyWriter&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;make_label_writer()&lt;/code&gt;&lt;/a&gt;を使用している)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B}, {A, C}, {A, D},
        {B, E}, {C, E}, {D, E}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// graphvizの形式(*.dot)で出力&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.dot&#34;&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;write_graphviz(file, g, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_label_writer(name.c_str()));
}
&lt;/pre&gt;&lt;/div&gt;

出力されたtest.dotファイル：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;digraph G {
0[label=&#34;A&#34;];
1[label=&#34;B&#34;];
2[label=&#34;C&#34;];
3[label=&#34;D&#34;];
4[label=&#34;E&#34;];
0-&amp;gt;1 ;
0-&amp;gt;2 ;
0-&amp;gt;3 ;
1-&amp;gt;4 ;
2-&amp;gt;4 ;
3-&amp;gt;4 ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Graphvizのdotコマンドを使用してpngに変換：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;dot -Tpng test.dot -o test.png
&lt;/code&gt;&lt;/pre&gt;
出力されたtest.png：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/graphviz.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;追加資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20100416/1271388752&#34; target=&#34;_blank&#34;&gt;Boost.Graph Graphviz形式で重みを出力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#read-graphviz&#34; name=&#34;read-graphviz&#34;&gt;Graphviz形式(.dot)のデータを読み込む&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Graphviz形式(.dot)のデータを読み込むには、&lt;code&gt;&amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/read_graphviz.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::read_graphviz()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数を使用するには、Boost Regex Libraryをリンクする必要がある。&lt;/p&gt;
&lt;p&gt;ここでは、「[グラフをGraphviz形式(.dot)で出力する](#write-graphviz」で出力したtest.dotファイルを読み込む。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read_graphviz()&lt;/code&gt;関数の引数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第1引数&lt;/td&gt;
&lt;td&gt;入力元の&lt;code&gt;std::istream&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第2引数&lt;/td&gt;
&lt;td&gt;グラフ構造への参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第3引数&lt;/td&gt;
&lt;td&gt;DOT言語のプロパティを処理するための&lt;code&gt;boost::dynamic_properties&lt;/code&gt;型変数への参照&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ifstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.dot&#34;&lt;/span&gt;);

    Graph g;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_properties dp(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ignore_other_properties);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;read_graphviz(file, g, dp);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D
B --&amp;gt; E
C --&amp;gt; E
D --&amp;gt; E
E --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
tested boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ハッシュ表 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/hashmap.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/hashmap.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ハッシュ表&lt;/h1&gt;
&lt;p&gt;ハッシュ表には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/unordered.html&#34; target=&#34;_blank&#34;&gt;Boost Unordered Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt;のハッシュ表バージョンが&lt;code&gt;boost::unordered_map&lt;/code&gt;。&lt;code&gt;std::set&lt;/code&gt;のハッシュ表バージョンが&lt;code&gt;boost::unordered_set&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#user-defined-type-as-key-using-overload&#34;&gt;ユーザー定義型をキーにする(オーバーロード)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#user-defined-type-as-key-using-policy&#34;&gt;ユーザー定義型をキーにする(ポリシー)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基本操作は、&lt;code&gt;std::set&lt;/code&gt;や&lt;code&gt;std::map&lt;/code&gt;と同様である。&lt;/p&gt;
&lt;p&gt;ポリシーを設定しない場合、要求されるテンプレートパラメータは、キーと値の型である。&lt;/p&gt;
&lt;p&gt;以下の場合、&lt;code&gt;std::string&lt;/code&gt;型をキー、&lt;code&gt;int&lt;/code&gt;型を値とするハッシュ表を作成している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/unordered_map.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; map_type;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素追加&lt;/span&gt;
    map_type m;
    m[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a&#34;&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    m[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;b&#34;&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    m[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c&#34;&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 検索&lt;/span&gt;
    map_type&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;b&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#user-defined-type-as-key-using-overload&#34; name=&#34;user-defined-type-as-key-using-overload&#34;&gt;ユーザー定義型をキーにする(オーバーロード)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ユーザー定義型をキーにするには、その型の等値比較を行う関数と、ハッシュを計算する関数を定義する必要がある。&lt;/p&gt;
&lt;p&gt;以下がその簡単な例である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/unordered_map.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;

    point() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), y(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}
    point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 等値比較&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a.x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b.x &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a.y &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b.y;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハッシュの計算&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; hash_value(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; seed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hash_combine(seed, p.x);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hash_combine(seed, p.y);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; seed;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; map_type;

    map_type m;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;;

    map_type&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/hashmap.html#user-defined-type-as-key-using-policy&#34; name=&#34;user-defined-type-as-key-using-policy&#34;&gt;ユーザー定義型をキーにする(ポリシー)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ユーザー定義型をキーにする方法として、等値比較の演算子やハッシュを計算する関数がすでに定義されている場合がある。&lt;/p&gt;
&lt;p&gt;そういった場合に、別名の等値比較関数、ハッシュ計算関数をテンプレートパラメータで指定することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/unordered_map.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;

    point() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), y(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}
    point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 等値比較&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; point_equal {
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a.x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b.x &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a.y &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b.y;
    }
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハッシュの計算&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; point_hash {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; result_type;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; seed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hash_combine(seed, p.x);
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hash_combine(seed, p.y);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; seed;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unordered_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;point, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, point_hash, point_equal&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; map_type;

    map_type m;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;;
    m[point(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;;

    map_type&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(point(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iniファイルの読み込み／書き込み -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/ini.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/ini.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;iniファイルの読み込み／書き込み&lt;/h1&gt;
&lt;p&gt;iniの読み込み、書き込みには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/property_tree.html&#34; target=&#34;_blank&#34;&gt;Boost Property Tree Library&lt;/a&gt;を使用する。Boost.PropertyTreeは、ツリー構造の汎用プロパティ管理のためのライブラリで、XML, JSON, INIファイルなどへの統一的なアクセス方法を提供する。&lt;/p&gt;
&lt;p&gt;ここでは、Boost.PropertyTreeを使用したiniファイルの読み込みと書き込みを紹介する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/ini.html#read&#34;&gt;iniの読み込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/ini.html#write&#34;&gt;iniの書き込み&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/ini.html#read&#34; name=&#34;read&#34;&gt;iniの読み込み&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;iniの読み込みには、&lt;code&gt;boost::property_tree::read_ini()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数を使用するには、&lt;code&gt;&amp;lt;boost/property_tree/ini_parser.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;以下のiniファイルを読み込んでみよう。&lt;/p&gt;
&lt;p&gt;data.ini&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[Data]
value = 3
str = Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ini_parser.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/optional.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ptree pt;
    read_ini(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data.ini&#34;&lt;/span&gt;, pt);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.str&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;value : 3
str : Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Dataセクションのvalueキーの値を取得するには、iniが読み込まれた&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;に対して以下のように指定する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「セクション名 . キー」&lt;/strong&gt;のようにしてパスを指定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/ini.html#write&#34; name=&#34;write&#34;&gt;iniの書き込み&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;iniを書き込むには、要素を追加するために&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;の&lt;code&gt;put()&lt;/code&gt;メンバ関数で値を設定する。&lt;/p&gt;
&lt;p&gt;保存には、&lt;code&gt;boost::property_tree::write_ini()&lt;/code&gt;関数に、ファイル名と&lt;code&gt;ptree&lt;/code&gt;オブジェクトを指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ini_parser.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ptree pt;

    pt.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    pt.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.str&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    write_ini(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data_out.ini&#34;&lt;/span&gt;, pt);
}
&lt;/pre&gt;&lt;/div&gt;

出力されたdata_out.ini ：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[Data]
value=3
str=Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>区間演算 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/interval_arithmetic.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/interval_arithmetic.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;区間演算&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#interval-type&#34;&gt;区間を表す型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#deduction-type&#34;&gt;数値型を指定せずに区間を得る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#lower-upper&#34;&gt;区間の下限・上限を得る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#singleton&#34;&gt;区間内の要素が1個かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#arithmetic-operation&#34;&gt;四則演算を行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#interval-type&#34; name=&#34;interval-type&#34;&gt;区間を表す型&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::numeric::interval&lt;/code&gt;は数値の区間を表すクラステンプレートである。区間は両端を含む。以下のコードのように数値型を指定して用いる。（必要に応じてポリシークラスも指定する。）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::numeric::interval&lt;/code&gt;を使うには、&lt;code&gt;&amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/code&gt;をインクルードする。ストリームを用いて区間を出力したい場合は、&lt;code&gt;&amp;lt;boost/numeric/interval/io.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;Boost.Intervalに関連するクラス・関数は &lt;code&gt;boost::numeric&lt;/code&gt; 名前空間内に定義されている。（さらにネストされた名前空間内に定義されたものもある。）&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interval;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.15&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [3.14, 3.15]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[3.14,3.15]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#deduction-type&#34; name=&#34;deduction-type&#34;&gt;数値型を指定せずに区間を得る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::numeric::interval&lt;/code&gt;型の変数を定義する際には、&lt;code&gt;interval&amp;lt;double&amp;gt;&lt;/code&gt;のように数値型（この場合は&lt;code&gt;double&lt;/code&gt;）を書かなければならない。関数に区間を渡すときなどに、テンプレート引数を自分で書かずに、自動的に推論されると便利である。&lt;code&gt;boost::numeric::hull()&lt;/code&gt;を使うと、テンプレート引数が自動的に推論され、推論された数値型の&lt;code&gt;interval&lt;/code&gt;オブジェクトが返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hull;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::cout &amp;lt;&amp;lt; interval&amp;lt;double&amp;gt;(3.14, 3.15) &amp;lt;&amp;lt; &#39;\n&#39;; ではなく&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; hull(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.15&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[3.14,3.15]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#lower-upper&#34; name=&#34;lower-upper&#34;&gt;区間の下限・上限を得る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::numeric::interval&lt;/code&gt;のメンバ関数&lt;code&gt;lower()&lt;/code&gt;で下限、&lt;code&gt;upper()&lt;/code&gt;で上限が得られる。非メンバ関数版もある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interval;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; pi(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.15&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;interval::lower: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi.lower() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;interval::upper: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi.upper() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;lower: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; lower(pi) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;upper: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; upper(pi) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;interval::lower: 3.14
interval::upper: 3.15
lower: 3.14
upper: 3.15
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#singleton&#34; name=&#34;singleton&#34;&gt;区間内の要素が1個かどうかを判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::numeric::singleton()&lt;/code&gt;関数で、区間の要素が1個かどうかを判定できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interval;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; three(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// threeの要素は3だけなのでtrue&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; singleton(three) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; three_to_five(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// three_to_fiveの要素は3, 4, 5の3個なのでfalse&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; singleton(three_to_five) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/interval_arithmetic.html#arithmetic-operation&#34; name=&#34;arithmetic-operation&#34;&gt;四則演算を行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;区間と区間、区間と数値の四則演算は通常の演算子&lt;code&gt;(+, -, *, /)&lt;/code&gt;を用いて行う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interval;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; pi(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3.15&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [3.14,3.15] + 1 = [4.14,4.15]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; + &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [3.14,3.15] - 1 = [2.14,2.15]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; - &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [3.14,3.15] * 2 = [6.28,6.3]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; * &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [3.14,3.15] / 2 = [1.57,1.575]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; / &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pi &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; _1_2(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; _2_3(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1,2] + [2,3] = [3,5]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; + &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1,2] - [2,3] = [-2,0]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; - &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1,2] * [2,3] = [2,6]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; * &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1,2] / [2,3] = [0.333...,1]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; / &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1_2 &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; _2_3 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[3.14,3.15] + 1 = [4.14,4.15]
[3.14,3.15] - 1 = [2.14,2.15]
[3.14,3.15] * 2 = [6.28,6.3]
[3.14,3.15] / 2 = [1.57,1.575]

[1,2] + [2,3] = [3,5]
[1,2] - [2,3] = [-2,0]
[1,2] * [2,3] = [2,6]
[1,2] / [2,3] = [0.333333,1]
&lt;/code&gt;&lt;/pre&gt;
複合代入の演算子&lt;code&gt;(+=, -=, *=, /=)&lt;/code&gt;も使える。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/interval/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interval;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hull;

  interval&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  x &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1,2] -&amp;gt; [2,3]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;

  x &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; hull(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [2,3] -&amp;gt; [4,6]&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[2,3]
[4,6]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ストリームの状態を戻す -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/io_state.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/io_state.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ストリームの状態を戻す&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/io/doc/ios_state.html&#34; target=&#34;_blank&#34;&gt;Boost IO State Savers Library&lt;/a&gt;を使用すると、ストリームオブジェクトを以前の状態に戻すことができる。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/io_state.html#format-flags&#34;&gt;フォーマットフラグを戻す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/io_state.html#format-flags&#34; name=&#34;format-flags&#34;&gt;フォーマットフラグを戻す&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::ios_flags_saver&lt;/code&gt;に&lt;code&gt;istream&lt;/code&gt;もしくは&lt;code&gt;ostream&lt;/code&gt;オブジェクトへの参照を渡すことで、そのスコープを抜ける際にフォーマットフラグを以前の状態に戻してくれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iomanip&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/io/ios_state.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp_hex&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スコープを抜けたらフォーマットフラグを戻す&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_flags_saver ifs(os);

    os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hex &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    disp_hex(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 16進数で出力&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 10進数で出力&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a
10
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>イテレータを作る -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/iterator.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/iterator.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;イテレータを作る&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/iterator/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Iterator Library&lt;/a&gt;を用いると、イテレータをより楽に作成できる。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#iterator_facade&#34;&gt;イテレータを作成する（&lt;code&gt;iterator_facade&lt;/code&gt;）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#variation&#34;&gt;イテレータの種類と要求されるメンバ関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#iterator_adaptor&#34;&gt;より楽にイテレータを作成する（&lt;code&gt;iterator_adaptor&lt;/code&gt;）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#iterator_facade&#34; name=&#34;iterator_facade&#34;&gt;イテレータの作成（iterator_facade）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::iterator_facade&lt;/code&gt;はイテレータを作成するためのクラステンプレートである。&lt;/p&gt;
&lt;p&gt;このクラスを継承して必要な関数を書くと&lt;code&gt;typedef&lt;/code&gt;や演算子が自動的に定義される。&lt;code&gt;boost::iterator_facede&lt;/code&gt;のテンプレート引数には順に以下のようにとる。&lt;code&gt;=boost::use_default&lt;/code&gt;の引数はデフォルトで&lt;code&gt;boost::use_default&lt;/code&gt;が指定されていることを示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt;
    , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Value&lt;/span&gt;
    , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CategoryOrTraversal&lt;/span&gt;
    , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Reference&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Value&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
    , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Difference&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;ptrdiff_t&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;iterator_facade&lt;/span&gt;;

}
&lt;/pre&gt;&lt;/div&gt;

| 引数番号 | パラメータ名          | 説明 |
|----------|-----------------------|------|
| 1        | &lt;code&gt;Derived&lt;/code&gt;             | &lt;code&gt;iterator_facede&lt;/code&gt;を継承するクラスの名前 |
| 2        | &lt;code&gt;Value&lt;/code&gt;               | イテレータの&lt;code&gt;value_type&lt;/code&gt;となる型 |
| 3        | &lt;code&gt;CategoryOrTraversal&lt;/code&gt; | イテレータの種類を示すタグ |
| 4        | &lt;code&gt;Reference&lt;/code&gt;           | イテレートするための変数の参照型（省略可。デフォルトは&lt;code&gt;Value&amp;amp;&lt;/code&gt;） |
| 5        | &lt;code&gt;Difference&lt;/code&gt;          | イテレータ間の距離を示すための型（省略可。デフォルトは&lt;code&gt;ptrdiff_t&lt;/code&gt;） |&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;iterator_facade&lt;/code&gt;クラスを継承して定義するクラスには、&lt;code&gt;boost::iterator_core_access&lt;/code&gt;を&lt;code&gt;friend&lt;/code&gt;クラスにして、指定したイテレータの種類によって要求されている関数を定義する必要がある。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;iterator&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;iterator_facade.hpp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// よくある単方向リストがあったとする&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_list_node
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; data;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_list_node&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; next;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_list_node&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_list;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 0から100までの値が入った単方向リストを作る&lt;/span&gt;
my_list &lt;span style=&#34;color: #0000FF&#34;&gt;create_list&lt;/span&gt;()
{
    my_list root( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; my_list_node );
    root&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

    my_list p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; root;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i ) {
        p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; my_list( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; my_list_node );
        p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;next&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i;
        p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;next;
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; root;
}

&lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// my_list用のイテレータを作る&lt;/span&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;my_list_iterator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator_facade&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        my_list_iterator, 
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
        &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_traversal_tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_list_node&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    my_list_iterator()
    { }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; my_list_iterator(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_list_node&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
        p_( p )
    { }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;friend &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;boost&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator_core_access&lt;/span&gt;;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;increment&lt;/span&gt;&lt;/span&gt;() { p_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p_&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;next; }
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;dereference&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; p_&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;data; }
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;equal&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; my_list_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; other) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; p_ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; other.p_; }
};

my_list_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;begin&lt;/span&gt;(my_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; my_list_iterator( p );
}

my_list_iterator &lt;span style=&#34;color: #0000FF&#34;&gt;end&lt;/span&gt;(my_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; my_list_iterator();
}


&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    my_list root &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; create_list();

    &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// よくあるイテレータを使ったループ&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( my_list_iterator itr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; begin( root ); itr &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end( root ); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;itr ) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;itr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// もちろんアルゴリズムにも適用可能&lt;/span&gt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each( begin( root ), end( root ), &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;print );
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#variation&#34; name=&#34;variation&#34;&gt;イテレータの種類と要求されるメンバ関数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;イテレータの種類とそのイテレータで要求されるメンバ関数の一覧&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タグ／関数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;dereference&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;increment&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;decrement&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;distance_to&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;incrementable_traversal_tag&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;single_pass_traversal_tag&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;forward_traversal_tag&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bidirectional_traversal_tag&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;random_access_traversal_tag&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Forward Traversal Iterators（&lt;code&gt;forward_traversal_tag&lt;/code&gt;で表されるイテレータ）はSingle Pass Iterators（&lt;code&gt;single_pass_traversal_tag&lt;/code&gt;で表されるイテレータ）の要求に加えて、イテレータについてデフォルトコンストラクタが要求される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/iterator.html#iterator_adaptor&#34; name=&#34;iterator_adaptor&#34;&gt;より楽にイテレータを作成する（iterator_adaptor）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::iterator_facade&lt;/code&gt;では、要求される関数を自分で定義しなければならない。&lt;code&gt;boost::iterator_facade&lt;/code&gt;は柔軟ではあるが、決まったパターンを書くのは面倒である。例えば、既存のイテレータやポインタを用いてイテレータを作成する場合はイテレータやポインタを変数と要求される関数をいちいち書かなければならないことがそれに当たるだろう。そこで、&lt;code&gt;boost::iterator_adaptor&lt;/code&gt;を使えば、あらかじめ既存のイテレータやポインタを変数に持っており要求される関数が定義されているイテレータのクラスを作ることができる。&lt;/p&gt;
&lt;p&gt;端的に言えば、&lt;code&gt;boost::iterator_adaptor&lt;/code&gt;は&lt;code&gt;boost::iterator_facade&lt;/code&gt;を継承しており、イテレートするための変数と要求する関数が定義されているクラスである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::iterator_adaptor&lt;/code&gt;のテンプレート引数は以下のようにとる。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数番号&lt;/th&gt;
&lt;th&gt;パラメータ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Derived&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iterator_adaptor&lt;/code&gt;を継承するクラスの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Base&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレートするための変数の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;となる型&lt;br /&gt;（省略可。デフォルトは&lt;code&gt;iterator_traits&amp;lt;Base&amp;gt;::value_type&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CategoryOrTraversal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの種類を示すタグ&lt;br /&gt;（省略可。デフォルトは&lt;code&gt;iterator_traversal&amp;lt;Base&amp;gt;::type&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレートするための変数の参照型&lt;br /&gt;（省略可。&lt;code&gt;Value&lt;/code&gt;も省略した場合のデフォルトは&lt;code&gt;iterator_traits&amp;lt;Base&amp;gt;::reference&lt;/code&gt;。&lt;code&gt;Value&lt;/code&gt;が指定されている場合のデフォルトは&lt;code&gt;Value&amp;amp;&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Difference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を示すための型&lt;br /&gt;（省略可。デフォルトは&lt;code&gt;iterator_traits&amp;lt;Base&amp;gt;::difference&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;イテレートするための変数を間接参照した型がイテレータの&lt;code&gt;value_type&lt;/code&gt;となる型と一致する場合は、&lt;code&gt;Value&lt;/code&gt;にデフォルトが使うことできる。例えば、イテレートするための変数の型が&lt;code&gt;int*&lt;/code&gt;で、間接参照した型が&lt;code&gt;int&lt;/code&gt;の場合がそれにあたる。また、イテレートするための変数が既存のイテレータやポインタの場合、イテレータの種類を示すタグをデフォルトにできる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::iterator_adaptor&lt;/code&gt;では、&lt;code&gt;increment()&lt;/code&gt;メンバ関数や&lt;code&gt;decrement()&lt;/code&gt;メンバ関数などの要求されるメンバ関数があらかじめ定義されているが、&lt;code&gt;boost::iterator_core_access&lt;/code&gt;を&lt;code&gt;friend&lt;/code&gt;クラスにして&lt;code&gt;increment()&lt;/code&gt;メンバ関数などの要求されるメンバ関数を書くことによって動作をカスタマイズできる。また、このとき&lt;code&gt;boost::iterator_adaptor&lt;/code&gt;の&lt;code&gt;protected&lt;/code&gt;メンバである&lt;code&gt;base()&lt;/code&gt;関数や&lt;code&gt;base_reference()&lt;/code&gt;関数を使うことで指定した既存のイテレータやポインタなどのオブジェクトにアクセスして操作できる。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;iterator_adaptors.hpp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;container&lt;/span&gt;
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; values_[&lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;];

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; iterator &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator_adaptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;/span&gt;
    {
        iterator(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
            iterator&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;iterator_adaptor_&lt;/span&gt;( p )
        { }
    };

    container()
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i ) {
            values_[i] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i;
        }
    }

    iterator begin()
    { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; iterator( values_ ); }

    iterator end()
    { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; iterator( values_ &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt; ); }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    container c;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;( container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator itr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.begin(); itr &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; c.end(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;itr ) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;itr &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>JSONの読み込み／書き込み -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/json.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/json.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;JSONの読み込み／書き込み&lt;/h1&gt;
&lt;p&gt;JSONの読み込み、書き込みには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/property_tree.html&#34; target=&#34;_blank&#34;&gt;Boost Property Tree Library&lt;/a&gt;を使用する。Boost.PropertyTreeは、ツリー構造の汎用プロパティ管理のためのライブラリで、XML, JSON, INIファイルなどへの統一的なアクセス方法を提供する。&lt;/p&gt;
&lt;p&gt;ここでは、Boost.PropertyTreeを使用したJSONファイルの読み込みと書き込みを紹介する。&lt;/p&gt;
&lt;h1&gt;インデックス&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#read&#34;&gt;JSONの読み込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#write&#34;&gt;JSONの書き込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#key-includes-dot&#34;&gt;応用編：キーにドット（.）が含まれる場合の子ノードの挿入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#read&#34; name=&#34;read&#34;&gt;JSONの読み込み&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JSONの読み込みには、Pboost::property_tree::read_json()`関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数を使用するには、&lt;code&gt;&amp;lt;boost/property_tree/json_parser.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;以下のJSONファイルを読み込んでみよう。&lt;/p&gt;
&lt;p&gt;data.json&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{
   &#34;Data&#34;: 
   {
      &#34;value&#34;: 3,
      &#34;str&#34;: &#34;Hello&#34;,
      &#34;info&#34;: 
      [
         {&#34;id&#34;: 1, &#34;name&#34;: &#34;Alice&#34;},
         {&#34;id&#34;: 2, &#34;name&#34;: &#34;Millia&#34;}
      ]
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/json_parser.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/optional.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ptree pt;
    read_json(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data.json&#34;&lt;/span&gt;, pt);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Data.value&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Data.str&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.str&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Data.info&lt;/span&gt;
    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ptree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; child, pt.get_child(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.info&#34;&lt;/span&gt;)) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ptree&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; info &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; child.second;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Data.info.id&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; info.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id&#34;&lt;/span&gt;)) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; id.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Data.info.name&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; info.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name&#34;&lt;/span&gt;)) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;value : 3
str : Hello
id : 1
name : Alice
id : 2
name : Millia
&lt;/code&gt;&lt;/pre&gt;
まず、「Data.value」要素を取得するには、JSONが読み込まれた&lt;code&gt;boost::property_tree:ptree&lt;/code&gt;に対して以下のように指定する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

要素アクセスのパス指定には、ドットによるアクセスを行う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptree&lt;/code&gt;クラスの&lt;code&gt;get_optional()&lt;/code&gt;メンバ関数によって、指定された型に変換された要素が返される。要素の取得に失敗した場合は、&lt;code&gt;boost::optional&lt;/code&gt;型の無効値が返される。&lt;/p&gt;
&lt;p&gt;次に、「Data.info」の要素を列挙するには、&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;オブジェクトに対して、&lt;code&gt;get_child()&lt;/code&gt;メンバ関数でパス指定し、子ツリーを取得する。取得した子ツリーを&lt;code&gt;BOOST_FOREACH&lt;/code&gt;でループし、各要素を取得する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ptree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; child, pt.get_child(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.info&#34;&lt;/span&gt;)) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#write&#34; name=&#34;write&#34;&gt;JSONの書き込み&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JSONを書き込むには、要素を設定するために&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;クラスの&lt;code&gt;put()&lt;/code&gt;メンバ関数を使用し、&lt;code&gt;add_child()&lt;/code&gt;メンバで子ツリーに登録する。&lt;/p&gt;
&lt;p&gt;保存には、&lt;code&gt;boost::property_tree::write_json()&lt;/code&gt;関数に、ファイル名と&lt;code&gt;ptree&lt;/code&gt;オブジェクトを指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/json_parser.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/optional.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ptree pt;

    pt.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.value&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    pt.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.str&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    ptree child;
    {
        ptree info;
        info.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
        info.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;);
        child.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;, info));
    }
    {
        ptree info;
        info.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
        info.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Millia&#34;&lt;/span&gt;);
        child.push_back(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;, info));
    }
    pt.add_child(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data.info&#34;&lt;/span&gt;, child);

    write_json(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data_out.json&#34;&lt;/span&gt;, pt);
}
&lt;/pre&gt;&lt;/div&gt;

出力されたdata_out.json：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{
    &#34;Data&#34;:
    {
        &#34;value&#34;: &#34;3&#34;,
        &#34;str&#34;: &#34;Hello&#34;,
        &#34;info&#34;:
        [
            {
                &#34;id&#34;: &#34;1&#34;,
                &#34;name&#34;: &#34;Alice&#34;
            },
            {
                &#34;id&#34;: &#34;2&#34;,
                &#34;name&#34;: &#34;Millia&#34;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/json.html#key-includes-dot&#34; name=&#34;key-includes-dot&#34;&gt;応用編：キーにドット（.）が含まれる場合の子ノードの挿入&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通常、&lt;code&gt;ptree&lt;/code&gt;オブジェクト に子要素を追加する場合は &lt;code&gt;put_child()&lt;/code&gt;メンバ関数 または &lt;code&gt;add_child()&lt;/code&gt; メンバ関数を利用するが、これら高レベル関数ではドットが区切り文字として扱われるので、キーにドットが含まれる場合は挿入がうまく行かない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;【擬似コードによる処理の流れ】&lt;/span&gt;
R ptree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;put_child(key_str, node) {
    key_str&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;をパーズしてセパレータを認識する；&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;push_back(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;パーズした子階層&lt;/span&gt;, node);
}
&lt;/pre&gt;&lt;/div&gt;

そこで、区切り文字を無効にしたいキーがある場合は、そのキーに対して明示的に&lt;code&gt;boost::property_tree::path&lt;/code&gt;クラスを初期化するステップを踏む。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pt.put_child(
      property_tree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;result for &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;test.dat&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\0&#39;&lt;/span&gt;) &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// セパレータを無効化&lt;/span&gt;
    , {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt;}
);
&lt;/pre&gt;&lt;/div&gt;

出力例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{
    &#34;result for \&#34;test.dat\&#34;&#34;: &#34;success&#34;
}
&lt;/code&gt;&lt;/pre&gt;
この方法は結構万能である。さらなる子階層への追加は &lt;code&gt;operator /&lt;/code&gt; を利用し以下のようにする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;property_tree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptree result_data_pt;
result_data_pt.push_back({&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1234&lt;/span&gt;});
result_data_pt.push_back({&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5678&lt;/span&gt;});
pt.put_child(
    property_tree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;path(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;result for &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;test.dat&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&#34;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\0&#39;&lt;/span&gt;) &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// セパレータを無効化&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;result_data&#34;&lt;/span&gt;,
    result_data_pt);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;{
    &#34;result for \&#34;test.dat\&#34;&#34;: {
        &#34;result_data&#34;: [
            1234,
            5678
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無名関数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/lambda.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/lambda.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;無名関数&lt;/h1&gt;
&lt;p&gt;無名関数は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/lambda.html&#34; target=&#34;_blank&#34;&gt;Boost Lambda Library&lt;/a&gt; または、 &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/phoenix/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Phoenix Library&lt;/a&gt; を使用することによって表現できる。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#member-variable&#34;&gt;メンバ変数を扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#multiple-expressions&#34;&gt;2つ以上の式を書く&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Lambdaによって無名関数を表現するには、&lt;code&gt;boost::lambda&lt;/code&gt;名前空間の&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;というプレースホルダーと呼ばれる値を使用する。以下は、コンテナから特定の条件に一致した値を見つけ出す例である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/find_if.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_target_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(v, is_target_value);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; v.end())
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Not Found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
これを、Boost.Lambdaを使用して書くと以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lambda/lambda.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/find_if.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    v.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lambda&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(v, &lt;span style=&#34;color:#ff0000&#34;&gt;_1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; v.end())
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Not Found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;_1&lt;/code&gt;という値は、「無名関数の第1引数」を意味し、この場合、コンテナの各要素が渡されることになる。&lt;/p&gt;
&lt;p&gt;Boost.Lambdaでは、&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;のようなプレースホルダーに対して各種演算処理を適用するというスタイルで、無名関数を表現する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#member-variable&#34; name=&#34;member-variable&#34;&gt;メンバ変数を扱う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Lambdaでメンバ変数を扱うには、&lt;code&gt;operator-&amp;gt;*()&lt;/code&gt;を使用する。左辺はポインタである必要があるため、&lt;code&gt;&amp;amp;_1&lt;/code&gt;のように表記し、右辺にはメンバ変数ポインタを指定する。&lt;/p&gt;
&lt;p&gt;以下は、&lt;code&gt;Person&lt;/code&gt;クラスを要素とするコンテナから、&lt;code&gt;name&lt;/code&gt;メンバ変数をキーにして該当する要素を検索する処理である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lambda/lambda.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/find_if.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Person {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;

    Person() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; id(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}
    Person(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; id(id), name(name) {}
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(Person(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;));
    v.push_back(Person(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;));
    v.push_back(Person(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lambda&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_1;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;find_if(v, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;_1 &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;name &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; v.end())
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Not Found&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lambda.html#multiple-expressions&#34; name=&#34;multiple-expressions&#34;&gt;2つ以上の式を書く&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Phoenix のカンマ演算子を使用して、複数の式を書くことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/phoenix.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/irange.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n){
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; phx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;phoenix;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;arg_names&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;arg1;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// カンマ演算子で複数の式を書く&lt;/span&gt;
    (
        phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;disp, arg1),        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// disp(10)&lt;/span&gt;
        phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;disp, arg1 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; arg1)  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// disp(10 + 10)&lt;/span&gt;
    )(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);

    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 0～9 までの合計を計算する&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;irange(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;), (
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; arg1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;,
        phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(sum) &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; arg1
    ));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;10
20
0,1,2,3,4,5,6,7,8,9,
45
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>線形代数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/linear-algebra.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/linear-algebra.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;線形代数&lt;/h1&gt;
&lt;p&gt;線形代数には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/numeric/ublas/doc/index.htm&#34; target=&#34;_blank&#34;&gt;Boost uBLAS Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#basic-vector-usage&#34;&gt;ベクトルの基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#vector-length&#34;&gt;ベクトルの長さを取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#normalize&#34;&gt;ベクトルを正規化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#inner-product&#34;&gt;2つのベクトルの内積を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#angle&#34;&gt;2つのベクトルが成す角度を求める&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#basic-vector-usage&#34; name=&#34;basic-vector-usage&#34;&gt;ベクトルの基本操作&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ベクトルには、&lt;code&gt;boost::numeric::ublas&lt;/code&gt;名前空間の&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/numeric/ublas/doc/vector.htm#vector&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt;クラステンプレートを使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ublas &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ublas;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// double型を要素とする3次元ベクトル&lt;/span&gt;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各要素の参照と代入&lt;/span&gt;
    v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// x&lt;/span&gt;
    v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// y&lt;/span&gt;
    v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// z&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 出力ストリーム&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; u(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ベクトルの演算&lt;/span&gt;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; u;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; u;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ベクトルの複合演算&lt;/span&gt;
    v &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; u;
    v &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; u;
    v &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;;
    v &lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[3](3,0,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;vector&lt;/code&gt;クラスは、テンプレート引数で要素の型をとり、コンストラクタでは次元数を引数にとる。&lt;/p&gt;
&lt;p&gt;各要素は、&lt;code&gt;operator[]()&lt;/code&gt;で参照できる。&lt;/p&gt;
&lt;p&gt;ベクトルの演算は、四則演算全てをサポートしており、各演算は以下の意味を持つ：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v + u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(v[0] + u[0], v[1] + u[1], ..., v[i] + u[i])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v - u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(v[0] - u[0], v[1] - u[1], ..., v[i] - u[i])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v * n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(v[0] * n, v[1] * n, ..., v[i] * n)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v / n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(v[0] / n, v[1] / n, ..., v[i] / n)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#vector-length&#34; name=&#34;vector-length&#34;&gt;ベクトルの長さを取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ベクトルの長さを取得するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/numeric/ublas/doc/vector_expression.htm#vector_reductions&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::numeric::ublas::norm_2()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数は、ユークリッドノルム(2-ノルム)を計算して返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ublas &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ublas;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ベクトルの長さを取得する&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; length &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;norm_2&lt;/span&gt;(v);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2.23607
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#normalize&#34; name=&#34;normalize&#34;&gt;ベクトルを正規化する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ベクトルの正規化とは、ベクトルの長さを1にする変換のことである。Boost.uBLASでは、正規化のための関数が直接的には用意されていないため、自分で計算する必要がある。&lt;/p&gt;
&lt;p&gt;正規化の計算は、以下の&lt;code&gt;normalize()&lt;/code&gt;関数のように、ベクトルを長さで割ることでできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/io.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ublas &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ublas;

ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; normalize(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;v &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;norm_2(v)&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規化&lt;/span&gt;
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; normalized_vec &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; normalize(v);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;length : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;norm_2(normalized_vec) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; normalized_vec &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;length : 1
[3](0.894427,0,0.447214)
&lt;/code&gt;&lt;/pre&gt;
値の比率をそのままに、長さが1になっていることがわかる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#inner-product&#34; name=&#34;inner-product&#34;&gt;2つのベクトルの内積を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つのベクトルの内積を求めるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/numeric/ublas/doc/vector_expression.htm#vector_operations&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::ublas::inner_prod()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数は、2つのベクトルを引数にとり、ベクトルの要素型で内積値を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ublas &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ublas;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;

    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; u(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    u[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    u[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;inner_prod&lt;/span&gt;(v, u);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;-3
&lt;/code&gt;&lt;/pre&gt;
内積は、2つのベクトルが同じ方向を向いていれば正の値、逆方向を向いていれば負の値を返すという特徴がある。&lt;/p&gt;
&lt;p&gt;これを利用して、「負の値だったら位置ベクトルが目的地に到達した(衝突した)」と判定するのに応用できる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/linear-algebra.html#angle&#34; name=&#34;angle&#34;&gt;2つのベクトルが成す角度を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つのベクトルが成す角度の計算を、以下の&lt;code&gt;angle()&lt;/code&gt;関数の実装で示す。この関数は、2つのベクトルを与えると、ラジアンで角度が返される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/numeric/ublas/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/clamp.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/geometry/util/math.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/math/constants/constants.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ublas &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ublas;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
T &lt;span style=&#34;color:#ff0000&#34;&gt;angle(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; u)&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T length &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;norm_2(v) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;norm_2(u);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;geometry&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;math&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equals(length, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;))) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0.0&lt;/span&gt;);
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;inner_prod(v, u) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; length;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T rounded &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;clamp(x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;-1.0&lt;/span&gt;), &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acos(rounded);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
T radian_to_degree(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;180.0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;math&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pi&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    v[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

    ublas&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; u(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    u[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    u[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;angle(v, u); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 角度がラジアンで返される&lt;/span&gt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; deg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; radian_to_degree(result); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ディグリに変換してみる&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; deg &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0.785398
45
&lt;/code&gt;&lt;/pre&gt;
計算の詳細は、Wikipediaを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%AE%E3%81%AA%E3%81%99%E8%A7%92&#34; target=&#34;_blank&#34;&gt;ベクトルのなす角 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リスト処理の遅延評価 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/list.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/list.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;リスト処理の遅延評価&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/range/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Range Library&lt;/a&gt;のRangeアダプタは、リスト処理を遅延評価する仕組みを提供する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#filter&#34;&gt;条件抽出 - &lt;code&gt;filtered&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#transform-value&#34;&gt;値の変換 - &lt;code&gt;transformed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#transform-type&#34;&gt;型変換 - &lt;code&gt;transformed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#reverse&#34;&gt;逆順に走査する - &lt;code&gt;reversed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#map-key&#34;&gt;mapのキーのみを抽出する - &lt;code&gt;map_keys&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#map-value&#34;&gt;mapの値のみを抽出する - &lt;code&gt;map_values&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#join&#34;&gt;2つのリストを連結する - &lt;code&gt;join&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#counting-range&#34;&gt;値の範囲を生成する - &lt;code&gt;irange&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#pipe&#34;&gt;リストに対する複数の遅延処理を合成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#filter&#34; name=&#34;filter&#34;&gt;条件抽出 - filtered&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストから値の条件抽出をするには、&lt;code&gt;boost::adapotrs::filtered&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;以下は、&lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt;というリストから、偶数値のみを抽出している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/filtered.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_even&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; filtered(is_even), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#transform-value&#34; name=&#34;transform-value&#34;&gt;値の変換 - transformed&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストの全ての要素に関数を適用するには、&lt;code&gt;boost::adaptors::transformed&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;これは、関数型言語一般での&lt;code&gt;map&lt;/code&gt;関数に相当する。&lt;/p&gt;
&lt;p&gt;以下は、リストの全ての要素に&lt;code&gt;1&lt;/code&gt;を加算する処理である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/transformed.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; }
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; transformed(add), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
3
4
5
6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#transform-type&#34; name=&#34;transform-type&#34;&gt;型変換 - transformed&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストの全ての要素に関数を適用する&lt;code&gt;boost::adaptors::transformed&lt;/code&gt;は、型変換にも使用することができる。&lt;/p&gt;
&lt;p&gt;以下は、リストの全ての要素を&lt;code&gt;int&lt;/code&gt;から&lt;code&gt;std::string&lt;/code&gt;に変換する処理である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/transformed.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string int_to_string(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(x); }

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; disp(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; transformed(int_to_string), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#reverse&#34; name=&#34;reverse&#34;&gt;逆順に走査する - reversed&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストを逆順に走査するには、&lt;code&gt;boost::adaptors::reversed&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/reversed.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; reversed, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
4
3
2
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#map-key&#34; name=&#34;map-key&#34;&gt;mapのキーのみを抽出する - map_keys&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt;、&lt;code&gt;boost::unordered_map&lt;/code&gt;、&lt;code&gt;std::vector&amp;lt;std::pair&amp;lt;Key, Value&amp;gt; &amp;gt;&lt;/code&gt;のようなコンテナからキーのみを抽出するには、&lt;code&gt;boost::adaptors::map_keys&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/map.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map_list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;)
        ;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(m &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; map_keys, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#map-value&#34; name=&#34;map-value&#34;&gt;mapの値のみを抽出する - map_values&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt;、&lt;code&gt;boost::unordered_map&lt;/code&gt;、&lt;code&gt;std::vector&amp;lt;std::pair&amp;lt;Key, Value&amp;gt; &amp;gt;&lt;/code&gt;のようなコンテナから値のみを抽出するには、&lt;code&gt;boost::adaptors::map_values&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/map.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map_list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bob&#34;&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Carol&#34;&lt;/span&gt;)
        ;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(m &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; map_values, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Bob
Alice
Carol
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#join&#34; name=&#34;join&#34;&gt;2つのリストを連結する - join&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リストを連結するには、&lt;code&gt;boost::join()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、2つのリストを連結した新たなリストを返すのではなく、1つのリストの走査が終わったら2つめのリストを走査するRangeを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/join.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;join(v, ls), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#counting-range&#34; name=&#34;counting-range&#34;&gt;値の範囲を生成する - irange&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{1..5}&lt;/code&gt;のような連続した値の範囲を生成する場合には、&lt;code&gt;boost::irange()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数に値の範囲を引数として渡すことで、その値の範囲を走査可能なRandom Access Rangeを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/irange.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1, 5)の範囲を生成する&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;irange(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
3
4
&lt;/code&gt;&lt;/pre&gt;
また、&lt;code&gt;irange&lt;/code&gt;には、第3引数として、値を進めるステップ値も指定することができる。&lt;/p&gt;
&lt;p&gt;これを指定することで、「値を2ずつ進める」といったことが可能になる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/irange.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [1, 10)の範囲を、2ずつ進める&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;irange(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
3
5
7
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/list.html#pipe&#34; name=&#34;pipe&#34;&gt;リストに対する複数の遅延処理を合成する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost Range LibraryのRangeアダプタは、個々の処理を遅延評価するだけでなく、&lt;code&gt;operator|()&lt;/code&gt;でさらに繋ぎ、それらの処理を合成できる。&lt;/p&gt;
&lt;p&gt;以下は、条件抽出(&lt;code&gt;filtered&lt;/code&gt;)と関数適用(&lt;code&gt;transformed&lt;/code&gt;)を合成する処理である。リストが実際に走査されそれらの処理が必要になるまで評価が遅延される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/filtered.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/transformed.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_even&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; filtered(is_even) &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; transformed(add), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ロックフリーキュー -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/lockfree-queue.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/lockfree-queue.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ロックフリーキュー&lt;/h1&gt;
&lt;p&gt;ロックフリーキューには、&lt;a href=&#34;http://www.boost.org/libs/lockfree/&#34; target=&#34;_blank&#34;&gt;Boost Lockfree Library&lt;/a&gt;の&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/queue.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::lockfree::queue&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-queue.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-queue.html#constraint-element-type&#34;&gt;キューに格納可能な型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-queue.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、ロックフリーキューの基本的な使い方を示す。以下は、Producer-Consumerパターンで、一方のスレッドがキューに値を供給し、もう一方のスレッドがキューの値を消費する処理を行っている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lockfree/&lt;span style=&#34;color:#ff0000&#34;&gt;queue&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lockfree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; que(&lt;span style=&#34;color: #666666&#34;&gt;128&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;producer&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;que.&lt;span style=&#34;color:#ff0000&#34;&gt;push&lt;/span&gt;(i)) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キューに値を追加&lt;/span&gt;
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consumer&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (;;) {
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (que.&lt;span style=&#34;color:#ff0000&#34;&gt;pop&lt;/span&gt;(x)) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// キューから値を取り出す&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(producer);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(consumer);

    t1.join();
    t2.join();
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
1
2
3
4
…
&lt;/code&gt;&lt;/pre&gt;
&lt;strong&gt;要素型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;キューに格納する型は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/queue.html&#34; target=&#34;_blank&#34;&gt;boost::lockfree::queue&lt;/a&gt;クラステンプレートの第1テンプレート引数で指定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/queue.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::lockfree::queue&lt;/code&gt;&lt;/a&gt;クラスのコンストラクタでは、キューの最大容量を設定する。最大容量を設定しない構築はできない。&lt;/p&gt;
&lt;p&gt;キューへの追加＆取り出し操作は、最大容量を超えない範囲で行う。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;値の追加&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;値の追加には、&lt;code&gt;queue::push()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は失敗する可能性があるため、追加に成功したかどうかを&lt;code&gt;bool&lt;/code&gt;で返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;値の取り出し&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;値の取り出しには、&lt;code&gt;queue::pop()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、取り出した値をパラメータの参照で返し、取り出しに成功したら&lt;code&gt;true&lt;/code&gt;、失敗したら&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-queue.html#constraint-element-type&#34; name=&#34;constraint-element-type&#34;&gt;キューに格納可能な型&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/queue.html&#34; target=&#34;_blank&#34;&gt;boost::lockfree::queue&lt;/a&gt;クラスには、要素型としてtrivially copyable(&lt;code&gt;memcpy&lt;/code&gt;可能)な型のみを格納できる。&lt;/p&gt;
&lt;p&gt;参照： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130213/1360737911&#34; target=&#34;_blank&#34;&gt;Boost.Lockfree ロックフリーキューの制限&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ロックフリースタック -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/lockfree-stack.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/lockfree-stack.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ロックフリースタック&lt;/h1&gt;
&lt;p&gt;ロックフリースタックには、&lt;a href=&#34;http://www.boost.org/libs/lockfree/&#34; target=&#34;_blank&#34;&gt;Boost Lockfree Library&lt;/a&gt;の&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/stack.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::lockfree::stack&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-stack.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/lockfree-stack.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、ロックフリースタックの基本的な使い方を示す。以下は、Producer-Consumerパターンで、一方のスレッドがスタックに値を供給し、もう一方のスレッドがスタックの値を消費する処理を行っている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lockfree/&lt;span style=&#34;color:#ff0000&#34;&gt;stack&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lockfree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; stk(&lt;span style=&#34;color: #666666&#34;&gt;128&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;producer&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;stk.&lt;span style=&#34;color:#ff0000&#34;&gt;push&lt;/span&gt;(i)) {} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スタックに値を追加&lt;/span&gt;
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consumer&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (;;) {
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (stk.&lt;span style=&#34;color:#ff0000&#34;&gt;pop&lt;/span&gt;(x)) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スタックから値を取り出す&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1(producer);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2(consumer);

    t1.join();
    t2.join();
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
1
2
3
4
…
&lt;/code&gt;&lt;/pre&gt;
&lt;strong&gt;要素型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;スタックに格納する型は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/stack.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::lockfree::stack&lt;/code&gt;&lt;/a&gt;クラステンプレートの第1テンプレート引数で指定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/lockfree/stack.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::lockfree::stack&lt;/code&gt;&lt;/a&gt;クラスのコンストラクタでは、スタックの最大容量を設定する。最大容量を設定しない構築はできない。&lt;/p&gt;
&lt;p&gt;スタックへの追加＆取り出し操作は、最大容量を超えない範囲で行う。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;値の追加&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;値の追加には、&lt;code&gt;stack::push()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は失敗する可能性があるため、追加に成功したかどうかを&lt;code&gt;bool&lt;/code&gt;で返す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;値の取り出し&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;値の取り出しには、&lt;code&gt;stack::pop()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、取り出した値をパラメータの参照で返し、取り出しに成功したら&lt;code&gt;true&lt;/code&gt;、失敗したら&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ロギング -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/logging.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/logging.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ロギング&lt;/h1&gt;
&lt;p&gt;ロギングには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Log Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#basic-usage&#34;&gt;基本的なログ出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#file-log&#34;&gt;ファイルにログを出力する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#filter-loglevel&#34;&gt;ログレベルでフィルタを掛ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#format&#34;&gt;フォーマットを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#auto-flush&#34;&gt;自動的にフラッシュさせる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#append&#34;&gt;追記モードで書き込む&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#rotation&#34;&gt;ログファイルをローテーションさせる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的なログ出力&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130725/1374736211&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130725/1374736211&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#file-log&#34; name=&#34;file-log&#34;&gt;ファイルにログを出力する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130726/1374820081&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130726/1374820081&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#filter-loglevel&#34; name=&#34;filter-loglevel&#34;&gt;ログレベルでフィルタを掛ける&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載
&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130725/1374736211&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130725/1374736211&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#format&#34; name=&#34;format&#34;&gt;フォーマットを設定する&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#auto-flush&#34; name=&#34;auto-flush&#34;&gt;自動的にフラッシュさせる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130806/1375772761&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130806/1375772761&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#append&#34; name=&#34;append&#34;&gt;追記モードで書き込む&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://suikaba.hatenablog.com/entry/2013/08/02/191734&#34; target=&#34;_blank&#34;&gt;http://suikaba.hatenablog.com/entry/2013/08/02/191734&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/logging.html#rotation&#34; name=&#34;rotation&#34;&gt;ログファイルをローテーションさせる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;todo : 以下のエントリから転載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130801/1375340888&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130801/1375340888&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130802/1375427047&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/faith_and_brave/20130802/1375427047&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;documentation boost version is 1.54.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>数学 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/math.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/math.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;数学&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#pi&#34;&gt;円周率を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#gcd&#34;&gt;最大公約数を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#lcm&#34;&gt;最小公倍数を求める&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#pi&#34; name=&#34;pi&#34;&gt;円周率を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;円周率を取得するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/math/&#34; target=&#34;_blank&#34;&gt;Boost Math Library&lt;/a&gt;の&lt;code&gt;boost::math::constants::pi()&lt;/code&gt;関数を使用する。この関数を使用するには、&lt;code&gt;&amp;lt;boost/math/constants/constants.hpp&amp;gt;&lt;/code&gt;ヘッダをインクルードする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pi()&lt;/code&gt;関数のテンプレート引数として、浮動小数点数型を指定することができ、&lt;code&gt;double&lt;/code&gt;だけでなく、&lt;code&gt;float&lt;/code&gt;や&lt;code&gt;long double&lt;/code&gt;、&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html&#34;&gt;多倍長浮動小数点数型&lt;/a&gt;として円周率を取得することもできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;limits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/math/constants/constants.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;pi&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;math&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;pi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout.precision(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max_digits10);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;pi&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.1415926535897931
&lt;/code&gt;&lt;/pre&gt;
参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/pepshiso/20120501&#34; target=&#34;_blank&#34;&gt;C++で円周率を取得する - pepshisoの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#gcd&#34; name=&#34;gcd&#34;&gt;最大公約数を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最大公約数を求めるには、Boost Math Libraryの&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/run_time.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::math::gcd()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数を使用するには、&lt;code&gt;&amp;lt;boost/math/common_factor_rt.hpp&amp;gt;&lt;/code&gt;ヘッダをインクルードする。&lt;/p&gt;
&lt;p&gt;この関数には、2つの整数型の値を指定する。戻り値として、その整数型としての最大公約数が返される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcd&lt;/code&gt;は、「the greatest common divisor(最大公約数)」の略称である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/math/common_factor_rt.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 12と18の最大公約数を求める&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;math&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;gcd&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;18&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/math.html#lcm&#34; name=&#34;lcm&#34;&gt;最小公倍数を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最小公倍数を求めるには、Boost Math Libraryの&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/math/doc/html/math_toolkit/run_time.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::math::lcm()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数を使用するには、&lt;code&gt;&amp;lt;boost/math/common_factor_rt.hpp&amp;gt;&lt;/code&gt;ヘッダをインクルードする。&lt;/p&gt;
&lt;p&gt;この関数には、2つの整数型の値を指定する。戻り値として、その整数型としての最小公倍数が返される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lcm&lt;/code&gt;は、「least common multiple(最小公倍数)」の略称である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/math/common_factor_rt.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2と3の最小公倍数を求める&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;math&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;lcm&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>メモリマップドファイル -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/memory_mapped_file.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/memory_mapped_file.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;メモリマップドファイル&lt;/h1&gt;
&lt;p&gt;メモリマップドファイルには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/interprocess.html&#34; target=&#34;_blank&#34;&gt; Boost Interprocess Library&lt;/a&gt; を使用する。&lt;/p&gt;
&lt;p&gt;Boost.Interprocessは、プロセス間通信をサポートするための各種機能を提供しているライブラリである。ライブラリはビルドを必要としないが、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/date_time.html&#34; target=&#34;_blank&#34;&gt;Boost DateTime Library&lt;/a&gt; を利用している箇所があるため注意すること。&lt;/p&gt;
&lt;p&gt;またこのページでManaged Memory Segmentsについての記述は基本的に&lt;code&gt;managed_mapped_file&lt;/code&gt;以外のクラス(&lt;code&gt;managed_shared_memory&lt;/code&gt;など)でも同様の動作を行う。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#file-mapping&#34;&gt;存在しているファイルからマッピングする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#file-as-temporary-buffer&#34;&gt;ファイルをテンポラリバッファとしての利用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#container-file-mapping&#34;&gt;ファイルをコンテナにマッピングする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#file-mapping&#34; name=&#34;file-mapping&#34;&gt;存在しているファイルからマッピングする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;既に存在しているファイルをマッピングするには、&lt;code&gt;boost::interprocess::file_mapping&lt;/code&gt;クラスを用いることで単純にマッピングすることができる。しかしこれだけではファイルにアクセスできないため、&lt;code&gt;boost::interprocess::mapped_region&lt;/code&gt;クラスでビューを作成してアクセスする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ipc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interprocess;

ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;file_mapping map(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data.dat&#34;&lt;/span&gt;,ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;read_only);
ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mapped_region view(map,ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;read_only);

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; view.get_address();           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッピングしたファイルの先頭アドレス&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; view.get_size(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッピングした領域のサイズ&lt;/span&gt;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; dat( size );
memcpy( dat.data(), ptr, size );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;mapped_region&lt;/code&gt;クラスのコンストラクタ引数でマッピングする領域を指定して、必要な部分のみをビューとして取り出せる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; offset &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッピング領域の開始位置(ファイル先頭から)&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; size   &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;128&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 領域のサイズ&lt;/span&gt;

ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mapped_region view(map,ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;read_only,offset,size);

BOOST_ASSERT( size &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; view.get_size() );
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#file-as-temporary-buffer&#34; name=&#34;file-as-temporary-buffer&#34;&gt;ファイルをテンポラリバッファとしての利用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メモリマップドファイルの機能をテンポラリデータ保存のために利用することもできる。Boost.InterprocessにはManaged Memory Segmentsというオブジェクト生成支援関数群が用意されており、ファイルをテンポラリバッファとして利用するのが簡単になる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;managed_mapped_file&lt;/code&gt;クラスの&lt;code&gt;construct()&lt;/code&gt;メンバを使用し、&lt;code&gt;find()&lt;/code&gt;メンバで検索可能なnamed instanceを生成、unique instanceやanonymous instanceも生成できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/interprocess/managed_mapped_file.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ipc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interprocess;

    ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;file_mapping&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;remove( &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;tmp.dat&#34;&lt;/span&gt; );
    ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;managed_mapped_file mfile( ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;create_only, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;tmp.dat&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4096&lt;/span&gt; );

    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mfile.construct&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MyData&#34;&lt;/span&gt;)( &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt; );

    BOOST_ASSERT( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt; );
    BOOST_ASSERT( p &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; mfile.find&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MyData&#34;&lt;/span&gt;).first );

    mfile.destroy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MyData&#34;&lt;/span&gt;);
    BOOST_ASSERT( &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;mfile.find&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MyData&#34;&lt;/span&gt;).first );

    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mfile.construct&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;anonymous_instance)(&lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);
    BOOST_ASSERT( &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;t &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt; );
    mfile.destroy_ptr(t);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/memory_mapped_file.html#container-file-mapping&#34; name=&#34;container-file-mapping&#34;&gt;ファイルをコンテナにマッピングする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Interprocessには標準ライブラリと同様の使い方が可能なコンテナが用意されており、コンテナをManaged Memory Segmentsを使ってファイル上に直接構築することができる。また、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multi_index/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Multi-Index Containers Library&lt;/a&gt;も利用可能である。&lt;/p&gt;
&lt;p&gt;基本的にはManaged Memory Segmentsクラスから取得できる&lt;code&gt;segment_manager&lt;/code&gt;を使ってアロケータを構築、そのアロケータを使ったコンテナを生成することでコンテナ並びにコンテナの要素をファイル上に構築できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/interprocess/managed_mapped_file.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/interprocess/containers/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/interprocess/allocators/allocator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/generate.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; ipc &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;interprocess;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;managed_mapped_file&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;segment_manager&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;allocator_t&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;allocator_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;vector_t&lt;/span&gt;;

    ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;file_mapping&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;remove( &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;tmp.dat&#34;&lt;/span&gt; );
    ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;managed_mapped_file mfile( ipc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;create_only, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;tmp.dat&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4096&lt;/span&gt; );

    &lt;span style=&#34;color: #B00040&#34;&gt;vector_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; vec &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mfile.construct&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;vector_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MyVector&#34;&lt;/span&gt;)(mfile.get_segment_manager());

    vec&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;resize(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vec,[](){ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;; });
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vec,[](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ムーブ可能なクラスを定義する -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/move.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/move.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ムーブ可能なクラスを定義する&lt;/h1&gt;
&lt;p&gt;Boost1.49から導入された&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/move.html&#34; target=&#34;_blank&#34;&gt;Boost Move Library&lt;/a&gt;を使用することで、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03環境でもムーブセマンティクスをエミュレートし、&lt;/li&gt;
&lt;li&gt;C++11とC++03の両方でムーブセマンティクスが使用できるポータブルなコードを書くことができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(TODO： エミュレーションの制限を書く)&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#define-copyable-and-movable-class&#34;&gt;コピー可能／ムーブ可能なクラスを定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#use-movable-base&#34;&gt;ムーブ可能な基底クラス／メンバ変数を使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#define-non-copyable-but-movable-class&#34;&gt;コピー不可／ムーブ可能なクラスを定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#movable-container&#34;&gt;ムーブセマンティクスに対応したコンテナを使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#limit-emulation&#34;&gt;エミュレーションの制限&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#define-copyable-and-movable-class&#34; name=&#34;define-copyable-and-movable-class&#34;&gt;コピー可能／ムーブ可能なクラスを定義する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラス宣言の&lt;code&gt;private&lt;/code&gt;セクションに「&lt;code&gt;BOOST_COPYABLE_AND_MOVABLE(クラス名)&lt;/code&gt;」を置く。&lt;/li&gt;
&lt;li&gt;クラスの型の&lt;code&gt;const&lt;/code&gt;参照を引数に取るコピーコンストラクタを定義する。&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;BOOST_COPY_ASSIGN_REF(クラス名)&lt;/code&gt;」を引数に取るコピー代入演算子を定義する。&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;BOOST_RV_REF(クラス名)&lt;/code&gt;」を引数に取るムーブコンストラクタとムーブ代入演算子を定義する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;clone_ptr&lt;/span&gt;
{
    &lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コピー可能／ムーブ可能であることを示す&lt;/span&gt;
    BOOST_COPYABLE_AND_MOVABLE(clone_ptr)

    T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr;

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コンストラクタ&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clone_ptr&lt;/span&gt;(T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ptr(p) {}

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コンストラクタ&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;clone_ptr() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt; ptr; }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コピーセマンティクス&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コピーコンストラクタ(クラスの型のconst参照を引数にとる)&lt;/span&gt;
    clone_ptr(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; clone_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ptr(p.ptr &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; p.ptr&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;clone() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {}

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入演算子(BOOST_COPY_ASSIGN_REF(クラス名)を引数に取る)&lt;/span&gt;
    clone_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_COPY_ASSIGN_REF(clone_ptr) p)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;p){
            T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;tmp_p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p.ptr &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; p.ptr&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;clone() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt; ptr;
            ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; tmp_p;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブセマンティクス&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブコンストラクタ(BOOST_RV_REF(クラス名)を引数に取る)&lt;/span&gt;
    clone_ptr(BOOST_RV_REF(clone_ptr) p)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ptr(p.ptr) { p.ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブ代入演算子(BOOST_RV_REF(クラス名)を引数に取る)&lt;/span&gt;
    clone_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_RV_REF(clone_ptr) p)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;p){
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt; ptr;
            ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; p.ptr;
            p.ptr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};
&lt;/pre&gt;&lt;/div&gt;

※ リソースを何も保持していないクラス(例えば&lt;code&gt;std::complex&lt;/code&gt;など)は自分でコピーコンストラクタを定義する必要ない。(コンパイラがデフォルトで最適なコピーコンストラクタを定義するため)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#use-movable-base&#34; name=&#34;use-movable-base&#34;&gt;ムーブ可能な基底クラス／メンバ変数を使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;クラスのムーブコンストラクタ／ムーブ代入演算子が呼ばれる際に、適切に基底クラス、メンバ変数のムーブコンストラクタ／ムーブ代入演算子が呼ばれるようにする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt;
{
    BOOST_COPYABLE_AND_MOVABLE(Base)

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Base(){}

    Base(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Base &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x) {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt;}             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーコンストラクタ&lt;/span&gt;

    Base(BOOST_RV_REF(Base) x) {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt;}      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブコンストラクタ&lt;/span&gt;

    Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_RV_REF(Base) x)
    {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;}                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入演算子&lt;/span&gt;

    Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_COPY_ASSIGN_REF(Base) x)
    {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;}                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入演算子&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; Base &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;clone() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Base(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);  }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;Base(){}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Member&lt;/span&gt;
{
    BOOST_COPYABLE_AND_MOVABLE(Member)

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Member(){}

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンパイラが生成したコピーコンストラクタ...&lt;/span&gt;

    Member(BOOST_RV_REF(Member))  {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt;}      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブコンストラクタ&lt;/span&gt;

    Member &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_RV_REF(Member))   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入演算子&lt;/span&gt;
    {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;  }

    Member &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_COPY_ASSIGN_REF(Member))   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入演算子&lt;/span&gt;
    {&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/**/&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;  }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Base
{
    BOOST_COPYABLE_AND_MOVABLE(Derived)
    Member mem_;

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Derived(){}

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンパイラが生成したコピーコンストラクタ...&lt;/span&gt;

    Derived(BOOST_RV_REF(Derived) x)             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブコンストラクタ&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; Base(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(x))),
            mem_(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(x.mem_)) { }

    Derived&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_RV_REF(Derived) x)  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ代入演算子&lt;/span&gt;
    {
        Base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(x)));
        mem_  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(x.mem_);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }

    Derived&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_COPY_ASSIGN_REF(Derived) x)  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー代入演算子&lt;/span&gt;
    {
        Base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(x));
        mem_  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.mem_;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;

※ C++03のコンパイラでのエミュレーションによるムーブセマンティクスの制限として、上記のムーブコンストラクタではムーブの直前に&lt;code&gt;Base &amp;amp;&lt;/code&gt;へキャストする必要がある。(これによって正しく&lt;code&gt;Base&lt;/code&gt;クラスのムーブコンストラクタが呼ばれるようになる)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#define-non-copyable-but-movable-class&#34; name=&#34;define-non-copyable-but-movable-class&#34;&gt;コピー不可／ムーブ可能なクラスを定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;unique_ptr&lt;/code&gt;や&lt;code&gt;thread&lt;/code&gt;など、コピー不可／ムーブ可能なクラスを、Boost.Moveを使用して定義できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クラスの&lt;code&gt;private&lt;/code&gt;セクションに「&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE(クラス名)&lt;/code&gt;」を置く。&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;BOOST_RV_REF(クラス名)&lt;/code&gt;」を引数に取るムーブコンストラクタとムーブ代入演算子を定義する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/move/move.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;stdexcept&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;file_descriptor&lt;/span&gt;
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; os_descr_;

    &lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コピー不可／ムーブ可能であることを示す&lt;/span&gt;
    BOOST_MOVABLE_BUT_NOT_COPYABLE(file_descriptor)

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//コンストラクタ&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; file_descriptor(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;filename &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; os_descr_(filename &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; operating_system_open_file(filename) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;os_descr_) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;runtime_error(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;file not found&#34;&lt;/span&gt;);  }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//デストラクタ&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;file_descriptor()
    {  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;os_descr_)  operating_system_close_file(os_descr_);  }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブコンストラクタ(BOOST_RV_REF(クラス名)を引数に取る)&lt;/span&gt;
    file_descriptor(BOOST_RV_REF(file_descriptor) x)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;  os_descr_(x.os_descr_)
    {  x.os_descr_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;  }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブ代入演算子(BOOST_RV_REV(クラス名)を引数に取る)&lt;/span&gt;
    file_descriptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(BOOST_RV_REF(file_descriptor) x)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;os_descr_) operating_system_close_file(os_descr_);
        os_descr_   &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.os_descr_;
        x.os_descr_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; empty() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;   {  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os_descr_ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#movable-container&#34; name=&#34;movable-container&#34;&gt;ムーブセマンティクスに対応したコンテナを使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Containerなど、ムーブセマンティクスに対応したコンテナを使用すると、コピー不可／ムーブ可能なクラスをコンテナに入れて扱える。&lt;/p&gt;
&lt;p&gt;Boostにおける、ムーブ対応しているコンテナは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Containerの全てのコンテナ&lt;/li&gt;
&lt;li&gt;Boost.CircularBuffer (1.55.0から)&lt;/li&gt;
&lt;li&gt;Boost.Multi-Index (1.55.0から)&lt;ul&gt;
&lt;li&gt;Boost.Multi-Indexで実装されているBoost.Bimapも、自動的に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boost.Unordered (1.49.0から)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/container/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&#39;file_descriptor&#39;クラスはコピー不可であるが、&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ムーブセマンティクスのおかげで関数から返すことが可能である&lt;/span&gt;
file_descriptor &lt;span style=&#34;color: #0000FF&#34;&gt;create_file_descriptor&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;filename)
{  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; file_descriptor(filename);  }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//ファイルを開いてディスクリプタを取得する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&#39;create_file_descriptor&#39;から返される一時オブジェクトは&#39;fd&#39;にムーブされる&lt;/span&gt;
    file_descriptor fd &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; create_file_descriptor(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;filename&#34;&lt;/span&gt;);
    assert(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;fd.empty());

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//fdをvectorの中へmoveする&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;file_descriptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v.push_back(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(fd));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//所有権が移動したことを確認&lt;/span&gt;
    assert(fd.empty());
    assert(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;v[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;].empty());

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//file_descriptorがコピー不可であり、vectorのコピーコンストラクタは&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//value_typeのコピーコンストラクタを要求するので、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//以下のコメントアウトを外すとコンパイルエラーが発生する&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//boost::container::vector&amp;lt;file_descriptor&amp;gt; v2(v);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/move.html#limit-emulation&#34; name=&#34;limit-emulation&#34;&gt;エミュレーションの制限&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be written...&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>MPI による並列計算 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/mpi.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/mpi.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;MPI による並列計算&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/mpi.html&#34; target=&#34;_blank&#34;&gt;Boost MPI Library&lt;/a&gt;はメッセージ通信インターフェイスである MPI を C++ でより簡単に扱えるようにしたライブラリである。&lt;/p&gt;
&lt;p&gt;このライブラリを使用する際には MPI の実装 (OpenMPI, MPICH...) が必要になるため注意すること。&lt;/p&gt;
&lt;p&gt;また、 C MPI と Boost.MPI の対応は &lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/mpi/tutorial.html#mpi.c_mapping&#34; target=&#34;_blank&#34;&gt;Mapping from C MPI to Boost.MPI&lt;/a&gt; を参照。&lt;/p&gt;
&lt;p&gt;とくに断りがなければ、ここで紹介するプログラムは C++11 を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#build&#34;&gt;Boost.MPI を使ったプログラムをビルドする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#initialize&#34;&gt;MPI の初期化を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#rank-and-size&#34;&gt;自身のランクやノード数を調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#scatter&#34;&gt;計算するデータを均等に分散させる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#broadcast&#34;&gt;あるデータを全てのランクで共有する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#gather&#34;&gt;計算したデータをあるランクに集める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#peer-to-peer&#34;&gt;1対1の通信を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#async-peer-to-peer&#34;&gt;1対1の通信を非同期で行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#serialize&#34;&gt;非プリミティブ型を他のノードへ送信する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#speed-up-all-same-rank&#34;&gt;全てのランクが同じ環境であった場合の高速化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#build&#34; name=&#34;build&#34;&gt;Boost.MPI を使ったプログラムをビルドする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ビルド自体は mpic++、 mpicxx などのインストールした MPI 実装で用意されている C++ 用コンパイラを用いればよいが、Boost.MPI および Boost.Serialization ライブラリをリンクする必要がある。&lt;/p&gt;
&lt;p&gt;以下は Boost.MPI を用いたコード bmpi.cpp をビルドするコマンドである。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;$ mpicxx -I/boost/include -L/boost/lib -o bmpi bmpi.cpp -lboost_mpi -lboost_serialization
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#initialize&#34; name=&#34;initialize&#34;&gt;MPI の初期化を行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.MPI で &lt;code&gt;MPI_Init()&lt;/code&gt;、 &lt;code&gt;MPI_Finalize()&lt;/code&gt; 相当の処理を行う場合、 &lt;code&gt;boost::mpi::environment&lt;/code&gt; クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;environment&lt;/code&gt; クラスは、 コンストラクタで &lt;code&gt;MPI_Init()&lt;/code&gt; を呼び出し、 デストラクタで &lt;code&gt;MPI_Finalize()&lt;/code&gt; を呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#rank-and-size&#34; name=&#34;rank-and-size&#34;&gt;自身のランクやノード数を調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;自身のランクや、 全体のノード数を調べるときは &lt;code&gt;boost::mpi::communicator&lt;/code&gt; クラスを使用する。&lt;/p&gt;
&lt;p&gt;その &lt;code&gt;rank()&lt;/code&gt; メンバ関数で自身のランク数、 &lt;code&gt;size()&lt;/code&gt; メンバ関数でノード数を取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Rank : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Number of Node : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; world.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#scatter&#34; name=&#34;scatter&#34;&gt;計算するデータを均等に分散させる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;計算したいデータはおそらく大抵の場合ファイルなど外部から入力されるデータである。&lt;/p&gt;
&lt;p&gt;そのため、データはあるランクで生成し、その後全てのランクにデータを分散させた方が効率が良いと考えられる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scatter()&lt;/code&gt; 関数は、データを均等に全てのノードに分散させる関数である。&lt;/p&gt;
&lt;p&gt;以下のプログラムは、 ベクトルをランク 0 で生成して全てのノードに均等に分散するものである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/collectives.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;;
    assert(N &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; world.size() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {
        v.resize(N);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(v), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(v), []() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX; });
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
    {
        v.resize(N &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; world.size());
    }
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scatter(world, v, v.data(), N &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; world.size(), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {
        v.resize(N &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; world.size());
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(v), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(v)
        , [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;](&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; i) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Rank : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#broadcast&#34; name=&#34;broadcast&#34;&gt;あるデータを全てのランクで共有する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;あるデータを全ノードで共有したい場合、 &lt;code&gt;broadcast()&lt;/code&gt; を用いる。&lt;/p&gt;
&lt;p&gt;以下は、ランク 0 で計算したデータを他のランクへ共有するプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/collectives.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

  constexpr &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;128&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(N);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(v), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(v), []() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX; });
  }
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;broadcast(world, v, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#gather&#34; name=&#34;gather&#34;&gt;計算したデータをあるランクに集める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ある計算を MPI で分散させたいとする。その際、分散したデータをどこかに集計しておく必要がある。&lt;/p&gt;
&lt;p&gt;その場合は &lt;code&gt;gather()&lt;/code&gt; 関数を用いることで、あるランクに計算結果を集めることができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gather()&lt;/code&gt; 関数では出力先の変数に &lt;code&gt;std::vector&lt;/code&gt; を渡すことができる。 &lt;code&gt;std::vector&lt;/code&gt; を渡した場合、 &lt;code&gt;gather()&lt;/code&gt; 関数は &lt;code&gt;std::vector&lt;/code&gt; のサイズを必要分だけ &lt;code&gt;resize()&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;以下のプログラムはベクトルの加算演算を MPI で計算するものである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/collectives.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; x;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; y;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));
        x.resize(world.size());
        y.resize(world.size());
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX; };
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(x), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(x), f);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(y), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(y), f);
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x_value;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; y_value;
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scatter(world, x, x_value, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scatter(world, y, y_value, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x_value &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; y_value;
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;gather(world, result, x, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Result.&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(x), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(x), [](&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; i) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; });
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#peer-to-peer&#34; name=&#34;peer-to-peer&#34;&gt;1対1の通信を行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1対1通信には &lt;code&gt;boost::mpi::communicator&lt;/code&gt; クラスの &lt;code&gt;send()&lt;/code&gt; メンバ関数、および &lt;code&gt;recv()&lt;/code&gt; 関数を用いる。 &lt;code&gt;send()&lt;/code&gt;、 &lt;code&gt;recv()&lt;/code&gt; は同期通信であり、非同期で通信する場合は次で紹介する &lt;code&gt;isend()&lt;/code&gt;、&lt;code&gt;irecv()&lt;/code&gt; を用いる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;send()&lt;/code&gt;、 &lt;code&gt;recv()&lt;/code&gt; では「タグ」という数値を設定して、型や転送するデータの区別ができる。 &lt;code&gt;isend()&lt;/code&gt;、&lt;code&gt;irecv()&lt;/code&gt; も同様。&lt;/p&gt;
&lt;p&gt;以下は、偶数ランクのノードが奇数ランクのノードに対し、適当にデータを生成して送信するプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/nonblocking.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; target_node &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX;
        world.send(target_node, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, value);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; target_node &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; value;
        world.recv(target_node, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, value);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;recv : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#async-peer-to-peer&#34; name=&#34;async-peer-to-peer&#34;&gt;1対1の通信を非同期で行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;非同期で1対1通信を行う際には、&lt;code&gt;boost::mpi::communicator&lt;/code&gt; クラスの &lt;code&gt;isend()&lt;/code&gt; メンバ関数、および &lt;code&gt;irecv()&lt;/code&gt; メンバ関数を用いる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isend()&lt;/code&gt;、 &lt;code&gt;irecv()&lt;/code&gt; は戻り値として &lt;code&gt;boost::mpi::request&lt;/code&gt; クラスのオブジェクトを返し、非同期通信が終わったかどうか、非同期通信の完了まで待つといった操作ができる。複数のリクエストを同時に操作する為にイテレータを使用する &lt;code&gt;wait_all()&lt;/code&gt;、&lt;code&gt;wait_any()&lt;/code&gt; などの関数が用意されている。&lt;/p&gt;
&lt;p&gt;以下のプログラムはランク 0 から適当なデータを生成して送信し、他のランクは受け取って表示するだけのプログラムである。ランク 0 は他のノード全てにデータを送信するため非同期で行い、全ての送信リクエストの完了を待つ。他のランクはデータを1つ受け取るだけなので同期受信の &lt;code&gt;recv()&lt;/code&gt; メンバ関数を使用している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/nonblocking.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv) {
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;request&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; reqs;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; world.size() ; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
      &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX;
      reqs.push_back(world.isend(i, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, r));
    }
    bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wait_all(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(reqs), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(reqs));
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r;
    world.recv(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, r);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Rank : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, Value : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#serialize&#34; name=&#34;serialize&#34;&gt;非プリミティブ型を他のノードへ送信する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.MPI では非プリミティブな型、自作のクラスなどを &lt;a href=&#34;http://boostjp.github.io/tips/serialize.html&#34;&gt;Boost.Serialization&lt;/a&gt; を用いてシリアライズして他のランクへ送信することができる。&lt;/p&gt;
&lt;p&gt;Boost.Serialization の使用方法自体は他に譲るとして、Boost.MPI では固定サイズであるか、またはメンバにポインタを持たないユーザ定義型を MPI DataType としてマークできる。例えば &lt;code&gt;gps_positions&lt;/code&gt; クラスがあるとして、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mpi {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_mpi_datatype&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;gps_positions&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; mpl&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_ {};
} }
&lt;/pre&gt;&lt;/div&gt;

または&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_IS_MPI_DATATYPE(gps_positions)
&lt;/pre&gt;&lt;/div&gt;

を使用すればいい。&lt;/p&gt;
&lt;p&gt;また、シリアライズのパフォーマンスを上げるために、Boost.Serialization のトラッキングやバージョンチェックなどを省くと良いと紹介している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_CLASS_TRACKING(gps_positions, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;track_never)
BOOST_CLASS_IMPLEMENTATION(gps_positions, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;object_serializable)
&lt;/pre&gt;&lt;/div&gt;

また、 &lt;code&gt;std::string&lt;/code&gt; などの標準ライブラリのクラスは Boost.Serialization で既にシリアライズが定義されているので、Boost.MPI で転送することができる。&lt;/p&gt;
&lt;p&gt;以下のプログラムは、 &lt;code&gt;gps_positions&lt;/code&gt; クラスをブロードキャストするプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/communicator.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/environment.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/mpi/collectives.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/serialization.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;ctime&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; bmpi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mpi;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; gps_positions {
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; gx;
  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; gy;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;boost&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;access;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; serialize(Archive &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; version)
  {
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; gx;
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; gy;
  }
};

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, gps_positions &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) {
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.gx &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.gy &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; os;
}

BOOST_IS_MPI_DATATYPE(gps_positions)
BOOST_CLASS_IMPLEMENTATION(gps_positions, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;object_serializable)

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt; argv)
{
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;environment env(argc, argv);
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;communicator world;

  gps_positions pos;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(world.rank() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;srand(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;));
    pos.gx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX;
    pos.gy &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rand()) &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; RAND_MAX;
  }
  bmpi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;broadcast(world, pos, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Rank : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; world.rank() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pos &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/mpi.html#speed-up-all-same-rank&#34; name=&#34;speed-up-all-same-rank&#34;&gt;全てのランクが同じ環境であった場合の高速化&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;MPI は複数のコンピュータで実行することができる、あるいは実行することが目的だが、このコンピュータ全てが同じアーキテクチャであった (Homogeneous Machines) 場合、&lt;code&gt;MPI_PACK&lt;/code&gt;/&lt;code&gt;UNPACK&lt;/code&gt; を避けてデータを直接転送するような方法に切り替えることで、通信の高速化が行えるようになっている。&lt;/p&gt;
&lt;p&gt;その場合は、&lt;code&gt;BOOST_MPI_HOMOGENEOUS&lt;/code&gt; マクロを Boost.MPI のライブラリ自身と Boost.MPI を使用したアプリをビルドする際に定義すればいい。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>多次元配列 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/multi_array.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/multi_array.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;多次元配列&lt;/h1&gt;
&lt;p&gt;多次元配列には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multi_array/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Multi-Array Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_array.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_array.html#iterate-partial-array&#34;&gt;部分配列の走査&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_array.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::multi_array&lt;/code&gt;クラスはCスタイル多次元配列特有の分かりにくさを解消し、様々な走査を提供する。&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;boost::array&lt;/code&gt;とは違いオーバーヘッドが存在するため注意が必要である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_array.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Cスタイル (3x4x5 ? それとも 5x4x3 ?)&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; C_style[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;];
    C_style[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ok&lt;/span&gt;
    C_style[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// これは正しい？ (非常に分かりにくいが、境界の外に書き込もうとしている&lt;/span&gt;
    C_style[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// こちらは正しい&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt;&lt;/span&gt; three_dim_array;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost.MultiArray (3x4x5)&lt;/span&gt;
    three_dim_array Boost_style(&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;extents[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;);
    Boost_style[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ok&lt;/span&gt;
    Boost_style[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 境界の外に書き込もうとしたので例外が投げられる&lt;/span&gt;
    Boost_style[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ok&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost.MultiArray (3x4x5)&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; shape &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {{ &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; }};
    three_dim_array Another_style(shape); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3,4,5で初期化されるわけではないことに注意されたい&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;テンプレート引数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::multi_array&lt;/code&gt;は第1テンプレート引数に要素の型、第2テンプレート引数に次元数を、第3テンプレート引数にアロケータをとる。通常、アロケータはデフォルトテンプレート引数をそのまま用いればよい。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初期化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::multi_array&lt;/code&gt;は&lt;code&gt;boost::extents&lt;/code&gt;などによって各次元の次元長を設定するか、部分配列、ビューを用いて初期化することが可能である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_array.html#iterate-partial-array&#34; name=&#34;iterate-partial-array&#34;&gt;部分配列の走査&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::multi_array&lt;/code&gt;はCスタイルの配列では難しい部分配列への走査を提供している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_array.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;matrix_t&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;matrix_t&lt;/span&gt; matrix(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;extents[&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;]);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;; i&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;5&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;; j&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;5&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;j)
            matrix[i][j] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;j;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;matrix_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;index_range&lt;/span&gt;         range;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;matrix_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;array_view&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;::&lt;/span&gt;type&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;view_t&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;view_t&lt;/span&gt; view &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; matrix[ &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;indices[range(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]&lt;/span&gt; ];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;; i&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;matrix[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;][3] = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; view[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;matrix[1][3] = 3
matrix[2][3] = 6
matrix[3][3] = 9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンテナに複数の並び順を持たせる -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/multi_index.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/multi_index.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンテナに複数の並び順を持たせる&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;std::vector&lt;/code&gt;や&lt;code&gt;std::map&lt;/code&gt;といったコンテナを使用していると、希に「&lt;code&gt;map&lt;/code&gt;として使いたいけど挿入順も覚えておきたい」といったことや、「&lt;code&gt;map&lt;/code&gt;に、値からキーを検索する機能がほしい」といった要求が出てくることがある。そういった要求を叶えてくれるのが、&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Multi-Index Library&lt;/a&gt;である。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#basic-usage&#34;&gt;&lt;code&gt;boost::multi_index_container&lt;/code&gt;の基本的な使い方 - 挿入順を知っている&lt;code&gt;std::set&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#store-index&#34;&gt;インデックスの表現を変数に持つ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#give-a-name-to-index&#34;&gt;インデックスに名前を付ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#index-container-table&#34;&gt;インデックスと標準コンテナの対応表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#multiple-key-map&#34;&gt;複数のキーを持つ&lt;code&gt;map&lt;/code&gt;を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#bidirectional-map&#34;&gt;双方向&lt;code&gt;map&lt;/code&gt;を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#modify-element&#34;&gt;要素を書き換える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#rearrange&#34;&gt;並び順を動的に変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;boost::multi_index_containerの基本的な使い方 - 挿入順を知っているstd::set&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multi-Indexでは、&lt;code&gt;boost::multi_index_container&lt;/code&gt;というコンテナ型を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; multi_index {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Value, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; IndexSpecifierList, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;multi_index_container&lt;/span&gt;;

} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace multi_index&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; multi_index&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index_container;

} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace boost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;multi_index_container&lt;/code&gt;のテンプレートパラメータ：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数番号&lt;/th&gt;
&lt;th&gt;パラメータ名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IndexSpecifierList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インデックス(並び順)のリスト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Allocator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリアロケータ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第2、第3テンプレートパラメータは省略でき、省略した場合の&lt;code&gt;IndexSpecifierList&lt;/code&gt;は&lt;code&gt;ordered_unique&lt;/code&gt;(すなわち&lt;code&gt;std::set&lt;/code&gt;)となる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::multi_index_container&lt;/code&gt;型を使用して、挿入順を知っている&lt;code&gt;std::set&lt;/code&gt;を表現するには、以下のようにする：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/sequenced_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/identity.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; 
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span style=&#34;color:#ff0000&#34;&gt;ordered_unique&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順(重複なし)&lt;/span&gt;
        &lt;span style=&#34;color:#ff0000&#34;&gt;sequenced&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c, disp);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順に表示&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(), disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 
1 3 2 5 4 
&lt;/code&gt;&lt;/pre&gt;
ここではインデックスに、重複なしの辞書順を表す&lt;code&gt;ordered_unique&lt;/code&gt;と、挿入順を表す&lt;code&gt;sequenced&lt;/code&gt;の2つを指定しており、これらを指定した&lt;code&gt;multi_index_container&lt;/code&gt;はこの2つの並び順を同時に表現できるようになっている。0番目のインデックス(デフォルト)が&lt;code&gt;ordered_unique&lt;/code&gt;のため、要素の追加には&lt;code&gt;insert()&lt;/code&gt;を使用しているが、逆の場合には&lt;code&gt;push_back()&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;コンテナを使用する際に、何も使用しなければ、そのコンテナは0番目のインデックスとして振る舞うことになる。&lt;/p&gt;
&lt;p&gt;そのため、この例において、&lt;code&gt;BOOST_FOREACH&lt;/code&gt;や&lt;code&gt;boost::for_each&lt;/code&gt;といったアルゴリズムに、インデックスを指定せずにコンテナを渡した場合には、辞書順に処理されることになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順に表示&lt;/span&gt;
boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c, disp);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 
&lt;/code&gt;&lt;/pre&gt;
インデックスを指定する場合には、&lt;code&gt;boost::multi_index_container::get&amp;lt;N&amp;gt;()&lt;/code&gt;メンバ関数テンプレートを使用する。&lt;/p&gt;
&lt;p&gt;インデックスの番号をテンプレート引数として指定して、その並び順の表現を取得する。&lt;/p&gt;
&lt;p&gt;ここでは、&lt;code&gt;c.get&amp;lt;1&amp;gt;()&lt;/code&gt;とすることで、&lt;code&gt;sequenced&lt;/code&gt;のインデックスが取得でき、挿入順に処理することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順に表示&lt;/span&gt;
boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.&lt;span style=&#34;color:#ff0000&#34;&gt;get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;&lt;/span&gt;(), disp);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 3 2 5 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#store-index&#34; name=&#34;store-index&#34;&gt;インデックスの表現を変数に持つ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;インデックスの表現を変数に保持したい場合は、&lt;code&gt;boost::multi_index_container::nth_index&amp;lt;N&amp;gt;&lt;/code&gt;メタ関数でインデックスの型を取得できるので、その型に&lt;code&gt;get&amp;lt;N&amp;gt;()&lt;/code&gt;メンバ関数テンプレートで取得したコンテナを参照で格納する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/sequenced_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/identity.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; 
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順(重複なし)&lt;/span&gt;
        sequenced&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;nth_index&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;::&lt;/span&gt;type Set;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;nth_index&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;::&lt;/span&gt;type List;

    Set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;();
    List&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順に表示&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(s, disp);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順に表示&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ls, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 
1 3 2 5 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#give-a-name-to-index&#34; name=&#34;give-a-name-to-index&#34;&gt;インデックスに名前を付ける&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;0番目のインデックス、1番目のインデックス、といった指定は、プログラムが小さいうちはいいかもしれないが、直値の指定は一般に管理しにくい。そこで、「タグ」と呼ばれる空の型を作り、それをインデックスを示す名前として使用することができる。&lt;/p&gt;
&lt;p&gt;これまでインデックス番号を指定していた&lt;code&gt;get&amp;lt;N&amp;gt;()&lt;/code&gt;にはタグ名を指定し、インデックスの型を取得する&lt;code&gt;nth_index&lt;/code&gt;メタ関数の代わりに&lt;code&gt;boost::multi_index_container::index&amp;lt;Tag&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/sequenced_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/identity.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; order {}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順のタグ&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; seq {}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順のタグ&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; 
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;order&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, identity&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順(重複なし)&lt;/span&gt;
        sequenced&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;seq&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;order&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type Set;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;seq&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type List;

    Set&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;order&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();
    List&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ls &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;seq&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辞書順に表示&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(s, disp);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 挿入順に表示&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ls, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 
1 3 2 5 4 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#index-container-table&#34; name=&#34;index-container-table&#34;&gt;インデックスと標準コンテナの対応表&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multi-Indexのインデックスは、以下のテーブルのように標準コンテナに対応している。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;インデックス&lt;/th&gt;
&lt;th&gt;対応する標準コンテナ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ordered_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::set&lt;/td&gt;
&lt;td&gt;辞書順(重複なし)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ordered_non_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::multiset&lt;/td&gt;
&lt;td&gt;辞書順(重複あり)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hashed_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::unordered_set&lt;/td&gt;
&lt;td&gt;ハッシュ表(重複なし)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hashed_non_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::unordered_multiset&lt;/td&gt;
&lt;td&gt;ハッシュ表(重複あり)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sequenced&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::list&lt;/td&gt;
&lt;td&gt;挿入順&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;random_access&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;std::vector&lt;/td&gt;
&lt;td&gt;ランダムアクセス&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;なお、&lt;code&gt;std::map&lt;/code&gt;は&lt;code&gt;ordered_(non_)unique&lt;/code&gt;で表現でき、&lt;code&gt;std::unordered_map&lt;/code&gt;は&lt;code&gt;hashed_(non_)unique&lt;/code&gt;で表現できる。&lt;code&gt;map&lt;/code&gt;を表現するには&lt;code&gt;boost::multi_index::member&lt;/code&gt;を使用する。&lt;code&gt;map&lt;/code&gt;の例は、「&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#multiple-key-map&#34;&gt;複数のキーを持つ&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;」を参照。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#multiple-key-map&#34; name=&#34;multiple-key-map&#34;&gt;複数のキーを持つmapを定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::multi_index::member&lt;/code&gt;を使用すると、&lt;code&gt;ordered_(non_)unique&lt;/code&gt;を&lt;code&gt;std::map&lt;/code&gt;、&lt;code&gt;hashed_(non_)unique&lt;/code&gt;を&lt;code&gt;std::unordered_map&lt;/code&gt;のように扱うことができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;member&lt;/code&gt;のテンプレートパラメータは、以下のようになっている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; multi_index {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Class&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Type, Type Class&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;PtrToMember&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; member;

}} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace boost::multi_index&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

| 引数番号 | パラメータ名  | 説明 |
|----------|---------------|----------------------------------------|
| 1        | &lt;code&gt;Class&lt;/code&gt;       | &lt;code&gt;multi_index_container&lt;/code&gt;の要素型&lt;code&gt;Value&lt;/code&gt; |
| 2        | &lt;code&gt;Type&lt;/code&gt;        | キーにしたいメンバ変数の型             |
| 3        | &lt;code&gt;PtrToMember&lt;/code&gt; | キーにしたいメンバ変数へのポインタ     |&lt;/p&gt;
&lt;p&gt;&lt;code&gt;member&lt;/code&gt;を使用すると、IDをキーにして要素を検索する&lt;code&gt;map&lt;/code&gt;、名前をキーにして要素を検索する&lt;code&gt;map&lt;/code&gt;を同時に存在させることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/member.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; person {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; age;

    person(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; age)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; id(id), name(name), age(age) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; age &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; id {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; name {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; age {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    person,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,   member&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;person, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,         &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, member&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;person, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;age&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,  member&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;person, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,         &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;person&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;age&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; dictionary;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    dictionary dict;
    dict.insert(person(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Akira&#34;&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;));
    dict.insert(person(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Millia&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;));
    dict.insert(person(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Johnny&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// IDをキーにするmap&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; dictionary&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type id_map;
        id_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dict.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// IDをキーにして検索&lt;/span&gt;
        id_map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
            it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;print();
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前をキーにするmap&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; dictionary&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type name_map;
        name_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dict.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前をキーにして検索&lt;/span&gt;
        name_map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Akira&#34;&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
            it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;print();
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年齢をキーにするmap&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; dictionary&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;age&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type age_map;
        age_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dict.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;age&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年齢をキーにして検索&lt;/span&gt;
        age_map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
            it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;print();
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1,Millia,20
3,Akira,30
4,Johnny,10
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#bidirectional-map&#34; name=&#34;bidirectional-map&#34;&gt;双方向mapを定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#multiple-key-map&#34;&gt;複数のキーをもつ&lt;code&gt;map&lt;/code&gt;を定義する&lt;/a&gt;」と同じ方法で、IDから名前を調べる、名前からIDを調べる、というような双方向&lt;code&gt;map&lt;/code&gt;を、Boost.Multi-Indexで定義できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/member.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; product {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;

    product(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; id(id), name(name) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; id {};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; name {};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    product,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,   member&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;product, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,         &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;product&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
        ordered_unique&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, member&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;product, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;product&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; dictionary;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    dictionary dict;
    dict.insert(product(&lt;span style=&#34;color: #666666&#34;&gt;2852&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;coffee&#34;&lt;/span&gt;));
    dict.insert(product(&lt;span style=&#34;color: #666666&#34;&gt;7777&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cola&#34;&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// IDから名前を調べる&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; dictionary&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type id_map;
        id_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dict.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// IDをキーにして検索&lt;/span&gt;
        id_map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #666666&#34;&gt;2852&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前からIDを調べる&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; dictionary&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;index&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type name_map;
        name_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dict.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 名前をキーにして検索&lt;/span&gt;
        name_map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.find(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cola&#34;&lt;/span&gt;);
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; m.end()) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;id &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;coffee
7777
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#modify-element&#34; name=&#34;modify-element&#34;&gt;要素を書き換える&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::multi_index_container&lt;/code&gt;の要素書き換えには、&lt;code&gt;replace()&lt;/code&gt;メンバ関数を使用する方法と、&lt;code&gt;modify()&lt;/code&gt;メンバ関数を使用する方法の2種類がある。これは、前者が安全優先の関数であり、後者が速度優先の関数である。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;replace()&lt;/code&gt;メンバ関数による要素書き換え&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace()&lt;/code&gt;メンバ関数は、安全優先の要素書換え関数である。&lt;/p&gt;
&lt;p&gt;指定したイテレータの位置の要素を第2引数の値で置き換え、その変更が全てのインデックスに適用される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.replace(it, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2 3 4 
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;replace()&lt;/code&gt;は以下の方法でこの置き換えを行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;変更された要素がすべてのインデックスリストに関してオリジナルの並び順を保持する場合、計算量は定数時間で、そうでなければ対数時間&lt;/li&gt;
&lt;li&gt;イテレータと参照の有効性は保たれる&lt;/li&gt;
&lt;li&gt;操作は強い例外安全、つまり、(システムまたはユーザーのデータ型によって引き起こされる)何らかの例外が投げられた場合、&lt;code&gt;multi_index_container&lt;/code&gt;オブジェクトは変化しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;replace()&lt;/code&gt;は、標準のコンテナで提供されなかった強力な操作と、強い例外安全が必要であるときに特に便利だ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace()&lt;/code&gt;の便利さにはコストが伴うので注意。更新(と内部のreplaceを検索)のために2回全体の要素をコピーしなければならない。要素をコピーすることが高コストな場合、これはまさしくオブジェクトの小さな部分変更のためのかなりの計算コストであるかもしれない。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;modify()&lt;/code&gt;関数による要素書き換え&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace()&lt;/code&gt;が安全優先な実装なのに対し、&lt;code&gt;modify()&lt;/code&gt;関数は速度優先の要素書き換えを行う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace()&lt;/code&gt;は、書き換える要素へのイテレータと、要素書き換えのための関数オブジェクトをとる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;change_value&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; value_(value) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; target) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        target &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value_;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.modify(it, change_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2 3 4 
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;modify()&lt;/code&gt;は速度を優先するために、衝突により書き換え失敗が起こった場合に、壊れたデータになってしまうことを防ぐために、要素を削除する。&lt;/p&gt;
&lt;p&gt;さらに、一貫性のために&lt;code&gt;modify()&lt;/code&gt;は、衝突により書き換え失敗が起こった場合にロールバックするための関数オブジェクトを任意に指定するバージョンも提供している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/ordered_index.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Container;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;change_value&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;change_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; value_(value) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; target) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        target &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value_;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rollback_value&lt;/span&gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;rollback_value&lt;/span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; value_(value) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; target) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        target &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value_;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Container c;
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.insert(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    Container&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; c.find(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    c.modify(it, change_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#ff0000&#34;&gt;rollback_value&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;));

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c, disp);
}
&lt;/pre&gt;&lt;/div&gt;

プログラマは、最良の更新メカニズムを決定するために&lt;code&gt;replace()&lt;/code&gt;、&lt;code&gt;modify()&lt;/code&gt;およびロールバックをもつ&lt;code&gt;modify()&lt;/code&gt;の振る舞いの差をケースバイケースで考慮しなければならない。&lt;/p&gt;
&lt;p&gt;更新関数と衝突時の動作をまとめると、以下のようになる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;衝突時の動作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;replace(it, x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;置換は行われない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;modify(it, mod)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素は消去される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;modify(it, mod, back)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back&lt;/code&gt;は復旧するのに使用される(&lt;code&gt;back&lt;/code&gt;が例外を投げた場合、要素は消去される)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multi_index.html#rearrange&#34; name=&#34;rearrange&#34;&gt;並び順を動的に変更する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multi-Indexのordered indices, random access indices, sequenced indicesなどのインデックスは不変であるため、通常の手段では並び順をあとから変えることはできない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;random_access&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; container;

container c;
boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_shuffle(c); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー！書き換えできない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

こういった動的な並び順をインデックスとして持たせるために、&lt;code&gt;multi_index_container&lt;/code&gt;クラスには&lt;code&gt;rearrange()&lt;/code&gt;というメンバ関数が用意されている。&lt;/p&gt;
&lt;p&gt;以下がその使用例である。2つめのrandom access indicesを、動的な並び順として扱えるようにしている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index_container.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multi_index/random_access_index.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/ref.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multi_index;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; multi_index_container&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,
    indexed_by&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        random_access&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;,
        random_access&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; container;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    container c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reference_wrapper&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    BOOST_FOREACH(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; i, c) {
        v.push_back(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cref(i));
    }

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_shuffle(v);
    c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;().rearrange(v.begin());

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x; }); std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(c.get&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(), [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x; }); std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;12345
52431
&lt;/code&gt;&lt;/pre&gt;
1つめのrandom access indicesの並び順はそのままに、2つめのrandom access indicesの方だけが、&lt;code&gt;random_shuffle()&lt;/code&gt;を適用した動的な並び順になっていることがわかる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rearrange()&lt;/code&gt;を使用するには、&lt;code&gt;multi_index_container&lt;/code&gt;の要素を一旦、reference wrapperのコンテナに持たせてそのコンテナに対して並び順の操作を行う必要がある。&lt;/p&gt;
&lt;p&gt;Boost.Multi-Indexのドキュメントでは、トランプをシャッフルする例が紹介されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multi_index/example/rearrange.cpp&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/libs/multi_index/example/rearrange.cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>多倍長浮動小数点数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/multiprec-float.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/multiprec-float.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;多倍長浮動小数点数&lt;/h1&gt;
&lt;p&gt;多倍長浮動小数点数を使用するには、&lt;a href=&#34;http://www.boost.org/libs/multiprecision/&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Multiprecisionから提供される多倍長浮動小数点数の、基本的な使い方を示す。&lt;/p&gt;
&lt;p&gt;以下は、任意精度の符号あり多倍長整数である&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::multiprecision::cpp_dec_float_100&lt;/code&gt;&lt;/a&gt;クラス型を使用して、2の平方根を求めるプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 100は仮数部の桁数&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_dec_float_100 x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0f&lt;/span&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平方根を100桁求める&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_dec_float_100 result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(x);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 出力桁数を設定して出力&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;setprecision(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;decltype(x)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;digits10 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
              &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;cpp_dec_float_100&lt;/code&gt;は、Boost.Multiprecisionが独自実装した演算をバックエンドに持つ、100桁の仮数部を表現可能な多倍長浮動小数点数である。Boost.Multiprecisionが提供する全ての機能は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間以下で定義される。&lt;/p&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、以下の演算をサポートする。ビット演算は使用できない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a + b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a += b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a - b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a -= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a * b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a *= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a / b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a /= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をプラスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をマイナスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a++;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;++a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a--;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;--a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a == b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a != b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より小さいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以下かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より大きいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以上かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#variation&#34; name=&#34;variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下に、Boost.Multiprecisionから提供される多倍長整数の種類を示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision独自実装の多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

| 型                  | 説明 |
|---------------------|--------------------|
| &lt;code&gt;cpp_dec_float_50&lt;/code&gt;  | 仮数部を50桁表現可能な浮動小数点数  |
| &lt;code&gt;cpp_dec_float_100&lt;/code&gt; | 仮数部を100桁表現可能な浮動小数点数 |&lt;/p&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 仮数部を1,000桁表現可能な浮動小数点数の定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;number&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;cpp_dec_float&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1000&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cpp_dec_float_1000;
&lt;/pre&gt;&lt;/div&gt;

独自実装の多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;基数は10。基数2ベースとは異なる振る舞いが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infinity&lt;/code&gt;と&lt;code&gt;NaN&lt;/code&gt;をサポートする。オーバーフローやゼロ割り時には、組み込みの浮動小数点数型と同じ振る舞いをする。&lt;/li&gt;
&lt;li&gt;全ての操作は、常に切り捨てを行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/gmp_float.html&#34; target=&#34;_blank&#34;&gt;GMPバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

| 型               | 説明 |
|------------------|---------------------------------------|
| &lt;code&gt;mpf_float_50&lt;/code&gt;   | 仮数部を50桁表現可能な浮動小数点数    |
| &lt;code&gt;mpf_float_100&lt;/code&gt;  | 仮数部を100桁表現可能な浮動小数点数   |
| &lt;code&gt;mpf_float_500&lt;/code&gt;  | 仮数部を500桁表現可能な浮動小数点数   |
| &lt;code&gt;mpf_float_1000&lt;/code&gt; | 仮数部を1,000桁表現可能な浮動小数点数 |
| &lt;code&gt;mpf_float&lt;/code&gt;      | 仮数部を任意長表現可能な浮動小数点数  |&lt;/p&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 仮数部を10,000桁表現可能な浮動小数点数の定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;number&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;gmp_float&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;10000&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mpf_dec_float_10000;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;gmp_float&lt;/code&gt;のテンプレート引数として0を指定すると、任意長の仮数部が表現可能になる。&lt;/p&gt;
&lt;p&gt;GMP多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;GMPのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;GMPは&lt;code&gt;infinity&lt;/code&gt;や&lt;code&gt;NaN&lt;/code&gt;といった概念を持たないため、可能な限りオーバーフローやゼロ割りは避けること。オーバーフロー時またはゼロ割り時には&lt;code&gt;std::overflow_error&lt;/code&gt;例外が送出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/mpfr.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

動的メモリ確保を行う多倍長浮動小数点数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/mpfr_float.html&#34; target=&#34;_blank&#34;&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を50桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を100桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を500桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_1000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を1,000桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を任意長表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;動的メモリ確保を行わない多倍長浮動小数点数&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を50桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部を100桁表現可能な浮動小数点数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の、動的メモリ確保を行う固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 仮数部を10,000桁表現可能な浮動小数点数の定義&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;number&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;mpfr_float_backend&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;10000&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; mpf_dec_float_10000;
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;mpfr_float_backend&lt;/code&gt;の第2テンプレート引数として&lt;code&gt;boost::multiprecision::allocate_stack&lt;/code&gt;列挙値を指定することで、動的メモリ確保を行わない多倍長浮動小数点数型の定義ができる。&lt;/p&gt;
&lt;p&gt;MPFR多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は&lt;code&gt;NaN&lt;/code&gt;である&lt;/li&gt;
&lt;li&gt;全ての操作は、最近接値への丸めを使用する&lt;/li&gt;
&lt;li&gt;GMPとMPFRのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;0で割ると&lt;code&gt;infinity&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#from-string&#34; name=&#34;from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列から多倍長浮動小数点数に変換するには、&lt;code&gt;explicit&lt;/code&gt;な変換コンストラクタ、もしくは&lt;code&gt;assign()&lt;/code&gt;メンバ関数を使用する。
文字列は、&lt;code&gt;char&lt;/code&gt;配列および&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;/a&gt;を受け取ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタで文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_dec_float_100 x(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3.14&#34;&lt;/span&gt;);                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列から変換&lt;/span&gt;
    cpp_dec_float_100 y(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3.14&#34;&lt;/span&gt;));   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringから変換&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;assign()&lt;/code&gt;メンバ関数で文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_dec_float_100 x;
    x.assign(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;3.14&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
&lt;/code&gt;&lt;/pre&gt;
変換できない文字列が渡された場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::runtime_error&lt;/code&gt;&lt;/a&gt;例外が送出される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#to-string&#34; name=&#34;to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列への変換には、&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。この関数は、&lt;code&gt;std::string&lt;/code&gt;型で多倍長浮動小数点数の文字列表現を返す。&lt;/p&gt;
&lt;p&gt;デフォルトでは固定小数点表記の文字列が返されるが、以下の引数を設定することで、精度と表記、その他出力方法を選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数： 出力する精度。0を指定した場合、できるだけ多くの桁数を出力する。&lt;/li&gt;
&lt;li&gt;第2引数： 出力フラグ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_dec_float_50;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_dec_float_50 x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定小数点表記(デフォルト)&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.str();
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定小数点表記(明示的に指定)&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.str(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fixed);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 科学的表記&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.str(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scientific);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.140000000000000124344978758017532527446746826171875
3.1400000000000001243449787580175325274467468261718750000000000000000000000
3.1400000000000001243449787580175325274467468261718750000000000000000000000e+00
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34; name=&#34;convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、異なる精度間での変換をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小さい精度から大きい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;や&lt;code&gt;double&lt;/code&gt;型といった組み込みの浮動小数点数型から、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;や&lt;code&gt;cpp_dec_float_100&lt;/code&gt;といった多倍長浮動小数点数への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;から&lt;code&gt;cpp_dec_float_100&lt;/code&gt;へ、といったより大きい精度への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// floatからcpp_dec_float_50への暗黙変換&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.14f&lt;/span&gt;;
    cpp_dec_float_50 f50 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// cpp_dec_float_50からcpp_dec_float_100への暗黙変換&lt;/span&gt;
    cpp_dec_float_100 f100 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f50; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大きい精度から小さい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小さい精度への変換は、データが失われる可能性があるため、暗黙の型変換はサポートしない。&lt;/p&gt;
&lt;p&gt;明示的な型変換を使用する場合のみ変換可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_dec_float_100 f100 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  cpp_dec_float_50 f50 = f100; // コンパイルエラー！変換できない&lt;/span&gt;
    cpp_dec_float_50 f50 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;cpp_dec_float_50&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(f100); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-float.html#math-functions&#34; name=&#34;math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;標準関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;標準ライブラリで定義される以下の関数は、Boost.Multiprecisionの多倍長浮動小数点数でも使用できる。&lt;/p&gt;
&lt;p&gt;これらの関数は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T abs(T x);&lt;/code&gt;&lt;br /&gt; &lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/fabs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T fabs(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sqrt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sqrt(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T floor(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;床関数（引数より大きくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ceil(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;天井関数（引数より小さくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T trunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T itrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T ltrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lltrunc(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ方向への丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T round(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lround(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T llround(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四捨五入による丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/exp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T exp(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする指数関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする自然対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log10&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log10(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10 を底とする常用対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;余弦関数（コサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正弦関数（サイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正接関数（タンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/acos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T acos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆余弦関数（アークコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/asin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T asin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正弦関数（アークサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cosh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cosh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線余弦関数（ハイパボリックコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sinh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sinh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正弦関数（ハイパボリックサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tanh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tanh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正接関数（ハイパボリックタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ldexp(T x, int);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 の冪乗との乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T frexp(T x, int*);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部と 2 の冪乗への分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/pow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T pow(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T fmod(T x, T y);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan2(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対辺と隣辺からの逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>多倍長整数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/multiprec-int.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/multiprec-int.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;多倍長整数&lt;/h1&gt;
&lt;p&gt;多倍長整数を使用するには、&lt;a href=&#34;http://www.boost.org/libs/multiprecision/&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#variation&#34;&gt;多倍長整数の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#convert-integer&#34;&gt;異なる大きさの整数間で型変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#min&#34;&gt;最小値を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#max&#34;&gt;最大値を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#is-bounded&#34;&gt;有限かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[サポートされている数学関数一覧]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Multiprecisionから提供される多倍長整数の、基本的な使い方を示す。&lt;/p&gt;
&lt;p&gt;以下は、任意精度の符号あり多倍長整数である&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::multiprecision::cpp_int&lt;/code&gt;&lt;/a&gt;クラスを使用して、100の階乗を求めるプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_int&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
       x &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; i;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;cpp_int&lt;/code&gt;は、Boost.Multiprecisionが独自実装した演算をバックエンドに持つ、任意精度の多倍長整数である。この型は、メモリが許す限り無限の桁数を扱える。Boost.Multiprecisionが提供する全ての機能は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間以下で定義される。&lt;/p&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長整数は、組み込みの整数型と同じ演算をサポートする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a + b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a += b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a - b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a -= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a * b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a *= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a / b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a /= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a % b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a %= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をプラスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をマイナスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a++;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;++a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a--;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;--a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;amp;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットAND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a | b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a |= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a ^ b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a ^= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットXOR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;lt;&amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左ビットシフト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a &amp;gt;&amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右ビットシフト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a == b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a != b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より小さいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以下かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より大きいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以上かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#variation&#34; name=&#34;variation&#34;&gt;多倍長整数の種類&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下に、Boost.Multiprecisionから提供される多倍長整数の種類を示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/cpp_int.html&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision独自実装の多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

符号付きチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数。 メモリが許す限り、無限の桁数を扱える。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号なしチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uint1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号付きチェック付き整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_cpp_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数。 メモリが許す限り、無限の精度を扱える。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_int1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号付き整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;符号なしチェック付き整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint128_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;128ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cheked_uint256_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint512_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;512ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checked_uint1024_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024ビット精度の符号なし整数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チェック付き整数は、値が不正になる演算を行った際に例外を送出する。&lt;/p&gt;
&lt;p&gt;チェックなし整数が送出する例外：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;送出する例外&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ゼロ割り時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;チェック付き整数が送出する例外：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;送出する例外&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ゼロ割り時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;符号なしなのにマイナス値になった&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::range_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;オーバーフロー時&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/stdexcept&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::overflow_error&lt;/code&gt;&lt;/a&gt;例外が送出される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/gmp_int.html&#34; target=&#34;_blank&#34;&gt;GMPバックエンドの多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

符号ありチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpz_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/ints/tom_int.html&#34; target=&#34;_blank&#34;&gt;libtommathバックエンドの多倍長整数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/tommath.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

符号ありチェックなし整数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tom_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意精度の符号付き多倍長整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#from-string&#34; name=&#34;from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列から多倍長整数に変換するには、&lt;code&gt;explicit&lt;/code&gt;な変換コンストラクタ、もしくは&lt;code&gt;assign()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;文字列は、&lt;code&gt;char&lt;/code&gt;配列および&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;/a&gt;を受け取ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタで文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列から変換&lt;/span&gt;
    cpp_int y(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;456&#34;&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// std::stringから変換&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
456
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;assign()&lt;/code&gt;メンバ関数で文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x;
    x.assign(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
&lt;/code&gt;&lt;/pre&gt;
変換できない文字列が渡された場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::runtime_error&lt;/code&gt;&lt;/a&gt;例外が送出される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#to-string&#34; name=&#34;to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列への変換には、&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。この関数は、&lt;code&gt;std::string&lt;/code&gt;型で多倍長整数の文字列表現を返す。&lt;/p&gt;
&lt;p&gt;デフォルトでは10進数表現の文字列が返されるが、以下の引数を設定することで、精度と基数、その他出力方法を選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数： 出力する精度。整数では単に無視されるので、0を指定すればよい。&lt;/li&gt;
&lt;li&gt;第2引数： 出力フラグ。基数の選択。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    cpp_int x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;123&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 10進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;();
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 8進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;oct);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 16進数&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.&lt;span style=&#34;color:#ff0000&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;hex);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123
173
7B
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#convert-integer&#34; name=&#34;convert-integer&#34;&gt;異なる大きさの整数間で型変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長整数は、異なる精度間での変換をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小さい整数型から大きい整数型への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;や&lt;code&gt;long&lt;/code&gt;型といった組み込みの整数型から、&lt;code&gt;int128_t&lt;/code&gt;や&lt;code&gt;cpp_int&lt;/code&gt;といった多倍長整数への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;int128_t&lt;/code&gt;から&lt;code&gt;int256&lt;/code&gt;へ、といったより大きい精度への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// intからint128_tへの暗黙変換&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; i128 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int128_tからint256_tへの暗黙変換&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int256_t&lt;/span&gt; i256 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i128; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大きい精度から小さい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小さい精度への変換は、データが失われる可能性があるため、暗黙の型変換はサポートしない。&lt;/p&gt;
&lt;p&gt;明示的な型変換を使用する場合のみ変換可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int256_t&lt;/span&gt; i256 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  int128_t i128 = i256; // コンパイルエラー！変換できない&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; i128 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(i256); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#min&#34; name=&#34;min&#34;&gt;最小値を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数の最小値を取得するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/min.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;静的メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、最小値は取得できなかったものとして、0を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int  x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;min&lt;/span&gt;();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;min&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
-340282366920938463463374607431768211455
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#max&#34; name=&#34;max&#34;&gt;最大値を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数の最大値を取得するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/max.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;静的メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、最大値は取得できなかったものとして、0を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int  x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;max&lt;/span&gt;();  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;max&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
340282366920938463463374607431768211455
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#is-bounded&#34; name=&#34;is-bounded&#34;&gt;有限かどうかを判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多倍長整数型の表す値が有限かどうかを判定するには、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;定数を取得する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;bool&lt;/code&gt;型で定義され、有限であれば&lt;code&gt;true&lt;/code&gt;、無限であれば&lt;code&gt;false&lt;/code&gt;が設定される。&lt;/p&gt;
&lt;p&gt;任意精度整数である&lt;code&gt;cpp_int&lt;/code&gt;は無限の桁数を持つため、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;false&lt;/code&gt;となる。&lt;/p&gt;
&lt;p&gt;固定精度整数の&lt;code&gt;int128_t&lt;/code&gt;、&lt;code&gt;int256_t&lt;/code&gt;といった型の場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/limits/numeric_limits/is_bounded.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;is_bounded&lt;/code&gt;&lt;/a&gt;は&lt;code&gt;true&lt;/code&gt;となる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_int.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; mp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multiprecision;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpp_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_bounded&lt;/span&gt;;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 任意精度&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;mp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int128_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_bounded&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 固定精度&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/multiprec-int.html#math-functions&#34; name=&#34;math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;標準関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;標準ライブラリで定義される以下の関数は、Boost.Multiprecisionの多倍長整数でも使用できる。&lt;/p&gt;
&lt;p&gt;これらの関数は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T abs(T x);&lt;/code&gt;&lt;br /&gt; &lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/fabs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T fabs(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sqrt&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sqrt(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T floor(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;床関数（引数より大きくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ceil(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;天井関数（引数より小さくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T trunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T itrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T ltrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lltrunc(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ方向への丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T round(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lround(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T llround(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四捨五入による丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/exp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T exp(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする指数関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする自然対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/log10&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T log10(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10 を底とする常用対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;余弦関数（コサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正弦関数（サイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正接関数（タンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/acos&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T acos(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆余弦関数（アークコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/asin&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T asin(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正弦関数（アークサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/cosh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T cosh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線余弦関数（ハイパボリックコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/sinh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T sinh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正弦関数（ハイパボリックサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/tanh&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T tanh(T x);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;双曲線正接関数（ハイパボリックタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ldexp(T x, int);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 の冪乗との乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T frexp(T x, int*);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部と 2 の冪乗への分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/pow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T pow(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T fmod(T x, T y);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/atan2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T atan2(T x, T y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対辺と隣辺からの逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;整数に特化した数学関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下の関数は、Boost.Multiprecisionで整数演算に特化したものとして、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://sites.google.com/site/cpprefjp/reference/cmath/pow&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;T pow(T x, unsigned int y);&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T powm(T b, T p, T m);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;冪剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void divide_qr(T x, y, T&amp;amp; q, T&amp;amp; r);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算と剰余算を同時に行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Integer&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;Integer integer_modulus(T x, Integer val);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余の絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unsigned int lsb(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1に設定されている最下位ビットのインデックスを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool bit_test(T val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットが1に設定されているかを判定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_set(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを1に設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_unset(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを0に設定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp; bit_flip(T&amp;amp; val, unsigned index);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたインデックスのビットを反転する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Engine&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bool miller_rabin_test(T n, unsigned trials, Engine&amp;amp; gen);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;bool miller_rabin_test(T n, unsigned trials);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミラー・ラビン素数判定&lt;br /&gt; 参照： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130222/1361516978&#34; target=&#34;_blank&#34;&gt;Boost.Multiprecision ミラー・ラビン法による素数判定 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参照： &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/ref/number.html#boost_multiprecision.ref.number.integer_functions&#34; target=&#34;_blank&#34;&gt;Integer functions - Boost Multiprecision Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付き引数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/named_parameter.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/named_parameter.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;名前付き引数&lt;/h1&gt;
&lt;p&gt;C++において名前付き引数を表現するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/parameter/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Parameter Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/named_parameter.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/named_parameter.html#define-label-in-namespace&#34;&gt;ラベルを名前空間で定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/named_parameter.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下が、Boost.Parameterを使用した名前付き引数の例である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/parameter/name.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;
    Point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Color {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; r, g, b;
    Color(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; r, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; g, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; r(r), g(g), b(b) {}
};

BOOST_PARAMETER_NAME(pos)
BOOST_PARAMETER_NAME(color)
BOOST_PARAMETER_NAME(text)

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; draw_impl(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Color&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; text)
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 描画処理...&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;color: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.r &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.g &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;text: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; text &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ArgPack&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; draw(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ArgPack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; args)
{
    draw_impl(args[_pos], args[_color], args[_text]);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    draw((_text &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;, _color &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Color(&lt;span style=&#34;color: #666666&#34;&gt;255&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), _pos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;)));
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position: 10,20
color: 255,0,0
text: Hello
&lt;/code&gt;&lt;/pre&gt;
名前付き引数を利用するには、まずラベルを定義する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_PARAMETER_NAME(label)
&lt;/pre&gt;&lt;/div&gt;

このようにすると、&lt;code&gt;_label&lt;/code&gt;という名前のラベルが作成され、名前付き引数の「名前」として使用可能になる。&lt;/p&gt;
&lt;p&gt;名前付き引数の指定は、以下のように「ラベル = 値」の形式で記述する。複数の名前付き引数が必要な場合は、全体をカッコで囲む必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;f((_label &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x, label2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; y));
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;名前付き引数を指定された関数は、まずパラメータをテンプレートで「パラメータパック」という一つの変数として受け取る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ArgPack&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ArgPack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; args);
&lt;/pre&gt;&lt;/div&gt;

各ラベルの値を取り出すには、パラメータパックに&lt;code&gt;operator[]()&lt;/code&gt;でラベルを指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; X&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; args[_label];
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/named_parameter.html#define-label-in-namespace&#34; name=&#34;define-label-in-namespace&#34;&gt;ラベルを名前空間で定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Parameterでは、ラベルをユーザーの名前空間に定義することができる。&lt;/p&gt;
&lt;p&gt;以下は、前項で定義したラベルを&lt;code&gt;ui&lt;/code&gt;名前空間に移した例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/parameter/name.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;
    Point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Color {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; r, g, b;
    Color(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; r, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; g, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; r(r), g(g), b(b) {}
};

&lt;span style=&#34;color:#ff0000&#34;&gt;namespace ui&lt;/span&gt; {

BOOST_PARAMETER_NAME(pos)
BOOST_PARAMETER_NAME(color)
BOOST_PARAMETER_NAME(text)

} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;namespace ui&lt;/span&gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; draw_impl(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Color&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; text)
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 描画処理...&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;color: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.r &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.g &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.b &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;text: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; text &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ArgPack&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; draw(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ArgPack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; args)
{
    draw_impl(args[ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_pos], args[ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_color], args[ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_text]);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    draw((ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_text &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;, ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_color &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Color(&lt;span style=&#34;color: #666666&#34;&gt;255&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;), ui&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_pos &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;)));
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position: 10,20
color: 255,0,0
text: Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ネットワーク - TCP -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/network/tcp.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/network/tcp.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ネットワーク - TCP&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34;&gt;接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34;&gt;接続待機&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#connect&#34; name=&#34;connect&#34;&gt;接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/connect/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/a&gt;()メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;接続先の情報は&lt;code&gt;tcp::endpoint&lt;/code&gt;に、IPアドレス文字列と、ポート番号の2つを指定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt;の第2引数として&lt;code&gt;error_code&lt;/code&gt;を渡した場合には、接続失敗時にエラー情報が&lt;code&gt;error_code&lt;/code&gt;変数に格納される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、接続失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    socket.&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt;(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;connect&lt;/span&gt; failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/async_connect.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_connect&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数として、接続先情報のIPアドレス文字列と、ポート番号を指定する。&lt;/p&gt;
&lt;p&gt;第2引数として、接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_connect&lt;/span&gt;(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connected&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#accept&#34; name=&#34;accept&#34;&gt;接続待機&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接続待機には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/acceptor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::acceptor&lt;/code&gt;&lt;/a&gt;クラスを使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acceptor&lt;/code&gt;クラスのコンストラクタには、IPのバージョン(&lt;code&gt;tcp::v4()&lt;/code&gt; or &lt;code&gt;tcp::v6()&lt;/code&gt;)とポート番号を設定する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/accept.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;引数として、バインディングする&lt;code&gt;socket&lt;/code&gt;クラスオブジェクトへの参照を渡す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    &lt;span style=&#34;color:#ff0000&#34;&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor&lt;/span&gt; acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    acc.&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt;(socket, error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;accept&lt;/span&gt; correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの接続待機には、&lt;code&gt;acceptor&lt;/code&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_accept&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数としてバインディングする&lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照をとり、第2引数として接続成功もしくは接続失敗時に呼ばれる関数を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_accept&lt;/span&gt;(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start_accept();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#send&#34; name=&#34;send&#34;&gt;メッセージ送信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ送信方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数には、多様なバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    socket.connect(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;write&lt;/span&gt;(socket, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(msg), error);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ送信には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_write.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_write()&lt;/code&gt;&lt;/a&gt;フリー関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数もまた、いくつかのバージョンが提供されているが、ここでは基本的なものを紹介する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 送信バッファ&lt;/li&gt;
&lt;li&gt;第3引数 ： 送信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string send_data_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信データ&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        send();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; send()
    {
        send_data_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ping&#34;&lt;/span&gt;;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_write&lt;/span&gt;(
                socket_,
                asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer(send_data_),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_send, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 送信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_send(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;send correct!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#receive&#34; name=&#34;receive&#34;&gt;メッセージ受信&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、TCPソケットでのメッセージ受信の方法を解説する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;sockeオブジェクト&lt;/code&gt;への参照&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信結果を格納するエラー値への参照(省略可)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第4引数を省略し、エラーが発生した場合は&lt;code&gt;boost::system::system_error&lt;/code&gt;例外が投げられる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acc(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;));
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket(io_service);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    acc.accept(socket);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buffer;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code error;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;read(socket, receive_buffer, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(), error);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buffer.data());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンのメッセージ受信には、以下のいずれかの関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt; ： 指定したバイト数もしくは全データを受信する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_at.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_at()&lt;/code&gt;&lt;/a&gt; ： 指定した位置のデータを受信する&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read_until.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read_until()&lt;/code&gt;&lt;/a&gt; ： 指定したパターンのデータまで受信する(特定文字列もしくは正規表現)
ここでは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/async_read.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::async_read()&lt;/code&gt;&lt;/a&gt;フリー関数を使用して解説する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第1引数 ： &lt;code&gt;socket&lt;/code&gt;オブジェクトへの参照&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第2引数 ： 受信バッファへの参照&lt;/li&gt;
&lt;li&gt;第3引数 ： どれくらい受信するか。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_all()&lt;/code&gt;&lt;/a&gt;はバッファがいっぱいになるまで読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_at_least.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_at_least(size_t minimum)&lt;/code&gt;&lt;/a&gt;は最低でもNバイト読む。&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/transfer_exactly.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;transfer_exactly(size_t size)&lt;/code&gt;&lt;/a&gt;は指定したサイズ読む。&lt;/li&gt;
&lt;li&gt;第4引数 ： 受信成功もしくは失敗時に呼ばれる関数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Server&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;acceptor acceptor_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Server(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          acceptor_(io_service, tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;v4(), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;)),
          socket_(io_service) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        start_accept();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_accept()
    {
        acceptor_.async_accept(
            socket_,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_accept, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続待機完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_accept(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;accept failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;async_read&lt;/span&gt;(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Server&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 受信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; error &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;eof) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;receive failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;buffer_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(receive_buff_.data());
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

            receive_buff_.consume(receive_buff_.size());
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Server server(io_service);

    server.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#resolve&#34; name=&#34;resolve&#34;&gt;名前解決して接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver&lt;/code&gt;&lt;/a&gt;クラスと&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/query.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::query&lt;/code&gt;&lt;/a&gt;クラスを組み合わせて使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;query&lt;/code&gt;クラスのコンストラクタには、以下を指定する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： ホスト名&lt;/li&gt;
&lt;li&gt;第2引数 ： サービス名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ホスト名等が設定された&lt;code&gt;query&lt;/code&gt;オブジェクトを&lt;code&gt;resolver&lt;/code&gt;クラスの&lt;code&gt;resolve()&lt;/code&gt;メンバ関数に渡し、その文字列を接続関数に渡すことで、同期バージョンでの名前解決しての接続ができる。&lt;/p&gt;
&lt;p&gt;この関数の最後の引数として&lt;code&gt;boost::system::error_code&lt;/code&gt;オブジェクトへの参照を渡した場合には、名前解決失敗時にエラー情報が格納される。&lt;code&gt;error_code&lt;/code&gt;を渡さなかった場合には、名前解決失敗時に&lt;code&gt;boost::system::system_error&lt;/code&gt;が例外として投げられる。&lt;/p&gt;
&lt;p&gt;また、この関数は戻り値として、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/iterator.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::ip::tcp::resolver::iterator&lt;/code&gt;&lt;/a&gt;オブジェクトを返す。このイテレータは、デフォルト構築されたイテレータを終端としてイテレートできる。このイテレータは間接参照によって&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/endpoint.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;endpoint&lt;/code&gt;&lt;/a&gt;オブジェクトが取得できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver(io_service_);
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query &lt;span style=&#34;color:#ff0000&#34;&gt;query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;)&lt;/span&gt;;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同期で名前解決&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket,
            resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;resolve&lt;/span&gt;(query),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非同期バージョン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非同期バージョンの名前解決には、&lt;a href=&#34;http://www.boost.org/doc/libs/rerlease/doc/html/boost_asio/reference/ip__tcp/resolver.html&#34; target=&#34;_blank&#34;&gt;boost::asio::ip::tcp::resolver&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__basic_resolver/async_resolve/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;async_resolve&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： &lt;code&gt;query&lt;/code&gt;オブジェクト&lt;/li&gt;
&lt;li&gt;第2引数 ： 名前解決の成功もしくは失敗時に呼ばれる関数。iteratorプレースホルダを束縛することにより、完了時に呼ばれる関数に、&lt;code&gt;endpoint&lt;/code&gt;のイテレータが渡される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver resolver_;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          resolver_(io_service)
    {
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;query query(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;google.com&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;http&#34;&lt;/span&gt;);

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で名前解決&lt;/span&gt;
        resolver_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_resolve&lt;/span&gt;(
            query,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_resolve, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator));
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_resolve(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error,
                    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;resolver&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator endpoint_iterator)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;resolve failed: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 非同期で接続&lt;/span&gt;
        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_connect(
            socket_,
            endpoint_iterator,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect error : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect!&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;

    Client client(io_service);
    client.connect();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/network/tcp.html#timeout&#34; name=&#34;timeout&#34;&gt;タイムアウトを設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通信処理のタイムアウトには、ソケットに対してタイムアウトを指定するのではなく、タイマークラスの非同期イベントと組み合わせて行う。&lt;/p&gt;
&lt;p&gt;同期通信でタイムアウトを指定する方法はないため、ここでは非同期バージョンのみ示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/asio/steady_timer.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tcp;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Client&lt;/span&gt; {
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service_;
    tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;socket socket_;
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;streambuf receive_buff_;

    &lt;span style=&#34;color:#ff0000&#34;&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;steady_timer&lt;/span&gt; timer_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウト用のタイマー&lt;/span&gt;

&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Client(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; io_service)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; io_service_(io_service),
          socket_(io_service),
          timer_(io_service)
    {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start()
    {
        connect();
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; connect()
    {
        socket_.async_connect(
                tcp&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endpoint(asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;address&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;from_string(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;127.0.0.1&#34;&lt;/span&gt;), &lt;span style=&#34;color: #666666&#34;&gt;31400&lt;/span&gt;),
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_connect, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続完了&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_connect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;connect failed : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
        }

        start_receive();
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メッセージ送信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; start_receive()
    {
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;async_read(
            socket_,
            receive_buff_,
            asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;transfer_all(),
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_receive, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;,
                        asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error, asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;placeholders&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bytes_transferred));

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;expires_from_now&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
        timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;async_wait&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 受信完了&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error : エラー情報&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bytes_transferred : 送信したバイト数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_receive(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;operation_aborted&lt;/span&gt;) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
            timer_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;();

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error) {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;その他のエラー : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; error.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;受信成功&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
            }
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_timer(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error) {
            socket_.&lt;span style=&#34;color:#ff0000&#34;&gt;cancel&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
        }
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;io_service io_service;
    Client client(io_service);

    client.start();

    io_service.run();
}
&lt;/pre&gt;&lt;/div&gt;

タイムアウトにはいくつかのポイントがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. タイマークラスの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイマークラスには以下の選択肢がある：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイマークラス&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/deadline_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::deadline_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boost.DateTimeライブラリの&lt;code&gt;posix_time&lt;/code&gt;で時間指定を行う古いタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/high_resolution_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::high_resolution_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高分解能タイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/steady_timer.html&#34; target=&#34;_blank&#34;&gt;boost::asio::steady_timer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;時間が逆行しないことを保証するタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/system_timer.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::system_timer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time_t&lt;/code&gt;と互換性のあるタイマー&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用途に応じて使い分ける必要があるが、基本的には&lt;code&gt;steady_timer&lt;/code&gt;を推奨する。これは、タイマー処理中にOSの時間設定が変更されても時間が逆行しないタイマーであるため、外部要因によるバグを防ぐことができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. タイムアウトの時間設定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;タイムアウトの時間指定は、ここでは以下のように行なっている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 5秒でタイムアウト&lt;/span&gt;
timer_.expires_from_now(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));
timer_.async_wait(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;Client&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_timer, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, _1));
&lt;/pre&gt;&lt;/div&gt;

各タイマークラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_from_now/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_from_now()&lt;/code&gt;&lt;/a&gt;メンバ関数は、現在日時からの相対時間でタイムアウトを指定する関数である。特定の日時にタイムアウトを設定したい場合は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_waitable_timer/expires_at/overload2.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;expires_at()&lt;/code&gt;&lt;/a&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. タイムアウト方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ここまではタイムアウトではなく、単にタイマーの使い方を見てきた。
実際のタイムアウトは以下のようにして行う：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;タイマーハンドラで通信処理をキャンセル or 失敗させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信処理が正常終了するより前にタイマーハンドラが呼ばれたら、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/ip__tcp/socket.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/basic_stream_socket/cancel/overload1.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt;メンバ関数や&lt;code&gt;close()&lt;/code&gt;メンバ関数を使用して通信処理を異常終了させる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのイベント受信&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_timer&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;error) {
        socket_.cancel(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通信処理をキャンセルする。受信ハンドラがエラーになる&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

注意すべきポイントは、これらの異常終了させるための関数を呼び出しても、通信処理のイベントハンドラが呼び出されるということである。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信処理のイベントハンドラでタイムアウトによる中断をハンドリングする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;タイムアウトによって通信処理が異常終了した場合、通信処理のイベントハンドラには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;というエラーが渡される。ハンドラは、タイムアウトによって失敗したのかどうかを正しくハンドリングする必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_receive&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; error, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; bytes_transferred)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    ...
}
&lt;/pre&gt;&lt;/div&gt;

3. 通信処理がタイマーよりも早く正常終了したらタイマーをキャンセルする&lt;/p&gt;
&lt;p&gt;通信処理がタイムアウトを待つことなく正常終了した場合は、タイマーを止める必要がある。これをしないと以降の通信処理が意図せずタイムアウトになってしまうだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (error &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; asio&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operation_aborted) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;タイムアウト&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイムアウトになる前に処理が正常終了したのでタイマーを切る&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// タイマーのハンドラにエラーが渡される&lt;/span&gt;
    timer_.cancel();
}
&lt;/pre&gt;&lt;/div&gt;

タイマークラスの&lt;code&gt;calcel()&lt;/code&gt;メンバ関数を呼ぶと、&lt;code&gt;socket&lt;/code&gt;の場合と逆に、タイマーのハンドラに&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/error__basic_errors.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::asio::error::operation_aborted&lt;/code&gt;&lt;/a&gt;エラーが渡されることになる。&lt;/p&gt;
&lt;p&gt;documented boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>演算子を自動定義する -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/operators.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/operators.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;演算子を自動定義する&lt;/h1&gt;
&lt;p&gt;C++は演算子のオーバーロードによって、ユーザー定義型に演算子を持たせることができる。各演算子には関連性があり、ひとつ定義すれば他の演算子も同じように書ける。たとえば、&lt;code&gt;operator&amp;lt;()&lt;/code&gt;さえ定義すれば、&lt;code&gt;operator&amp;gt;()&lt;/code&gt;、&lt;code&gt;operator&amp;lt;=()&lt;/code&gt;, &lt;code&gt;operator&amp;gt;=()&lt;/code&gt;は&lt;code&gt;operator&amp;lt;()&lt;/code&gt;から定義できる。&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/utility/operators.htm&#34; target=&#34;_blank&#34;&gt;Boost Operators Library&lt;/a&gt;は、このような関連演算子を自動的に定義する機構を提供する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#basic-usage&#34;&gt;基本的な使い方 - 整数型を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#arithmetic-operators&#34;&gt;算術演算子&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#less-than-comparable&#34;&gt;大小比較の演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#equality-comparable&#34;&gt;等値比較の演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#addable&#34;&gt;加算演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#subtractable&#34;&gt;減算演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#multipliable&#34;&gt;乗算演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#dividable&#34;&gt;除算演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#modable&#34;&gt;剰余演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#orable&#34;&gt;OR演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#andable&#34;&gt;AND演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#xorable&#34;&gt;XOR演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#incrementable&#34;&gt;インクリメント演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#decrementable&#34;&gt;デクリメント演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#left_shiftable&#34;&gt;左シフト演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#right_shiftable&#34;&gt;右シフト演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#equivalent&#34;&gt;小なり演算子から、等値比較演算子を自動定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方 - 整数型を定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;整数型をラップした型を作るためには、多くの演算子を定義する必要がある。&lt;/p&gt;
&lt;p&gt;Boost.Operatorsによって関連演算子を自動定義することによって、これだけで整数型を定義することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;operators&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; x.v; }
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; x.v; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) { v &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; x.v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;() { &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;() { &lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;v; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt;()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator==()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator+=()によって自動生成される演算子&lt;/span&gt;
    {
        MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        x &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
        assert(y &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;));
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 以下略...&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;boost::operators&lt;/code&gt;型を&lt;code&gt;private&lt;/code&gt;継承したクラスでは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator&amp;lt;()&lt;/code&gt;を定義することによって、&lt;code&gt;operator&amp;gt;()&lt;/code&gt;、&lt;code&gt;operator&amp;lt;=()&lt;/code&gt;、&lt;code&gt;operator&amp;gt;=()&lt;/code&gt;が自動的に定義され、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator==()&lt;/code&gt;を定義することによって、&lt;code&gt;operator!=()&lt;/code&gt;が定義され、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator+=&lt;/code&gt;によって&lt;code&gt;operator+()&lt;/code&gt;が定義され、他の関連演算子も同様に自動的に定義される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#arithmetic-operators&#34; name=&#34;arithmetic-operators&#34;&gt;算術演算子&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#less-than-comparable&#34; name=&#34;less-than-comparable&#34;&gt;大小比較の演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大小比較の演算子、すなわち、&lt;code&gt;operator&amp;lt;()&lt;/code&gt;、&lt;code&gt;operator&amp;gt;()&lt;/code&gt;、&lt;code&gt;operator&amp;lt;=()&lt;/code&gt;、&lt;code&gt;operator&amp;gt;=()&lt;/code&gt;は、&lt;code&gt;boost::less_than_comparable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator&amp;lt;()&lt;/code&gt;だけを定義すれば、それ以外の関連演算子が自動的に定義される。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;メンバ関数として定義する場合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less_than_comparable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; x.v; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt;()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;非メンバ関数として定義する場合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less_than_comparable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt, MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
        { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a.v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; b.v; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt;()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#equality-comparable&#34; name=&#34;equality-comparable&#34;&gt;等値比較の演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;等値比較の演算子、すなわち、&lt;code&gt;operator==()&lt;/code&gt;、&lt;code&gt;operator!=()&lt;/code&gt;は、&lt;code&gt;boost::equality_comprable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator==()&lt;/code&gt;だけを定義すれば、関連する&lt;code&gt;operator!=()&lt;/code&gt;が自動的に定義される。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;メンバ関数として定義する場合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equality_comparable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; x.v; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator==()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非メンバ関数として定義する場合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equality_comparable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt, MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
        { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; b.v; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator==()によって自動生成される演算子&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;));
        assert(x &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#addable&#34; name=&#34;addable&#34;&gt;加算演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;加算演算子である&lt;code&gt;operator+=()&lt;/code&gt;、&lt;code&gt;operator+()&lt;/code&gt;は、&lt;code&gt;boost::addable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator+=()&lt;/code&gt;を定義するだけで&lt;code&gt;operator+()&lt;/code&gt;が自動的に定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;addable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator+=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#subtractable&#34; name=&#34;subtractable&#34;&gt;減算演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;減算演算子である&lt;code&gt;operator-=()&lt;/code&gt;、&lt;code&gt;operator-()&lt;/code&gt;は、&lt;code&gt;boost::subtractable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator-=()&lt;/code&gt;を定義するだけで&lt;code&gt;operator-()&lt;/code&gt;が自動的に定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;subtractable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator-=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;-=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#multipliable&#34; name=&#34;multipliable&#34;&gt;乗算演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;乗算演算子である&lt;code&gt;operator*=()&lt;/code&gt;, &lt;code&gt;operator*()&lt;/code&gt;は、&lt;code&gt;boost::multipliable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator*=()&lt;/code&gt;定義するだけで、自動的に&lt;code&gt;operator*()&lt;/code&gt;が定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multipliable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator*=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#dividable&#34; name=&#34;dividable&#34;&gt;除算演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;除算演算子である&lt;code&gt;operator/=()&lt;/code&gt;、&lt;code&gt;operator/()&lt;/code&gt;は、&lt;code&gt;boost::dividable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator/=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator/()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dividable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator/=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;/=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#modable&#34; name=&#34;modable&#34;&gt;剰余演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;剰余演算子である&lt;code&gt;operator%=()&lt;/code&gt;、&lt;code&gt;operator%()&lt;/code&gt;は、&lt;code&gt;boost::modable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator%=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator%()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;modable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator%=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#orable&#34; name=&#34;orable&#34;&gt;OR演算子の自動定義&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;OR演算子である&lt;code&gt;operator|=()&lt;/code&gt;、&lt;code&gt;operator|()&lt;/code&gt;は、&lt;code&gt;boost::orable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator|=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator|()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;orable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator|=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x5F&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x5F&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#andable&#34; name=&#34;andable&#34;&gt;AND演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;AND演算子、&lt;code&gt;operator&amp;amp;=()&lt;/code&gt;、&lt;code&gt;operator&amp;amp;()&lt;/code&gt;は、&lt;code&gt;boost::andable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator&amp;amp;=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator&amp;amp;()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;andable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;amp;=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x05&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x05&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#xorable&#34; name=&#34;xorable&#34;&gt;XOR演算子の自動定義&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;XOR演算子である&lt;code&gt;operator^=()&lt;/code&gt;、&lt;code&gt;operator^()&lt;/code&gt;は、&lt;code&gt;boost::xorable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator^=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator^()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xorable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator^=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;^=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x5A&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x55&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;0x0F&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0x5A&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#incrementable&#34; name=&#34;incrementable&#34;&gt;インクリメント演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;インクリメント演算子である前置&lt;code&gt;++()&lt;/code&gt;, 後置&lt;code&gt;++()&lt;/code&gt;は、&lt;code&gt;boost::incrementable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、前置&lt;code&gt;++()&lt;/code&gt;を定義するだけで、後置&lt;code&gt;++()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;incrementable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;()
    {
        &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator++()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    assert((&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;x).v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

    MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    assert((y&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;).v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#decrementable&#34; name=&#34;decrementable&#34;&gt;デクリメント演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;デクリメント演算子である前置&lt;code&gt;--()&lt;/code&gt;、後置&lt;code&gt;--()&lt;/code&gt;は、&lt;code&gt;boost::decrementable&lt;/code&gt;を&lt;code&gt;private@継承することにより、前置&lt;/code&gt;--()&lt;code&gt;を定義するだけで、後置&lt;/code&gt;--()`が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;decrementable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;()
    {
        &lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator--()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
    assert((&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;x).v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

    MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
    assert((y&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;).v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#left_shiftable&#34; name=&#34;left_shiftable&#34;&gt;左シフト演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;左シフト演算子である&lt;code&gt;operator&amp;lt;&amp;lt;=()&lt;/code&gt;、&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;は、&lt;code&gt;boost::left_shiftable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator&amp;lt;&amp;lt;=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;left_shiftable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;(MyInt x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt;&amp;lt;=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;);

    MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;;
    y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;200&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#right_shiftable&#34; name=&#34;right_shiftable&#34;&gt;右シフト演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;右シフト演算子である&lt;code&gt;operator&amp;gt;&amp;gt;=()&lt;/code&gt;、&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;は、&lt;code&gt;boost::right_shiftable&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator&amp;gt;&amp;gt;=()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;right_shiftable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;(MyInt x)
    {
        v &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; x.v;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;gt;&amp;gt;=()によって自動生成される演算子&lt;/span&gt;
    MyInt x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;;
    x &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(x.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;);

    MyInt y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt;;
    y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    assert(y.v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;50&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/operators.html#equivalent&#34; name=&#34;equivalent&#34;&gt;小なり演算子から、等値比較演算子を自動定義する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;等値比較演算子である&lt;code&gt;operator==()&lt;/code&gt;は、小なり演算子&lt;code&gt;operator&amp;lt;()&lt;/code&gt;で定義することができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::equivalent&lt;/code&gt;を&lt;code&gt;private&lt;/code&gt;継承することにより、&lt;code&gt;operator&amp;lt;()&lt;/code&gt;を定義するだけで、&lt;code&gt;operator==()&lt;/code&gt;が自動定義される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/operators.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyInt&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;equivalent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyInt&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;

    MyInt(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; v(v) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;(MyInt x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; x.v;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator&amp;lt;()によって自動生成される演算子&lt;/span&gt;
    assert(MyInt(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;  MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
    assert(MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; MyInt(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>無効値の統一的な表現 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/optional.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/optional.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;無効値の統一的な表現&lt;/h1&gt;
&lt;p&gt;関数が失敗した場合に返される値が、&lt;code&gt;-1&lt;/code&gt;だったり&lt;code&gt;NULL&lt;/code&gt;だったり&lt;code&gt;false&lt;/code&gt;だったりその他の特別な値だったり、ライブラリによって、または型によってバラバラである。&lt;a href=&#34;http://www.boost.org/libs/optional/&#34; target=&#34;_blank&#34;&gt;Boost Optional Library&lt;/a&gt;では、無効値を統一的に表現するための&lt;code&gt;boost::optional&lt;/code&gt;型を提供する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#fail-value&#34;&gt;関数の失敗値と成功値&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#type-as-nullary-value&#34;&gt;無効値がありえることを仕様ではなく型で示す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#store-value-in-if-expr&#34;&gt;&lt;code&gt;if&lt;/code&gt;文の条件式で定義した変数に格納する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#fail-value&#34; name=&#34;fail-value&#34;&gt;関数の失敗値と成功値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Optionalの基本的な使い道は、関数の失敗値を表現することである。&lt;/p&gt;
&lt;p&gt;検索の関数を考えてみよう。よくあるのは、該当要素が見つかったときに要素を指すポインタを返し、見つからなかった場合は&lt;code&gt;NULL&lt;/code&gt;ポインタを返すといったものだ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;find_value&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; v.size(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (v[i] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; value)
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;v[i];
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;NULL&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; find_value(v, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;該当なし&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
これは、Boost.Optionalを使用すると以下のように書くことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/optional.hpp&amp;gt;&lt;/span&gt;

boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; find_value(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; v.size(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (v[i] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; value)
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; v[i];
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;none;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; find_value(v, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (p) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;該当なし&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
このケースは単なるポインタの置き換えだが、&lt;code&gt;boost::optional&lt;/code&gt;はその他あらゆるケースで無効値を表現するのに使用できる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#type-as-nullary-value&#34; name=&#34;type-as-nullary-value&#34;&gt;無効値がありえることを仕様ではなく型で示す&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例として、本の見た目を模倣する電子書籍ビューアを考えよう。&lt;/p&gt;
&lt;p&gt;画面には、2ページを見開き表示するが、そのデータが偶数ページ数あるとは限らず、最終ページは見開きではなく左1ページしか表示しないかもしれない。また、ページめくりの方向によっては、右ページのみ表示する場合もある。&lt;/p&gt;
&lt;p&gt;そのようなな状況で、&lt;code&gt;boost::optional&amp;lt;int&amp;gt;&lt;/code&gt;を使用して、有効なページを指しているかどうかを管理できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/optional.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Viewer&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Page&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; pages_;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; left_page_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 左に表示するページ番号&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; right_page_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 右に表示するページ番号&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;nextPage&lt;/span&gt;()
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (left_page_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; left_page_.get() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; pages.size())
            left_page_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; left_page_.get() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
            left_page_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;none;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (right_page_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rigth_page_.get() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; pages.size())
            right_page_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; right_page_.get() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
            right_page_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;none;
    }
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;boost::optional&lt;/code&gt;により、「&lt;code&gt;-1&lt;/code&gt;ページを無効値とする」のようなプログラム仕様ではなく、型によって無効値がありえることを示すことができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/optional.html#store-value-in-if-expr&#34; name=&#34;store-value-in-if-expr&#34;&gt;if文の条件式で定義した変数に格納する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++の言語仕様では、&lt;code&gt;if&lt;/code&gt;文の条件式で変数を定義できる。&lt;code&gt;boost::optional&lt;/code&gt;の変数を&lt;code&gt;if&lt;/code&gt;文で定義すると便利だ。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get_value()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

こうすることで、&lt;code&gt;boost::optional&lt;/code&gt;変数の寿命が&lt;code&gt;if&lt;/code&gt;文のスコープになるので、連続して&lt;code&gt;optional&lt;/code&gt;値を使用する場合などに、変数名の衝突や、誤って異なる変数を使用してしまう心配がなくなる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get_position()) {
    ...
} &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでpの寿命が尽きる&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同名の変数を定義する&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get_vector()) {
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構文解析 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/parser.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/parser.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;構文解析&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本稿は記述途中です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Spirit&lt;/a&gt; ライブラリ、特にその中の &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi.html&#34; target=&#34;_blank&#34;&gt;Qi&lt;/a&gt; を用いることにより構文解析器を作成することが可能である。&lt;/p&gt;
&lt;p&gt;文法、アクションを記述したファイルを元に C/C++ ソースを生成する yacc や bison といった伝統的なパーサジェネレータとは異なり、Spirit Qi では C++ 内で文法、アクションの記述を完結させることができる。また、対象とする文法も文脈自由文法のような伝統的なクラスではなく解析表現文法(PEG: Parsing Expression Grammar)である(一般に解析表現文法は自然言語の解析には適しておらずコンピュータ言語の解析に適している)。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#api&#34;&gt;1 API&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/check-all-consume&#34;&gt;1.1 入力を全て消費したかを確認する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#skip&#34;&gt;1.2 空白等を読み飛ばす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#get-parsed-result&#34;&gt;1.3 解析された値を受け取る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 ルール&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#primitive&#34;&gt;2.1 プリミティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#directive&#34;&gt;2.2 ディレクティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#operator&#34;&gt;2.3 演算子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#semantic-action&#34;&gt;2.4 セマンティックアクション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#nonterminal&#34;&gt;2.5 非終端記号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-reference&#34;&gt;3 逆引き&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-skip&#34;&gt;3.1 空白等を読み飛ばしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-find&#34;&gt;3.2 特定の文字列で終了する部分まで読み出したい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-default-value&#34;&gt;3.3 デフォルト値を与えたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-check-condition&#34;&gt;3.4 条件によって構文解析を途中で失敗させたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-as-string&#34;&gt;3.5 ある範囲全体の結果を文字列として得たい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#api&#34; name=&#34;api&#34;&gt;API&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;構文解析の実施は &lt;code&gt;parse()&lt;/code&gt; 関数、あるいは &lt;code&gt;phrase_parse()&lt;/code&gt; 関数を呼び出すことによって行う。&lt;code&gt;parse()&lt;/code&gt; 関数と &lt;code&gt;phrase_parse()&lt;/code&gt; 関数の違いは、&lt;code&gt;phrase_parse()&lt;/code&gt; が空白等の読み飛ばし(後述する&lt;code&gt;Skipper&lt;/code&gt;)を行う一方、&lt;code&gt;parse()&lt;/code&gt; 関数は読み飛ばしを行わない点である。&lt;code&gt;phrase_parse()&lt;/code&gt; については&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#skip&#34;&gt;空白等を読み飛ばす&lt;/a&gt;を参照。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; spirit { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Expr&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; parse(
        Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; first
      , Iterator last
      , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Expr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; expr);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Expr
      , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Attr1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Attr2, ..., &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; AttrN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; parse(
        Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; first
      , Iterator last
      , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Expr&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; expr
      , Attr1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attr1, Attr2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attr2, ..., AttrN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attrN);
}}}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;parse()&lt;/code&gt;関数の引数・戻り値は、以下を意味する：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数・戻り値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;戻り値&lt;/td&gt;
&lt;td&gt;解析が成功したかどうか。&lt;br /&gt;入力が余っている場合でも解析が完了した場合は &lt;code&gt;true&lt;/code&gt; を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非 &lt;code&gt;const&lt;/code&gt; 参照で受け、かつ、値が変更されるため &lt;code&gt;s.begin()&lt;/code&gt; 等は直接渡せない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;終端のイテレータ。参照ではなく値であるため、&lt;code&gt;s.end()&lt;/code&gt;の戻り値を直接渡せる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;expr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ルール(文法部分) 後述　この場合は1つの整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;attrN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取った値の格納先&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123 456&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(
    first,
    last,
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK が出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#check-all-consume&#34; name=&#34;check-all-consume&#34;&gt;1.1 入力を全て消費したかを確認する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;parse()&lt;/code&gt; 関数、&lt;code&gt;phrase_parse()&lt;/code&gt; 関数の第1引数であるイテレータへの参照は、解析中に更新されていく。そのため構文解析中に入力が全て消費されたか確認したい場合は、第2引数に渡した値と比較すれば良い。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123 456&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(
    first,
    last,
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK は出力されない&lt;/span&gt;

s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123&#34;&lt;/span&gt;; first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(); last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(first, last, qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK が出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#skip&#34; name=&#34;skip&#34;&gt;1.2 空白等を読み飛ばす&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前述の通り &lt;code&gt;phrase_parse()&lt;/code&gt; 関数を用いる。関数呼び出しの際にどのような内容を読み飛ばすかを第4引数にルールの形で指定する(&lt;code&gt;Skipper&lt;/code&gt; と呼ばれる)。非終端記号（後述）を使用している場合は、その非終端記号の型に &lt;code&gt;Skipper&lt;/code&gt; の型を指定してやる必要があることに注意（FAQ）。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; spirit { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Expr, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Skipper&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; phrase_parse(
        Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; first
      , Iterator last
      , Expr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; expr
      , Skipper &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; skipper
      , BOOST_SCOPED_ENUM(skip_flag) post_skip &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; skip_flag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;postskip);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Iterator, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Expr, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Skipper
      , &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Attr1, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Attr2, ..., &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; AttrN&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; phrase_parse(
        Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; first
      , Iterator last
      , Expr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; expr
      , Skipper &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; skipper
      , Attr1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attr1, Attr2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attr2, ..., AttrN&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; attrN);

}}}
&lt;/pre&gt;&lt;/div&gt;

| 引数・戻り値 | 説明 |
|--------------|------|
| 戻り値       | 解析が成功したかどうか。&lt;br /&gt;入力が余っている場合でも解析が完了した場合は &lt;code&gt;true&lt;/code&gt; を返す。 |
| &lt;code&gt;first&lt;/code&gt;      | 非 &lt;code&gt;const&lt;/code&gt; 参照で受け、かつ、値が変更されるため &lt;code&gt;s.begin()&lt;/code&gt; 等は直接渡せない |
| &lt;code&gt;last&lt;/code&gt;       | 終端のイテレータ。参照ではなく値であるため、&lt;code&gt;s.end()&lt;/code&gt;の戻り値を直接渡せる |
| &lt;code&gt;expr&lt;/code&gt;       | ルール(文法部分) 後述　この場合は1つの整数 |
| &lt;code&gt;skipper&lt;/code&gt;    | 読み飛ばす条件 |
| &lt;code&gt;attrN&lt;/code&gt;      | 読み取った値の格納先 |&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;   123&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;phrase_parse(
    first,
    last,
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_,
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Skipper この場合は任意の空白&lt;/span&gt;
              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 勝手に繰り返し呼び出されるので繰り返し分を明示的に指定する必要はない&lt;/span&gt;
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK が出力される&lt;/span&gt;

first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin();
success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(first, last, qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最初の空白で失敗するため OK は出力されない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#get-parsed-result&#34; name=&#34;get-parsed-result&#34;&gt;1.3 解析された値を受け取る&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;parse()&lt;/code&gt; 関数、&lt;code&gt;phrase_parse()&lt;/code&gt; 関数のいずれも追加で読み取った値を受け取る変数を渡すことができる。複数の値を読み取る場合は複数の変数を渡すことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;123 456&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n1, n2;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;phrase_parse(
    first,
    last,
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_ &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2つの整数&lt;/span&gt;
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space,
    n1, n2                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 読み取った値の格納先&lt;/span&gt;
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK: 123, 456 が出力される&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#rule&#34; name=&#34;rule&#34;&gt;2 ルール&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ルールはプリミティブ、ディレクティブ、演算子を組み合わせることによって表現される。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#primitive&#34; name=&#34;primitive&#34;&gt;2.1 プリミティブ&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字を読むプリミティブのリストについては &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/char.html&#34; target=&#34;_blank&#34;&gt;Character Parsers&lt;/a&gt; を参照。&lt;/li&gt;
&lt;li&gt;数値を読むプリミティブのリストについては &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/numeric.html&#34; target=&#34;_blank&#34;&gt;Numeric Parsers&lt;/a&gt; を参照。&lt;/li&gt;
&lt;li&gt;文字列を読むプリミティブのリストについては &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/string.html&#34; target=&#34;_blank&#34;&gt;String Parsers&lt;/a&gt; を参照。&lt;/li&gt;
&lt;li&gt;バイナリ値を読むプリミティブのリストについては &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/binary.html&#34; target=&#34;_blank&#34;&gt;Binary Parsers&lt;/a&gt; を参照。&lt;/li&gt;
&lt;li&gt;補助的なプリミティブのリストについては &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/auxiliary.html&#34; target=&#34;_blank&#34;&gt;Auxiliary Parsers&lt;/a&gt; を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;※後で適当に丸めて翻訳して入れる&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#directive&#34; name=&#34;directive&#34;&gt;2.2 ディレクティブ&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ディレクティブのリストは &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/directive.html&#34; target=&#34;_blank&#34;&gt;Parser Directives&lt;/a&gt; を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;※後で翻訳して入れる&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#operator&#34; name=&#34;operator&#34;&gt;2.3 演算子&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;演算子のリストは &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/qi_parsers/operator.html&#34; target=&#34;_blank&#34;&gt;Parser Operators&lt;/a&gt; を参照。&lt;/li&gt;
&lt;li&gt;属性（読み取る値）の型については &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/spirit/doc/html/spirit/qi/quick_reference/compound_attribute_rules.html&#34; target=&#34;_blank&#34;&gt;Compound Attribute Rules&lt;/a&gt; を参照。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;※後で翻訳して入れる&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#semantic-action&#34; name=&#34;semantic-action&#34;&gt;セマンティックアクション&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#nonterminal&#34; name=&#34;nonterminal&#34;&gt;非終端記号&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rule&lt;/code&gt;型を用いることで、ルールに名前をつけることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Iterator の型以外は省略可能で、順序も自由&lt;/span&gt;
qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rule&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 解析対象の Iterator の型 ※しばしば template 引数&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;),             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 属性の型 ※関数型として指定し戻り値の型が読み取る値 ※省略可能&lt;/span&gt;
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locals&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ローカル変数の型 ※省略可能&lt;/span&gt;
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space_type         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Skipper の型 ※省略可能　Skipper を使いたい時には忘れず指定すること&lt;/span&gt;
                           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ※指定しなくともコンパイルできてしまうが望み通りの挙動とならない&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; int_pair;
int_pair &lt;span style=&#34;color: #666666&#34;&gt;%=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_[qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_1] &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_(qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_a); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 同じ数字の2回の繰り返し&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int_pair の任意の回数の繰り返し&lt;/span&gt;
qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rule&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;), qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; int_pairs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;int_pair;
&lt;/pre&gt;&lt;/div&gt;

また複数の &lt;code&gt;rule&lt;/code&gt; の固まりを &lt;code&gt;grammar&lt;/code&gt; としてまとめることもできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; mygrammar &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;grammar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Iterator, A1, A2, A3&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// start_rule の template 引数と一致すること&lt;/span&gt;
{
    mygrammar() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; mygrammar&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;base_type(start_rule, name)
    {
        start_rule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* */&lt;/span&gt;;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* 他の rule の定義 */&lt;/span&gt;
    }
    qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rule&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Iterator, A1, A2, A3&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; start_rule;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* 他の rule の宣言 */&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-reference&#34; name=&#34;reverse-reference&#34;&gt;3 逆引き&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-skip&#34; name=&#34;reverse-skip&#34;&gt;3.1 空白等を読み飛ばしたい&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;phrase_parse()&lt;/code&gt; と &lt;code&gt;Skipper&lt;/code&gt; を使う。&lt;code&gt;rule&lt;/code&gt;型 や &lt;code&gt;grammar&lt;/code&gt;型 を使う場合は &lt;code&gt;Skipper&lt;/code&gt; の型を指定する必要があることに注意すること。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;   123&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();

qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rule&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(), &lt;span style=&#34;color:#ff0000&#34;&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space_type&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; rule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Skipper の型指定&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;phrase_parse&lt;/span&gt;( &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// phrase_parse() を使用&lt;/span&gt;
    first,
    last,
    rule,
    &lt;span style=&#34;color:#ff0000&#34;&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;space&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Skipper この場合は任意の空白&lt;/span&gt;
              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 勝手に繰り返し呼び出されるので繰り返し分を明示的に指定する必要はない&lt;/span&gt;
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;OK&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK が出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-find&#34; name=&#34;reverse-find&#34;&gt;3.2 特定の文字列で終了する部分まで読み出したい&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文字列 &lt;code&gt;&#34;end&#34;&lt;/code&gt; までの任意の文字列(&lt;code&gt;&#34;end&#34;&lt;/code&gt; を含まない)を読み出したい場合は以下のようなルールを用いれば良い。読み飛ばしたい場合は &lt;code&gt;qi::omit&lt;/code&gt; ディレクティブを使えばよい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;(qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_ &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;end&#34;&lt;/span&gt;)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;end&#34;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-default-value&#34; name=&#34;reverse-default-value&#34;&gt;3.3 デフォルト値を与えたい&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例えば文字列 &lt;code&gt;&#34;value:&#34;&lt;/code&gt; に続いて数値がある場合はその数値を、ない場合はデフォルト値 &lt;code&gt;42&lt;/code&gt; を返したい場合は以下のように &lt;code&gt;qi::attr&lt;/code&gt; を使用すればよい。省略された場合にさらに数値が続く場合は省略されているか否かが判別できずにうまくいかない（場合が多い）ので注意。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value:&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_ &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;) )
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-check-condition&#34; name=&#34;reverse-check-condition&#34;&gt;3.4 条件によって構文解析を途中で失敗させたい&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常は何もせず常に成功するプリミティブ &lt;code&gt;qi::eps&lt;/code&gt; （※特定のタイミングでセマンティックアクションを実行させたい場合等に使う）に遅延評価される引数を与えることで実現できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; phx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;phoenix;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 読み出した整数が 42 以外の時だけ成功する&lt;/span&gt;
qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;rule&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;int_[phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(n) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_1] &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;eps&lt;/span&gt;(phx&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(n) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/parser.html#reverse-as-string&#34; name=&#34;reverse-as-string&#34;&gt;3.5 ある範囲全体の結果を文字列として得たい&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例えば改行で終端される空白区切りの文字列を得たい場合、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit_(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

をルールとすると空白を除いた文字列が得られることになるが場合によっては空白を含む文字列全体を得たい場合があるかもしれない。あるいは、単純に構成すると文字列のリスト(&lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt;)が属性の型となってしまうが欲しいのはリストではなく文字列である場合もあるだろう。こうした場合、&lt;code&gt;qi::raw&lt;/code&gt; ディレクティブを使うのが簡単である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; qi &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;spirit&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;qi;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a b c&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;);
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.begin(), last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.end();
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string value;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; success &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;parse(
    first,
    last,
    &lt;span style=&#34;color:#ff0000&#34;&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;raw&lt;/span&gt;[(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;))] &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; qi&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lit(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;),
    value
);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (success) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a b c が出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>カリー化／部分適用 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/partial_eval.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/partial_eval.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;カリー化／部分適用&lt;/h1&gt;
&lt;p&gt;カリー化と部分適用は、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/bind/bind.html&#34; target=&#34;_blank&#34;&gt;Boost Bind Library&lt;/a&gt;と&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/function.html&#34; target=&#34;_blank&#34;&gt;Boost Function Library&lt;/a&gt;を組み合わせることで表現できる。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#partial-application&#34;&gt;部分適用(partial application)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#currying&#34;&gt;カリー化(currying)+適用(applying)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#receiver-partial-application&#34;&gt;メンバ関数のレシーバを部分適用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#partial-application&#34; name=&#34;partial-application&#34;&gt;部分適用(partial application)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::bind()&lt;/code&gt;関数で、あとから指定したい引数に、プレースホルダーと呼ばれる値を指定することで、関数の一部の引数を先に渡しておき、残りをあとから指定して呼び出す、ということができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/function.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;_1&lt;/code&gt;の指定は、「&lt;code&gt;boost::bind()&lt;/code&gt;によって返された関数オブジェクトの第1引数を使用する」ということを意味する。&lt;/p&gt;
&lt;p&gt;この場合、&lt;code&gt;boost::bind()&lt;/code&gt;によって返された関数オブジェクトの第1引数&lt;code&gt;3&lt;/code&gt;を、&lt;code&gt;add()&lt;/code&gt;関数の&lt;code&gt;_1&lt;/code&gt;を指定した位置である第2引数として使用している。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#currying&#34; name=&#34;currying&#34;&gt;カリー化(currying)+適用(applying)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;カリー化は、&lt;code&gt;boost::bind()&lt;/code&gt;を使用して、第1引数のみを部分適用し、第2引数をプレースホルダーにすることで疑似的に表現できる。&lt;/p&gt;
&lt;p&gt;カリー化のみを行う関数は用意されていないので、自分で作る必要がある(参考: &lt;a href=&#34;http://ideone.com/qtXeA&#34; target=&#34;_blank&#34;&gt;http://ideone.com/qtXeA&lt;/a&gt; )。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/function.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// add関数の第1引数に2が渡される関数オブジェクトを返し、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// その関数オブジェクトにさらに引数を渡して最終結果を得る。&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1)(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/partial_eval.html#receiver-partial-application&#34; name=&#34;receiver-partial-application&#34;&gt;メンバ関数のレシーバを部分適用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::bind()&lt;/code&gt;は、メンバ関数ポインタも扱うことができる。&lt;/p&gt;
&lt;p&gt;その場合、第1引数にメンバ関数ポインタ、第2引数にメンバ関数のレシーバ(そのメンバ関数を持つオブジェクト)、残りの引数としてメンバ関数の引数を指定する。&lt;/p&gt;
&lt;p&gt;レシーバを部分適用することで、その返される関数オブジェクトを保持するクラスに、レシーバーのクラスへの依存関係を持たせることのない設計が可能となる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/function.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A&lt;/span&gt; {
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f_; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Bクラスには依存しない&lt;/span&gt;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;set_func&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f)
    {
        f_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f;
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;invoke&lt;/span&gt;()
    {
        f_(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B::print()を呼び出し&lt;/span&gt;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;B&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B::print()&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    A a;
    B b;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B::print()関数のレシーバを部分評価して他のクラスに渡す&lt;/span&gt;
    a.set_func(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;B&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;b));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 呼び出し&lt;/span&gt;
    a.invoke();
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B::print()
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コマンドラインオプションの定義／取得 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/program_options.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/program_options.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;コマンドラインオプションの定義／取得&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/program_options.html&#34; target=&#34;_blank&#34;&gt;Boost Program Options Library&lt;/a&gt;を用いるとプログラムの実行時に付けられる引数文字列について、一般的なオプションの仕組みの定義とその取得を容易に行える。&lt;/p&gt;
&lt;p&gt;なお、Boost.ProgramOptionsを用いる場合はコンパイルの際に&lt;code&gt;g++ -lboost_program_options source.cxx&lt;/code&gt;の様にしてバイナリーのライブラリーをリンクする必要がある点に注意。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html#define-option&#34;&gt;オプションを定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html#get-option&#34;&gt;オプションを取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html#define-option&#34; name=&#34;define-option&#34;&gt;オプションを定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;boost/program_options.hpp&amp;gt;&lt;/code&gt;に定義される&lt;code&gt;boost::program_options&lt;/code&gt;名前空間に含まれる&lt;code&gt;options_description&lt;/code&gt;型により、プログラムオプションを定義する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/program_options.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ac, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; av)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;program_options;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オプションの定義&lt;/span&gt;
  options_description description(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;おぷしょん&#34;&lt;/span&gt;);
  description.add_options()
    (&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hoge,h&#34;&lt;/span&gt;, value&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;default_value(&lt;span style=&#34;color: #666666&#34;&gt;-100&lt;/span&gt;), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ほげほげおぷしょんの説明だよ&#34;&lt;/span&gt;)
    (&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;fuga,f&#34;&lt;/span&gt;, value&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;multitoken(), &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ふがふがおぷしょんの説明だよ&#34;&lt;/span&gt;)
    (&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;help,H&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;へるぷ&#34;&lt;/span&gt;)
    (&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;version,v&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ばーじょん情報&#34;&lt;/span&gt;)
    ;
}
&lt;/pre&gt;&lt;/div&gt;

以上の例では、&lt;code&gt;app -hoge 123 -fuga 1 2 4 8 16 32&lt;/code&gt;であるとか、&lt;code&gt;app -h -10 -f 123 456 789&lt;/code&gt;であるとか&lt;code&gt;app -H&lt;/code&gt;などの様な利用法を想定したプログラムオプションを定義している。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;hoge&lt;/code&gt;にはデフォルト値として &lt;code&gt;-100&lt;/code&gt; 、&lt;code&gt;fuga&lt;/code&gt;は複数要素のオプションとして&lt;code&gt;multitoken()&lt;/code&gt;を定義している。&lt;/p&gt;
&lt;p&gt;※定義しただけでは意味がありませんので、実際には「&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html#get-option&#34;&gt;オプションの取得&lt;/a&gt;」と組み合わせて使います。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/program_options.html#get-option&#34; name=&#34;get-option&#34;&gt;オプションを取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;parse_command_line()&lt;/code&gt;関数を使用して、&lt;code&gt;options_description&lt;/code&gt;の定義に基づいてコマンドライン引数を解析し、その結果を&lt;code&gt;variables_map&lt;/code&gt;オブジェクトに対して格納する事を定義する。&lt;code&gt;notiry()&lt;/code&gt;関数を使用することで、実際に&lt;code&gt;variables_map&lt;/code&gt;オブジェクトに解析されたプログラムオプションの結果が格納される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/program_options.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ac, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; av)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;program_options;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オプションの定義&lt;/span&gt;
  options_description description(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;おぷしょん&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// （省略：「オプションの定義」を参照のこと）&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// オプションの取得&lt;/span&gt;
  variables_map vm;
  store(&lt;span style=&#34;color:#ff0000&#34;&gt;parse_command_line&lt;/span&gt;(ac, av, description), vm);
  &lt;span style=&#34;color:#ff0000&#34;&gt;notify&lt;/span&gt;(vm);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (a.) オプション help が存在すれば description をコマンドのヘルプとして出力する。&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( vm.count(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;help&#34;&lt;/span&gt;) )
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; description &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (b.) オプション hoge の取得（ int 型）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; hoge &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vm[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hoge&#34;&lt;/span&gt;].as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;();

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (c.) オプション fuga の取得 （ std::vector&amp;lt;unsigned&amp;gt; 型）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; fuga &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vm[&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;fuga&#34;&lt;/span&gt;].as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;

この例では、(a.)により実際に実行時に&lt;code&gt;app -H&lt;/code&gt;とコマンドラインでオプションを定義すれば、 &lt;code&gt;description&lt;/code&gt; を元にした一般的なプログラムオプションの表示が行われる。&lt;/p&gt;
&lt;p&gt;(b.)と(c.)ではそれぞれ&lt;code&gt;app -hoge -10&lt;/code&gt;や&lt;code&gt;app -fuga 123 456 789&lt;/code&gt;の様に定義されたプログラムオプションをそれぞれ&lt;code&gt;int&lt;/code&gt;型、&lt;code&gt;std::vector&amp;lt;unsigned&amp;gt;&lt;/code&gt;型取得している。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>乱数 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/random.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/random.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;乱数&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_random.html&#34; target=&#34;_blank&#34;&gt;Boost Random Library&lt;/a&gt;は、多数の擬似乱数生成器と分布のクラスを提供するライブラリである。Boost.Randomは、メルセンヌツイスターや線形合同法といった擬似乱数を生成するアルゴリズムと、整数一様分布やベルヌーイ分布といった値の分布のアルゴリズムを組み合わせて使用するという特徴を持つ。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/random.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/random.html#set-seed&#34;&gt;シードを再設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/random.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下は、メルセンヌツイスター法による乱数生成と、1から6までの値を一様分布する例である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mt19937&lt;/code&gt;がメルセンヌツイスター法による擬似乱数生成アルゴリズムのエンジンクラス、&lt;code&gt;uniform_int_distribution&lt;/code&gt;が一様分布(等確率)による分布アルゴリズムのクラスである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uniform_int_distribution&lt;/code&gt;はコンストラクタで値の範囲を受け取り、その関数呼び出し演算子の引数としてエンジンを受け取ることにより、そのエンジンで指定された値の範囲の擬似乱数を生成する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 gen;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_int_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist(gen);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
1
6
6
1
6
6
2
4
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/random.html#set-seed&#34; name=&#34;set-seed&#34;&gt;シードを再設定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Randomのジェネレータでシードの再設定をするには、ジェネレータの&lt;code&gt;seed()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、ジェネレータのコンセプトとして規定されているので、Boost.Randomの全てのジェネレータで同じように使用できる。&lt;/p&gt;
&lt;p&gt;以下は、メルセンヌ・ツイスターの例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; seed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// てきとうなシード&lt;/span&gt;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 gen(seed);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; gen() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;--&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    gen.seed(seed); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// シードを再設定&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; gen() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2357136044
2546248239
3071714933
--
2357136044
2546248239
3071714933
&lt;/code&gt;&lt;/pre&gt;
シード再設定後に、同じ値が生成されているのがわかるだろう。&lt;/p&gt;
&lt;p&gt;分布クラスを通しても同じ値が生成される：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; seed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 gen(seed);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_int_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dist(gen) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;--&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    gen.seed(seed); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// シードを再設定&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dist(gen) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;6
6
7
--
6
6
7
&lt;/code&gt;&lt;/pre&gt;
なお、シードを取得する機能はないので、シードの管理自体はユーザーが行う必要がある。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープを抜ける際に実行されるブロック -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/scope_guard.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/scope_guard.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;スコープを抜ける際に実行されるブロック&lt;/h1&gt;
&lt;p&gt;スコープを抜ける際に、リソースを確実に解放するのはC++のRAIIという手法で行われる。しかし、RAIIはクラスと、そのデストラクタを書くことによってリソースを解放するため、関数ローカルにおいて即興で必要となる場合にはコード量が多くなってしまう。&lt;/p&gt;
&lt;p&gt;Boost C++ Librariesでは、関数を抜ける際に実行される式、またはブロックを定義する方法をいくつか提供している。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/scope_guard.html#scope-exit&#34;&gt;Boost Scope Exit Libraryを使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/scope_guard.html#scope-exit&#34; name=&#34;scope-exit&#34;&gt;Boost Scope Exit Libraryを使用する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.ScopeExitは、関数のスコープを抜ける際に実行されるブロックを定義するための&lt;code&gt;BOOST_SCOPE_EXIT&lt;/code&gt;マクロを提供する。&lt;/p&gt;
&lt;p&gt;以下がその基本的な使い方である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/scope_exit.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;()
    {
        value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

        BOOST_SCOPE_EXIT((&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;value)) {
            value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
        } BOOST_SCOPE_EXIT_END

        value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    X x;
    x.foo();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
関数&lt;code&gt;X::foo()&lt;/code&gt;の中では、関数の先頭で&lt;code&gt;value&lt;/code&gt;に&lt;code&gt;0&lt;/code&gt;を代入し、関数を抜ける直前で&lt;code&gt;value&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を代入している。&lt;/p&gt;
&lt;p&gt;そして、&lt;code&gt;BOOST_SCOPE_EXIT&lt;/code&gt;マクロで定義されたブロックの中で&lt;code&gt;value&lt;/code&gt;に&lt;code&gt;2&lt;/code&gt;が代入されているが、このブロックが&lt;code&gt;X::foo()&lt;/code&gt;を抜けるタイミングで呼び出されることで、最終的に&lt;code&gt;value&lt;/code&gt;の値が&lt;code&gt;2&lt;/code&gt;になっている。&lt;/p&gt;
&lt;p&gt;Boost.ScopeExitは &lt;strong&gt;変数のキャプチャ&lt;/strong&gt; という機能を持っており、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;value
&lt;/pre&gt;&lt;/div&gt;

という表記によって、変数&lt;code&gt;value&lt;/code&gt;への参照をScope Exit構文の中で使用できるようにしている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;value
&lt;/pre&gt;&lt;/div&gt;

と書いた場合には、変数&lt;code&gt;value&lt;/code&gt;のコピーをScope Exit構文の中で使用できるようになる。&lt;/p&gt;
&lt;p&gt;また、以下のように、変数をカッコで囲んで連続で記述することにより、複数の変数をキャプチャすることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_SCOPE_EXIT((&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x)(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y)) {
    x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
} BOOST_SCOPE_EXIT_END
&lt;/pre&gt;&lt;/div&gt;

なお、Boost-1.50以降ではラムダ式を用いたC++11版の&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/scope_exit/doc/html/BOOST_SCOPE_EXIT_ALL.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_SCOPE_EXIT_ALL&lt;/code&gt;&lt;/a&gt;マクロが追加され、次のように簡潔なコードも可能になった。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_SCOPE_EXIT_ALL(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) {
    x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    y &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;BOOST_SCOPE_EXIT_ALL&lt;/code&gt;では引数をカンマで区切り、それぞれに&lt;code&gt;=&lt;/code&gt;または&lt;code&gt;&amp;amp;&lt;/code&gt;により値キャプチャーと参照キャプチャーを定義でき、&lt;code&gt;BOOST_SCOPE_EXIT_END&lt;/code&gt;に相当する終端マクロは不要になった。ただし、スコープ定義の終わりにはステートメント終端のセミコロンが必要になっている点に注意されたい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_SCOPE_EXIT&lt;/code&gt;と&lt;code&gt;BOOST_SCOPE_EXIT_TPL&lt;/code&gt;の内部実装を&lt;code&gt;BOOST_SCOPE_EXIT_ALL&lt;/code&gt;と同様にラムダ式を使うバージョンに切り替えるための&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/scope_exit/doc/html/BOOST_SCOPE_EXIT_CONFIG_USE_LAMBDAS.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_SCOPE_EXIT_CONFIG_USE_LAMBDAS&lt;/code&gt;&lt;/a&gt;マクロも用意されている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boost.ScopeExitの使いどころ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boost ScopeExitは主にメンバ変数に対する関数内でのコミット／ロールバックを目的に使用されることが多い。&lt;/p&gt;
&lt;p&gt;たとえば、ボタンクラスを作成することを考える。&lt;/p&gt;
&lt;p&gt;ボタンは、「押した」「離した」という状態をボタン自身に伝える機能を持ち、内部で通常状態と押下状態の画像を切り替えることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Button&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; down();
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;up&lt;/span&gt;();

    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_down() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; in_rect(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

そして、ボタンをメンバ変数として持つ画面クラスが、画面のある位置をクリックした場合に呼ばれるハンドラを持っているとしよう。&lt;/p&gt;
&lt;p&gt;以下のように書くことでボタンの画像切り替えロジックが書ける。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;View&lt;/span&gt; {
    Button back_button_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_click_down&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (back_button_.in_rect(p)) {
            back_button_.down(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 押下状態の画像に切替える&lt;/span&gt;
        }
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_click_up&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (back_button_.is_down() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            back_button_.in_rect(p)) {
            back_button_.up(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通常状態の画像に切り替える&lt;/span&gt;
            on_back_button();
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 戻るボタンが押された&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_back_button&lt;/span&gt;()
    {
        ...
    }
};
&lt;/pre&gt;&lt;/div&gt;

ここでは、&lt;code&gt;on_click_up()&lt;/code&gt;の中で「押されていたら離して処理する」ということをしている。&lt;/p&gt;
&lt;p&gt;このプログラムが問題になるのは、ボタンが増えたときや、途中で&lt;code&gt;return&lt;/code&gt;する必要が出てきた場合である。押されている状態からでなければ離すことはできないので、関数の始めに離すことはできず、途中で&lt;code&gt;return&lt;/code&gt;されることを考えると関数の最後で離すこともできない。&lt;/p&gt;
&lt;p&gt;そういったときに、Boost.ScopeExitを使用することで、関数のスコープを抜けた際に、全てのボタンを確実に離すことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;View&lt;/span&gt; {
    Button back_button_;
    Button next_button_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_click_down&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (back_button_.in_rect(p)) {
            back_button_.down(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 押下状態の画像に切替える&lt;/span&gt;
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (next_button_.in_rect(p)) {
            next_button_.down();
        }
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_click_up&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        BOOST_SCOPE_EXIT((&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;back_button_)(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;next_button_)) {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// スコープを抜ける際に全てのボタンを離す&lt;/span&gt;
            back_button_.up();
            next_button_.up();
        } BOOST_SCOPE_EXIT_END

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (back_button_.is_down() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            back_button_.in_rect(p)) {
            on_back_button();
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (next_button_.is_down() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            next_button_.in_rect(p)) {
            on_next_button();
        }
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 戻るボタンが押された&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_back_button&lt;/span&gt;()
    {
        ...
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 次へボタンが押された&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_next_button&lt;/span&gt;()
    {
        ...
    }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>シリアライズ -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/serialize.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/serialize.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;シリアライズ&lt;/h1&gt;
&lt;p&gt;データの保存、ネットワーク通信でのデータの送受信といった場面において、任意の型の特定のフォーマットへのシリアライズ、デシリアライズが必要になることがある。&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/serialization/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Serialization Library&lt;/a&gt;は、標準ライブラリやBoostライブラリのあらゆる型へのシリアライズとデシリアライズと、ユーザー定義型のシリアライズ方法を提供するライブラリである。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#support-format&#34;&gt;サポートされているフォーマット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#serialize-user-defined-type&#34;&gt;ユーザー定義型をシリアライズする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#non-intrusive&#34;&gt;非侵入型のシリアライズ関数を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#different-bahavior-serialize-deserialize&#34;&gt;非侵入型のシリアライズ関数で保存と読み込みで違う動作をさせる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#support-format&#34; name=&#34;support-format&#34;&gt;サポートされているフォーマット&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Serializationでは、以下のフォーマットへのシリアライズ、デシリアライズをサポートしている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フォーマット&lt;/th&gt;
&lt;th&gt;インクルード&lt;/th&gt;
&lt;th&gt;補足&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;バイナリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;boost/archive/binary_iarchive.hpp&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&amp;lt;boost/archive/binary_oarchive.hpp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プラットフォーム間の互換性なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;テキスト&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;boost/archive/text_iarchive.hpp&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&amp;lt;boost/archive/text_oarchive.hpp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XML&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;boost/archive/xml_iarchive.hpp&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&amp;lt;boost/archive/xml_oarchive.hpp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#serialize-user-defined-type&#34; name=&#34;serialize-user-defined-type&#34;&gt;ユーザー定義型をシリアライズする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Serializationでは、ユーザー定義型に、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::serialization::access&lt;/code&gt;への&lt;code&gt;friend&lt;/code&gt;指定を行い、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serialize()&lt;/code&gt;メンバ関数を持たせ、&lt;code&gt;Arhive&lt;/code&gt;にシリアライズするメンバ変数を登録&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;することで、ユーザー定義型をシリアライズとデシリアライズが可能な型にすることができる。&lt;/p&gt;
&lt;p&gt;次に、各フォーマットのアーカイブ型は、コンストラクタで&lt;code&gt;std::istream&lt;/code&gt;もしくは&lt;code&gt;std::ostream&lt;/code&gt;を取る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::fstream&lt;/code&gt;を渡すことでファイルに出力、&lt;code&gt;std::stringstream&lt;/code&gt;を渡すことで文字列に出力することができる。&lt;/p&gt;
&lt;p&gt;アーカイブに対してシリアライズ可能な型をストリームで渡すことにより、ユーザー定義型をシリアライズ、デシリアライズすることができる。&lt;/p&gt;
&lt;p&gt;ここでは、&lt;code&gt;Data&lt;/code&gt;型をテキスト形式でシリアライズ、デシリアライズしている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/archive/text_oarchive.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/archive/text_iarchive.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/serialization.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/nvp.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/string.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Data&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    Data() {}
    Data(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; value(value), str(str) {}

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print()
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;boost&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;access;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; serialize(Archive&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/*version*/&lt;/span&gt;)
    {
        ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value&#34;&lt;/span&gt;, value);
        ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str&#34;&lt;/span&gt;, str);
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a.txt&#34;&lt;/span&gt;);
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;archive&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;text_oarchive ar(file);

        Data data(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc&#34;&lt;/span&gt;);
        ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data&#34;&lt;/span&gt;, data);
    }
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ifstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a.txt&#34;&lt;/span&gt;);

        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;archive&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;text_iarchive ar(file);

        Data data;
        ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;serialization&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Data&#34;&lt;/span&gt;, data);

        data.print();
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力ファイル a.txt：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;22 serialization::archive 9 0 0 3 3 abc
&lt;/code&gt;&lt;/pre&gt;
実行結果(出力ファイルの読込結果)：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
abc
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;boost::serialization::make_nvp&lt;/code&gt;の&lt;code&gt;nvp&lt;/code&gt;はName Value Pairの略で、値に対して名前を関連付けている。&lt;/p&gt;
&lt;p&gt;これは、XML形式のようなアーカイブを使用する際に、要素名として使用される。&lt;/p&gt;
&lt;p&gt;ここでは&lt;code&gt;boost::archive::text_oarchive&lt;/code&gt;を使用してテキスト形式にシリアライズしているが、これを&lt;code&gt;boost::archive::xml_oarchive&lt;/code&gt;に変えるだけでXML形式にシリアライズされる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#non-intrusive&#34; name=&#34;non-intrusive&#34;&gt;非侵入型のシリアライズ関数を定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;すでに作成されたクラス、またはサードパーティで用意されているクラスをシリアライズしたい場合がある。&lt;/p&gt;
&lt;p&gt;その場合は非侵入型のシリアライズを定義するのが良いだろう。&lt;/p&gt;
&lt;p&gt;非侵入型シリアライズは &lt;code&gt;boost::serialization&lt;/code&gt; 名前空間にシリアライズしたい型を受け取る &lt;code&gt;serialize()&lt;/code&gt; 関数を定義することで実現できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/serialization.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/nvp.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Data {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; number;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; real;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; serialization {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; serialize(Archive &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, Data &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; d, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* version */&lt;/span&gt;) {
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;number&#34;&lt;/span&gt;, d.number);
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; make_nvp(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;real&#34;&lt;/span&gt;, d.real);
}

} } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace boost::serialization&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

当然ながら、非侵入型シリアライズが正しく動作するのは、クラス外部からアクセスできるデータでインスタンスが再構成可能なクラスに限られる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/serialize.html#different-bahavior-serialize-deserialize&#34; name=&#34;different-bahavior-serialize-deserialize&#34;&gt;非侵入型のシリアライズ関数で保存と読み込みで違う動作をさせる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;サードパーティで用意されているクラスをシリアライズする場合、専用の関数などをつかって構築する場合など、&lt;code&gt;serialize()&lt;/code&gt; 関数だけでは実装しにくい場合がある。&lt;/p&gt;
&lt;p&gt;そのため、非侵入型でも &lt;code&gt;save()&lt;/code&gt;/&lt;code&gt;load()&lt;/code&gt; 関数に分解して保存時と読み込み時の動作を分ける方法が用意されている。使用するには &lt;code&gt;split_free()&lt;/code&gt; 関数を用いる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/serialization.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/serialization/split_free.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Data {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; serialization {

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; serialize(Archive &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, Data &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; d, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; version) {
    split_free(ar, d, version);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; save(Archive &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, Data &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; d, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* version */&lt;/span&gt;) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d.value &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0xFFFFFFFF&lt;/span&gt;;
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Archive&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; load(Archive &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ar, Data &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; d, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* version */&lt;/span&gt;) {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v;
    ar &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v;
    d.value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0xFFFFFF&lt;/span&gt;;
}

} } &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// namespace boost::serialization&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>シグナル／スロット -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/signals.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/signals.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;シグナル／スロット&lt;/h1&gt;
&lt;p&gt;イベント処理などで使われるシグナル／スロットには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/signals2.html&#34; target=&#34;_blank&#34;&gt;Boost Signals2 Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#connect-multiple-functions&#34;&gt;複数の関数を登録する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#disconnect&#34;&gt;スロットを切断する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#return-value&#34;&gt;シグナル呼び出しの戻り値&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#customize-return-value&#34;&gt;シグナル呼び出しの戻り値をカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#connect-multiple-functions&#34; name=&#34;connect-multiple-functions&#34;&gt;複数の関数を登録する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals2のシグナルには、&lt;code&gt;connect()&lt;/code&gt;関数によって、複数の関数を接続することができる。&lt;/p&gt;
&lt;p&gt;シグナルの関数呼び出し演算子によって、接続した関数全てを呼び出すことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/signals2/signal.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;
    Point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Button&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; clicked;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;click&lt;/span&gt;()
    {
        clicked(Point(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 呼び出し&lt;/span&gt;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainView&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_clicked(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MainView : clicked&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SubView&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_clicked(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SubView : clicked&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    MainView mainView;
    SubView subView;

    Button button;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クリックイベントの登録&lt;/span&gt;
    button.clicked.connect(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;MainView&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_clicked, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;mainView, _1));
    button.clicked.connect(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;SubView&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_clicked, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;subView, _1));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クリックした&lt;/span&gt;
    button.click();
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;MainView : clicked
SubView : clicked
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#disconnect&#34; name=&#34;disconnect&#34;&gt;スロットを切断する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットを切断するには、&lt;code&gt;connect()&lt;/code&gt;関数の戻り値であるコネクションを保持しておき、コネクションの&lt;code&gt;disconnect()&lt;/code&gt;メンバ関数を呼び出すことで、切断する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/signals2/signal.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Point {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, y;
    Point(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; x(x), y(y) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Button&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; clicked;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;click&lt;/span&gt;()
    {
        clicked(Point(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;));
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainView&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_clicked(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MainView : clicked&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SubView&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; on_clicked(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Point&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; p)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SubView : clicked&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    MainView mainView;
    SubView subView;

    Button button;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クリックイベントを登録&lt;/span&gt;
    button.clicked.connect(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;MainView&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_clicked, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;mainView, _1));

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;connection con &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
        button.clicked.connect(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;SubView&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;on_clicked, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;subView, _1));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// SubViewのスロットを切断&lt;/span&gt;
    con.disconnect();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// クリックした&lt;/span&gt;
    button.click();
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;MainView : clicked
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#return-value&#34; name=&#34;return-value&#34;&gt;シグナル呼び出しの戻り値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;特に指定しなければ、シグナルを呼び出した時の戻り値は接続する関数の戻り値の&lt;code&gt;optional&lt;/code&gt;となり、最後に登録した関数の戻り値が戻される。また、関数が接続されていなければ無効値を戻す。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/html/boost/signals2/optional_last_value.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;optional_last_value()&lt;/code&gt;&lt;/a&gt;を参照。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/signals2/signal.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;minus&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;multiply&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;divide&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sig;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; non_connect_sig;

    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;add);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;minus);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;multiply);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;divide);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// boost::optional&amp;lt;int&amp;gt;が戻ってくる&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sig(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 無効値&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; non_connect_result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; non_connect_sig(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;non_connect_result) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invalid value&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
invalid value
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/signals.html#customize-return-value&#34; name=&#34;customize-return-value&#34;&gt;シグナル呼び出しの戻り値をカスタマイズする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::signals2::signal&lt;/code&gt;クラスの2番目のテンプレート引数&lt;code&gt;Combiner&lt;/code&gt;を変更することで、戻り値のカスタムが可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/signals2/signal.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 接続された複数の関数の戻り値の合計を戻す&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;custom_result_value&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T result_type;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; InputIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    result_type &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(InputIterator first, InputIterator last) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; last ) {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result_type();
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulate(first, last, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;minus&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;multiply&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;divide&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt; y;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signals2&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;signal&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;), &lt;span style=&#34;color:#ff0000&#34;&gt;custom_result_value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sig;

    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;add);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;minus);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;multiply);
    sig.connect(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;divide);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sig(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;45
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リソースを自動的に解放する -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/smart_ptr.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/smart_ptr.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;リソースを自動的に解放する&lt;/h1&gt;
&lt;p&gt;リソースを自動的に解放するには、「スマートポインタ」と呼ばれるクラスを使用する。スマートポインタとは、&lt;code&gt;new&lt;/code&gt;のように動的に確保したオブジェクトへのポインタを保持して、自動的に解放するものである。また、通常のポインタのように利用することが可能である。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#no-share-smart-pointer&#34;&gt;共有しないオブジェクトのスマートポインタ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#share-smart-pointer&#34;&gt;参照カウント方式のスマートポインタ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#avoid-usage-shared-ptr&#34;&gt;&lt;code&gt;shared_ptr&lt;/code&gt;で避けること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#customize-release-behavior-shared-ptr&#34;&gt;解放の方法を自分で決める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#weak-reference&#34;&gt;弱い参照&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#intrusive-pointer&#34;&gt;侵入型参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#no-share-smart-pointer&#34; name=&#34;no-share-smart-pointer&#34;&gt;共有しないオブジェクトのスマートポインタ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;共有する必要がない&lt;code&gt;new&lt;/code&gt;で確保したオブジェクト、例えばローカルスコープで&lt;code&gt;new&lt;/code&gt;と&lt;code&gt;delete@を使うような状況では、&lt;/code&gt;scoped_ptr&lt;code&gt;、&lt;/code&gt;scoped_array&lt;code&gt;を使うことができる。&lt;/code&gt;scoped_ptr`について、以下の点に注意する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;同士のコピーは不可&lt;/li&gt;
&lt;li&gt;標準コンテナで保持できない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new []&lt;/code&gt;で確保した配列を保持することはできない&lt;/li&gt;
&lt;li&gt;不完全型や&lt;code&gt;void&lt;/code&gt;をテンプレート引数に与えることはできない&lt;/li&gt;
&lt;li&gt;解放の方法を自分で決めることはできない共有する必要がない&lt;code&gt;new []&lt;/code&gt;で確保したオブジェクトを保持する場合は&lt;code&gt;scoped_array&lt;/code&gt;を使う。デリーターがどうしても必要な場合はBoost.Interprocessの&lt;code&gt;scoped_ptr&lt;/code&gt;/&lt;code&gt;scoeped_array&lt;/code&gt;を使用すると良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scoped_ptr&lt;/code&gt;のサンプル：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/scoped_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; object
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; num;

    object(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
        num( n )
    { }

    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;object()
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; object( &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; ) );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタと同じように使うことが出来る&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;num &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; 

} &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでpが自動的にdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;scoped_array&lt;/code&gt;サンプル：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/scoped_array.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;scoped_array&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[N]);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 通常の配列のように使うことが出来る&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        p[i] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; i;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
    }
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

} &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでpが自動的にdelete []される&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#share-smart-pointer&#34; name=&#34;share-smart-pointer&#34;&gt;参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;は主に動的に割り当てられてたオブジェクトへのポインタを保持して、&lt;code&gt;shared_ptr&lt;/code&gt;内部の参照カウントによって管理するものである。確保したオブジェクトを指す最後の&lt;code&gt;shared_ptr&lt;/code&gt;が破棄またはリセットされるときに解放される。&lt;code&gt;shared_ptr&lt;/code&gt;は以下のことが可能である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標準コンテナで保持すること&lt;/li&gt;
&lt;li&gt;テンプレート引数に不完全型や&lt;code&gt;void&lt;/code&gt;を与えること&lt;/li&gt;
&lt;li&gt;自分で解放の方法を決めること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T*&lt;/code&gt;から&lt;code&gt;U*&lt;/code&gt;に暗黙の型変換が可能なとき、&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;U&amp;gt;&lt;/code&gt;の暗黙の変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;の暗黙の変換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;から&lt;code&gt;shared_ptr&amp;lt;T const&amp;gt;&lt;/code&gt;の暗黙の変換&lt;code&gt;new []&lt;/code&gt;によって確保されたオブジェクトは&lt;code&gt;shared_array&lt;/code&gt;を使う。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; object
{
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; num;

    object(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
        num( n )
    { }

    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;object()
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; object(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタのように使うことが出来る&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p0&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;num &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p1はp0と同じオブジェクトを指すshared_ptr&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p1(p0);
    p1&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;num &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p0&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;num &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// STLで保持することも可能&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; vec;
    vec.push_back(p1);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vec.front()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;num &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

} &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでp0もp1もvecも破棄されてp0で確保したオブジェクトがdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
3
3
destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#avoid-usage-shared-ptr&#34; name=&#34;avoid-usage-shared-ptr&#34;&gt;shared_ptrで避けること&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;名前のない一時的な&lt;code&gt;shared_ptr&lt;/code&gt;オブジェクトは使わないほうがよい。次の例を考える。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;);
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;g&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 例外を送出する可能性がある関数&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ok&lt;/span&gt;()
{
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));
    f(p, g());
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;bad&lt;/span&gt;()
{
    f(&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)), g());
}
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;bad()&lt;/code&gt;関数では関数の引数が評価される順序が不定である。&lt;code&gt;new int( 2 )&lt;/code&gt;、&lt;code&gt;g()&lt;/code&gt;の順に評価されたとき、&lt;code&gt;g()&lt;/code&gt;が例外を送出すると&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタが呼ばれなくなり、確保したオブジェクトが解放されなくなってしまう。したがって、&lt;code&gt;ok()&lt;/code&gt;関数のように名前のあるスマートポインタに格納するとよい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#customize-release-behavior-shared-ptr&#34; name=&#34;customize-release-behavior-shared-ptr&#34;&gt;解放の方法を自分で決める&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;、&lt;code&gt;shared_array&lt;/code&gt;は解放の方法を指定することが出来る。これによって&lt;code&gt;delete&lt;/code&gt;以外の解放するための関数の使用やそもそも解放しないことも可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;free_deleter&lt;/span&gt;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;free(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(p));
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;call deleter&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;malloc(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;))), &lt;span style=&#34;color:#ff0000&#34;&gt;free_deleter&lt;/span&gt;());
    &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

} &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでdeleteの代わりにfree_deleterのoperator()が呼び出される&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
call deleter
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#weak-reference&#34; name=&#34;weak-reference&#34;&gt;弱い参照&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;weak_ptr&lt;/code&gt;はs&lt;code&gt;hared_ptr&lt;/code&gt;に対する弱い参照で、&lt;code&gt;shared_ptr&lt;/code&gt;の参照カウントを上げ下げせずにオブジェクトを指すものである。&lt;code&gt;weak_ptr&lt;/code&gt;単独で用いられることはない。オブジェクトへのアクセスは&lt;code&gt;weak_ptr&lt;/code&gt;の&lt;code&gt;lock()&lt;/code&gt;メンバ関数、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタによって対応する&lt;code&gt;shared_ptr&lt;/code&gt;を得ることで可能である。&lt;code&gt;shared_ptr&lt;/code&gt;が破棄されていた場合における動作は、&lt;code&gt;lock()&lt;/code&gt;メンバ関数の場合は空の&lt;code&gt;shared_ptr&lt;/code&gt;を返し、&lt;code&gt;shared_ptr&lt;/code&gt;のコンストラクタの場合は&lt;code&gt;bad_weak_ptr&lt;/code&gt;例外を送出する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/&lt;span style=&#34;color:#ff0000&#34;&gt;weak_ptr&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;( &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; ) );
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;weak_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wp( sp );

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// shared_ptrのオブジェクトがあるかないか&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wp.&lt;span style=&#34;color:#ff0000&#34;&gt;lock&lt;/span&gt;() ) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;deleted&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここで解放する&lt;/span&gt;
    sp.reset();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// shared_ptrのオブジェクトがあるかないか&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;( boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; wp.&lt;span style=&#34;color:#ff0000&#34;&gt;lock&lt;/span&gt;() ) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;deleted&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; 
    }
}
&lt;/pre&gt;&lt;/div&gt;

実験結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/smart_ptr.html#intrusive-smart-pointer&#34; name=&#34;intrusive-smart-pointer&#34;&gt;侵入型参照カウント方式のスマートポインタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;intrusive_ptr&lt;/code&gt;はユーザがオブジェクトの参照カウンタを上げ下げしなければならないようなときに適用できる。オブジェクトに対応する&lt;code&gt;intrusive_ptr_add_ref()&lt;/code&gt;関数、&lt;code&gt;intrusive_ptr_release()&lt;/code&gt;関数を定義することによって、&lt;code&gt;intrusive_ptr&lt;/code&gt;が自動的に参照カウンタの上げ下げを行う。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/intrusive_ptr.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; hoge {

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;object&lt;/span&gt;
    {
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; cnt_;

        object() &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;
            cnt_(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        { }

    &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;object()
        {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;destroy&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }

        &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;exist&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }

        &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; add_ref()
        {
            &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;cnt_;
        }

        &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; release()
        {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;cnt_ &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
            }
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;friend&lt;/span&gt; object &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;create();
    };

    object &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;create&lt;/span&gt;()
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; object;
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intrusive_ptr_add_ref&lt;/span&gt;&lt;/span&gt;(object &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p)
    {
        p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;add_ref();
    }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;intrusive_ptr_release&lt;/span&gt;&lt;/span&gt;(object &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;p)
    {
        p&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;release();
    }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第2引数はコンストラクト時に参照カウントを増加させるかどうか&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;intrusive_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;hoge&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ptr(hoge&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;create(), &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンテナに入れても大丈夫&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;intrusive_ptr&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;hoge&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; vec;
    vec.push_back(ptr);

    ptr&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;print();

} &lt;span style=&#34;color:#ff0000&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここでvecとptrが破棄され、それぞれobjectのreleaseが呼ばれてdeleteされる&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;exist
destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/static_assert.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/static_assert.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンパイル時アサート&lt;/h1&gt;
&lt;p&gt;定数式の条件によるアサートには、&lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt;マクロを使用することができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt;マクロを使用するには、&lt;code&gt;&amp;lt;boost/static_assert.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html#function&#34;&gt;関数にコンパイル時アサートを付ける&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html#class&#34;&gt;クラスにコンパイル時アサートを付ける&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html#function&#34; name=&#34;function&#34;&gt;関数にコンパイル時アサートを付ける&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/type_traits/is_integral.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x)
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 整数型以外が渡されたらエラーにする&lt;/span&gt;
    BOOST_STATIC_ASSERT(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_integral&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
    f(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    f(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    f(&lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー！&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_assert.html#class&#34; name=&#34;class&#34;&gt;クラスにコンパイル時アサートを付ける&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/type_traits/is_integral.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; X {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 整数型以外が指定されたらエラー&lt;/span&gt;
    BOOST_STATIC_ASSERT(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_integral&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value);
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    X&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; a;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    X&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; b;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
    X&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー！&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>静的な正規表現 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/static_regex.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/static_regex.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;静的な正規表現&lt;/h1&gt;
&lt;p&gt;正規表現には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive.html&#34; target=&#34;_blank&#34;&gt;Boost Xpressive Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;p&gt;ここでは、静的な正規表現の使い方を解説していく。&lt;/p&gt;
&lt;p&gt;日本語リファレンス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://alpha.sourceforge.jp/devel/boost.xpressive_ja.pdf&#34; target=&#34;_blank&#34;&gt;http://alpha.sourceforge.jp/devel/boost.xpressive_ja.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#static-regex&#34;&gt;静的な正規表現とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#dynamic-static-table&#34;&gt;動的と静的の正規表現対応表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-match&#34;&gt;文字列全体が正規表現にマッチするか調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-search&#34;&gt;文字列が正規表現にマッチする部分文字列を含むか調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-replace&#34;&gt;正規表現にマッチした部分文字列をすべて置換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#match-action&#34;&gt;マッチ時に任意のアクションを行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#conditional-match&#34;&gt;マッチ条件を指定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#static-regex&#34; name=&#34;static-regex&#34;&gt;静的な正規表現とは&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここで言う「静的な正規表現」とは、コンパイル時に正規表現を組み上げるということである。&lt;/p&gt;
&lt;p&gt;式テンプレートを活用し、正規表現の正当性チェックがコンパイル時に行われる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;静的な正規表現の基本的な使い方を解説する。まず、&lt;code&gt;&#34;Hello World!&#34;&lt;/code&gt;という文字列から&lt;code&gt;&#34;Hello&#34;&lt;/code&gt;と&lt;code&gt;&#34;World&#34;&lt;/code&gt;という単語を抽出するコードは以下のようになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string hello &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello World!&#34;&lt;/span&gt;;

    sregex rex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (s1&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (s2&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;;
    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (regex_match(hello, what, rex)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1 番目の捕捉&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 番目の捕捉&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello World!
Hello
World
&lt;/code&gt;&lt;/pre&gt;
正規表現は以下のように記述している：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(s1&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (s2&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは、動的な正規表現では以下の記述に相当する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)!&#34;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;静的な正規表現は、文字列ではなくC++の式で記述する。この方法をとることによる制限はいくつかある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「後続」を表すために&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;演算子を使用する必要がある&lt;/li&gt;
&lt;li&gt;「1回以上の繰り返し」を意味する&lt;code&gt;+&lt;/code&gt;が前置である必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#dynamic-static-table&#34; name=&#34;dynamic-static-table&#34;&gt;動的と静的の正規表現対応表&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Xpressiveが提供する静的な正規表現と、通常の動的正規表現との対応表を紹介する。ここでは、動的正規表現としてPerl構文を例とする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Perl&lt;/th&gt;
&lt;th&gt;静的Xpressive&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の1文字（Perlの&lt;code&gt;/s&lt;/code&gt;修飾子が使われているとして）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;および&lt;code&gt;b&lt;/code&gt;部分式の結合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a|b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a | b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;および&lt;code&gt;b&lt;/code&gt;部分式の選択&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(s1= a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方参照のグループ化と捕捉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?:a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方参照の捕捉を伴わないグループ化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以前捕捉した後方参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0回以上の貪欲な繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1回以上の貪欲な繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0回か1回の貪欲な繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a{n,m}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;repeat&amp;lt;n,m&amp;gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回以上&lt;code&gt;m&lt;/code&gt;回以下の貪欲な繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a*?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-*a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0回以上の貪欲でない繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a+?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-+a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1回以上の貪欲でない繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a??&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-!a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1回以上の貪欲でない繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a{n,m}?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-repeat&amp;lt;n,m&amp;gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回以上&lt;code&gt;m&lt;/code&gt;回以下の貪欲でない繰り返し&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭を表す表明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;eos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの終端を表す表明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単語境界の表明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単語境界以外の表明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リテラルの改行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リテラルの改行以外の任意の1文字（Perlの&lt;code&gt;/s&lt;/code&gt;修飾子が使われていないとして）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\r?\n|\r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_ln&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理改行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[^\r\n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_ln&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理改行以外の任意の1文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単語構成文字。&lt;code&gt;set[alnum | &#39;_&#39;]&lt;/code&gt;と同じ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単語構成文字以外。&lt;code&gt;~set[alnum |&#39;_&#39;]&lt;/code&gt;と同じ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数字以外&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白類文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~_s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白類文字以外&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:alnum:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alnum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルファベットおよび数値文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:alpha:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルファベット文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:blank:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;水平空白文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:cntrl:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cntrl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;制御文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:digit:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;digit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:graph:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフィカルな文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:lower:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lower&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:print:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;print&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;印字可能な文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:punct:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;punct&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;区切り文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:space:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;space&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白類文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:upper:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[:xdigit:]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;xdigit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;16進数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[0-9]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;range(&#39;0&#39;,&#39;9&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;0&#39;&lt;/code&gt;から&lt;code&gt;&#39;9&#39;&lt;/code&gt;の範囲の文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;as_xpr(&#39;a&#39;) | &#39;b&#39; | &#39;c&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;、&lt;code&gt;&#39;b&#39;&lt;/code&gt;、または&lt;code&gt;&#39;c&#39;&lt;/code&gt;のいずれかの文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(set= &#39;a&#39;,&#39;b&#39;,&#39;c&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[0-9abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;set[ range(&#39;0&#39;,&#39;9&#39;) | &#39;a&#39; | &#39;b&#39; | &#39;c&#39; ]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;、&lt;code&gt;&#39;b&#39;&lt;/code&gt;、または&lt;code&gt;&#39;c&#39;&lt;/code&gt;のいずれか、または&lt;code&gt;&#39;0&#39;&lt;/code&gt;から&lt;code&gt;&#39;9&#39;&lt;/code&gt;の範囲の文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[0-9abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;set[ range(&#39;0&#39;,&#39;9&#39;) | (set= &#39;a&#39;,&#39;b&#39;,&#39;c&#39;) ]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[^abc]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~(set= &#39;a&#39;,&#39;b&#39;,&#39;c&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;、&lt;code&gt;&#39;b&#39;&lt;/code&gt;、または&lt;code&gt;&#39;c&#39;&lt;/code&gt;のいずれでもない文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?i:stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;icase(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;stuff&lt;/code&gt;の大文字小文字を区別しないマッチを行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?&amp;gt;stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;keep(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;独立部分式。&lt;code&gt;stuff&lt;/code&gt;のマッチを行いバックトラックを切る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?=stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;before(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;肯定先読み表明。&lt;code&gt;stuff&lt;/code&gt;の前にマッチするが、&lt;code&gt;stuff&lt;/code&gt;自身はマッチに含まない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?!stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~before(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否定先読み表明。&lt;code&gt;stuff&lt;/code&gt;の前以外にマッチ。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;=stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;after(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;肯定後読み表明。&lt;code&gt;stuff&lt;/code&gt;の後にマッチするが&lt;code&gt;stuff&lt;/code&gt;自身はマッチに含まない（&lt;code&gt;stuff&lt;/code&gt;は固定長でなければならない）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;!stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~after(stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否定後読み表明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mark_tag name(n);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;...&lt;/code&gt;&lt;br /&gt; &lt;code&gt;(name= stuff)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前付きの補足を作成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?P=name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mark_tag name(n);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;...&lt;/code&gt;&lt;br /&gt; &lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作成した名前付き捕捉への後方参照&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-match&#34; name=&#34;regex-match&#34;&gt;文字列全体が正規表現にマッチするか調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列全体が正規表現にマッチするか調べるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_match.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_match()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、マッチに成功したら&lt;code&gt;true&lt;/code&gt;を返し、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。この関数が成功するのは、文字列全体の先頭から終端までが正規表現にマッチする場合である。&lt;/p&gt;
&lt;p&gt;この関数に&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.quick_start.know_your_iterator_type&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::smatch&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照を与えると、見つかったマーク済み部分式が書き込まれる。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;」で示したコードと同じだが、再掲する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string hello &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello World!&#34;&lt;/span&gt;;

    sregex rex &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (s1&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (s2&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;_w) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;!&#39;&lt;/span&gt;;
    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;regex_match&lt;/span&gt;(hello, what, rex)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1 番目の捕捉&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2 番目の捕捉&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hello World!
Hello
World
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-search&#34; name=&#34;regex-search&#34;&gt;文字列が正規表現にマッチする部分文字列を含むか調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列が正規表現にマッチする部分文字列を含むか調べるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_search.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_search()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、マッチする部分文字列が見つかったら&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。対象となる文字列の次の引数として&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.quick_start.know_your_iterator_type&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::smatch&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照を与えると、見つかったマーク済み部分式が書き込まれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// s1、s2、...よりも意味のある名前でカスタムのmark_tagsを定義する&lt;/span&gt;
    mark_tag day(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), month(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), year(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), delim(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この正規表現は日付を検索する&lt;/span&gt;
    sregex date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (year&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt;(_d))          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 先頭に年があり...&lt;/span&gt;
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (delim&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (set&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;-&#39;&lt;/span&gt;))           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// その後ろに区切りがあり ...&lt;/span&gt;
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (month&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; delim &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// さらに後ろに月と、同じ区切りがあり ...&lt;/span&gt;
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (day&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;   repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d));         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最後に日がある。&lt;/span&gt;

    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;regex_search&lt;/span&gt;(str, what, date)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]     &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[year]  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[month] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 月&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[day]   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 日&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[delim] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 区切り&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1973/5/30
1973
5
30
/
&lt;/code&gt;&lt;/pre&gt;
この例では、カスタムの&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/mark_tag.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mark_tag&lt;/code&gt;&lt;/a&gt;を使ってパターンを読みやすくしている。後で&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/mark_tag.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mark_tag&lt;/code&gt;&lt;/a&gt;を&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.quick_start.know_your_iterator_type&#34; target=&#34;_blank&#34;&gt;boost::xpressive::smatch&lt;/a&gt;の添字に使っている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#regex-replace&#34; name=&#34;regex-replace&#34;&gt;正規表現にマッチした部分文字列をすべて置換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;正規表現にマッチした部分文字列をすべて置換するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/xpressive/regex_replace.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::xpressive::regex_replace()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、以下の引数をとる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数 ： 対象文字列&lt;/li&gt;
&lt;li&gt;第2引数 ： 正規表現&lt;/li&gt;
&lt;li&gt;第3引数 ： 置き換え規則&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戻り値として、置き換え後の新たな文字列が返される。&lt;/p&gt;
&lt;p&gt;ここでは、日付にマッチする正規表現を書き、マッチした部分を&lt;code&gt;&amp;lt;date&amp;gt;&lt;/code&gt;タグで囲む、ということをしている。&lt;code&gt;&#34;$&amp;amp;&#34;&lt;/code&gt;はマッチした全体の部分文字列を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    sregex date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt;(_d)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; as_xpr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; as_xpr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string format &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&amp;lt;date&amp;gt;$&amp;amp;&amp;lt;/date&amp;gt;&#34;&lt;/span&gt;;

    str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; regex_replace(str, date, format);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;私は&amp;lt;date&amp;gt;1973/5/30&amp;lt;/date&amp;gt;の午前7時に生まれた。
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#match-action&#34; name=&#34;match-action&#34;&gt;マッチ時に任意のアクションを行う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;マッチ時に任意のアクションを行うには、「&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/xpressive/user_s_guide.html#boost_xpressive.user_s_guide.semantic_actions_and_user_defined_assertions&#34; target=&#34;_blank&#34;&gt;セマンティックアクション&lt;/a&gt;」という機能を使用する。&lt;/p&gt;
&lt;p&gt;セマンティックアクションには、各部分式の後ろに &lt;code&gt;[ ... ]&lt;/code&gt; という形式で記述する。&lt;/p&gt;
&lt;p&gt;以下は、日付が含まれる文章から、年、月、日を抽出し、各要素を変数に代入する処理である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/regex_actions.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; year &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; month &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; day &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この正規表現は日付を検索する&lt;/span&gt;
    sregex date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt;(_d)[ &lt;span style=&#34;color:#ff0000&#34;&gt;ref(year) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_)&lt;/span&gt; ]
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; as_xpr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)[ ref(month) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) ]
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; as_xpr(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;)
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)[ ref(day) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) ];

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;regex_search(str, date)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match failed&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; year &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; month &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; day &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1973
5
30
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;ref()&lt;/code&gt;は、変数を参照するための関数である。&lt;code&gt;ref()&lt;/code&gt;でラップせずに変数を記述すると、正規表現を定義した段階での変数の値が使用されてしまう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;as&amp;lt;T&amp;gt;()&lt;/code&gt;は、マッチした値を任意の型に変換するための関数である。&lt;/p&gt;
&lt;p&gt;その引数として渡している &lt;code&gt;_&lt;/code&gt; は「プレースホルダー」と呼ばれる特殊な値で、マッチした値で置き換えられる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/static_regex.html#conditional-match&#34; name=&#34;conditional-match&#34;&gt;マッチ条件を指定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;整数や文字といったパターンにマッチした後、より詳細な値チェックが通ったらマッチ成功と見なす方法として、セマンティックアクションでの&lt;code&gt;check()&lt;/code&gt;関数が提供されている。&lt;/p&gt;
&lt;p&gt;以下は、日付の値チェックをする例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/xpressive.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/xpressive/regex_actions.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xpressive;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;私は1973/5/30の午前7時に生まれた。&#34;&lt;/span&gt;;

    mark_tag day(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), month(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;), year(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;), delim(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    sregex date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (year&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt;(_d)) [ &lt;span style=&#34;color:#ff0000&#34;&gt;check&lt;/span&gt;(as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1970&lt;/span&gt;) ]
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (delim&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (set&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;/&#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;-&#39;&lt;/span&gt;))
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (month&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)) [ &lt;span style=&#34;color:#ff0000&#34;&gt;check&lt;/span&gt;(as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                                                   as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;) ]
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; delim
               &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (day&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;   repeat&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&amp;gt;&lt;/span&gt;(_d)) [ &lt;span style=&#34;color:#ff0000&#34;&gt;check&lt;/span&gt;(as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                                                   as&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(_) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;31&lt;/span&gt;) ];

    smatch what;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (regex_search(str, what, date)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]     &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチ全体&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[year]  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 年&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[month] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 月&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[day]   &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 日&lt;/span&gt;
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; what[delim] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 区切り&lt;/span&gt;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match failed&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1973/5/30
1973
5
30
/
&lt;/code&gt;&lt;/pre&gt;
この場合、年、月、日が範囲外の値だったらマッチ失敗と見なされる。&lt;/p&gt;
&lt;p&gt;documentation version is 1.52.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>統計処理 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/statistics.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/statistics.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;統計処理&lt;/h1&gt;
&lt;p&gt;統計処理には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/accumulators.html&#34; target=&#34;_blank&#34;&gt;Boost Accumulators Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#container-stats&#34;&gt;既存のコンテナにあるデータから統計をとる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#count&#34;&gt;要素数を求める - &lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#covariance&#34;&gt;共分散を求める - &lt;code&gt;covariance&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#density&#34;&gt;密度を求める - &lt;code&gt;density&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#extended_q_square&#34;&gt;拡張カイ二乗を求める - &lt;code&gt;extended_q_square&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#kurtosis&#34;&gt;尖度を求める - &lt;code&gt;kurtosis&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#min&#34;&gt;最小値を求める - &lt;code&gt;min&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#max&#34;&gt;最大値を求める - &lt;code&gt;max&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#mean&#34;&gt;平均値を求める - &lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#median&#34;&gt;中央値を求める - &lt;code&gt;median&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#pot_quantile&#34;&gt;閾値法 POT:Peak Over Threshold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#skewness&#34;&gt;歪度を求める - &lt;code&gt;skewness&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#sum&#34;&gt;合計値を求める - &lt;code&gt;sum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#weighted-stats&#34;&gt;重み付きサンプルやヒストグラムの統計量を求める - &lt;code&gt;weighted_*&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Accumulatorsを使用した統計処理には、&lt;code&gt;boost::accumulators::accumulator_set&lt;/code&gt;というコンテナを使用し、そのテンプレートパラメータとして、統計したい処理を指定することで、内部でそれらの統計処理の組み合わせを効率よく処理してくれる。&lt;/p&gt;
&lt;p&gt;以下は、最小値(min)、平均値(mean)、合計値(sum)を求める例である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;5.0&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最小値&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均値&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 合計値&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
3
15
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#container-stats&#34; name=&#34;container-stats&#34;&gt;既存のコンテナにあるデータから統計をとる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::vector&lt;/code&gt;や配列のようなコンテナに、統計したいデータが入っていることがある。&lt;/p&gt;
&lt;p&gt;そういったデータをBoost.Accumulatorsで統計をとるには、&lt;code&gt;for_each()&lt;/code&gt;アルゴリズムを使用して&lt;code&gt;accumulator_set&lt;/code&gt;にデータを入れる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/generate.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/ref.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// てきとうなデータを用意&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;load&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;100&amp;gt;&amp;amp;&lt;/span&gt; ar)
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; distribution(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1000&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variate_generator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_int&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; generator(engine, distribution);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate(ar, generator);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;100&amp;gt;&lt;/span&gt; ar;
    load(ar);

    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(ar, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(acc), _1));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最小値&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 中間値&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 合計値&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
544.24
54424
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#count&#34; name=&#34;count&#34;&gt;要素数を求める - count&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要素数を求めるには、&lt;code&gt;count&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;count&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;count(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#covariance&#34; name=&#34;covariance&#34;&gt;共分散を求める - covariance&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;共分散を求めるには、&lt;code&gt;covariance&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;covariance&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;covariate1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, covariate1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, covariate1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, covariate1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;6.0&lt;/span&gt;, covariate1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;covariance(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;-1.75
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#density&#34; name=&#34;density&#34;&gt;密度を求める - density&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;密度を求めるには、&lt;code&gt;density&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;density&lt;/code&gt;は、サンプル分布のヒストグラムを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/bind.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/ref.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; data[&lt;span style=&#34;color: #666666&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,     &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;,    &lt;span style=&#34;color: #666666&#34;&gt;0.65&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0.45&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;,    &lt;span style=&#34;color: #666666&#34;&gt;0.65&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0.45&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0.7&lt;/span&gt;,    &lt;span style=&#34;color: #666666&#34;&gt;0.59&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,     &lt;span style=&#34;color: #666666&#34;&gt;0.05&lt;/span&gt;,   &lt;span style=&#34;color: #666666&#34;&gt;0.60&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0.605&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.405&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0.78&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0.61&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0.605&lt;/span&gt; , &lt;span style=&#34;color: #666666&#34;&gt;0.405&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;0.71&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0.509&lt;/span&gt; , &lt;span style=&#34;color: #666666&#34;&gt;0.52&lt;/span&gt;
    };

    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;density &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        acc(tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;density&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cache_size&lt;span style=&#34;color: #666666&#34;&gt;=10&lt;/span&gt;, tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;density&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_bins&lt;span style=&#34;color: #666666&#34;&gt;=5&lt;/span&gt;);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(data, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bind(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(acc), _1));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator_range&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;iterator
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    histogram_type;

    histogram_type histogram &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; density(acc);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; value_type;
    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, histogram) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;First: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt; Second: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;First: -0.14 Second: 0
First: 0     Second: 0.142857
First: 0.14  Second: 0
First: 0.28  Second: 0.0952381
First: 0.42  Second: 0.238095
First: 0.56  Second: 0.333333
First: 0.7   Second: 0.190476
&lt;/code&gt;&lt;/pre&gt;
ソースの参考元： &lt;a href=&#34;http://www.dreamincode.net/forums/topic/151359-boost-accumulator-help/&#34; target=&#34;_blank&#34;&gt;http://www.dreamincode.net/forums/topic/151359-boost-accumulator-help/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#extended_q_square&#34; name=&#34;extended_q_square&#34;&gt;拡張カイ二乗を求める - extended_q_square&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;拡張カイ二乗を求めるには、&lt;code&gt;extended_q_square&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lagged_fibonacci607 rng;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; probs;
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.001&lt;/span&gt;);
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.01&lt;/span&gt; );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.1&lt;/span&gt;  );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.25&lt;/span&gt; );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;  );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.75&lt;/span&gt; );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.9&lt;/span&gt;  );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.99&lt;/span&gt; );
    probs.push_back(&lt;span style=&#34;color: #666666&#34;&gt;0.999&lt;/span&gt;);

    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;extended_p_square&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        acc(extended_p_square_probabilities &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; probs);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
        acc(rng());

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; probs.size(); &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;extended_p_square(acc)[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0.00120014
0.00940417
0.0965609
0.253513
0.505551
0.750821
0.899161
0.990776
0.999397
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#kurtosis&#34; name=&#34;kurtosis&#34;&gt;尖度を求める - kurtosis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;尖度を求めるには、&lt;code&gt;kurtosis&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;kurtosis &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;moment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;moment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;3&amp;gt;&lt;/span&gt;(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;moment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;4&amp;gt;&lt;/span&gt;(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;kurtosis(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
31.8
234.2
1863
-1.39965
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#min&#34; name=&#34;min&#34;&gt;最小値を求める - min&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最小値を求めるには、&lt;code&gt;min&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;min(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#max&#34; name=&#34;max&#34;&gt;最大値を求める - max&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最大値を求めるには、&lt;code&gt;max&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;max&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;max(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#mean&#34; name=&#34;mean&#34;&gt;平均値を求める - mean&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;平均値を求めるには、&lt;code&gt;mean&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2.5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#median&#34; name=&#34;median&#34;&gt;中央値を求める - median&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;中央値を求めるには、&lt;code&gt;median&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;median&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;median(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;注意：本処理で返される値は推定値であり、厳密な中央値ではない場合がある。参照： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/accumulators/user_s_guide.html#accumulators.user_s_guide.the_statistical_accumulators_library.median&#34; target=&#34;_blank&#34;&gt;median and variants - Boost Accumulators Library Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#pot_quantile&#34; name=&#34;pot_quantile&#34;&gt;閾値法 POT:Peak Over Threshold&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;閾値法を使用するには、&lt;code&gt;pot_quantile&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/random.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2つの擬似乱数生成器を用意&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lagged_fibonacci607 rng;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; mean_sigma(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exponential_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; lambda(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variate_generator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lagged_fibonacci607&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; normal(rng, mean_sigma);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variate_generator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lagged_fibonacci607&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exponential_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; exponential(rng, lambda);

    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;right&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_value)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc1(
        pot_threshold_value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.&lt;/span&gt;
    );
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;right&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_probability)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc2(
        right_tail_cache_size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2000&lt;/span&gt;
      , pot_threshold_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.99&lt;/span&gt;
    );
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;left&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_value)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc3(
        pot_threshold_value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-3.&lt;/span&gt;
    );
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;left&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_probability)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc4(
        left_tail_cache_size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2000&lt;/span&gt;
      , pot_threshold_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.01&lt;/span&gt;
    );

    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;right&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_value)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc5(
        pot_threshold_value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5.&lt;/span&gt;
    );
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pot_quantile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;right&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(with_threshold_probability)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc6(
        right_tail_cache_size &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2000&lt;/span&gt;
      , pot_threshold_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.995&lt;/span&gt;
    );

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    {
        &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; sample &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; normal();
        acc1(sample);
        acc2(sample);
        acc3(sample);
        acc4(sample);
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    {
        &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; sample &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; exponential();
        acc5(sample);
        acc6(sample);
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc1, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.999&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc2, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.999&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc3, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.001&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc4, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.001&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc5, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.999&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;quantile(acc6, quantile_probability &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.999&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.10319
3.09056
-3.09408
-3.08917
6.93361
6.8952
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#skewness&#34; name=&#34;skewness&#34;&gt;歪度を求める - skewness&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;歪度を求めるには、&lt;code&gt;skewness&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;skewness &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;moment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;moment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;3&amp;gt;&lt;/span&gt;(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;skewness(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;5
31.8
234.2
0.40604
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#sum&#34; name=&#34;sum&#34;&gt;合計値を求める - sum&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;合計値を求めるには、&lt;code&gt;sum&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

    acc(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/statistics.html#weighted-stats&#34; name=&#34;weighted-stats&#34;&gt;重み付きサンプルやヒストグラムの統計量を求める - &lt;code&gt;weighted_*&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;重み付きサンプルやヒストグラムの統計量を求めるには、各種&lt;code&gt;weighted_*&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/accumulators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/accumulators/statistics.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;accumulators;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    accumulator_set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;,            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// サンプルの型&lt;/span&gt;
        stats&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weighted_sum,       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重み付き和&lt;/span&gt;
              tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weighted_mean,      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重み付き平均&lt;/span&gt;
              tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weighted_variance,  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重み付き分散&lt;/span&gt;
              tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weighted_skewness,  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重み付き歪度&lt;/span&gt;
              tag&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weighted_kurtosis   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重み付き尖度&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
        &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重みの型&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; acc;

      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重みは weight で指定&lt;/span&gt;
    acc(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, weight &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;, weight &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;);
    acc(&lt;span style=&#34;color: #666666&#34;&gt;3.0&lt;/span&gt;, weight &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum_of_weights(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 重みの総和&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sum(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mean(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variance(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;skewness(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; 
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; extract&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;kurtosis(acc) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
20
2.22222
0.617284
-0.41295
-1.2696
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>文字列操作 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/string_algo.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/string_algo.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;文字列操作&lt;/h1&gt;
&lt;p&gt;標準ライブラリの文字列に対する操作は、不足しているものが多い。たとえば、前後のスペースを削除する&lt;code&gt;trim()&lt;/code&gt;関数や、指定した区切り文字で文字列を分解してくれる&lt;code&gt;split(&lt;/code&gt;)関数などだ。&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/algorithm/string/&#34; target=&#34;_blank&#34;&gt;Boost String Algo Library&lt;/a&gt;は、このような文字列に対するアルゴリズムの関数を提供するライブラリである。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim&#34;&gt;前後のスペースを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim-left&#34;&gt;左のスペースを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim-right&#34;&gt;右のスペースを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#split&#34;&gt;区切り文字で文字列を分割する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#join&#34;&gt;区切り文字を指定して、コンテナを文字列化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#iends-with&#34;&gt;拡張子を判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#replace-all&#34;&gt;全て置き換える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim&#34; name=&#34;trim&#34;&gt;前後のスペースを削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列の前後にあるスペースを削除するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim()&lt;/code&gt;&lt;/a&gt;関数、もしくは&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim_copy.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim_copy()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim()&lt;/code&gt;関数は引数として渡された文字列自身を書き換え、&lt;code&gt;trim_copy()&lt;/code&gt;関数は、前後のスペースを削除した文字列のコピーを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 破壊的な変更を行うバージョン&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーを返すバージョン&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim_copy(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[abc]
[abc]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim-left&#34; name=&#34;trim-left&#34;&gt;左のスペースを削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;左のスペースを削除するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim_left.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim_left()&lt;/code&gt;&lt;/a&gt;関数、もしくは&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim_left_copy.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim_left_copy()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim_left()&lt;/code&gt;関数は、引数として渡された文字列自身を書き換え、&lt;code&gt;trim_left_copy()&lt;/code&gt;関数は、左のスペースを削除した文字列のコピーを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 破壊的な変更を行うバージョン&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim_left(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーを返すバージョン&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim_left_copy(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[abc   ]
[abc   ]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#trim-right&#34; name=&#34;trim-right&#34;&gt;右のスペースを削除する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;左のスペースを削除するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim_right.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim_right()&lt;/code&gt;&lt;/a&gt;関数、もしくは&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/trim_right_copy.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::trim_right_copy()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim_right()&lt;/code&gt;関数は、引数として渡された文字列自身を書き換え、&lt;code&gt;trim_right_copy()&lt;/code&gt;関数は、右のスペースを削除した文字列のコピーを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/trim.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 破壊的な変更を行うバージョン&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim_right(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーを返すバージョン&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;  abc   &#34;&lt;/span&gt;;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;trim_right_copy(s);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;[&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;]&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;[  abc]
[  abc]
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#split&#34; name=&#34;split&#34;&gt;区切り文字で文字列を分割する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;指定した区切り文字で文字列を分割するには、&lt;a href=&#34;http://www.boost.org/doc/libs/1_53_0/doc/html/boost/algorithm/split_idp83847184.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::split()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数には、分割された文字列の結果を受け取るコンテナ、第2引数には対象となる文字列、第3引数には区切り文字かどうかを判定する述語を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/classification.hpp&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// is_any_of&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/split.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;disp&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abc,123,xyz&#34;&lt;/span&gt;;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;split(result, s, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_any_of(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;)); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// カンマで分割&lt;/span&gt;

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(result, disp);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;abc
123
xyz
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#join&#34; name=&#34;join&#34;&gt;区切り文字を指定して、コンテナを文字列化する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;区切り文字を指定してコンテナを文字列化するには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/join.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::join()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;第1引数には文字列のコンテナ、第2引数には、区切り文字列を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/&lt;span style=&#34;color:#ff0000&#34;&gt;join&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c&#34;&lt;/span&gt;};

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// カンマ区切りの文字列にする&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;join&lt;/span&gt;(v, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a,b,c
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#iends-with&#34; name=&#34;iends-with&#34;&gt;拡張子を判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;拡張子の判定には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/iends_with.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::iends_with()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は、第1引数の対象文字列が、第2引数の文字列で終了するかどうかを判定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/predicate.hpp&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// iends_with&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_cpp_file&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; filename)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iends_with(filename, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;.cpp&#34;&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string filename &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;example.cpp&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; is_cpp_file(filename);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/string_algo.html#replace-all&#34; name=&#34;replace-all&#34;&gt;全て置き換える&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;標準ライブラリの&lt;code&gt;replace()&lt;/code&gt;関数は、最初に見つけた要素しか置き換えない。
&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/replace_all.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::replace_all()&lt;/code&gt;&lt;/a&gt;関数、もしくは&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/algorithm/replace_all_copy.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::algorithm::replace_all_copy()&lt;/code&gt;&lt;/a&gt;関数を使用すれば、該当する要素全てを置き換えることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/algorithm/string/replace.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 破壊的な変更を行うバージョン&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello Jane, Hello World!&#34;&lt;/span&gt;;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全ての&#34;Hello&#34;を&#34;Goodbye&#34;に置き換える&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;replace_all(s, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Goodbye&#34;&lt;/span&gt;);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーを返すバージョン&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello Jane, Hello World!&#34;&lt;/span&gt;;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;algorithm&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;replace_all_copy(s, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Goodbye&#34;&lt;/span&gt;);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Goodbye Jane, Goodbye World!
Goodbye Jane, Goodbye World!
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スレッド -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/thread.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/thread.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;スレッド&lt;/h1&gt;
&lt;p&gt;スレッドを扱うには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/thread.html&#34; target=&#34;_blank&#34;&gt;Boost Thread Library&lt;/a&gt;を使用する。このライブラリは、複数の実行スレッドとそれに伴う共有データを、C++のポータブルなコードで扱えるようにするライブラリである。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread&#34;&gt;スレッドを生成(開始)する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread-with-argument&#34;&gt;引数付きでスレッドを生成(開始)する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread-member-function&#34;&gt;[応用]オブジェクトのメンバ関数でスレッドを生成(開始)する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#move-ownership&#34;&gt;スレッドの所有権を移動する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#terminate&#34;&gt;スレッドを破棄(終了)する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#detach&#34;&gt;スレッドを手放す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#join&#34;&gt;他スレッドの終了を待機する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#interrupt&#34;&gt;スレッドを中断する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#sleep&#34;&gt;自スレッドを一時停止(休眠)する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#yield&#34;&gt;自スレッドの実行を他スレッドに譲る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#thread-handle&#34;&gt;スレッドのハンドルを取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#hardware-concurrency&#34;&gt;ハードウェアの並列度を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread&#34; name=&#34;create-thread&#34;&gt;スレッドを生成(開始)する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Threadを用いて新しいスレッドを作成するには、&lt;code&gt;thread&lt;/code&gt;クラスに関数や関数オブジェクトを渡して&lt;code&gt;thread&lt;/code&gt;オブジェクトを構築する。新しいスレッド上では、コンストラクタに指定した関数(または関数オブジェクト)が呼び出される。&lt;/p&gt;
&lt;p&gt;(何も渡さずに構築すると、どのスレッドでもない状態(Not-A-Thread)を表す&lt;code&gt;thread&lt;/code&gt;オブジェクトになる。)&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Callable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(Callable func);
&lt;/pre&gt;&lt;/div&gt;

コンストラクタに渡された実引数は、&lt;code&gt;thread&lt;/code&gt;オブジェクト内部にコピーされて保持される。このコピーを避ける場合は&lt;code&gt;boost::ref()&lt;/code&gt;関数を利用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;callable x;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f1&lt;/span&gt;() {
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(x));
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread-with-argument&#34; name=&#34;create-thread-with-argument&#34;&gt;引数付きでスレッドを生成(開始)する&lt;/a&gt;
新しいスレッド上で引数をとる関数や関数オブジェクトを呼び出す場合は、コンストラクタにスレッドで呼び出す関数に続いて実引数を渡すことで、引数付きの新しいスレッドを作成することが出来る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A2&lt;/span&gt;,...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(F f, A1 a1, A2 a2,...);
&lt;/pre&gt;&lt;/div&gt;

(これは&lt;code&gt;thread(boost::bind(f, a1, s2...))&lt;/code&gt;のように動作する。引数無しスレッド作成の時と同じように、実引数のコピーを避けたい場合は&lt;code&gt;boost::ref()&lt;/code&gt;関数を利用する。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#create-thread-member-function&#34; name=&#34;create-thread-member-function&#34;&gt;[応用]オブジェクトのメンバ関数でスレッドを生成(開始)する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;新しいスレッド上でクラスオブジェクトのメンバ関数を呼び出す場合、コンストラクタの第1引数にメンバ関数ポインタを、第2引数にクラスオブジェクトのポインタを指定する。(引数付きスレッドの応用例となっている。)&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; func();
};

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;()
{
    X obj;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;X&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;func, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;obj);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// objのX::funcメンバ関数を呼び出す&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

作成されたスレッドでの処理期間と、スレッドに渡したオブジェクトの生存期間に注意すること。別スレッド処理中にオブジェクト生存期間が終了してデストラクトされた場合、未定義の動作を引き起こしてしまう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#move-ownership&#34; name=&#34;move-ownership&#34;&gt;スレッドの所有権を移動する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Thradでは、1つの&lt;code&gt;thread&lt;/code&gt;オブジェクトが1つのスレッドあるいはNot-A-Threadを表しているので&lt;code&gt;thread&lt;/code&gt;オブジェクトのコピーはできないが、ムーブは可能である。&lt;/p&gt;
&lt;p&gt;(コンパイラが右辺値参照をサポートしていればC++11のムーブを、そうでなければエミュレーションによってムーブの機能を提供する。)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thread&lt;/code&gt;クラスはムーブコンストラクタとムーブ代入演算子をサポートしているので、ムーブによってスレッドの所有権を移動できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f2&lt;/span&gt;() {
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th1(some_func_addr);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th2;

    th2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(th1);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// th1のスレッドをth2にムーブ&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th3(move(th2));    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// th2のスレッドをth3にムーブ&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

あるいは&lt;code&gt;boost::thread::swap()&lt;/code&gt;関数によって2つの&lt;code&gt;thread&lt;/code&gt;オブジェクトを交換することも出来る。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#terminate&#34; name=&#34;terminate&#34;&gt;スレッドを破棄(終了)する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作成されたスレッドは、通常その関数や関数オブジェクトの呼び出しが完了するか、プログラムが終了するまで実行を継続する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thread&lt;/code&gt;オブジェクトが破棄(デストラクト)されるときには、単にそれが表すスレッドを&lt;code&gt;detach()&lt;/code&gt;するだけであり、&lt;code&gt;detach()&lt;/code&gt;されたスレッドが、&lt;code&gt;thread&lt;/code&gt;オブジェクトの破棄に伴って即座に破棄されるわけではない。&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;boost::thread::join()&lt;/code&gt;メンバ関数を使用することで、スレッドの終了を待機することが出来る。)
(&lt;code&gt;boost::thread::interrupt()&lt;/code&gt;メンバ関数を使用することで、スレッドを中断することが出来る。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#detach&#34; name=&#34;detach&#34;&gt;スレッドを手放す&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::detach()&lt;/code&gt;メンバ関数を使用することで、&lt;code&gt;thread&lt;/code&gt;オブジェクトが表しているスレッドを&lt;code&gt;thread&lt;/code&gt;オブジェクトから手放すことが出来る。(&lt;code&gt;boost::thread::detach&lt;/code&gt;メンバ関数呼び出しは&lt;code&gt;thread&lt;/code&gt;オブジェクトとスレッドの対応付けを解除するだけであり、この操作によって実行中のスレッド処理が中断することはない。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#join&#34; name=&#34;join&#34;&gt;他スレッドの終了を待機する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::join()&lt;/code&gt;メンバ関数を使用することで、その&lt;code&gt;thread&lt;/code&gt;オブジェクトが表しているスレッドの終了を待機することが出来る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::thread::timed_join()&lt;/code&gt;メンバ関数を使用することで、指定した時間(あるいは時刻まで)スレッドの終了を待機することが出来る。&lt;/p&gt;
&lt;p&gt;これらの関数の戻り値は、指定した時間(あるいは時刻)がタイムアウトするまでにスレッドの実行が完了したかどうかを&lt;code&gt;bool&lt;/code&gt;値で返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f3&lt;/span&gt;() {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;posix_time;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(func);
    time_duration &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; td &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; seconds(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; has_completed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; th.timed_join(td);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#interrupt&#34; name=&#34;interrupt&#34;&gt;スレッドを中断する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;実行中のスレッドに対して他スレッドから処理中断させる場合、下記2通りの実装方法が考えられる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boost.Threadが提供している中断機構を利用する。&lt;/li&gt;
&lt;li&gt;スレッド上の処理コードに中断機構を組み込む。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般的に任意タイミングで対象スレッドの処理を中断することはできない。他スレッドから中断要求があった場合はそれを記録しておき、対象スレッドでの実行が中断ポイント可能ポイントに到達したとき、スレッド自身が中断要求を検知して後続処理フローを変更することで達成される。&lt;/p&gt;
&lt;p&gt;以下では、方式1について説明する。Boost.Threadが提供するスレッド中断機構では、interruptにより中断通知を受けたスレッドが待機処理または明示的チェックを行うとき、初めて中断通知を受け取る(thread_interrupted例外送出)という方式で実現される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::thread::interrupt()&lt;/code&gt;メンバ関数を使用することで、対象スレッドの実行が次回の&lt;code&gt;interruption_point&lt;/code&gt;に達したときに&lt;code&gt;boost::thread_interrupted&lt;/code&gt;例外が投げられ、これをうけてスレッド処理を中断することが出来る。あらかじめ定義されている&lt;code&gt;intrruption_point&lt;/code&gt;は次のとおり：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::thread::join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::thread::timed_join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable::wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable_any::wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable_any::timed_wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::thread::sleep()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::this_thread::sleep()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::this_thread::interruption_point()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお&lt;code&gt;boost::thread::disable_interruption&lt;/code&gt;クラスによって、上記操作での&lt;code&gt;interruption&lt;/code&gt;を一時的に無効化することが出来る。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#sleep&#34; name=&#34;sleep&#34;&gt;自スレッドを一時停止(休眠)する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::sleep()&lt;/code&gt;静的メンバ関数を使用することで、この関数を呼び出した現在のスレッドを指定時刻まで、あるいは指定時間だけ一時停止(休眠)することが出来る。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::this_thread&lt;/code&gt;名前空間にある同名の非メンバ関数を使用して、同様に指定時刻まで、あるいは指定時間だけスレッドを一時停止(休眠)することも出来る。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#yield&#34; name=&#34;yield&#34;&gt;自スレッドの実行を他スレッドに譲る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::yield()&lt;/code&gt;静的メンバ関数を使用することで、OSスケジューラから自スレッドに割り当てられたタイムスライスの残りを手放して、他の実行スレッドに処理を譲ることができる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::this_thread&lt;/code&gt;名前空間にある同名の非メンバ関数も同様である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#thread-handle&#34; name=&#34;thread-handle&#34;&gt;スレッドのハンドルを取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::native_handle&lt;/code&gt;メンバ関数を使用することで、スレッドからそのプラットフォーム固有のhandleを取得することが出来る。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f4&lt;/span&gt;() {
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(some_func_addr);
    HANDLE hThread &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; th.native_handle();
    &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;SetThreadPriority(hThread, THREAD_PRIORITY_HIGHEST);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/thread.html#hardware-concurrency&#34; name=&#34;hardware-concurrency&#34;&gt;ハードウェアの並列度を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::thread::hardware_concurrency()&lt;/code&gt;静的メンバ関数を使用することで、(たとえばCPUの数やコアの数やhyperthreading unitの数などから)現在のシステムで利用可能なhardware threadの数を取得することが出来る。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>処理時間の計測 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/timer.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/timer.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;処理時間の計測&lt;/h1&gt;
&lt;p&gt;処理時間の計測には、 &lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/timer/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Timer Library&lt;/a&gt; の&lt;code&gt;boost::timer::cpu_timer&lt;/code&gt;クラスを使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#start-stop-resume&#34;&gt;開始、停止、再開を制御する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#elapsed-values&#34;&gt;処理時間の値を個別に取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[出力結果のフォーマットをカスタマイズする]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cpu_timer&lt;/code&gt;クラスでは、コンストラクタで時間計測が開始され、&lt;code&gt;format()&lt;/code&gt;メンバ関数で計測結果の&lt;code&gt;std::string&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/timer/timer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timer&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpu_timer&lt;/span&gt; timer; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間計測を開始&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(&lt;span style=&#34;color: #666666&#34;&gt;123.456&lt;/span&gt;L); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間のかかる処理&lt;/span&gt;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timer.format(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 結果文字列を取得する&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt; 5.636670s wall, 5.600436s user + 0.000000s system = 5.600436s CPU (99.4%)
&lt;/code&gt;&lt;/pre&gt;
実行結果文字列には、以下の値が印字される：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フォーマット&lt;/th&gt;
&lt;th&gt;分解能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wall&lt;/td&gt;
&lt;td&gt;ナノ秒&lt;/td&gt;
&lt;td&gt;実際の経過時間(wall clock time)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;ナノ秒&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system&lt;/td&gt;
&lt;td&gt;ナノ秒&lt;/td&gt;
&lt;td&gt;システムCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=後&lt;/td&gt;
&lt;td&gt;ナノ秒&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間とシステムCPU処理時間の合計時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%表記&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間 + システムCPU処理時間の合計時間による、実際の経過時間の%表現&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#start-stop-resume&#34; name=&#34;start-stop-resume&#34;&gt;開始、停止、再開を制御する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cpu_timer&lt;/code&gt;の開始、停止、再開を制御するには、それぞれ&lt;code&gt;start()&lt;/code&gt;、&lt;code&gt;stop()&lt;/code&gt;、&lt;code&gt;resume()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/timer/timer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timer&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpu_timer timer;

    timer.&lt;span style=&#34;color:#ff0000&#34;&gt;start&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(&lt;span style=&#34;color: #666666&#34;&gt;123.456&lt;/span&gt;L); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間のかかる処理&lt;/span&gt;
    }

    timer.&lt;span style=&#34;color:#ff0000&#34;&gt;stop&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 停止&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 中間結果を出力&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timer.format();
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    timer.&lt;span style=&#34;color:#ff0000&#34;&gt;resume&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 再開&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(&lt;span style=&#34;color: #666666&#34;&gt;123.456&lt;/span&gt;L); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間のかかる処理&lt;/span&gt;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最終結果を出力&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timer.format();
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行例&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #666666&#34;&gt;5.942355&lt;/span&gt;s wall, &lt;span style=&#34;color: #666666&#34;&gt;5.569236&lt;/span&gt;s user &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.000000&lt;/span&gt;s system &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5.569236&lt;/span&gt;s CPU (&lt;span style=&#34;color: #666666&#34;&gt;93.7%&lt;/span&gt;)

 &lt;span style=&#34;color: #666666&#34;&gt;11.981387&lt;/span&gt;s wall, &lt;span style=&#34;color: #666666&#34;&gt;11.247672&lt;/span&gt;s user &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.000000&lt;/span&gt;s system &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;11.247672&lt;/span&gt;s CPU (&lt;span style=&#34;color: #666666&#34;&gt;93.9%&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#elapsed-values&#34; name=&#34;elapsed-values&#34;&gt;処理時間の値を個別に取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;処理時間の値を個別に取得するには、&lt;code&gt;elapsed()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/timer/timer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timer&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpu_timer timer;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(&lt;span style=&#34;color: #666666&#34;&gt;123.456&lt;/span&gt;L); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間のかかる処理&lt;/span&gt;
    }

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timer&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpu_times &lt;span style=&#34;color:#ff0000&#34;&gt;elapsed&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timer.&lt;span style=&#34;color:#ff0000&#34;&gt;elapsed&lt;/span&gt;();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;wall : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;elapsed&lt;/span&gt;.wall &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;user : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;elapsed&lt;/span&gt;.user &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;system : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;elapsed&lt;/span&gt;.system &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;wall : 5622194896
user : 5553635600
system : 0
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;elapsed()&lt;/code&gt;メンバ関数は、&lt;code&gt;boost::timer::cpu_times&lt;/code&gt;クラスのオブジェクトを返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::timer::cpu_times&lt;/code&gt;クラスは以下の&lt;code&gt;public&lt;/code&gt;メンバ変数を持つ：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変数名&lt;/th&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wall&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::timer::nanosecond_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実際の経過時間(wall clock time)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::timer::nanosecond_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::timer::nanosecond_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらのメンバ変数は、ナノ秒分解能を表現する整数型である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/timer.html#customize-format&#34; name=&#34;customize-format&#34;&gt;出力結果のフォーマットをカスタマイズする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cpu_timer::format()&lt;/code&gt;メンバ関数は、デフォルトでは以下のようなフォーマットで印字される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #666666&#34;&gt;5.636670&lt;/span&gt;s wall, &lt;span style=&#34;color: #666666&#34;&gt;5.600436&lt;/span&gt;s user &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0.000000&lt;/span&gt;s system &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5.600436&lt;/span&gt;s CPU (&lt;span style=&#34;color: #666666&#34;&gt;99.4%&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;format()&lt;/code&gt;メンバ関数に以下のように指定することでフォーマットをカスタマイズできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/timer/timer.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timer&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cpu_timer timer;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100000000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sqrt(&lt;span style=&#34;color: #666666&#34;&gt;123.456&lt;/span&gt;L); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 時間のかかる処理&lt;/span&gt;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timer.format(&lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;経過時間：%w秒&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;
                                         &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ユーザーCPU処理時間：%u秒&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;
                                         &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;プロセスCPU処理時間：%s秒&#34;&lt;/span&gt;);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行例&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;経過時間：5.985288294秒
ユーザーCPU処理時間：5.647236200秒
プロセスCPU処理時間：0.000000000秒
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;format()&lt;/code&gt;メンバ関数の第1引数には、出力される浮動小数点数値の精度を指定する。&lt;/p&gt;
&lt;p&gt;デフォルトでは6であり、1～9の範囲で指定することができる(範囲外の場合は丸められる)。&lt;/p&gt;
&lt;p&gt;第2引数の文字列フォーマットには、以下の置換シーケンスを指定することができる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;シーケンス&lt;/th&gt;
&lt;th&gt;置き換えられる値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実際の経過時間(wall clock time)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間 + システムCPU処理時間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーザーCPU処理時間 + システムCPU処理時間の合計時間による、実際の経過時間の%表現&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>タプル -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/tuple.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/tuple.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;タプル&lt;/h1&gt;
&lt;p&gt;タプルの操作には、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/fusion/doc/html/&#34; target=&#34;_blank&#34;&gt;Boost Fusion Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#helper-function&#34;&gt;タプルを作成するヘルパ関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#nth-element&#34;&gt;N番目の要素を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#for-each&#34;&gt;全ての要素に関数を適用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#user-defined-type-as-tuple&#34;&gt;ユーザー定義型をタプルとして扱う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#tie&#34;&gt;要素をまとめて取り出す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Fusionにおけるタプル型には、&lt;code&gt;boost::fusion::vector&amp;lt;T...&amp;gt;&lt;/code&gt;を使用する。&lt;/p&gt;
&lt;p&gt;各要素を取り出すには、&lt;code&gt;boost::fusion::at_c&amp;lt;N&amp;gt;()&lt;/code&gt;非メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/at_c.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#helper-function&#34; name=&#34;helper-function&#34;&gt;タプルを作成するヘルパ関数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::fusion::vector&lt;/code&gt;型を作成するヘルパ関数として、&lt;code&gt;boost::fusion::make_vector()&lt;/code&gt;関数が定義されている。&lt;/p&gt;
&lt;p&gt;この関数を使用するには、&lt;code&gt;&amp;lt;boost/fusion/include/make_vector.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/make_vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/at_c.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_vector(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(v) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#nth-element&#34; name=&#34;nth-element&#34;&gt;N番目の要素を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;N番目の要素を取得するには、&lt;code&gt;boost::fusion::at_c&amp;lt;N&amp;gt;()&lt;/code&gt;非メンバ関数を使用する。&lt;code&gt;N&lt;/code&gt;はコンパイル時に決定する定数である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/at_c.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n         &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;0&amp;gt;&lt;/span&gt;(v);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c        &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;(v);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;at_c&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;(v);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#for-each&#34; name=&#34;for-each&#34;&gt;全ての要素に関数を適用する&lt;/a&gt;
タプルの要素全てに関数を適用するには、&lt;code&gt;boost::fusion::for_each()&lt;/code&gt;アルゴリズムを使用する。&lt;/p&gt;
&lt;p&gt;要素に適用する関数には、毎回異なる型が渡されるため、多相的である必要がある(テンプレート、もしくはタプルに含まれる全ての型に対するオーバーロード)。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; disper {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v, disper());
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
Hello
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;fusion::for_each()&lt;/code&gt;には、Boost.Lambdaを使用することもできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lambda/lambda.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lambda&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;_1;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\n&#39;&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
a
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#user-defined-type-as-tuple&#34; name=&#34;user-defined-type-as-tuple&#34;&gt;ユーザー定義型をタプルとして扱う&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ユーザー定義型は、&lt;code&gt;BOOST_FUSION_ADAPT_STRUCT&lt;/code&gt;マクロを適用することで、Boost.Fusionのシーケンスとして登録することができ、その後、そのユーザー定義型はBoost.Fusionで扱えるタプルとして見なされるようになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/adapt_struct.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/for_each.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Person {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; age;

    Person(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; age)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; id(id), name(name), age(age) {}
};

BOOST_FUSION_ADAPT_STRUCT(
    Person,
    (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, id)
    (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, name)
    (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, age)
)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; disper {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
    {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Person person(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Alice&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;18&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数を列挙する&lt;/span&gt;
    fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(person, disper());
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
Alice
18
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/tuple.html#tie&#34; name=&#34;tie&#34;&gt;要素をまとめて取り出す&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;タプルの要素をまとめて取り出すには、&lt;code&gt;boost::fusion::vector_tie()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;不要な要素には、&lt;code&gt;boost::fusion::ignore&lt;/code&gt;変数を指定する。&lt;/p&gt;
&lt;p&gt;以下の例では、タプルvの第1要素と第3要素を取り出し、第2要素を無視している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/vector_tie.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/fusion/include/ignore.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; fusion &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;fusion;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hello&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 0番目と2番目の要素のみ取り出す&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s;
    fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector_tie(n, fusion&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ignore, s) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; v;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
Hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型特性 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/type_traits.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/type_traits.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;型特性&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/type_traits/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Type Traits Library&lt;/a&gt;では、型がどういった特徴を持っているかを判定するメタ関数が多く提供されている。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#type-category&#34;&gt;型の分類&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-array&#34;&gt;配列型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-class&#34;&gt;クラスかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-complex&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-floating-point&#34;&gt;浮動小数点数型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-function&#34;&gt;関数型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-integral&#34;&gt;整数型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-function&#34;&gt;メンバ関数ポインタかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-object&#34;&gt;メンバ変数ポインタかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-pointer&#34;&gt;ポインタかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-lvalue-reference&#34;&gt;左辺値参照かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-rvalue-reference&#34;&gt;右辺値参照かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-union&#34;&gt;共用体かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-void&#34;&gt;&lt;code&gt;void&lt;/code&gt;かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-arithmetic&#34;&gt;算術型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-compound&#34;&gt;複合型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-fundamental&#34;&gt;基本型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-pointer&#34;&gt;メンバポインタかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-object&#34;&gt;オブジェクト型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-reference&#34;&gt;参照型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-scalar&#34;&gt;スカラ型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#general-type-properties&#34;&gt;型の性質&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#alignment-of&#34;&gt;アライメントを取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-new-operator&#34;&gt;&lt;code&gt;new&lt;/code&gt;演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-assign&#34;&gt;例外を投げない代入演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-constructor&#34;&gt;例外を投げないコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-copy-constructor&#34;&gt;例外を投げないコピーコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-assign&#34;&gt;自明な代入演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-constructor&#34;&gt;自明なコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-copy-constructor&#34;&gt;自明なコピーコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-destructor&#34;&gt;自明なデストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-virtual-destructor&#34;&gt;仮想デストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-abstract&#34;&gt;抽象型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-const&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾された型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-empty&#34;&gt;空クラスかどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-stateless&#34;&gt;&lt;code&gt;stateless&lt;/code&gt;型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-pod&#34;&gt;POD型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-polymorphic&#34;&gt;多相的に振る舞う型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-signed&#34;&gt;符号付き整数型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-unsigned&#34;&gt;符号なし整数型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-volatile&#34;&gt;&lt;code&gt;volatile&lt;/code&gt;修飾された型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#extent&#34;&gt;配列のN次元目の要素数を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#rank&#34;&gt;配列の次元数を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#relationships-between-two-types&#34;&gt;2つの型の関係性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-base-of&#34;&gt;継承関係にある型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-virtual-base-of&#34;&gt;仮想継承の関係にある型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-convertible&#34;&gt;変換可能な型かどうかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-same&#34;&gt;2つの型が同じかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#transform-type-to-another&#34;&gt;型の変換する&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-const&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-volatile&#34;&gt;&lt;code&gt;volatile&lt;/code&gt;修飾を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-cv&#34;&gt;&lt;code&gt;const volatile&lt;/code&gt;修飾を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-lvalue-reference&#34;&gt;左辺値参照を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-rvalue-reference&#34;&gt;右辺値参照を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-reference&#34;&gt;参照を付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-pointer&#34;&gt;ポインタを付加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#conditional&#34;&gt;条件によって型を選択する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#common-type&#34;&gt;共通の型を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#decay&#34;&gt;推論される型の取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#floating-point-promotion&#34;&gt;浮動小数点数型を昇格する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#integral-promotion&#34;&gt;整数型を昇格する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#promote&#34;&gt;型を昇格する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#make-signed&#34;&gt;符号なし型から符号あり型に変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#make-unsigned&#34;&gt;符号あり型から符号なし型に変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-extent&#34;&gt;配列の次元を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-all-extents&#34;&gt;配列の次元を全て削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-const&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-volatile&#34;&gt;&lt;code&gt;volatile&lt;/code&gt;修飾を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-cv&#34;&gt;&lt;code&gt;const volatile&lt;/code&gt;修飾を削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-pointer&#34;&gt;ポインタを削除する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-reference&#34;&gt;参照を削除する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#synthesizing-types-with-specific-alignments&#34;&gt;特定アライメントを持った型の合成&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#type-with-alignment&#34;&gt;特定のアライメントを持つ型の取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#aligned-storage&#34;&gt;適切にアライメントされた型を作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#type-category&#34; name=&#34;type-category&#34;&gt;型の分類を判定する&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-array&#34; name=&#34;is-array&#34;&gt;配列型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_array&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_array.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;[]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-class&#34; name=&#34;is-class&#34;&gt;クラスかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_class&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_class.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MyClass&lt;/span&gt;;

is_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-complex&#34; name=&#34;is-complex&#34;&gt;std::complex型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_complex&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：
- &lt;code&gt;&amp;lt;boost/type_traits/is_complex.hpp&amp;gt;&lt;/code&gt;
- &lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-enum&#34; name=&#34;is-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_enum&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_enum.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; my_enum { one, two };

is_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-floating-point&#34; name=&#34;is-floating-point&#34;&gt;浮動小数点数型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_floating_point&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_floating_point.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_floating_point&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_floating_point&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_floating_point&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-function&#34; name=&#34;is-function&#34;&gt;関数型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_function&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_function.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;

is_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型ではなく関数へのポインタ&lt;/span&gt;
is_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数型ではなく関数への参照&lt;/span&gt;

is_function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数へのポインタ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-integral&#34; name=&#34;is-integral&#34;&gt;整数型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_integral&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_integral.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_integral&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_integral&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_integral&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-function&#34; name=&#34;is-member-function&#34;&gt;メンバ関数ポインタかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_member_function&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_member_function.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_member_function_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_function_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_function_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_function_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// データメンバへのポインタ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-object&#34; name=&#34;is-member-object&#34;&gt;メンバ変数ポインタかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_member_object&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_member_object.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_member_object_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_object_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_object_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_object_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ関数ポインタ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-pointer&#34; name=&#34;is-pointer&#34;&gt;ポインタかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_pointer&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_pointer.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-lvalue-reference&#34; name=&#34;is-lvalue-reference&#34;&gt;左辺値参照かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_lvalue_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_lvalue_reference.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-rvalue-reference&#34; name=&#34;is-rvalue-reference&#34;&gt;右辺値参照かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_rvalue_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：
- &lt;code&gt;&amp;lt;boost/type_traits/is_rvalue_reference.hpp&amp;gt;&lt;/code&gt;
- &lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-union&#34; name=&#34;is-union&#34;&gt;共用体かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_union&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_union.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_union&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_union&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_union&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-void&#34; name=&#34;is-void&#34;&gt;voidかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_void&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_void.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_void&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_void&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_void&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-arithmetic&#34; name=&#34;is-arithmetic&#34;&gt;算術型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_arithmetic&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_arithmetic.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算術型は以下を含む：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-integral&#34;&gt;整数型(&lt;code&gt;is_integral&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-floating-point&#34;&gt;浮動小数点数型(&lt;code&gt;is_floating_point&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_arithmetic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_arithmetic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_arithmetic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-compound&#34; name=&#34;is-compound&#34;&gt;複合型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_compound&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_compound.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複合型は、&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-fundamental&#34;&gt;基本型(&lt;code&gt;is_fundamental&lt;/code&gt;)&lt;/a&gt;以外の型である。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_compound&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_compound&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyEnum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_compound&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_compound&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_compound&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-fundamental&#34; name=&#34;is-fundamental&#34;&gt;基本型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_fundamental&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_fundamental.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本型は以下を含む：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-integral&#34;&gt;整数型(&lt;code&gt;is_integral&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-floating-point&#34;&gt;浮動小数点数型(&lt;code&gt;is_floating_point&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-void&#34;&gt;&lt;code&gt;void&lt;/code&gt;型(&lt;code&gt;is_void&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_fundamental&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_fundamental&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_fundamental&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-pointer&#34; name=&#34;is-member-pointer&#34;&gt;メンバポインタかどうかの判定&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_member_pointer&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_member_pointer.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メンバポインタは以下を含む：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-function&#34;&gt;メンバ関数ポインタ(&lt;code&gt;is_member_function&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-object&#34;&gt;メンバ変数ポインタ(&lt;code&gt;is_member_object&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_member_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_member_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-object&#34; name=&#34;is-object&#34;&gt;オブジェクト型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_object&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：
- &lt;code&gt;&amp;lt;boost/type_traits/is_object.hpp&amp;gt;&lt;/code&gt;
- &lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;オブジェクト型は、参照、&lt;code&gt;void&lt;/code&gt;、関数型以外の型である。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照型はオブジェクトではない&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照型はオブジェクトではない&lt;/span&gt;
is_object&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// void型はオブジェクトではない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-reference&#34; name=&#34;is-reference&#34;&gt;参照型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_referece&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_reference.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参照型は、左辺値参照と右辺値参照を含む型である。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数への参照&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-scalar&#34; name=&#34;is-scalar&#34;&gt;スカラ型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_scalar&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_scalar.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スカラ型は以下を含む：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-integral&#34;&gt;整数型(&lt;code&gt;is_integral&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-floating-point&#34;&gt;浮動小数点数型(&lt;code&gt;is_floating_point&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-enum&#34;&gt;列挙型(&lt;code&gt;is_enum&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-pointer&#34;&gt;ポインタ型(&lt;code&gt;is_pointer&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-member-pointer&#34;&gt;メンバポインタ型(&lt;code&gt;is_member_pointer&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_scalar&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (MyClass&lt;span style=&#34;color: #666666&#34;&gt;::*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#general-type-properties&#34; name=&#34;general-type-properties&#34;&gt;型の性質&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#alignment-of&#34; name=&#34;alignment-of&#34;&gt;アライメントを取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::alignment_of&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/alignment_of.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; alignment_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-new-operator&#34; name=&#34;has-new-operator&#34;&gt;new演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_new_operator&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_new_operator.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;A&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;); };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;B&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nothrow&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;C&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;); };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;D&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;); };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;E&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nothrow&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;); };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt; { &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;); };

has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;A&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;B&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;C&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;D&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_new_operator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-assign&#34; name=&#34;has-nothrow-assign&#34;&gt;例外を投げない代入演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_nothrow_assign&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_nothrow_assign.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-constructor&#34; name=&#34;has-nothrow-constructor&#34;&gt;例外を投げないコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_nothrow_constructor&amp;lt;T&amp;gt;&lt;/code&gt;もしくは&lt;code&gt;boost::has_nothrow_default_constructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_nothrow_constructor.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-nothrow-copy-constructor&#34; name=&#34;has-nothrow-copy-constructor&#34;&gt;例外を投げないコピーコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_nothrow_copy&amp;lt;T&amp;gt;&lt;/code&gt;もしくは&lt;code&gt;boost::has_nothrow_copy_constructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_nothrow_copy.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_nothrow_copy_constructor.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-assign&#34; name=&#34;has-trivial-assign&#34;&gt;自明な代入演算子を持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_trivial_assign&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_trivial_assign.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;has_trivial_assign&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_assign&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_assign&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_assign&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-constructor&#34; name=&#34;has-trivial-constructor&#34;&gt;自明なコンストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_trivial_constructor&amp;lt;T&amp;gt;&lt;/code&gt;もしくは&lt;code&gt;boost::has_trivial_default_constructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_trivial_constructor.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;has_trivial_constructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_constructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_constructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_constructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-copy-constructor&#34; name=&#34;has-trivial-copy-constructor&#34;&gt;自明なコピーコンストラクタを持っている型か判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_trivial_copy&amp;lt;T&amp;gt;&lt;/code&gt;もしくは&lt;code&gt;boost::has_trivial_copy_constructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_trivial_copy.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;has_trivial_copy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_copy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_copy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_copy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-trivial-destructor&#34; name=&#34;has-trivial-destructor&#34;&gt;自明なデストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_trivial_destructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_trivial_destructor.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;has_trivial_destructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_destructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_destructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
has_trivial_destructor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#has-virtual-destructor&#34; name=&#34;has-virtual-destructor&#34;&gt;仮想デストラクタを持っている型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::has_virtual_destructor&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/has_virtual_destructor.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-abstract&#34; name=&#34;is-abstract&#34;&gt;抽象型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_abstract&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_abstract.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;abc&lt;/span&gt;{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;abc() &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; }; 

is_abstract&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;abc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_abstract&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;abc &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-const&#34; name=&#34;is-const&#34;&gt;const修飾された型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_const&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_const.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;`&amp;lt;boost/type_traits.hpp&amp;gt;@&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-empty&#34; name=&#34;is-empty&#34;&gt;空クラスかどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_empty&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;継承してもサイズが増えない型なら&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_empty.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; empty_class {}; 

is_empty&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;empty_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_empty&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;empty_class &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_empty&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;empty_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-stateless&#34; name=&#34;is-stateless&#34;&gt;stateless型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_stateless&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;ストレージを持たず、コンストラクタとデストラクタが自明な型なら&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_stateless.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-pod&#34; name=&#34;is-pod&#34;&gt;POD型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_pod&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/is_pod.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_pod&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pod&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pod&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_pod&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-polymorphic&#34; name=&#34;is-polymorphic&#34;&gt;多相的に振る舞う型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_polymorphic&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_polymorphic.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;poly&lt;/span&gt;{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;poly(); };

is_polymorphic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;poly&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_polymorphic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;poly &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_polymorphic&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;poly&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-signed&#34; name=&#34;is-signed&#34;&gt;符号付き整数型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_signed&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_signed.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;myclass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;は、&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;の符号性質に依存する&lt;/span&gt;
is_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-unsigned&#34; name=&#34;is-unsigned&#34;&gt;符号なし整数型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_unsigned&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_unsigned.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;myclass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;は、&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;の符号性質に依存する&lt;/span&gt;
is_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-volatile&#34; name=&#34;is-volatile&#34;&gt;volatile修飾された型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_volatile&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_volatile.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#extent&#34; name=&#34;extent&#34;&gt;配列のN次元目の要素数を取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::extent&amp;lt;T&amp;gt;&lt;/code&gt;もしくは&lt;code&gt;boost::extent&amp;lt;T, N&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/extent.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;0&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;1&amp;gt;::&lt;/span&gt;value
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;1&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#rank&#34; name=&#34;rank&#34;&gt;配列の次元数を取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::rank&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/rank.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;
rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;
rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
rank&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#relationships-between-two-types&#34; name=&#34;relationships-between-two-types&#34;&gt;2つの型の関係性&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-base-of&#34; name=&#34;is-base-of&#34;&gt;継承関係にある型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_base_of&amp;lt;Base, Derived&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_base_of.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt;{};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Base{}; 

is_base_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base, Derived&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_base_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base, Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-virtual-base-of&#34; name=&#34;is-virtual-base-of&#34;&gt;仮想継承の関係にある型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_virtual_base_of&amp;lt;Base, Derived&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_virtual_base_of.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Base&lt;/span&gt;{};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Derived&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; Base{}; 

is_virtual_base_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base, Derived&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_virtual_base_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Base, Base&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-convertible&#34; name=&#34;is-convertible&#34;&gt;変換可能な型かどうかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_convertible&amp;lt;From, To&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_convertible.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// const_castが必要&lt;/span&gt;
is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_convertible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#is-same&#34; name=&#34;is-same&#34;&gt;2つの型が同じかを判定する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::is_same&amp;lt;T, U&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/is_same.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#transform-type-to-another&#34; name=&#34;transform-type-to-another&#34;&gt;型の変換する&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-const&#34; name=&#34;add-const&#34;&gt;const修飾を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_const&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T const&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_const.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
add_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
add_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-volatile&#34; name=&#34;add-volatile&#34;&gt;volatile修飾を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_volatile&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T volatile&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_volatile.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
add_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
add_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-cv&#34; name=&#34;add-cv&#34;&gt;const volatile修飾を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_cv&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T const volatile&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_cv.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
add_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
add_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-lvalue-reference&#34; name=&#34;add-lvalue-reference&#34;&gt;左辺値参照を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_lvalue_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_lvalue_reference.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_lvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-rvalue-reference&#34; name=&#34;add-rvalue-reference&#34;&gt;右辺値参照を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_rvalue_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_rvalue_reference.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;例：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;amp;&lt;/span&gt;
add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
add_rvalue_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-reference&#34; name=&#34;add-reference&#34;&gt;参照を付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_reference.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
add_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
add_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#add-pointer&#34; name=&#34;add-pointer&#34;&gt;ポインタを付加する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::add_pointer&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T*&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/add_pointer.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;add_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
add_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
add_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;
add_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#conditional&#34; name=&#34;conditional&#34;&gt;条件によって型を選択する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::conditional&amp;lt;Cond, Then, Else&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;コンパイル時条件&lt;code&gt;Cond&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;の場合は&lt;code&gt;Then&lt;/code&gt;型を返し、それ以外の場合は&lt;code&gt;Else&lt;/code&gt;型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/conditional.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;conditional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
conditional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#common-type&#34; name=&#34;common-type&#34;&gt;共通の型を取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::common_type&amp;lt;T...&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;複数の型から、共通に変換可能な型を推定して返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/common_type.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; common_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T...&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type min(T... t);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#decay&#34; name=&#34;decay&#34;&gt;推論される型の取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::decay&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;以下のような関数テンプレートによって推論される型を取得する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T x);
&lt;/pre&gt;&lt;/div&gt;

インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits/decay.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/type_traits.hpp&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)              &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)                 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#floating-point-promotion&#34; name=&#34;floating-point-promotion&#34;&gt;浮動小数点数型を昇格する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;booost::floating_point_promotion&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;を&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;を&lt;code&gt;long double&lt;/code&gt;に昇格。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/floating_point_promotion.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;floating_point_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
floating_point_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
floating_point_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#integral-promotion&#34; name=&#34;integral-promotion&#34;&gt;整数型を昇格する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::integral_promotion&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;short&lt;/code&gt;を&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;を&lt;code&gt;long&lt;/code&gt;に、といった昇格を行う。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/integral_promotion.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;integral_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
integral_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type                      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
integral_promotion&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;float_round_style&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#promote&#34; name=&#34;promote&#34;&gt;型を昇格する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::promote&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;整数型もしくは浮動小数点数型を昇格。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/promote.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;promote&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
promote&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
promote&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type         &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#make-signed&#34; name=&#34;make-signed&#34;&gt;符号なし型から符号あり型に変換する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::make_signed&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/make_signed.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;make_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
make_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
make_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;
make_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;と同じ幅を持つ符号付き整数型&lt;/span&gt;
make_signed&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;と同じ幅を持つ符号付き整数型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#make-unsigned&#34; name=&#34;make-unsigned&#34;&gt;符号あり型から符号なし型に変換する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::make_unsigned&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/make_unsigned.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;make_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
make_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
make_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt;
make_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;my_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;と同じ幅を持つ符号なし整数型&lt;/span&gt;
make_unsigned&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;と同じ幅を持つ符号なし整数型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-extent&#34; name=&#34;remove-extent&#34;&gt;配列の次元を削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_extent&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_extent.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type          &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
remove_extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]
remove_extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type     &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]
remove_extent&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type   &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-all-extents&#34; name=&#34;remove-all-extents&#34;&gt;配列の次元を全て削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_all_extents&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_all_extents.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_all_extents&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type          &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_all_extents&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
remove_all_extents&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[][&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type     &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_all_extents&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_all_extents&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type   &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-const&#34; name=&#34;remove-const&#34;&gt;const修飾を削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_const&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_const.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;
remove_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
remove_const&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-volatile&#34; name=&#34;remove-volatile&#34;&gt;volatile修飾を削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_volatile&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_volatile.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
remove_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
remove_volatile&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-cv&#34; name=&#34;remove-cv&#34;&gt;const volatile修飾を削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_cv&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_cv.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type                &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type          &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type         &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
remove_cv&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type         &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-pointer&#34; name=&#34;remove-pointer&#34;&gt;ポインタを削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_pointer&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_pointer.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type         &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
remove_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
remove_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;
remove_pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#remove-reference&#34; name=&#34;remove-reference&#34;&gt;参照を削除する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::remove_reference&amp;lt;T&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/remove_reference.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;remove_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
remove_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;
remove_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;type       &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
remove_reference&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;amp;&amp;gt;::&lt;/span&gt;type      &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#synthesizing-types-with-specific-alignments&#34; name=&#34;synthesizing-types-with-specific-alignments&#34;&gt;特定アライメントを持った型の合成&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#type-with-alignment&#34; name=&#34;type-with-alignment&#34;&gt;特定のアライメントを持つ型の取得する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::type_with_alignment&amp;lt;Align&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/type_with_alignment.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/type_traits/alignment_of.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/type_traits/type_with_alignment.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;type_with_alignment&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;alignment_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
    ).name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;union boost::detail::lower_alignment&amp;lt;1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html#aligned-storage&#34; name=&#34;aligned-storage&#34;&gt;適切にアライメントされた型を作成する&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;boost::aligned_storage&amp;lt;Len, Align&amp;gt;&lt;/code&gt;メタ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Align&lt;/code&gt;アライメント、&lt;code&gt;Len&lt;/code&gt;サイズのPOD型を返す。&lt;/p&gt;
&lt;p&gt;インクルード：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits/aligned_storage.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/type_traits.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// via http://d.hatena.ne.jp/Cryolite/20051102#p1&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;scoped_destroy&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;noncopyable
{
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; scoped_destroy(T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ptr_(p) {}
    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;scoped_destroy(){ptr_&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;~&lt;/span&gt;T();}
    T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;()&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;{&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;ptr_;}
    T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;{&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ptr_;}
    T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; get()&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;{&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ptr_;}
&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
    T&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr_;
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;aligned_storage&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(MyClass), boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;alignment_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type buf;

    scoped_destroy&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;MyClass&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; p(&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;buf)) MyClass());

    ... &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// p.get(), p-&amp;gt;(), *p を用いて構築したオブジェクトを利用する&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ここで明示的なデストラクタの呼び出しは不要&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>単体テスト -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/unit_test.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/unit_test.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;単体テスト&lt;/h1&gt;
&lt;p&gt;単体テストには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Test Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#equality-test&#34;&gt;等値テスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#floating-point-equality-test&#34;&gt;浮動小数点数の等値テスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#throw-test&#34;&gt;例外が投げられるかどうかのテスト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#equality-test&#34; name=&#34;equality-test&#34;&gt;等値テスト&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;等値テストには、&lt;code&gt;BOOST_CHECK&lt;/code&gt;マクロに条件式を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define BOOST_TEST_MAIN&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/test/included/unit_test.hpp&amp;gt;&lt;/span&gt;

BOOST_AUTO_TEST_CASE(test1)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    BOOST_CHECK(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Running 1 test case...

*** No errors detected
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#floating-point-equality-test&#34; name=&#34;floating-point-equality-test&#34;&gt;浮動小数点数の等値テスト&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;浮動小数点数の等値テストには、&lt;code&gt;BOOST_CHECK_CLOSE&lt;/code&gt;マクロに、比較対象の2つの変数と、許容する誤差（%）を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define BOOST_TEST_MAIN&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/test/included/unit_test.hpp&amp;gt;&lt;/span&gt;

BOOST_AUTO_TEST_CASE(test1)
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.23456e28&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1.23457e28&lt;/span&gt;;

    BOOST_CHECK_CLOSE(v1, v2, &lt;span style=&#34;color: #666666&#34;&gt;0.0001&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Running 1 test case...
test.cpp(9): error in &#34;test1&#34;: difference{0.000809999%} between v1{1.2345599999999999e+028} and v2{1.23457e+028} exceeds 0.0001%

*** 1 failure detected in test suite &#34;Master Test Suite&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;0&lt;/code&gt;との等値テストには&lt;code&gt;BOOST_CHECK_CLOSE&lt;/code&gt;マクロが使えない。代わりに、&lt;code&gt;BOOST_CHECK_SMALL&lt;/code&gt;マクロに、比較対象の変数と、許容する誤差（絶対誤差）を指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define BOOST_TEST_MAIN&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/test/included/unit_test.hpp&amp;gt;&lt;/span&gt;

BOOST_AUTO_TEST_CASE( test1 )
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1.23456e-3&lt;/span&gt;;

    BOOST_CHECK_SMALL( v, &lt;span style=&#34;color: #666666&#34;&gt;1e-4&lt;/span&gt; );
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Running 1 test case...
test.cpp(8): error in &#34;test1&#34;: absolute value of v{-0.00123456} exceeds 0.0001

*** 1 failure detected in test suite &#34;Master Test Suite&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/unit_test.html#throw-test&#34; name=&#34;throw-test&#34;&gt;例外が投げられるかどうかのテスト&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_CHECK_THROW&lt;/code&gt;マクロは、ある式が指定した例外を投げるかどうかをテストする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#define BOOST_TEST_MAIN&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/test/included/unit_test.hpp&amp;gt;&lt;/span&gt;

BOOST_AUTO_TEST_CASE(test1)
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    BOOST_CHECK_THROW(v.at(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;out_of_range);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Running 1 test case...

*** No errors detected
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>オブジェクトにユニークなIDを付ける -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/uuid.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/uuid.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;オブジェクトにユニークなIDを付ける&lt;/h1&gt;
&lt;p&gt;COMや分散環境において、オブジェクトにユニークなIDが必要になることがある。&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/uuid/uuid.html&#34; target=&#34;_blank&#34;&gt;Boost Uuid Library&lt;/a&gt;は、UUID(Universally unique identifier)の型とジェネレータを提供するライブラリである。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/uuid.html#random-uuid&#34;&gt;ランダムなUUIDを生成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/uuid.html#uuid-to-string&#34;&gt;UUIDを文字列に変換する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/uuid.html#random-uuid&#34; name=&#34;random-uuid&#34;&gt;ランダムなUUIDを生成する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::uuids::random_generator&lt;/code&gt;は、ランダムなUUIDを生成する関数オブジェクトである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;random_generator&lt;/code&gt;を使用するには、&lt;code&gt;&amp;lt;boost/uuid/uuid_generators.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid_io.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid_generators.hpp&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// random_generator&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uuids;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ランダムにユニークIDを生成&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; uuid id1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; random_generator()();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; uuid id2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; random_generator()();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; id1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; id2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;d3e0fe51-8078-4a9b-a353-2485a47e0ffe
c5bcb847-5750-4388-ae8d-092e239ef2e6
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/uuid.html#uuid-to-string&#34; name=&#34;uuid-to-string&#34;&gt;UUIDを文字列に変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::uuids::uuid&lt;/code&gt;型は、&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;出力ストリーム演算子を持っているので、&lt;code&gt;boost::lexical_cast()&lt;/code&gt;を使用して文字列に変換できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid_io.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/uuid/uuid_generators.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uuids;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ランダムにユニークIDを生成&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; uuid id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; random_generator()();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列に変換&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(id);

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

実行結果の例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;7dad652f-fa94-4f9c-a17b-357551438095
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ユーザー定義型を扱える型安全な共用体 -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/variant.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/variant.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;ユーザー定義型を扱える型安全な共用体&lt;/h1&gt;
&lt;p&gt;ユーザー定義型を共用体で扱うには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/variant.html&#34; target=&#34;_blank&#34;&gt;Boost Variant Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#which-type&#34;&gt;どの型が格納されているかを判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#get-value&#34;&gt;格納されている値を取り出す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#clear&#34;&gt;値をクリアする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#recursive-variant&#34;&gt;variantを再帰的にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;まず、Boost.Variantの基本的な使い方を以下に示す：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/variant.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; var_printer &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;static_visitor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; s) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
        { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int, string, doubleのオブジェクトが格納されうる型&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int型の値を代入&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(var_printer(), v); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// visitorで型ごとの処理を行う&lt;/span&gt;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列を代入&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;apply_visitor(var_printer(), v);
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;クラステンプレートが、型安全に抽象化された共用体である。そのテンプレート引数として、格納されうる型を列挙する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;クラスは、テンプレートパラメータで指定された型のオブジェクトを、コピー／ムーブコンストラクタおよび代入演算子で代入できる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/apply_visitor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::apply_visitor()&lt;/code&gt;&lt;/a&gt;関数に指定する関数オブジェクトは、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/static_visitor.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::static_visitor&lt;/code&gt;&lt;/a&gt;クラスから派生したクラスであり、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;オブジェクトにどの型のオブジェクトが格納されているのかによって、関数呼び出し演算子を適切にオーバーロードしてくれる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#which-type&#34; name=&#34;which-type&#34;&gt;どの型が格納されているかを判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;オブジェクトにどの型が格納されているか判定するには&lt;code&gt;which()&lt;/code&gt;メンバ関数、もしくは&lt;code&gt;type()&lt;/code&gt;メンバ関数を使用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;which()&lt;/code&gt;メンバ関数は、格納されている型の、&lt;code&gt;0&lt;/code&gt;から始まるインデックスを返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/variant.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 空の状態&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.&lt;span style=&#34;color:#ff0000&#34;&gt;which&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int型の値を格納&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.&lt;span style=&#34;color:#ff0000&#34;&gt;which&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// double型の値を格納&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.&lt;span style=&#34;color:#ff0000&#34;&gt;which&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
0
2
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;type()&lt;/code&gt;メンバ関数は、格納されている型の&lt;a href=&#34;http://cpprefjp.github.io/reference/typeinfo/type_info.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;std::type_info&lt;/code&gt;&lt;/a&gt;オブジェクトへの&lt;code&gt;const&lt;/code&gt;左辺値参照を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/variant.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int型の値を格納&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (v.&lt;span style=&#34;color:#ff0000&#34;&gt;type&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3.14&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// double型の値を格納&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (v.&lt;span style=&#34;color:#ff0000&#34;&gt;type&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;int
double
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#get-value&#34; name=&#34;get-value&#34;&gt;格納されている値を取り出す&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;オブジェクトに格納されている値を取り出すには、&lt;a href=&#34;http://www.boost.org/doc/libs/1_52_0/doc/html/boost/get_id1950197.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::get()&lt;/code&gt;&lt;/a&gt;非メンバ関数を使用する。
この関数には参照版とポインタ版の2種類が用意されている。それぞれの特徴は以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参照版 ： &lt;a href=&#34;http://www.boost.org/doc/libs/1_52_0/doc/html/boost/get_id1950197.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::get()&lt;/code&gt;&lt;/a&gt;非メンバ関数に&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;オブジェクトへの参照を渡すと、格納されている値への参照を返す。指定された型が格納されている型と同じではない場合、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/bad_get.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::bad_get&lt;/code&gt;&lt;/a&gt;型の例外を送出する。&lt;/li&gt;
&lt;li&gt;ポインタ版 ： &lt;a href=&#34;http://www.boost.org/doc/libs/1_52_0/doc/html/boost/get_id1950197.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::get()&lt;/code&gt;&lt;/a&gt;非メンバ関数に&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;オブジェクトへのポインタを渡すと、格納されている値へのポインタを返す。指定された型が格納されている型と同じではない場合、ヌルポインタを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/variant.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string, &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v;
    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// int型の値を格納&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参照版&lt;/span&gt;
    try {
        &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(v);
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_get&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ポインタ版&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;v)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int値は格納されていない&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#clear&#34; name=&#34;clear&#34;&gt;値をクリアする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Variantには&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/variant/design.html#variant.design.never-empty&#34; target=&#34;_blank&#34;&gt;決して空にはならない保証&lt;/a&gt;という考え方があるため、他の値を入れることはできてもクリアはできない。&lt;code&gt;clear()&lt;/code&gt;関数は用意されておらず、&lt;code&gt;empty()&lt;/code&gt;メンバ関数は常に&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;どうしてもクリアしたい場合は、&lt;code&gt;boost::blank&lt;/code&gt;という型を&lt;code&gt;variant&lt;/code&gt;に格納できるように指定する。これは単なる中身が空のクラスである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;which()&lt;/code&gt;メンバ関数や&lt;code&gt;type()&lt;/code&gt;メンバ関数を使用して、&lt;code&gt;boost::blank&lt;/code&gt;オブジェクトが格納されているかどうかで、空かどうかを判定する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost/variant.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::variant&lt;/code&gt;&lt;/a&gt;クラスは、そのデフォルトコンストラクタで第1テンプレートパラメータのオブジェクトを構築するので、&lt;code&gt;boost::blank&lt;/code&gt;は第1テンプレートパラメータとして指定することを推奨する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/variant.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;blank&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;blank&lt;/span&gt;();
    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;;

    v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;blank&lt;/span&gt;();

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (v.type() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeid&lt;/span&gt;(&lt;span style=&#34;color:#ff0000&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;blank&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;blank&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no blank&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;blank
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/variant.html#recursive-variant&#34; name=&#34;recursive-variant&#34;&gt;variantを再帰的にする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;documentated boost version is 1.52.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boostのバージョンを調べる -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/version.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/version.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boostのバージョンを調べる&lt;/h1&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/version.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/version.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/version.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; BOOST_VERSION &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 104601&lt;/span&gt;
              &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; BOOST_LIB_VERSION &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1_46_1&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

Boostのバージョンが &lt;code&gt;x.yy.zz&lt;/code&gt; であれば、&lt;code&gt;BOOST_VERSION&lt;/code&gt; マクロは &lt;code&gt;x0yyzz&lt;/code&gt; という整数に展開される。また &lt;code&gt;BOOST_LIB_VERSION&lt;/code&gt; マクロは文字列 &lt;code&gt;&#34;x_yy_zz&#34;&lt;/code&gt; となるが、&lt;code&gt;zz&lt;/code&gt; が &lt;code&gt;00&lt;/code&gt; の場合、&lt;code&gt;_zz&lt;/code&gt; の部分は省略される。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>XMLの読み込み／書き込み -- ページ内リンクの書き方が間違っていたので修正。 修正スクリプトは以下： https://gist.github.com/faithandbrave/39ce0160d4c8ed654b7f</title>
      <link href="http://boostjp.github.io/tips/xml.html"/>
      <id>280952c5bc7f634d593eb6d959528fdc5ae63822:tips/xml.md</id>
      <updated>2014-12-18 01:11:44 +0900</updated>
      
        <content type="html">&lt;h1&gt;XMLの読み込み／書き込み&lt;/h1&gt;
&lt;p&gt;XMLの読み込み、書き込みには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/property_tree.html&#34; target=&#34;_blank&#34;&gt;Boost Property Tree Library&lt;/a&gt;を使用する。Boost.PropertyTreeは、ツリー構造の汎用プロパティ管理のためのライブラリで、XML, JSON, INIファイルなどへの統一的なアクセス方法を提供する。&lt;/p&gt;
&lt;p&gt;ここでは、Boost.PropertyTreeを使用したXMLファイルの読み込みと書き込みを紹介する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#read&#34;&gt;XMLを読み込む&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#get-attribute&#34;&gt;属性を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#write&#34;&gt;XMLを書き込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#read&#34; name=&#34;read&#34;&gt;XMLを読み込む&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;XMLの読み込みには、&lt;code&gt;boost::property_tree::read_xml()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数を使用するには、&lt;code&gt;&amp;lt;boost/property_tree/xml_parser.hpp&amp;gt;&lt;/code&gt;をインクルードする。&lt;/p&gt;
&lt;p&gt;以下のXMLファイルを読み込んでみよう。&lt;/p&gt;
&lt;p&gt;data.xml：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;

&amp;lt;root&amp;gt;
    &amp;lt;str&amp;gt;Hello&amp;lt;/str&amp;gt;
    &amp;lt;values&amp;gt;
        &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;3&amp;lt;/value&amp;gt;
    &amp;lt;/values&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/xml_parser.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/lexical_cast.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

    ptree pt;
    read_xml(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data.xml&#34;&lt;/span&gt;, pt);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.str&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.str is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ptree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; child, pt.get_child(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.values&#34;&lt;/span&gt;)) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lexical_cast&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(child.second.data());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}


&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;実行結果：&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

まず、&lt;code&gt;root/str&lt;/code&gt;要素を取得するには、XMLが読み込まれた&lt;code&gt;boost::property_tree:ptree&lt;/code&gt;オブジェクトに対して以下のように指定する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.str&#34;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

要素アクセスのパス指定には、XPathではなくドットによるアクセスを行う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_optional()&lt;/code&gt;メンバ関数によって、指定された型に変換された要素が返される。要素の取得に失敗した場合は、&lt;code&gt;boost::optional&lt;/code&gt;の無効値が返される。&lt;/p&gt;
&lt;p&gt;次に、&lt;code&gt;root/values/value&lt;/code&gt;の要素を列挙するには、&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;オブジェクトに対して、&lt;code&gt;get_child()&lt;/code&gt;メンバ関数でパス指定し、子ツリーを取得する。取得した子ツリーを&lt;code&gt;BOOST_FOREACH&lt;/code&gt;でループし、文字列型(&lt;code&gt;std::string&lt;/code&gt;)として取得される各&lt;code&gt;value&lt;/code&gt;要素を&lt;code&gt;int&lt;/code&gt;に変換して取得している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; ptree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;value_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; child, pt.get_child(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.values&#34;&lt;/span&gt;) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#get-attribute&#34; name=&#34;get-attribute&#34;&gt;属性を取得する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;XML要素の属性を取得するには、&lt;code&gt;&#34;&amp;lt;xmlattr&amp;gt;&#34;&lt;/code&gt;という特殊な要素名をパス指定する。以下は、属性のあるXMLを読み込む例である：&lt;/p&gt;
&lt;p&gt;data.xml：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;

&amp;lt;root&amp;gt;
    &amp;lt;data id=&#34;3&#34; name=&#34;str&#34;/&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/xml_parser.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree;

    ptree pt;
    read_xml(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;data.xml&#34;&lt;/span&gt;, pt);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.data.&lt;span style=&#34;color:#ff0000&#34;&gt;&amp;lt;xmlattr&amp;gt;&lt;/span&gt;.id&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; id.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;id is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
            pt.get_optional&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;root.data.&lt;span style=&#34;color:#ff0000&#34;&gt;&amp;lt;xmlattr&amp;gt;&lt;/span&gt;.name&#34;&lt;/span&gt;)) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;name is nothing&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

実行結果：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
str
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/xml.html#write&#34; name=&#34;write&#34;&gt;XMLを書き込む&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;XMLを書き込むには、要素を追加するために&lt;code&gt;boost::property_tree::ptree&lt;/code&gt;の&lt;code&gt;add()&lt;/code&gt;メンバ関数を使用し、&lt;code&gt;put()&lt;/code&gt;メンバ関数で値を設定する。&lt;/p&gt;
&lt;p&gt;保存には、&lt;code&gt;boost::property_tree::write_xml()&lt;/code&gt;関数に、ファイル名と&lt;code&gt;ptree&lt;/code&gt;オブジェクトを指定する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/ptree.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/property_tree/xml_parser.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/foreach.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Book {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string title;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string author;

    Book() {}
    Book(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Book&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; other)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; title(other.title), author(other.author) {}

    Book(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; title, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; author)
        &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; title(title), author(author) {}
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Book&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; books;
    books.reserve(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
    books.push_back(Book(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&amp;amp;E&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Bjarne Stroustrup&#34;&lt;/span&gt;));
    books.push_back(Book(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;MC++D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Andrei, Alexandrescu&#34;&lt;/span&gt;));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ptree;

    ptree pt;
    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Book&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; book, books) {
        ptree&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; child &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; pt.add(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;bookList.book&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#34;&lt;/span&gt;);
        child.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&amp;lt;xmlattr&amp;gt;.title&#34;&lt;/span&gt;,    book.title);
        child.put(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&amp;lt;xmlattr&amp;gt;.author&#34;&lt;/span&gt;,   book.author);
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_tree&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;xml_parser;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; indent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
    write_xml(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;book.xml&#34;&lt;/span&gt;, pt, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locale(),
        xml_writer_make_settings(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;, indent, widen&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;utf-8&#34;&lt;/span&gt;)));
}
&lt;/pre&gt;&lt;/div&gt;

book.xml：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;
&amp;lt;bookList&amp;gt;
  &amp;lt;book title=&#34;D&amp;amp;E&#34; author=&#34;Bjarne Stroustrup&#34;/&amp;gt;
  &amp;lt;book title=&#34;MC++D&#34; author=&#34;Andrei Alexandrescu&#34;/&amp;gt;
&amp;lt;/bookList&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;write_xml()&lt;/code&gt;関数は、第3引数以降を省略した場合、インデントや改行が省略される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xml_writer_make_settings&lt;/code&gt;を使用することで、インデントとエンコーディングを設定できる。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>