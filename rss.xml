<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-04-13T14:33:40.629878</updated>
  <id>34ce61be-34a6-4171-8b6e-a4571d6ae3bc</id>

  
    <entry>
      <title>Boost 1.73.0リリースノート -- 1.73.0リリースノート : StaticStringを追加 (close #453)</title>
      <link href="https://boostjp.github.io/document/version/1_73_0.html"/>
      <id>f26a8d4fceeee70ecadbfc35a16f237ea9a9a269:document/version/1_73_0.md</id>
      <updated>2020-04-13T20:17:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.73.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_73_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_73_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/nowide/&#34; target=&#34;_blank&#34;&gt;Nowide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Windowsで標準ライブラリと組み合わせて使用するUTF-8 API (作者Artyom Beilis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/static_string/&#34; target=&#34;_blank&#34;&gt;StaticString&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;コンパイル時の固定キャパシティと連続した埋め込みストレージをもつ、動的なサイズ変更可能な文字列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;をインクルードしないことでコンパイル速度を向上&lt;/li&gt;
&lt;li&gt;CI強化を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20の&lt;code&gt;atomic_ref&lt;/code&gt;を実装。&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats&#34; target=&#34;_blank&#34;&gt;注意書き&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;C++20で導入された&lt;code&gt;atomic_flag::test&lt;/code&gt;操作を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;のアライメント要件を考慮するべきであり、それらが&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより高い要件の場合に違いが生じる&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;atomic&lt;/code&gt;と&lt;code&gt;atomic_ref&lt;/code&gt;で使用される値型&lt;code&gt;T&lt;/code&gt;の要件を表明する静的アサートを追加。これにより、不正な型をアトミックに使用することを禁止する&lt;/li&gt;
&lt;li&gt;内部のロックプールの実装を改善。プールをより大きくし、ロックの選択にはアトミックオブジェクトのアライメントを考慮するようにした。これにより、スレッド競合 (thread contention) の可能性が減る&lt;/li&gt;
&lt;li&gt;8ビットと16ビットの引数に対する&lt;code&gt;bit_test_and_*&lt;/code&gt;操作で生成される不正なx86コードを修正。他のアーキテクチャには影響しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt;のアライメント要件が&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより小さい場合に、&lt;code&gt;compare_exchange_*&lt;/code&gt;操作がアライメントされていないメモリアクセスをしてしまう可能性があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;boost/atomic/atomic.hpp&lt;/code&gt;が&lt;code&gt;boost/atomic/atomic_flag.hpp&lt;/code&gt;と&lt;code&gt;boost/atomic/fences.hpp&lt;/code&gt;をインクルードせず、&lt;code&gt;boost::atomic&lt;/code&gt;クラステンプレートと関連する型の別名のみを定義するようにした。必要な場合はそれぞれのヘッダを明示的にインクルードするか、Boost.Atomicの全てをインクルードする&lt;code&gt;boost/atomic.hpp&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage()&lt;/code&gt;アクセッサと関連する&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage_type&lt;/code&gt;型を非推奨化。代わりに&lt;code&gt;atomic&amp;lt;T&amp;gt;::value()&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;を使用することを推奨する。ユーザーは&lt;code&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/code&gt;を定義することで非推奨の警告を無効にできる。非推奨となった機能は将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;のサポートを削除。このマクロは1.73.0の2年前にリリースされたBoost.Atomicの1.67.0において&lt;code&gt;*_and_test&lt;/code&gt;操作の変更された戻り値への移行を助けるためにあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスアップデートとなる&lt;/li&gt;
&lt;li&gt;Beast dynamic buffers内の入れ小型&lt;code&gt;mutable_data_type&lt;/code&gt;を非推奨化した。代わりに&lt;code&gt;mutable_buffers_type&lt;/code&gt;を使用するか&lt;code&gt;BOOST_BEAST_ALLOW_DEPRECATED&lt;/code&gt;をdefineすること。影響を受ける型は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_adaptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雑多な修正&lt;ul&gt;
&lt;li&gt;ルート証明の例を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;Content-Lengthの解析を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_bytes&lt;/code&gt;のドキュメントを正した&lt;/li&gt;
&lt;li&gt;strandにディスパッチする例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::close&lt;/code&gt;が例外を投げないことを保証&lt;/li&gt;
&lt;li&gt;sha1.hpp内のインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;の警告を修正&lt;/li&gt;
&lt;li&gt;field digestはエンディアン非依存&lt;/li&gt;
&lt;li&gt;README内のリンク切れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;のフラッシュを修正&lt;/li&gt;
&lt;li&gt;いくつかのWin32エラーをネットワークエラーコードに修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer::shrink_to_fit&lt;/code&gt;を&lt;code&gt;noexcept&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;eraseフィールドを修正&lt;/li&gt;
&lt;li&gt;コンパイル設定のドキュメントを修正&lt;/li&gt;
&lt;li&gt;strandを使用する例を正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File:read&lt;/code&gt;でのend-of-fileの動作をドキュメントで明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;がeofの読み込み時に&lt;code&gt;short_read&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;Win32での&lt;code&gt;file_body&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream_buffer&lt;/code&gt;が&lt;code&gt;DynamicBuffer_v1::commit&lt;/code&gt;の事前条件を満たすようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file_body&lt;/code&gt;のFileメンバにアクセッサ関数を追加&lt;/li&gt;
&lt;li&gt;リリースビルドのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;がUTF-8パスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_stdio&lt;/code&gt;がUnicodeパスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo-op&lt;/code&gt;のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;のボディが&lt;code&gt;http::serializer::split&lt;/code&gt;を尊重するようにした&lt;/li&gt;
&lt;li&gt;非MSVCのcmakeを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; IBM Zのfcontextルーチンを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt; mips64/n64のalignを2から3に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; OSプラットフォームとしてMIPS32とMIPS64で異なるABIを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/129&#34; target=&#34;_blank&#34;&gt;GitHub #129&lt;/a&gt; RISC-Vアセンブリのnon-PICを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参照用の&lt;code&gt;boost::polymorphic_downcast&lt;/code&gt;を追加 (Julien Delacroix氏のパッチに感謝)&lt;/li&gt;
&lt;li&gt;重大なドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::dll::smart_library&lt;/code&gt;内のデマングリングを修正してテスト (Ramil Gauss氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;boost::dll::load_mode::type&lt;/code&gt;に対するUBSanを通るようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; MPLへの依存をやめてコンパイル速度を改善 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; WindowsのClangとICC対応を修正し、これらのプラットフォームをCIでサポート (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;CI強化とテスト改善を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/457&#34; target=&#34;_blank&#34;&gt;GitHub #457&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスにムーブコンストラクタとムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/456&#34; target=&#34;_blank&#34;&gt;GitHub #456&lt;/a&gt; &lt;code&gt;any_image_view&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/gil/pull/464&#34; target=&#34;_blank&#34;&gt;GitHub #464&lt;/a&gt; GIL内で使用するテストフレームワークをBoost.TestからBoost.LightweightTestに置き換えた。それにともない、&lt;code&gt;test/extension/io/&lt;/code&gt;サブツリーと&lt;code&gt;Jamfile&lt;/code&gt;関連のターゲットを再構築&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt; Boost.MPLの残っていた使用部分を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; すべてのマクロを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/419&#34; target=&#34;_blank&#34;&gt;GitHub #419&lt;/a&gt; CMakeのすべての設定オプションを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/466&#34; target=&#34;_blank&#34;&gt;GitHub #466&lt;/a&gt; 使用されておらず、およらく未完成の&lt;code&gt;extension/dynamic_image/reduce.hpp&lt;/code&gt;を削除。これは、Lubomir Bourdev, Jaakko Jarviによる論文&lt;a href=&#34;http://lubomir.org/academic/MinimizingCodeBloat.pdf&#34; target=&#34;_blank&#34;&gt;「Efficient Run-Time Dispatching in Generic Programming with Minimal Code Bloat (最小のコード量によるジェネリックプログラミングでの効率的な実行時ディスパッチ)」&lt;/a&gt;で解説される手法を実装する試みだった&lt;/li&gt;
&lt;li&gt;Boost.MPL、Boost.System、Boost.Testへの直接的な依存を削除&lt;/li&gt;
&lt;li&gt;I/O拡張テストのpublicなコンパイル時設定マクロを削除し始めた。例として&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/code&gt;と&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/code&gt;を削除し、代わりにテストターゲットがビルドされると、すべてのテストケースが無条件にビルドされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/433&#34; target=&#34;_blank&#34;&gt;GitHub #433&lt;/a&gt; I/O拡張オブジェクトの破棄中に&lt;code&gt;longjump&lt;/code&gt;の相互作用を回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/429&#34; target=&#34;_blank&#34;&gt;GitHub #429&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスのコンストラクタでの&lt;code&gt;alignment&lt;/code&gt;パラメータにデフォルト値が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/414&#34; target=&#34;_blank&#34;&gt;GitHub #414&lt;/a&gt; 破損した (corrupted) PNGファイルを読み込んだときにセグメンテーション違反が起きる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/409&#34; target=&#34;_blank&#34;&gt;GitHub #409&lt;/a&gt; I/O拡張の古いI/O v1インタフェースの、戻り値の不正な初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari, Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek氏らに感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのIOS state saverをコピー不可にした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;引用符で囲まれた文字列を読み取るときに、入力ストリームから最初に読んだときのエラーを正しくハンドリングした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;区切り文字ベースの文字列結合である&lt;code&gt;ostream_joiner&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Utilityライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力でのwidthとfillの指定を正しくハンドリングした&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力をstream bufferに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Glen Fernandes氏がこのライブラリのメンテナになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; CI強化と壊れた標準ライブラリへのワークアラウンドを含むメンテナンス作業 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt; trivial loggingで使用されるデフォルトのsinkは、ロギングコアにsinkが登録されていない場合に、各ログ記録のあとに自動的に出力をフラッシュするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core::flush&lt;/code&gt;は、sinkが登録されていない場合に、trivial loggingで使用されるデフォルトsinkに対してフラッシュを実行するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; いくつかのsyslog APIの実装 (例としてglibc) のためにワークアラウンドを追加。これにより、&lt;code&gt;openlog&lt;/code&gt;の呼び出しでアプリケーション識別文字列が保存されないようになる。それらの実装では&lt;code&gt;syslog&lt;/code&gt;呼び出しにおいてすでに解放されたメモリにアクセスする可能性があり、未定義動作を引き起こす&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; 月日を指定したログローテーション (例として&lt;code&gt;rotation_at_time_point(boost::gregorian::greg_day(1))&lt;/code&gt;) で、静かに無視されてなにも起こらなかった問題を修正&lt;/li&gt;
&lt;li&gt;ログレコードがまだ書き込まれておらず、ターゲットファイルのパターンが設定されている場合に、&lt;code&gt;text_file_backend::rotate_file&lt;/code&gt;が例外を送出する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリの様々なコンポーネントを&lt;code&gt;std::allocator_traits&lt;/code&gt;に移植し、C++20アロケータとの互換性を改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; MSYS2 Cygwin環境でのビルド時のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_unique_if&lt;/code&gt;を追加 (Kris Jusiak氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_flatten&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_rotate_left&lt;/code&gt;, &lt;code&gt;mp_rotate_right&lt;/code&gt;を追加 (Duncan Barber氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_compose&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_power_set&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_partial_sum&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_iterate&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer&#34;&gt;アロケータの状態を伝播する&lt;/a&gt;ようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;[[swappable.requirements]]&lt;/code&gt;の標準仕様に従って、&lt;code&gt;KeyFromValue&lt;/code&gt;、&lt;code&gt;Compare&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Pred&lt;/code&gt;の内部オブジェクトをswapする際に、&lt;code&gt;std::swap&lt;/code&gt;とADLによって見つかる&lt;code&gt;swap&lt;/code&gt;で適切に選択するようにした&lt;/li&gt;
&lt;li&gt;一部のコンパイラで警告が起きていた、C++11で非推奨となったデフォルトで暗黙定義される内部的なコピーコンストラクタと代入演算子のいくつかを、提供するようにした&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ClangでコンパイルされたOutcomeベースのコードのパフォーマンスを大幅に改善した。以前の実装では状態ビットフィールドでClangのオプティマイザが混乱し、低品質のコード生成が行われてしまっていた。多くのコード生成の問題とは異なり、&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 Error speed benchmarking&lt;/a&gt;で示された、現実的なコードでの経験的なベンチマークで判明した&lt;/li&gt;
&lt;li&gt;Outcome v2.2.0の将来的な機能として予定していた&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;better_optimisation&lt;/code&gt;ブランチ (より良い最適化)&lt;/a&gt;のうち安全な部分を、Outcome v2.1.3にマージした。これには新たな状態ビットフィールドの実装も含まれる。これはClangのオプティマイザを混乱させないためのものであり、Clang 9はさまざまなユースケースでGCC 9を上回るコードを生成するようになった&lt;/li&gt;
&lt;li&gt;インストールできることをコミットの度にCIでテストするようにした。スタンドアロン版のOutcomeのインストール (たとえば&lt;code&gt;make install&lt;/code&gt;) は理想よりも頻繁に壊れるので、コミットごとにCIでテストするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/214&#34; target=&#34;_blank&#34;&gt;GitHub #214&lt;/a&gt; 新たなコンセプトを実装するコンパイラは&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;の破棄性を早期にチェックしてしまうことが不満だったため、テンプレート制約を削除し、型のインスタンス化シーケンスの後半で実行されるstatic assertにフォールバックするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt; Undefined Behaviour Sanitiserがいくつかの実験的なOutcome機能のユースケースで誤検知してしまうため、ワークアラウンドを入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::poly_collection::for_each&lt;/code&gt;内での潜在的なムーブの警告を修正&lt;/li&gt;
&lt;li&gt;状態を伝播しない非等値なアロケータにおける、アロケータ拡張のムーブ構築とムーブ代入で、要素がムーブではなくコピーされてしまう問題を修正&lt;/li&gt;
&lt;li&gt;GCC 4.8の同梱される古いバージョンのlibstdc++-v3において、アロケータ拡張のムーブ構築が、アロケータ拡張のコピー構築にdecayされないようにした (Clangでも使用できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; PDBの配布についてドキュメントに記載 (情報提供してくれたemptyVoid氏とRoger Orr氏、テストに協力してくれたzlojvavan氏に感謝)&lt;/li&gt;
&lt;li&gt;msvc-9のビルドを修正&lt;/li&gt;
&lt;li&gt;テスト修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt;)、typo修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt;)、CI改善と強化、インスペクトツールの修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception&lt;/code&gt;関数に&lt;code&gt;boost::source_location&lt;/code&gt;オブジェクトをとるオーバーロードを追加&lt;ul&gt;
&lt;li&gt;注 : 例外を無効にして&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用するプロジェクトでは、このオーバーロードが必要になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34; id=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスペクトツールによるCIインテグレーションを含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/74&#34; target=&#34;_blank&#34;&gt;GitHub #74&lt;/a&gt; 未使用のインクルードを削除 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/77&#34; target=&#34;_blank&#34;&gt;GitHub #77&lt;/a&gt; ゼロをヌルポインタ定数として使用した警告を修正 (Bart Siwek氏に感謝)&lt;/li&gt;
&lt;li&gt;typo修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;, &lt;code&gt;boost::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T...&lt;/code&gt;のすべての型がtrivialの場合に&lt;code&gt;variant&amp;lt;T...&amp;gt;&lt;/code&gt;はtrivialとなる&lt;ul&gt;
&lt;li&gt;これにより、レジスタ内の関数に渡したり、そこから返したりするパフォーマンスが改善する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/detail/winapi&lt;/code&gt;内のヘッダを非推奨にした。将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/winapi/issues/81&#34; target=&#34;_blank&#34;&gt;GitHub #81&lt;/a&gt; Boost.WinAPIのヘッダが&lt;code&gt;winerror.h&lt;/code&gt;をインクルードしないようにした。&lt;code&gt;boost/winapi/error_codes.hpp&lt;/code&gt;をインクルードすることでWindowsのエラーコードを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のリリース&lt;a href=&#34;https://github.com/boostorg/build/releases/tag/4.2.0&#34; target=&#34;_blank&#34;&gt;4.2.0&lt;/a&gt;を含める&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/span&gt; : B2の4.0.0以降は、bootstrapを実行するためにC++11コンパイラが必要となる。これはB2自身をビルドするために必要なことであり、Boostをビルドするために使用するわけではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.73.0リリースノート -- 1.73.0リリースノート : B2をBuildに変更</title>
      <link href="https://boostjp.github.io/document/version/1_73_0.html"/>
      <id>a0a49ffca50406173ee65acb109c3ba3feb6de38:document/version/1_73_0.md</id>
      <updated>2020-04-13T20:14:34+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.73.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_73_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_73_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/nowide/&#34; target=&#34;_blank&#34;&gt;Nowide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Windowsで標準ライブラリと組み合わせて使用するUTF-8 API (作者Artyom Beilis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;をインクルードしないことでコンパイル速度を向上&lt;/li&gt;
&lt;li&gt;CI強化を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20の&lt;code&gt;atomic_ref&lt;/code&gt;を実装。&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats&#34; target=&#34;_blank&#34;&gt;注意書き&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;C++20で導入された&lt;code&gt;atomic_flag::test&lt;/code&gt;操作を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;のアライメント要件を考慮するべきであり、それらが&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより高い要件の場合に違いが生じる&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;atomic&lt;/code&gt;と&lt;code&gt;atomic_ref&lt;/code&gt;で使用される値型&lt;code&gt;T&lt;/code&gt;の要件を表明する静的アサートを追加。これにより、不正な型をアトミックに使用することを禁止する&lt;/li&gt;
&lt;li&gt;内部のロックプールの実装を改善。プールをより大きくし、ロックの選択にはアトミックオブジェクトのアライメントを考慮するようにした。これにより、スレッド競合 (thread contention) の可能性が減る&lt;/li&gt;
&lt;li&gt;8ビットと16ビットの引数に対する&lt;code&gt;bit_test_and_*&lt;/code&gt;操作で生成される不正なx86コードを修正。他のアーキテクチャには影響しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt;のアライメント要件が&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより小さい場合に、&lt;code&gt;compare_exchange_*&lt;/code&gt;操作がアライメントされていないメモリアクセスをしてしまう可能性があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;boost/atomic/atomic.hpp&lt;/code&gt;が&lt;code&gt;boost/atomic/atomic_flag.hpp&lt;/code&gt;と&lt;code&gt;boost/atomic/fences.hpp&lt;/code&gt;をインクルードせず、&lt;code&gt;boost::atomic&lt;/code&gt;クラステンプレートと関連する型の別名のみを定義するようにした。必要な場合はそれぞれのヘッダを明示的にインクルードするか、Boost.Atomicの全てをインクルードする&lt;code&gt;boost/atomic.hpp&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage()&lt;/code&gt;アクセッサと関連する&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage_type&lt;/code&gt;型を非推奨化。代わりに&lt;code&gt;atomic&amp;lt;T&amp;gt;::value()&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;を使用することを推奨する。ユーザーは&lt;code&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/code&gt;を定義することで非推奨の警告を無効にできる。非推奨となった機能は将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;のサポートを削除。このマクロは1.73.0の2年前にリリースされたBoost.Atomicの1.67.0において&lt;code&gt;*_and_test&lt;/code&gt;操作の変更された戻り値への移行を助けるためにあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスアップデートとなる&lt;/li&gt;
&lt;li&gt;Beast dynamic buffers内の入れ小型&lt;code&gt;mutable_data_type&lt;/code&gt;を非推奨化した。代わりに&lt;code&gt;mutable_buffers_type&lt;/code&gt;を使用するか&lt;code&gt;BOOST_BEAST_ALLOW_DEPRECATED&lt;/code&gt;をdefineすること。影響を受ける型は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_adaptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雑多な修正&lt;ul&gt;
&lt;li&gt;ルート証明の例を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;Content-Lengthの解析を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_bytes&lt;/code&gt;のドキュメントを正した&lt;/li&gt;
&lt;li&gt;strandにディスパッチする例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::close&lt;/code&gt;が例外を投げないことを保証&lt;/li&gt;
&lt;li&gt;sha1.hpp内のインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;の警告を修正&lt;/li&gt;
&lt;li&gt;field digestはエンディアン非依存&lt;/li&gt;
&lt;li&gt;README内のリンク切れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;のフラッシュを修正&lt;/li&gt;
&lt;li&gt;いくつかのWin32エラーをネットワークエラーコードに修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer::shrink_to_fit&lt;/code&gt;を&lt;code&gt;noexcept&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;eraseフィールドを修正&lt;/li&gt;
&lt;li&gt;コンパイル設定のドキュメントを修正&lt;/li&gt;
&lt;li&gt;strandを使用する例を正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File:read&lt;/code&gt;でのend-of-fileの動作をドキュメントで明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;がeofの読み込み時に&lt;code&gt;short_read&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;Win32での&lt;code&gt;file_body&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream_buffer&lt;/code&gt;が&lt;code&gt;DynamicBuffer_v1::commit&lt;/code&gt;の事前条件を満たすようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file_body&lt;/code&gt;のFileメンバにアクセッサ関数を追加&lt;/li&gt;
&lt;li&gt;リリースビルドのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;がUTF-8パスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_stdio&lt;/code&gt;がUnicodeパスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo-op&lt;/code&gt;のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;のボディが&lt;code&gt;http::serializer::split&lt;/code&gt;を尊重するようにした&lt;/li&gt;
&lt;li&gt;非MSVCのcmakeを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; IBM Zのfcontextルーチンを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt; mips64/n64のalignを2から3に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; OSプラットフォームとしてMIPS32とMIPS64で異なるABIを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/129&#34; target=&#34;_blank&#34;&gt;GitHub #129&lt;/a&gt; RISC-Vアセンブリのnon-PICを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参照用の&lt;code&gt;boost::polymorphic_downcast&lt;/code&gt;を追加 (Julien Delacroix氏のパッチに感謝)&lt;/li&gt;
&lt;li&gt;重大なドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::dll::smart_library&lt;/code&gt;内のデマングリングを修正してテスト (Ramil Gauss氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;boost::dll::load_mode::type&lt;/code&gt;に対するUBSanを通るようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; MPLへの依存をやめてコンパイル速度を改善 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; WindowsのClangとICC対応を修正し、これらのプラットフォームをCIでサポート (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;CI強化とテスト改善を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/457&#34; target=&#34;_blank&#34;&gt;GitHub #457&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスにムーブコンストラクタとムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/456&#34; target=&#34;_blank&#34;&gt;GitHub #456&lt;/a&gt; &lt;code&gt;any_image_view&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/gil/pull/464&#34; target=&#34;_blank&#34;&gt;GitHub #464&lt;/a&gt; GIL内で使用するテストフレームワークをBoost.TestからBoost.LightweightTestに置き換えた。それにともない、&lt;code&gt;test/extension/io/&lt;/code&gt;サブツリーと&lt;code&gt;Jamfile&lt;/code&gt;関連のターゲットを再構築&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt; Boost.MPLの残っていた使用部分を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; すべてのマクロを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/419&#34; target=&#34;_blank&#34;&gt;GitHub #419&lt;/a&gt; CMakeのすべての設定オプションを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/466&#34; target=&#34;_blank&#34;&gt;GitHub #466&lt;/a&gt; 使用されておらず、およらく未完成の&lt;code&gt;extension/dynamic_image/reduce.hpp&lt;/code&gt;を削除。これは、Lubomir Bourdev, Jaakko Jarviによる論文&lt;a href=&#34;http://lubomir.org/academic/MinimizingCodeBloat.pdf&#34; target=&#34;_blank&#34;&gt;「Efficient Run-Time Dispatching in Generic Programming with Minimal Code Bloat (最小のコード量によるジェネリックプログラミングでの効率的な実行時ディスパッチ)」&lt;/a&gt;で解説される手法を実装する試みだった&lt;/li&gt;
&lt;li&gt;Boost.MPL、Boost.System、Boost.Testへの直接的な依存を削除&lt;/li&gt;
&lt;li&gt;I/O拡張テストのpublicなコンパイル時設定マクロを削除し始めた。例として&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/code&gt;と&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/code&gt;を削除し、代わりにテストターゲットがビルドされると、すべてのテストケースが無条件にビルドされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/433&#34; target=&#34;_blank&#34;&gt;GitHub #433&lt;/a&gt; I/O拡張オブジェクトの破棄中に&lt;code&gt;longjump&lt;/code&gt;の相互作用を回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/429&#34; target=&#34;_blank&#34;&gt;GitHub #429&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスのコンストラクタでの&lt;code&gt;alignment&lt;/code&gt;パラメータにデフォルト値が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/414&#34; target=&#34;_blank&#34;&gt;GitHub #414&lt;/a&gt; 破損した (corrupted) PNGファイルを読み込んだときにセグメンテーション違反が起きる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/409&#34; target=&#34;_blank&#34;&gt;GitHub #409&lt;/a&gt; I/O拡張の古いI/O v1インタフェースの、戻り値の不正な初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari, Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek氏らに感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのIOS state saverをコピー不可にした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;引用符で囲まれた文字列を読み取るときに、入力ストリームから最初に読んだときのエラーを正しくハンドリングした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;区切り文字ベースの文字列結合である&lt;code&gt;ostream_joiner&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Utilityライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力でのwidthとfillの指定を正しくハンドリングした&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力をstream bufferに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Glen Fernandes氏がこのライブラリのメンテナになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; CI強化と壊れた標準ライブラリへのワークアラウンドを含むメンテナンス作業 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt; trivial loggingで使用されるデフォルトのsinkは、ロギングコアにsinkが登録されていない場合に、各ログ記録のあとに自動的に出力をフラッシュするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core::flush&lt;/code&gt;は、sinkが登録されていない場合に、trivial loggingで使用されるデフォルトsinkに対してフラッシュを実行するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; いくつかのsyslog APIの実装 (例としてglibc) のためにワークアラウンドを追加。これにより、&lt;code&gt;openlog&lt;/code&gt;の呼び出しでアプリケーション識別文字列が保存されないようになる。それらの実装では&lt;code&gt;syslog&lt;/code&gt;呼び出しにおいてすでに解放されたメモリにアクセスする可能性があり、未定義動作を引き起こす&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; 月日を指定したログローテーション (例として&lt;code&gt;rotation_at_time_point(boost::gregorian::greg_day(1))&lt;/code&gt;) で、静かに無視されてなにも起こらなかった問題を修正&lt;/li&gt;
&lt;li&gt;ログレコードがまだ書き込まれておらず、ターゲットファイルのパターンが設定されている場合に、&lt;code&gt;text_file_backend::rotate_file&lt;/code&gt;が例外を送出する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリの様々なコンポーネントを&lt;code&gt;std::allocator_traits&lt;/code&gt;に移植し、C++20アロケータとの互換性を改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; MSYS2 Cygwin環境でのビルド時のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_unique_if&lt;/code&gt;を追加 (Kris Jusiak氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_flatten&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_rotate_left&lt;/code&gt;, &lt;code&gt;mp_rotate_right&lt;/code&gt;を追加 (Duncan Barber氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_compose&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_power_set&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_partial_sum&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_iterate&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer&#34;&gt;アロケータの状態を伝播する&lt;/a&gt;ようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;[[swappable.requirements]]&lt;/code&gt;の標準仕様に従って、&lt;code&gt;KeyFromValue&lt;/code&gt;、&lt;code&gt;Compare&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Pred&lt;/code&gt;の内部オブジェクトをswapする際に、&lt;code&gt;std::swap&lt;/code&gt;とADLによって見つかる&lt;code&gt;swap&lt;/code&gt;で適切に選択するようにした&lt;/li&gt;
&lt;li&gt;一部のコンパイラで警告が起きていた、C++11で非推奨となったデフォルトで暗黙定義される内部的なコピーコンストラクタと代入演算子のいくつかを、提供するようにした&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ClangでコンパイルされたOutcomeベースのコードのパフォーマンスを大幅に改善した。以前の実装では状態ビットフィールドでClangのオプティマイザが混乱し、低品質のコード生成が行われてしまっていた。多くのコード生成の問題とは異なり、&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 Error speed benchmarking&lt;/a&gt;で示された、現実的なコードでの経験的なベンチマークで判明した&lt;/li&gt;
&lt;li&gt;Outcome v2.2.0の将来的な機能として予定していた&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;better_optimisation&lt;/code&gt;ブランチ (より良い最適化)&lt;/a&gt;のうち安全な部分を、Outcome v2.1.3にマージした。これには新たな状態ビットフィールドの実装も含まれる。これはClangのオプティマイザを混乱させないためのものであり、Clang 9はさまざまなユースケースでGCC 9を上回るコードを生成するようになった&lt;/li&gt;
&lt;li&gt;インストールできることをコミットの度にCIでテストするようにした。スタンドアロン版のOutcomeのインストール (たとえば&lt;code&gt;make install&lt;/code&gt;) は理想よりも頻繁に壊れるので、コミットごとにCIでテストするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/214&#34; target=&#34;_blank&#34;&gt;GitHub #214&lt;/a&gt; 新たなコンセプトを実装するコンパイラは&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;の破棄性を早期にチェックしてしまうことが不満だったため、テンプレート制約を削除し、型のインスタンス化シーケンスの後半で実行されるstatic assertにフォールバックするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt; Undefined Behaviour Sanitiserがいくつかの実験的なOutcome機能のユースケースで誤検知してしまうため、ワークアラウンドを入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::poly_collection::for_each&lt;/code&gt;内での潜在的なムーブの警告を修正&lt;/li&gt;
&lt;li&gt;状態を伝播しない非等値なアロケータにおける、アロケータ拡張のムーブ構築とムーブ代入で、要素がムーブではなくコピーされてしまう問題を修正&lt;/li&gt;
&lt;li&gt;GCC 4.8の同梱される古いバージョンのlibstdc++-v3において、アロケータ拡張のムーブ構築が、アロケータ拡張のコピー構築にdecayされないようにした (Clangでも使用できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; PDBの配布についてドキュメントに記載 (情報提供してくれたemptyVoid氏とRoger Orr氏、テストに協力してくれたzlojvavan氏に感謝)&lt;/li&gt;
&lt;li&gt;msvc-9のビルドを修正&lt;/li&gt;
&lt;li&gt;テスト修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt;)、typo修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt;)、CI改善と強化、インスペクトツールの修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception&lt;/code&gt;関数に&lt;code&gt;boost::source_location&lt;/code&gt;オブジェクトをとるオーバーロードを追加&lt;ul&gt;
&lt;li&gt;注 : 例外を無効にして&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用するプロジェクトでは、このオーバーロードが必要になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34; id=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスペクトツールによるCIインテグレーションを含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/74&#34; target=&#34;_blank&#34;&gt;GitHub #74&lt;/a&gt; 未使用のインクルードを削除 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/77&#34; target=&#34;_blank&#34;&gt;GitHub #77&lt;/a&gt; ゼロをヌルポインタ定数として使用した警告を修正 (Bart Siwek氏に感謝)&lt;/li&gt;
&lt;li&gt;typo修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;, &lt;code&gt;boost::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T...&lt;/code&gt;のすべての型がtrivialの場合に&lt;code&gt;variant&amp;lt;T...&amp;gt;&lt;/code&gt;はtrivialとなる&lt;ul&gt;
&lt;li&gt;これにより、レジスタ内の関数に渡したり、そこから返したりするパフォーマンスが改善する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/detail/winapi&lt;/code&gt;内のヘッダを非推奨にした。将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/winapi/issues/81&#34; target=&#34;_blank&#34;&gt;GitHub #81&lt;/a&gt; Boost.WinAPIのヘッダが&lt;code&gt;winerror.h&lt;/code&gt;をインクルードしないようにした。&lt;code&gt;boost/winapi/error_codes.hpp&lt;/code&gt;をインクルードすることでWindowsのエラーコードを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のリリース&lt;a href=&#34;https://github.com/boostorg/build/releases/tag/4.2.0&#34; target=&#34;_blank&#34;&gt;4.2.0&lt;/a&gt;を含める&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/span&gt; : B2の4.0.0以降は、bootstrapを実行するためにC++11コンパイラが必要となる。これはB2自身をビルドするために必要なことであり、Boostをビルドするために使用するわけではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.73.0リリースノート -- 1.73.0リリースノート : IOリリースノートの更新に対応</title>
      <link href="https://boostjp.github.io/document/version/1_73_0.html"/>
      <id>fcc672add0004cb98f9aafb63352171c89b8d4e7:document/version/1_73_0.md</id>
      <updated>2020-04-13T20:13:41+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.73.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_73_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_73_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/nowide/&#34; target=&#34;_blank&#34;&gt;Nowide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Windowsで標準ライブラリと組み合わせて使用するUTF-8 API (作者Artyom Beilis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34;&gt;B2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;をインクルードしないことでコンパイル速度を向上&lt;/li&gt;
&lt;li&gt;CI強化を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20の&lt;code&gt;atomic_ref&lt;/code&gt;を実装。&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats&#34; target=&#34;_blank&#34;&gt;注意書き&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;C++20で導入された&lt;code&gt;atomic_flag::test&lt;/code&gt;操作を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;のアライメント要件を考慮するべきであり、それらが&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより高い要件の場合に違いが生じる&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;atomic&lt;/code&gt;と&lt;code&gt;atomic_ref&lt;/code&gt;で使用される値型&lt;code&gt;T&lt;/code&gt;の要件を表明する静的アサートを追加。これにより、不正な型をアトミックに使用することを禁止する&lt;/li&gt;
&lt;li&gt;内部のロックプールの実装を改善。プールをより大きくし、ロックの選択にはアトミックオブジェクトのアライメントを考慮するようにした。これにより、スレッド競合 (thread contention) の可能性が減る&lt;/li&gt;
&lt;li&gt;8ビットと16ビットの引数に対する&lt;code&gt;bit_test_and_*&lt;/code&gt;操作で生成される不正なx86コードを修正。他のアーキテクチャには影響しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt;のアライメント要件が&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより小さい場合に、&lt;code&gt;compare_exchange_*&lt;/code&gt;操作がアライメントされていないメモリアクセスをしてしまう可能性があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;boost/atomic/atomic.hpp&lt;/code&gt;が&lt;code&gt;boost/atomic/atomic_flag.hpp&lt;/code&gt;と&lt;code&gt;boost/atomic/fences.hpp&lt;/code&gt;をインクルードせず、&lt;code&gt;boost::atomic&lt;/code&gt;クラステンプレートと関連する型の別名のみを定義するようにした。必要な場合はそれぞれのヘッダを明示的にインクルードするか、Boost.Atomicの全てをインクルードする&lt;code&gt;boost/atomic.hpp&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage()&lt;/code&gt;アクセッサと関連する&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage_type&lt;/code&gt;型を非推奨化。代わりに&lt;code&gt;atomic&amp;lt;T&amp;gt;::value()&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;を使用することを推奨する。ユーザーは&lt;code&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/code&gt;を定義することで非推奨の警告を無効にできる。非推奨となった機能は将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;のサポートを削除。このマクロは1.73.0の2年前にリリースされたBoost.Atomicの1.67.0において&lt;code&gt;*_and_test&lt;/code&gt;操作の変更された戻り値への移行を助けるためにあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスアップデートとなる&lt;/li&gt;
&lt;li&gt;Beast dynamic buffers内の入れ小型&lt;code&gt;mutable_data_type&lt;/code&gt;を非推奨化した。代わりに&lt;code&gt;mutable_buffers_type&lt;/code&gt;を使用するか&lt;code&gt;BOOST_BEAST_ALLOW_DEPRECATED&lt;/code&gt;をdefineすること。影響を受ける型は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_adaptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雑多な修正&lt;ul&gt;
&lt;li&gt;ルート証明の例を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;Content-Lengthの解析を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_bytes&lt;/code&gt;のドキュメントを正した&lt;/li&gt;
&lt;li&gt;strandにディスパッチする例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::close&lt;/code&gt;が例外を投げないことを保証&lt;/li&gt;
&lt;li&gt;sha1.hpp内のインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;の警告を修正&lt;/li&gt;
&lt;li&gt;field digestはエンディアン非依存&lt;/li&gt;
&lt;li&gt;README内のリンク切れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;のフラッシュを修正&lt;/li&gt;
&lt;li&gt;いくつかのWin32エラーをネットワークエラーコードに修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer::shrink_to_fit&lt;/code&gt;を&lt;code&gt;noexcept&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;eraseフィールドを修正&lt;/li&gt;
&lt;li&gt;コンパイル設定のドキュメントを修正&lt;/li&gt;
&lt;li&gt;strandを使用する例を正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File:read&lt;/code&gt;でのend-of-fileの動作をドキュメントで明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;がeofの読み込み時に&lt;code&gt;short_read&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;Win32での&lt;code&gt;file_body&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream_buffer&lt;/code&gt;が&lt;code&gt;DynamicBuffer_v1::commit&lt;/code&gt;の事前条件を満たすようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file_body&lt;/code&gt;のFileメンバにアクセッサ関数を追加&lt;/li&gt;
&lt;li&gt;リリースビルドのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;がUTF-8パスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_stdio&lt;/code&gt;がUnicodeパスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo-op&lt;/code&gt;のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;のボディが&lt;code&gt;http::serializer::split&lt;/code&gt;を尊重するようにした&lt;/li&gt;
&lt;li&gt;非MSVCのcmakeを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; IBM Zのfcontextルーチンを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt; mips64/n64のalignを2から3に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; OSプラットフォームとしてMIPS32とMIPS64で異なるABIを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/129&#34; target=&#34;_blank&#34;&gt;GitHub #129&lt;/a&gt; RISC-Vアセンブリのnon-PICを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参照用の&lt;code&gt;boost::polymorphic_downcast&lt;/code&gt;を追加 (Julien Delacroix氏のパッチに感謝)&lt;/li&gt;
&lt;li&gt;重大なドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::dll::smart_library&lt;/code&gt;内のデマングリングを修正してテスト (Ramil Gauss氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;boost::dll::load_mode::type&lt;/code&gt;に対するUBSanを通るようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; MPLへの依存をやめてコンパイル速度を改善 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; WindowsのClangとICC対応を修正し、これらのプラットフォームをCIでサポート (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;CI強化とテスト改善を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/457&#34; target=&#34;_blank&#34;&gt;GitHub #457&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスにムーブコンストラクタとムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/456&#34; target=&#34;_blank&#34;&gt;GitHub #456&lt;/a&gt; &lt;code&gt;any_image_view&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/gil/pull/464&#34; target=&#34;_blank&#34;&gt;GitHub #464&lt;/a&gt; GIL内で使用するテストフレームワークをBoost.TestからBoost.LightweightTestに置き換えた。それにともない、&lt;code&gt;test/extension/io/&lt;/code&gt;サブツリーと&lt;code&gt;Jamfile&lt;/code&gt;関連のターゲットを再構築&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt; Boost.MPLの残っていた使用部分を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; すべてのマクロを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/419&#34; target=&#34;_blank&#34;&gt;GitHub #419&lt;/a&gt; CMakeのすべての設定オプションを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/466&#34; target=&#34;_blank&#34;&gt;GitHub #466&lt;/a&gt; 使用されておらず、およらく未完成の&lt;code&gt;extension/dynamic_image/reduce.hpp&lt;/code&gt;を削除。これは、Lubomir Bourdev, Jaakko Jarviによる論文&lt;a href=&#34;http://lubomir.org/academic/MinimizingCodeBloat.pdf&#34; target=&#34;_blank&#34;&gt;「Efficient Run-Time Dispatching in Generic Programming with Minimal Code Bloat (最小のコード量によるジェネリックプログラミングでの効率的な実行時ディスパッチ)」&lt;/a&gt;で解説される手法を実装する試みだった&lt;/li&gt;
&lt;li&gt;Boost.MPL、Boost.System、Boost.Testへの直接的な依存を削除&lt;/li&gt;
&lt;li&gt;I/O拡張テストのpublicなコンパイル時設定マクロを削除し始めた。例として&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/code&gt;と&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/code&gt;を削除し、代わりにテストターゲットがビルドされると、すべてのテストケースが無条件にビルドされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/433&#34; target=&#34;_blank&#34;&gt;GitHub #433&lt;/a&gt; I/O拡張オブジェクトの破棄中に&lt;code&gt;longjump&lt;/code&gt;の相互作用を回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/429&#34; target=&#34;_blank&#34;&gt;GitHub #429&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスのコンストラクタでの&lt;code&gt;alignment&lt;/code&gt;パラメータにデフォルト値が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/414&#34; target=&#34;_blank&#34;&gt;GitHub #414&lt;/a&gt; 破損した (corrupted) PNGファイルを読み込んだときにセグメンテーション違反が起きる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/409&#34; target=&#34;_blank&#34;&gt;GitHub #409&lt;/a&gt; I/O拡張の古いI/O v1インタフェースの、戻り値の不正な初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari, Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek氏らに感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのIOS state saverをコピー不可にした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;引用符で囲まれた文字列を読み取るときに、入力ストリームから最初に読んだときのエラーを正しくハンドリングした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;区切り文字ベースの文字列結合である&lt;code&gt;ostream_joiner&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Utilityライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力でのwidthとfillの指定を正しくハンドリングした&lt;/li&gt;
&lt;li&gt;引用符で囲まれた出力をstream bufferに直接書き込むよう最適化 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Glen Fernandes氏がこのライブラリのメンテナになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; CI強化と壊れた標準ライブラリへのワークアラウンドを含むメンテナンス作業 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt; trivial loggingで使用されるデフォルトのsinkは、ロギングコアにsinkが登録されていない場合に、各ログ記録のあとに自動的に出力をフラッシュするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core::flush&lt;/code&gt;は、sinkが登録されていない場合に、trivial loggingで使用されるデフォルトsinkに対してフラッシュを実行するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; いくつかのsyslog APIの実装 (例としてglibc) のためにワークアラウンドを追加。これにより、&lt;code&gt;openlog&lt;/code&gt;の呼び出しでアプリケーション識別文字列が保存されないようになる。それらの実装では&lt;code&gt;syslog&lt;/code&gt;呼び出しにおいてすでに解放されたメモリにアクセスする可能性があり、未定義動作を引き起こす&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; 月日を指定したログローテーション (例として&lt;code&gt;rotation_at_time_point(boost::gregorian::greg_day(1))&lt;/code&gt;) で、静かに無視されてなにも起こらなかった問題を修正&lt;/li&gt;
&lt;li&gt;ログレコードがまだ書き込まれておらず、ターゲットファイルのパターンが設定されている場合に、&lt;code&gt;text_file_backend::rotate_file&lt;/code&gt;が例外を送出する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリの様々なコンポーネントを&lt;code&gt;std::allocator_traits&lt;/code&gt;に移植し、C++20アロケータとの互換性を改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; MSYS2 Cygwin環境でのビルド時のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_unique_if&lt;/code&gt;を追加 (Kris Jusiak氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_flatten&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_rotate_left&lt;/code&gt;, &lt;code&gt;mp_rotate_right&lt;/code&gt;を追加 (Duncan Barber氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_compose&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_power_set&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_partial_sum&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_iterate&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer&#34;&gt;アロケータの状態を伝播する&lt;/a&gt;ようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;[[swappable.requirements]]&lt;/code&gt;の標準仕様に従って、&lt;code&gt;KeyFromValue&lt;/code&gt;、&lt;code&gt;Compare&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Pred&lt;/code&gt;の内部オブジェクトをswapする際に、&lt;code&gt;std::swap&lt;/code&gt;とADLによって見つかる&lt;code&gt;swap&lt;/code&gt;で適切に選択するようにした&lt;/li&gt;
&lt;li&gt;一部のコンパイラで警告が起きていた、C++11で非推奨となったデフォルトで暗黙定義される内部的なコピーコンストラクタと代入演算子のいくつかを、提供するようにした&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ClangでコンパイルされたOutcomeベースのコードのパフォーマンスを大幅に改善した。以前の実装では状態ビットフィールドでClangのオプティマイザが混乱し、低品質のコード生成が行われてしまっていた。多くのコード生成の問題とは異なり、&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 Error speed benchmarking&lt;/a&gt;で示された、現実的なコードでの経験的なベンチマークで判明した&lt;/li&gt;
&lt;li&gt;Outcome v2.2.0の将来的な機能として予定していた&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;better_optimisation&lt;/code&gt;ブランチ (より良い最適化)&lt;/a&gt;のうち安全な部分を、Outcome v2.1.3にマージした。これには新たな状態ビットフィールドの実装も含まれる。これはClangのオプティマイザを混乱させないためのものであり、Clang 9はさまざまなユースケースでGCC 9を上回るコードを生成するようになった&lt;/li&gt;
&lt;li&gt;インストールできることをコミットの度にCIでテストするようにした。スタンドアロン版のOutcomeのインストール (たとえば&lt;code&gt;make install&lt;/code&gt;) は理想よりも頻繁に壊れるので、コミットごとにCIでテストするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/214&#34; target=&#34;_blank&#34;&gt;GitHub #214&lt;/a&gt; 新たなコンセプトを実装するコンパイラは&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;の破棄性を早期にチェックしてしまうことが不満だったため、テンプレート制約を削除し、型のインスタンス化シーケンスの後半で実行されるstatic assertにフォールバックするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt; Undefined Behaviour Sanitiserがいくつかの実験的なOutcome機能のユースケースで誤検知してしまうため、ワークアラウンドを入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::poly_collection::for_each&lt;/code&gt;内での潜在的なムーブの警告を修正&lt;/li&gt;
&lt;li&gt;状態を伝播しない非等値なアロケータにおける、アロケータ拡張のムーブ構築とムーブ代入で、要素がムーブではなくコピーされてしまう問題を修正&lt;/li&gt;
&lt;li&gt;GCC 4.8の同梱される古いバージョンのlibstdc++-v3において、アロケータ拡張のムーブ構築が、アロケータ拡張のコピー構築にdecayされないようにした (Clangでも使用できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; PDBの配布についてドキュメントに記載 (情報提供してくれたemptyVoid氏とRoger Orr氏、テストに協力してくれたzlojvavan氏に感謝)&lt;/li&gt;
&lt;li&gt;msvc-9のビルドを修正&lt;/li&gt;
&lt;li&gt;テスト修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt;)、typo修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt;)、CI改善と強化、インスペクトツールの修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception&lt;/code&gt;関数に&lt;code&gt;boost::source_location&lt;/code&gt;オブジェクトをとるオーバーロードを追加&lt;ul&gt;
&lt;li&gt;注 : 例外を無効にして&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用するプロジェクトでは、このオーバーロードが必要になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34; id=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスペクトツールによるCIインテグレーションを含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/74&#34; target=&#34;_blank&#34;&gt;GitHub #74&lt;/a&gt; 未使用のインクルードを削除 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/77&#34; target=&#34;_blank&#34;&gt;GitHub #77&lt;/a&gt; ゼロをヌルポインタ定数として使用した警告を修正 (Bart Siwek氏に感謝)&lt;/li&gt;
&lt;li&gt;typo修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;, &lt;code&gt;boost::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T...&lt;/code&gt;のすべての型がtrivialの場合に&lt;code&gt;variant&amp;lt;T...&amp;gt;&lt;/code&gt;はtrivialとなる&lt;ul&gt;
&lt;li&gt;これにより、レジスタ内の関数に渡したり、そこから返したりするパフォーマンスが改善する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/detail/winapi&lt;/code&gt;内のヘッダを非推奨にした。将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/winapi/issues/81&#34; target=&#34;_blank&#34;&gt;GitHub #81&lt;/a&gt; Boost.WinAPIのヘッダが&lt;code&gt;winerror.h&lt;/code&gt;をインクルードしないようにした。&lt;code&gt;boost/winapi/error_codes.hpp&lt;/code&gt;をインクルードすることでWindowsのエラーコードを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34; id=&#34;b2&#34;&gt;B2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のリリース&lt;a href=&#34;https://github.com/boostorg/build/releases/tag/4.2.0&#34; target=&#34;_blank&#34;&gt;4.2.0&lt;/a&gt;を含める&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/span&gt; : B2の4.0.0以降は、bootstrapを実行するためにC++11コンパイラが必要となる。これはB2自身をビルドするために必要なことであり、Boostをビルドするために使用するわけではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.73.0リリースノート -- 1.73.0リリースノート : Variantの追加リリースノートに対応 (close #445)</title>
      <link href="https://boostjp.github.io/document/version/1_73_0.html"/>
      <id>41e134bdf769b0b648889b1ffad40d5105d55330:document/version/1_73_0.md</id>
      <updated>2020-04-13T20:09:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.73.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_73_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_73_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/nowide/&#34; target=&#34;_blank&#34;&gt;Nowide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Windowsで標準ライブラリと組み合わせて使用するUTF-8 API (作者Artyom Beilis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34;&gt;B2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;をインクルードしないことでコンパイル速度を向上&lt;/li&gt;
&lt;li&gt;CI強化を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20の&lt;code&gt;atomic_ref&lt;/code&gt;を実装。&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats&#34; target=&#34;_blank&#34;&gt;注意書き&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;C++20で導入された&lt;code&gt;atomic_flag::test&lt;/code&gt;操作を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;のアライメント要件を考慮するべきであり、それらが&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより高い要件の場合に違いが生じる&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;atomic&lt;/code&gt;と&lt;code&gt;atomic_ref&lt;/code&gt;で使用される値型&lt;code&gt;T&lt;/code&gt;の要件を表明する静的アサートを追加。これにより、不正な型をアトミックに使用することを禁止する&lt;/li&gt;
&lt;li&gt;内部のロックプールの実装を改善。プールをより大きくし、ロックの選択にはアトミックオブジェクトのアライメントを考慮するようにした。これにより、スレッド競合 (thread contention) の可能性が減る&lt;/li&gt;
&lt;li&gt;8ビットと16ビットの引数に対する&lt;code&gt;bit_test_and_*&lt;/code&gt;操作で生成される不正なx86コードを修正。他のアーキテクチャには影響しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt;のアライメント要件が&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより小さい場合に、&lt;code&gt;compare_exchange_*&lt;/code&gt;操作がアライメントされていないメモリアクセスをしてしまう可能性があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;boost/atomic/atomic.hpp&lt;/code&gt;が&lt;code&gt;boost/atomic/atomic_flag.hpp&lt;/code&gt;と&lt;code&gt;boost/atomic/fences.hpp&lt;/code&gt;をインクルードせず、&lt;code&gt;boost::atomic&lt;/code&gt;クラステンプレートと関連する型の別名のみを定義するようにした。必要な場合はそれぞれのヘッダを明示的にインクルードするか、Boost.Atomicの全てをインクルードする&lt;code&gt;boost/atomic.hpp&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage()&lt;/code&gt;アクセッサと関連する&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage_type&lt;/code&gt;型を非推奨化。代わりに&lt;code&gt;atomic&amp;lt;T&amp;gt;::value()&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;を使用することを推奨する。ユーザーは&lt;code&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/code&gt;を定義することで非推奨の警告を無効にできる。非推奨となった機能は将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;のサポートを削除。このマクロは1.73.0の2年前にリリースされたBoost.Atomicの1.67.0において&lt;code&gt;*_and_test&lt;/code&gt;操作の変更された戻り値への移行を助けるためにあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスアップデートとなる&lt;/li&gt;
&lt;li&gt;Beast dynamic buffers内の入れ小型&lt;code&gt;mutable_data_type&lt;/code&gt;を非推奨化した。代わりに&lt;code&gt;mutable_buffers_type&lt;/code&gt;を使用するか&lt;code&gt;BOOST_BEAST_ALLOW_DEPRECATED&lt;/code&gt;をdefineすること。影響を受ける型は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_adaptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雑多な修正&lt;ul&gt;
&lt;li&gt;ルート証明の例を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;Content-Lengthの解析を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_bytes&lt;/code&gt;のドキュメントを正した&lt;/li&gt;
&lt;li&gt;strandにディスパッチする例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::close&lt;/code&gt;が例外を投げないことを保証&lt;/li&gt;
&lt;li&gt;sha1.hpp内のインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;の警告を修正&lt;/li&gt;
&lt;li&gt;field digestはエンディアン非依存&lt;/li&gt;
&lt;li&gt;README内のリンク切れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;のフラッシュを修正&lt;/li&gt;
&lt;li&gt;いくつかのWin32エラーをネットワークエラーコードに修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer::shrink_to_fit&lt;/code&gt;を&lt;code&gt;noexcept&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;eraseフィールドを修正&lt;/li&gt;
&lt;li&gt;コンパイル設定のドキュメントを修正&lt;/li&gt;
&lt;li&gt;strandを使用する例を正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File:read&lt;/code&gt;でのend-of-fileの動作をドキュメントで明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;がeofの読み込み時に&lt;code&gt;short_read&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;Win32での&lt;code&gt;file_body&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream_buffer&lt;/code&gt;が&lt;code&gt;DynamicBuffer_v1::commit&lt;/code&gt;の事前条件を満たすようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file_body&lt;/code&gt;のFileメンバにアクセッサ関数を追加&lt;/li&gt;
&lt;li&gt;リリースビルドのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;がUTF-8パスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_stdio&lt;/code&gt;がUnicodeパスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo-op&lt;/code&gt;のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;のボディが&lt;code&gt;http::serializer::split&lt;/code&gt;を尊重するようにした&lt;/li&gt;
&lt;li&gt;非MSVCのcmakeを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; IBM Zのfcontextルーチンを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt; mips64/n64のalignを2から3に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; OSプラットフォームとしてMIPS32とMIPS64で異なるABIを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/129&#34; target=&#34;_blank&#34;&gt;GitHub #129&lt;/a&gt; RISC-Vアセンブリのnon-PICを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参照用の&lt;code&gt;boost::polymorphic_downcast&lt;/code&gt;を追加 (Julien Delacroix氏のパッチに感謝)&lt;/li&gt;
&lt;li&gt;重大なドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::dll::smart_library&lt;/code&gt;内のデマングリングを修正してテスト (Ramil Gauss氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;boost::dll::load_mode::type&lt;/code&gt;に対するUBSanを通るようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; MPLへの依存をやめてコンパイル速度を改善 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; WindowsのClangとICC対応を修正し、これらのプラットフォームをCIでサポート (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;CI強化とテスト改善を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/457&#34; target=&#34;_blank&#34;&gt;GitHub #457&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスにムーブコンストラクタとムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/456&#34; target=&#34;_blank&#34;&gt;GitHub #456&lt;/a&gt; &lt;code&gt;any_image_view&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/gil/pull/464&#34; target=&#34;_blank&#34;&gt;GitHub #464&lt;/a&gt; GIL内で使用するテストフレームワークをBoost.TestからBoost.LightweightTestに置き換えた。それにともない、&lt;code&gt;test/extension/io/&lt;/code&gt;サブツリーと&lt;code&gt;Jamfile&lt;/code&gt;関連のターゲットを再構築&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt; Boost.MPLの残っていた使用部分を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; すべてのマクロを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/419&#34; target=&#34;_blank&#34;&gt;GitHub #419&lt;/a&gt; CMakeのすべての設定オプションを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/466&#34; target=&#34;_blank&#34;&gt;GitHub #466&lt;/a&gt; 使用されておらず、およらく未完成の&lt;code&gt;extension/dynamic_image/reduce.hpp&lt;/code&gt;を削除。これは、Lubomir Bourdev, Jaakko Jarviによる論文&lt;a href=&#34;http://lubomir.org/academic/MinimizingCodeBloat.pdf&#34; target=&#34;_blank&#34;&gt;「Efficient Run-Time Dispatching in Generic Programming with Minimal Code Bloat (最小のコード量によるジェネリックプログラミングでの効率的な実行時ディスパッチ)」&lt;/a&gt;で解説される手法を実装する試みだった&lt;/li&gt;
&lt;li&gt;Boost.MPL、Boost.System、Boost.Testへの直接的な依存を削除&lt;/li&gt;
&lt;li&gt;I/O拡張テストのpublicなコンパイル時設定マクロを削除し始めた。例として&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/code&gt;と&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/code&gt;を削除し、代わりにテストターゲットがビルドされると、すべてのテストケースが無条件にビルドされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/433&#34; target=&#34;_blank&#34;&gt;GitHub #433&lt;/a&gt; I/O拡張オブジェクトの破棄中に&lt;code&gt;longjump&lt;/code&gt;の相互作用を回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/429&#34; target=&#34;_blank&#34;&gt;GitHub #429&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスのコンストラクタでの&lt;code&gt;alignment&lt;/code&gt;パラメータにデフォルト値が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/414&#34; target=&#34;_blank&#34;&gt;GitHub #414&lt;/a&gt; 破損した (corrupted) PNGファイルを読み込んだときにセグメンテーション違反が起きる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/409&#34; target=&#34;_blank&#34;&gt;GitHub #409&lt;/a&gt; I/O拡張の古いI/O v1インタフェースの、戻り値の不正な初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari, Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek氏らに感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのIOS state saverをコピー不可にした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;引用符で囲まれた文字列を読み取るときに、入力ストリームから最初に読んだときのエラーを正しくハンドリングした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;区切り文字ベースの文字列結合である&lt;code&gt;ostream_joiner&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Utilityライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動 (Glen Fernandes氏は、string viewの出力を最適化してstream bufferに直接書き込むためにこの機能を実装した)&lt;/li&gt;
&lt;li&gt;Glen Fernandes氏がこのライブラリのメンテナになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; CI強化と壊れた標準ライブラリへのワークアラウンドを含むメンテナンス作業 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt; trivial loggingで使用されるデフォルトのsinkは、ロギングコアにsinkが登録されていない場合に、各ログ記録のあとに自動的に出力をフラッシュするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core::flush&lt;/code&gt;は、sinkが登録されていない場合に、trivial loggingで使用されるデフォルトsinkに対してフラッシュを実行するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; いくつかのsyslog APIの実装 (例としてglibc) のためにワークアラウンドを追加。これにより、&lt;code&gt;openlog&lt;/code&gt;の呼び出しでアプリケーション識別文字列が保存されないようになる。それらの実装では&lt;code&gt;syslog&lt;/code&gt;呼び出しにおいてすでに解放されたメモリにアクセスする可能性があり、未定義動作を引き起こす&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; 月日を指定したログローテーション (例として&lt;code&gt;rotation_at_time_point(boost::gregorian::greg_day(1))&lt;/code&gt;) で、静かに無視されてなにも起こらなかった問題を修正&lt;/li&gt;
&lt;li&gt;ログレコードがまだ書き込まれておらず、ターゲットファイルのパターンが設定されている場合に、&lt;code&gt;text_file_backend::rotate_file&lt;/code&gt;が例外を送出する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリの様々なコンポーネントを&lt;code&gt;std::allocator_traits&lt;/code&gt;に移植し、C++20アロケータとの互換性を改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; MSYS2 Cygwin環境でのビルド時のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_unique_if&lt;/code&gt;を追加 (Kris Jusiak氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_flatten&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_rotate_left&lt;/code&gt;, &lt;code&gt;mp_rotate_right&lt;/code&gt;を追加 (Duncan Barber氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_compose&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_power_set&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_partial_sum&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_iterate&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer&#34;&gt;アロケータの状態を伝播する&lt;/a&gt;ようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;[[swappable.requirements]]&lt;/code&gt;の標準仕様に従って、&lt;code&gt;KeyFromValue&lt;/code&gt;、&lt;code&gt;Compare&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Pred&lt;/code&gt;の内部オブジェクトをswapする際に、&lt;code&gt;std::swap&lt;/code&gt;とADLによって見つかる&lt;code&gt;swap&lt;/code&gt;で適切に選択するようにした&lt;/li&gt;
&lt;li&gt;一部のコンパイラで警告が起きていた、C++11で非推奨となったデフォルトで暗黙定義される内部的なコピーコンストラクタと代入演算子のいくつかを、提供するようにした&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ClangでコンパイルされたOutcomeベースのコードのパフォーマンスを大幅に改善した。以前の実装では状態ビットフィールドでClangのオプティマイザが混乱し、低品質のコード生成が行われてしまっていた。多くのコード生成の問題とは異なり、&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 Error speed benchmarking&lt;/a&gt;で示された、現実的なコードでの経験的なベンチマークで判明した&lt;/li&gt;
&lt;li&gt;Outcome v2.2.0の将来的な機能として予定していた&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;better_optimisation&lt;/code&gt;ブランチ (より良い最適化)&lt;/a&gt;のうち安全な部分を、Outcome v2.1.3にマージした。これには新たな状態ビットフィールドの実装も含まれる。これはClangのオプティマイザを混乱させないためのものであり、Clang 9はさまざまなユースケースでGCC 9を上回るコードを生成するようになった&lt;/li&gt;
&lt;li&gt;インストールできることをコミットの度にCIでテストするようにした。スタンドアロン版のOutcomeのインストール (たとえば&lt;code&gt;make install&lt;/code&gt;) は理想よりも頻繁に壊れるので、コミットごとにCIでテストするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/214&#34; target=&#34;_blank&#34;&gt;GitHub #214&lt;/a&gt; 新たなコンセプトを実装するコンパイラは&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;の破棄性を早期にチェックしてしまうことが不満だったため、テンプレート制約を削除し、型のインスタンス化シーケンスの後半で実行されるstatic assertにフォールバックするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt; Undefined Behaviour Sanitiserがいくつかの実験的なOutcome機能のユースケースで誤検知してしまうため、ワークアラウンドを入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::poly_collection::for_each&lt;/code&gt;内での潜在的なムーブの警告を修正&lt;/li&gt;
&lt;li&gt;状態を伝播しない非等値なアロケータにおける、アロケータ拡張のムーブ構築とムーブ代入で、要素がムーブではなくコピーされてしまう問題を修正&lt;/li&gt;
&lt;li&gt;GCC 4.8の同梱される古いバージョンのlibstdc++-v3において、アロケータ拡張のムーブ構築が、アロケータ拡張のコピー構築にdecayされないようにした (Clangでも使用できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; PDBの配布についてドキュメントに記載 (情報提供してくれたemptyVoid氏とRoger Orr氏、テストに協力してくれたzlojvavan氏に感謝)&lt;/li&gt;
&lt;li&gt;msvc-9のビルドを修正&lt;/li&gt;
&lt;li&gt;テスト修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt;)、typo修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt;)、CI改善と強化、インスペクトツールの修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception&lt;/code&gt;関数に&lt;code&gt;boost::source_location&lt;/code&gt;オブジェクトをとるオーバーロードを追加&lt;ul&gt;
&lt;li&gt;注 : 例外を無効にして&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用するプロジェクトでは、このオーバーロードが必要になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34; id=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスペクトツールによるCIインテグレーションを含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/74&#34; target=&#34;_blank&#34;&gt;GitHub #74&lt;/a&gt; 未使用のインクルードを削除 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/77&#34; target=&#34;_blank&#34;&gt;GitHub #77&lt;/a&gt; ゼロをヌルポインタ定数として使用した警告を修正 (Bart Siwek氏に感謝)&lt;/li&gt;
&lt;li&gt;typo修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;, &lt;code&gt;boost::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T...&lt;/code&gt;のすべての型がtrivialの場合に&lt;code&gt;variant&amp;lt;T...&amp;gt;&lt;/code&gt;はtrivialとなる&lt;ul&gt;
&lt;li&gt;これにより、レジスタ内の関数に渡したり、そこから返したりするパフォーマンスが改善する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/detail/winapi&lt;/code&gt;内のヘッダを非推奨にした。将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/winapi/issues/81&#34; target=&#34;_blank&#34;&gt;GitHub #81&lt;/a&gt; Boost.WinAPIのヘッダが&lt;code&gt;winerror.h&lt;/code&gt;をインクルードしないようにした。&lt;code&gt;boost/winapi/error_codes.hpp&lt;/code&gt;をインクルードすることでWindowsのエラーコードを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34; id=&#34;b2&#34;&gt;B2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のリリース&lt;a href=&#34;https://github.com/boostorg/build/releases/tag/4.2.0&#34; target=&#34;_blank&#34;&gt;4.2.0&lt;/a&gt;を含める&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/span&gt; : B2の4.0.0以降は、bootstrapを実行するためにC++11コンパイラが必要となる。これはB2自身をビルドするために必要なことであり、Boostをビルドするために使用するわけではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.73.0リリースノート -- 1.73.0リリースノート : Utilityを追加 (close #452)</title>
      <link href="https://boostjp.github.io/document/version/1_73_0.html"/>
      <id>aeb0ce99446574d535c1fdd792308abf2357321c:document/version/1_73_0.md</id>
      <updated>2020-04-10T20:08:06+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.73.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_73_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_73_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_73_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/nowide/&#34; target=&#34;_blank&#34;&gt;Nowide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Windowsで標準ライブラリと組み合わせて使用するUTF-8 API (作者Artyom Beilis)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34;&gt;IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34;&gt;B2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#any&#34; id=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;をインクルードしないことでコンパイル速度を向上&lt;/li&gt;
&lt;li&gt;CI強化を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#assert&#34; id=&#34;assert&#34;&gt;Assert&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source_location&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20の&lt;code&gt;atomic_ref&lt;/code&gt;を実装。&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref&#34; target=&#34;_blank&#34;&gt;ドキュメント&lt;/a&gt;と&lt;a href=&#34;https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats&#34; target=&#34;_blank&#34;&gt;注意書き&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;C++20で導入された&lt;code&gt;atomic_flag::test&lt;/code&gt;操作を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;&lt;/code&gt;は&lt;code&gt;T&lt;/code&gt;のアライメント要件を考慮するべきであり、それらが&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより高い要件の場合に違いが生じる&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;atomic&lt;/code&gt;と&lt;code&gt;atomic_ref&lt;/code&gt;で使用される値型&lt;code&gt;T&lt;/code&gt;の要件を表明する静的アサートを追加。これにより、不正な型をアトミックに使用することを禁止する&lt;/li&gt;
&lt;li&gt;内部のロックプールの実装を改善。プールをより大きくし、ロックの選択にはアトミックオブジェクトのアライメントを考慮するようにした。これにより、スレッド競合 (thread contention) の可能性が減る&lt;/li&gt;
&lt;li&gt;8ビットと16ビットの引数に対する&lt;code&gt;bit_test_and_*&lt;/code&gt;操作で生成される不正なx86コードを修正。他のアーキテクチャには影響しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt;のアライメント要件が&lt;code&gt;atomic&lt;/code&gt;の内部ストレージより小さい場合に、&lt;code&gt;compare_exchange_*&lt;/code&gt;操作がアライメントされていないメモリアクセスをしてしまう可能性があったのを修正&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;boost/atomic/atomic.hpp&lt;/code&gt;が&lt;code&gt;boost/atomic/atomic_flag.hpp&lt;/code&gt;と&lt;code&gt;boost/atomic/fences.hpp&lt;/code&gt;をインクルードせず、&lt;code&gt;boost::atomic&lt;/code&gt;クラステンプレートと関連する型の別名のみを定義するようにした。必要な場合はそれぞれのヘッダを明示的にインクルードするか、Boost.Atomicの全てをインクルードする&lt;code&gt;boost/atomic.hpp&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage()&lt;/code&gt;アクセッサと関連する&lt;code&gt;atomic&amp;lt;T&amp;gt;::storage_type&lt;/code&gt;型を非推奨化。代わりに&lt;code&gt;atomic&amp;lt;T&amp;gt;::value()&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;を使用することを推奨する。ユーザーは&lt;code&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/code&gt;を定義することで非推奨の警告を無効にできる。非推奨となった機能は将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/code&gt;のサポートを削除。このマクロは1.73.0の2年前にリリースされたBoost.Atomicの1.67.0において&lt;code&gt;*_and_test&lt;/code&gt;操作の変更された戻り値への移行を助けるためにあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回はメンテナンスアップデートとなる&lt;/li&gt;
&lt;li&gt;Beast dynamic buffers内の入れ小型&lt;code&gt;mutable_data_type&lt;/code&gt;を非推奨化した。代わりに&lt;code&gt;mutable_buffers_type&lt;/code&gt;を使用するか&lt;code&gt;BOOST_BEAST_ALLOW_DEPRECATED&lt;/code&gt;をdefineすること。影響を受ける型は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_adaptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static_buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雑多な修正&lt;ul&gt;
&lt;li&gt;ルート証明の例を更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;Content-Lengthの解析を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_bytes&lt;/code&gt;のドキュメントを正した&lt;/li&gt;
&lt;li&gt;strandにディスパッチする例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::close&lt;/code&gt;が例外を投げないことを保証&lt;/li&gt;
&lt;li&gt;sha1.hpp内のインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;の警告を修正&lt;/li&gt;
&lt;li&gt;field digestはエンディアン非依存&lt;/li&gt;
&lt;li&gt;README内のリンク切れを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream&lt;/code&gt;のフラッシュを修正&lt;/li&gt;
&lt;li&gt;いくつかのWin32エラーをネットワークエラーコードに修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_buffer::shrink_to_fit&lt;/code&gt;を&lt;code&gt;noexcept&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;eraseフィールドを修正&lt;/li&gt;
&lt;li&gt;コンパイル設定のドキュメントを修正&lt;/li&gt;
&lt;li&gt;strandを使用する例を正した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File:read&lt;/code&gt;でのend-of-fileの動作をドキュメントで明確にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_body&lt;/code&gt;がeofの読み込み時に&lt;code&gt;short_read&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;li&gt;Win32での&lt;code&gt;file_body&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostream_buffer&lt;/code&gt;が&lt;code&gt;DynamicBuffer_v1::commit&lt;/code&gt;の事前条件を満たすようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_file_body&lt;/code&gt;のFileメンバにアクセッサ関数を追加&lt;/li&gt;
&lt;li&gt;リリースビルドのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;がUTF-8パスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_stdio&lt;/code&gt;がUnicodeパスをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo-op&lt;/code&gt;のテストを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_win32&lt;/code&gt;のボディが&lt;code&gt;http::serializer::split&lt;/code&gt;を尊重するようにした&lt;/li&gt;
&lt;li&gt;非MSVCのcmakeを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; IBM Zのfcontextルーチンを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt; mips64/n64のalignを2から3に修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; OSプラットフォームとしてMIPS32とMIPS64で異なるABIを使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/pull/129&#34; target=&#34;_blank&#34;&gt;GitHub #129&lt;/a&gt; RISC-Vアセンブリのnon-PICを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参照用の&lt;code&gt;boost::polymorphic_downcast&lt;/code&gt;を追加 (Julien Delacroix氏のパッチに感謝)&lt;/li&gt;
&lt;li&gt;重大なドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#dll&#34; id=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::dll::smart_library&lt;/code&gt;内のデマングリングを修正してテスト (Ramil Gauss氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;boost::dll::load_mode::type&lt;/code&gt;に対するUBSanを通るようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; MPLへの依存をやめてコンパイル速度を改善 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/dll/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; WindowsのClangとICC対応を修正し、これらのプラットフォームをCIでサポート (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;CI強化とテスト改善を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#gil&#34; id=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/457&#34; target=&#34;_blank&#34;&gt;GitHub #457&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスにムーブコンストラクタとムーブ代入演算子を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/456&#34; target=&#34;_blank&#34;&gt;GitHub #456&lt;/a&gt; &lt;code&gt;any_image_view&lt;/code&gt;クラスに&lt;code&gt;size()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/gil/pull/464&#34; target=&#34;_blank&#34;&gt;GitHub #464&lt;/a&gt; GIL内で使用するテストフレームワークをBoost.TestからBoost.LightweightTestに置き換えた。それにともない、&lt;code&gt;test/extension/io/&lt;/code&gt;サブツリーと&lt;code&gt;Jamfile&lt;/code&gt;関連のターゲットを再構築&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/459&#34; target=&#34;_blank&#34;&gt;GitHub #459&lt;/a&gt; Boost.MPLの残っていた使用部分を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; すべてのマクロを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/419&#34; target=&#34;_blank&#34;&gt;GitHub #419&lt;/a&gt; CMakeのすべての設定オプションを&lt;code&gt;BOOST_GIL_&lt;/code&gt;プレフィックスをつけるよう名称変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/466&#34; target=&#34;_blank&#34;&gt;GitHub #466&lt;/a&gt; 使用されておらず、およらく未完成の&lt;code&gt;extension/dynamic_image/reduce.hpp&lt;/code&gt;を削除。これは、Lubomir Bourdev, Jaakko Jarviによる論文&lt;a href=&#34;http://lubomir.org/academic/MinimizingCodeBloat.pdf&#34; target=&#34;_blank&#34;&gt;「Efficient Run-Time Dispatching in Generic Programming with Minimal Code Bloat (最小のコード量によるジェネリックプログラミングでの効率的な実行時ディスパッチ)」&lt;/a&gt;で解説される手法を実装する試みだった&lt;/li&gt;
&lt;li&gt;Boost.MPL、Boost.System、Boost.Testへの直接的な依存を削除&lt;/li&gt;
&lt;li&gt;I/O拡張テストのpublicなコンパイル時設定マクロを削除し始めた。例として&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/code&gt;と&lt;code&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/code&gt;を削除し、代わりにテストターゲットがビルドされると、すべてのテストケースが無条件にビルドされる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/433&#34; target=&#34;_blank&#34;&gt;GitHub #433&lt;/a&gt; I/O拡張オブジェクトの破棄中に&lt;code&gt;longjump&lt;/code&gt;の相互作用を回避&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/429&#34; target=&#34;_blank&#34;&gt;GitHub #429&lt;/a&gt; &lt;code&gt;image&lt;/code&gt;クラスのコンストラクタでの&lt;code&gt;alignment&lt;/code&gt;パラメータにデフォルト値が抜けていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/414&#34; target=&#34;_blank&#34;&gt;GitHub #414&lt;/a&gt; 破損した (corrupted) PNGファイルを読み込んだときにセグメンテーション違反が起きる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/gil/pull/409&#34; target=&#34;_blank&#34;&gt;GitHub #409&lt;/a&gt; I/O拡張の古いI/O v1インタフェースの、戻り値の不正な初期化を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari, Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek氏らに感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#io&#34; id=&#34;io&#34;&gt;IO&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すべてのIOS state saverをコピー不可にした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;引用符で囲まれた文字列を読み取るときに、入力ストリームから最初に読んだときのエラーを正しくハンドリングした (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;区切り文字ベースの文字列結合である&lt;code&gt;ostream_joiner&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;Utilityライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動 (Glen Fernandes氏は、string viewの出力を最適化してstream bufferに直接書き込むためにこの機能を実装した)&lt;/li&gt;
&lt;li&gt;Glen Fernandes氏がこのライブラリのメンテナになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#lexical-cast&#34; id=&#34;lexical-cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/31&#34; target=&#34;_blank&#34;&gt;GitHub #31&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; CI強化と壊れた標準ライブラリへのワークアラウンドを含むメンテナンス作業 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/103&#34; target=&#34;_blank&#34;&gt;GitHub #103&lt;/a&gt; trivial loggingで使用されるデフォルトのsinkは、ロギングコアにsinkが登録されていない場合に、各ログ記録のあとに自動的に出力をフラッシュするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core::flush&lt;/code&gt;は、sinkが登録されていない場合に、trivial loggingで使用されるデフォルトsinkに対してフラッシュを実行するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; いくつかのsyslog APIの実装 (例としてglibc) のためにワークアラウンドを追加。これにより、&lt;code&gt;openlog&lt;/code&gt;の呼び出しでアプリケーション識別文字列が保存されないようになる。それらの実装では&lt;code&gt;syslog&lt;/code&gt;呼び出しにおいてすでに解放されたメモリにアクセスする可能性があり、未定義動作を引き起こす&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/98&#34; target=&#34;_blank&#34;&gt;GitHub #98&lt;/a&gt; 月日を指定したログローテーション (例として&lt;code&gt;rotation_at_time_point(boost::gregorian::greg_day(1))&lt;/code&gt;) で、静かに無視されてなにも起こらなかった問題を修正&lt;/li&gt;
&lt;li&gt;ログレコードがまだ書き込まれておらず、ターゲットファイルのパターンが設定されている場合に、&lt;code&gt;text_file_backend::rotate_file&lt;/code&gt;が例外を送出する可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリの様々なコンポーネントを&lt;code&gt;std::allocator_traits&lt;/code&gt;に移植し、C++20アロケータとの互換性を改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/log/issues/102&#34; target=&#34;_blank&#34;&gt;GitHub #102&lt;/a&gt; MSYS2 Cygwin環境でのビルド時のコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mp_unique_if&lt;/code&gt;を追加 (Kris Jusiak氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_flatten&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_rotate_left&lt;/code&gt;, &lt;code&gt;mp_rotate_right&lt;/code&gt;を追加 (Duncan Barber氏による貢献)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_compose&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_power_set&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_partial_sum&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp_iterate&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を&lt;a href=&#34;https://boostjp.github.io/document/version/ttps:/en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer&#34;&gt;アロケータの状態を伝播する&lt;/a&gt;ようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;[[swappable.requirements]]&lt;/code&gt;の標準仕様に従って、&lt;code&gt;KeyFromValue&lt;/code&gt;、&lt;code&gt;Compare&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Pred&lt;/code&gt;の内部オブジェクトをswapする際に、&lt;code&gt;std::swap&lt;/code&gt;とADLによって見つかる&lt;code&gt;swap&lt;/code&gt;で適切に選択するようにした&lt;/li&gt;
&lt;li&gt;一部のコンパイラで警告が起きていた、C++11で非推奨となったデフォルトで暗黙定義される内部的なコピーコンストラクタと代入演算子のいくつかを、提供するようにした&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;ClangでコンパイルされたOutcomeベースのコードのパフォーマンスを大幅に改善した。以前の実装では状態ビットフィールドでClangのオプティマイザが混乱し、低品質のコード生成が行われてしまっていた。多くのコード生成の問題とは異なり、&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 Error speed benchmarking&lt;/a&gt;で示された、現実的なコードでの経験的なベンチマークで判明した&lt;/li&gt;
&lt;li&gt;Outcome v2.2.0の将来的な機能として予定していた&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;better_optimisation&lt;/code&gt;ブランチ (より良い最適化)&lt;/a&gt;のうち安全な部分を、Outcome v2.1.3にマージした。これには新たな状態ビットフィールドの実装も含まれる。これはClangのオプティマイザを混乱させないためのものであり、Clang 9はさまざまなユースケースでGCC 9を上回るコードを生成するようになった&lt;/li&gt;
&lt;li&gt;インストールできることをコミットの度にCIでテストするようにした。スタンドアロン版のOutcomeのインストール (たとえば&lt;code&gt;make install&lt;/code&gt;) は理想よりも頻繁に壊れるので、コミットごとにCIでテストするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/214&#34; target=&#34;_blank&#34;&gt;GitHub #214&lt;/a&gt; 新たなコンセプトを実装するコンパイラは&lt;code&gt;T&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;の破棄性を早期にチェックしてしまうことが不満だったため、テンプレート制約を削除し、型のインスタンス化シーケンスの後半で実行されるstatic assertにフォールバックするようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/220&#34; target=&#34;_blank&#34;&gt;GitHub #220&lt;/a&gt; Undefined Behaviour Sanitiserがいくつかの実験的なOutcome機能のユースケースで誤検知してしまうため、ワークアラウンドを入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::poly_collection::for_each&lt;/code&gt;内での潜在的なムーブの警告を修正&lt;/li&gt;
&lt;li&gt;状態を伝播しない非等値なアロケータにおける、アロケータ拡張のムーブ構築とムーブ代入で、要素がムーブではなくコピーされてしまう問題を修正&lt;/li&gt;
&lt;li&gt;GCC 4.8の同梱される古いバージョンのlibstdc++-v3において、アロケータ拡張のムーブ構築が、アロケータ拡張のコピー構築にdecayされないようにした (Clangでも使用できる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/55&#34; target=&#34;_blank&#34;&gt;GitHub #55&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/47&#34; target=&#34;_blank&#34;&gt;GitHub #47&lt;/a&gt; PDBの配布についてドキュメントに記載 (情報提供してくれたemptyVoid氏とRoger Orr氏、テストに協力してくれたzlojvavan氏に感謝)&lt;/li&gt;
&lt;li&gt;msvc-9のビルドを修正&lt;/li&gt;
&lt;li&gt;テスト修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/86&#34; target=&#34;_blank&#34;&gt;GitHub #86&lt;/a&gt;)、typo修正 (&lt;a href=&#34;https://github.com/boostorg/stacktrace/pull/84&#34; target=&#34;_blank&#34;&gt;GitHub #84&lt;/a&gt;)、CI改善と強化、インスペクトツールの修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#throw-exception&#34; id=&#34;throw-exception&#34;&gt;ThrowException&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw_exception&lt;/code&gt;関数に&lt;code&gt;boost::source_location&lt;/code&gt;オブジェクトをとるオーバーロードを追加&lt;ul&gt;
&lt;li&gt;注 : 例外を無効にして&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用するプロジェクトでは、このオーバーロードが必要になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#type-index&#34; id=&#34;type-index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスペクトツールによるCIインテグレーションを含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#utility&#34; id=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリの&lt;code&gt;ostream_string&lt;/code&gt;を、&lt;code&gt;ostream_put&lt;/code&gt;としてIOライブラリに移動&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/variant/pull/74&#34; target=&#34;_blank&#34;&gt;GitHub #74&lt;/a&gt; 未使用のインクルードを削除 (Nikita Kniazev氏に感謝)&lt;/li&gt;
&lt;li&gt;typo修正を含むメンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt;, &lt;code&gt;boost::hash&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T...&lt;/code&gt;のすべての型がtrivialの場合に&lt;code&gt;variant&amp;lt;T...&amp;gt;&lt;/code&gt;はtrivialとなる&lt;ul&gt;
&lt;li&gt;これにより、レジスタ内の関数に渡したり、そこから返したりするパフォーマンスが改善する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/winapi&#34; id=&#34;winapi&#34;&gt;WinAPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/detail/winapi&lt;/code&gt;内のヘッダを非推奨にした。将来のリリースで削除される&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/winapi/issues/81&#34; target=&#34;_blank&#34;&gt;GitHub #81&lt;/a&gt; Boost.WinAPIのヘッダが&lt;code&gt;winerror.h&lt;/code&gt;をインクルードしないようにした。&lt;code&gt;boost/winapi/error_codes.hpp&lt;/code&gt;をインクルードすることでWindowsのエラーコードを取得できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_73_0.html#b2&#34; id=&#34;b2&#34;&gt;B2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2のリリース&lt;a href=&#34;https://github.com/boostorg/build/releases/tag/4.2.0&#34; target=&#34;_blank&#34;&gt;4.2.0&lt;/a&gt;を含める&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;警告&lt;/strong&gt;&lt;/span&gt; : B2の4.0.0以降は、bootstrapを実行するためにC++11コンパイラが必要となる。これはB2自身をビルドするために必要なことであり、Boostをビルドするために使用するわけではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>