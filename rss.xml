<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-11-14T14:04:23.341957</updated>
  <id>26a3f030-44ce-43ea-b306-88db96f49696</id>

  
    <entry>
      <title>Boost 1.66.0リリースノート -- 1.66.0リリースノート : Utilityを追加 (close #195)</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>339098a8a6ad8cfd2a180dac989295239f06405c:document/version/1_66_0.md</id>
      <updated>2017-11-14T16:00:15+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/next_prior.hpp&lt;/code&gt;をBoost.Iteratorモジュールに移動。ユーザーコードは変更の必要なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リリースノート -- Boost 1.66.0のリリースノートページを用意した。とりあえず新ライブラリは追加しておいた</title>
      <link href="https://boostjp.github.io/document/version.html"/>
      <id>dfb5754a6561c3df73aff068411672abb65b225b:document/version.md</id>
      <updated>2017-11-14T10:20:18+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;以下は、Boostの各バージョンのリリースノートを翻訳、情報補完したドキュメントです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/template.html&#34;&gt;雛形ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html&#34;&gt;1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html&#34;&gt;1.65.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_0.html&#34;&gt;1.65.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html&#34;&gt;1.64.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_63_0.html&#34;&gt;1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_62_0.html&#34;&gt;1.62.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_61_0.html&#34;&gt;1.61.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_60_0.html&#34;&gt;1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_59_0.html&#34;&gt;1.59.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_58_0.html&#34;&gt;1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_57_0.html&#34;&gt;1.57.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_56_0.html&#34;&gt;1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_55_0.html&#34;&gt;1.55.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_54_0.html&#34;&gt;1.54.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_53_0.html&#34;&gt;1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_52_0.html&#34;&gt;1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_51_0.html&#34;&gt;1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_50_0.html&#34;&gt;1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_49_0.html&#34;&gt;1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_48_0.html&#34;&gt;1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_47_0.html&#34;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_1.html&#34;&gt;1.46.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_46_0.html&#34;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_45_0.html&#34;&gt;1.45.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.66.0リリースノート -- Boost 1.66.0のリリースノートページを用意した。とりあえず新ライブラリは追加しておいた</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>dfb5754a6561c3df73aff068411672abb65b225b:document/version/1_66_0.md</id>
      <updated>2017-11-14T10:20:18+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#one&#34;&gt;One&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#two&#34;&gt;Two&lt;/a&gt; # example&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#three&#34;&gt;Three&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#one&#34; name=&#34;One&#34;&gt;One&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;blahblahblah&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#two&#34; name=&#34;Two&#34;&gt;Two&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;something&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt; ticket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/XXX/pull/XX&#34; target=&#34;_blank&#34;&gt;pull request XX&lt;/a&gt; GitHub PR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#three&#34; name=&#34;Three&#34;&gt;Three&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: &lt;code&gt;boost::xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trailing &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/xxxx&#34; target=&#34;_blank&#34;&gt;#xxxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>多倍長浮動小数点数 -- 多倍長浮動小数点数 : 数学関数へのリンクを追加</title>
      <link href="https://boostjp.github.io/tips/multiprec-float.html"/>
      <id>3bb31b211a82dd2b673e2466a2a4f9ba60248fe3:tips/multiprec-float.md</id>
      <updated>2017-10-27T11:47:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;多倍長浮動小数点数&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;多倍長浮動小数点数を使用するには、&lt;a href=&#34;http://www.boost.org/libs/multiprecision/&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Multiprecisionから提供される多倍長浮動小数点数の、基本的な使い方を示す。&lt;/p&gt;
&lt;p&gt;以下は、任意精度の符号あり多倍長整数である&lt;code&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;boost::multiprecision::cpp_dec_float_100&lt;/a&gt;&lt;/code&gt;クラス型を使用して、2の平方根を求めるプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 仮数部100ビット、指数部32ビットの浮動小数点数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_dec_float_100 x = 2.0f;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 平方根を求める&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 出力桁数を設定して出力&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、以下の演算をサポートする。ビット演算は使用できない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a + b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a += b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a - b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a -= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a * b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a *= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a / b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a /= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をプラスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をマイナスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a++;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;++a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a--;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;--a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a == b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a != b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より小さいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以下かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より大きいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以上かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#variation&#34; name=&#34;variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下に、Boost.Multiprecisionから提供される多倍長整数の種類を示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision独自実装の多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_dec_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_dec_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部1,000ビットを持つ浮動小数点数の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cpp_dec_float_1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 仮数部1,000ビット、指数部64ビットを持つ浮動小数点数の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cpp_dec_float_1000_64exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;独自実装の多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;基数は10。基数2ベースとは異なる振る舞いが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infinity&lt;/code&gt;と&lt;code&gt;NaN&lt;/code&gt;をサポートする。オーバーフローやゼロ割り時には、組み込みの浮動小数点数型と同じ振る舞いをする。&lt;/li&gt;
&lt;li&gt;全ての操作は、常に切り捨てを行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/gmp_float.html&#34; target=&#34;_blank&#34;&gt;GMPバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が500ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_1000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が1,000ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が任意ビット使用可能な浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部が10,000ビットの浮動小数点数型の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmp_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpf_dec_float_10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gmp_float&lt;/code&gt;のテンプレート引数として0を指定すると、任意長の仮数部が表現可能になる。&lt;/p&gt;
&lt;p&gt;GMP多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;GMPのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;GMPは&lt;code&gt;infinity&lt;/code&gt;や&lt;code&gt;NaN&lt;/code&gt;といった概念を持たないため、可能な限りオーバーフローやゼロ割りは避けること。オーバーフロー時またはゼロ割り時には&lt;code&gt;std::overflow_error&lt;/code&gt;例外が送出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/mpfr.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;動的メモリ確保を行う多倍長浮動小数点数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/mpfr_float.html&#34; target=&#34;_blank&#34;&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が500ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_1000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が1,000ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が任意ビット使用可能な浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;動的メモリ確保を行わない多倍長浮動小数点数&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の、動的メモリ確保を行う固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部を10,000ビットの浮動小数点数型の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mpfr_float_backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpf_dec_float_10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mpfr_float_backend&lt;/code&gt;の第2テンプレート引数として&lt;code&gt;boost::multiprecision::allocate_stack&lt;/code&gt;列挙値を指定することで、動的メモリ確保を行わない多倍長浮動小数点数型の定義ができる。&lt;/p&gt;
&lt;p&gt;MPFR多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は&lt;code&gt;NaN&lt;/code&gt;である&lt;/li&gt;
&lt;li&gt;全ての操作は、最近接値への丸めを使用する&lt;/li&gt;
&lt;li&gt;GMPとMPFRのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;0で割ると&lt;code&gt;infinity&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#from-string&#34; name=&#34;from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列から多倍長浮動小数点数に変換するには、&lt;code&gt;explicit&lt;/code&gt;な変換コンストラクタ、もしくは&lt;code&gt;assign()&lt;/code&gt;メンバ関数を使用する。
文字列は、&lt;code&gt;char&lt;/code&gt;配列および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34; target=&#34;_blank&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;を受け取ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタで文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// char配列から変換&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// std::stringから変換&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;assign()&lt;/code&gt;メンバ関数で文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;変換できない文字列が渡された場合は、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdexcept.html&#34; target=&#34;_blank&#34;&gt;std::runtime_error&lt;/a&gt;&lt;/code&gt;例外が送出される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#to-string&#34; name=&#34;to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列への変換には、&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。この関数は、&lt;code&gt;std::string&lt;/code&gt;型で多倍長浮動小数点数の文字列表現を返す。&lt;/p&gt;
&lt;p&gt;デフォルトでは固定小数点表記の文字列が返されるが、以下の引数を設定することで、精度と表記、その他出力方法を選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数： 出力する精度。0を指定した場合、できるだけ多くの桁数を出力する。&lt;/li&gt;
&lt;li&gt;第2引数： 出力フラグ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 固定小数点表記(デフォルト)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 固定小数点表記(明示的に指定)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fixed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 科学的表記&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scientific&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.140000000000000124344978758017532527446746826171875
3.1400000000000001243449787580175325274467468261718750000000000000000000000
3.1400000000000001243449787580175325274467468261718750000000000000000000000e+00
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34; name=&#34;convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、異なる精度間での変換をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小さい精度から大きい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;や&lt;code&gt;double&lt;/code&gt;型といった組み込みの浮動小数点数型から、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;や&lt;code&gt;cpp_dec_float_100&lt;/code&gt;といった多倍長浮動小数点数への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;から&lt;code&gt;cpp_dec_float_100&lt;/code&gt;へ、といったより大きい精度への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// floatからcpp_dec_float_50への暗黙変換&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// cpp_dec_float_50からcpp_dec_float_100への暗黙変換&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大きい精度から小さい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小さい精度への変換は、データが失われる可能性があるため、暗黙の型変換はサポートしない。&lt;/p&gt;
&lt;p&gt;明示的な型変換を使用する場合のみ変換可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//  cpp_dec_float_50 f50 = f100; // コンパイルエラー！変換できない&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#math-functions&#34; name=&#34;math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;標準関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;標準ライブラリで定義される以下の関数は、Boost.Multiprecisionの多倍長浮動小数点数でも使用できる。&lt;/p&gt;
&lt;p&gt;これらの関数は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T abs(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/fabs.html&#34; target=&#34;_blank&#34;&gt;T fabs(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34; target=&#34;_blank&#34;&gt;T sqrt(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/floor.html&#34; target=&#34;_blank&#34;&gt;T floor(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;床関数（引数より大きくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/ceil.html&#34; target=&#34;_blank&#34;&gt;T ceil(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;天井関数（引数より小さくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/trunc.html&#34; target=&#34;_blank&#34;&gt;T trunc(T x);&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T itrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T ltrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lltrunc(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ方向への丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/round.html&#34; target=&#34;_blank&#34;&gt;T round(T x);&lt;/a&gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lround(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T llround(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四捨五入による丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34; target=&#34;_blank&#34;&gt;T exp(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする指数関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34; target=&#34;_blank&#34;&gt;T log(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする自然対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34; target=&#34;_blank&#34;&gt;T log10(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10 を底とする常用対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34; target=&#34;_blank&#34;&gt;T cos(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;余弦関数（コサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34; target=&#34;_blank&#34;&gt;T sin(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正弦関数（サイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34; target=&#34;_blank&#34;&gt;T tan(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正接関数（タンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34; target=&#34;_blank&#34;&gt;T acos(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆余弦関数（アークコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34; target=&#34;_blank&#34;&gt;T asin(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆正弦関数（アークサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34; target=&#34;_blank&#34;&gt;T atan(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34; target=&#34;_blank&#34;&gt;T cosh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線余弦関数（ハイパボリックコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34; target=&#34;_blank&#34;&gt;T sinh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線正弦関数（ハイパボリックサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34; target=&#34;_blank&#34;&gt;T tanh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線正接関数（ハイパボリックタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/ldexp.html&#34; target=&#34;_blank&#34;&gt;T ldexp(T x, int);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 の冪乗との乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/frexp.html&#34; target=&#34;_blank&#34;&gt;T frexp(T x, int*);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部と 2 の冪乗への分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34; target=&#34;_blank&#34;&gt;T pow(T x, T y);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/fmod.html&#34; target=&#34;_blank&#34;&gt;T fmod(T x, T y);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34; target=&#34;_blank&#34;&gt;T atan2(T x, T y);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対辺と隣辺からの逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>多倍長浮動小数点数 -- 多倍長浮動小数点数 : 仮数部が桁数と書いていたが、ビット数の間違い</title>
      <link href="https://boostjp.github.io/tips/multiprec-float.html"/>
      <id>cabf03ab2448d1be46bebf087400c658f82ad8a3:tips/multiprec-float.md</id>
      <updated>2017-10-27T11:44:45+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;多倍長浮動小数点数&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;多倍長浮動小数点数を使用するには、&lt;a href=&#34;http://www.boost.org/libs/multiprecision/&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#basic-usage&#34; name=&#34;basic-usage&#34;&gt;基本的な使い方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ここでは、Boost.Multiprecisionから提供される多倍長浮動小数点数の、基本的な使い方を示す。&lt;/p&gt;
&lt;p&gt;以下は、任意精度の符号あり多倍長整数である&lt;code&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;boost::multiprecision::cpp_dec_float_100&lt;/a&gt;&lt;/code&gt;クラス型を使用して、2の平方根を求めるプログラムである。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 仮数部100ビット、指数部32ビットの浮動小数点数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;cpp_dec_float_100 x = 2.0f;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 平方根を求める&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 出力桁数を設定して出力&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decltype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、以下の演算をサポートする。ビット演算は使用できない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a + b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a += b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a - b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a -= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a * b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a *= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a / b;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;a /= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をプラスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号をマイナスにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a++;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;++a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a--;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;--a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a == b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a != b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より小さいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以下かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;より大きいかの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;= b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;が&lt;code&gt;b&lt;/code&gt;以上かの判定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#variation&#34; name=&#34;variation&#34;&gt;多倍長浮動小数点数の種類&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下に、Boost.Multiprecisionから提供される多倍長整数の種類を示す。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_dec_float.html&#34; target=&#34;_blank&#34;&gt;Boost Multiprecision独自実装の多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_dec_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cpp_dec_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部1,000ビットを持つ浮動小数点数の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cpp_dec_float_1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 仮数部1,000ビット、指数部64ビットを持つ浮動小数点数の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cpp_dec_float_1000_64exp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;独自実装の多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;基数は10。基数2ベースとは異なる振る舞いが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infinity&lt;/code&gt;と&lt;code&gt;NaN&lt;/code&gt;をサポートする。オーバーフローやゼロ割り時には、組み込みの浮動小数点数型と同じ振る舞いをする。&lt;/li&gt;
&lt;li&gt;全ての操作は、常に切り捨てを行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/gmp_float.html&#34; target=&#34;_blank&#34;&gt;GMPバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/gmp.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が500ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float_1000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が1,000ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpf_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が任意ビット使用可能な浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部が10,000ビットの浮動小数点数型の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gmp_float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpf_dec_float_10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gmp_float&lt;/code&gt;のテンプレート引数として0を指定すると、任意長の仮数部が表現可能になる。&lt;/p&gt;
&lt;p&gt;GMP多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は0である&lt;/li&gt;
&lt;li&gt;GMPのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;GMPは&lt;code&gt;infinity&lt;/code&gt;や&lt;code&gt;NaN&lt;/code&gt;といった概念を持たないため、可能な限りオーバーフローやゼロ割りは避けること。オーバーフロー時またはゼロ割り時には&lt;code&gt;std::overflow_error&lt;/code&gt;例外が送出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/mpfr.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;動的メモリ確保を行う多倍長浮動小数点数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/mpfr_float.html&#34; target=&#34;_blank&#34;&gt;MPFRバックエンドの多倍長浮動小数点数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が500ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float_1000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が1,000ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mpfr_float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が任意ビット使用可能な浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;動的メモリ確保を行わない多倍長浮動小数点数&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_50&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が50ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_mpfr_float_100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部が100ビットの浮動小数点数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下は、ユーザー定義の、動的メモリ確保を行う固定精度浮動小数点数型を定義する例である：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 仮数部を10,000ビットの浮動小数点数型の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mpfr_float_backend&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mpf_dec_float_10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mpfr_float_backend&lt;/code&gt;の第2テンプレート引数として&lt;code&gt;boost::multiprecision::allocate_stack&lt;/code&gt;列挙値を指定することで、動的メモリ確保を行わない多倍長浮動小数点数型の定義ができる。&lt;/p&gt;
&lt;p&gt;MPFR多倍長浮動小数点数の特徴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デフォルト値は&lt;code&gt;NaN&lt;/code&gt;である&lt;/li&gt;
&lt;li&gt;全ての操作は、最近接値への丸めを使用する&lt;/li&gt;
&lt;li&gt;GMPとMPFRのグローバル設定を変更しない&lt;/li&gt;
&lt;li&gt;0で割ると&lt;code&gt;infinity&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#from-string&#34; name=&#34;from-string&#34;&gt;文字列からの変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列から多倍長浮動小数点数に変換するには、&lt;code&gt;explicit&lt;/code&gt;な変換コンストラクタ、もしくは&lt;code&gt;assign()&lt;/code&gt;メンバ関数を使用する。
文字列は、&lt;code&gt;char&lt;/code&gt;配列および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34; target=&#34;_blank&#34;&gt;std::string&lt;/a&gt;&lt;/code&gt;を受け取ることができる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンストラクタで文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// char配列から変換&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// std::stringから変換&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;assign()&lt;/code&gt;メンバ関数で文字列から変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.14
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;変換できない文字列が渡された場合は、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdexcept.html&#34; target=&#34;_blank&#34;&gt;std::runtime_error&lt;/a&gt;&lt;/code&gt;例外が送出される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#to-string&#34; name=&#34;to-string&#34;&gt;文字列への変換&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文字列への変換には、&lt;code&gt;str()&lt;/code&gt;メンバ関数を使用する。この関数は、&lt;code&gt;std::string&lt;/code&gt;型で多倍長浮動小数点数の文字列表現を返す。&lt;/p&gt;
&lt;p&gt;デフォルトでは固定小数点表記の文字列が返されるが、以下の引数を設定することで、精度と表記、その他出力方法を選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1引数： 出力する精度。0を指定した場合、できるだけ多くの桁数を出力する。&lt;/li&gt;
&lt;li&gt;第2引数： 出力フラグ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 固定小数点表記(デフォルト)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 固定小数点表記(明示的に指定)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fixed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 科学的表記&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ios_base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scientific&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3.140000000000000124344978758017532527446746826171875
3.1400000000000001243449787580175325274467468261718750000000000000000000000
3.1400000000000001243449787580175325274467468261718750000000000000000000000e+00
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#convert-precision&#34; name=&#34;convert-precision&#34;&gt;異なる精度間で型変換する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Multiprecisionの多倍長浮動小数点数は、異なる精度間での変換をサポートしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小さい精度から大きい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;や&lt;code&gt;double&lt;/code&gt;型といった組み込みの浮動小数点数型から、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;や&lt;code&gt;cpp_dec_float_100&lt;/code&gt;といった多倍長浮動小数点数への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;から&lt;code&gt;cpp_dec_float_100&lt;/code&gt;へ、といったより大きい精度への暗黙変換が可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// floatからcpp_dec_float_50への暗黙変換&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// cpp_dec_float_50からcpp_dec_float_100への暗黙変換&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大きい精度から小さい精度への変換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小さい精度への変換は、データが失われる可能性があるため、暗黙の型変換はサポートしない。&lt;/p&gt;
&lt;p&gt;明示的な型変換を使用する場合のみ変換可能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/multiprecision/cpp_dec_float.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;multiprecision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//  cpp_dec_float_50 f50 = f100; // コンパイルエラー！変換できない&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_dec_float_50&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/tips/multiprec-float.html#math-functions&#34; name=&#34;math-functions&#34;&gt;サポートされている数学関数一覧&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;標準関数サポート&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;標準ライブラリで定義される以下の関数は、Boost.Multiprecisionの多倍長浮動小数点数でも使用できる。&lt;/p&gt;
&lt;p&gt;これらの関数は、&lt;code&gt;boost::multiprecision&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T abs(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/fabs.html&#34; target=&#34;_blank&#34;&gt;T fabs(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;絶対値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34; target=&#34;_blank&#34;&gt;T sqrt(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;平方根&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T floor(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;床関数（引数より大きくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ceil(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;天井関数（引数より小さくない最近傍の整数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T trunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T itrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T ltrunc(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lltrunc(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ方向への丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T round(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T lround(T x);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;T llround(T x);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四捨五入による丸め&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34; target=&#34;_blank&#34;&gt;T exp(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする指数関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34; target=&#34;_blank&#34;&gt;T log(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;e (ネイピア数) を底とする自然対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34; target=&#34;_blank&#34;&gt;T log10(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10 を底とする常用対数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34; target=&#34;_blank&#34;&gt;T cos(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;余弦関数（コサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34; target=&#34;_blank&#34;&gt;T sin(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正弦関数（サイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34; target=&#34;_blank&#34;&gt;T tan(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正接関数（タンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34; target=&#34;_blank&#34;&gt;T acos(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆余弦関数（アークコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34; target=&#34;_blank&#34;&gt;T asin(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆正弦関数（アークサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34; target=&#34;_blank&#34;&gt;T atan(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34; target=&#34;_blank&#34;&gt;T cosh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線余弦関数（ハイパボリックコサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34; target=&#34;_blank&#34;&gt;T sinh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線正弦関数（ハイパボリックサイン）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34; target=&#34;_blank&#34;&gt;T tanh(T x);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双曲線正接関数（ハイパボリックタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T ldexp(T x, int);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 の冪乗との乗算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T frexp(T x, int*);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仮数部と 2 の冪乗への分解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34; target=&#34;_blank&#34;&gt;T pow(T x, T y);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;冪乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T fmod(T x, T y);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点剰余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34; target=&#34;_blank&#34;&gt;T atan2(T x, T y);&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対辺と隣辺からの逆正接関数（アークタンジェント）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;documented boost version is 1.53.0&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.65.1リリースノート -- 1.65.1リリースノート : 1.65.1での修正内容をまとめた</title>
      <link href="https://boostjp.github.io/document/version/1_65_1.html"/>
      <id>f0232e1a14dc30932d6b0cdbd165f9cc02ac18ad:document/version/1_65_1.md</id>
      <updated>2017-09-07T16:32:53+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.65.1リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_65_1.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_65_1.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_65_1.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_65_1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.65.1での修正&lt;/h2&gt;
&lt;h3&gt;Config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CUDAのバージョンマクロを変更&lt;/li&gt;
&lt;li&gt;MSVCの判明している最新バージョンを更新&lt;/li&gt;
&lt;li&gt;MSVC 14.11は構造化束縛をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resume_with&lt;/code&gt;によって実行された関数から継続が返るよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fiber&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resume_with&lt;/code&gt;によって実行された関数から継続が返るよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Smart Pointers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++のバージョンチェックを修正&lt;/li&gt;
&lt;li&gt;ホストコンパイラClangによるNVCCでのコンパイルを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stacktrace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MinGWで空のバックトレースが生成されていた問題を修正&lt;/li&gt;
&lt;li&gt;インストールシステムで動作するように、プリプロセッサファイルの拡張子を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_GNU_SOURCE&lt;/code&gt;を定義しないが&lt;code&gt;_Unwind_Backtrace&lt;/code&gt;関数は持っているFreeBSDやその他OSをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thread&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/130&#34; target=&#34;_blank&#34;&gt;GitHub #130&lt;/a&gt; Windows環境での&lt;code&gt;condition_variable&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/poly_collection&#34; target=&#34;_blank&#34;&gt;PolyCollection&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Joaquín M López Muñoz氏による、多相オブジェクトに対して高速に動作するコンテナのライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/stacktrace&#34; target=&#34;_blank&#34;&gt;Stacktrace&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Antony Polukhin氏による、バックトレースの収集、コピー、表示をするライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#type_index&#34;&gt;Type Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#typeof&#34;&gt;Typeof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13121&#34; target=&#34;_blank&#34;&gt;Trac #13121&lt;/a&gt; g++ 4.6でのリンクエラーを修正するため、標準アトミックを使用するための要件をg++ 4.7以上とした&lt;/li&gt;
&lt;li&gt;最近のMSVCのバージョンで、&lt;code&gt;constexpr&lt;/code&gt;と可変引数テンプレートを有効にした&lt;/li&gt;
&lt;li&gt;Linuxのepollバックエンドでの競合状態を修正。これは、epollで別のスレッドがブロックされているときに、ソケットやディスクリプタを閉じたときに発生していた&lt;/li&gt;
&lt;li&gt;非推奨だった&lt;code&gt;auto_ptr&lt;/code&gt;の使用をやめた&lt;/li&gt;
&lt;li&gt;リアクティブな&lt;code&gt;async_accept&lt;/code&gt;の実装での、&lt;code&gt;asio_handler_is_continuation&lt;/code&gt;の間違った使用を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12419&#34; target=&#34;_blank&#34;&gt;Trac #12419&lt;/a&gt; いくつかの現代的なPOSIXプラットフォームで、&lt;code&gt;sys/poll.h&lt;/code&gt;ではなく&lt;code&gt;poll.h&lt;/code&gt;を使用するよう変更&lt;/li&gt;
&lt;li&gt;MSVCでのインテリセンス検出を修正&lt;/li&gt;
&lt;li&gt;android/clang/x86ターゲットで、拡張キーワード&lt;code&gt;__thread&lt;/code&gt;の使用を無効にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;call/ccがucontext-API (swapcontext)をサポート&lt;/li&gt;
&lt;li&gt;call/ccがWindowsのFiber APIをサポート&lt;/li&gt;
&lt;li&gt;call/ccがオンデマンドgrowing stack (セグメント化スタック／分割スタック) をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12719&#34; target=&#34;_blank&#34;&gt;Trac #12719&lt;/a&gt; mingw-w64ツールチェインで、テストケースとサンプルがセグメンテーションフォルトになっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; g++-4.9でcallccテストのビルドが失敗する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;重要&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;1.65.1で修正されたバグ： &lt;a href=&#34;https://github.com/boostorg/context/commit/420554fe9ac01482990e8ae314f4f7ba81010c9a&#34; target=&#34;_blank&#34;&gt;commit 420554f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;欠陥検出マクロとして、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_POINTER_TRAITS&lt;/code&gt; : C++11の&lt;code&gt;std::pointer_traits&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX17_FOLD_EXPRESSIONS&lt;/code&gt; : C++17の畳み込み式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX17_INLINE_VARIABLES&lt;/code&gt; : C++17のインライン変数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX17_STRUCTURED_BINDINGS&lt;/code&gt; : C++17の構造化束縛&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03以降向けに&lt;code&gt;pointer_traits&lt;/code&gt;を実装した。これには、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html&#34; target=&#34;_blank&#34;&gt;P0653r0&lt;/a&gt;のポインタへの変換関数が含まれる (実装者のGlen Fernandes氏に感謝)。この実装は、Align、Circular Buffer、Fiber、Geometryなどの他のライブラリで使われている&lt;/li&gt;
&lt;li&gt;Lightweight testに&lt;code&gt;BOOST_TEST_GT&lt;/code&gt; (&lt;code&gt;operator&amp;gt;&lt;/code&gt;による比較) と&lt;code&gt;BOOST_TEST_GE&lt;/code&gt; (&lt;code&gt;operator&amp;gt;=&lt;/code&gt;による比較)を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ucontext-API (swapcontext)をサポート&lt;/li&gt;
&lt;li&gt;WindowsのFiber APIをサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13064&#34; target=&#34;_blank&#34;&gt;Trac #13064&lt;/a&gt; CoroutineとCoroutine2の異なる振る舞いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#dll&#34; name=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非WindowsプラットフォームでのPEのパースを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;ハードウェアトランザクショナルメモリ (Intel TSX) をサポート&lt;/li&gt;
&lt;li&gt;NUMAをサポート&lt;/li&gt;
&lt;li&gt;ucontext-API (swapcontext) をサポート&lt;/li&gt;
&lt;li&gt;WindowsのFiber APIをサポート&lt;/li&gt;
&lt;li&gt;オンデマンドgrowing stackをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/121&#34; target=&#34;_blank&#34;&gt;GitHub #121&lt;/a&gt; GCC 4.8のC++11モードでコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/123&#34; target=&#34;_blank&#34;&gt;GitHub #123&lt;/a&gt; &lt;code&gt;schedule_from_remote&lt;/code&gt;がアサーション失敗する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/125&#34; target=&#34;_blank&#34;&gt;GitHub #125&lt;/a&gt; テストでクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/126&#34; target=&#34;_blank&#34;&gt;GitHUb #126&lt;/a&gt; 内部で使用しているメモリオーダーが間違っていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;重要&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;1.65.1で修正されたバグ： &lt;a href=&#34;https://github.com/boostorg/fiber/commit/63f1041f0e484e64dec437a0fa780ea2463abda2&#34; target=&#34;_blank&#34;&gt;commit 63f1041&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12986&#34; target=&#34;_blank&#34;&gt;Trac #12986&lt;/a&gt; MSVC 14.1は未対応となっていた次の可変長テンプレートベースのコンテナをサポートした: &lt;code&gt;fusion::vector&lt;/code&gt;, &lt;code&gt;fusion::deque&lt;/code&gt;, &lt;code&gt;fusion::map&lt;/code&gt;, &lt;code&gt;fusion::set&lt;/code&gt;, および &lt;code&gt;fusion::tuple&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11標準の&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;、&lt;code&gt;std::u16string&lt;/code&gt;、&lt;code&gt;std::u32string&lt;/code&gt;をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;correct()&lt;/code&gt;の、area strategyをとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_convex()&lt;/code&gt;の、side strategyをとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;MultiPoint/AnyGeometryのために、不足していた関係操作 (&lt;code&gt;covered_by&lt;/code&gt;, &lt;code&gt;crosses&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;など) を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12410&#34; target=&#34;_blank&#34;&gt;Trac #12410&lt;/a&gt; &lt;code&gt;correct()&lt;/code&gt;に地理 (geographic) 座標系が不足していた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/13035&#34; target=&#34;_blank&#34;&gt;Trac #13035&lt;/a&gt; segments near polesに対する非デカルト交差戦略が間違った結果となっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/13057&#34; target=&#34;_blank&#34;&gt;Trac #13057&lt;/a&gt; boxに対する&lt;code&gt;disjoint()&lt;/code&gt;の数値的な問題によって、linestringの&lt;code&gt;intersects()&lt;/code&gt;が間違った結果となっていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;が、interior ringが他のinterior ringに接触 (touch) するmultipolygonに対して&lt;code&gt;false&lt;/code&gt;を返す可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_valid&lt;/code&gt;が、polygonがinterior ring内に配置され、他の全てと接触しているmultipolygonに対して&lt;code&gt;false&lt;/code&gt;を返す可能性があった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;union_&lt;/code&gt;が不正な結果を生成する可能性があった問題を修正 (場合によっては&lt;code&gt;BOOST_GEOMETRY_INCLUDE_SELF_TURNS&lt;/code&gt;をdefineする必要がある)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection&lt;/code&gt; (と同種の機能) を修正。しかし、いくつかの状況でまだ不正となる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference&lt;/code&gt; (と同種の機能) を修正。しかし、いくつかの状況でまだ不正となる&lt;/li&gt;
&lt;li&gt;intersection strategyからさまざまなアルゴリズム内部へのarea strategyの伝播を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relate&lt;/code&gt;での未初期化変数と、&lt;code&gt;overlay&lt;/code&gt;での一時オブジェクトへの参照を修正&lt;/li&gt;
&lt;li&gt;geographic Segment/Boxでの&lt;code&gt;disjoint&lt;/code&gt;のエラーを修正&lt;/li&gt;
&lt;li&gt;さまざまなアルゴリズムでの非デカルトGeometryのハンドリングを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Solaris互換を改善。異なるプラットフォームを統一的に扱うビルドスクリプトを更新した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/phoenix/pull/50&#34; target=&#34;_blank&#34;&gt;GitHub #50&lt;/a&gt; 幾つかのドキュメントを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7423&#34; target=&#34;_blank&#34;&gt;Trac #7423&lt;/a&gt; C++11以降かつ連想コンテナで &lt;code&gt;phoenix::erase&lt;/code&gt; を使用した際にイテレータを返すように変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/phoenix/pull/52&#34; target=&#34;_blank&#34;&gt;GitHub #52&lt;/a&gt; &lt;code&gt;std::set&lt;/code&gt; および &lt;code&gt;std::multiset&lt;/code&gt; はphoenixが提供する遅延関数で動作するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/phoenix/pull/53&#34; target=&#34;_blank&#34;&gt;GitHub #53&lt;/a&gt; C++17以降では &lt;code&gt;phoenix::random_shuffle&lt;/code&gt; を無効化した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11875&#34; target=&#34;_blank&#34;&gt;Trac #11875&lt;/a&gt; 前方宣言ではなく適切なヘッダをインクルードするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel C/C++コンパイラの値が9999だった場合に、コンパイラバージョン12.1.0となるよう修正&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ワークアラウンド検出のために、&lt;code&gt;BOOST_PREDEF_WORKAROUND&lt;/code&gt;マクロと&lt;code&gt;BOOST_PREDEF_TESTED_AT&lt;/code&gt;マクロを追加
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// #define BOOST_PREDEF_WORKAROUND(symbol,comp,major,minor,patch)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if BOOST_PREDEF_WORKAROUND(BOOST_COMP_CLANG,&amp;lt;,3,0,0)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Clangコンパイラの古いバージョン向けのワークアラウンドをここに書く&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// BOOST_PREDEF_TESTED_AT(symbol,major,minor,patch)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if BOOST_PREDEF_TESTED_AT(BOOST_COMP_CLANG,3,5,0)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Clang 3.5.0以上での検証をここに書く&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ARM64 MSVC SIMDの検出を追加 (Minmin Gong氏に感謝)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;iOSシミュレータとデバイスの検出を、プラットフォーム選択として追加 (Ruslan Baratov氏に感謝)&lt;/li&gt;
&lt;li&gt;MinGWでのインクルードガードが間違っていた問題を修正 (Ruslan Baratov氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#program_options&#34; name=&#34;program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7495&#34; target=&#34;_blank&#34;&gt;Trac #7495&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/program_options/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; &lt;code&gt;boost::optional&lt;/code&gt;に値を保存できるようにした (Ed Catmur氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/program_options/issues/25&#34; target=&#34;_blank&#34;&gt;GitHub #25&lt;/a&gt; 値なしでオプションを指定した場合のデフォルト値であるimplicit valueの解析において、次のトークンから値を使用できるようにした。1.59.0以降で、&lt;code&gt;--option_name option_value&lt;/code&gt;構文でのimplicit valueが許可されなくなり、&lt;code&gt;--option_name=option_value&lt;/code&gt;の構文を使用する必要があった。これによって&lt;code&gt;--option_name option_value&lt;/code&gt;構文の意味が変わってしまっていたために、以前の状態に戻し、両方の構文を許可するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#python&#34; name=&#34;python&#34;&gt;Python&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::python::str&lt;/code&gt;の&lt;code&gt;eval()&lt;/code&gt;、&lt;code&gt;exec()&lt;/code&gt;、&lt;code&gt;exec_statement()&lt;/code&gt;関数の引数として&lt;code&gt;const char*&lt;/code&gt;をとれるようにした&lt;/li&gt;
&lt;li&gt;廃止していた&lt;code&gt;boost::python::numeric&lt;/code&gt;のAPIを削除した。代わりに&lt;code&gt;boost::python::numpy&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;MSVCとPython3でのビルド問題をいくつか修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#smart_ptr&#34; name=&#34;smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなクラステンプレート&lt;code&gt;atomic_shared_ptr&lt;/code&gt;を追加。これは、&lt;code&gt;shared_ptr&lt;/code&gt;上にスレッドセーフなアトミックポインタ操作を提供する (作者Peter Dimov)&lt;/li&gt;
&lt;li&gt;新たなクラステンプレート&lt;code&gt;local_shared_ptr&lt;/code&gt;を追加。これは、非アトミック操作によって参照カウントを更新する (作者Peter Dimov)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocate_shared()&lt;/code&gt;と&lt;code&gt;make_shared()&lt;/code&gt;の配列版を、さらに最適化 (作者Glen Fernandes)&lt;/li&gt;
&lt;li&gt;ドキュメントをAsciidocフォーマットで書き直した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.6&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17互換にした (VS2017でテストした) (&lt;a href=&#34;https://github.com/DanielaE&#34; target=&#34;_blank&#34;&gt;Daniela Engert&lt;/a&gt;氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_TEST&lt;/code&gt;マクロで、C配列を直接比較できるようにした&lt;/li&gt;
&lt;li&gt;より良いグローバルフィクスチャの仕組みとして、&lt;code&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/code&gt;マクロを追加。グローバル初期化のために&lt;code&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/code&gt;マクロを追加し、従来の&lt;code&gt;BOOST_GLOBAL_FIXTURE&lt;/code&gt;を非推奨化。&lt;/li&gt;
&lt;li&gt;フィクスチャのサポートを改善。&lt;code&gt;setup()&lt;/code&gt; / &lt;code&gt;teardown()&lt;/code&gt;メンバ関数について、teadown時間のチェックをより良いものにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12631&#34; target=&#34;_blank&#34;&gt;Trac #12631&lt;/a&gt; いくつかのAPIをロガーのためにインタフェースを変更した&lt;/li&gt;
&lt;li&gt;従来の&lt;code&gt;BOOST_GLOBAL_FIXTURE&lt;/code&gt;を非推奨化し、&lt;code&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/code&gt;と&lt;code&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/code&gt;に分割した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/5282&#34; target=&#34;_blank&#34;&gt;Trac #5282&lt;/a&gt; テストフィクスチャが仮想継承をサポートしていないという問題。対応なし&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/5563&#34; target=&#34;_blank&#34;&gt;Trac #5563&lt;/a&gt; &lt;code&gt;BOOST_GLOBAL_FIXTURE&lt;/code&gt;マクロで、デストラクタでテストに失敗するとクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11471&#34; target=&#34;_blank&#34;&gt;Trac #11471&lt;/a&gt; C配列を扱えない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11962&#34; target=&#34;_blank&#34;&gt;Trac #11962&lt;/a&gt; フィクスチャのコンストラクタで&lt;code&gt;BOOST_TEST_MESSAGE&lt;/code&gt;マクロを使用すると、不正なXMLが出力される問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12228&#34; target=&#34;_blank&#34;&gt;Trac #12228&lt;/a&gt; いくつかのヘッダがコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/12631&#34; target=&#34;_blank&#34;&gt;Trac #12631&lt;/a&gt; &lt;code&gt;BOOST_DATA_TEST_CASE&lt;/code&gt;で&lt;code&gt;BOOST_TEST_MESSAGE&lt;/code&gt;マクロを使用すると、不正な出力になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13011&#34; target=&#34;_blank&#34;&gt;Trac #13011&lt;/a&gt; &lt;code&gt;BOOST_TEST&lt;/code&gt;マクロの浮動小数点数の比較が壊れていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/106&#34; target=&#34;_blank&#34;&gt;GitHub #106&lt;/a&gt; 非推奨になっていたC++標準ライブラリの関数を置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;1.65.1で修正されたWindows環境の重要なバグ&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/130&#34; target=&#34;_blank&#34;&gt;GitHub #130&lt;/a&gt; Windowsの&lt;code&gt;condition_variable&lt;/code&gt;に同期問題が起きていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6787&#34; target=&#34;_blank&#34;&gt;Trac #6787&lt;/a&gt; システム時刻をロールバックすると&lt;code&gt;boost::this_thread::sleep()&lt;/code&gt;がハングしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12519&#34; target=&#34;_blank&#34;&gt;Trac #12519&lt;/a&gt; &lt;code&gt;boost::thread::try_join_for()&lt;/code&gt;がタイムアウト後にreturnしなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12874&#34; target=&#34;_blank&#34;&gt;Trac #12874&lt;/a&gt; &lt;code&gt;future&amp;lt;&amp;gt;&lt;/code&gt;の拡張コンストラクタは&lt;code&gt;BOOST_THREAD_PROVIDES_FUTURE_UNWRAP&lt;/code&gt;以下でなければならなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12888&#34; target=&#34;_blank&#34;&gt;Trac #12888&lt;/a&gt; mingw/gcc 4.4環境で、このライブラリがリンクできなかった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12958&#34; target=&#34;_blank&#34;&gt;Trac #12958&lt;/a&gt; &lt;code&gt;sync_bounded_queue::wait_pull_front( lve )&lt;/code&gt;が例外を投げる可能性があった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13077&#34; target=&#34;_blank&#34;&gt;Trac #13077&lt;/a&gt; スタティックな&lt;code&gt;libboost_thread&lt;/code&gt;のリンクが、DLL初期化で失敗となっていた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13155&#34; target=&#34;_blank&#34;&gt;Trac #13155&lt;/a&gt; Solaris 11.3とOracle Linux (6と7)のpthreadシステム上でビルドに失敗していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/121&#34; target=&#34;_blank&#34;&gt;GitHub #121&lt;/a&gt; VS2017環境で&lt;code&gt;on_tls_prepare&lt;/code&gt;が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#type_index&#34; name=&#34;type_index&#34;&gt;Type Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13009&#34; target=&#34;_blank&#34;&gt;Trac #13009&lt;/a&gt; &lt;code&gt;&amp;lt;boost/functional/hash.hpp&amp;gt;&lt;/code&gt;のインクルードが抜けていたところを修正 (Ed Catmur氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13027&#34; target=&#34;_blank&#34;&gt;Trac #13027&lt;/a&gt; C++11をサポートしているコンパイラでは、&lt;code&gt;hash_code()&lt;/code&gt;の計算に&lt;code&gt;std::type_info::hash_code()&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/16&#34; target=&#34;_blank&#34;&gt;GitHub #16&lt;/a&gt; GCC 7以降での&lt;code&gt;ctti_type_index&lt;/code&gt;を修正 (Benjamin Buch氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#Typeof&#34; name=&#34;typeof&#34;&gt;Tyepof&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11821&#34; target=&#34;_blank&#34;&gt;Track #11821&lt;/a&gt; clang-clでのコンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_set&lt;/code&gt;、&lt;code&gt;unordered_multiset&lt;/code&gt;、&lt;code&gt;unordered_map&lt;/code&gt;、&lt;code&gt;unordered_multimap&lt;/code&gt;で同じデータ構造を使用するようにした。これはC++17において、マージ(merge)と抽出(extract)操作のノードがコンテナ間で互換である必要があったため&lt;/li&gt;
&lt;li&gt;非推奨だった関数にdeprecated属性を追加&lt;/li&gt;
&lt;li&gt;C++11コンパイラに対して、&lt;code&gt;pair&lt;/code&gt;のpiecewise構築において&lt;code&gt;allocator_traits&lt;/code&gt;、&lt;code&gt;construct&lt;/code&gt;、&lt;code&gt;destroy&lt;/code&gt;の使用を改善し、ふさわしい動作にした&lt;/li&gt;
&lt;li&gt;新しいOracleコンパイラに対して、ワークアラウンドを減らした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/5&#34; target=&#34;_blank&#34;&gt;GitHub #5&lt;/a&gt; 未初期化メモリへのポインタ間接参照を回避&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10847&#34; target=&#34;_blank&#34;&gt;Trac #10847&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/13002&#34; target=&#34;_blank&#34;&gt;Trac #13002&lt;/a&gt; Boost 1.57.0から&lt;code&gt;boost::next()&lt;/code&gt;と&lt;code&gt;boost::prior()&lt;/code&gt;がSFINAEフレンドリーでなくなっていた。互換性のために元に戻した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_65_1.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13018&#34; target=&#34;_blank&#34;&gt;Trac #13018&lt;/a&gt; &lt;code&gt;boost::get()&lt;/code&gt;に右辺値参照版を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/13037&#34; target=&#34;_blank&#34;&gt;Trac #13037&lt;/a&gt; &lt;code&gt;&amp;lt;boost/variant/polymorphic_get.hpp&amp;gt;&lt;/code&gt;にインクルードが不足していた (Adam Badura氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/8554&#34; target=&#34;_blank&#34;&gt;Trac #8554&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/10041&#34; target=&#34;_blank&#34;&gt;Trac #10041&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/variant/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub #35&lt;/a&gt; &lt;code&gt;boost::make_variant_over&lt;/code&gt;を修正し、viewや他のForward Sequenceに対して動作するようになった (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 5.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 5.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.1.0&lt;/li&gt;
&lt;li&gt;GCC, C++1z: 6.3.0&lt;/li&gt;
&lt;li&gt;Intel: 17.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 8.1.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 8.1.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 8.1.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 8.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.6.4, 4.7.3, 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4&lt;/li&gt;
&lt;li&gt;GCC, C++14: 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 3.8.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.8.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.8.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 3.8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, C++11: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SunOS:&lt;ul&gt;
&lt;li&gt;Oracle Solaris Studio: 12.5_next, 12.5&lt;/li&gt;
&lt;li&gt;Oracle Solaris Studio, C++11: , 12.5_next, 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>