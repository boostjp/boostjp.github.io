<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-04-17T23:03:30.029136</updated>
  <id>465fb01f-2870-42e8-953e-7de488470a45</id>

  
    <entry>
      <title>Boost 1.64.0リリースノート -- 1.64.0リリースノート: Fiberを更新, close #134</title>
      <link href="https://boostjp.github.io/document/version/1_64_0.html"/>
      <id>de87257f58cdbfec912cfae829e95d836e766b43:document/version/1_64_0.md</id>
      <updated>2017-04-16 11:57:46 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.64.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_64_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_64_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/process&#34; target=&#34;_blank&#34;&gt;Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Klemens D. MorgensternによるProcessライブラリは、以下のようなことをクロスプラットフォームに提供する&lt;ul&gt;
&lt;li&gt;子プロセスの生成&lt;/li&gt;
&lt;li&gt;子プロセスのためのストリーム生成&lt;/li&gt;
&lt;li&gt;ストリームを通じての子プロセスとの通信（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了を待機（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;既知の問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/klemens-morgenstern/boost-process/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;group.wait()&lt;/code&gt;が処理を返さない&lt;ul&gt;
&lt;li&gt;訳者註: 実際に問題が発生しているのはWindows環境でのみとされている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一時オブジェクトへの参照をreturnで返す際の、誤った警告を抑制した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12615&#34; target=&#34;_blank&#34;&gt;#12615&lt;/a&gt; オブジェクトのアドレスを直接取得する代わりに、&lt;code&gt;boost::addressof&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12053&#34; target=&#34;_blank&#34;&gt;#12053&lt;/a&gt; インクルードするBoostのヘッダファイルは、ダブルクォートで囲むのをやめて山カッコで囲むようにした&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;li&gt;テストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.7以前の32bit x86コンパイラで正しくない64bitアトミック命令が出力されてしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;欠陥検出マクロ&lt;code&gt;BOOST_NO_CXX11_SFINAE_EXPR&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_SFINAE_EXPR&lt;/code&gt;は以前からあったが、&lt;code&gt;CXX11&lt;/code&gt;が名前に含まれたマクロがなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12749&#34; target=&#34;_blank&#34;&gt;Trac #12749&lt;/a&gt; &lt;code&gt;container::pmr::polymorphic_allocator&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11333&#34; target=&#34;_blank&#34;&gt;Trac #11333&lt;/a&gt; &lt;code&gt;boost::container::basic_string&lt;/code&gt;と&lt;code&gt;boost::basic_string_view&lt;/code&gt;を相互運用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;emplace_back&lt;/code&gt;は&lt;code&gt;*end()&lt;/code&gt;ではなく&lt;code&gt;back()&lt;/code&gt;を返すべき&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいAPIとして&lt;code&gt;call/cc&lt;/code&gt;を実装した&lt;ul&gt;
&lt;li&gt;訳者註: いわゆるSchemeなどに代表されるCall with Current Continuationのことである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution-context&lt;/code&gt;が(v1,v2ともに)廃止予定となった&lt;/li&gt;
&lt;li&gt;MIPSにおけるスタックポインタの進め幅を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12719&#34; target=&#34;_blank&#34;&gt;#12719&lt;/a&gt; &lt;code&gt;mingw-w64&lt;/code&gt;でセグメンテーションフォルトする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12948&#34; target=&#34;_blank&#34;&gt;#12948&lt;/a&gt; Android ARMにおいて&lt;code&gt;snprintf&lt;/code&gt;が意図しない結果を出していたのを修正&lt;ul&gt;
&lt;li&gt;訳者註: &lt;code&gt;snprintf&lt;/code&gt;に限らずスタックの開始アドレスが間違っていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/38&#34; target=&#34;_blank&#34;&gt;#38&lt;/a&gt; macOSで&lt;code&gt;context_entry()&lt;/code&gt;がクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/39&#34; target=&#34;_blank&#34;&gt;#39&lt;/a&gt; Clang 3.8でサポートされない&lt;code&gt;.cpu&lt;/code&gt;ディレクティブがAArch64で使われていたことによってビルド出来なかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/41&#34; target=&#34;_blank&#34;&gt;#41&lt;/a&gt; &lt;code&gt;std::invoke&lt;/code&gt;によって&lt;code&gt;std::bind&lt;/code&gt;が出来なかった&lt;ul&gt;
&lt;li&gt;訳者註: ContextではなくCoroutine2の問題であり&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;を参照されたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/46&#34; target=&#34;_blank&#34;&gt;#46&lt;/a&gt; テストがメンバ名の変更に対応できていなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/50&#34; target=&#34;_blank&#34;&gt;#50&lt;/a&gt; ppc64/sysv/elfの組み合わせで出力されるアセンブリが正しくなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントをQuickbookに移行した (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;テストでのメモリリークを修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の&lt;code&gt;constexpr&lt;/code&gt;とC++11のSFINAE式を実装したコンパイラにおいて、&lt;code&gt;constexpr&lt;/code&gt;修飾された&lt;code&gt;addressof&lt;/code&gt;を実装した (Glen Fernandes氏に感謝)
  サポートされない場合には&lt;code&gt;BOOST_CORE_NO_CONSTEXPR_ADDRESSOF&lt;/code&gt;マクロが定義される&lt;/li&gt;
&lt;li&gt;コンテナ要素をテストするための&lt;code&gt;BOOST_TEST_ALL_EQ&lt;/code&gt;マクロと&lt;code&gt;BOOST_TEST_ALL_WITH&lt;/code&gt;マクロを&lt;code&gt;lightweight_test.hpp&lt;/code&gt;に追加した (Bjorn Reese氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/coroutine2/issues/4&#34; target=&#34;_blank&#34;&gt;#4&lt;/a&gt; &lt;code&gt;coroutine2&amp;lt;&amp;gt;&lt;/code&gt;が&lt;code&gt;std::bind&lt;/code&gt;を受け取れなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34; name=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows CEでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;ポインタからシンボルの位置を取得する&lt;code&gt;boost:dll::symbol_location_ptr&lt;/code&gt;関数を追加。(たとえば&lt;code&gt;void*&lt;/code&gt;からの)間接参照ではシンボル位置を取得できなかった&lt;/li&gt;
&lt;li&gt;メンバポインタに対する&lt;code&gt;detail::aggressive_ptr_cast&lt;/code&gt;の未定義動作を修正&lt;/li&gt;
&lt;li&gt;実験的なスマートインポートでのリークを修正&lt;/li&gt;
&lt;li&gt;警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;行列変換のベースを、Boost.uBLASの代わりにBoost.QVMを使用するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ublas_transformer&lt;/code&gt;を&lt;code&gt;matrix_transformer&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のコンストラクタに、明示的な変更器(modifier)として&lt;code&gt;index::dynamic_*&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strategy::area::huiller&lt;/code&gt;を&lt;code&gt;strategy::area::spherical&lt;/code&gt;で置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/363&#34; target=&#34;_blank&#34;&gt;GitHub #363&lt;/a&gt; &lt;code&gt;geometry/index/parameters.hpp&lt;/code&gt;でのインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; 異なるpoint型を使用したときに&lt;code&gt;within(Linear, Areal)&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/370&#34; target=&#34;_blank&#34;&gt;GitHub #370&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;に入力として&lt;code&gt;Ring&lt;/code&gt;を与えたときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したチケット&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11930&#34; target=&#34;_blank&#34;&gt;Trac #11930&lt;/a&gt; &lt;code&gt;area::huiller&lt;/code&gt;戦略が不正確&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11931&#34; target=&#34;_blank&#34;&gt;Trac #11931&lt;/a&gt; pole encirclingなポリゴンの球面積が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12566&#34; target=&#34;_blank&#34;&gt;Trac #12566&lt;/a&gt; &lt;code&gt;pair&lt;/code&gt;の値に生ポインタが含まれている場合に&lt;code&gt;equal_to&amp;lt;&amp;gt;&lt;/code&gt;内でテンプレートのインスタンス化が曖昧になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12861&#34; target=&#34;_blank&#34;&gt;Trac #12861&lt;/a&gt; stdlibc++ (gcc 4.8.2)で&lt;code&gt;rtree&lt;/code&gt;がセグメンテーションフォルトになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12885&#34; target=&#34;_blank&#34;&gt;Trac #12885&lt;/a&gt; &lt;code&gt;throw&lt;/code&gt;の代わりに&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_turn_info&lt;/code&gt;内の&lt;code&gt;distance_measure&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(un)bounded_channel&amp;lt;&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/100&#34; target=&#34;_blank&#34;&gt;#100&lt;/a&gt; ASIO: &lt;code&gt;notify&lt;/code&gt;での処理が足りないことで他のファイバーが実行されなくなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/105&#34; target=&#34;_blank&#34;&gt;#105&lt;/a&gt; Windows環境下でskynetのパフォーマンステストがクラッシュしていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/106&#34; target=&#34;_blank&#34;&gt;#106&lt;/a&gt; &lt;code&gt;fixed_stack&lt;/code&gt;アロケータを&lt;code&gt;async&lt;/code&gt;や&lt;code&gt;packaged_task&lt;/code&gt;に渡すことが出来なかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/110&#34; target=&#34;_blank&#34;&gt;#110&lt;/a&gt; ARMv6でのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/111&#34; target=&#34;_blank&#34;&gt;#111&lt;/a&gt; &lt;code&gt;buffered_channel::try_value_pop()&lt;/code&gt;の内部で無限ループする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/114&#34; target=&#34;_blank&#34;&gt;#114&lt;/a&gt; &lt;code&gt;buffered_channel::try_push()&lt;/code&gt;が&lt;code&gt;pop&lt;/code&gt;で待っているファイバーを再開しない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++の新しいバージョンで削除された関数オブジェクトを使用するのをやめた。(C++11で非推奨化され、C++17で削除されることになった&lt;code&gt;std::unary_function&lt;/code&gt;と&lt;code&gt;std::binary_function&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12617&#34; target=&#34;_blank&#34;&gt;Trac #12617&lt;/a&gt; OS X 10.11での&lt;code&gt;clock_gettime&lt;/code&gt;がないというコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12744&#34; target=&#34;_blank&#34;&gt;Trac #12744&lt;/a&gt; Windowsにおいて、&lt;code&gt;boost::interprocess::ipcdetail::spin_wait&lt;/code&gt;内で&lt;code&gt;winapi::set_timer_resolution&lt;/code&gt;が使われていたために、おかしな分解能の変換が行われていた。&lt;code&gt;winapi::query_timer_resolution&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub Pull #32&lt;/a&gt; &lt;code&gt;std::pointer_traits&lt;/code&gt;の要件に準拠するよう修正。C++11以降の環境では、&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;::other&lt;/code&gt;ではなく&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;&lt;/code&gt;で型をとれるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub Pull #33&lt;/a&gt; 64/32ビットプロセス間の共有において、基本クラスの&lt;code&gt;offset_ptr&lt;/code&gt;から派生クラスの&lt;code&gt;offset_ptr&lt;/code&gt;に正しく変換できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub Pull #34&lt;/a&gt; サンプルコードで&lt;code&gt;BOOST_MULTI_INDEX_MEMBER&lt;/code&gt;の代わりに&lt;code&gt;multi_index::member&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub Pull #35&lt;/a&gt; クロスコンパイルのオプションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowsシステムからの新たな実験的オプション&lt;code&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED&lt;/code&gt;を追加。このオプションは、セッションマネージャに関連付けられたレジストリの値から、共有メモリが置かれるフォルダ名として使用される一意なブートスタンプに由来する。このオプションはVista以降で動作し、デフォルトバージョンはこれ以降の安定バージョンとなるだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12745&#34; target=&#34;_blank&#34;&gt;Trac #12745&lt;/a&gt; &lt;code&gt;key_nodeptr_comp&lt;/code&gt;のキー型が&lt;code&gt;void*&lt;/code&gt;のときコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12761&#34; target=&#34;_blank&#34;&gt;Trac #12761&lt;/a&gt; &lt;code&gt;intrusive::set::swap&lt;/code&gt;で(状態を持つ)比較関数が入れ替わらない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34; name=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11842&#34; target=&#34;_blank&#34;&gt;#11842&lt;/a&gt; いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C99にあるすべての関数がAnnex F (IEC 60559) と互換があることを確実にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12066&#34; target=&#34;_blank&#34;&gt;#12066&lt;/a&gt; ベッセル関数I0、I1、K0、K1の精度を改善した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12955&#34; target=&#34;_blank&#34;&gt;Trac ##12955&lt;/a&gt; ひとつ以上のranked indexが指定された場合に、あいまいな参照になる関連バグを修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; 非正規化数の&lt;code&gt;cpp_bin_float&lt;/code&gt;を&lt;code&gt;double&lt;/code&gt;や&lt;code&gt;float&lt;/code&gt;に変換する際に、丸めが二重に行われる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12559&#34; target=&#34;_blank&#34;&gt;#12559&lt;/a&gt; 小さい整数に対する整数平方根のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_bin_float&lt;/code&gt;の符号付きゼロの変換を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; &lt;code&gt;cpp_bin_float&lt;/code&gt;の丸めコードを修正し、任意の場所で丸められるようにした。それを変換で使用できる&lt;/li&gt;
&lt;li&gt;128ビットのビットスキャン操作のパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12580&#34; target=&#34;_blank&#34;&gt;#12580&lt;/a&gt; 非常に小さな&lt;code&gt;cpp_bin_float&lt;/code&gt;の減算を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12581&#34; target=&#34;_blank&#34;&gt;#12581&lt;/a&gt; C99 Annex F (IEC 60559)互換となるようエラーハンドリングを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12627&#34; target=&#34;_blank&#34;&gt;#12627&lt;/a&gt; &lt;code&gt;cpp_int&lt;/code&gt;の自明なビット取り出しを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12625&#34; target=&#34;_blank&#34;&gt;#12625&lt;/a&gt; 一貫性のために、&lt;code&gt;ilogb&lt;/code&gt; (とそれを使用するコード) の引数がゼロのときに指数型の最小値を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;から&lt;code&gt;cpp_bin_float&lt;/code&gt;への変換を許可&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12790&#34; target=&#34;_blank&#34;&gt;#12790&lt;/a&gt; ビットが失われる問題の原因となっていた&lt;code&gt;cpp_int&lt;/code&gt;の左シフトバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12798&#34; target=&#34;_blank&#34;&gt;#12798&lt;/a&gt; 境界はあるが可変精度な&lt;code&gt;cpp_int&lt;/code&gt;において、過度に積極的な&lt;code&gt;constexpr&lt;/code&gt;最適化によって起こっていたバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel C/C++コンパイラのバージョン仕様を修正&lt;/li&gt;
&lt;li&gt;Boostの有効なバージョン番号から各要素を取り出すためのマクロ&lt;code&gt;BOOST_VERSION_NUMBER_MAJOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_MINOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_PATCH&lt;/code&gt;を追加。それぞれ、Boostのメジャーバージョン、マイナーバージョン、パッチバージョンを取得できる&lt;/li&gt;
&lt;li&gt;Visual Studioバージョンの番号付けを変更。VS2015以降は、多様なプロダクトバージョンの代わりに、コンパイラバージョンを使用するようにした &lt;a href=&#34;https://github.com/boostorg/predef/commit/0d56819d68e7bf5f411cd6240136657ebd47f672&#34; target=&#34;_blank&#34;&gt;commit 0d56819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34; name=&#34;program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7495&#34; target=&#34;_blank&#34;&gt;Trac #7495&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/program_options/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; 値の&lt;code&gt;boost::optional&lt;/code&gt;への書き込みをサポートした (Ed Catmur氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle C++ toolsetでのコンパイルで、静的リンクすべしという制限をなくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12818&#34; target=&#34;_blank&#34;&gt;#12818&lt;/a&gt; 大きな成果として、libFuzzerを使用してライブラリの脆弱性と認定問題(identified issue)を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34; name=&#34;smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocate_shared&lt;/code&gt;と&lt;code&gt;make_shared&lt;/code&gt;の配列版を、より最適でメンテナンスしやすい実装に書き直した (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;ポインタをキャストする関数のムーブ版を追加 (Chris Glover氏に感謝)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0390r0.htm&#34; target=&#34;_blank&#34;&gt;P0390R0 A Proposal to Add Pointer Cast Functions with Move Semantics to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.5&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ユーザー定義型をロギングするカスタマイゼーションポイントを提供するようにした。そのためには、型と同じ名前空間で、以下の関数を定義する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost_test_print_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ostr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArgumentType&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnitの出力フォーマットが&lt;code&gt;/log-level/&lt;/code&gt;を持つようにした&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;JUnitの出力フォーマットは、テストモジュールが多くのチェックを持つ場合、良いパフォーマンスはでません&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;バグ修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;throw_exception&lt;/code&gt;関数内で使用する例外無効指定の検出をするマクロのtypoを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/108&#34; target=&#34;_blank&#34;&gt;GitHub #108&lt;/a&gt; &lt;code&gt;runtime_config&lt;/code&gt;の文字列定数の命名規則を、大文字アンダースコア区切りから、小文字アンダースコア区切りに修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11756&#34; target=&#34;_blank&#34;&gt;Trac #11756&lt;/a&gt; &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;標準ヘッダがない環境で、&lt;code&gt;FE_*&lt;/code&gt;系マクロを使用したコードのコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12540&#34; target=&#34;_blank&#34;&gt;Trac #12540&lt;/a&gt; ユーザー定義型をロギングするカスタマイゼーションポイントを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12712&#34; target=&#34;_blank&#34;&gt;Trac #12712&lt;/a&gt; 同じ名前を持つテストケースで競合が発生していたため、&lt;code&gt;BOOST_AUTO_TEST_SUITE&lt;/code&gt;でのユニークな名前の生成に、&lt;code&gt;__COUNTER__&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12748&#34; target=&#34;_blank&#34;&gt;Trac #12748&lt;/a&gt; &lt;code&gt;VERSION&lt;/code&gt;という名前の変数を定義していたことにより発生していたコンパイルエラーを修正。小文字の変数にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12778&#34; target=&#34;_blank&#34;&gt;Trac #12778&lt;/a&gt; &lt;code&gt;nullptr&lt;/code&gt;をサポートした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub #13&lt;/a&gt; &lt;code&gt;BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST&lt;/code&gt;マクロを追加。これは&lt;code&gt;runtime_cast&lt;/code&gt;の実装のための機能だが、その目的のために使用していた&lt;code&gt;BOOST_TYPE_INDEX_REGISTER_CLASS&lt;/code&gt;マクロにその機能は含まれていなかった (実装者のChris Glover氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12739&#34; target=&#34;_blank&#34;&gt;#12739&lt;/a&gt; stl_type_index.hppでの未定義マクロによる警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34; name=&#34;type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しい型特性、&lt;code&gt;make_void&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;訳者註: これはC++17で実装される&lt;code&gt;std::void_t&lt;/code&gt;に相当し、テンプレートエイリアスが実装されたコンパイラでは&lt;code&gt;boost::void_t&lt;/code&gt;も提供される。
  &lt;code&gt;boost::make_void&lt;/code&gt;は可変長テンプレートをサポートしないコンパイラでも提供されるが、その場合は5要素を上限とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17のメンバ関数サポートを開始した：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map&lt;/code&gt;に&lt;code&gt;insert_or_assign&lt;/code&gt;と&lt;code&gt;try_emplace&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;全てのコンテナに&lt;code&gt;merge&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12508&#34; target=&#34;_blank&#34;&gt;#12508&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12645&#34; target=&#34;_blank&#34;&gt;#12645&lt;/a&gt; &lt;code&gt;recursive_variant_&lt;/code&gt;から&lt;code&gt;variant&lt;/code&gt;の構築でコンパイルエラーになる問題を修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12236&#34; target=&#34;_blank&#34;&gt;#12236&lt;/a&gt; MSVC 2015 Update 1で可変引数テンプレートを有効にしていない場合にまだ問題があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12680&#34; target=&#34;_blank&#34;&gt;#12680&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7120&#34; target=&#34;_blank&#34;&gt;#7120&lt;/a&gt; GCC6でクラッシュする問題に対してワークアラウンドを入れた (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::polymorphic_*get&lt;/code&gt;が&lt;code&gt;boost::*get&lt;/code&gt;として動作するよう、ドキュメント化していない境界値テスト(border tests)と固定値テスト(fixed tests)を作った&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.64.0リリースノート -- 1.64.0リリースノート: Contextを更新, close #129</title>
      <link href="https://boostjp.github.io/document/version/1_64_0.html"/>
      <id>9e6c34d507a7ad46749bd678cee9dd34ebe3642a:document/version/1_64_0.md</id>
      <updated>2017-04-16 11:49:25 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.64.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_64_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_64_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/process&#34; target=&#34;_blank&#34;&gt;Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Klemens D. MorgensternによるProcessライブラリは、以下のようなことをクロスプラットフォームに提供する&lt;ul&gt;
&lt;li&gt;子プロセスの生成&lt;/li&gt;
&lt;li&gt;子プロセスのためのストリーム生成&lt;/li&gt;
&lt;li&gt;ストリームを通じての子プロセスとの通信（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了を待機（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;既知の問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/klemens-morgenstern/boost-process/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;group.wait()&lt;/code&gt;が処理を返さない&lt;ul&gt;
&lt;li&gt;訳者註: 実際に問題が発生しているのはWindows環境でのみとされている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一時オブジェクトへの参照をreturnで返す際の、誤った警告を抑制した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12615&#34; target=&#34;_blank&#34;&gt;#12615&lt;/a&gt; オブジェクトのアドレスを直接取得する代わりに、&lt;code&gt;boost::addressof&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12053&#34; target=&#34;_blank&#34;&gt;#12053&lt;/a&gt; インクルードするBoostのヘッダファイルは、ダブルクォートで囲むのをやめて山カッコで囲むようにした&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;li&gt;テストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.7以前の32bit x86コンパイラで正しくない64bitアトミック命令が出力されてしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;欠陥検出マクロ&lt;code&gt;BOOST_NO_CXX11_SFINAE_EXPR&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_SFINAE_EXPR&lt;/code&gt;は以前からあったが、&lt;code&gt;CXX11&lt;/code&gt;が名前に含まれたマクロがなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12749&#34; target=&#34;_blank&#34;&gt;Trac #12749&lt;/a&gt; &lt;code&gt;container::pmr::polymorphic_allocator&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11333&#34; target=&#34;_blank&#34;&gt;Trac #11333&lt;/a&gt; &lt;code&gt;boost::container::basic_string&lt;/code&gt;と&lt;code&gt;boost::basic_string_view&lt;/code&gt;を相互運用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;emplace_back&lt;/code&gt;は&lt;code&gt;*end()&lt;/code&gt;ではなく&lt;code&gt;back()&lt;/code&gt;を返すべき&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいAPIとして&lt;code&gt;call/cc&lt;/code&gt;を実装した&lt;ul&gt;
&lt;li&gt;訳者註: いわゆるSchemeなどに代表されるCall with Current Continuationのことである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution-context&lt;/code&gt;が(v1,v2ともに)廃止予定となった&lt;/li&gt;
&lt;li&gt;MIPSにおけるスタックポインタの進め幅を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12719&#34; target=&#34;_blank&#34;&gt;#12719&lt;/a&gt; &lt;code&gt;mingw-w64&lt;/code&gt;でセグメンテーションフォルトする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12948&#34; target=&#34;_blank&#34;&gt;#12948&lt;/a&gt; Android ARMにおいて&lt;code&gt;snprintf&lt;/code&gt;が意図しない結果を出していたのを修正&lt;ul&gt;
&lt;li&gt;訳者註: &lt;code&gt;snprintf&lt;/code&gt;に限らずスタックの開始アドレスが間違っていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/38&#34; target=&#34;_blank&#34;&gt;#38&lt;/a&gt; macOSで&lt;code&gt;context_entry()&lt;/code&gt;がクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/39&#34; target=&#34;_blank&#34;&gt;#39&lt;/a&gt; Clang 3.8でサポートされない&lt;code&gt;.cpu&lt;/code&gt;ディレクティブがAArch64で使われていたことによってビルド出来なかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/41&#34; target=&#34;_blank&#34;&gt;#41&lt;/a&gt; &lt;code&gt;std::invoke&lt;/code&gt;によって&lt;code&gt;std::bind&lt;/code&gt;が出来なかった&lt;ul&gt;
&lt;li&gt;訳者註: ContextではなくCoroutine2の問題であり&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;を参照されたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/46&#34; target=&#34;_blank&#34;&gt;#46&lt;/a&gt; テストがメンバ名の変更に対応できていなかったのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/50&#34; target=&#34;_blank&#34;&gt;#50&lt;/a&gt; ppc64/sysv/elfの組み合わせで出力されるアセンブリが正しくなかったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントをQuickbookに移行した (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;テストでのメモリリークを修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の&lt;code&gt;constexpr&lt;/code&gt;とC++11のSFINAE式を実装したコンパイラにおいて、&lt;code&gt;constexpr&lt;/code&gt;修飾された&lt;code&gt;addressof&lt;/code&gt;を実装した (Glen Fernandes氏に感謝)
  サポートされない場合には&lt;code&gt;BOOST_CORE_NO_CONSTEXPR_ADDRESSOF&lt;/code&gt;マクロが定義される&lt;/li&gt;
&lt;li&gt;コンテナ要素をテストするための&lt;code&gt;BOOST_TEST_ALL_EQ&lt;/code&gt;マクロと&lt;code&gt;BOOST_TEST_ALL_WITH&lt;/code&gt;マクロを&lt;code&gt;lightweight_test.hpp&lt;/code&gt;に追加した (Bjorn Reese氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/coroutine2/issues/4&#34; target=&#34;_blank&#34;&gt;#4&lt;/a&gt; &lt;code&gt;coroutine2&amp;lt;&amp;gt;&lt;/code&gt;が&lt;code&gt;std::bind&lt;/code&gt;を受け取れなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34; name=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows CEでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;ポインタからシンボルの位置を取得する&lt;code&gt;boost:dll::symbol_location_ptr&lt;/code&gt;関数を追加。(たとえば&lt;code&gt;void*&lt;/code&gt;からの)間接参照ではシンボル位置を取得できなかった&lt;/li&gt;
&lt;li&gt;メンバポインタに対する&lt;code&gt;detail::aggressive_ptr_cast&lt;/code&gt;の未定義動作を修正&lt;/li&gt;
&lt;li&gt;実験的なスマートインポートでのリークを修正&lt;/li&gt;
&lt;li&gt;警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;行列変換のベースを、Boost.uBLASの代わりにBoost.QVMを使用するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ublas_transformer&lt;/code&gt;を&lt;code&gt;matrix_transformer&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のコンストラクタに、明示的な変更器(modifier)として&lt;code&gt;index::dynamic_*&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strategy::area::huiller&lt;/code&gt;を&lt;code&gt;strategy::area::spherical&lt;/code&gt;で置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/363&#34; target=&#34;_blank&#34;&gt;GitHub #363&lt;/a&gt; &lt;code&gt;geometry/index/parameters.hpp&lt;/code&gt;でのインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; 異なるpoint型を使用したときに&lt;code&gt;within(Linear, Areal)&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/370&#34; target=&#34;_blank&#34;&gt;GitHub #370&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;に入力として&lt;code&gt;Ring&lt;/code&gt;を与えたときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したチケット&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11930&#34; target=&#34;_blank&#34;&gt;Trac #11930&lt;/a&gt; &lt;code&gt;area::huiller&lt;/code&gt;戦略が不正確&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11931&#34; target=&#34;_blank&#34;&gt;Trac #11931&lt;/a&gt; pole encirclingなポリゴンの球面積が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12566&#34; target=&#34;_blank&#34;&gt;Trac #12566&lt;/a&gt; &lt;code&gt;pair&lt;/code&gt;の値に生ポインタが含まれている場合に&lt;code&gt;equal_to&amp;lt;&amp;gt;&lt;/code&gt;内でテンプレートのインスタンス化が曖昧になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12861&#34; target=&#34;_blank&#34;&gt;Trac #12861&lt;/a&gt; stdlibc++ (gcc 4.8.2)で&lt;code&gt;rtree&lt;/code&gt;がセグメンテーションフォルトになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12885&#34; target=&#34;_blank&#34;&gt;Trac #12885&lt;/a&gt; &lt;code&gt;throw&lt;/code&gt;の代わりに&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_turn_info&lt;/code&gt;内の&lt;code&gt;distance_measure&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/100&#34; target=&#34;_blank&#34;&gt;#100&lt;/a&gt; ASIO: &lt;code&gt;notify&lt;/code&gt;での処理が足りないことで他のファイバーが実行されなくなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/106&#34; target=&#34;_blank&#34;&gt;#106&lt;/a&gt; &lt;code&gt;fixed_stack&lt;/code&gt;アロケータを&lt;code&gt;async&lt;/code&gt;や&lt;code&gt;packaged_task&lt;/code&gt;に渡すことが出来なかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/111&#34; target=&#34;_blank&#34;&gt;#111&lt;/a&gt; &lt;code&gt;buffered_channel::try_value_pop()&lt;/code&gt;の内部で無限ループする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(un)bounded_channel&amp;lt;&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++の新しいバージョンで削除された関数オブジェクトを使用するのをやめた。(C++11で非推奨化され、C++17で削除されることになった&lt;code&gt;std::unary_function&lt;/code&gt;と&lt;code&gt;std::binary_function&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12617&#34; target=&#34;_blank&#34;&gt;Trac #12617&lt;/a&gt; OS X 10.11での&lt;code&gt;clock_gettime&lt;/code&gt;がないというコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12744&#34; target=&#34;_blank&#34;&gt;Trac #12744&lt;/a&gt; Windowsにおいて、&lt;code&gt;boost::interprocess::ipcdetail::spin_wait&lt;/code&gt;内で&lt;code&gt;winapi::set_timer_resolution&lt;/code&gt;が使われていたために、おかしな分解能の変換が行われていた。&lt;code&gt;winapi::query_timer_resolution&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub Pull #32&lt;/a&gt; &lt;code&gt;std::pointer_traits&lt;/code&gt;の要件に準拠するよう修正。C++11以降の環境では、&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;::other&lt;/code&gt;ではなく&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;&lt;/code&gt;で型をとれるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub Pull #33&lt;/a&gt; 64/32ビットプロセス間の共有において、基本クラスの&lt;code&gt;offset_ptr&lt;/code&gt;から派生クラスの&lt;code&gt;offset_ptr&lt;/code&gt;に正しく変換できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub Pull #34&lt;/a&gt; サンプルコードで&lt;code&gt;BOOST_MULTI_INDEX_MEMBER&lt;/code&gt;の代わりに&lt;code&gt;multi_index::member&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub Pull #35&lt;/a&gt; クロスコンパイルのオプションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowsシステムからの新たな実験的オプション&lt;code&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED&lt;/code&gt;を追加。このオプションは、セッションマネージャに関連付けられたレジストリの値から、共有メモリが置かれるフォルダ名として使用される一意なブートスタンプに由来する。このオプションはVista以降で動作し、デフォルトバージョンはこれ以降の安定バージョンとなるだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12745&#34; target=&#34;_blank&#34;&gt;Trac #12745&lt;/a&gt; &lt;code&gt;key_nodeptr_comp&lt;/code&gt;のキー型が&lt;code&gt;void*&lt;/code&gt;のときコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12761&#34; target=&#34;_blank&#34;&gt;Trac #12761&lt;/a&gt; &lt;code&gt;intrusive::set::swap&lt;/code&gt;で(状態を持つ)比較関数が入れ替わらない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34; name=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11842&#34; target=&#34;_blank&#34;&gt;#11842&lt;/a&gt; いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C99にあるすべての関数がAnnex F (IEC 60559) と互換があることを確実にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12066&#34; target=&#34;_blank&#34;&gt;#12066&lt;/a&gt; ベッセル関数I0、I1、K0、K1の精度を改善した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12955&#34; target=&#34;_blank&#34;&gt;Trac ##12955&lt;/a&gt; ひとつ以上のranked indexが指定された場合に、あいまいな参照になる関連バグを修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; 非正規化数の&lt;code&gt;cpp_bin_float&lt;/code&gt;を&lt;code&gt;double&lt;/code&gt;や&lt;code&gt;float&lt;/code&gt;に変換する際に、丸めが二重に行われる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12559&#34; target=&#34;_blank&#34;&gt;#12559&lt;/a&gt; 小さい整数に対する整数平方根のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_bin_float&lt;/code&gt;の符号付きゼロの変換を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; &lt;code&gt;cpp_bin_float&lt;/code&gt;の丸めコードを修正し、任意の場所で丸められるようにした。それを変換で使用できる&lt;/li&gt;
&lt;li&gt;128ビットのビットスキャン操作のパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12580&#34; target=&#34;_blank&#34;&gt;#12580&lt;/a&gt; 非常に小さな&lt;code&gt;cpp_bin_float&lt;/code&gt;の減算を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12581&#34; target=&#34;_blank&#34;&gt;#12581&lt;/a&gt; C99 Annex F (IEC 60559)互換となるようエラーハンドリングを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12627&#34; target=&#34;_blank&#34;&gt;#12627&lt;/a&gt; &lt;code&gt;cpp_int&lt;/code&gt;の自明なビット取り出しを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12625&#34; target=&#34;_blank&#34;&gt;#12625&lt;/a&gt; 一貫性のために、&lt;code&gt;ilogb&lt;/code&gt; (とそれを使用するコード) の引数がゼロのときに指数型の最小値を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;から&lt;code&gt;cpp_bin_float&lt;/code&gt;への変換を許可&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12790&#34; target=&#34;_blank&#34;&gt;#12790&lt;/a&gt; ビットが失われる問題の原因となっていた&lt;code&gt;cpp_int&lt;/code&gt;の左シフトバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12798&#34; target=&#34;_blank&#34;&gt;#12798&lt;/a&gt; 境界はあるが可変精度な&lt;code&gt;cpp_int&lt;/code&gt;において、過度に積極的な&lt;code&gt;constexpr&lt;/code&gt;最適化によって起こっていたバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel C/C++コンパイラのバージョン仕様を修正&lt;/li&gt;
&lt;li&gt;Boostの有効なバージョン番号から各要素を取り出すためのマクロ&lt;code&gt;BOOST_VERSION_NUMBER_MAJOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_MINOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_PATCH&lt;/code&gt;を追加。それぞれ、Boostのメジャーバージョン、マイナーバージョン、パッチバージョンを取得できる&lt;/li&gt;
&lt;li&gt;Visual Studioバージョンの番号付けを変更。VS2015以降は、多様なプロダクトバージョンの代わりに、コンパイラバージョンを使用するようにした &lt;a href=&#34;https://github.com/boostorg/predef/commit/0d56819d68e7bf5f411cd6240136657ebd47f672&#34; target=&#34;_blank&#34;&gt;commit 0d56819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34; name=&#34;program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7495&#34; target=&#34;_blank&#34;&gt;Trac #7495&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/program_options/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; 値の&lt;code&gt;boost::optional&lt;/code&gt;への書き込みをサポートした (Ed Catmur氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle C++ toolsetでのコンパイルで、静的リンクすべしという制限をなくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12818&#34; target=&#34;_blank&#34;&gt;#12818&lt;/a&gt; 大きな成果として、libFuzzerを使用してライブラリの脆弱性と認定問題(identified issue)を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34; name=&#34;smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocate_shared&lt;/code&gt;と&lt;code&gt;make_shared&lt;/code&gt;の配列版を、より最適でメンテナンスしやすい実装に書き直した (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;ポインタをキャストする関数のムーブ版を追加 (Chris Glover氏に感謝)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0390r0.htm&#34; target=&#34;_blank&#34;&gt;P0390R0 A Proposal to Add Pointer Cast Functions with Move Semantics to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.5&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ユーザー定義型をロギングするカスタマイゼーションポイントを提供するようにした。そのためには、型と同じ名前空間で、以下の関数を定義する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost_test_print_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ostr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArgumentType&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnitの出力フォーマットが&lt;code&gt;/log-level/&lt;/code&gt;を持つようにした&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;JUnitの出力フォーマットは、テストモジュールが多くのチェックを持つ場合、良いパフォーマンスはでません&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;バグ修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;throw_exception&lt;/code&gt;関数内で使用する例外無効指定の検出をするマクロのtypoを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/108&#34; target=&#34;_blank&#34;&gt;GitHub #108&lt;/a&gt; &lt;code&gt;runtime_config&lt;/code&gt;の文字列定数の命名規則を、大文字アンダースコア区切りから、小文字アンダースコア区切りに修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11756&#34; target=&#34;_blank&#34;&gt;Trac #11756&lt;/a&gt; &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;標準ヘッダがない環境で、&lt;code&gt;FE_*&lt;/code&gt;系マクロを使用したコードのコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12540&#34; target=&#34;_blank&#34;&gt;Trac #12540&lt;/a&gt; ユーザー定義型をロギングするカスタマイゼーションポイントを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12712&#34; target=&#34;_blank&#34;&gt;Trac #12712&lt;/a&gt; 同じ名前を持つテストケースで競合が発生していたため、&lt;code&gt;BOOST_AUTO_TEST_SUITE&lt;/code&gt;でのユニークな名前の生成に、&lt;code&gt;__COUNTER__&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12748&#34; target=&#34;_blank&#34;&gt;Trac #12748&lt;/a&gt; &lt;code&gt;VERSION&lt;/code&gt;という名前の変数を定義していたことにより発生していたコンパイルエラーを修正。小文字の変数にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12778&#34; target=&#34;_blank&#34;&gt;Trac #12778&lt;/a&gt; &lt;code&gt;nullptr&lt;/code&gt;をサポートした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub #13&lt;/a&gt; &lt;code&gt;BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST&lt;/code&gt;マクロを追加。これは&lt;code&gt;runtime_cast&lt;/code&gt;の実装のための機能だが、その目的のために使用していた&lt;code&gt;BOOST_TYPE_INDEX_REGISTER_CLASS&lt;/code&gt;マクロにその機能は含まれていなかった (実装者のChris Glover氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12739&#34; target=&#34;_blank&#34;&gt;#12739&lt;/a&gt; stl_type_index.hppでの未定義マクロによる警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34; name=&#34;type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しい型特性、&lt;code&gt;make_void&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;訳者註: これはC++17で実装される&lt;code&gt;std::void_t&lt;/code&gt;に相当し、テンプレートエイリアスが実装されたコンパイラでは&lt;code&gt;boost::void_t&lt;/code&gt;も提供される。
  &lt;code&gt;boost::make_void&lt;/code&gt;は可変長テンプレートをサポートしないコンパイラでも提供されるが、その場合は5要素を上限とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17のメンバ関数サポートを開始した：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map&lt;/code&gt;に&lt;code&gt;insert_or_assign&lt;/code&gt;と&lt;code&gt;try_emplace&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;全てのコンテナに&lt;code&gt;merge&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12508&#34; target=&#34;_blank&#34;&gt;#12508&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12645&#34; target=&#34;_blank&#34;&gt;#12645&lt;/a&gt; &lt;code&gt;recursive_variant_&lt;/code&gt;から&lt;code&gt;variant&lt;/code&gt;の構築でコンパイルエラーになる問題を修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12236&#34; target=&#34;_blank&#34;&gt;#12236&lt;/a&gt; MSVC 2015 Update 1で可変引数テンプレートを有効にしていない場合にまだ問題があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12680&#34; target=&#34;_blank&#34;&gt;#12680&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7120&#34; target=&#34;_blank&#34;&gt;#7120&lt;/a&gt; GCC6でクラッシュする問題に対してワークアラウンドを入れた (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::polymorphic_*get&lt;/code&gt;が&lt;code&gt;boost::*get&lt;/code&gt;として動作するよう、ドキュメント化していない境界値テスト(border tests)と固定値テスト(fixed tests)を作った&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.64.0リリースノート -- 1.64.0リリースノート : Multi-indexを追加 (close #156)</title>
      <link href="https://boostjp.github.io/document/version/1_64_0.html"/>
      <id>43e28d388102484a37b23ea982e8a1e57e060873:document/version/1_64_0.md</id>
      <updated>2017-04-12 17:20:55 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost 1.64.0リリースノート&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_64_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_64_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_64_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/process&#34; target=&#34;_blank&#34;&gt;Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Klemens D. MorgensternによるProcessライブラリは、以下のようなことをクロスプラットフォームに提供する&lt;ul&gt;
&lt;li&gt;子プロセスの生成&lt;/li&gt;
&lt;li&gt;子プロセスのためのストリーム生成&lt;/li&gt;
&lt;li&gt;ストリームを通じての子プロセスとの通信（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了を待機（同期、もしくは非同期に）&lt;/li&gt;
&lt;li&gt;子プロセスの終了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;既知の問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/klemens-morgenstern/boost-process/issues/67&#34; target=&#34;_blank&#34;&gt;GitHub #67&lt;/a&gt; &lt;code&gt;group.wait()&lt;/code&gt;が処理を返さない&lt;ul&gt;
&lt;li&gt;訳者註: 実際に問題が発生しているのはWindows環境でのみとされている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34;&gt;DLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一時オブジェクトへの参照をreturnで返す際の、誤った警告を抑制した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12615&#34; target=&#34;_blank&#34;&gt;#12615&lt;/a&gt; オブジェクトのアドレスを直接取得する代わりに、&lt;code&gt;boost::addressof&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12053&#34; target=&#34;_blank&#34;&gt;#12053&lt;/a&gt; インクルードするBoostのヘッダファイルは、ダブルクォートで囲むのをやめて山カッコで囲むようにした&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;li&gt;テストを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.7以前の32bit x86コンパイラで正しくない64bitアトミック命令が出力されてしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;欠陥検出マクロ&lt;code&gt;BOOST_NO_CXX11_SFINAE_EXPR&lt;/code&gt;を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_SFINAE_EXPR&lt;/code&gt;は以前からあったが、&lt;code&gt;CXX11&lt;/code&gt;が名前に含まれたマクロがなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12749&#34; target=&#34;_blank&#34;&gt;Trac #12749&lt;/a&gt; &lt;code&gt;container::pmr::polymorphic_allocator&lt;/code&gt;のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11333&#34; target=&#34;_blank&#34;&gt;Trac #11333&lt;/a&gt; &lt;code&gt;boost::container::basic_string&lt;/code&gt;と&lt;code&gt;boost::basic_string_view&lt;/code&gt;を相互運用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/container/pull/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; &lt;code&gt;emplace_back&lt;/code&gt;は&lt;code&gt;*end()&lt;/code&gt;ではなく&lt;code&gt;back()&lt;/code&gt;を返すべき&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいAPIとして&lt;code&gt;call/cc&lt;/code&gt;を実装した&lt;ul&gt;
&lt;li&gt;訳者註: いわゆるSchemeなどに代表されるCall with Current Continuationのことである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execution-context&lt;/code&gt;が(v1,v2ともに)廃止予定となった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12719&#34; target=&#34;_blank&#34;&gt;#12719&lt;/a&gt; &lt;code&gt;mingw-w64&lt;/code&gt;でセグメンテーションフォルトする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/38&#34; target=&#34;_blank&#34;&gt;#38&lt;/a&gt; macOSで&lt;code&gt;context_entry()&lt;/code&gt;がクラッシュする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/context/issues/39&#34; target=&#34;_blank&#34;&gt;#39&lt;/a&gt; Clang 3.8でサポートされない&lt;code&gt;.cpu&lt;/code&gt;ディレクティブがAArch64で使われていたことによってビルド出来なかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#conversion&#34; name=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントをQuickbookに移行した (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;テストでのメモリリークを修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#core&#34; name=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の&lt;code&gt;constexpr&lt;/code&gt;とC++11のSFINAE式を実装したコンパイラにおいて、&lt;code&gt;constexpr&lt;/code&gt;修飾された&lt;code&gt;addressof&lt;/code&gt;を実装した (Glen Fernandes氏に感謝)
  サポートされない場合には&lt;code&gt;BOOST_CORE_NO_CONSTEXPR_ADDRESSOF&lt;/code&gt;マクロが定義される&lt;/li&gt;
&lt;li&gt;コンテナ要素をテストするための&lt;code&gt;BOOST_TEST_ALL_EQ&lt;/code&gt;マクロと&lt;code&gt;BOOST_TEST_ALL_WITH&lt;/code&gt;マクロを&lt;code&gt;lightweight_test.hpp&lt;/code&gt;に追加した (Bjorn Reese氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#coroutine2&#34; name=&#34;coroutine2&#34;&gt;Coroutine2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/coroutine2/issues/4&#34; target=&#34;_blank&#34;&gt;#4&lt;/a&gt; &lt;code&gt;coroutine2&amp;lt;&amp;gt;&lt;/code&gt;が&lt;code&gt;std::bind&lt;/code&gt;を受け取れなかった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#dll&#34; name=&#34;dll&#34;&gt;DLL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows CEでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;ポインタからシンボルの位置を取得する&lt;code&gt;boost:dll::symbol_location_ptr&lt;/code&gt;関数を追加。(たとえば&lt;code&gt;void*&lt;/code&gt;からの)間接参照ではシンボル位置を取得できなかった&lt;/li&gt;
&lt;li&gt;メンバポインタに対する&lt;code&gt;detail::aggressive_ptr_cast&lt;/code&gt;の未定義動作を修正&lt;/li&gt;
&lt;li&gt;実験的なスマートインポートでのリークを修正&lt;/li&gt;
&lt;li&gt;警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;行列変換のベースを、Boost.uBLASの代わりにBoost.QVMを使用するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ublas_transformer&lt;/code&gt;を&lt;code&gt;matrix_transformer&lt;/code&gt;に名称変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のコンストラクタに、明示的な変更器(modifier)として&lt;code&gt;index::dynamic_*&lt;/code&gt;パラメータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strategy::area::huiller&lt;/code&gt;を&lt;code&gt;strategy::area::spherical&lt;/code&gt;で置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した問題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/363&#34; target=&#34;_blank&#34;&gt;GitHub #363&lt;/a&gt; &lt;code&gt;geometry/index/parameters.hpp&lt;/code&gt;でのインクルード漏れを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/364&#34; target=&#34;_blank&#34;&gt;GitHub #364&lt;/a&gt; 異なるpoint型を使用したときに&lt;code&gt;within(Linear, Areal)&lt;/code&gt;がコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/370&#34; target=&#34;_blank&#34;&gt;GitHub #370&lt;/a&gt; &lt;code&gt;Buffer&lt;/code&gt;に入力として&lt;code&gt;Ring&lt;/code&gt;を与えたときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決したチケット&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11930&#34; target=&#34;_blank&#34;&gt;Trac #11930&lt;/a&gt; &lt;code&gt;area::huiller&lt;/code&gt;戦略が不正確&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11931&#34; target=&#34;_blank&#34;&gt;Trac #11931&lt;/a&gt; pole encirclingなポリゴンの球面積が間違っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12566&#34; target=&#34;_blank&#34;&gt;Trac #12566&lt;/a&gt; &lt;code&gt;pair&lt;/code&gt;の値に生ポインタが含まれている場合に&lt;code&gt;equal_to&amp;lt;&amp;gt;&lt;/code&gt;内でテンプレートのインスタンス化が曖昧になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12861&#34; target=&#34;_blank&#34;&gt;Trac #12861&lt;/a&gt; stdlibc++ (gcc 4.8.2)で&lt;code&gt;rtree&lt;/code&gt;がセグメンテーションフォルトになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12885&#34; target=&#34;_blank&#34;&gt;Trac #12885&lt;/a&gt; &lt;code&gt;throw&lt;/code&gt;の代わりに&lt;code&gt;BOOST_THROW_EXCEPTION&lt;/code&gt;を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_turn_info&lt;/code&gt;内の&lt;code&gt;distance_measure&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/100&#34; target=&#34;_blank&#34;&gt;#100&lt;/a&gt; ASIO: &lt;code&gt;notify&lt;/code&gt;での処理が足りないことで他のファイバーが実行されなくなる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/106&#34; target=&#34;_blank&#34;&gt;#106&lt;/a&gt; &lt;code&gt;fixed_stack&lt;/code&gt;アロケータを&lt;code&gt;async&lt;/code&gt;や&lt;code&gt;packaged_task&lt;/code&gt;に渡すことが出来なかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fiber/issues/111&#34; target=&#34;_blank&#34;&gt;#111&lt;/a&gt; &lt;code&gt;buffered_channel::try_value_pop()&lt;/code&gt;の内部で無限ループする問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(un)bounded_channel&amp;lt;&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++の新しいバージョンで削除された関数オブジェクトを使用するのをやめた。(C++11で非推奨化され、C++17で削除されることになった&lt;code&gt;std::unary_function&lt;/code&gt;と&lt;code&gt;std::binary_function&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12617&#34; target=&#34;_blank&#34;&gt;Trac #12617&lt;/a&gt; OS X 10.11での&lt;code&gt;clock_gettime&lt;/code&gt;がないというコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12744&#34; target=&#34;_blank&#34;&gt;Trac #12744&lt;/a&gt; Windowsにおいて、&lt;code&gt;boost::interprocess::ipcdetail::spin_wait&lt;/code&gt;内で&lt;code&gt;winapi::set_timer_resolution&lt;/code&gt;が使われていたために、おかしな分解能の変換が行われていた。&lt;code&gt;winapi::query_timer_resolution&lt;/code&gt;を使用するよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/32&#34; target=&#34;_blank&#34;&gt;GitHub Pull #32&lt;/a&gt; &lt;code&gt;std::pointer_traits&lt;/code&gt;の要件に準拠するよう修正。C++11以降の環境では、&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;::other&lt;/code&gt;ではなく&lt;code&gt;offset_ptr&amp;lt;T&amp;gt;::rebind&amp;lt;U&amp;gt;&lt;/code&gt;で型をとれるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/33&#34; target=&#34;_blank&#34;&gt;GitHub Pull #33&lt;/a&gt; 64/32ビットプロセス間の共有において、基本クラスの&lt;code&gt;offset_ptr&lt;/code&gt;から派生クラスの&lt;code&gt;offset_ptr&lt;/code&gt;に正しく変換できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/34&#34; target=&#34;_blank&#34;&gt;GitHub Pull #34&lt;/a&gt; サンプルコードで&lt;code&gt;BOOST_MULTI_INDEX_MEMBER&lt;/code&gt;の代わりに&lt;code&gt;multi_index::member&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/interprocess/pull/35&#34; target=&#34;_blank&#34;&gt;GitHub Pull #35&lt;/a&gt; クロスコンパイルのオプションを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windowsシステムからの新たな実験的オプション&lt;code&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED&lt;/code&gt;を追加。このオプションは、セッションマネージャに関連付けられたレジストリの値から、共有メモリが置かれるフォルダ名として使用される一意なブートスタンプに由来する。このオプションはVista以降で動作し、デフォルトバージョンはこれ以降の安定バージョンとなるだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12745&#34; target=&#34;_blank&#34;&gt;Trac #12745&lt;/a&gt; &lt;code&gt;key_nodeptr_comp&lt;/code&gt;のキー型が&lt;code&gt;void*&lt;/code&gt;のときコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12761&#34; target=&#34;_blank&#34;&gt;Trac #12761&lt;/a&gt; &lt;code&gt;intrusive::set::swap&lt;/code&gt;で(状態を持つ)比較関数が入れ替わらない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#lexical_cast&#34; name=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11842&#34; target=&#34;_blank&#34;&gt;#11842&lt;/a&gt; いくつかの警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C99にあるすべての関数がAnnex F (IEC 60559) と互換があることを確実にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12066&#34; target=&#34;_blank&#34;&gt;#12066&lt;/a&gt; ベッセル関数I0、I1、K0、K1の精度を改善した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12955&#34; target=&#34;_blank&#34;&gt;Trac ##12955&lt;/a&gt; ひとつ以上のranked indexが指定された場合に、あいまいな参照になる関連バグを修正&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; 非正規化数の&lt;code&gt;cpp_bin_float&lt;/code&gt;を&lt;code&gt;double&lt;/code&gt;や&lt;code&gt;float&lt;/code&gt;に変換する際に、丸めが二重に行われる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12559&#34; target=&#34;_blank&#34;&gt;#12559&lt;/a&gt; 小さい整数に対する整数平方根のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_bin_float&lt;/code&gt;の符号付きゼロの変換を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12527&#34; target=&#34;_blank&#34;&gt;#12527&lt;/a&gt; &lt;code&gt;cpp_bin_float&lt;/code&gt;の丸めコードを修正し、任意の場所で丸められるようにした。それを変換で使用できる&lt;/li&gt;
&lt;li&gt;128ビットのビットスキャン操作のパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12580&#34; target=&#34;_blank&#34;&gt;#12580&lt;/a&gt; 非常に小さな&lt;code&gt;cpp_bin_float&lt;/code&gt;の減算を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12581&#34; target=&#34;_blank&#34;&gt;#12581&lt;/a&gt; C99 Annex F (IEC 60559)互換となるようエラーハンドリングを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12627&#34; target=&#34;_blank&#34;&gt;#12627&lt;/a&gt; &lt;code&gt;cpp_int&lt;/code&gt;の自明なビット取り出しを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12625&#34; target=&#34;_blank&#34;&gt;#12625&lt;/a&gt; 一貫性のために、&lt;code&gt;ilogb&lt;/code&gt; (とそれを使用するコード) の引数がゼロのときに指数型の最小値を返すよう修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;から&lt;code&gt;cpp_bin_float&lt;/code&gt;への変換を許可&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12790&#34; target=&#34;_blank&#34;&gt;#12790&lt;/a&gt; ビットが失われる問題の原因となっていた&lt;code&gt;cpp_int&lt;/code&gt;の左シフトバグを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12798&#34; target=&#34;_blank&#34;&gt;#12798&lt;/a&gt; 境界はあるが可変精度な&lt;code&gt;cpp_int&lt;/code&gt;において、過度に積極的な&lt;code&gt;constexpr&lt;/code&gt;最適化によって起こっていたバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel C/C++コンパイラのバージョン仕様を修正&lt;/li&gt;
&lt;li&gt;Boostの有効なバージョン番号から各要素を取り出すためのマクロ&lt;code&gt;BOOST_VERSION_NUMBER_MAJOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_MINOR&lt;/code&gt;、&lt;code&gt;BOOST_VERSION_NUMBER_PATCH&lt;/code&gt;を追加。それぞれ、Boostのメジャーバージョン、マイナーバージョン、パッチバージョンを取得できる&lt;/li&gt;
&lt;li&gt;Visual Studioバージョンの番号付けを変更。VS2015以降は、多様なプロダクトバージョンの代わりに、コンパイラバージョンを使用するようにした &lt;a href=&#34;https://github.com/boostorg/predef/commit/0d56819d68e7bf5f411cd6240136657ebd47f672&#34; target=&#34;_blank&#34;&gt;commit 0d56819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#program_options&#34; name=&#34;program_options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7495&#34; target=&#34;_blank&#34;&gt;Trac #7495&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/program_options/pull/18&#34; target=&#34;_blank&#34;&gt;GitHub #18&lt;/a&gt; 値の&lt;code&gt;boost::optional&lt;/code&gt;への書き込みをサポートした (Ed Catmur氏に感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle C++ toolsetでのコンパイルで、静的リンクすべしという制限をなくした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12818&#34; target=&#34;_blank&#34;&gt;#12818&lt;/a&gt; 大きな成果として、libFuzzerを使用してライブラリの脆弱性と認定問題(identified issue)を修正した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#smart_ptr&#34; name=&#34;smart_ptr&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocate_shared&lt;/code&gt;と&lt;code&gt;make_shared&lt;/code&gt;の配列版を、より最適でメンテナンスしやすい実装に書き直した (Glen Fernandes氏に感謝)&lt;/li&gt;
&lt;li&gt;ポインタをキャストする関数のムーブ版を追加 (Chris Glover氏に感謝)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0390r0.htm&#34; target=&#34;_blank&#34;&gt;P0390R0 A Proposal to Add Pointer Cast Functions with Move Semantics to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#test&#34; name=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Test v3.5&lt;ul&gt;
&lt;li&gt;詳細は&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/test/doc/html/boost_test/change_log.html&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ユーザー定義型をロギングするカスタマイゼーションポイントを提供するようにした。そのためには、型と同じ名前空間で、以下の関数を定義する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost_test_print_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ostr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArgumentType&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnitの出力フォーマットが&lt;code&gt;/log-level/&lt;/code&gt;を持つようにした&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;JUnitの出力フォーマットは、テストモジュールが多くのチェックを持つ場合、良いパフォーマンスはでません&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;バグ修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/107&#34; target=&#34;_blank&#34;&gt;GitHub #107&lt;/a&gt; &lt;code&gt;throw_exception&lt;/code&gt;関数内で使用する例外無効指定の検出をするマクロのtypoを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/108&#34; target=&#34;_blank&#34;&gt;GitHub #108&lt;/a&gt; &lt;code&gt;runtime_config&lt;/code&gt;の文字列定数の命名規則を、大文字アンダースコア区切りから、小文字アンダースコア区切りに修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/11756&#34; target=&#34;_blank&#34;&gt;Trac #11756&lt;/a&gt; &lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;標準ヘッダがない環境で、&lt;code&gt;FE_*&lt;/code&gt;系マクロを使用したコードのコンパイルが通らない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12540&#34; target=&#34;_blank&#34;&gt;Trac #12540&lt;/a&gt; ユーザー定義型をロギングするカスタマイゼーションポイントを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12712&#34; target=&#34;_blank&#34;&gt;Trac #12712&lt;/a&gt; 同じ名前を持つテストケースで競合が発生していたため、&lt;code&gt;BOOST_AUTO_TEST_SUITE&lt;/code&gt;でのユニークな名前の生成に、&lt;code&gt;__COUNTER__&lt;/code&gt;を使用するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12748&#34; target=&#34;_blank&#34;&gt;Trac #12748&lt;/a&gt; &lt;code&gt;VERSION&lt;/code&gt;という名前の変数を定義していたことにより発生していたコンパイルエラーを修正。小文字の変数にした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12778&#34; target=&#34;_blank&#34;&gt;Trac #12778&lt;/a&gt; &lt;code&gt;nullptr&lt;/code&gt;をサポートした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_index&#34; name=&#34;type_index&#34;&gt;TypeIndex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/type_index/pull/13&#34; target=&#34;_blank&#34;&gt;GitHub #13&lt;/a&gt; &lt;code&gt;BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST&lt;/code&gt;マクロを追加。これは&lt;code&gt;runtime_cast&lt;/code&gt;の実装のための機能だが、その目的のために使用していた&lt;code&gt;BOOST_TYPE_INDEX_REGISTER_CLASS&lt;/code&gt;マクロにその機能は含まれていなかった (実装者のChris Glover氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12739&#34; target=&#34;_blank&#34;&gt;#12739&lt;/a&gt; stl_type_index.hppでの未定義マクロによる警告を修正&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#type_traits&#34; name=&#34;type_traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しい型特性、&lt;code&gt;make_void&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;訳者註: これはC++17で実装される&lt;code&gt;std::void_t&lt;/code&gt;に相当し、テンプレートエイリアスが実装されたコンパイラでは&lt;code&gt;boost::void_t&lt;/code&gt;も提供される。
  &lt;code&gt;boost::make_void&lt;/code&gt;は可変長テンプレートをサポートしないコンパイラでも提供されるが、その場合は5要素を上限とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++17のメンバ関数サポートを開始した：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map&lt;/code&gt;に&lt;code&gt;insert_or_assign&lt;/code&gt;と&lt;code&gt;try_emplace&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;全てのコンテナに&lt;code&gt;merge&lt;/code&gt;と&lt;code&gt;extract&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_64_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12508&#34; target=&#34;_blank&#34;&gt;#12508&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12645&#34; target=&#34;_blank&#34;&gt;#12645&lt;/a&gt; &lt;code&gt;recursive_variant_&lt;/code&gt;から&lt;code&gt;variant&lt;/code&gt;の構築でコンパイルエラーになる問題を修正 (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12236&#34; target=&#34;_blank&#34;&gt;#12236&lt;/a&gt; MSVC 2015 Update 1で可変引数テンプレートを有効にしていない場合にまだ問題があったので修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/12680&#34; target=&#34;_blank&#34;&gt;#12680&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7120&#34; target=&#34;_blank&#34;&gt;#7120&lt;/a&gt; GCC6でクラッシュする問題に対してワークアラウンドを入れた (Mikhail Maksimov氏に感謝)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::polymorphic_*get&lt;/code&gt;が&lt;code&gt;boost::*get&lt;/code&gt;として動作するよう、ドキュメント化していない境界値テスト(border tests)と固定値テスト(fixed tests)を作った&lt;/li&gt;
&lt;li&gt;CIのテストで、&lt;code&gt;address&lt;/code&gt;、&lt;code&gt;leak&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt;のサニタイザーを走らせるようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>旧Boost日本語化プロジェクト -- static_assertのドキュメント : リンクと階層を整理</title>
      <link href="https://boostjp.github.io/archive/boost_docs.html"/>
      <id>a7ef6b611702c72f81d30606e62126995a04905b:archive/boost_docs.md</id>
      <updated>2017-04-10 14:35:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;旧Boost日本語化プロジェクト&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここには、cppllコミュニティで行われていたBoost翻訳プロジェクトのドキュメントを、移植して残しておく。移植元のドキュメントは、&lt;a href=&#34;https://github.com/boostjp/old_boostjp_site&#34; target=&#34;_blank&#34;&gt;boostjp/old_boostjp_site&lt;/a&gt;リポジトリに、HTMLファイルとして保存してある。&lt;/p&gt;
&lt;p&gt;これらのドキュメントはBoost 1.31.0当時のものであり、現在でも有効とは限らないことに注意してほしい。&lt;/p&gt;
&lt;p&gt;また、これらのドキュメントは&lt;code&gt;/archive&lt;/code&gt;以下の置いているため、メンテナンスはされていない。メンテナンスする場合は、そのドキュメントを&lt;code&gt;/document&lt;/code&gt;以下に移動してメンテナンスしてほしい。&lt;/p&gt;
&lt;h2&gt;ドキュメント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/document/generic_programming.html&#34;&gt;ジェネリックプログラミング手法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/document/generic_exception_safety.html&#34;&gt;ジェネリックコンポーネントにおける例外安全性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/document/error_handling.html&#34;&gt;エラーと例外のハンドリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/document/int_const_guidelines.html&#34;&gt;Coding Guidelines for Integral Constant Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs.html&#34;&gt;各ライブラリの翻訳ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>各ライブラリの翻訳ドキュメント -- static_assertのドキュメント : リンクと階層を整理</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs.html"/>
      <id>a7ef6b611702c72f81d30606e62126995a04905b:archive/boost_docs/libs.md</id>
      <updated>2017-04-10 14:35:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;各ライブラリの翻訳ドキュメント&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、Boost 1.31.0時点での各ライブラリの翻訳ドキュメントを掲載する。&lt;/p&gt;
&lt;p&gt;最新バージョンへの追従は行っていないことに注意されたし。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ライブラリ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/array.html&#34;&gt;array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL に準拠した定数サイズの配列のラッパコンテナ。Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/bind.html&#34;&gt;bind&lt;/a&gt; and &lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数、オブジェクト、ポインタ、メンバ関数のための汎用的なバインダ。 Peter Dimov 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/compatibility.html&#34;&gt;compatibility&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準に準拠しないプラットフォームでのライブラリの利用に役立つ。Ralf Grosse-Kunstleve and Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/compose.html&#34;&gt;compose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;STL の為の関数合成アダプタ Nicolai Josuttis 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/concept_check.html&#34;&gt;concept_check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックプログラミングのためのツール群。 Jeremy Siek 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/conversion.html&#34;&gt;conversion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;数学的、多相的、辞書的キャスト Dave Abrahams and Kevlin Henney 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;date_time&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;日付/時間ライブラリ Jeff Garland 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/disjoint_sets.html&#34;&gt;disjoint_sets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;互いに素な集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/format.html&#34;&gt;format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型安全な printf 風の書式化操作。Samuel Krempp 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;function&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;遅延呼び出し及びコールバックのための関数オブジェクトラッパ。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/functional.html&#34;&gt;functional&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;機能強化された関数オブジェクトアダプタ。 Mark Rodgers 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/graph.html&#34;&gt;graph&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;汎用グラフコンポーネント及びアルゴリズム。 Jeremy Siek and a University of Notre Dame team 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/io/ios_state.html&#34;&gt;io state savers&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;入出力の状態を保存して、データが化けるのを防ぐ。 Daryle Walker 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/multi_array.html&#34;&gt;muti_array&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メモリ上で連続したデータの配列のための多次元コンテナとアダプタ。 Ron Garcia 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/preprocessor.html&#34;&gt;preprocessor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;繰り返しと再帰を含むプリプロセッサメタプログラミングツール群。 Vesa Karvonen 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/random.html&#34;&gt;random&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成のためのシステム一式。 Jens Maurer 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/signals.html&#34;&gt;signals&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;管理されたシグナルとスロットのコールバックでの実装。 Doug Gregor 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.html&#34;&gt;static_assert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;静的アサート(コンパイル時アサート)。 John Maddock 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/smart_ptr.html&#34;&gt;smart_ptr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5つのスマートポインタクラステンプレート Greg Colvin, Beman Dawes, Peter Dimov, and Darin Adler 作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/type_traits.html&#34;&gt;type_traits&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の基本的な特徴のためのテンプレート。 John Maddock, Steve Cleary, et al 作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>§ヘッダファイル（Header） &amp;lt;[boost/static_assert.hpp](http://www.boost.org/doc/libs/1_31_0/boost/static_assert.hpp)&amp;gt; -- static_assertのドキュメント : リンクと階層を整理</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/static_assert.html"/>
      <id>a7ef6b611702c72f81d30606e62126995a04905b:archive/boost_docs/libs/static_assert.md</id>
      <updated>2017-04-10 14:35:59 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;§ヘッダファイル（Header） &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/static_assert.hpp&#34; target=&#34;_blank&#34;&gt;boost/static_assert.hpp&lt;/a&gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ヘッダファイル &amp;lt;boost/static_assert.hpp&amp;gt;はマクロ、BOOST_STATIC_ASSERT(x) を提供する。 BOOST_STATIC_ASSERT(x) は&lt;a href=&#34;https://boostjp.github.io/archive/document/int_const_guidelines.html&#34;&gt;汎整数定数式&lt;/a&gt; &lt;em&gt;x&lt;/em&gt; を評価した結果、偽であるならばコンパイル時エラーメッセージを生成する。 つまり、コンパイル時に、assert マクロと同等の働きをするものである。 これは、「コンパイル時アサート（compile-time-assertion）」という名で知られているものであるが、このドキュメントでは「静的アサート（static assertion）」と記述することとする。 条件が真である時、このマクロはいかなるコードやデーターを生成しないことに注意すること。加えて、このマクロは namespace もしくは、クラス、もしくは、関数のスコープ内で利用される事にも注意すること。 このマクロがテンプレート内で利用されているばあいは、テンプレートより実体が生成される時に診断が実行される。 これは、特にテンプレート・パラメータを確認することに役立つ。&lt;/p&gt;
&lt;p&gt;BOOST_STATIC_ASSERTの狙いのうちの1つは、可読性の高いエラー・メッセージを生成することである。 これらは、ユーザーにサポート外の方法でライブラリを利用しようとしたことを直接的に示す。 エラーメッセージがコンパイラ間で明らかに異なっていても、あなたは少なくとも、&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Illegal use of COMPILE_TIME_ASSERTION_FAILURE&amp;lt;false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;これに似た記述を見ることになるだろう。&lt;/p&gt;
&lt;p&gt;それは、少なからず目立つはずである。&lt;/p&gt;
&lt;p&gt;あなたは、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.html#class&#34;&gt;クラス&lt;/a&gt;、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.html#function&#34;&gt;関数&lt;/a&gt;、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert.html#namespace&#34;&gt;namespace&lt;/a&gt; のスコープにおいて、宣言を置くことができる箇所の全てで、BOOST_STATIC_ASSERT を利用できる。次に例を示す。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;namespace&#34;&gt;&lt;/a&gt;§namespaceスコープでの使用。(Use at namespace scope)&lt;/h2&gt;
&lt;p&gt;マクロは、常に真でなければならない前提条件がある場合に、namespace スコープで使うことが出来る。 通常、これはいくつかのプラットホーム依存の条件を意味する。 例えば、我々が &lt;strong&gt;&lt;code&gt;int&lt;/code&gt;&lt;/strong&gt; が少なくとも32ビット以上あり、&lt;strong&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/strong&gt; が符号無しであることを必要としていると想定する。 我々は次のようにして、コンパイル時にこれを検査することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;climits&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cwchar&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_conditions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CHAR_BIT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WCHAR_MIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace my_conditions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この例での、&lt;em&gt;my_conditions&lt;/em&gt; namespace の使用に関して、若干の説明が必要だろう。 マクロBOOST_STATIC_ASSERT は目的実現の為に &lt;strong&gt;typedef&lt;/strong&gt; 宣言を生成する。ここで、typedef は名前を持たなければならないので、マクロは仮の名に &lt;code&gt;__LINE__&lt;/code&gt; の値(現在の行番号)を連結して一意の名前を自動的に生成する。 BOOST_STATIC_ASSERTがクラスまたは関数のスコープで使われる場合は、１行にマクロを複数記述しない限りにおいて、BOOST_STATIC_ASSERTの使用によって各々のスコープにおいて一意の名前が生成されることが保証される。 しかしながら、マクロがヘッダにおいて利用されるとき、namespace は複数のヘッダ間に渡ることがありうる。そして、同一の namespace を持つ複数のヘッダの、同じ行においてマクロが使用されたときに、同じ名前をもつ宣言を複数箇所で行うことになるかもしれない。 コンパイラは二重のtypedef宣言を暗黙のうちに無視しなければならないが、しかしながら、多くはそうしないが為に、意図しないエラーを引き起こしてしまう（また、仮に二重宣言を無視するにしても、そのような場合には警告を生成しても良いとなっている）。 よって、あなたがヘッダファイルにおいて、namespace スコープでBOOST_STATIC_ASSERTを使うならば、そのような潜在的な問題を避けるために、そのヘッダに特有の namespace で、BOOST_STATIC_ASSERT を囲まねばならない。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;function&#34;&gt;&lt;/a&gt;§関数スコープでの使用（Use at function scope）&lt;/h2&gt;
&lt;p&gt;マクロは典型的にテンプレート関数内において、テンプレート引数の検査が必要な時に利用される。 我々がiteratorによって捜査対象を指示される algorithm（iterator を受け取るテンプレート関数）を所持しており、それがランダムアクセスiterator を必要とすると想定する。 想定条件に合わない iterator を用いて algorithm が実体化された場合は、最終的にエラーが生成されることになるが、しかし、これは深く入れ子になった先のテンプレートの実体化によって引き起こされたエラーかもしれず、このことにが、ユーザーにとって何がエラーの原因かを特定することが難しくしている。 1つの選択としてはテンプレートのトップのレベルで、iterator の種別のコンパイル時判定を追加することである。もし、条件が合わない場合には、ユーザーにテンプレートが誤用されていることを明らかにするような形でエラーを生成できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/type_traits.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// this template can only be used with&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// random access iterators...&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// このテンプレートは、ランダムアクセス iterator でのみ利用可能である。&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator_category&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_convertible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random_access_iterator_tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// detail goes here...&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// 詳細は、これ以降...&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;注: assertマクロのまわりの特別な括弧の組は、boost::is_convertible テンプレート中の「,」をプリプロセッサによってマクロ引数分離子として解釈されることを防いでいる。 boost::is_convertible の変換先の型が参照型であるため、若干のコンパイラにおいて型変換がユーザー定義コンストラクタを使用する時に boost::is_convvertible の使用に問題が生じる（いずれにしても、itarator tag クラスが、コピーコンストラクト可能であるという保証がない）&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;class&#34;&gt;&lt;/a&gt;§クラス・スコープでの使用（Use at class scope）&lt;/h2&gt;
&lt;p&gt;マクロは典型的にテンプレートクラス内で使用される。 例えば、我々がテンプレート引数に最低でも16bit精度以上で符号無しの整数型を必要とするテンプレートクラスを利用する場合、我々はこの要請次のようにすることで満たすことが出来る：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;climits&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;myclass&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CHAR_BIT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;
                        &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_integer&lt;/span&gt;
                        &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_signed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
   &lt;span class=&#34;cm&#34;&gt;/* details here */&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// 実装の詳細 はここに記述する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;§どのように実現されているか（How it works）&lt;/h2&gt;
&lt;p&gt;BOOST_STATIC_ASSERTは、次のようにして実現される。 STATIC_ASSERTION_FAILURE クラスが次のように定義されている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATIC_ASSERTION_FAILURE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATIC_ASSERTION_FAILURE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;鍵となる点は、未定義式 sizeof(STATIC_ASSERTION_FAILURE&amp;lt;0&amp;gt;) によって引き起こされるエラー・メッセージが多種多様なコンパイラ間で似通った表現である傾向があるということである。 動作原理の残りは BOOST_STATIC_ASSERT が、sizeof式をtypedef中に入れ込む手法である。 ここのマクロの使用は、いくぶん見苦しい。 boostの開発メンバーは、static assert をマクロの使用避けて作成しようとかなりの努力を費やした。しかしながら、それらは何れも成功しなかった。 結論として、static assert を namespace、関数、クラススコープでうまく利用出来るようにするにはマクロの醜さを考慮の外に置くしかないということだった。&lt;/p&gt;
&lt;h2&gt;§テストプログラム（Test Programs ）&lt;/h2&gt;
&lt;p&gt;以下のテストプログラムが、このライブラリと共に提供される：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;テスト･プログラム&lt;/th&gt;
&lt;th&gt;コンパイル可能か？&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;使用法の例、および、コンパイラの互換性テストの為にコンパイルされるべきである。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_1.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_1.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プラットフォーム依存&lt;/td&gt;
&lt;td&gt;namespace スコープ・テストプログラムがコンパイルできるかは、プラットフォームに依存する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_2.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_2.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;関数スコープ・テストプログラム。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_3.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_3.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;クラススコープ・テストプログラム。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_1.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_1.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;namespace スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_2.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_2.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートの関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_3.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_3.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートのクラススコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_4.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_4.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートのクラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_5.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_5.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;テンプレートクラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_6.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_6.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;テンプレートクラスのメンバー関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_7.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_7.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;クラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_8.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_8.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_9.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_9.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;関数スコープでの失敗の例(その２)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 27th Nov 2000&lt;/p&gt;
&lt;p&gt;Documentation © Copyright John Maddock 2000. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Based on contributions by Steve Cleary and John Maddock.&lt;/p&gt;
&lt;p&gt;Maintained by &lt;a href=&#34;mailto:John_Maddock@compuserve.com&#34;&gt;John Maddock&lt;/a&gt;, the latest version of this file can be found at &lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;www.boost.org&lt;/a&gt;, and the boost discussion list at &lt;a href=&#34;http://www.yahoogroups.com/list/boost&#34; target=&#34;_blank&#34;&gt;www.yahoogroups.com/list/boost&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;日本語版第１版 2003年 2月 14日(原文 2002/11/27日版ベース)&lt;/p&gt;
&lt;p&gt;Japanese version - based 27th Nov 2000 - Revised 14th Feb 2003&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:mikarim@m18.alpha-net.ne.jp&#34;&gt;mikari(Mika.N)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project &#34;Boost Japanese Translation&#34; was proposed by &lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルドキュメントは、 西暦 2000年 John Maddock によって作成された。&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。 このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。 また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;原文は、Steve Cleary と John Maddock の投稿に基づいており、&lt;a href=&#34;mailto:John_Maddock@compuserve.com&#34;&gt;John Maddock&lt;/a&gt; によって 保守されている。最新版は &lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;www.boost.org&lt;/a&gt;より得ることが出来る。 また、議論の記録は次の場所で参照できる（&lt;a href=&#34;http://www.yahoogroups.com/list/boost&#34; target=&#34;_blank&#34;&gt;www.yahoogroups.com/list/boost&lt;/a&gt;）&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert.md -- static_assertのドキュメント : リンクと階層を整理</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/static_assert/static_assert.html"/>
      <id>a7ef6b611702c72f81d30606e62126995a04905b:archive/boost_docs/libs/static_assert/static_assert.md</id>
      <updated>2017-04-10 14:35:59 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/archive/boost_docs/libs/static_assert/static_assert.md b/archive/boost_docs/libs/static_assert/static_assert.md
deleted file mode 100644
index 5d16d75..0000000
--- a/archive/boost_docs/libs/static_assert/static_assert.md
+++ /dev/null
@@ -1,145 +0,0 @@
-# §ヘッダファイル（Header） &amp;amp;lt;[boost/static_assert.hpp](http://www.boost.org/doc/libs/1_31_0/boost/static_assert.hpp)&amp;amp;gt;
-
-ヘッダファイル &amp;amp;lt;boost/static_assert.hpp&amp;amp;gt;はマクロ、BOOST_STATIC_ASSERT(x) を提供する。 BOOST_STATIC_ASSERT(x) は[汎整数定数式](../../document/int_const_guidelines.md) *x* を評価した結果、偽であるならばコンパイル時エラーメッセージを生成する。 つまり、コンパイル時に、assert マクロと同等の働きをするものである。 これは、「コンパイル時アサート（compile-time-assertion）」という名で知られているものであるが、このドキュメントでは「静的アサート（static assertion）」と記述することとする。 条件が真である時、このマクロはいかなるコードやデーターを生成しないことに注意すること。加えて、このマクロは namespace もしくは、クラス、もしくは、関数のスコープ内で利用される事にも注意すること。 このマクロがテンプレート内で利用されているばあいは、テンプレートより実体が生成される時に診断が実行される。 これは、特にテンプレート・パラメータを確認することに役立つ。
-
-BOOST_STATIC_ASSERTの狙いのうちの1つは、可読性の高いエラー・メッセージを生成することである。 これらは、ユーザーにサポート外の方法でライブラリを利用しようとしたことを直接的に示す。 エラーメッセージがコンパイラ間で明らかに異なっていても、あなたは少なくとも、
-
-```
-Illegal use of COMPILE_TIME_ASSERTION_FAILURE&amp;lt;false&amp;gt;
-```
-
-これに似た記述を見ることになるだろう。
-
-それは、少なからず目立つはずである。
-
-あなたは、[クラス](#class)、[関数](#function)、[namespace](#namespace) のスコープにおいて、宣言を置くことができる箇所の全てで、BOOST_STATIC_ASSERT を利用できる。次に例を示す。
-
-## &amp;lt;a name=&amp;#34;namespace&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;§namespaceスコープでの使用。(Use at namespace scope)
-
-マクロは、常に真でなければならない前提条件がある場合に、namespace スコープで使うことが出来る。 通常、これはいくつかのプラットホーム依存の条件を意味する。 例えば、我々が **`int`** が少なくとも32ビット以上あり、**`wchar_t`** が符号無しであることを必要としていると想定する。 我々は次のようにして、コンパイル時にこれを検査することができる。
-
-``` cpp
-#include &amp;lt;climits&amp;gt;
-#include &amp;lt;cwchar&amp;gt;
-#include &amp;lt;boost/static_assert.hpp&amp;gt;
-
-namespace my_conditions {
-
-BOOST_STATIC_ASSERT(sizeof(int) * CHAR_BIT &amp;gt;= 32);
-BOOST_STATIC_ASSERT(WCHAR_MIN &amp;gt;= 0);
-
-} // namespace my_conditions
-```
-
-この例での、*my_conditions* namespace の使用に関して、若干の説明が必要だろう。 マクロBOOST_STATIC_ASSERT は目的実現の為に **typedef** 宣言を生成する。ここで、typedef は名前を持たなければならないので、マクロは仮の名に `__LINE__` の値(現在の行番号)を連結して一意の名前を自動的に生成する。 BOOST_STATIC_ASSERTがクラスまたは関数のスコープで使われる場合は、１行にマクロを複数記述しない限りにおいて、BOOST_STATIC_ASSERTの使用によって各々のスコープにおいて一意の名前が生成されることが保証される。 しかしながら、マクロがヘッダにおいて利用されるとき、namespace は複数のヘッダ間に渡ることがありうる。そして、同一の namespace を持つ複数のヘッダの、同じ行においてマクロが使用されたときに、同じ名前をもつ宣言を複数箇所で行うことになるかもしれない。 コンパイラは二重のtypedef宣言を暗黙のうちに無視しなければならないが、しかしながら、多くはそうしないが為に、意図しないエラーを引き起こしてしまう（また、仮に二重宣言を無視するにしても、そのような場合には警告を生成しても良いとなっている）。 よって、あなたがヘッダファイルにおいて、namespace スコープでBOOST_STATIC_ASSERTを使うならば、そのような潜在的な問題を避けるために、そのヘッダに特有の namespace で、BOOST_STATIC_ASSERT を囲まねばならない。
-
-## &amp;lt;a name=&amp;#34;function&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;§関数スコープでの使用（Use at function scope）
-
-マクロは典型的にテンプレート関数内において、テンプレート引数の検査が必要な時に利用される。 我々がiteratorによって捜査対象を指示される algorithm（iterator を受け取るテンプレート関数）を所持しており、それがランダムアクセスiterator を必要とすると想定する。 想定条件に合わない iterator を用いて algorithm が実体化された場合は、最終的にエラーが生成されることになるが、しかし、これは深く入れ子になった先のテンプレートの実体化によって引き起こされたエラーかもしれず、このことにが、ユーザーにとって何がエラーの原因かを特定することが難しくしている。 1つの選択としてはテンプレートのトップのレベルで、iterator の種別のコンパイル時判定を追加することである。もし、条件が合わない場合には、ユーザーにテンプレートが誤用されていることを明らかにするような形でエラーを生成できる。
-
-```cpp
-#include &amp;lt;iterator&amp;gt;
-#include &amp;lt;boost/static_assert.hpp&amp;gt;
-#include &amp;lt;boost/type_traits.hpp&amp;gt;
-
-template &amp;lt;class RandomAccessIterator &amp;gt;
-RandomAccessIterator foo(RandomAccessIterator from, RandomAccessIterator to)
-{
-   // this template can only be used with
-   // random access iterators...
-   // このテンプレートは、ランダムアクセス iterator でのみ利用可能である。
-   typedef typename std::iterator_traits&amp;lt; RandomAccessIterator &amp;gt;::iterator_category cat;
-   BOOST_STATIC_ASSERT((boost::is_convertible&amp;lt;cat, const std::random_access_iterator_tag&amp;amp;&amp;gt;::value));
-   //
-   // detail goes here...
-   // 詳細は、これ以降...
-   return from;
-}
-```
-
-注: assertマクロのまわりの特別な括弧の組は、boost::is_convertible テンプレート中の「,」をプリプロセッサによってマクロ引数分離子として解釈されることを防いでいる。 boost::is_convertible の変換先の型が参照型であるため、若干のコンパイラにおいて型変換がユーザー定義コンストラクタを使用する時に boost::is_convvertible の使用に問題が生じる（いずれにしても、itarator tag クラスが、コピーコンストラクト可能であるという保証がない）
-
-## &amp;lt;a name=&amp;#34;class&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;§クラス・スコープでの使用（Use at class scope）
-
-マクロは典型的にテンプレートクラス内で使用される。 例えば、我々がテンプレート引数に最低でも16bit精度以上で符号無しの整数型を必要とするテンプレートクラスを利用する場合、我々はこの要請次のようにすることで満たすことが出来る：
-
-```cpp
-#include &amp;lt;climits&amp;gt;
-#include &amp;lt;boost/static_assert.hpp&amp;gt;
-
-template &amp;lt;class UnsignedInt&amp;gt;
-class myclass
-{
-private:
-   BOOST_STATIC_ASSERT(sizeof(UnsignedInt) * CHAR_BIT &amp;gt;= 16);
-   BOOST_STATIC_ASSERT(std::numeric_limits&amp;lt;UnsignedInt&amp;gt;::is_specialized
-                        &amp;amp;&amp;amp; std::numeric_limits&amp;lt;UnsignedInt&amp;gt;::is_integer
-                        &amp;amp;&amp;amp; !std::numeric_limits&amp;lt;UnsignedInt&amp;gt;::is_signed);
-public:
-   /* details here */
-   // 実装の詳細 はここに記述する
-};
-```
-
-## §どのように実現されているか（How it works）
-
-BOOST_STATIC_ASSERTは、次のようにして実現される。 STATIC_ASSERTION_FAILURE クラスが次のように定義されている：
-
-```cpp
-namespace boost{
-
-template &amp;lt;bool&amp;gt; struct STATIC_ASSERTION_FAILURE;
-
-template &amp;lt;&amp;gt; struct STATIC_ASSERTION_FAILURE&amp;lt;true&amp;gt;{};
-
-}
-```
-
-鍵となる点は、未定義式 sizeof(STATIC_ASSERTION_FAILURE&amp;lt;0&amp;gt;) によって引き起こされるエラー・メッセージが多種多様なコンパイラ間で似通った表現である傾向があるということである。 動作原理の残りは BOOST_STATIC_ASSERT が、sizeof式をtypedef中に入れ込む手法である。 ここのマクロの使用は、いくぶん見苦しい。 boostの開発メンバーは、static assert をマクロの使用避けて作成しようとかなりの努力を費やした。しかしながら、それらは何れも成功しなかった。 結論として、static assert を namespace、関数、クラススコープでうまく利用出来るようにするにはマクロの醜さを考慮の外に置くしかないということだった。
-
-## §テストプログラム（Test Programs ）
-
-以下のテストプログラムが、このライブラリと共に提供される：
-
-
-| テスト･プログラム | コンパイル可能か？ | 説明 |
-| - | - | - |
-| [static_assert_test.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test.cpp) | はい | 使用法の例、および、コンパイラの互換性テストの為にコンパイルされるべきである。 |
-| [static_assert_example_1.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_1.cpp) | プラットフォーム依存 | namespace スコープ・テストプログラムがコンパイルできるかは、プラットフォームに依存する。 |
-| [static_assert_example_2.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_2.cpp) | はい | 関数スコープ・テストプログラム。 |
-| [static_assert_example_3.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_3.cpp) | はい | クラススコープ・テストプログラム。 |
-| [static_assert_test_fail_1.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_1.cpp) | いいえ | namespace スコープでの失敗の例 |
-| [static_assert_test_fail_2.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_2.cpp) | いいえ | 非テンプレートの関数スコープでの失敗の例 |
-| [static_assert_test_fail_3.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_3.cpp) | いいえ | 非テンプレートのクラススコープでの失敗の例 |
-| [static_assert_test_fail_4.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_4.cpp) | いいえ | 非テンプレートのクラス・スコープでの失敗の例 |
-| [static_assert_test_fail_5.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_5.cpp) | いいえ | テンプレートクラス・スコープでの失敗の例 |
-| [static_assert_test_fail_6.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_6.cpp) | いいえ | テンプレートクラスのメンバー関数スコープでの失敗の例 |
-| [static_assert_test_fail_7.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_7.cpp) | いいえ | クラス・スコープでの失敗の例 |
-| [static_assert_test_fail_8.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_8.cpp) | いいえ | 関数スコープでの失敗の例 |
-| [static_assert_test_fail_9.cpp](http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_9.cpp) | いいえ | 関数スコープでの失敗の例(その２) |
-
----
-
-Revised 27th Nov 2000
-
-Documentation © Copyright John Maddock 2000. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &amp;#34;as is&amp;#34; without express or implied warranty, and with no claim as to its suitability for any purpose.
-
-Based on contributions by Steve Cleary and John Maddock.
-
-Maintained by [John Maddock](mailto:John_Maddock@compuserve.com), the latest version of this file can be found at [www.boost.org](http://www.boost.org/), and the boost discussion list at [www.yahoogroups.com/list/boost](http://www.yahoogroups.com/list/boost).
-
----
-
-日本語版第１版 2003年 2月 14日(原文 2002/11/27日版ベース)
-
-Japanese version - based 27th Nov 2000 - Revised 14th Feb 2003
-
-Japanese Translation Copyright (C) 2003 [mikari(Mika.N)](mailto:mikarim@m18.alpha-net.ne.jp).
-
-The project &amp;#34;Boost Japanese Translation&amp;#34; was proposed by [Kohske Takahashi](mailto:kohske@msc.biglobe.ne.jp).
-
-オリジナルドキュメントは、 西暦 2000年 John Maddock によって作成された。
-
-オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。 このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。 また、いかなる目的に対しても、その利用が適していることを関知しない。
-
-原文は、Steve Cleary と John Maddock の投稿に基づいており、[John Maddock](mailto:John_Maddock@compuserve.com) によって 保守されている。最新版は [www.boost.org](http://www.boost.org/)より得ることが出来る。 また、議論の記録は次の場所で参照できる（[www.yahoogroups.com/list/boost](http://www.yahoogroups.com/list/boost)）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Coding Guidelines for Integral Constant Expressions -- Merge pull request #155 from y121516/porting-Boost.StaticAssert
</title>
      <link href="https://boostjp.github.io/archive/boost_docs/document/int_const_guidelines.html"/>
      <id>7d05615ce3ffe9ae4f76e0b0c8b8e85f81872910:archive/boost_docs/document/int_const_guidelines.md</id>
      <updated>2017-04-10 14:28:56 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Coding Guidelines for Integral Constant Expressions&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;汎整数定数式は C++ の多くの場面で用いられる。配列のサイズや、bit-field (※訳語データベースへ？) 、列挙値の初期化や、型でないテンプレートパラメータ (※訳語データベースへ？) の引数として。しかしながら多くのコンパイラは汎整数定数式の扱いに問題を抱えている。つまりこの結果として、特に型でないテンプレートパラメータを使ったプログラミングは、困難に満ちたものになりうる。そしてしばしば、特定のコンパイラでは型でないテンプレートパラメータはサポートされていない、という間違った推論に陥いらせる。この短い記事は、これに従えば、汎整数定数式を Boost に正しくサポートされている全てのコンパイラでポータブルな作法で用いることができるようになるガイドラインと回避方法を提供するようにデザインされている。この記事は主に Boost ライブラリの作者に向けられたものであるが、何故 Boost のコードがそのような方法で書かれているのかを理解することや、自身でポータブルなコードを書くことを欲するユーザにとっても役に立つものであろう。&lt;/p&gt;
&lt;h2&gt;汎整数定数式とは何か？&lt;/h2&gt;
&lt;p&gt;汎整数定数式は標準のセクション 5.19 で述べられている。そしてしばしば「コンパイル時定数」と呼ばれる。汎整数定数式は下記のいずれかになりうる:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;汎整数定数、例えば &lt;code&gt;0u&lt;/code&gt; や &lt;code&gt;3L&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;列挙の値。&lt;/li&gt;
&lt;li&gt;グローバルな汎整数定数、例えば:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_INTEGRAL_CONSTANT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;err&#34;&gt;演算子が除算演算子やコンマ演算子で無い場合に提供される。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;汎整数定数式に単項演算子を適用した結果:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;op INTEGRAL_CONSTANT1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;演算子がインクリメントやデクリメント演算子で無い場合に提供される。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;コーディングガイドライン&lt;/h2&gt;
&lt;p&gt;以下のガイドラインは特別な順番で並んでいるわけではない (言い換えれば、申し訳無いが、あなたはこれら全てに従う必要があるということだ)。そして不完全でもあるかもしれない、コンパイラの変更やさらなる問題との遭遇のために、さらにガイドラインが加わるかもしれない。&lt;/p&gt;
&lt;h3&gt;クラスメンバの定数を宣言するときは必ず &lt;code&gt;BOOST_STATIC_CONSTANT&lt;/code&gt; マクロを使う。&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: メンバ定数のインライン初期化をサポートしていないコンパイラもある。メンバの列挙をうまく扱えないコンパイラもある (それらは必ずしも汎整数定数式として扱わない)。&lt;code&gt;BOOST_STATIC_CONSTANT&lt;/code&gt; マクロは問題のコンパイラで最も適切な方法を使用する。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;int&lt;/code&gt; より大きな型の汎整数定数式を宣言しない。&lt;/h3&gt;
&lt;p&gt;Rationale: 理論上は全ての汎整数型を汎整数定数式の中で使用できるが、実際問題として、大くのコンパイラは汎整数定数式を &lt;code&gt;int&lt;/code&gt; より大きくない型に制限する。&lt;/p&gt;
&lt;h3&gt;論理演算子を汎整数定数式に対して使わない。代わりにテンプレートメタプログラミングを使う。&lt;/h3&gt;
&lt;p&gt;&amp;lt;boost/type_traits/ice.hpp&amp;gt; ヘッダはたくさんの回避方法のテンプレートを含んでいる。それは論理演算子の役割りを成し遂げる。例えば以下のように書く代わりに:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;以下を使いなさい:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ice_or&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: 多くのコンパイラ(特に Borland と Microsoft のコンパイラ)は論理演算子を含む汎整数定数式を真の汎整数定数式として認識しない傾向がある。この問題は通常、汎整数定数式がテンプレートのコードの内部の奥深くにあって、複写して診断することが難しい場合にのみ現れる。&lt;/p&gt;
&lt;h3&gt;型でないテンプレート引数として使われる汎整数定数式の中でいかなる演算子も使うな。&lt;/h3&gt;
&lt;p&gt;以下よりも:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INTEGRAL_CONSTANT2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;以下を使いなさい:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some_symbol&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、&lt;code&gt;some_symbol&lt;/code&gt; はその値が &lt;code&gt;(INTEGRAL_CONSTANT1 == INTEGRAL_CONSTANT2)&lt;/code&gt; となる汎整数定数式に与えられた名前である。&lt;/p&gt;
&lt;p&gt;Rationale: 古い EDG ベースのコンパイラ (それがそのプラットフォームで最新のバージョンである場合もある。) は、演算子を含む式を型でないテンプレートパラメータであると認識しない。たとえそのような式が汎整数定数式としてどこか他の場所で使うことができるとしても。&lt;/p&gt;
&lt;h3&gt;汎整数定数式を参照するために、常に完全に修飾された名前を使いなさい。&lt;/h3&gt;
&lt;p&gt;例えば:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_integral&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: 少なくとも一つのコンパイラ (Borland のもの) は名前が完全に修飾されていなければ (完全に修飾されているとは、&lt;code&gt;::&lt;/code&gt; で始まっていることを指す)、汎整数定数式の名前を認識しない。&lt;/p&gt;
&lt;h3&gt;&#39;&lt;code&gt;&amp;lt;&lt;/code&gt;&#39; と &#39;&lt;code&gt;::&lt;/code&gt;&#39; の間には常に空白を入れなさい。&lt;/h3&gt;
&lt;p&gt;例えば:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_integral&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;
                &lt;span class=&#34;err&#34;&gt;ここにスペースがあることを確認しなさい&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: &lt;code&gt;&amp;lt;:&lt;/code&gt; はそれ自身で合法的な二重字であって、それゆえ&lt;code&gt;&amp;lt;::&lt;/code&gt; は &lt;code&gt;[:&lt;/code&gt; と同様に解釈される。&lt;/p&gt;
&lt;h3&gt;汎整数定数式としてローカルな名前を使うな。&lt;/h3&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computed_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// error&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: 少なくとも一つのコンパイラ (Borland のもの) はこれを受け入れない。&lt;/p&gt;
&lt;p&gt;しかしながら、以下を使うことによってこれを修正することができる:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computed_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これは少なくとも一つのコンパイラ (VC6) で通らない。汎整数定数式を別の特性クラスに移す方がより良い。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar_helper&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computed_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myclass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foobar_helper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytypedef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;型で無いテンプレートパラメータのために他に依存する値を使うな。&lt;/h3&gt;
&lt;p&gt;例えば:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_integral&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Error can&#39;t deduce value of I in some cases.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Rationale: この種の使い方は Borland C++ で失敗する。これはデフォルト値が前のテンプレートパラメータに依存している場合のみの問題であることに注意しなさい。例えば、以下は問題無い:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK, default value is not dependent&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;未解決の問題&lt;/h2&gt;
&lt;p&gt;以下の問題は解決していないか、コンパイラ毎の解決があるか、一つ以上のコーディングガイドラインを破るかのどれかである。&lt;/p&gt;
&lt;h3&gt;numeric_limits に気をつけなさい&lt;/h3&gt;
&lt;p&gt;ここには三つの問題がある:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lt;limits&amp;gt; ヘッダが無いかもしれない。&amp;lt;limits&amp;gt; を決して 直接インクルードせず、代わりに &amp;lt;boost/pending/limits.hpp&amp;gt; を使うことが推奨される。このヘッダはもしそれがあるなら、『本当の』 &amp;lt;limits&amp;gt; ヘッダをインクルードする。もし無ければ自身の std::numeric_limits の定義を提供する。Boost は &amp;lt;limits&amp;gt; ヘッダが無ければ、BOOST_NO_LIMITS マクロも定義する。&lt;/li&gt;
&lt;li&gt;std::numeric_limits の実装はその静的定数メンバが汎整数定数式として使うことができない方法で定義されるかもしれない。これは非標準であるが、少なくとも二つの標準ライブラリベンダに影響するバグであるようだ。Boost はこの場合、&amp;lt;boost/config.hpp&amp;gt; の中で BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS を定義する。&lt;/li&gt;
&lt;li&gt;VC6 には std::numeric_limits のメンバがテンプレートのコードの中 で『早まって評価』されうるという奇妙なバグがある。例えば:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;limits_test&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このコードはたとえテンプレートがインスタンス化されなくても VC6 でコンパイルに失敗する。いくつかの奇怪な理由のために &lt;code&gt;::std::numeric_limits&amp;lt;T&amp;gt;::is_specialized&lt;/code&gt; はテンプレートパラメータ T が何であろうと常に偽と評価される。この問題は &lt;code&gt;std::numeric_limits&lt;/code&gt; に依存する式に限定されるようである: 例えば、もし &lt;code&gt;::std::numeric_limits&amp;lt;T&amp;gt;::is_specialized&lt;/code&gt; を &lt;code&gt;::boost::is_arithmetic&amp;lt;T&amp;gt;::value&lt;/code&gt; に置換すれば、全てうまくいく。以下の回避方法もうまく働くが、コーディングガイドラインに抵触する:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;limits_test&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;だから、以下のようなものが多分最上の手段である:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;limits_test&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#ifdef BOOST_MSVC&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_CONSTANT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;sizeof&lt;/code&gt; 演算子の使い方に気をつけなさい。&lt;/h3&gt;
&lt;p&gt;私の知る限り、全てのコンパイラはその引数が型の名前 (やテンプレートの識別子) である場合 &lt;code&gt;sizeof&lt;/code&gt; 式を正しく扱うようだ。しかしながら以下のような場合問題が起こりうる:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引数がメンバ変数やローカル変数の名前である場合 (コードは VC6 ではコンパイルされないだろう)。&lt;/li&gt;
&lt;li&gt;引数が一時変数の生成を含む式である場合 (コードは Borland C++ でコンパイルされないだろう)。&lt;/li&gt;
&lt;li&gt;引数がオーバーロードされた関数呼出しを含む場合 (コードは Metroworks C++ ではコンパイルされるが、結果は間違った値になる)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;必要無ければ &lt;code&gt;boost::is_convertible&lt;/code&gt; を使うな&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;is_convertible&lt;/code&gt; は &lt;code&gt;sizeof&lt;/code&gt; 演算子を用いて実装されているので、Metroworks のコンパイラと使う場合は常に間違った値を返し、Borland のコンパイラではコンパイルされないかもしれない。(テンプレート引数が使われるかどうかに依る)。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright Dr John Maddock 2001, all rights reserved.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 shinichiro.h &amp;lt;g940455@mail.ecc.u-tokyo.ac.jp&amp;gt;.&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
    <entry>
      <title>§ヘッダファイル（Header） &amp;lt;[boost/static_assert.hpp](http://www.boost.org/doc/libs/1_31_0/boost/static_assert.hpp)&amp;gt; -- Merge pull request #155 from y121516/porting-Boost.StaticAssert
</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/static_assert/static_assert.html"/>
      <id>7d05615ce3ffe9ae4f76e0b0c8b8e85f81872910:archive/boost_docs/libs/static_assert/static_assert.md</id>
      <updated>2017-04-10 14:28:56 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;§ヘッダファイル（Header） &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/static_assert.hpp&#34; target=&#34;_blank&#34;&gt;boost/static_assert.hpp&lt;/a&gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ヘッダファイル &amp;lt;boost/static_assert.hpp&amp;gt;はマクロ、BOOST_STATIC_ASSERT(x) を提供する。 BOOST_STATIC_ASSERT(x) は&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/document/int_const_guidelines.html&#34;&gt;汎整数定数式&lt;/a&gt; &lt;em&gt;x&lt;/em&gt; を評価した結果、偽であるならばコンパイル時エラーメッセージを生成する。 つまり、コンパイル時に、assert マクロと同等の働きをするものである。 これは、「コンパイル時アサート（compile-time-assertion）」という名で知られているものであるが、このドキュメントでは「静的アサート（static assertion）」と記述することとする。 条件が真である時、このマクロはいかなるコードやデーターを生成しないことに注意すること。加えて、このマクロは namespace もしくは、クラス、もしくは、関数のスコープ内で利用される事にも注意すること。 このマクロがテンプレート内で利用されているばあいは、テンプレートより実体が生成される時に診断が実行される。 これは、特にテンプレート・パラメータを確認することに役立つ。&lt;/p&gt;
&lt;p&gt;BOOST_STATIC_ASSERTの狙いのうちの1つは、可読性の高いエラー・メッセージを生成することである。 これらは、ユーザーにサポート外の方法でライブラリを利用しようとしたことを直接的に示す。 エラーメッセージがコンパイラ間で明らかに異なっていても、あなたは少なくとも、&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Illegal use of COMPILE_TIME_ASSERTION_FAILURE&amp;lt;false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;これに似た記述を見ることになるだろう。&lt;/p&gt;
&lt;p&gt;それは、少なからず目立つはずである。&lt;/p&gt;
&lt;p&gt;あなたは、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert/static_assert.html#class&#34;&gt;クラス&lt;/a&gt;、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert/static_assert.html#function&#34;&gt;関数&lt;/a&gt;、&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/static_assert/static_assert.html#namespace&#34;&gt;namespace&lt;/a&gt; のスコープにおいて、宣言を置くことができる箇所の全てで、BOOST_STATIC_ASSERT を利用できる。次に例を示す。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;namespace&#34;&gt;&lt;/a&gt;§namespaceスコープでの使用。(Use at namespace scope)&lt;/h2&gt;
&lt;p&gt;マクロは、常に真でなければならない前提条件がある場合に、namespace スコープで使うことが出来る。 通常、これはいくつかのプラットホーム依存の条件を意味する。 例えば、我々が &lt;strong&gt;&lt;code&gt;int&lt;/code&gt;&lt;/strong&gt; が少なくとも32ビット以上あり、&lt;strong&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/strong&gt; が符号無しであることを必要としていると想定する。 我々は次のようにして、コンパイル時にこれを検査することができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;climits&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cwchar&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_conditions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CHAR_BIT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WCHAR_MIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// namespace my_conditions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;この例での、&lt;em&gt;my_conditions&lt;/em&gt; namespace の使用に関して、若干の説明が必要だろう。 マクロBOOST_STATIC_ASSERT は目的実現の為に &lt;strong&gt;typedef&lt;/strong&gt; 宣言を生成する。ここで、typedef は名前を持たなければならないので、マクロは仮の名に &lt;code&gt;__LINE__&lt;/code&gt; の値(現在の行番号)を連結して一意の名前を自動的に生成する。 BOOST_STATIC_ASSERTがクラスまたは関数のスコープで使われる場合は、１行にマクロを複数記述しない限りにおいて、BOOST_STATIC_ASSERTの使用によって各々のスコープにおいて一意の名前が生成されることが保証される。 しかしながら、マクロがヘッダにおいて利用されるとき、namespace は複数のヘッダ間に渡ることがありうる。そして、同一の namespace を持つ複数のヘッダの、同じ行においてマクロが使用されたときに、同じ名前をもつ宣言を複数箇所で行うことになるかもしれない。 コンパイラは二重のtypedef宣言を暗黙のうちに無視しなければならないが、しかしながら、多くはそうしないが為に、意図しないエラーを引き起こしてしまう（また、仮に二重宣言を無視するにしても、そのような場合には警告を生成しても良いとなっている）。 よって、あなたがヘッダファイルにおいて、namespace スコープでBOOST_STATIC_ASSERTを使うならば、そのような潜在的な問題を避けるために、そのヘッダに特有の namespace で、BOOST_STATIC_ASSERT を囲まねばならない。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;function&#34;&gt;&lt;/a&gt;§関数スコープでの使用（Use at function scope）&lt;/h2&gt;
&lt;p&gt;マクロは典型的にテンプレート関数内において、テンプレート引数の検査が必要な時に利用される。 我々がiteratorによって捜査対象を指示される algorithm（iterator を受け取るテンプレート関数）を所持しており、それがランダムアクセスiterator を必要とすると想定する。 想定条件に合わない iterator を用いて algorithm が実体化された場合は、最終的にエラーが生成されることになるが、しかし、これは深く入れ子になった先のテンプレートの実体化によって引き起こされたエラーかもしれず、このことにが、ユーザーにとって何がエラーの原因かを特定することが難しくしている。 1つの選択としてはテンプレートのトップのレベルで、iterator の種別のコンパイル時判定を追加することである。もし、条件が合わない場合には、ユーザーにテンプレートが誤用されていることを明らかにするような形でエラーを生成できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/type_traits.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// this template can only be used with&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// random access iterators...&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// このテンプレートは、ランダムアクセス iterator でのみ利用可能である。&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator_traits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RandomAccessIterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator_category&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_convertible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random_access_iterator_tag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// detail goes here...&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// 詳細は、これ以降...&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;注: assertマクロのまわりの特別な括弧の組は、boost::is_convertible テンプレート中の「,」をプリプロセッサによってマクロ引数分離子として解釈されることを防いでいる。 boost::is_convertible の変換先の型が参照型であるため、若干のコンパイラにおいて型変換がユーザー定義コンストラクタを使用する時に boost::is_convvertible の使用に問題が生じる（いずれにしても、itarator tag クラスが、コピーコンストラクト可能であるという保証がない）&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;class&#34;&gt;&lt;/a&gt;§クラス・スコープでの使用（Use at class scope）&lt;/h2&gt;
&lt;p&gt;マクロは典型的にテンプレートクラス内で使用される。 例えば、我々がテンプレート引数に最低でも16bit精度以上で符号無しの整数型を必要とするテンプレートクラスを利用する場合、我々はこの要請次のようにすることで満たすことが出来る：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;climits&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/static_assert.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;myclass&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CHAR_BIT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_specialized&lt;/span&gt;
                        &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_integer&lt;/span&gt;
                        &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numeric_limits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnsignedInt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_signed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
   &lt;span class=&#34;cm&#34;&gt;/* details here */&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;// 実装の詳細 はここに記述する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;§どのように実現されているか（How it works）&lt;/h2&gt;
&lt;p&gt;BOOST_STATIC_ASSERTは、次のようにして実現される。 STATIC_ASSERTION_FAILURE クラスが次のように定義されている：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATIC_ASSERTION_FAILURE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATIC_ASSERTION_FAILURE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;鍵となる点は、未定義式 sizeof(STATIC_ASSERTION_FAILURE&amp;lt;0&amp;gt;) によって引き起こされるエラー・メッセージが多種多様なコンパイラ間で似通った表現である傾向があるということである。 動作原理の残りは BOOST_STATIC_ASSERT が、sizeof式をtypedef中に入れ込む手法である。 ここのマクロの使用は、いくぶん見苦しい。 boostの開発メンバーは、static assert をマクロの使用避けて作成しようとかなりの努力を費やした。しかしながら、それらは何れも成功しなかった。 結論として、static assert を namespace、関数、クラススコープでうまく利用出来るようにするにはマクロの醜さを考慮の外に置くしかないということだった。&lt;/p&gt;
&lt;h2&gt;§テストプログラム（Test Programs ）&lt;/h2&gt;
&lt;p&gt;以下のテストプログラムが、このライブラリと共に提供される：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;テスト･プログラム&lt;/th&gt;
&lt;th&gt;コンパイル可能か？&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;使用法の例、および、コンパイラの互換性テストの為にコンパイルされるべきである。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_1.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_1.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プラットフォーム依存&lt;/td&gt;
&lt;td&gt;namespace スコープ・テストプログラムがコンパイルできるかは、プラットフォームに依存する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_2.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_2.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;関数スコープ・テストプログラム。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_example_3.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_example_3.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;はい&lt;/td&gt;
&lt;td&gt;クラススコープ・テストプログラム。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_1.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_1.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;namespace スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_2.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_2.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートの関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_3.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_3.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートのクラススコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_4.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_4.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;非テンプレートのクラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_5.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_5.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;テンプレートクラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_6.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_6.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;テンプレートクラスのメンバー関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_7.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_7.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;クラス・スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_8.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_8.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;関数スコープでの失敗の例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/static_assert/static_assert_test_fail_9.cpp&#34; target=&#34;_blank&#34;&gt;static_assert_test_fail_9.cpp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;いいえ&lt;/td&gt;
&lt;td&gt;関数スコープでの失敗の例(その２)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Revised 27th Nov 2000&lt;/p&gt;
&lt;p&gt;Documentation © Copyright John Maddock 2000. Permission to copy, use, modify, sell and distribute this document is granted provided this copyright notice appears in all copies. This document is provided &#34;as is&#34; without express or implied warranty, and with no claim as to its suitability for any purpose.&lt;/p&gt;
&lt;p&gt;Based on contributions by Steve Cleary and John Maddock.&lt;/p&gt;
&lt;p&gt;Maintained by &lt;a href=&#34;mailto:John_Maddock@compuserve.com&#34;&gt;John Maddock&lt;/a&gt;, the latest version of this file can be found at &lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;www.boost.org&lt;/a&gt;, and the boost discussion list at &lt;a href=&#34;http://www.yahoogroups.com/list/boost&#34; target=&#34;_blank&#34;&gt;www.yahoogroups.com/list/boost&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;日本語版第１版 2003年 2月 14日(原文 2002/11/27日版ベース)&lt;/p&gt;
&lt;p&gt;Japanese version - based 27th Nov 2000 - Revised 14th Feb 2003&lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:mikarim@m18.alpha-net.ne.jp&#34;&gt;mikari(Mika.N)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project &#34;Boost Japanese Translation&#34; was proposed by &lt;a href=&#34;mailto:kohske@msc.biglobe.ne.jp&#34;&gt;Kohske Takahashi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;オリジナルドキュメントは、 西暦 2000年 John Maddock によって作成された。&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。 このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。 また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;
&lt;p&gt;原文は、Steve Cleary と John Maddock の投稿に基づいており、&lt;a href=&#34;mailto:John_Maddock@compuserve.com&#34;&gt;John Maddock&lt;/a&gt; によって 保守されている。最新版は &lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;www.boost.org&lt;/a&gt;より得ることが出来る。 また、議論の記録は次の場所で参照できる（&lt;a href=&#34;http://www.yahoogroups.com/list/boost&#34; target=&#34;_blank&#34;&gt;www.yahoogroups.com/list/boost&lt;/a&gt;）&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
</feed>