<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2024-06-23T14:37:52.143931</updated>
  <id>57394eef-5a60-4c23-b9a3-267ce83eb3a7</id>

  
    <entry>
      <title>boostjp -- トップページ : HTMLのダウンロードリンクを記載</title>
      <link href="https://boostjp.github.io/index.html"/>
      <id>18845320e622061e266539efe6476217aebbf242:index.md</id>
      <updated>2024-06-11T13:30:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;boostjp&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://dbp-consulting.com/images/boostvariantslogo/boost-poweredby-white-variants.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;本サイトは、&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;日本語コミュニティのWebサイトです。&lt;/p&gt;
&lt;p&gt;Boost C++ Librariesに関する最新情報、日本語ドキュメント、Boost.勉強会の情報などを提供していきます。&lt;/p&gt;
&lt;p&gt;このWebサイトは、以下のGitHubリポジトリにて作成を行っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/site&#34; target=&#34;_blank&#34;&gt;boostjp/site : WebサイトのMarkdownソース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/image&#34; target=&#34;_blank&#34;&gt;boostjp/image : Webサイトで使用する画像リソース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTMLデータのダウンロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostjp/boostjp.github.io/archive/refs/heads/master.zip&#34; target=&#34;_blank&#34;&gt;boostjp.github.io-master.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルで閲覧できるHTMLを用意しています。&lt;/p&gt;
&lt;h2&gt;関連サイト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/&#34; target=&#34;_blank&#34;&gt;C++リファレンスサイト cpprefjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;運営者&lt;/h2&gt;
&lt;p&gt;boostjpは、以下のコアメンバが運営を行っています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/faithandbrave/&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/usagi&#34; target=&#34;_blank&#34;&gt;Usagi Ito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/melpon&#34; target=&#34;_blank&#34;&gt;melpon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hotwatermorning&#34; target=&#34;_blank&#34;&gt;Kohsuke Yuasa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/h-sao&#34; target=&#34;_blank&#34;&gt;Akiko Yamanouchi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BoostCon 2011 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/boostcon/2011.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:boostcon/2011.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;BoostCon 2011&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://boostcon.boost.org/program/sessions/&#34; target=&#34;_blank&#34;&gt;http://boostcon.boost.org/program/sessions/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/2011_presentations&#34; target=&#34;_blank&#34;&gt;BoostCon 2011 Presentations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳プロジェクト&lt;/h2&gt;
&lt;p&gt;BoostCon 2011の資料を翻訳しています。&lt;/p&gt;
&lt;p&gt;翻訳したデータは各自でどこかに公開(たとえばGoogle Docs、slideshareなど)し、リンクを貼ってください。&lt;/p&gt;
&lt;p&gt;参加者は常時募集しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(eldesh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(akira)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-process&#34;&gt;Boost.Process：C++によるプロセス管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fast-numerical-computation&#34;&gt;C++による高速数値計算 ： 遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割 : Unicodeのためのソリューション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2：データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-simd&#34;&gt;Boost.SIMDを用いる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#ready-fo-ipv6&#34; id=&#34;ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Are You Ready for IPv6?&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/IPv6.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/IPv6.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それはニュースの中にあった：IPv4アドレス空間が枯渇する。&lt;br /&gt;
その解決策は新たなインターネット・プロトコル、IPv6である。IPv6は長い間存在していたが、その使用を命じた政府機関のためのコードを開発しない限り、それについて今まで心配する必要がなかった。&lt;/p&gt;
&lt;p&gt;これは一夜の変更では済まないだろう。&lt;br /&gt;
IPv4はまだ数年は使われるだろうし、ネットワークアプリケーションは両方のプロトコルをサポートしなければならないだろう。&lt;/p&gt;
&lt;p&gt;この発表は、ネットワーク開発者が知る必要のあるIPv6の基本をカバーする。&lt;/p&gt;
&lt;p&gt;Boost.AsioのIPv6のサポートを見て回り、独立したBoost.Asioベースのネットワークアプリケーションプロトコルを独立させること、およびIPv6を用意するためのいくつかの設計戦略について議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#utree&#34; id=&#34;utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AST Construction with the Universal Tree&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bryce-lelbach&#34; target=&#34;_blank&#34;&gt;Bryce Lelbach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/utree_talk.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/utree_talk.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Spiritのコードベースに最近追加された&lt;code&gt;utree&lt;/code&gt;は、抽象構文木を表現するための設計されたジェネリックなデータ構造である。QiとKarmaへのバインディングは、Boost.Spiritによるパーサー、ジェネレータ開発の強力なツールとなる。この発表では、抽象構文木を構築、操作するための、パース／ジェネレートの4つのユースケースを示す：XML、シンボル式(S式)、JSONとCライクなソースコード。&lt;/p&gt;
&lt;p&gt;Spiritによる&lt;code&gt;utree&lt;/code&gt;の統合の詳細、および&lt;code&gt;utree&lt;/code&gt;中心のSpiritパーサー／ジェネレータの記述について議論する。さらに、他の内部表現(XMLのためのDOMツリー、JSONオブジェクトのための連想配列、小さなCソースコードのシンプルなVMバイトコード)に、utree ASTをコンパイルする設計手本をカバーする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#mpi-openmp&#34; id=&#34;mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Hybrid MPI+OpenMP Code Generation&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#khaled-hamidouche&#34; target=&#34;_blank&#34;&gt;Khaled Hamidouche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/bsppp.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/bsppp.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マルチプロセッサー市場の出現は、大規模並列コンピュータのアーキテクチャを根本的に変えた。何千ものスレッドによるハイパフォーマンスコンピューティングプラットフォームが展開されている。このコンテキストでは、ハイブリッドなMPI + OpenMPアプローチの使用はそのようなアーキテクチャにふさわしいプログラミングモデルと見なされる。しかし、パフォーマンスの改善が示される場合もあれば、示されない場合もある。ハイブリッドなMPIおよびOpenMPアプリケーションのパフォーマンスに影響している要因は多く、複雑で、相互の関係にある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MPI通信効率 ： アプリケーションは、MPI通信の種類(一対一、集団)、メッセージサイズ、接続や帯域といったネットワークの問題に関係がある。&lt;/li&gt;
&lt;li&gt;OpenMP並列効率 ： クリティカルセクションプリミティブを使用すると、OpenMPスレッド管理のオーバーヘッドやfalse sharingによってパフォーマンスが悪化する。&lt;/li&gt;
&lt;li&gt;MPIとOpenMPの相互作用 ： MPI通信部分の内部のロードバランシング、および使用されていないスレッドの問題は、並列度を低下させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両方のコードを書くことは、普通のHPCアプリケーションよりも専門技術の高いレベルを必要とするかもしれない。&lt;/p&gt;
&lt;p&gt;したがって、これらの新しいシステムへの効率的な利用は、重要な挑戦である。また、アプリケーションに責任を負う科学者およびエンジニアは、一般に、あまりHPCの専門家ではなく、通常、彼らはコードに新しい変化を持ち出すことや新たなプログラミングパラダイムを学ぶことはしたがらない。彼らは、効果的な自動並列化ツールとライブラリといった点での解決策を必要としている。&lt;/p&gt;
&lt;p&gt;この発表では、我々は2つの、相互関係のある異なるレベルの問題を解決を試みる。&lt;/p&gt;
&lt;p&gt;まず我々はバルク同期並列(Bulk Synchronous Parallelism ： BSP)パラダイムをすぐに導入し、それがいつ、そしてなぜ、ハイブリッドシステムの適当なプログラミングモデルと見なすことができるかを解説する。&lt;/p&gt;
&lt;p&gt;その後、我々はBSP++を紹介する。これは、BSPモデルに基づいた並列アプリケーションの迅速で容易な設計を可能にするBoostを用いたC++ライブラリである。我々は、BSP API、Lambda、PhoenixやMPIを含む、一般的に用いられるBoostライブラリに対するその相互作用、いくつかの実装詳細について記述し、いくつかの例を示す。&lt;/p&gt;
&lt;p&gt;最後に我々は、BSP++、Boost.Spirit、および Clang/LLVMによって構築された並列のプログラミングフレームワークであるBSPGenを紹介する。BSPGenは、XMLで書かれた小さなアプリケーションの記述と、並列化されていないCもしくはC++の関数から、実行時コストの先行評価とほぼ最適なOpenMPとMPIの間のバランスを決定するための配置空間の小さな探索に基づく、完全はハイブリッド並列のアプリケーションを生成することができる。実装詳細と例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-generic&#34; id=&#34;boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Generic: Concepts without Concepts&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#matt-calabrese&#34; target=&#34;_blank&#34;&gt;Matt Calabrese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Boost.Generic.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Boost.Generic.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : coming soon...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンセプトはおそらく、C++0xの中で最も望ましい機能のうちの一つだった。それによってプログラマはとくに、コメントではなくコードによるコンセプトの直接指定、コンセプトベースオーバーロード、テンプレートエラーメッセージの改善を含む、ジェネリックプログラミングの直接的な言語サポートを約束された。2009年のworking paperからのコンセプトの削除で、多くのプログラマが、将来のC++標準に、かなりの失望を残すことになった。&lt;/p&gt;
&lt;p&gt;しかし、10年以上の間、直接の言語サポートなしでC++プログラマは、Boost Graph Libraryを含む非常に強力なジェネリックライブラリをなんとか作ることができた。Boost Concept Check Libraryは、コンセプトの必要条件を検証するプロセスを実現可能にした。しかし、C++0xでコンセプトを削除したまま、事態をさらに1ステップ進めることは可能である。努力し、ライブラリはよりシンプルな、より特定のコンパイル時アサート、コンセプト要件を表現し、チェックするより強力な方法、ユーザー指定された自動で明示的なコンセプトマップのための設備と、ユーザーがコンセプトを書くためのコンセプトベースな関数テンプレートのオーバーロードを書く方法、人々が言語機能に期待するかもしれないものに驚くほど近いユーザビリティなども全てを提供することができ、提供する。&lt;/p&gt;
&lt;p&gt;この話は(レビュー前の)Boost.Genericへの入門である。&lt;/p&gt;
&lt;p&gt;コンセプト、コンセプトマップ、コンセプトベース関数テンプレートオーバーロードを作成するためのC++0xライブラリであり、Boost Concept Check Libraryを潜在的に置き換える、もしくは賞賛することを意図する。発表は、ライブラリの歴史、および短い入門に続き、パラダイムに慣れていない人々のためのジェネリックプログラミングの基本を最初に簡潔にカバーし、ライブラリを可能にするための根底にあるトリックへの導入に続く。その後、聴衆はBoost.Genericの基本的な使用法を示され、すでに提供されているコンセプトの要件チェックのためのコンパイル時アサートを指定する方法、それらのコンセプトに単純なコンセプトマップを作成する方法と、それら自身のアルゴリズムのためにコンセプトベースのオーバーロードを書く方法を示す。最後に、聴衆はBoost.Genericによる標準コンセプトの実装を通じて、標準との比較を見て回るだろう。&lt;/p&gt;
&lt;p&gt;「Boost.Generic ： コンセプトのないコンセプト」は、ライブラリ開発者、ユーザーの両方のためを意図する。それはC++の任意の合理的な量の経験を持ったプログラマにアクセス可能であるに違いない。基本アイデアは話の最初の数分でカバーされるが、ジェネリックプログラミングについての熟知が高く推奨される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#&#34; id=&#34;boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Infrastructure Workshop&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： ワークショップ&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostのコードとコミュニティがあったこと、あり続けたことで大成功した。しかし、操作性において我々のcode baseと同じ割合では発展していない。テストはより速くなりえる、インストールはより容易になりえる、ドキュメントの生成はより賢くなりえる、レビューはより多くの参加を得ることができ、そしてライブラリの維持はより楽しくなりえる。何年もの間、我々はこれらの問題に対処する方法について話したが、しかし我々は実際に変化をもたらすために合意と推進力を発生させられなかった。このワークショップは、これらに正面から何かをするチャンスだ。&lt;/p&gt;
&lt;p&gt;我々は方針を作成するために毎日90分間会合し、ツールを作成し、次の10年を通じてBoostの進化をサポートすることができるWebサービスを準備した。具体的なゴールは、カンファレンス参加者との間でのプロトタイプと有用な改善の実装で、より広いコミュニティの合意を獲得し、BoostConのあとすぐにBoostに採用されるされることである。我々には一週間しかない、したがって、生産力を最大限にするために、関心ある個々のトピックの小さなグループで活動する。Boostが採択することができるという方向へ率いることを保証するために、いくつかの短い投票を行い、その週を通じてBoostのメーリングリストでフィードバックを求めるだろう。&lt;/p&gt;
&lt;p&gt;十分なBoostモデレータおよびリリースマネージャー達は、カンファレンスに続く数ヶ月で、受け取ったアイデアを前身させるためにBoostConに出席することを計画する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-process&#34; id=&#34;boost-process&#34;&gt;Boost.Process ： C++によるプロセス管理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Process: Process management in C++&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/Boost.Process.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/Boost.Process.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Process はシステムのプロセス管理のためのライブラリである。これはシェルコマンドの実行や、子プロセスの生成、子プロセスに対する環境変数あるいは入出力ストリームの設定、子プロセスとの同期・非同期での通信、そして子プロセス終了の待機（あるいは強制終了）に使うことができる。&lt;/p&gt;
&lt;p&gt;発表パートではBoost.Processの進歩、設計上の決定、改良点に焦点を当てる。チュートリアルパートではBoost.Processが提案するいくつかのツールと、それらがどのようにプロセス管理で使われるかを説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-units&#34; id=&#34;boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Units&lt;/li&gt;
&lt;li&gt;スピーカー ：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#steven-watanabe&#34; target=&#34;_blank&#34;&gt;Steven Watanabe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-units-5364809&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-units-5364809&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Units はコンパイル時次元解析、単位変換のための自由度の高いライブラリである。これは、ユーザーがある単位の量を表現すると捉えた値の作成、無意味な操作の禁止、必要な場面での変換の適用によりプログラミングエラーを軽減するために設計された。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp0x-status&#34; id=&#34;cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++0x Progress and Status&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#michael-wong&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： レクチャー&lt;/li&gt;
&lt;li&gt;トラック： I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/cpp0x_overview.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/cpp0x_overview.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの批准を今年にひかえ、BoostCon2010での更新から(2010-現在)議論の的になっている問題や、これまでの批准の進捗、前回の更新から追加されたさまざまな新機能について詳細を述べるとともに、巻き起こった議論について、またその問題をどのように解決しようとしたかについて、1.5時間頂いてレヴューを行なう。&lt;/p&gt;
&lt;p&gt;話者は、長年、IBMでカナダのC++標準化委員会のメンバーを務めてきた者だ。中程度のC++の知識がある者を対象にしているが、もちろん、どなたでも聴講可能である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-asio-extension&#34; id=&#34;boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creating Boost.Asio extensions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：  チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/creating_boost_asio_extensions.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/creating_boost_asio_extensions.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ソースコード : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.AsioはBoost C++ librariesの有名なポータブルネットワークライブラリである。&lt;br /&gt;
このライブラリが、Boost.Netという名前にならなかったのには理由がある。Boost.Asioの真の力は非同期的な操作を実装するためのフレームワークたりえる点である。ネットワーク機能はその非同期的な操作のよい実例の一つにすぎない。&lt;/p&gt;
&lt;p&gt;このチュートリアルでは、どのようにBoost.Asioを拡張することができるか、ということと、どうやって非同期的な処理を実装するかについて述べる。&lt;br /&gt;
まずは、既存の拡張である、ファイルやディレクトリを監視するディレクトリモニタを紹介する。&lt;br /&gt;
また、このフレームワークに適合しない非同期的な操作を紹介し、Boost.Asioの制限について示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#skoot&#34; id=&#34;skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design Journeys with Skoot, a Peer Oriented Generic Networking Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#cliff-green&#34; target=&#34;_blank&#34;&gt;Cliff Green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;効率的で、エレガントで、汎用的なC++ライブラリを完成させるまでの道程は、決して平坦ではない。GPSが壊れたかのように道を誤り、暗い路地をすり抜ける羽目になり、非常にストレスがたまる。&lt;br /&gt;
それと同時に、APIの設計を固めたり、利用箇所全てで機能性を検証することは、刺激的で満足のいく旅路となるだろう。&lt;br /&gt;
このプレゼンテーションでは、数々の設計上のトレードオフについて、またSkoot libraryで利用しているBoost librariesについて議論する。&lt;/p&gt;
&lt;p&gt;Skootは、分散環境やピア指向の処理環境で利用しやすい、C++のネットワーキングライブラリである。&lt;br /&gt;
また、TCP、UDPプログラミングにおける様々な通信パターンや利用法を単純化し抽象化する。&lt;br /&gt;
Skootは、Asio、Function、Bind、Shared(とWeak)Pointer、そしてOptionalといった多くのライブラリを利用している。&lt;br /&gt;
多くのC++開発者は汎用ライブラリの完成形だけを注視して、そこに至るまでの議論を軽視する傾向がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ある種のtype erasureに対し、テンプレート化クラスが意味があるのはどんな時か？&lt;/li&gt;
&lt;li&gt;非常に強力なテンプレート関数や関数オブジェクトがあるのに、多くのC++開発者がテンプレートクラスだけをありがたがるのは何故か？    &lt;/li&gt;
&lt;li&gt;いつでもデストラクトされる可能性のあるオブジェクトへの参照を有効にしつづける方法は？&lt;/li&gt;
&lt;li&gt;Boost libraryの魔法、Bindとは何か？ なぜそれがモミ林にいるキンキラの吸血鬼よりすばらしいのか？&lt;ul&gt;
&lt;li&gt;(訳註：モミは吸血鬼を封印する効果があるとされている。吸血鬼は光にも弱いため、&#34;glittering vampire in a forest of fir trees&#34;は二重の意味でありえない。これと対比させる事で、Bindの&#34;魔法&#34;の強力さを示している)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++で仮想テンプレートメンバ関数が必要になった場合、どうすればいいのか？&lt;/li&gt;
&lt;li&gt;Asioの実装者である、Chris Kohlhoffはノーベル賞か何かを受賞すべきか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの疑問はSkoot開発中に湧き、解決されていったが、これらを説明することで、Boost導師と言える領域に達していない開発者を啓発することができると思う。&lt;br /&gt;
このプレゼンテーションは、汎用的なテンプレートを基礎にした設計技法を学んでいる、また、FunctionとBind(と、その他のライブラリ)を基本構成要素としてどう利用するかについて興味があるような、熟練したC++開発者向けである。&lt;br /&gt;
ライブラリの使用方法や、API設計や洗練、また良いユニットテストの作成についても議論する。&lt;/p&gt;
&lt;p&gt;(人物紹介：Bio: Cliffは現在SeattleにあるBoeingに勤務する、経験豊かなC++開発者である。&lt;br /&gt;
氏の開発経歴の中で主なものは、ネットワーキングと複数のプログラミング言語での可用性の高い分散処理である。また、Prologに愛着を持っていることも付記しておく。&lt;br /&gt;
Cliffは、複数の新興企業に勤務した経歴がある。これらは今やすべて破産、買収されたが、実勢価格の自社株購入権を失った時でも、安定した給料を高く買われている。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#geneva&#34; id=&#34;geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Distributed parametric optimization with the Geneva library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/boostcon2011_geneva.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/boostcon2011_geneva.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションではBoost libraryに大きく依存している分散最適化アルゴリズムのオープンソースライブラリであるGenevaを紹介する。&lt;br /&gt;
Genevaは現在、勾配降下法、進化アルゴリズム、群アルゴリズムをカバーしており、まもなく焼きなまし法が追加されることになっている。&lt;br /&gt;
すべてのアルゴリズムは、候補となるソリューションが最適化アルゴリズムを自由に切り替えられるように、同じデータ構造に作用する。&lt;br /&gt;
Genevaはグリッド環境、クラウド環境、マルチコアシステム、クラスター上でも、大規模なパラメトリック最適化問題を解くことができる。&lt;br /&gt;
このライブラリは、同時に最適化問題に取り組む数百のクライアントでテストされている。&lt;br /&gt;
使用しているライブラリは、Boost.Serialization、Threads、Conversion、Date/Time、Function、Bindなど多岐にわたる。&lt;br /&gt;
このプレゼンテーションでは、ユーザーの視点から、Geneva library自体について、また、Boostで培われた経験について論じる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#fast-numerical-computation&#34; id=&#34;fast-numerical-computation&#34;&gt;C++による高速数値計算：遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast numerical computation in C++:Expression Templates and Beyond to Lazy Code Generation (LzCG)&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bojan-nikolic&#34; target=&#34;_blank&#34;&gt;Bojan Nikolic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/fast_numerical.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/fast_numerical.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expression templateは、数値計算において、強力な最適化を可能にするC++の機能である。&lt;/p&gt;
&lt;p&gt;Expression templateはBoost.uBLASや、他の有名なC++の数値計算ライブラリ (例えば、先駆けであるBlitz++やArmadilloなど) に用いられている。ATLASやFFTWのような&#34;標準&#34;となるC++で書かれたライブラリはまだない。なぜないのか? このチュートリアルの最初の章では、私は数値計算における最適化の挑戦について、最適化のためにどのようにしてexpression templateが使われているのか、そして、expression templateの使用を妨げる根本的な要因についてレビューを行う。&lt;/p&gt;
&lt;p&gt;2つめの章では、私はいくつかの数値計算フレームワークが、どのようにして、一般にC++-onlyのライブラリで達成されているよりも高いパフォーマンスを達成しているかについて紹介する。それらのライブラリでの重要な特徴は、複雑なコード生成、実行されるハードウエアへの正確な適応、そして、実行前に多くの異なる実装の性能を計る能力をもつことである。&lt;/p&gt;
&lt;p&gt;最後に、私は、どのようにすればC++のパフォーマンスを、Expression templateによってもたされるそれよりも高くできるかについて論議する。私は新しい開発途中のフレームワークを用いて、実際にどのように動いているかのデモを行う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#funding-boost&#34; id=&#34;funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Funding Boost development through national and international research programs and funds&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/BoostCon2011Funding.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/BoostCon2011Funding.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、まず、Boostの開発をサポートする目的で、国内・国際的な研究プログラムや資金を活用するための実現可能な方法について議論する。&lt;/p&gt;
&lt;p&gt;ゴールは3部構成である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boostの開発に役立てるために、国内、国際的な研究資金調達スキーム(NSFやEuropean Unionなど…)を活用するために、多国間の連携に向けて取り組み始めるには&lt;/li&gt;
&lt;li&gt;Boostを、世界各地の大学や工業大学でコンピュータサイエンス教育のカリキュラムで取りあげられるような標準的なトピックにするためには&lt;/li&gt;
&lt;li&gt;Boost開発に科学分野からの新しい参加者を取り込むには&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#future-of-boost&#34; id=&#34;future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future of Boost Panel ’11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#jeff-garland&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#eric-niebler&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostには、本筋の議論や、尊重すべき、また有用なメーリングリストを維持するために、ポストの承認と管理を含むメーリングリストの運用を行っている小規模のモデレータグループがいる。&lt;/p&gt;
&lt;p&gt;このグループは、Webサイトや、ソースリポジトリの管理やその他の管理業務も遂行している。&lt;/p&gt;
&lt;p&gt;また、少なくとも、Boostに関することを促進するために、委員会を監督する非公式幹部としての役割をも果す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#range-unicode&#34; id=&#34;range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割:Unicodeのためのソリューション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Conversion and Segmentation for Ranges: a Solution for Unicode&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/unicode.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/unicode.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一貫した世界のライティングシステムのうちのほとんどが通る、テキストを表現し、操作する業界標準であるUnicodeに対処するBoostでのソリューションの数多くの需要は常にあった。この話では、我々は、Google Summer of Code 2009で開始したソリューションを示す。Rangeのコンセプトに基づいて、計量で、非侵入的で、柔軟で、ジェネリックで、潜在的にlazyである。&lt;/p&gt;
&lt;p&gt;アルゴリズムをジェネリックにするために、全てが書き直された。また、それによって、このライブラリはいかなる既存のUnicodeソリューションにも依存しない。このライブラリは、いくつかの外部データを要求するが、ライブラリがそれ自身のデータベースに埋め込むにも関わらず、ライブラリを別のデータベースとリンクするために使用することができる明快で安定したABIがある。&lt;/p&gt;
&lt;p&gt;Unicodeライブラリのニーズは、スピンオフとして別のライブラリに至った：Convertライブラリは、N to M変換を使用して、容易にRangeを変換し、分割することを可能にするライブラリであり、Rangeを正格もしくはlazyにイテレートする。また、それはSIMDによって加速された変形の開発を助ける設備を提供する。このライブラリは、最初はUnicodeのために作られたが、我々はそれを文字エンコーディング変換と無関係な様々なものに使用することができることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#proto-edsl-design&#34; id=&#34;proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Getting Jiggy with Proto — Hands-on Tutorial on C++ EDSL Design&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/proto.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/proto.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embedded Domain Specific Languagesは、中小の大きさの問題を宣言的で効率的な手段で扱うための設計として、実際に選ばれることが増えている。とりわけ、C++はBoost.Protoのようなライブラリのおかげで、そのような開発の親言語として、本当に興味深い。&lt;/p&gt;
&lt;p&gt;このチュートリアルは、現実的なシチュエーションでのクイックスタートとなり、Boost.Protoを用いたコードが美しく小さく効率的であることをデモすることに焦点を当てている。&lt;/p&gt;
&lt;p&gt;チュートリアルは以下の要素から構成される:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短いライブラリの基本的なブロックのプレゼンテーション        &lt;/li&gt;
&lt;li&gt;単純な計算機のコードから、拡張可能なコアを持つ解析関数の微分を行うシステムのプロトタイプまでのガイド付きの練習問題。この問題は、Protoを用いてEDSLを構築するいくつかの段階と、Proto特有のイディオムについて示す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参加者はテンプレートメタプログラミングに関する知識を持つ中級か上級のC++ユーザが望ましい。昨年のEric NieblerによるProtoに関する発表を見るのもよいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#haskell-pseudo-cpp&#34; id=&#34;haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Haskell – The Pseudocode Language for C++ Template Metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bartosz-milewski&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 :&lt;ul&gt;
&lt;li&gt;Part1 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz1.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part2 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz2.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part3 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz3.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++テンプレートメタプログラミングは使うのも解析するのもデバッグするのも難しいが、それはだいたいコンパイル時のC++が関数型言語的で構文がゲロいからである。うまくメタプログラミングするコツは、関数型プログラミングに精通して、C++メタプログラムのための擬似言語を作ることであるが、実のところ既にそのための言語はあり、そいつはHaskellとか言われている。このセッションではまず、そのHaskellで書いたコードと等価なC++のメタコードを並べることでHaskellがどんな言語かを紹介する。その後、Haskellを使った複雑なC++メタプログラムの読み書きの方法を示す。最後はC++における「実行できるテンプレート」の説明で、モナドとは何か、どうやってそれを使うかを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#intel-tm&#34; id=&#34;intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s C++ Software Transactional Memory Compiler and the Draft Specification of Transactional Language Constructs for C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#justin-gottschlich&#34; target=&#34;_blank&#34;&gt;Justin Gottschlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/boostcon_tm_spec.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/boostcon_tm_spec.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランザクションメモリ(TM)を利用すれば、プログラマからは複雑な共有メモリ管理が隠蔽されるため、並行プログラミングが容易になる。このセッションでは、最新のC++でのトランザクション言語構築のドラフト仕様について、ならびに、インテルのC++ software transactional memory (STM) compilerでの実装例について紹介する。&lt;/p&gt;
&lt;p&gt;Boost libraryの作者は高度に最適化され、極度にタイプセーフなソフトウェアを実装することを目標としている。&lt;br /&gt;
このセッションでは、厳格なタイプセーフと最適化を達成するために、Intel C++ STM compilerでどのようにトランザクションが利用されているかについて詳細に述べる。&lt;br /&gt;
特に、テンプレート宣言やラムダ式、コピーコンストラクタ、そして基本的な関数やクラスでどのようにトランザクションが利用されているか紹介する。&lt;br /&gt;
また、リラックス・トランザクションの概念について紹介し、この概念を用いて、取り消し不能なアクション(例えば、I/Oのように実行前に戻せないアクション)をどう扱うとよいかについて示す。&lt;/p&gt;
&lt;p&gt;最後に、最新のC++でのトランザクション言語構築のドラフトと、Intel’s C++ STM compilerのロードマップについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#mpl-graph&#34; id=&#34;mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introducing MPL.Graph&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#gordon-woodhull&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/mpl.graph.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/mpl.graph.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/introducing-mpl-graph-5262812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/introducing-mpl-graph-5262812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MPLメタプログラミングとBGLグラフコンセプトの過激な合いの子である、MPL.Graphがコンパイル時にメタデータのグラフを作成し走査するためのBoostライブラリとして提案された。&lt;/p&gt;
&lt;p&gt;グラフのデータ構造とアルゴリズムは様々な目的でコンパイルタイムに適用できる。例えば、クラス階層や、Expression Templateツリー、ステートマシンや文法は完全にコンパイルタイムに処理できるグラフである。また、呼び出しグラフや、オブジェクトの所有権、オブジェクト間のポインターは、部分的にコンパイルタイムに処理できるが、残りはランタイムに処理する必要があるグラフである。&lt;/p&gt;
&lt;p&gt;これらは全て、グラフのアルゴリズムを実行するために、標準的なグラフインターフェイスを適用することができるか、計算されたグラフから作り出される。仕様および分析にコンパイルタイムグラフを使用すれば、抽象化の無駄なランタイムサイクル回避でき、概念的な明快さと抽象化（一度&#34;メタ&#34;の壁を乗り越えられれば）が向上する。&lt;/p&gt;
&lt;p&gt;今のところ、MPL.GraphはBGLの&lt;code&gt;incidence_list&lt;/code&gt;と&lt;code&gt;adjacency_list&lt;/code&gt;データ構造と、&lt;code&gt;breadth_first_search&lt;/code&gt;と&lt;code&gt;depth_first_search&lt;/code&gt;アルゴリズムのコンパイルタイムバージョンを提供している。このライブラリはBoost.MSMで、リージョン(連結成分)と到達不能な状態とを区別するために、いまのところはサブライブラリとして使用されている。このトークではMPL.Graphの新しい用法を紹介する。(例えば、文法や、Fusion Graphとして知られるヘテロなグラフデータ構造など) また、最終的な目標である、コンパイルタイムグラフでランタイムグラフを記述する、&#34;グラフのグラフ&#34;といえるメタグラフについて少しだけ紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#lock-free-data-structure&#34; id=&#34;lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2： データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lockfree Programming Part 2: Data Structures&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#tony-van-eerd&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/lockfree_2011_slides.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/lockfree_2011_slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず昨年夏の話の概要から始め、昨年中断したところ - ロックフリープログラミングの&#34;FCD(恐怖、必然性、そしてかなりの嘘)&#34;について更に深めるところから再開する。&lt;/p&gt;
&lt;p&gt;今回はデータ構造を主題にするつもりだ。まずは、単純なロックフリースタックから始め、このスタックのABA問題(訳註：see &lt;a href=&#34;http://en.wikipedia.org/wiki/ABA_problem&#34; target=&#34;_blank&#34;&gt;http://en.wikipedia.org/wiki/ABA_problem&lt;/a&gt;)について、その後、様々なロックフリーキューについて議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cell-broadband&#34; id=&#34;cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mastering the Cell Broadband Engine architecture through a Boost based parallel communication library&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#lionel-lacassagne&#34; target=&#34;_blank&#34;&gt;Lionel Lacassagne&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sebastian-schaetz&#34; target=&#34;_blank&#34;&gt;Sebastian Schaetz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/cell_mpi.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/cell_mpi.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セルブロードバンドエンジン(CBE)は、内部のリングバスによって接続しているPowerPCプロセッサと、8ベクトル共同処理要素(8 vector co-processing elemens)を組み合わせる、組み込みシステムである。それは、マルチメディア、シグナルプロセッシング、ハイパフォーマンスコンピューティングなどのアプリケーションにふさわしいプラットフォームである。&lt;/p&gt;
&lt;p&gt;現行のセルプロセッサ(PowerXCell 8i)は、204.8 GFlop/sの最大の単精度のパフォーマンスと、102.4 GFlops/sの倍精度のパフォーマンスで規定される。この巨大な計算力とアーキテクチャのパワー効率(IBM BladeCenter QS22のための1ワットあたり0.87の倍精度GFlops/s)の観点から、グラフィック処理装置(graphics processing units:GPGPU)上の現代のx86マルチコアアーキテクチャおよび汎用計算(general-purpose computation)の適切な代わりであった。これらの利点にも関わらず、セルプロセッサの採用は期待されたよりも遅かった。我々は、これがアーキテクチャの新たな性質、およびその複雑性を抽象化する、便利なツールの不足に起因すると考える。&lt;/p&gt;
&lt;p&gt;この話では、我々は、セルアーキテクチャのための効率的なアプリケーションの開発を単純化するライブラリを作る努力を示す。我々は、基礎となるハイパフォーマンスアルゴリズムで直感的なインタフェースを作るために、現代のC++コンセプト、および多くのBoostライブラリ(MPL, PP, Function, Spirit)をどのように利用するかを示す。我々は、セルアーキテクチャと、我々がどのようにそれをマスターしたかにともなう調整について議論する。&lt;/p&gt;
&lt;p&gt;我々のライブラリの不可欠な部品は、メッセージパッシングに基づくCBEのシステムデザインに向いているプログラミングモデルである。我々の実装はBoost.MPIインタフェースに基づく非同期通信を含んでおり、また、パフォーマンスは集合的な操作(collective operations)を最適化した。&lt;/p&gt;
&lt;p&gt;また、我々は非同期データ転送、およびマルチバッファリングをサポートする、分散コンテナと、セグメント化されたイテレータの実装を示す。さらに、我々は制限のあるリソースを持ったシステムに特に適している、Boost.Testのあとに設計された計量の単体テストモジュールのデモを示す。&lt;/p&gt;
&lt;p&gt;最後に、我々はそのようなアーキテクチャのためのソフトウェアエコシステムの実行可能性を評価し、また、Boostの設計にどのように影響を受けたか、そのようなシステムからのパフォーマンスにコテ入れし、おそらく、そのような特定の組み込みハードウェア上のBoostの将来に関する議論を始めることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#odb-boost&#34; id=&#34;odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Object-relational mapping with ODB and Boost&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/orm_with_odb_and_boost.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/orm_with_odb_and_boost.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ODBは、C++のためのオープンソースで、クロスプラットフォームなクロスデータベースオブジェクトリレーショナルマッピング(ORM)システムである。同様の機能を提示する他のライブラリと異なり、ODBは、永続クラス(persistent classes)とC++クラス宣言から、それらのデータベース表現との間の変換を行うコードを自動的に生成する。また、ODBは高度にカスタマイズ可能である。人気のあるフレームワーク、BoostやQtのようなライブラリの基本型、スマートポインタ、およびコンテナのようなコンポーネントは、標準のバージョンと合わせて永続クラスでシームレスに使用することができる。&lt;/p&gt;
&lt;p&gt;話の前半は、ODBシステムの基本概念とワークフローを導入する。後半は、BoostのためのODBプロファイル、永続Boost値型(例えば&lt;code&gt;boost::gregorian::date&lt;/code&gt;)のサポートを行うライブラリ、スマートポインタ(例えば&lt;code&gt;boost::shared_ptr&lt;/code&gt;)およびコンテナ(例えば&lt;code&gt;boost::optional&lt;/code&gt;、&lt;code&gt;boost::unordered_set&lt;/code&gt;)に注目する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#gcc-plugins&#34; id=&#34;gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parsing C++ with GCC plugins&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/parsing_cxx_with_gcc_plugins.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/parsing_cxx_with_gcc_plugins.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNU Compiler Collection(GCC)は、成熟し、広く使用されたC++コンパイラ実装を持ったオープンソースでクロスプラットフォームなコンパイラスイートである。GCCのバージョン4.5.0は、コンパイラコンポーネントの再利用と同様に、コンパイルプロセスのカスタマイズを許可する、新たな動的なプラグインアーキテクチャを追加した。この発表のゴールは、GCCプラグインを使用して、C++を解析する方法を示すことである。&lt;/p&gt;
&lt;p&gt;この話は、解析された翻訳単位の内部表現と、GCCプラグインアーキテクチャのハイレベルな概要から始まる。その後、C++宣言が存在することに関する情報の表示をするための、単純なプラグインの実装を示す。この話は、主翻訳単位、アプリケーション特有のプラグマと属性のハンドリング、プログラマティックなテンプレートインスタンス化に追加のC++コードを注入するなどのより高度な技術をカバーする。&lt;/p&gt;
&lt;p&gt;この発表は、Clang(最近全面的なC++98サポートを達成した別のC++コンパイラ実装)とGCCプラグインアーキテクチャの簡潔な比較なしでは不完全になる。この話は、Boostの、および(GCCプラグインを使用して実装することができる)より広いコンテキストで可能なおもしろいアプリケーションの迅速なブレーンストーミングセッションで締めくくる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#phoenix-v3&#34; id=&#34;phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Phoenix V3 –An Overview&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#thomas-heller&#34; target=&#34;_blank&#34;&gt;Thomas Heller&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hartmut-kaiser&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/phoenix_v3.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/phoenix_v3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phoenixは次世代のインラインの無名多態関数オブジェクト生成器となるだろう。V3ではBoost.Bind と Boost.Lambdaの機能が合成された新しいライブラリとなった。このライブラリを記述する際、後方互換性を保持したまま前述したライブラリ(訳註：BindとLambda)の制限を修正した。このセッションの目的は、C++における関数プログラミングが、いかに重要かつエレガントかについて概説することだ。セッションの第一部では、Phoenixで定義されたDomain Specific Embedded Language (DSEL)について述べる。DSELは演算子のオーヴァーロードと標準C++関数で構成されている。PhoenixがC++を模倣した言語を定義したのは、潜在的なユーザーが関数プログラミングに入門するハードルを下げるためだ。一方、既存のC++コードは(関数オブジェクトとして知られる)高階関数に依存している。たとえば、C++標準ライブラリはあるアルゴリズムの挙動を変更するために高階関数を使っている。第二部では関数オブジェクトの代わりにどうPhoenixを利用するか、また、Phoenix expression内でどう既存のユーザーコードを有効にするかについて例示する。しかし、Phoenixの真の力はこんなものではない。Phoenixは前のセクションで議論したように、式をデータとして扱う (C++においては)ユニークな機構を備えている。これによって、C++の標準的な手法ではなく、ユーザーの好みに応じた手法でPhoenixを利用できる。潜在的なユーザーにPhoenixを軸に展開する将来的なアプリケーションの見識を得ていただくために、このセッションの締めくくりとして、これらの機構についての概説をするつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-simd&#34; id=&#34;boost-simd&#34;&gt;Boost.SIMDによる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical SIMD acceleration with Boost.SIMD&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;プレゼンテーション資料 ： &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/simd.pdf&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料 ： &lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SIMDマシン - 同じ命令で複数の要素からなるデータを並列に計算する能力を持つマシン - は、今日では、スーパーコンピュータからデスクトップコンピュータやモバイルコンピュータまで、ありふれたものとなっている。&lt;br /&gt;
数値計算のツールやライブラリは、SIMDを使用することによって計算速度を向上させることができるが、今のところ、C++デベロッパのための、最小で高レベルな、プラットフォームに依存しないインターフェイスを提供するライブラリはないといえるだろう。&lt;/p&gt;
&lt;p&gt;このチュートリアルで、我々はレビュー待ちの状態にあるBoost.SIMDライブラリについて紹介し、技術的な挑戦と、どのようにBoost.SIMDを用いて、一般的な、あるいは、あまり一般的でない問題に適用させるのかについて解説する。&lt;br /&gt;
解説では、我々のライブラリが、全ての種類のアルゴリズムを高速化するという点や、ペナルティがないようにSIMDハードウエアをちょうどよく抽象化するという点においての有用さについて述べる。&lt;/p&gt;
&lt;p&gt;Boost.SIMDの設計は、可能な限り軽量になるように、また、巨大な数値計算ライブラリNT2の一部となるように作られている。&lt;br /&gt;
NT2は、テーブルや行列を作るために、SMP、MPI、GPGPUの技術と一緒にBoost.SIMDを用いている。&lt;br /&gt;
Boost.SIMDはSIMDのみを扱う専用ライブラリとして作られている。&lt;br /&gt;
したがって、Boost.SIMDの主たる抽象化はSIMDレジスタである。(例えば、SIMDプロセッサによって処理される基本となる単位)&lt;br /&gt;
また、Boost.SIMDはプラットフォームに依存しない高レベルインターフェイスを提供するが、ローレベルな問題はユーザにとって主な関心事のままである。&lt;/p&gt;
&lt;p&gt;Boost.SIMDは、一定のコードパターンを認識し、最も効率的な解法への射影をするように、Boost.Proto DESLフレームワークを用いている。例えば、Altivecと未来の世代のx86環境に存在する積和命令や、与えられた範囲で必要とされる値を検出するために用いている。&lt;/p&gt;
&lt;p&gt;さらに、このライブラリは、与えられたアーキテクチャのプリミティブに適正に簡単に特殊化でき、新しいターゲットや関数を作成することができる強力な外部ディスパッチ機構を供えている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#real-workd-spirit-qi&#34; id=&#34;real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Qi in the Real World&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#robert-stewart&#34; target=&#34;_blank&#34;&gt;Robert Stewart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/spirit_qi_in_the_real_world.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/spirit_qi_in_the_real_world.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spiritの過去のセッションは、Spiritの導入や、チュートリアルによって現実の利用に注目した。実際のSpirit.Qiパーサーを書く際、速い段階で「悪魔は細部に宿る」ということに気付くだろう。思考錯誤によって、あるいはおそらくSpiritメーリングリストによって発見しなければならない特別なケース、トリック、イディオムがある。それには時間がかかり、便利とは限らないかもしれない。このセッションに、我々は&lt;code&gt;printf()&lt;/code&gt;(スタイルフォーマット文字列)のためのSpirit.Qiパーサーの開発を通じて見て回るだろう。結果として型安全で効率的な、&lt;code&gt;printf()&lt;/code&gt;の置き換えになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#sweep-line-algorithm&#34; id=&#34;sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sweep-Line Algorithm for Voronoi Diagrams of Points, Line Segments and Medial Axis of Polygons in the Plane&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#lucanus-simonson&#34; target=&#34;_blank&#34;&gt;pLucanus Simonson&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#andrii-sydorchuk&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/voronoi_diagram_of_line_segments.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/voronoi_diagram_of_line_segments.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平面上の交点のないセグメントと点の集合を入力値とするボロノイ図を演算するアルゴリズムについて述べる。&lt;/p&gt;
&lt;p&gt;点のボロノイ図の演算を行なうFortuneによる平面掃引アルゴリズムを踏まえて、理論値であるO(n log n)の計算量を維持したまま、このアルゴリズムを線分に適用できるように拡張した。&lt;br /&gt;
線分に対するボロノイ図は、多角形中間軸を自明に生成することができ、VSLI、CAD、CAMの製造など、さまざまな適用が考えられる。&lt;br /&gt;
効率を犠牲することなく数値堅牢性を保証するアプローチについても議論するつもりである。&lt;br /&gt;
lazy-exact arithmeticに基づく堅牢な述語を用いることで、このアルゴリズムが整数座標入力について確実に正しい結果を返すことを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#b-tree&#34; id=&#34;b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Proposed Boost B-tree Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;プレゼン資料：&lt;a href=&#34;https://github.com/boostcon/2011_presentations/blob/master/tue/proposed_b_tree_library.pdf&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料：&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B木はデータベースやファイルシステム、ディスクに記憶される連想コンテナなどに利用される、どこにでもあるデータ構造である。&lt;/p&gt;
&lt;p&gt;このセッションではB木について、また、ディスクに記憶されるB木による&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;ライブラリについて紹介する。&lt;br /&gt;
まずB木を概略的に説明し、提案されたライブラリコンテナとC++標準の関連するコンテナとの関連について示す。すなわち、実装されているインターフェースや、落し穴、可変長データ、パフォーマンス、また、このライブラリの実装がどこまで進んでいるかについて紹介する。&lt;br /&gt;
フィードバックや議論する時間も設ける予定だ。&lt;/p&gt;
&lt;p&gt;このセッション終了時には、参加者した方々がご自身のアプリケーションにこのライブラリを利用することができるようになり、このライブラリがBoostに正式実装されるよう、さらなるフィードバックしていただけるようになるはずである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#think-async&#34; id=&#34;think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thinking Asynchronously: Designing Applications with Boost.Asio  &lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/thinking_asynchronously.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/thinking_asynchronously.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初から、Boost.Asioは本心では、フレームワークとしてではなく、ツールキットとして設計された。ライブラリは1セットの基礎、汎用的なビルディングブロックの提供に注目する。タスクを検討するために、一つ以上の正しい方法があり、また、ライブラリは特定の書き方を強制しない。&lt;/p&gt;
&lt;p&gt;この発表では、我々は、問題を設計するためにどのように非同期の考え方を適用することができるかを考えていく。我々は、設計代案、共通の罠と落とし穴、それと複合操作によって計算量を攻撃する方法を見ることになるだろう。この話はまた、最適化、およびパフォーマンスと拡張性を管理するために、Boost.Asioが提供するツールをカバーするだろう。&lt;/p&gt;
&lt;p&gt;この話は、出席者がBoost.Asioにある程度基礎的なレベルのなじみがあると仮定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#thread-shared-variables&#34; id=&#34;thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Threads and Shared Variables in C++0x&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hans-boehm&#34; target=&#34;_blank&#34;&gt;Hans Boehm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： キーノート&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/boehm-boostcon11.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/boehm-boostcon11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの規格ドラフトは、言語へスレッドを導入し、スレッド間で共有される変数の意味を念入りに定義する。設計は、デフォルトでマルチスレッドのプログラムがスレッドの単純な割り込み実行に基づいたセマンティクス(つまり、順序一貫性:sequential consistency)を保証するべきであるという考えに基づく。間違ったものや無意味であるものとして、我々がデータレース(通常の共有変数への、ほとんどの種類の非保護同時アクセス)を考察するという理由だけで、これは効率的な実行を許可する。ドラフトは代わりに、とくにID付けされたオブジェクトにアクセスを許可するアトミック操作の広範囲なコレクションをサポートする。&lt;/p&gt;
&lt;p&gt;我々は、C++0xのスレッドサポートの概要を示し、次に、共有変数セマンティクスを定義するメモリモデルとアトミックライブラリの相互作用に注目する。過去の慣例とできるだけ一致するように心がけたが、我々は多くの難題と、驚きに遭遇した。我々は、コピーしないために試みた過去の誤りのいくつかに言及する。&lt;/p&gt;
&lt;p&gt;これは、Sarita Adve、Lawrence Crowl、Paul McKenney、Clark Nelson、Herb Sutter、他の多くの方との共同作業について説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#xml-processing&#34; id=&#34;xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Toward Native XML Processing Using Multi-paradigm Design in C++  &lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#aniruddha-gokhale&#34; target=&#34;_blank&#34;&gt;Aniruddha Gokhale&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sumant-tambe&#34; target=&#34;_blank&#34;&gt;Sumant Tambe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/leesa_boostcon.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/leesa_boostcon.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XMLプログラミングは、抽象、分割、プログラミングスタイル、およびイディオムの、それ自身の規則によって強力なデータ処理パラダイムとして出現した。経験を積んだXMLプログラマが求めるものは、それらの生産性がXMLプログラミングのドメイン固有パターンとプラクティスの使用を許可する言語とツールの有効性に依存する。しかし、これらのツールが与えられたXMLスキーマの静的に型付けされた、用語特化のオブジェクトモデル(vocabulary-specific object model)を自動的に生成するため、オブジェクト指向のコミュニティは専用XML言語よりもXMLデータバインディングツールを好む。不運にも、これらのツールはたいてい、純粋なオブジェクト指向の法則を使用して、XMLプログラミングの抽象的概念を統合する際の困難さのために、経験を積んだXMLプログラマの期待するものを避ける。この話は、C++のマルチパラダイムプログラミング能力の新たな適用によって、この普及しているギャップがどのように縮小されるのかを実証する。項目として、ジェネリックプログラミング、メタプログラミング、ジェネレーティブプログラミング、戦略プログラミング(strategic programming)、およびC++によってサポートされた演算子オーバーロードがネイティブで型付けされたXMLプログラミングをどのようにともに可能にするのかを話す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#why-cpp0x-is-awesomest-network-programming&#34; id=&#34;why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why C++0x is the Awesomest Language for Network Programming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Awesomest.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Awesomest.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;警告 ： これは臆病な人のための話ではない。最先端の言語機能があり、ハックがあり、言語の乱用があるだろう。このセッションは椅子を投げておわるかもしれない。&lt;/p&gt;
&lt;p&gt;スリルを求めるオタクにとって、それは楽しい旅であるべきだ。我々は、新たなC++0x言語とライブラリ機能のうちいくつかがどのように大きな位置を占めるのかを見ていく。また、いくつかのそれと古いものは、簡潔で、表現力があり、効率的なネットワークプログラムを作るためにBoost.Asioと連携することができる。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Norihisa Fujita, zak, DigitalGhost&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++Now! 2012 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/cppnow/2012.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:cppnow/2012.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++Now! 2012&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012&#34; target=&#34;_blank&#34;&gt;C++Now! Presentations 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;../archive/cpp_online_reading.html&#34;&gt;C++オンライン読書会&lt;/a&gt; にて有志が一部の資料を読んでいるので、そちらも資料を読むお供にどうぞ。&lt;/p&gt;
&lt;h2&gt;ビデオ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/user/BoostCon&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/user/BoostCon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加レポート&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/redboltz/20120519/1337385881&#34; target=&#34;_blank&#34;&gt;C++Now2012体験記 - redboltzの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120522/1337650107&#34; target=&#34;_blank&#34;&gt;C++Now! 2012に参加してきました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25007975614/c-now-boostcon-c-now-boost-konferenz-im&#34; target=&#34;_blank&#34;&gt;C++Now! - BoostCon新装開店 (C++Now! – Boost-Konferenz im neuen Gewand) - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-useful-computations&#34;&gt;おなじ環境でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ustring&#34;&gt;Ustring - 現代的な&lt;code&gt;std::string&lt;/code&gt;の代替&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-forward&#34;&gt;キーノート：C++11で前進せよ!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における今日的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compile-time-reparsing&#34;&gt;コンパイル時 再パース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#50-boost-libs&#34; id=&#34;50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;50 Boost Libraries in 180 minutes&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/boris-schaeling/&#34; target=&#34;_blank&#34;&gt;Boris Schäling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/50_boost_libraries.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/50_boost_libraries.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションでは、50個のBoost Libraryを180分かけて紹介する。多くのBoost Libraryについて、幅広く俯瞰する。あまりboostに詳しくない方、または、いくつかのライブラリしか知らない方は、今後、boostが提供すべきすぐれたアイデアを得ることができるだろう。このセッションは、後程どのライブラリについて学びたいか、いまのプロジェクトで使えるか、さらには貢献できそうか判断する指針となるだろう。 このセッションは、プレゼンターの著書である「The Boost C++ Libraries」(英語版 2011/6刊行)と「Die Boost C++ Bibliotheken」(ドイツ語版 2012/1刊行)に基づいている。これらの書籍ではすぐに習得できる一般的なライブラリを紹介している。このセッションでは、これらの本から例を引用するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#more-useful-computations&#34; id=&#34;more-useful-computations&#34;&gt;おなじ時間でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More Useful Computations in the Same Duration: Optimizing Embedded Hard Real-Time Code in C++
スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は非常に広い問題領域に適用可能なマルチパラダイム言語である。このセッションでは限られたメモリリソース、かつ、200KHz(5マイクロ秒)サーボインタラプト割合のリアルタイム組み込みシステムにC++を利用した際の最適化と拡張について紹介する。二年以上かけて、このシステムのデータ処理帯域幅は、ハードウェアの強化をすることなく大きく改善した。この改善を達成するために、様々なアプローチとテクニックについて議論した。その結果、ほとんどのよく知られているC++イディオムは組み込みのリアルタイムシステム環境にはよく合わないことが分かった。しかし、C++はCよりもメンテナンスの面でもコード実行速度の面でも優位な性能を見せた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションは、組み込み向け、汎用機向けという区分なく、特定のC++コードの実行速度の高速化に興味がある方には有意だろう。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションで、特定の組み込み環境について、何が正しく動き、何が正しく動かないのか、そしてその理由はなにかについて説明する。主なテーマはパフォーマンスモニタリング、特定領域のコードデザイン、コンパイラに高速なコードを生成させる方法、スレッドセーフオプションである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#whirlwind-overview-cpp11&#34; id=&#34;whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Whirlwind Overview of C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/leor-zolman/&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/cpp_overview_handout.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/cpp_overview_handout.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このC++11の簡潔なイントロダクションでは、プレゼンターであるLeor Zolmanが言語への主要な機能追加について調査する。また以下の項目についても述べる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コード可読性の向上について(ラムダ, 統一初期化, &lt;code&gt;auto&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;パフォーマンスの向上について(右辺値参照とムーブコンストラクタ)&lt;/li&gt;
&lt;li&gt;マルチスレッドについて(並行性とアトミック型)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、他の多岐に渡る便利な機能や、標準ライブラリのコンポーネント(スマートポインタと新しいSTLコンテナ)についても触れる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションはC++11の簡潔な概要を知りたい方向けである。そのため、詳細をカヴァーしきれない言語機能、ライブラリが多々あることをご了承いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#odeint&#34; id=&#34;odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;odeint – Solving ordinary differential equations in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/odeint.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/odeint.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常微分方程式(ODE: Ordinary differential equation)は自然科学、応用分野の諸領域で重要な役割を果たしている。&lt;br /&gt;
例示すると、古典的ニュートン物理学、化学反応式、量子系から神経系にわたる、個体群動態における反応速度式などである。&lt;br /&gt;
さらに、常微分方程式は偏微分方程式(PDE: partial differential equation)の離散化をする際頻出する。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、odeint(&lt;a href=&#34;http://odeint.com&#34; target=&#34;_blank&#34;&gt;odeint.com&lt;/a&gt;) -常微分方程式の数値解法を探索するためだけのC++ライブラリ- を紹介する。このライブラリはBoost入りを目指している。&lt;/p&gt;
&lt;p&gt;odeintは非常にジェネリックに実装されており、高速に相互運用することができる。&lt;/p&gt;
&lt;p&gt;odeintはODEソルバのためのC++コンセプトを導入しており、標準的なメソッドを数多く実装している。例えば、古典的Runge-Kuttaスキーム、ステップサイズコントロールと稠密出力のメソッド、非明示なメソッドとシンプレティック解法などである。； odeintはコンテナ非依存であることを強調しておきたい。つまり、使用者はstd::vectorのような特定の型を使うことを強いられない。 それゆえ、ネットワーク、ラティス上のODEを解くこともできる。 さらに、多倍精度か区間演算を利用できる。 ジェネリックな設計を取っているので、odeintは容易に並列化してCUDA GPUで実行できる。 それにもかかわず、odeintはわかりやすいインターフェースを備えているので、簡単に、容易に使うことができる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではodeintの主要な機能ならびにそのソフトウェアデザインについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#fresh-paint&#34; id=&#34;fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fresh Paint&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11では様々な方法で言語を拡張する興味深い新機能が導入された。&lt;/p&gt;
&lt;p&gt;このセッションではそれらを完全に無視して、別のテーマに焦点を当てる。すなわち、C++11でよりシンプルに、クリーンに、エレガントに記述する方法について述べる。このセッションはソフトウェアデザインの最先端についてあまりよく知らないけれど、クリーンかつシンプルかつ効率的なコードを書くことに関心がある方に最適である。話のなかでデザインについて知見が得られれば幸いである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#openmp-for-better-high&#34; id=&#34;openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP for better high-level parallelism, not just for High Performance Computing&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenMPは高次の言語を用いたインクリメンタル並列化をサポートする、C,C++,FORTRAN向けの分散メモリ並列化の仕様である。&lt;/p&gt;
&lt;p&gt;OpenMPはハイパフォーマンスコンピューティング、スーパーコンピューティングのためのもの、と思っている方がいるかもしれないが、実際は他にほぼ類をみない分散メモリ並列化 - これは3つの汎用言語で実装されている - に適しており、それ自体高次言語である。OpenMPはグラフィクスや可視化の分野や、組み込みやリアルタイムアプリケーション分野、コミュニケーションとネットワーク分野、自動化とロボディクス分野、財務や通商分野、医療と生命工学分野、石油・ガス業界、シミュレーション、データベースとミドルウェア、音声・オーディオ処理、汎用データ解析などの分野でも有効であることが知られている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#hpx&#34; id=&#34;hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HPX: A C++11 parallel runtime system&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/bryce-adelstein-lelbach/&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/hartmut-kaiser/&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/matthew-anderson/&#34; target=&#34;_blank&#34;&gt;Matthew Anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;計算科学のアプリケーションは、しばしば基になる実行モデルから受けついだ選択の影響を受ける。並列計算アプリケーションにおいては、MPIが注目をあつめている。しかし、電源や、プロセッサコアの複雑性、マルチコアソケット、GPUの異種混在という問題が深刻になってきたため、並列アプリケーションはスケーリング不全の危機に陥っている。&lt;/p&gt;
&lt;p&gt;HPX実行時システムはモジュラーであり、完全実装であり、SMPノードとコモディティ・クラスターのような従来型の並列計算アーキテクチャを対象としたParalleX実行モデルのパフォーマンス指向の表現である。MPIの代替として、HPXは軽量ユーザースレッドを管理するためのルーチンに加えて、アクティヴグローバルアドレス空間(AGAS: Active Global Address Space)を提供している。HPXはC++11で実装され、20のBoostライブラリ/Boostライブラリ候補を利用している。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、実行時システムアーキテクチャに焦点を当てるとともに、HPXでどのようにBoost C++ライブラリやC++11機能を利用しているかについて議論する。HPXの概要についてプレゼンテーションし、さらに、競合するランタイムシステムおよび科学計算コミュニティ向けアプリケーションとの比較とベンチマークを紹介する。HPXに興味、関心をもたれて、実際に試用していただければ幸いである。ダウンロードはこちらから： &lt;a href=&#34;http://stellar.cct.lsu.edu/&#34; target=&#34;_blank&#34;&gt;http://stellar.cct.lsu.edu/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#lambda-functions&#34; id=&#34;lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lambda Functions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無名関数は多くの言語で有用なツールとして成功を収めている。その局所性と明瞭な構文により、高い表現力と、バグの少ないコードを記述できる。Boost.LambdaやBoost.Phoenix、そしてFC++といったライブラリによって、C++にラムダ式がもたらされたが、今日、C++11には言語機能としてラムダ関数がある。ラムダ関数は無名関数オブジェクトとよく似ている。というのは、ラムダのスコープ外でキャプチャ/識別子の状態の変更が可能だからだ。&lt;/p&gt;
&lt;p&gt;この90分のチュートリアルセッションで、この新しい言語機能の構文と利用方法を概観する。上達を図るために練習問題や例を多数用意している。ラムダが利用可能なコンパイラを持参し、ぜひラムダ関数を使うとコードがどれほどよくなるか体験していただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#future-cpp1x-proposals&#34; id=&#34;future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future C++1x proposals&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11が公開された今、C++1xに搭載される次の機能は何だろうか？ このプレゼンテーションでは2月のコナ会議で提案されたものを紹介していく。Evolution Working Groupでレヴュー済みのペーパーと、ConcurrencyおよびLibrary Working Groupの活動についても焦点を当てる。 おまけ： 主要なコンパイラについて、最新のC++11実装状態についてもお伝えしたい。&lt;/p&gt;
&lt;p&gt;2012年2月のコナ会議を経て、標準委員会は次のC++標準を暫定的に2017年に、その次を2022年に、おおよそ五年毎に公開するように決定した。また、いくつか主要なものを例にあげると、モジュールや高度な並列抽象化、リフレクションといった次の標準にむけての提案についても精査した。このプレゼンテーションではこれらの機能について焦点をあて、C++11にどのような影響を与えるかについて議論する。&lt;/p&gt;
&lt;p&gt;カナダ、IBMのC++標準委員会代表や、BoostConでトランザクショナル・メモリからC++11の並行について多様なトピックを長きにわたってプレゼンターを務めた者として、標準委員会でC++の将来搭載されるべき機能についての議論にはできるだけ参加するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#variadic-tmp&#34; id=&#34;variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variadic Template Metaprogramming using Monads&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/bartosz-milewski/&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/eric-niebler/&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/compile_time_runtime_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/compile_time_runtime_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11 の新機能である可変引数テンプレートは，パワフルだが気の触れた制限がついている．なんと template parameter pack が一級市民ではないので，一部のよくある(メタ)プログラミングの定石で使いにくいのだ．うれしいことに偶然，関数型プログラミング，正確に言うと Haskell では，おもしろい方法でこの問題を解決している．というわけで我々は，可変個継続，継続モナド，カリー化，その他C++メタプログラミングで使うためのエキゾチックな構成を使った方法について話す．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#ustring&#34; id=&#34;ustring&#34;&gt;Ustring - 現代的なstd::stringの代替&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ustring – A Modern Alternative to &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alan-talbot/&#34; target=&#34;_blank&#34;&gt;Alan Talbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/ustring.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/ustring.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++プログラミングで推奨される文字列表現はstd::stringである。しかし、実際には、あるプログラムには三つ以上の文字列型(例えば、&lt;code&gt;std::string&lt;/code&gt;、MFCの&lt;code&gt;CString&lt;/code&gt;、&lt;code&gt;char*&lt;/code&gt;)が混在していることがほとんどである。われらが&lt;code&gt;std::&lt;/code&gt;stringは長年よくやってくれているが、いろいろな制限やときどき見せる奇行に悩まされることもままある。そして、他の文字列クラスが備えている便利な機能、特に言うならUnicodeサポートが欠けている。C++11が公開されたことと、&lt;code&gt;std::string&lt;/code&gt;が実装されてから数十年来の知見を集めて、よりよいツールを創ってみた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの前半は、将来、強力かつ競争力のあるツールとなるよう、&lt;code&gt;std::string&lt;/code&gt;の制限や問題を解決することをめざした新しいクラスの設計について述べる。多くの知見を集積して、C++11にふさわしい、簡便で、表現力豊かで、強力な文字列処理を創りだすことが目標である。そのために、後半は理論や秘話、懸案事項やアイデアなどをいただきたく、聴講されている皆様とブレインストーミングするセッションにするつもりである。このライブラリは開発の初期段階にあるので、変更の余地はあるし、どんなアイデアでも歓迎する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#high-level-threading&#34; id=&#34;high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: High-Level Threading&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11は並行処理の新しい機構を備えている。慎重に設計されたシステムのプログラミング言語であるならば当然のことだが、言語機能は厳格な理論的基礎(メモリモデル)に基いて構築され、低レヴェルプリミティヴ(atomic)へのアクセスを提供している。幸運にも、C++11ではスレッドを効果的に使う際に、こうした難解な詳細について理解する必要はない。(もし低レヴェルの事柄について詳細を知りたければ、Tony Van Eerdのプレゼンテーションを見るべし)&lt;/p&gt;
&lt;p&gt;その基礎の上に、プログラマが日々のコンカレントなコードを記述する際、実際に使うべきAPIが用意されている。すなわち、大量のロックやミューテクスや条件変数、そして、より高いレヴェルの&lt;code&gt;future&lt;/code&gt;, &lt;code&gt;promise&lt;/code&gt;, &lt;code&gt;packaged_task&lt;/code&gt;などだ。また、スレッドセーフなプログラミングの中核的問題についても述べ、これら問題を解決するためのコンポーネントの使いかたについても述べる。&lt;/p&gt;
&lt;p&gt;メモ： このプレゼンテーションに興味を持たれたかたは、&lt;a href=&#34;#cpp11-gems&#34;&gt;&#34;Other C++11 Gems&#34;&lt;/a&gt;のプレゼンテーションにも食指が動くかもしれない。そちらのプレゼンテーションでは、時刻や時間、タイムアウトでのロック、スリープといった優れたデザインの新機能について取りあげるそうだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#grill-the-committee&#34; id=&#34;grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grill the Committee&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準のなれそめについて知りたくないか？ このパネルディスカッションではC++標準委員会のメンバーに登壇いただき、聴衆の皆様に気になっていることを質問していただく趣旨である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#moving-forward&#34; id=&#34;moving-forward&#34;&gt;キーノート： C++11で前進せよ!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Moving Forward with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料&lt;ul&gt;
&lt;li&gt;前編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;後編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前編・後編一括：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右辺値参照はC++に二つの新しい相乗的に機能するプログラミングイディオムをもたらす。すなわちムーブセマンティクスと完全転送である。このプレゼンテーションでは右辺値参照とは何か、ムーブセマンティクスとは何か、完全転送とは何か、といった基礎からはいる。また、このプレゼンテーションではこれらが導入された動機や利用法、コンパイラがこれらを自動生成する条件についても述べる。さらに、クラスを設計した後でも、条件に合致すれば自動的に、ムーブセマンティクスが最適化の役目を果たすことができるけれども、ムーブセマンティクスの知識は直接的にクラス設計に影響を与えることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#metaparse&#34; id=&#34;metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaparse – Complie-time parsing with template metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/abel-sinkovics/&#34; target=&#34;_blank&#34;&gt;Ábel Sinkovics&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/zoltan-porkolab/&#34; target=&#34;_blank&#34;&gt;Zoltan Porkolab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/2b6b26f9fcc28fa7b2c777819111012217116ff5/tue/metaparse.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/tue/metaparse.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Metaparseは、C++のコンパイル時文字列を解析する、パーサー生成のためのC++テンプレートメタプログラミングライブラリである。Boostはすでに2つのパーサージェネレータライブラリを持っている：Boost.SpiritとBoost.Proto。MetaparseとBoost.Spiritの主な違いは、Metaparseによって生成されたパーサーはコンパイル時に実行され、Boost.Spiritによって生成されたパーサーは実行時に実行されるということである。Boost.ProtoパーサーはC++の有効な式をコンパイル時に処理し、Metaparseは自由形式の文字列を入力としてパーサーを構築する。&lt;/p&gt;
&lt;p&gt;コンパイル時の任意なテキストを解析することは、多くの状況で有用である。我々はより複雑なユースケースを比較的に簡単にする方法を提供する。一般的な構文は、以下の正規表現のコンパイル時検証を有効にすることでBoost.Xpressiveのラッパーを作成できる。より複雑な例として、printfの書式指定文字列を解析し、コンパイル時に引数の型を検査する。コンパイル時パーサーの別な手段は、組み込みDSLスクリプトをC++のネイティブな関数への変換をコンパイル時に行い、実行時にそれを実行することである。最も複雑な例では、テンプレートメタ関数を定義するために、組み込みDSLをどのようにして実装するかを示す。Metaparseはパーサー生成のDSLをメタ関数に変換する能力を持つ。&lt;/p&gt;
&lt;p&gt;Metaparseの内部構造と、それをどのようにして拡張するかを説明する。ライブラリの正確なエラー報告の機能を紹介する。モナドの概念の入門と、それを使用することでパーサーの構築を容易にすることを示す。新たなC++標準の&lt;code&gt;constexpr&lt;/code&gt;は、コンパイル時にアルゴリズムを実行するための構造を提供する。メタプログラミングと&lt;code&gt;constexpr&lt;/code&gt;の間を繋ぎ、パーサーによって処理される入力の構文的なオーバーヘッドを最小限にしてそれを利用する方法を提供する。&lt;/p&gt;
&lt;p&gt;Metaparseと、その元となるライブラリは、以下から利用可能である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://abel.web.elte.hu/mpllibs&#34; target=&#34;_blank&#34;&gt;http://abel.web.elte.hu/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sabel83/mpllibs&#34; target=&#34;_blank&#34;&gt;https://github.com/sabel83/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これはユーザーと開発者にとって高度な話である。Boost.MPLに精通していることを前提とする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#ladon&#34; id=&#34;ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ladon - A Distributed State-Machine Framework&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;階層的な状態マシンは、多くのドメインにエレガントな解決策を提供する。それらの厳格な要件は、高い信頼性のシステムのための規律を一段階強化する。状態マシンはシステムの反応的な振る舞い(reactive behavior)について記述するのに役立つ。ポート束縛、メッセージ配信、およびプロトコル変換を提供する一方で、コミュニケーションポートや包含コンセプト(containment concepts)のようないくつかの(ROOMのような)構造的コンポーネントを加える。そうすれば、分散状態マシンフレームワークが生まれる。よく定義されたインタフェースを持ったより小さな分散マシンに分割することは、大きな反応的システムのための強力なツールである。&lt;/p&gt;
&lt;p&gt;このセッションでは、Ladon分散状態マシンフレームワーク(C++Now 2012でデビューするciere consultingのオープンソースプロジェクト)を導入する。Ladonは、反応的なシステムのためのリッチな分散ソリューションを作成するために、Boost.MSM、Boost.AsioおよびBoost.Spiritを融合させる。フレームワークの設計と基本的な使用法についての議論に加え、我々はあなたのシステムで使用できるおもしろいパターンと解決策のいくつかを紹介する。我々が言及するライブラリは、以下のものを含む：MSM、Spirit、Asio、Fusion、Signals2、そしてPhoenix。&lt;/p&gt;
&lt;p&gt;この90分間のセッションは、初心者と中級レベルの出席者に、いくつかのBoostライブラリと現代的なC++手法の概観を提供する。&lt;/p&gt;
&lt;p&gt;語源 - Ladon(Λάδων)は、ヘスペリデスの庭のトマトを守護する、ギリシャの100の頭を持つヘビのようなドラゴンである。頭がそれぞれ異なる言語を話したという噂がある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#low-level-threading&#34; id=&#34;low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t Try This at Work – Low Level Threading with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のC++は&#34;メモリモデル&#34;がある。しかしこれはどんな意味で、どうして導入されたのか、また、以前のC++に必要なかったのは何故か？ これを使って何ができるか？ そしてこれらの新しい原子操作にはなにやら相関があるようだ… むむむ…&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#exception-safety&#34; id=&#34;exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exception-Safe Coding in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;皆様のコードは100%例外安全を達成していると言えるだろうか？&lt;/p&gt;
&lt;p&gt;例外を安全に利用するのはなまはんかな問題ではない。この業界では20年来この問題に奮闘してきた。もし皆様が恐怖や不透明感、例外安全に疑いをもっていたり、純粋にC++で例外のベストプラクティスを知りたいと思っているならば、ぜひこのプレゼンテーションを聞いていただきたい。まず始めに、&#34;何を解決しようとしているか&#34;から入り、代案について議論し、例外の利用に関する問題を確認し、例外安全について曲解されやすい試みについて述べる。また、安全な例外の利用法についての基本的なガイドラインと過去の例外安全ではないコードベースから移行するための鉄板の実装テクについても述べる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの目的は、皆様に、簡単に記述できて、理解しやすく、高速に動作し、例外が発生しても100%の堅牢性を誇るコードをどうやったら書けるようになるかお伝えすることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#moving-boost-to-git&#34; id=&#34;moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Moving Boost to Git&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitヴァージョン管理システムはSubversionに比べてBoostの開発者、利用者双方に利益がある。このセッションではBoostからみたGitについて紹介し、徐々に高度な議題について述べていく：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;なぜGitなのか？ - 成層圏から俯瞰してみよう&lt;/li&gt;
&lt;li&gt;皆様にGitの基礎を知っていただくために、駆け足のGitのチュートリアル&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost開発者の視点から&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost利用者の視点から&lt;/li&gt;
&lt;li&gt;Boostのモジュール化への試み - 課題、アプローチ、トレードオフについて&lt;/li&gt;
&lt;li&gt;Boost開発者にあわせたワークフロー構築の試み&lt;/li&gt;
&lt;li&gt;BoostをGitに移行してみるワークショップ - 実行計画の開発&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この&#34;BoostをGitに移行しよう の前準備&#34;と題したドキュメントとファイルをC++Now!の二週間前くらいまでに用意するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#learned-developing-std-lib&#34; id=&#34;learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lessons Learned Developing the C++11 Standard Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11の標準化作業はおおよそ8年かかり、標準ライブラリのサイズは少なくともページ数上では倍増した。標準化作業は標準ライブラリの設計を再確認し、おおよそ十年間で蓄積したBoostライブラリで得られた知見や開発技術をもって仕様をクリーンアップし、右辺値参照やコンセプト、並行処理のサポートといった、言語に導入が考えられた新しいアイデアについて学び、最後に新しい機能でライブラリを拡張した。この経験は有意だったか、それとも無意だったか？ 次の機会によりうまくやるために、いったい何を学んだのか？ 次のライブラリ TR を策定するにあたり、このレッスンをどう生かせばいいのか？&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#utilizing-modern-programming&#34; id=&#34;utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における現代的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Utilizing Modern Programming Techniques and the Boost Libraries for Scientific Software Development&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/josef-weinbub/&#34; target=&#34;_blank&#34;&gt;Josef Weinbub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現代的プログラミングテクニックとライブラリを利用することで、ソフトウェア開発者は膨大な機能と柔軟性を手にいれることができる。しかし、ジェネリックプログラミング、関数型プログラミング、メタプログラミングのような関連技術を利用するには、高度なプログラミングスキルが要求されるので、マニアかコンピュータサイエンティストでなければ使い熟し得ない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、Boostライブラリのような現代的プログラミング技術を利用する科学的コンピューティングの範疇に含まれる3つの仕事について報告する。まず、主にBoost GraphライブラリとBoost Phoenixライブラリを利用した順次および並列タスクグラフ実行のための拡張可能なプラグインスケジューラを紹介する。次に、Boost MetaprogrammingライブラリとBoost Fusionライブラリを利用した、コンパイルタイムに任意のプロパティに基づいてコンポーネントのサブセットを選択するというメタプロパティの選択方法について紹介する。最後に、ジェネリックパラダイムのもと幾何学的アルゴリズムを一般化するためのアプローチについて示す。&lt;/p&gt;
&lt;p&gt;これらアプローチの紹介を通じて、現代的プログラミングテクニックとBoostライブラリの適用により、非常に汎用的で、維持可能で、コンパクトで、拡張可能なコードを生み出せることを示す。以上から、長期的には高度なC++スキルを習得するために費した時間はペイすると結論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#vs-ide&#34; id=&#34;vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new in Visual Studio IDE for C++ Developers&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sumit-kumar/&#34; target=&#34;_blank&#34;&gt;Sumit Kumar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;きたるVisual Studio 11のリリースには、IDEとのやりとりやチーム内の他のC++開発者と共同作業するといった、日々のコーディング作業でC++開発をより効率的にするような新しい機能や革新が数多く詰まっている。&lt;/p&gt;
&lt;p&gt;本プレゼンテーションではデモをごらんいただきながら、構文の色分け、参照のハイライト、進化したインテリセンス、コード解析、プロファイリングといった機能に焦点を当てて紹介する。また、ドキュメントとの連携、検索やナビゲーションといった普段の作業を非常に簡易化するIDEの改善点についてもひととおりごらんいただく。このプレゼンテーションではコードレヴューやテスト、コードカヴァレッジといった統合機能についても概説する。Visual Studio 11はC++開発者チーム全体に有益である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#modules&#34; id=&#34;modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Modules in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/david-vandevoorde/&#34; target=&#34;_blank&#34;&gt;David Vandevoorde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の幕開け以来、プリプロセッサはC++ライブラリインターフェースとやりとりするための手段としての役割を果たしてきた。しかし、長年にわたり、プリプロセッサであるがゆえに生じる制約によって、不愉快なビルド時間は増加の一途をたどっている。今日、プリプロセッサはよりよいC++開発ツールをつくるにあたり唯一最大の阻害要因になっている。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、C++に&#34;モジュール&#34;の概念を導入するための選択肢を紹介し、それらがもたらす課題と恩恵について議論する。次のC++標準仕様に向けて、C++標準委員会はこれらの選択肢について活発に検討している段階である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#generic-programming-real-world&#34; id=&#34;generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming in C++: A Real-World Example&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/marshall-clow/&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この90分のセッションでは、Boost MLでいただいたリクエストに答えようと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜBoostには&lt;code&gt;hex&lt;/code&gt;／&lt;code&gt;unhex&lt;/code&gt;関数がないのか？ とても有用だと思うけど。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、Boost.Algorithmライブラリにマッチしたこれらのアルゴリズムのデザインと実装についても概説する。&lt;/p&gt;
&lt;p&gt;この関数は単純であるけれども、非常に多くの興味深い設計決定が実装中になされている。これについてもこのプレゼンテーションで述べるつもりだ。&lt;/p&gt;
&lt;p&gt;カヴァーする議題は以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックプログラミングデザイン&lt;/li&gt;
&lt;li&gt;イテレータの取り扱い(出力イテレータの問題についても述べる)&lt;/li&gt;
&lt;li&gt;テンプレートメタプログラミング(&lt;code&gt;enable_if&lt;/code&gt;の用法についても述べる)&lt;/li&gt;
&lt;li&gt;Boost.Exception&lt;/li&gt;
&lt;li&gt;コードの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lowest-variational-methods&#34; id=&#34;lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Implementing a Domain Specific Embedded Language for lowest-order variational methods with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jean-marc-gratien/&#34; target=&#34;_blank&#34;&gt;Jean-Marc Gratien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このペーパーでは、FreeFEM様のドメイン特化言語を用いて線型離散と双線型離散の定義を対象とする拡散問題を解くための最低次変分法族の原実装を示す。Boost Protoフレームワークの利用によって、この言語のバックエンドとフロントエンドをどう実装したかについて議論する。種々の学術的問題の実装を行なうことで、このDSEL設計を検証する。この言語のオーヴァーヘッドは従来の実装と比較することで評価する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp11-containers&#34; id=&#34;cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new with C++11 containers?&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11でピカピカのコンテナがいくつか導入された。すなわち、単方向リスト、ハッシュコンテナ、固定長同型コンテナ、そして異形コンテナである。しかしこれだけではない。前仕様C++98/03のコンテナも新しいメンバ関数の追加、ムーブのサポート、&#34;移動のみ&#34;のコンテナをつくれるように、&lt;code&gt;value_type&lt;/code&gt;に課されていた制限の緩和といった手直しがなされている。さあC++11のコンテナを有効利用する方法についてみていこう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#concept-clang&#34; id=&#34;concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ConceptClang: An Implementation Model for C++ Concepts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrew-lumsdaine/&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;,&lt;a href=&#34;http://cppnow.org/participant/larisse-voufo/&#34; target=&#34;_blank&#34;&gt;Larisse Voufo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conceptはテンプレートに安全性を付与することを意図として、制約ベースのポリモルフィズムを行うために提案されたC++の拡張である。本プレゼンテーションではConceptClangを紹介する。これは、C族言語のLLVMフロントエンドであるClangをベースとする、Conceptデザインの検証を行うための基盤の実装例である。このプレゼンテーションでは、Conceptの提案された主要な機能(コンセプトに基づく探索、テンプレートのオーヴァーロード、テンプレートの拘束など)をどう実装したかについて述べるとともに、種々のConcept設計を深めていくために、ConceptClang基盤をいかに利用すればいいかについても示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#modern-cpp-techniques&#34; id=&#34;modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Modern C++ Techniques&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ポリシー、SFINAE、タグディスパッチ… ktkr! 現代的C++にノって弾みをつける準備はOK? Ciere C++ ニンジャシリーズから、このセッションでは基本的なことから、ジェネリックプログラミングで使われているテクニックやストラテジーを紹介する。このセッションで話すトピックは以下のとおり：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concept&lt;/li&gt;
&lt;li&gt;Trait&lt;/li&gt;
&lt;li&gt;ポリシークラス&lt;/li&gt;
&lt;li&gt;CRTP (Curiously Recurring Template Pattern)&lt;/li&gt;
&lt;li&gt;SFINAE (Substitution Failure is not an Error)&lt;/li&gt;
&lt;li&gt;タグディスパッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この3時間のハンズオンチュートリアルは例がびっしりの参加型セッションである。ノートPCを持参されたし! 日々のコーディングで現代的C++の技法を使いたい開発者には、きっと得るものがあるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#smart-pointers-algorithm&#34; id=&#34;smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 Smart Pointers and Algorithms&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++03で言うところのスマートポインタとは&lt;code&gt;auto_ptr&lt;/code&gt;だった。&lt;code&gt;auto_ptr&lt;/code&gt;は最良の型であり最悪の型である。このプレゼンテーションでは&lt;code&gt;auto_ptr&lt;/code&gt;がどのように&lt;code&gt;unique_ptr&lt;/code&gt;を触発したか、その違いはなにかについて説明する。&lt;code&gt;unique_ptr&lt;/code&gt;を比較対象として、&lt;code&gt;shared_ptr&lt;/code&gt;についても概説する。これらを使うべきときはいつか？ どちらのスマートポインタを使うべきか？&lt;/p&gt;
&lt;p&gt;加えて、このプレゼンテーションではC++11に新しく追加されたアルリズムについて、また、&lt;code&gt;unique_ptr&lt;/code&gt;のようなムーブのみ可能な型で動作するよう修正された多数の新旧アルゴリズムについても述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#voronoi&#34; id=&#34;voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Robust and efficient multi precision algorithms design based on Boost.Polygon.Voronoi library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrii-sydorchuk/&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/lucanus-simonson/&#34; target=&#34;_blank&#34;&gt;Lucanus Simonson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複雑な数値計算アルゴリズムの設計と実装はユーザビリティ、拡張性、効率性、堅牢性という4つの要素を満たさねばならない。&lt;/p&gt;
&lt;p&gt;ユーザビリティとは、その分野に精通していないユーザーにとっての、公開されているアルゴリズムインターフェースのわかりやすさである。同時に、精通しているユーザーにとっての、アルゴリズムを構成できる幅のことでもある。&lt;/p&gt;
&lt;p&gt;拡張性とは、アルゴリズムそれ自身、依存するデータ構造、計算カーネル、数値型といった部分を再構成または置換する際、アルゴリズムに汎用性と柔軟性を持たせることである。&lt;/p&gt;
&lt;p&gt;効率性はまずアルゴリズムの複雑度とデータ構造の分析に始まり、メモリやパフォーマンスプロファイルを行い、システム/コンパイラ特異的な最適化に終わる。これには、数値型の操作および現実装と他のよく知られたアプローチとの比較も含まれる。&lt;/p&gt;
&lt;p&gt;堅牢性は数値アルゴリズムの最も重要な研究分野であろう。もし内部データ構造が実行時に破壊されたらどうなるか、という問いに対する答を用意しておくことである。アルゴリズムの出力と、出力がどの範囲で正常かつ信頼できるかを定義することでもある。言い変えれば、受けとった出力とランダムデータとの違いは何か、ということである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、アルゴリズムの動機となった実世界の問題を見ていきながらアルゴリズムを紹介する。Boost.Polygon.Voronoiライブラリで用いているアルゴリズム設計テクニックと実装をもとに、上記で言及した要素全てについて示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#tool-for-class-and-library-authors&#34; id=&#34;tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: New Tools for Class and Library Authors&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この新しい標準はクラスやライブラリ実装者のために、可変引数テンプレートや&lt;code&gt;static_assert&lt;/code&gt;、&lt;code&gt;constexpr&lt;/code&gt;、明示的な変換関数、および&lt;code&gt;decltype&lt;/code&gt;といった多数のツールが用意されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cmake-modularization&#34; id=&#34;cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CMake, Modularization and Ryppl Developer Preview&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rypplは、C++の開発や、構築、テストならびにBoostとそのユーザーの要求、すなわちC++コミュニティに合わせて設計された配信のための基盤フレームワークである。巨大化、複雑化、また潜在的にモジュール化がすすむBoostは、Rypplの完全なテストケースになりえる。このため我々は一年間、このコンセプトを証明するために必要なシステムと変更に取りくんできた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、CMakeを使ってビルドおよびテストできるように、なにもインストールせずに配置できるように、またBuildBotを用いてリモートでビルド、テストできるようにするための、Boostのモジュール化にむけた作業の進捗について示す。BoostCon(訳註：C++Now2012のことか)が始まった時点で、Boost開発者に利用いただける、コミュニティ全体で予備的なレヴュー可能なシステムの機能を完全に揃えている予定である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#now-what&#34; id=&#34;now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Now What? A vignette in 3 parts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;パート1： 美しさ&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は効率性が要求されるところでは復権を果たした。しかし、C++へ移行してきた者に対して、いまだ多くの者が歓迎していない。これはJavaやJavaScript、Pythonからきたプログラマにとって移行の脅威になりえる。C++コミュニティとして、美しく、効率的なコードを書くための、C++11で提供されるツールを梃入れする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート2： 真実&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のハードウェア上では、単一スレッドで実行されるC++コードではマシン性能のたった0.25%ほどしか引き出せない。C++11ではほんのちょっとだけスレッドサポートが解禁された。未来を見据える言語、ライブラリに課せられた最大の試練は、いかにマシン性能の残り99.75%を引き出すか、ということに尽きるだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート3： 美点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過剰なネットワークディヴァイスはソフトウェアの展望を変えつつある。インターネットの基盤は次第に裏方にまわり、増えつづける顧客はディヴァイス上にある情報を簡便に取得できるよう要求している。そのようなシステムが我々のソフトウェア設計と記述にどんな影響を与えるだろうか？この新しい世界におけるC++の果たす役割とは何だろうか。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#compile-time-reparsing&#34; id=&#34;compile-time-reparsing&#34;&gt;コンパイル時 &#39;再パース&#39;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compile-time ‘reparsing’&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/gordon-woodhull/&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コンパイラは今コードをパースしているとする。さて、その一部を再度パースしたいとしたらどうだろう？&lt;/p&gt;
&lt;p&gt;数年前から、ドメイン固有特化言語のためのメタプログラミングライブラリ群が提案され、ユーザーや特殊なライブラリアンはC++内に独自の言語を構築できるようになった。このようなユーザーやライブラリアンは皆、実行時表現のEric Niebler氏によるBoost.Protoに精通する必要がある。しかし、Ábel Sinkovic氏による、コンパイル時文字列パースのためのMetaparseや、&amp;lt;&amp;gt;表記をパースするための、プレゼンターが作成した&#34;とんがった(原：Angly)&#34;パーサもある。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら三つのライブラリを研究し、計算的に等価であることを(一方で、ドメインや表現力の違いについても)示す。コンピュータサイエンスの視点からは、これらライブラリは全てプッシュダウン・オートマトンである。ではなぜインターフェースがこうも違っているのだろう？対象ドメインの違いから生れるものなのか？それともライブラリ著者のバックグラウンドによるものなのか？&lt;/p&gt;
&lt;p&gt;また、コードをごらんいただきながら、これらのライブラリが実際にどのように動作するかごらんいただきたいと思う。このプレゼンテーションの大きな目的は、これらライブラリでどんなテクニックが一般的になっているか見ていくことと、共通のパターンがあるかどうか見ること、そして聴衆の皆様にメタプログラミングテクニックについて習熟していただくことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#type-string-conversions&#34; id=&#34;type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type to string conversions, and vice-versa&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jeroen-habraken/&#34; target=&#34;_blank&#34;&gt;Jeroen Habraken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、型から文字列への変換、またその逆に変換する際の、さまざまな選択肢について研究していく。古くは&lt;code&gt;atoi&lt;/code&gt;や&lt;code&gt;strtol&lt;/code&gt;から、真新しくは&lt;code&gt;std::stoi&lt;/code&gt;や、&lt;code&gt;boost::lexical_cast&lt;/code&gt;のようなBoostで提供されているものまで見る。これら選択肢のエラーハンドリングやフォールバック機構、localeサポートといった観点からみた利点と欠点についても研究する。&lt;/p&gt;
&lt;p&gt;利点と欠点を見ていただいた後は、それら利点と欠点をもとにGoogle Summer of Codeで作成したboost::coerceについて、現在の選択肢をどう補間するか紹介したい。このライブラリは速度や拡張性の面で優れている。このプレゼンテーションでは設計について概説し、またどう達成したかについて、使用法の豊富な例とともに紹介する。&lt;/p&gt;
&lt;p&gt;時間が許すなら、カスタマイズポイントやSpiritとの関連を見ていきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp11-gems&#34; id=&#34;cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Other C++11 Gems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jeff-garland/&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非常に重要だが、それ単品では1セッションに満たないようなトピックについてとりあげる。GarlandとHinnantは&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;から。またstateful allocatorとregexへのサポートについてもとりあげる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#linear-programming-proto&#34; id=&#34;linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear programming made easy with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/patrick-mihelich/&#34; target=&#34;_blank&#34;&gt;Patrick Mihelich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オペレーションリサーチや金融、チップデザインに渡る分野の問題は、線型計画にモデル化できる。決定問題のための高度に汎用的で効率的なアルゴリズムがあるメソッドとして、線型計画法は有効なツールである。&lt;/p&gt;
&lt;p&gt;GLPKのような、線型計画を解くための強力なソフトウェアライブラリが存在するが、低レヴェルAPIが非常に使いにくいので、問題を一旦人が読みづらい形式に変換する必要がある。AMPLのようなモデリング言語を使えば、問題を容易に叙述的に表現できるが、汎用プログラミング言語としての力量と親和性が足りない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは線型計画法を表現し解くための、Boost.Protoを用いたDSELであるCVX++を紹介する。Protoはどちらの世界、すなわちC++に組み込まれた叙述的プログラミングスタイルとして最高の役割を果たしてくれる。CVX++はGLPKをバックエンドソルバとして備え、Protoを用いて目的関数と制約をより機械が読みとりやすい表現に変換する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#solidfire&#34; id=&#34;solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How we switched to C++11 at SolidFire and how it worked out&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/travis-gockel/&#34; target=&#34;_blank&#34;&gt;Travis Gockel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、SolidFireのコードベースをC++03からC++11に移行する過程について、まず作業チームがワクワクするところから順に見ていく。正確性の検証やパフォーマンステストをどう行なったか、またそれとともに、C++03とC++11のどちらでも動作するコードをどう書いたらいいか紹介していくつもりだ(また、どうやって障害を迅速に乗り越えたかについても)。&lt;/p&gt;
&lt;p&gt;C++03/C++11開発で最初の月を越したころ、我々はよりよいコードを書くためにC++03コードベースのサポートを放棄した。このプレゼンテーションの第二部は、新しい標準によってもたらされる新しいコーディングスタイルについて述べる。また、それなしでは実装できなかったとんでもなくトリッキーなクラスや、可読性を上げるためにややトリッキーなことをしているクラスについても紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#refactoring-clang&#34; id=&#34;refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring C++ with Clang&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/chandler-carruth/&#34; target=&#34;_blank&#34;&gt;Chandler Carruth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十年来、C++開発者はJavaなどの言語が持っているツールをうらやましく思っていた。Clangでとうとう、我々は安全な自動変換を構築することができるほど簡便にC++コードの推論ができるようになる。このプレゼンテーションでは特殊なC++パターンの自動認識と変換をサポートする、Clang上に組まれた基盤について紹介する。また、古いAPIから新しい別のAPIへ更新するための、実際のソースコード変換ツールを実装するために必要な知識・技術についても示す。&lt;/p&gt;
&lt;p&gt;ライブラリの利用者が自身のコードを新しいAPIに置換するためのユーザー向けのスタンドアロンツールを組みあげることは、Boostのような広く利用されているライブラリでは非常に重要だが、C++11においては、新しい言語機能の利益を教授するために大量のインターフェースが更新されることになる。これらのインターフェースの採用を自動化することは、広く利用されているライブラリでは、長期にわたってサポートしなければならない非推奨APIの増加を抑える意味でも、急速な進歩をする上でも極めて重大なことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#state-machine-coroutine&#34; id=&#34;state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Boost.Coroutine to untangle a state machine&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/nat-goodspeed/&#34; target=&#34;_blank&#34;&gt;Nat Goodspeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションはイヴェント駆動型プログラムにおけるスタートアップのケーススタディである。このプログラムは外部サーバーへの一連のリクエストを生成し、それぞれ結果が返ってくるまで次のリクエストの生成を待機している。&lt;/p&gt;
&lt;p&gt;もともと、これはグローバルな&lt;code&gt;int&lt;/code&gt;状態変数を使って、巨大な&lt;code&gt;switch&lt;/code&gt;文として実装されていた。内在する関数はすべてのフレームで呼び出され、現在のステートロジックにジャンプし、結果を受けて状態を更新する。&lt;/p&gt;
&lt;p&gt;共同研究者がこれをBoost.Statechartを使って、ロジックをクラスのコレクションとして表現することで再実装した。&lt;/p&gt;
&lt;p&gt;どちらのケースでもロジックの構造は明確だった。実際の制御フローを解明するために、全てのコンポーネントの念入りな研究が必要だった。&lt;/p&gt;
&lt;p&gt;我々は同じロジックを、外部サーバーへのリクエストを結果が返ってくるまで待機する関数呼び出しとして表現するコルーチンとして再実装した。このような関数呼び出しはコルーチンだけを阻害する。すなわち、メインスタックの通常のフレーム毎の処理が継続する。実際のスタートアップ制御フローは、C++に精通していれば誰でも読める三重ループとして表現できる。さらに、メンテナンス(例えば、新しいリクエストを挿入するとか)は非常に容易である - これは前の実装ではとても言えなかったことであるが。&lt;/p&gt;
&lt;p&gt;このようなユースケースにおけるスレッドとコルーチンの対比を行う。&lt;/p&gt;
&lt;p&gt;coroutine オブジェクトの操作法について示す。&lt;/p&gt;
&lt;p&gt;Boost.Coroutineライブラリの微調整についても触れる。&lt;/p&gt;
&lt;p&gt;Boost.Contextがマージされたら、CoroutineをContextで再実装するつもりである。これこそまさにContextがサポートしようとしている種類のライブラリである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#metaprogramming-cpp11&#34; id=&#34;metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming in C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11で導入された新機能で、メタプログラマの世界は変化した。このプレゼンテーションでは、C++11メタプログラムをどう記述するかについての研究結果と、特にこの新しい言語にあわせたBoost.MPLの設計について述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#numerical-problems-metaprogramming&#34; id=&#34;numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming Applied to Numerical Problems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルンゲ=クッタ法と呼ばれるメソッドの高速かつ汎用的な実装をつくるために、現代的テンプレートメタプログラミングの手法をつかう。ルンゲ=クッタ法は常微分方程式(ODE: Ordinary Differential Equation)の初期値問題の近似解を探索する数値アルゴリズムである。常微分方程式を解くのは化学者、物理学者、生物学者にとっては日常のことである…&lt;/p&gt;
&lt;p&gt;今日、異なる一連のパラメータ値をとり、近似解の精度が違う、様々なルンゲ=クッタ法が存在する。そこで、これらのルンゲ=クッタ法を汎用的に実装し、テンプレートメタプログラミングを利用することで、非常に汎用的な実装であるにもかかわらず、非常に高いパフォーマンスを達成した。これは数値計算アルゴリズムの領域においてもテンプレートメタプログラミングの力を印象づける事例である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#tr2-boost&#34; id=&#34;tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boosting Libraries for TR2&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準委員会のLibrary Working Group(LWG)は新しいライブラリの技術報告、TR2に向けたライブラリ提案を待っている。開発者以外の方でも、BoostライブラリをTR2に提案できる。&lt;/p&gt;
&lt;p&gt;このセッションはまず、TR2にBoost ライブラリをうまく提案し、委員会を通して提案を導いていく方法についてのチュートリアルから入る。話す予定のトピックは以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どうしてわざわざこんなことを - 経験から得られるもの&lt;/li&gt;
&lt;li&gt;標準化プロセスの概略&lt;/li&gt;
&lt;li&gt;提案募集&lt;/li&gt;
&lt;li&gt;委員会ウェブサイトの案内&lt;/li&gt;
&lt;li&gt;システム - 提案はどのようなものか、 いつどこで提出するのか&lt;/li&gt;
&lt;li&gt;初期の提案 - 何を詳細に見て、何を詳細に見るべきではないかについて - 演習つき&lt;/li&gt;
&lt;li&gt;提案の用語と標準の記述&lt;/li&gt;
&lt;li&gt;ドラフトとレヴューを手伝ってもらう&lt;/li&gt;
&lt;li&gt;提案提出 - のるかそるか&lt;/li&gt;
&lt;li&gt;委員会からのフィードバックへの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セッションの後ろ半分はTR2にむけて実際にBoostライブラリの提案を一緒にやるワークショップを開く。まず提案のテンプレートの空欄を埋めていくところから始める。このワークショップにはLWGメンバが何人かいらっしゃるので、彼らに助言をもらったり、意見を聞いたりするといいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#how-i-code-and-why&#34; id=&#34;how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How I Code and Why&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost委員会の方々(まだ未定。だが以前のBoostConで参加していただける旨をうかがった方の暫定リストはある)に、日々のコーディングで従っている原則について、なぜこの原則を適用していうのか、どのあたりに価値があると思っているかについて説明していただこうと思う。&lt;/p&gt;
&lt;p&gt;(例えば、私は、なぜ自分の好きなコミットワードが&#39;otherwise&#39;なのか、以前聞いたり読んだりされているかもしれないが、これに関連するどのようなアドヴァイスがあるか、この天啓に至った事件は何かを説明するつもりだ)
このプレゼンテーションの目的は、現実世界の話を時として書籍や講義で語られる高尚な理念に引き上げることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#preparation-cppnow-2013&#34; id=&#34;preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparation of C++ Now! 2013&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来年の会合の準備委員会は早期に動きだす。提案があったり、支援していただける方はぜひご参加いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&#34;winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ Component Extensions for WinRT&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/ale-contenti/&#34; target=&#34;_blank&#34;&gt;Ale Contenti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は他のプログラミング言語やテクノロジー(例えば、 iOSのObjective-C、AndroidのJava、Windowsの.NETなど)を適用するプラットフォームにおいても活用されている。異種プログラミングプロジェクトがもたらす課題の一つに、C++の外部オブジェクトモデルとの結合という要求がある。CORBAやCOMといった既存の方法は一定の成功を収めているが、開発者は複雑性の増大というツケを払う羽目になる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、この問題に対処するために、Microsoftが取った二つのアプローチの詳細について述べる。最初のアプローチは、同じアプリケーションの中に、C++と非C++コンポーネント(外部オブジェクトモデル)が 混在するという複雑性に対処するためにC++抽象化レイヤを採用するというものである。この抽象化レイヤ(例えば Boostユーザーや開発者の方々にはおなじみの今日的C++テクニックをがっつり使ったWRLライブラリとか)はCOMコンポーネントの実装を単純化したが、このソリューションにある一般概念は他のいかなる異種混在環境においても拡張可能である。二つ目のアプローチは、異種言語で記述されたピア(訳註： 同格のコンポーネント)とやりとりするコンポーネントの宣言と定義ができるように、その構文にいくつかの拡張を追加して、C++自身の境界を押し上げることである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら二つのアプローチについて、長所と短所、利点と注意事項についてそれぞれ説明していく。最後に、これらの設計が、C++の進化にとって潜在的にどのような影響を与えるかについてお話しする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#value-semantics&#34; id=&#34;value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Semantics and Concepts-based Polymorphism&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プレゼンターであるSeanは先のキーノートの &lt;a href=&#34;#now-what&#34;&gt;&#34;Now What? A vignette in 3 parts.&#34;&lt;/a&gt; で話した値のセマンティクスとConceptベースの多態コンセプトについて、更に深めていくつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#future-of-boost&#34; id=&#34;future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Future of Boost&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostとC++Now!の発起人であるお三方が将来について語り、どう考えているのかお答えする。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi、zak、DigitalGhost&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #10 東京 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/study_meeting/study10.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:study_meeting/study10.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #10 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;p&gt;2012/07/28(土) 10:00 ～ 18:00&lt;/p&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IIJ本社 17F東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/info/map/head-office.html&#34; target=&#34;_blank&#34;&gt;http://www.iij.ad.jp/info/map/head-office.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/bd840b2e-77dc-4501-a765-cb581a90c165&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/13c26c3b-ada4-4f20-abaa-d154d677cad9&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #10 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タイムテーブル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00 - 10:10&lt;/td&gt;
&lt;td&gt;Boost.勉強会について&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:10 - 10:20&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.49.0～1.50.0&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:30 - 11:00&lt;/td&gt;
&lt;td&gt;C++Now! 2012参加レポート&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:20 - 11:40&lt;/td&gt;
&lt;td&gt;sexyhook 3の変更点&lt;/td&gt;
&lt;td&gt;@super_rti&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:40 - 13:00&lt;/td&gt;
&lt;td&gt;＜＜昼休み＞＞&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00 - 13:15&lt;/td&gt;
&lt;td&gt;万能数値型URR&lt;/td&gt;
&lt;td&gt;@wraith13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:30 - 14:00&lt;/td&gt;
&lt;td&gt;C++でエレガントな並列計算&lt;/td&gt;
&lt;td&gt;@ponkotuy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:20 - 15:00&lt;/td&gt;
&lt;td&gt;C++ Transactional Memory言語拡張の紹介&lt;/td&gt;
&lt;td&gt;@yohhoy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00 - 15:40&lt;/td&gt;
&lt;td&gt;家に帰るまでが遠足です&lt;/td&gt;
&lt;td&gt;@Cryolite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:00 - 18:00&lt;/td&gt;
&lt;td&gt;全員参加ディスカッション&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://live.streamingmedia.jp/boostjp/&#34; target=&#34;_blank&#34;&gt;http://live.streamingmedia.jp/boostjp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;misc.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Ag3bTfuU3UptdEpac0pZdXRSa0JMVm15cl9hOWJBa1E#gid=0&#34; target=&#34;_blank&#34;&gt;座席表&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boostライブラリ一周の旅 1.49.0-1.50.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋晶&lt;/li&gt;
&lt;li&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter : &lt;a href=&#34;https://twitter.com/#%21/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/cpp_akira&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost tour 1.50.0 diff [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1500&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;boost tour 1.50.0 all [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0_all.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0_all.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1500-all&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++Now! 2012参加レポート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋晶&lt;/li&gt;
&lt;li&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter : &lt;a href=&#34;https://twitter.com/#%21/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/cpp_akira&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： cppnow2012 [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/cppnow2012.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/cppnow2012.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/c-now-2012-report&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120730/1343634476&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sexyhook 3の変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： rti&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/rti7743/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/rti7743/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/super_rti&#34; target=&#34;_blank&#34;&gt;http://twitter.com/super_rti&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： &lt;a href=&#34;http://prezi.com/ylkpa-fkbnjx/sexyhook3/&#34; target=&#34;_blank&#34;&gt;http://prezi.com/ylkpa-fkbnjx/sexyhook3/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;万能数値型URR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 道化師&lt;/li&gt;
&lt;li&gt;Twitter ： &lt;a href=&#34;http://twitter.com/wraith13&#34; target=&#34;_blank&#34;&gt;http://twitter.com/wraith13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++でエレガントな並列計算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： ponkotuy&lt;/li&gt;
&lt;li&gt;サイト： &lt;a href=&#34;http://ponkotuy.com/&#34; target=&#34;_blank&#34;&gt;http://ponkotuy.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/ponkotuy&#34; target=&#34;_blank&#34;&gt;http://twitter.com/ponkotuy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;https://bitbucket.org/ponkotuy/vector/src/80134e82bc82/Slide/main.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://bitbucket.org/ponkotuy/vector&#34; target=&#34;_blank&#34;&gt;bitbucket&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++ Transactional Memory言語拡張の紹介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： yohhoy&lt;/li&gt;
&lt;li&gt;ブログ： &lt;a href=&#34;http://d.hatena.ne.jp/yohhoy/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/yohhoy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/yohhoy&#34; target=&#34;_blank&#34;&gt;http://twitter.com/yohhoy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;https://raw.githubusercontent.com/yohhoy/docs/master/boostjp10_tm_20120728.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://www.scribd.com/doc/101230860/boostjp10-tm-20120728&#34; target=&#34;_blank&#34;&gt;scribd&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア： &lt;a href=&#34;http://yohhoy.hatenablog.jp/entries/2012/07/29&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;家に帰るまでが遠足です&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： Cryolite&lt;/li&gt;
&lt;li&gt;ブログ： &lt;a href=&#34;http://d.hatena.ne.jp/Cryolite/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/Cryolite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/Cryolite&#34; target=&#34;_blank&#34;&gt;http://twitter.com/Cryolite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;http://www.slideshare.net/Cryolite/ss-13792596&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全員参加ディスカッション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.activebasic.com/egtra/2012/07/29/503/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 ディスカッションでイベント処理をやっていたグループのまとめ - イグトランスの頭の中(のかけら)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20120730/1343627128&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120730/1343634476&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120731/1343713578&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 のディスカッションのまとめメモ - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/Sigureya/boost-10-13861431&#34; target=&#34;_blank&#34;&gt;ディスカッション資料まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731094237.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731094135.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093951.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093850.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093625.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093430.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093345.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093252.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093126.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093010.jpg&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20120728/1343487500&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 - 永遠に未完成&lt;/a&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20120728/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m_xor/20120728/1343486815&#34; target=&#34;_blank&#34;&gt;Boost勉強会#10 - exclusive or（排他的論理和）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohhoy.hatenablog.jp/entries/2012/07/29&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Sigureya/20120729/1343534320&#34; target=&#34;_blank&#34;&gt;boost勉強会 #10 - C++黒魔術書の切れ端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.activebasic.com/egtra/2012/07/29/503/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 ディスカッションでイベント処理をやっていたグループのまとめ - イグトランスの頭の中(のかけら)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sharkpp.net/blog/2012/07/30/boost-workshop-10-in-tokyo.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京 に参加しました - Shark++ Software&#39;s Web Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120729/1343533783&#34; target=&#34;_blank&#34;&gt;C++Now! 2013 に行きたい - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20120730/1343627128&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120731/1343713578&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 のディスカッションのまとめメモ - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/346641&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #12 大阪 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/study_meeting/study12.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:study_meeting/study12.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #12 大阪&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2013/06/22(土) 11:00～17:30&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大阪電気通信大学　駅前キャンパス　601（小ホール）&lt;/li&gt;
&lt;li&gt;大阪府寝屋川市早子町12-16&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/cb6309e7-67ad-41fe-8a99-302badbc5633&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/2b4812e6-5902-4ee2-833b-a3aea8c91b6c#&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #12 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催&amp;amp;スタッフ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主催者： 遥佐保(&lt;a href=&#34;https://twitter.com/hr_sao&#34; target=&#34;_blank&#34;&gt;@hr_sao&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;お手伝い： 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:30～&lt;/td&gt;
&lt;td&gt;開場&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:45～&lt;/td&gt;
&lt;td&gt;ご挨拶&lt;/td&gt;
&lt;td&gt;hr_sao&lt;br /&gt; 大阪電気通信大学 総合情報学部 情報学科　大西克彦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:10〜&lt;/td&gt;
&lt;td&gt;C++で作るWEBアプリケーション&lt;/td&gt;
&lt;td&gt;fadis_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:50〜&lt;/td&gt;
&lt;td&gt;C++初心者のためのBoost.MPL入門&lt;/td&gt;
&lt;td&gt;suibaka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:15〜&lt;/td&gt;
&lt;td&gt;Boost.Contractについて&lt;/td&gt;
&lt;td&gt;uskz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:15〜&lt;/td&gt;
&lt;td&gt;Allocators@C++11&lt;/td&gt;
&lt;td&gt;Cryolite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:10〜&lt;/td&gt;
&lt;td&gt;constexpr中３女子テクニック―実践と濫用そしてC++14へ&lt;/td&gt;
&lt;td&gt;bolero_MURAKAMI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:10〜&lt;/td&gt;
&lt;td&gt;君はまだ、本当のプリプロセスを知らない&lt;/td&gt;
&lt;td&gt;decimalbloat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:50〜&lt;/td&gt;
&lt;td&gt;C++コミュニティを作る&lt;/td&gt;
&lt;td&gt;cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:25〜&lt;/td&gt;
&lt;td&gt;おたのしみセッション&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;座席表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sekico.co/zaseki/154&#34; target=&#34;_blank&#34;&gt;http://sekico.co/zaseki/154&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ustream.tv/channel/boost-%E5%8B%89%E5%BC%B7%E4%BC%9A%E5%A4%A7%E9%98%AA&#34; target=&#34;_blank&#34;&gt;http://www.ustream.tv/channel/boost-勉強会大阪&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;C++で作るWEBアプリケーション&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : Naomasa Matsubayashi&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/fadis_&#34; target=&#34;_blank&#34;&gt;https://twitter.com/fadis_&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++をJavaScriptにコンパイルするコンパイラ、Emscriptenを使ってWEBブラウザで動くアプリケーションをC++で作る方法を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://speakerdeck.com/fadis/c-plus-plus-dezuo-ruwebapurikesiyon&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/fadis/cweb-23287589&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://www41050u.sakura.ne.jp/blog/index.php?/archives/7-Boost.-12.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12に行ってきた - Fadisのノート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++初心者のためのBoost.MPL入門&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : すいかばー&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/suibaka&#34; target=&#34;_blank&#34;&gt;https://twitter.com/suibaka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;古くからあるBoost.MPL&lt;/p&gt;
&lt;p&gt;じつはまだ使ったことがないという方もいるのでは無いでしょうか&lt;/p&gt;
&lt;p&gt;今回のセッションではその基本的な使い方をMPLを使ったことがない人向けに紹介します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/Suikaba/try-to-use-boostmpl&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/Suikaba/try-to-use-boostmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://suikaba.hatenablog.com/entry/2013/06/23/004204&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪に行って来ました - 冬でもスイカバーが食べたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Contractについて&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : uskz&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/uskz&#34; target=&#34;_blank&#34;&gt;https://twitter.com/uskz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昨年BoostにacceptされたBoost.Contractの使い方について話します&lt;/p&gt;
&lt;h3&gt;boost.multiprecisionと適応型無誤差演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者：oniprog&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/oniprog&#34; target=&#34;_blank&#34;&gt;https://twitter.com/oniprog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無誤差演算の必要性についてと，その欠点の克服法について話します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://ohkuma.mydns.jp/homepage/tech/boost/boost_presen/Ohkuma_boost1.pdf&#34; target=&#34;_blank&#34;&gt;http://ohkuma.mydns.jp/homepage/tech/boost/boost_presen/Ohkuma_boost1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表練習動画：&lt;a href=&#34;http://www.youtube.com/watch?v=OCkqGOLXEa8&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=OCkqGOLXEa8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Allocators@C++11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : Cryolite&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/Cryolite&#34; target=&#34;_blank&#34;&gt;https://twitter.com/Cryolite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;西暦2013年，人類は未曽有の危機にさらされていた．&lt;/p&gt;
&lt;p&gt;vectorに対し，各string要素のallocatorをカスタマイズすることは困難を極め，メモリ領域は分断さ（以下略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/Cryolite/allocator11final&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/Cryolite/allocator11final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;constexpr中３女子テクニック―実践と濫用そしてC++14へ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : ボレロ村上&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/bolero_MURAKAMI&#34; target=&#34;_blank&#34;&gt;https://twitter.com/bolero_MURAKAMI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11のconstexprでコンパイル時アルゴリズムを実装する上での諸問題とその解決、音声合成などの濫用例、またC++14でconstexprがどのように応用されたり実装が楽になるかの紹介です&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/GenyaMurakami/constexpr-23355469&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/GenyaMurakami/constexpr-23355469&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;君はまだ、本当のプリプロセスを知らない&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : DigitalGhost&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/decimalbloat&#34; target=&#34;_blank&#34;&gt;https://twitter.com/decimalbloat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;世間では邪悪だのオワコンだの言われているCプリプロセッサ&lt;/p&gt;
&lt;p&gt;その真の実力に迫るべく，Strong Typedefの実装に挑んだ話をします&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/digitalghost/ss-23314487&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/digitalghost/ss-23314487&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++コミュニティを作る&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : 高橋 晶&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/cpp_akira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本家のC++コミュニティ、他の国でのC++コミュニティ、そして日本のC++コミュニティの今と未来について話します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：[&lt;a href=&#34;https://dl.dropboxusercontent.com/u/1682460/presentation/boost_12/development_cpp_community.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropboxusercontent.com/u/1682460/presentation/boost_12/development_cpp_community.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/development-c-community-23330248&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130625/1372152906&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪でした。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/522537&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 - Togetter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tylg-linux.blogspot.jp/2013/06/boost-12.html&#34; target=&#34;_blank&#34;&gt;気まぐれLinux: Boost.勉強会 #12 大阪に参加してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suikaba.hatenablog.com/entry/2013/06/23/004204&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪に行って来ました - 冬でもスイカバーが食べたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www41050u.sakura.ne.jp/blog/index.php?/archives/7-Boost.-12.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12に行ってきた - Fadisのノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130625/1372152906&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪でした。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://srz-zumix.blogspot.jp/2013/06/boost-12.html&#34; target=&#34;_blank&#34;&gt;ブログズミ: 「Boost.勉強会 #12 大阪」に参加してきました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/tt_clown/20130630/continuous_community&#34; target=&#34;_blank&#34;&gt;コミュニティを持続・活性化させるために - Life Like a clown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://niche-prg-smith.hatenablog.com/entry/2013/07/03/000156&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 にいってきた - 躓いて１マス進む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;写真&lt;/h3&gt;
&lt;p&gt;※写真に写って困る方がいらっしゃいましたら、主催者かスタッフまでご連絡ください。削除対応いたします。&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00123.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00124.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00125.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00126.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00127.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00128.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00129.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00130.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00131.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00132.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00133.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00134.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00135.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00136.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00137.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00138.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00139.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00140.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00141.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00142.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00143.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00144.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00145.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00146.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #14 東京 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/study_meeting/study14.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:study_meeting/study14.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #14 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2014/03/01(土) 10:00～&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IJ本社 17F&lt;/li&gt;
&lt;li&gt;東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/info/map/head-office.html&#34; target=&#34;_blank&#34;&gt;http://www.iij.ad.jp/info/map/head-office.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/47238&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京 - ATND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/47550&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #14 - ATND&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催&amp;amp;スタッフ&lt;/h2&gt;
&lt;p&gt;主催者： 高橋 晶(@cpp_akira)&lt;/p&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;担当者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00-10:10&lt;/td&gt;
&lt;td&gt;Boost.勉強会について&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:10-10:40&lt;/td&gt;
&lt;td&gt;cpprefjpを支える技術&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;br /&gt; @melponn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00-11:30&lt;/td&gt;
&lt;td&gt;魔導書発売記念：GPGPUの今とこれから&lt;/td&gt;
&lt;td&gt;@fjnli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:30-13:00&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00-13:30&lt;/td&gt;
&lt;td&gt;いつからFIFOがスケールしないと錯覚していた？&lt;/td&gt;
&lt;td&gt;@kumagi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:50-14:20&lt;/td&gt;
&lt;td&gt;glfw3 OpenGL を使ったGUI フレームワーク&lt;/td&gt;
&lt;td&gt;@hira_kuni_45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:40-15:10&lt;/td&gt;
&lt;td&gt;データサイエンスワールドからC++を眺めてみる&lt;/td&gt;
&lt;td&gt;@sfchaos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:30-16:30&lt;/td&gt;
&lt;td&gt;C#や.NET Frameworkがやっていること&lt;/td&gt;
&lt;td&gt;@ufcpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:50-17:20&lt;/td&gt;
&lt;td&gt;新しい並列for構文のご提案&lt;/td&gt;
&lt;td&gt;@yohhoy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30-18:00&lt;/td&gt;
&lt;td&gt;Boost.Graphの設計と、最短経路アルゴリズムの使い方いろいろ&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ustream.tv/channel/fadis/theater&#34; target=&#34;_blank&#34;&gt;Fadis LIVE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boost.勉強会について&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/faithandbrave/booststudy-14-opening&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cpprefjpを支える技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)、めるぽん(&lt;a href=&#34;https://twitter.com/melponn&#34; target=&#34;_blank&#34;&gt;@melponn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://melpon.org/pub/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjpを支える技術&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44340485&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Graphの設計と、最短経路アルゴリズムの使い方いろいろ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/faithandbrave/bgl-design-and-shortest-path&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44341443&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アフターケア：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/03/03/172342&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京を開催しました。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;いつからFIFOがスケールしないと錯覚していた？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/kumagi&#34; target=&#34;_blank&#34;&gt;@kumagi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideboom.com/presentations/938907/%E3%81%84%E3%81%A4%E3%81%8B%E3%82%89FIFO%E3%81%8C%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%84%E3%81%A8%E9%8C%AF%E8%A6%9A%E3%81%97%E3%81%A6%E3%81%84%E3%81%9F&#34; target=&#34;_blank&#34;&gt;slideboom&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44346151&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;glfw3 OpenGL を使ったGUI フレームワーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/hira_kuni_45&#34; target=&#34;_blank&#34;&gt;@hira_kuni_45&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/hira_kuni_45/glfw3-opengl&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44347324&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;データサイエンスワールドからC++を眺めてみる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/sfchaos&#34; target=&#34;_blank&#34;&gt;@sfchaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/sfchaos/c-31786840&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44348631&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C#や.NET Frameworkがやっていること&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/ufcpp&#34; target=&#34;_blank&#34;&gt;@ufcpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/ufcpp/cnet-framework&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44349775&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アフターケア：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ufcpp.wordpress.com/2014/03/02/c%E3%82%84net%E3%81%8C%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8/&#34; target=&#34;_blank&#34;&gt;C#や.NETがやっていること - ++C++; // 未確認飛行 C ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;新しい並列for構文のご提案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;発表者: &lt;a href=&#34;https://twitter.com/yohhoy&#34; target=&#34;_blank&#34;&gt;@yohhoy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;https://raw.githubusercontent.com/yohhoy/docs/master/boostjp14_parfor_20140301.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;] [&lt;a href=&#34;http://www.slideshare.net/yohhoy/boostjp14-parfor-20140301-31781446&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44351995&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yohhoy.hatenablog.jp/entry/2014/03/02/143031&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;魔導書発売記念：GPGPUの今とこれから&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/fjnli&#34; target=&#34;_blank&#34;&gt;@fjnli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/fjnl/boost-study14&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44352754&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/636213&#34; target=&#34;_blank&#34;&gt;boost.勉強会 #14 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20140301/1393685983&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#14 に行ってきた - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://goyoki.hatenablog.com/entry/2014/03/02/023758&#34; target=&#34;_blank&#34;&gt;Boost.Graphでの最短経路探索 - 千里霧中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.harapeko.jp/trac/original/ideanote/wiki/HowTo/BoostStudy14&#34; target=&#34;_blank&#34;&gt;HowTo/BoostStudy14 – Idea note&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/T_MURACHI/status/439687932140457985&#34; target=&#34;_blank&#34;&gt;@T_MURACHI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20140301/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://locaq.hatenablog.com/entry/2014/03/03/222520&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#14東京に参加してきました - locablo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.harapeko.jp/2014/03/04/boost-study-1/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 に行ってきました - はらぺこ日誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/n-trino/20140305&#34; target=&#34;_blank&#34;&gt;知識を得るには外に出ましょう - trinoの走り書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;写真&lt;/h2&gt;
&lt;p&gt;※写真に写って困る方がいらっしゃいましたら、主催者かスタッフまでご連絡ください。削除対応いたします。&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0324.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0325.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0337.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0340.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0344.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0348.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0349.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0350.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0352.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #7 東京 -- Merge pull request #565 from akinomyoga/relative_link</title>
      <link href="https://boostjp.github.io/study_meeting/study7.html"/>
      <id>7a00d7037c545da40923c3ba091f7ab500e78173:study_meeting/study7.md</id>
      <updated>2024-06-11T13:12:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #7 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;p&gt;2011/12/03(土) 10:00～18:00&lt;/p&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IIJ本社&lt;/li&gt;
&lt;li&gt;東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/a85f6ec3-95c4-40ee-8308-a5746c6277d4&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/ebfe31c2-9424-4d74-9b91-fc52bf95f69f&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2011 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タイムテーブル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;発表タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00～10:30&lt;/td&gt;
&lt;td&gt;Boost C++ Librariesの概要&lt;/td&gt;
&lt;td&gt;高橋 晶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:30～10:45&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.45.0～1.48.0&lt;/td&gt;
&lt;td&gt;高橋 晶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00～11:45&lt;/td&gt;
&lt;td&gt;clangで入門 解析戦略ー&lt;/td&gt;
&lt;td&gt;fjnli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:45～12:00&lt;/td&gt;
&lt;td&gt;C++ Tips 2 後置インクリメント他&lt;/td&gt;
&lt;td&gt;道化師&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00～13:45&lt;/td&gt;
&lt;td&gt;統計解析言語Rにおける大規模データ管理のためのBoost.Interprocessの活用&lt;/td&gt;
&lt;td&gt;sfchaos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00～14:45&lt;/td&gt;
&lt;td&gt;Introduction to Boost.B-tree&lt;/td&gt;
&lt;td&gt;eldesh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00～15:15&lt;/td&gt;
&lt;td&gt;C++コンパイラ GCCとClangからのメッセージをお読みください&lt;/td&gt;
&lt;td&gt;DigitalGhost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:25～16:10&lt;/td&gt;
&lt;td&gt;Boost.Intervalで区間演算&lt;/td&gt;
&lt;td&gt;pepshiso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:25～17:10&lt;/td&gt;
&lt;td&gt;中3女子でもわかるconstexpr&lt;/td&gt;
&lt;td&gt;bolero_MURAKAMI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:10～18:00&lt;/td&gt;
&lt;td&gt;サプライズ枠&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://live.streamingmedia.jp/boostjp/&#34; target=&#34;_blank&#34;&gt;http://live.streamingmedia.jp/boostjp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;座席表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Am0Htj_Q-a0DdHhZek1aV0R1dU5IZUtDNWFkSVpHTFE&amp;amp;hl=ja#gid=0&#34; target=&#34;_blank&#34;&gt;座席表 - GoogleDocs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boost C++ Librariesの概要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋 晶&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： boost overview [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_overview.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_overview.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-overview&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20111205/1323078372&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boostライブラリ一周の旅 1.48.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋 晶&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost tour 1.48.0 diff [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1480-diff&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;boost tour 1.48.0 all [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0_all.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0_all.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1480-all&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;clangで入門 解析戦略ー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： fjnli&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/fjnl/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/fjnl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/fjnli&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/fjnli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;https://raw.githubusercontent.com/fjnl/boost-study-7-Tokyo/master/sheet.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/fjnl/boost-study-7-Tokyo/master/sheet.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++ Tips 2 インクリメント&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 道化師&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/wraith13/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/wraith13/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/wraith13&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/wraith13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： cxx-tips2 [&lt;a href=&#34;http://www.trickpalace.net/paper/cxxtips2.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://www.trickpalace.net/paper/cxxtips2.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/wraith13/c-tips2&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;統計解析言語Rにおける大規模データ管理のためのBoost.Interprocessの活用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： sfchaos&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/sfchaos/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/sfchaos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;https://twitter.com/#%21/sfchaos&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/sfchaos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： [&lt;a href=&#34;http://www.slideshare.net/sfchaos/rboostinterprocess&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introduction to Boost.B-tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： Eldesh&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/eldesh/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/eldesh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/eldesh&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/eldesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： boost-btree-introduction [&lt;a href=&#34;http://goo.gl/yaUwI&#34; target=&#34;_blank&#34;&gt;google docs&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/eldesh/boost-btree-introduction&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Boost.Btree GitHubリポジトリ ： &lt;a href=&#34;https://github.com/Beman/Boost-Btree&#34; target=&#34;_blank&#34;&gt;https://github.com/Beman/Boost-Btree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/eldesh/20111205/1323050181&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7で発表してきた - ::Eldesh a b = LEFT a | RIGHT b&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;中３女子でもわかるconstexpr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： ボレロ村上&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/boleros/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/boleros/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/bolero_MURAKAMI&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/bolero_MURAKAMI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;http://www.slideshare.net/GenyaMurakami/constexpr-10458089&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++コンパイラ GCCとClangからのメッセージをお読みください&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： DigitalGhost&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/DigitalGhost/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/DigitalGhost/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/decimalbloat&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/decimalbloat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;http://www.slideshare.net/digitalghost/bbk7&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Intervalで区間演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： pepshiso&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/pepshiso/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/pepshiso/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/pepshiso&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/pepshiso&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： BoostInterval [&lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=sites&amp;amp;srcid=ZGVmYXVsdGRvbWFpbnxwZXBzaGlzbzl8Z3g6NmZlZjUxMTY3Y2M4NmY3OA&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://sites.google.com/site/pepshiso9/home/boostinterval/BoostInterval.key?attredirects=0&#34; target=&#34;_blank&#34;&gt;keynote&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++03からの標準ライブラリの変更点について&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： melpon&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/melpon/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/melpon/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/melponn&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/melponn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Interprocess さらっと紹介して逃げる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： krustf&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/krustf/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/krustf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/krustf&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/krustf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： Boost.Interprocess [&lt;a href=&#34;http://www.slideshare.net/krustf/boostinterprocess-10461625&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/krustf/20111205/1323060511&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきました。発表してしまいました。 - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/alwei/20111204/1323016765&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7 東京に参加してきた - Ideals and Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/rti7743/20111204/1323005129&#34; target=&#34;_blank&#34;&gt;boost勉強会/忘年会に参加してきました。朝まで。 - お前の血は何色だ!! 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://3dassociates.wordpress.com/2011/12/04/boost%E5%8B%89%E5%BC%B7%E4%BC%9A%E5%87%BA%E5%B8%AD%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/&#34; target=&#34;_blank&#34;&gt;boost勉強会出席してきました - 3D ASSOCIATES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/eldesh/20111205/1323050181&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7で発表してきた - ::Eldesh a b = LEFT a | RIGHT b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/redboltz/20111204/1322998608&#34; target=&#34;_blank&#34;&gt;Boost勉強会#7に参加してきた - redboltzの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nokuno/20111203/1322902513&#34; target=&#34;_blank&#34;&gt;boost勉強会 #7 に参加しました #boostjp - nokunoの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20111203/1322902692&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきた - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20111203/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 東京 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20111205/1323060511&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきました。発表してしまいました。 - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20111205/1323078372&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/RiSK/20111206/1323137083&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 - 危ないRiSKのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/222760&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/222769&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2011 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>BoostCon 2011 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/boostcon/2011.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:boostcon/2011.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;BoostCon 2011&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://boostcon.boost.org/program/sessions/&#34; target=&#34;_blank&#34;&gt;http://boostcon.boost.org/program/sessions/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/2011_presentations&#34; target=&#34;_blank&#34;&gt;BoostCon 2011 Presentations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳プロジェクト&lt;/h2&gt;
&lt;p&gt;BoostCon 2011の資料を翻訳しています。&lt;/p&gt;
&lt;p&gt;翻訳したデータは各自でどこかに公開(たとえばGoogle Docs、slideshareなど)し、リンクを貼ってください。&lt;/p&gt;
&lt;p&gt;参加者は常時募集しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(eldesh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(akira)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-process&#34;&gt;Boost.Process：C++によるプロセス管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fast-numerical-computation&#34;&gt;C++による高速数値計算 ： 遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割 : Unicodeのためのソリューション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2：データ構造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boost-simd&#34;&gt;Boost.SIMDを用いる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#ready-fo-ipv6&#34; id=&#34;ready-fo-ipv6&#34;&gt;IPv6の準備はできてる？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Are You Ready for IPv6?&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/IPv6.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/IPv6.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/are-you-ready-for-ipv6-5364812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それはニュースの中にあった：IPv4アドレス空間が枯渇する。&lt;br /&gt;
その解決策は新たなインターネット・プロトコル、IPv6である。IPv6は長い間存在していたが、その使用を命じた政府機関のためのコードを開発しない限り、それについて今まで心配する必要がなかった。&lt;/p&gt;
&lt;p&gt;これは一夜の変更では済まないだろう。&lt;br /&gt;
IPv4はまだ数年は使われるだろうし、ネットワークアプリケーションは両方のプロトコルをサポートしなければならないだろう。&lt;/p&gt;
&lt;p&gt;この発表は、ネットワーク開発者が知る必要のあるIPv6の基本をカバーする。&lt;/p&gt;
&lt;p&gt;Boost.AsioのIPv6のサポートを見て回り、独立したBoost.Asioベースのネットワークアプリケーションプロトコルを独立させること、およびIPv6を用意するためのいくつかの設計戦略について議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#utree&#34; id=&#34;utree&#34;&gt;万能ツリーによるAST構築&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AST Construction with the Universal Tree&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bryce-lelbach&#34; target=&#34;_blank&#34;&gt;Bryce Lelbach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/utree_talk.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/utree_talk.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/ast-construction-with-the-universal-tree-5266608&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Spiritのコードベースに最近追加された&lt;code&gt;utree&lt;/code&gt;は、抽象構文木を表現するための設計されたジェネリックなデータ構造である。QiとKarmaへのバインディングは、Boost.Spiritによるパーサー、ジェネレータ開発の強力なツールとなる。この発表では、抽象構文木を構築、操作するための、パース／ジェネレートの4つのユースケースを示す：XML、シンボル式(S式)、JSONとCライクなソースコード。&lt;/p&gt;
&lt;p&gt;Spiritによる&lt;code&gt;utree&lt;/code&gt;の統合の詳細、および&lt;code&gt;utree&lt;/code&gt;中心のSpiritパーサー／ジェネレータの記述について議論する。さらに、他の内部表現(XMLのためのDOMツリー、JSONオブジェクトのための連想配列、小さなCソースコードのシンプルなVMバイトコード)に、utree ASTをコンパイルする設計手本をカバーする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#mpi-openmp&#34; id=&#34;mpi-openmp&#34;&gt;自動ハイブリッドMPI+OpenMPコード生成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Hybrid MPI+OpenMP Code Generation&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#khaled-hamidouche&#34; target=&#34;_blank&#34;&gt;Khaled Hamidouche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/bsppp.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/bsppp.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/automatic-hybrid-mpi-openmp-code-generation-5349961&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マルチプロセッサー市場の出現は、大規模並列コンピュータのアーキテクチャを根本的に変えた。何千ものスレッドによるハイパフォーマンスコンピューティングプラットフォームが展開されている。このコンテキストでは、ハイブリッドなMPI + OpenMPアプローチの使用はそのようなアーキテクチャにふさわしいプログラミングモデルと見なされる。しかし、パフォーマンスの改善が示される場合もあれば、示されない場合もある。ハイブリッドなMPIおよびOpenMPアプリケーションのパフォーマンスに影響している要因は多く、複雑で、相互の関係にある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MPI通信効率 ： アプリケーションは、MPI通信の種類(一対一、集団)、メッセージサイズ、接続や帯域といったネットワークの問題に関係がある。&lt;/li&gt;
&lt;li&gt;OpenMP並列効率 ： クリティカルセクションプリミティブを使用すると、OpenMPスレッド管理のオーバーヘッドやfalse sharingによってパフォーマンスが悪化する。&lt;/li&gt;
&lt;li&gt;MPIとOpenMPの相互作用 ： MPI通信部分の内部のロードバランシング、および使用されていないスレッドの問題は、並列度を低下させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両方のコードを書くことは、普通のHPCアプリケーションよりも専門技術の高いレベルを必要とするかもしれない。&lt;/p&gt;
&lt;p&gt;したがって、これらの新しいシステムへの効率的な利用は、重要な挑戦である。また、アプリケーションに責任を負う科学者およびエンジニアは、一般に、あまりHPCの専門家ではなく、通常、彼らはコードに新しい変化を持ち出すことや新たなプログラミングパラダイムを学ぶことはしたがらない。彼らは、効果的な自動並列化ツールとライブラリといった点での解決策を必要としている。&lt;/p&gt;
&lt;p&gt;この発表では、我々は2つの、相互関係のある異なるレベルの問題を解決を試みる。&lt;/p&gt;
&lt;p&gt;まず我々はバルク同期並列(Bulk Synchronous Parallelism ： BSP)パラダイムをすぐに導入し、それがいつ、そしてなぜ、ハイブリッドシステムの適当なプログラミングモデルと見なすことができるかを解説する。&lt;/p&gt;
&lt;p&gt;その後、我々はBSP++を紹介する。これは、BSPモデルに基づいた並列アプリケーションの迅速で容易な設計を可能にするBoostを用いたC++ライブラリである。我々は、BSP API、Lambda、PhoenixやMPIを含む、一般的に用いられるBoostライブラリに対するその相互作用、いくつかの実装詳細について記述し、いくつかの例を示す。&lt;/p&gt;
&lt;p&gt;最後に我々は、BSP++、Boost.Spirit、および Clang/LLVMによって構築された並列のプログラミングフレームワークであるBSPGenを紹介する。BSPGenは、XMLで書かれた小さなアプリケーションの記述と、並列化されていないCもしくはC++の関数から、実行時コストの先行評価とほぼ最適なOpenMPとMPIの間のバランスを決定するための配置空間の小さな探索に基づく、完全はハイブリッド並列のアプリケーションを生成することができる。実装詳細と例を提供する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-generic&#34; id=&#34;boost-generic&#34;&gt;Boost.Generic: コンセプトを使用しないコンセプト&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Generic: Concepts without Concepts&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#matt-calabrese&#34; target=&#34;_blank&#34;&gt;Matt Calabrese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Boost.Generic.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Boost.Generic.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : coming soon...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンセプトはおそらく、C++0xの中で最も望ましい機能のうちの一つだった。それによってプログラマはとくに、コメントではなくコードによるコンセプトの直接指定、コンセプトベースオーバーロード、テンプレートエラーメッセージの改善を含む、ジェネリックプログラミングの直接的な言語サポートを約束された。2009年のworking paperからのコンセプトの削除で、多くのプログラマが、将来のC++標準に、かなりの失望を残すことになった。&lt;/p&gt;
&lt;p&gt;しかし、10年以上の間、直接の言語サポートなしでC++プログラマは、Boost Graph Libraryを含む非常に強力なジェネリックライブラリをなんとか作ることができた。Boost Concept Check Libraryは、コンセプトの必要条件を検証するプロセスを実現可能にした。しかし、C++0xでコンセプトを削除したまま、事態をさらに1ステップ進めることは可能である。努力し、ライブラリはよりシンプルな、より特定のコンパイル時アサート、コンセプト要件を表現し、チェックするより強力な方法、ユーザー指定された自動で明示的なコンセプトマップのための設備と、ユーザーがコンセプトを書くためのコンセプトベースな関数テンプレートのオーバーロードを書く方法、人々が言語機能に期待するかもしれないものに驚くほど近いユーザビリティなども全てを提供することができ、提供する。&lt;/p&gt;
&lt;p&gt;この話は(レビュー前の)Boost.Genericへの入門である。&lt;/p&gt;
&lt;p&gt;コンセプト、コンセプトマップ、コンセプトベース関数テンプレートオーバーロードを作成するためのC++0xライブラリであり、Boost Concept Check Libraryを潜在的に置き換える、もしくは賞賛することを意図する。発表は、ライブラリの歴史、および短い入門に続き、パラダイムに慣れていない人々のためのジェネリックプログラミングの基本を最初に簡潔にカバーし、ライブラリを可能にするための根底にあるトリックへの導入に続く。その後、聴衆はBoost.Genericの基本的な使用法を示され、すでに提供されているコンセプトの要件チェックのためのコンパイル時アサートを指定する方法、それらのコンセプトに単純なコンセプトマップを作成する方法と、それら自身のアルゴリズムのためにコンセプトベースのオーバーロードを書く方法を示す。最後に、聴衆はBoost.Genericによる標準コンセプトの実装を通じて、標準との比較を見て回るだろう。&lt;/p&gt;
&lt;p&gt;「Boost.Generic ： コンセプトのないコンセプト」は、ライブラリ開発者、ユーザーの両方のためを意図する。それはC++の任意の合理的な量の経験を持ったプログラマにアクセス可能であるに違いない。基本アイデアは話の最初の数分でカバーされるが、ジェネリックプログラミングについての熟知が高く推奨される。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#&#34; id=&#34;boost-infrastructure&#34;&gt;Boostインフラストラクチャ ワークショップ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost Infrastructure Workshop&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： ワークショップ&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostのコードとコミュニティがあったこと、あり続けたことで大成功した。しかし、操作性において我々のcode baseと同じ割合では発展していない。テストはより速くなりえる、インストールはより容易になりえる、ドキュメントの生成はより賢くなりえる、レビューはより多くの参加を得ることができ、そしてライブラリの維持はより楽しくなりえる。何年もの間、我々はこれらの問題に対処する方法について話したが、しかし我々は実際に変化をもたらすために合意と推進力を発生させられなかった。このワークショップは、これらに正面から何かをするチャンスだ。&lt;/p&gt;
&lt;p&gt;我々は方針を作成するために毎日90分間会合し、ツールを作成し、次の10年を通じてBoostの進化をサポートすることができるWebサービスを準備した。具体的なゴールは、カンファレンス参加者との間でのプロトタイプと有用な改善の実装で、より広いコミュニティの合意を獲得し、BoostConのあとすぐにBoostに採用されるされることである。我々には一週間しかない、したがって、生産力を最大限にするために、関心ある個々のトピックの小さなグループで活動する。Boostが採択することができるという方向へ率いることを保証するために、いくつかの短い投票を行い、その週を通じてBoostのメーリングリストでフィードバックを求めるだろう。&lt;/p&gt;
&lt;p&gt;十分なBoostモデレータおよびリリースマネージャー達は、カンファレンスに続く数ヶ月で、受け取ったアイデアを前身させるためにBoostConに出席することを計画する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-process&#34; id=&#34;boost-process&#34;&gt;Boost.Process ： C++によるプロセス管理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Process: Process management in C++&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/Boost.Process.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/fri/Boost.Process.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-process-process-management-in-c-5368233&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Process はシステムのプロセス管理のためのライブラリである。これはシェルコマンドの実行や、子プロセスの生成、子プロセスに対する環境変数あるいは入出力ストリームの設定、子プロセスとの同期・非同期での通信、そして子プロセス終了の待機（あるいは強制終了）に使うことができる。&lt;/p&gt;
&lt;p&gt;発表パートではBoost.Processの進歩、設計上の決定、改良点に焦点を当てる。チュートリアルパートではBoost.Processが提案するいくつかのツールと、それらがどのようにプロセス管理で使われるかを説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-units&#34; id=&#34;boost-units&#34;&gt;Boost.Units&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Units&lt;/li&gt;
&lt;li&gt;スピーカー ：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#steven-watanabe&#34; target=&#34;_blank&#34;&gt;Steven Watanabe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/boost-units-5364809&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/boost-units-5364809&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Units はコンパイル時次元解析、単位変換のための自由度の高いライブラリである。これは、ユーザーがある単位の量を表現すると捉えた値の作成、無意味な操作の禁止、必要な場面での変換の適用によりプログラミングエラーを軽減するために設計された。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp0x-status&#34; id=&#34;cpp0x-status&#34;&gt;C++0xの進行状況&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++0x Progress and Status&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#michael-wong&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： レクチャー&lt;/li&gt;
&lt;li&gt;トラック： I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/cpp0x_overview.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/cpp0x_overview.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/c-0x-progress-and-status-5349952&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの批准を今年にひかえ、BoostCon2010での更新から(2010-現在)議論の的になっている問題や、これまでの批准の進捗、前回の更新から追加されたさまざまな新機能について詳細を述べるとともに、巻き起こった議論について、またその問題をどのように解決しようとしたかについて、1.5時間頂いてレヴューを行なう。&lt;/p&gt;
&lt;p&gt;話者は、長年、IBMでカナダのC++標準化委員会のメンバーを務めてきた者だ。中程度のC++の知識がある者を対象にしているが、もちろん、どなたでも聴講可能である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-asio-extension&#34; id=&#34;boost-asio-extension&#34;&gt;Boost.Asio拡張の作成&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creating Boost.Asio extensions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-schaeling&#34; target=&#34;_blank&#34;&gt;Boris Schaeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：  チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/creating_boost_asio_extensions.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/creating_boost_asio_extensions.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ソースコード : &lt;a href=&#34;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/2011_presentations/tree/master/wed/asio_extentions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/creating-boost-asio-extensions-5364822&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.AsioはBoost C++ librariesの有名なポータブルネットワークライブラリである。&lt;br /&gt;
このライブラリが、Boost.Netという名前にならなかったのには理由がある。Boost.Asioの真の力は非同期的な操作を実装するためのフレームワークたりえる点である。ネットワーク機能はその非同期的な操作のよい実例の一つにすぎない。&lt;/p&gt;
&lt;p&gt;このチュートリアルでは、どのようにBoost.Asioを拡張することができるか、ということと、どうやって非同期的な処理を実装するかについて述べる。&lt;br /&gt;
まずは、既存の拡張である、ファイルやディレクトリを監視するディレクトリモニタを紹介する。&lt;br /&gt;
また、このフレームワークに適合しない非同期的な操作を紹介し、Boost.Asioの制限について示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#skoot&#34; id=&#34;skoot&#34;&gt;Skootによる設計の旅。ピア指向ジェネリックネットワークライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design Journeys with Skoot, a Peer Oriented Generic Networking Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#cliff-green&#34; target=&#34;_blank&#34;&gt;Cliff Green&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/design-journeys-with-skoot-a-peer-oriented-generic-networking-library-5258057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;効率的で、エレガントで、汎用的なC++ライブラリを完成させるまでの道程は、決して平坦ではない。GPSが壊れたかのように道を誤り、暗い路地をすり抜ける羽目になり、非常にストレスがたまる。&lt;br /&gt;
それと同時に、APIの設計を固めたり、利用箇所全てで機能性を検証することは、刺激的で満足のいく旅路となるだろう。&lt;br /&gt;
このプレゼンテーションでは、数々の設計上のトレードオフについて、またSkoot libraryで利用しているBoost librariesについて議論する。&lt;/p&gt;
&lt;p&gt;Skootは、分散環境やピア指向の処理環境で利用しやすい、C++のネットワーキングライブラリである。&lt;br /&gt;
また、TCP、UDPプログラミングにおける様々な通信パターンや利用法を単純化し抽象化する。&lt;br /&gt;
Skootは、Asio、Function、Bind、Shared(とWeak)Pointer、そしてOptionalといった多くのライブラリを利用している。&lt;br /&gt;
多くのC++開発者は汎用ライブラリの完成形だけを注視して、そこに至るまでの議論を軽視する傾向がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ある種のtype erasureに対し、テンプレート化クラスが意味があるのはどんな時か？&lt;/li&gt;
&lt;li&gt;非常に強力なテンプレート関数や関数オブジェクトがあるのに、多くのC++開発者がテンプレートクラスだけをありがたがるのは何故か？    &lt;/li&gt;
&lt;li&gt;いつでもデストラクトされる可能性のあるオブジェクトへの参照を有効にしつづける方法は？&lt;/li&gt;
&lt;li&gt;Boost libraryの魔法、Bindとは何か？ なぜそれがモミ林にいるキンキラの吸血鬼よりすばらしいのか？&lt;ul&gt;
&lt;li&gt;(訳註：モミは吸血鬼を封印する効果があるとされている。吸血鬼は光にも弱いため、&#34;glittering vampire in a forest of fir trees&#34;は二重の意味でありえない。これと対比させる事で、Bindの&#34;魔法&#34;の強力さを示している)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++で仮想テンプレートメンバ関数が必要になった場合、どうすればいいのか？&lt;/li&gt;
&lt;li&gt;Asioの実装者である、Chris Kohlhoffはノーベル賞か何かを受賞すべきか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの疑問はSkoot開発中に湧き、解決されていったが、これらを説明することで、Boost導師と言える領域に達していない開発者を啓発することができると思う。&lt;br /&gt;
このプレゼンテーションは、汎用的なテンプレートを基礎にした設計技法を学んでいる、また、FunctionとBind(と、その他のライブラリ)を基本構成要素としてどう利用するかについて興味があるような、熟練したC++開発者向けである。&lt;br /&gt;
ライブラリの使用方法や、API設計や洗練、また良いユニットテストの作成についても議論する。&lt;/p&gt;
&lt;p&gt;(人物紹介：Bio: Cliffは現在SeattleにあるBoeingに勤務する、経験豊かなC++開発者である。&lt;br /&gt;
氏の開発経歴の中で主なものは、ネットワーキングと複数のプログラミング言語での可用性の高い分散処理である。また、Prologに愛着を持っていることも付記しておく。&lt;br /&gt;
Cliffは、複数の新興企業に勤務した経歴がある。これらは今やすべて破産、買収されたが、実勢価格の自社株購入権を失った時でも、安定した給料を高く買われている。)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#geneva&#34; id=&#34;geneva&#34;&gt;Genevaライブラリによる分散パラメトリック最適化&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Distributed parametric optimization with the Geneva library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/boostcon2011_geneva.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/boostcon2011_geneva.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/distributed-parametric-optimization-with-the-geneva-library-5349954&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションではBoost libraryに大きく依存している分散最適化アルゴリズムのオープンソースライブラリであるGenevaを紹介する。&lt;br /&gt;
Genevaは現在、勾配降下法、進化アルゴリズム、群アルゴリズムをカバーしており、まもなく焼きなまし法が追加されることになっている。&lt;br /&gt;
すべてのアルゴリズムは、候補となるソリューションが最適化アルゴリズムを自由に切り替えられるように、同じデータ構造に作用する。&lt;br /&gt;
Genevaはグリッド環境、クラウド環境、マルチコアシステム、クラスター上でも、大規模なパラメトリック最適化問題を解くことができる。&lt;br /&gt;
このライブラリは、同時に最適化問題に取り組む数百のクライアントでテストされている。&lt;br /&gt;
使用しているライブラリは、Boost.Serialization、Threads、Conversion、Date/Time、Function、Bindなど多岐にわたる。&lt;br /&gt;
このプレゼンテーションでは、ユーザーの視点から、Geneva library自体について、また、Boostで培われた経験について論じる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#fast-numerical-computation&#34; id=&#34;fast-numerical-computation&#34;&gt;C++による高速数値計算：遅延コード生成(LzCG)のためのExpression Templateとその先へ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast numerical computation in C++:Expression Templates and Beyond to Lazy Code Generation (LzCG)&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bojan-nikolic&#34; target=&#34;_blank&#34;&gt;Bojan Nikolic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/fast_numerical.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/fast_numerical.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/fast-numerical-computation-in-c-expression-templates-and-beyond-to-lazy-code-generation-lzcg-5260438&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expression templateは、数値計算において、強力な最適化を可能にするC++の機能である。&lt;/p&gt;
&lt;p&gt;Expression templateはBoost.uBLASや、他の有名なC++の数値計算ライブラリ (例えば、先駆けであるBlitz++やArmadilloなど) に用いられている。ATLASやFFTWのような&#34;標準&#34;となるC++で書かれたライブラリはまだない。なぜないのか? このチュートリアルの最初の章では、私は数値計算における最適化の挑戦について、最適化のためにどのようにしてexpression templateが使われているのか、そして、expression templateの使用を妨げる根本的な要因についてレビューを行う。&lt;/p&gt;
&lt;p&gt;2つめの章では、私はいくつかの数値計算フレームワークが、どのようにして、一般にC++-onlyのライブラリで達成されているよりも高いパフォーマンスを達成しているかについて紹介する。それらのライブラリでの重要な特徴は、複雑なコード生成、実行されるハードウエアへの正確な適応、そして、実行前に多くの異なる実装の性能を計る能力をもつことである。&lt;/p&gt;
&lt;p&gt;最後に、私は、どのようにすればC++のパフォーマンスを、Expression templateによってもたされるそれよりも高くできるかについて論議する。私は新しい開発途中のフレームワークを用いて、実際にどのように動いているかのデモを行う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#funding-boost&#34; id=&#34;funding-boost&#34;&gt;国内、国際的な研究プログラムや基金を通じた、Boost開発の資金調達について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Funding Boost development through national and international research programs and funds&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#ruediger-berlich&#34; target=&#34;_blank&#34;&gt;Ruediger Berlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/BoostCon2011Funding.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/BoostCon2011Funding.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、まず、Boostの開発をサポートする目的で、国内・国際的な研究プログラムや資金を活用するための実現可能な方法について議論する。&lt;/p&gt;
&lt;p&gt;ゴールは3部構成である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boostの開発に役立てるために、国内、国際的な研究資金調達スキーム(NSFやEuropean Unionなど…)を活用するために、多国間の連携に向けて取り組み始めるには&lt;/li&gt;
&lt;li&gt;Boostを、世界各地の大学や工業大学でコンピュータサイエンス教育のカリキュラムで取りあげられるような標準的なトピックにするためには&lt;/li&gt;
&lt;li&gt;Boost開発に科学分野からの新しい参加者を取り込むには&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#future-of-boost&#34; id=&#34;future-of-boost&#34;&gt;Boostの未来 - パネルディスカッション2011&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future of Boost Panel ’11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#dave-abrahams&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#jeff-garland&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#eric-niebler&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：パネルディスカッション&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boostには、本筋の議論や、尊重すべき、また有用なメーリングリストを維持するために、ポストの承認と管理を含むメーリングリストの運用を行っている小規模のモデレータグループがいる。&lt;/p&gt;
&lt;p&gt;このグループは、Webサイトや、ソースリポジトリの管理やその他の管理業務も遂行している。&lt;/p&gt;
&lt;p&gt;また、少なくとも、Boostに関することを促進するために、委員会を監督する非公式幹部としての役割をも果す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#range-unicode&#34; id=&#34;range-unicode&#34;&gt;Rangeのためのジェネリックな変換と分割:Unicodeのためのソリューション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Conversion and Segmentation for Ranges: a Solution for Unicode&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/unicode.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/unicode.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一貫した世界のライティングシステムのうちのほとんどが通る、テキストを表現し、操作する業界標準であるUnicodeに対処するBoostでのソリューションの数多くの需要は常にあった。この話では、我々は、Google Summer of Code 2009で開始したソリューションを示す。Rangeのコンセプトに基づいて、計量で、非侵入的で、柔軟で、ジェネリックで、潜在的にlazyである。&lt;/p&gt;
&lt;p&gt;アルゴリズムをジェネリックにするために、全てが書き直された。また、それによって、このライブラリはいかなる既存のUnicodeソリューションにも依存しない。このライブラリは、いくつかの外部データを要求するが、ライブラリがそれ自身のデータベースに埋め込むにも関わらず、ライブラリを別のデータベースとリンクするために使用することができる明快で安定したABIがある。&lt;/p&gt;
&lt;p&gt;Unicodeライブラリのニーズは、スピンオフとして別のライブラリに至った：Convertライブラリは、N to M変換を使用して、容易にRangeを変換し、分割することを可能にするライブラリであり、Rangeを正格もしくはlazyにイテレートする。また、それはSIMDによって加速された変形の開発を助ける設備を提供する。このライブラリは、最初はUnicodeのために作られたが、我々はそれを文字エンコーディング変換と無関係な様々なものに使用することができることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#proto-edsl-design&#34; id=&#34;proto-edsl-design&#34;&gt;Protoを楽しむ - C++ EDSLデザインのハンズオンチュートリアル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Getting Jiggy with Proto — Hands-on Tutorial on C++ EDSL Design&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/proto.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/proto.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/getting-jiggy-with-proto-hands-on-tutorial-on-c-edsl-design-5368236&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embedded Domain Specific Languagesは、中小の大きさの問題を宣言的で効率的な手段で扱うための設計として、実際に選ばれることが増えている。とりわけ、C++はBoost.Protoのようなライブラリのおかげで、そのような開発の親言語として、本当に興味深い。&lt;/p&gt;
&lt;p&gt;このチュートリアルは、現実的なシチュエーションでのクイックスタートとなり、Boost.Protoを用いたコードが美しく小さく効率的であることをデモすることに焦点を当てている。&lt;/p&gt;
&lt;p&gt;チュートリアルは以下の要素から構成される:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短いライブラリの基本的なブロックのプレゼンテーション        &lt;/li&gt;
&lt;li&gt;単純な計算機のコードから、拡張可能なコアを持つ解析関数の微分を行うシステムのプロトタイプまでのガイド付きの練習問題。この問題は、Protoを用いてEDSLを構築するいくつかの段階と、Proto特有のイディオムについて示す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参加者はテンプレートメタプログラミングに関する知識を持つ中級か上級のC++ユーザが望ましい。昨年のEric NieblerによるProtoに関する発表を見るのもよいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#haskell-pseudo-cpp&#34; id=&#34;haskell-pseudo-cpp&#34;&gt;Haskell - C++テンプレートメタプログラミングのための擬似言語&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Haskell – The Pseudocode Language for C++ Template Metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#bartosz-milewski&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 :&lt;ul&gt;
&lt;li&gt;Part1 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz1.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part2 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz2.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part3 &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz3.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/haskell/Bartosz3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/haskell-the-pseudocode-language-for-c-template-metaprogramming-5258033&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++テンプレートメタプログラミングは使うのも解析するのもデバッグするのも難しいが、それはだいたいコンパイル時のC++が関数型言語的で構文がゲロいからである。うまくメタプログラミングするコツは、関数型プログラミングに精通して、C++メタプログラムのための擬似言語を作ることであるが、実のところ既にそのための言語はあり、そいつはHaskellとか言われている。このセッションではまず、そのHaskellで書いたコードと等価なC++のメタコードを並べることでHaskellがどんな言語かを紹介する。その後、Haskellを使った複雑なC++メタプログラムの読み書きの方法を示す。最後はC++における「実行できるテンプレート」の説明で、モナドとは何か、どうやってそれを使うかを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#intel-tm&#34; id=&#34;intel-tm&#34;&gt;IntelのC++ Software Transactional Memory CompilerとC++でのトランザクション言語構築のドラフト仕様について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel’s C++ Software Transactional Memory Compiler and the Draft Specification of Transactional Language Constructs for C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#justin-gottschlich&#34; target=&#34;_blank&#34;&gt;Justin Gottschlich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/boostcon_tm_spec.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/boostcon_tm_spec.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/intel-s-c-software-transactional-memory-compiler-and-the-draft-specification-of-transactional-language-constructs-for-c-5254333&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランザクションメモリ(TM)を利用すれば、プログラマからは複雑な共有メモリ管理が隠蔽されるため、並行プログラミングが容易になる。このセッションでは、最新のC++でのトランザクション言語構築のドラフト仕様について、ならびに、インテルのC++ software transactional memory (STM) compilerでの実装例について紹介する。&lt;/p&gt;
&lt;p&gt;Boost libraryの作者は高度に最適化され、極度にタイプセーフなソフトウェアを実装することを目標としている。&lt;br /&gt;
このセッションでは、厳格なタイプセーフと最適化を達成するために、Intel C++ STM compilerでどのようにトランザクションが利用されているかについて詳細に述べる。&lt;br /&gt;
特に、テンプレート宣言やラムダ式、コピーコンストラクタ、そして基本的な関数やクラスでどのようにトランザクションが利用されているか紹介する。&lt;br /&gt;
また、リラックス・トランザクションの概念について紹介し、この概念を用いて、取り消し不能なアクション(例えば、I/Oのように実行前に戻せないアクション)をどう扱うとよいかについて示す。&lt;/p&gt;
&lt;p&gt;最後に、最新のC++でのトランザクション言語構築のドラフトと、Intel’s C++ STM compilerのロードマップについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#mpl-graph&#34; id=&#34;mpl-graph&#34;&gt;MPL.Graphの紹介&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introducing MPL.Graph&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#gordon-woodhull&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/mpl.graph.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/mpl.graph.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/introducing-mpl-graph-5262812&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/introducing-mpl-graph-5262812&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MPLメタプログラミングとBGLグラフコンセプトの過激な合いの子である、MPL.Graphがコンパイル時にメタデータのグラフを作成し走査するためのBoostライブラリとして提案された。&lt;/p&gt;
&lt;p&gt;グラフのデータ構造とアルゴリズムは様々な目的でコンパイルタイムに適用できる。例えば、クラス階層や、Expression Templateツリー、ステートマシンや文法は完全にコンパイルタイムに処理できるグラフである。また、呼び出しグラフや、オブジェクトの所有権、オブジェクト間のポインターは、部分的にコンパイルタイムに処理できるが、残りはランタイムに処理する必要があるグラフである。&lt;/p&gt;
&lt;p&gt;これらは全て、グラフのアルゴリズムを実行するために、標準的なグラフインターフェイスを適用することができるか、計算されたグラフから作り出される。仕様および分析にコンパイルタイムグラフを使用すれば、抽象化の無駄なランタイムサイクル回避でき、概念的な明快さと抽象化（一度&#34;メタ&#34;の壁を乗り越えられれば）が向上する。&lt;/p&gt;
&lt;p&gt;今のところ、MPL.GraphはBGLの&lt;code&gt;incidence_list&lt;/code&gt;と&lt;code&gt;adjacency_list&lt;/code&gt;データ構造と、&lt;code&gt;breadth_first_search&lt;/code&gt;と&lt;code&gt;depth_first_search&lt;/code&gt;アルゴリズムのコンパイルタイムバージョンを提供している。このライブラリはBoost.MSMで、リージョン(連結成分)と到達不能な状態とを区別するために、いまのところはサブライブラリとして使用されている。このトークではMPL.Graphの新しい用法を紹介する。(例えば、文法や、Fusion Graphとして知られるヘテロなグラフデータ構造など) また、最終的な目標である、コンパイルタイムグラフでランタイムグラフを記述する、&#34;グラフのグラフ&#34;といえるメタグラフについて少しだけ紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#lock-free-data-structure&#34; id=&#34;lock-free-data-structure&#34;&gt;ロックフリープログラミング パート2： データ構造&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lockfree Programming Part 2: Data Structures&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#tony-van-eerd&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/lockfree_2011_slides.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/lockfree_2011_slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/lockfree-programming-part-2-data-structures-5258642&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず昨年夏の話の概要から始め、昨年中断したところ - ロックフリープログラミングの&#34;FCD(恐怖、必然性、そしてかなりの嘘)&#34;について更に深めるところから再開する。&lt;/p&gt;
&lt;p&gt;今回はデータ構造を主題にするつもりだ。まずは、単純なロックフリースタックから始め、このスタックのABA問題(訳註：see &lt;a href=&#34;http://en.wikipedia.org/wiki/ABA_problem&#34; target=&#34;_blank&#34;&gt;http://en.wikipedia.org/wiki/ABA_problem&lt;/a&gt;)について、その後、様々なロックフリーキューについて議論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cell-broadband&#34; id=&#34;cell-broadband&#34;&gt;Boostベースの並列通信ライブラリによる、セルブロードバンドエンジンのアーキテクチャをマスターする&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mastering the Cell Broadband Engine architecture through a Boost based parallel communication library&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#lionel-lacassagne&#34; target=&#34;_blank&#34;&gt;Lionel Lacassagne&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sebastian-schaetz&#34; target=&#34;_blank&#34;&gt;Sebastian Schaetz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/cell_mpi.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/cell_mpi.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/mastering-the-cell-broadband-engine-architecture-through-a-boost-based-parallel-communication-library-5349964&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セルブロードバンドエンジン(CBE)は、内部のリングバスによって接続しているPowerPCプロセッサと、8ベクトル共同処理要素(8 vector co-processing elemens)を組み合わせる、組み込みシステムである。それは、マルチメディア、シグナルプロセッシング、ハイパフォーマンスコンピューティングなどのアプリケーションにふさわしいプラットフォームである。&lt;/p&gt;
&lt;p&gt;現行のセルプロセッサ(PowerXCell 8i)は、204.8 GFlop/sの最大の単精度のパフォーマンスと、102.4 GFlops/sの倍精度のパフォーマンスで規定される。この巨大な計算力とアーキテクチャのパワー効率(IBM BladeCenter QS22のための1ワットあたり0.87の倍精度GFlops/s)の観点から、グラフィック処理装置(graphics processing units:GPGPU)上の現代のx86マルチコアアーキテクチャおよび汎用計算(general-purpose computation)の適切な代わりであった。これらの利点にも関わらず、セルプロセッサの採用は期待されたよりも遅かった。我々は、これがアーキテクチャの新たな性質、およびその複雑性を抽象化する、便利なツールの不足に起因すると考える。&lt;/p&gt;
&lt;p&gt;この話では、我々は、セルアーキテクチャのための効率的なアプリケーションの開発を単純化するライブラリを作る努力を示す。我々は、基礎となるハイパフォーマンスアルゴリズムで直感的なインタフェースを作るために、現代のC++コンセプト、および多くのBoostライブラリ(MPL, PP, Function, Spirit)をどのように利用するかを示す。我々は、セルアーキテクチャと、我々がどのようにそれをマスターしたかにともなう調整について議論する。&lt;/p&gt;
&lt;p&gt;我々のライブラリの不可欠な部品は、メッセージパッシングに基づくCBEのシステムデザインに向いているプログラミングモデルである。我々の実装はBoost.MPIインタフェースに基づく非同期通信を含んでおり、また、パフォーマンスは集合的な操作(collective operations)を最適化した。&lt;/p&gt;
&lt;p&gt;また、我々は非同期データ転送、およびマルチバッファリングをサポートする、分散コンテナと、セグメント化されたイテレータの実装を示す。さらに、我々は制限のあるリソースを持ったシステムに特に適している、Boost.Testのあとに設計された計量の単体テストモジュールのデモを示す。&lt;/p&gt;
&lt;p&gt;最後に、我々はそのようなアーキテクチャのためのソフトウェアエコシステムの実行可能性を評価し、また、Boostの設計にどのように影響を受けたか、そのようなシステムからのパフォーマンスにコテ入れし、おそらく、そのような特定の組み込みハードウェア上のBoostの将来に関する議論を始めることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#odb-boost&#34; id=&#34;odb-boost&#34;&gt;ODBとBoostによるオブジェクトリレーショナルマッピング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Object-relational mapping with ODB and Boost&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/orm_with_odb_and_boost.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/orm_with_odb_and_boost.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/object-relational-mapping-with-odb-and-boost-5364825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ODBは、C++のためのオープンソースで、クロスプラットフォームなクロスデータベースオブジェクトリレーショナルマッピング(ORM)システムである。同様の機能を提示する他のライブラリと異なり、ODBは、永続クラス(persistent classes)とC++クラス宣言から、それらのデータベース表現との間の変換を行うコードを自動的に生成する。また、ODBは高度にカスタマイズ可能である。人気のあるフレームワーク、BoostやQtのようなライブラリの基本型、スマートポインタ、およびコンテナのようなコンポーネントは、標準のバージョンと合わせて永続クラスでシームレスに使用することができる。&lt;/p&gt;
&lt;p&gt;話の前半は、ODBシステムの基本概念とワークフローを導入する。後半は、BoostのためのODBプロファイル、永続Boost値型(例えば&lt;code&gt;boost::gregorian::date&lt;/code&gt;)のサポートを行うライブラリ、スマートポインタ(例えば&lt;code&gt;boost::shared_ptr&lt;/code&gt;)およびコンテナ(例えば&lt;code&gt;boost::optional&lt;/code&gt;、&lt;code&gt;boost::unordered_set&lt;/code&gt;)に注目する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#gcc-plugins&#34; id=&#34;gcc-plugins&#34;&gt;GCCプラグインによるC++解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parsing C++ with GCC plugins&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#boris-kolpackov&#34; target=&#34;_blank&#34;&gt;Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/parsing_cxx_with_gcc_plugins.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/parsing_cxx_with_gcc_plugins.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/parsing-c-with-gcc-plugins-5349971&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNU Compiler Collection(GCC)は、成熟し、広く使用されたC++コンパイラ実装を持ったオープンソースでクロスプラットフォームなコンパイラスイートである。GCCのバージョン4.5.0は、コンパイラコンポーネントの再利用と同様に、コンパイルプロセスのカスタマイズを許可する、新たな動的なプラグインアーキテクチャを追加した。この発表のゴールは、GCCプラグインを使用して、C++を解析する方法を示すことである。&lt;/p&gt;
&lt;p&gt;この話は、解析された翻訳単位の内部表現と、GCCプラグインアーキテクチャのハイレベルな概要から始まる。その後、C++宣言が存在することに関する情報の表示をするための、単純なプラグインの実装を示す。この話は、主翻訳単位、アプリケーション特有のプラグマと属性のハンドリング、プログラマティックなテンプレートインスタンス化に追加のC++コードを注入するなどのより高度な技術をカバーする。&lt;/p&gt;
&lt;p&gt;この発表は、Clang(最近全面的なC++98サポートを達成した別のC++コンパイラ実装)とGCCプラグインアーキテクチャの簡潔な比較なしでは不完全になる。この話は、Boostの、および(GCCプラグインを使用して実装することができる)より広いコンテキストで可能なおもしろいアプリケーションの迅速なブレーンストーミングセッションで締めくくる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#phoenix-v3&#34; id=&#34;phoenix-v3&#34;&gt;Phoenix V3の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Phoenix V3 –An Overview&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#thomas-heller&#34; target=&#34;_blank&#34;&gt;Thomas Heller&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hartmut-kaiser&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/phoenix_v3.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/phoenix_v3.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/phoenix-v3-an-overview-5250984&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phoenixは次世代のインラインの無名多態関数オブジェクト生成器となるだろう。V3ではBoost.Bind と Boost.Lambdaの機能が合成された新しいライブラリとなった。このライブラリを記述する際、後方互換性を保持したまま前述したライブラリ(訳註：BindとLambda)の制限を修正した。このセッションの目的は、C++における関数プログラミングが、いかに重要かつエレガントかについて概説することだ。セッションの第一部では、Phoenixで定義されたDomain Specific Embedded Language (DSEL)について述べる。DSELは演算子のオーヴァーロードと標準C++関数で構成されている。PhoenixがC++を模倣した言語を定義したのは、潜在的なユーザーが関数プログラミングに入門するハードルを下げるためだ。一方、既存のC++コードは(関数オブジェクトとして知られる)高階関数に依存している。たとえば、C++標準ライブラリはあるアルゴリズムの挙動を変更するために高階関数を使っている。第二部では関数オブジェクトの代わりにどうPhoenixを利用するか、また、Phoenix expression内でどう既存のユーザーコードを有効にするかについて例示する。しかし、Phoenixの真の力はこんなものではない。Phoenixは前のセクションで議論したように、式をデータとして扱う (C++においては)ユニークな機構を備えている。これによって、C++の標準的な手法ではなく、ユーザーの好みに応じた手法でPhoenixを利用できる。潜在的なユーザーにPhoenixを軸に展開する将来的なアプリケーションの見識を得ていただくために、このセッションの締めくくりとして、これらの機構についての概説をするつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#boost-simd&#34; id=&#34;boost-simd&#34;&gt;Boost.SIMDによる実用的なSIMDアクセラレーション&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Practical SIMD acceleration with Boost.SIMD&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#joel-falcou&#34; target=&#34;_blank&#34;&gt;Joel Falcou&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#mathias-gaunard&#34; target=&#34;_blank&#34;&gt;Mathias Gaunard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;プレゼンテーション資料 ： &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/simd.pdf&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料 ： &lt;a href=&#34;http://www.slideshare.net/faithandbrave/boostsimd&#34; target=&#34;_blank&#34;&gt;Practical SIMD acceleration with Boost.SIMD(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/practical-simd-acceleration-with-boost-simd-5261117&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SIMDマシン - 同じ命令で複数の要素からなるデータを並列に計算する能力を持つマシン - は、今日では、スーパーコンピュータからデスクトップコンピュータやモバイルコンピュータまで、ありふれたものとなっている。&lt;br /&gt;
数値計算のツールやライブラリは、SIMDを使用することによって計算速度を向上させることができるが、今のところ、C++デベロッパのための、最小で高レベルな、プラットフォームに依存しないインターフェイスを提供するライブラリはないといえるだろう。&lt;/p&gt;
&lt;p&gt;このチュートリアルで、我々はレビュー待ちの状態にあるBoost.SIMDライブラリについて紹介し、技術的な挑戦と、どのようにBoost.SIMDを用いて、一般的な、あるいは、あまり一般的でない問題に適用させるのかについて解説する。&lt;br /&gt;
解説では、我々のライブラリが、全ての種類のアルゴリズムを高速化するという点や、ペナルティがないようにSIMDハードウエアをちょうどよく抽象化するという点においての有用さについて述べる。&lt;/p&gt;
&lt;p&gt;Boost.SIMDの設計は、可能な限り軽量になるように、また、巨大な数値計算ライブラリNT2の一部となるように作られている。&lt;br /&gt;
NT2は、テーブルや行列を作るために、SMP、MPI、GPGPUの技術と一緒にBoost.SIMDを用いている。&lt;br /&gt;
Boost.SIMDはSIMDのみを扱う専用ライブラリとして作られている。&lt;br /&gt;
したがって、Boost.SIMDの主たる抽象化はSIMDレジスタである。(例えば、SIMDプロセッサによって処理される基本となる単位)&lt;br /&gt;
また、Boost.SIMDはプラットフォームに依存しない高レベルインターフェイスを提供するが、ローレベルな問題はユーザにとって主な関心事のままである。&lt;/p&gt;
&lt;p&gt;Boost.SIMDは、一定のコードパターンを認識し、最も効率的な解法への射影をするように、Boost.Proto DESLフレームワークを用いている。例えば、Altivecと未来の世代のx86環境に存在する積和命令や、与えられた範囲で必要とされる値を検出するために用いている。&lt;/p&gt;
&lt;p&gt;さらに、このライブラリは、与えられたアーキテクチャのプリミティブに適正に簡単に特殊化でき、新しいターゲットや関数を作成することができる強力な外部ディスパッチ機構を供えている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#real-workd-spirit-qi&#34; id=&#34;real-workd-spirit-qi&#34;&gt;現実世界におけるSpirit.Qi&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spirit.Qi in the Real World&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#robert-stewart&#34; target=&#34;_blank&#34;&gt;Robert Stewart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/spirit_qi_in_the_real_world.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/tue/spirit_qi_in_the_real_world.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/spirit-qi-in-the-real-world-5254335&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spiritの過去のセッションは、Spiritの導入や、チュートリアルによって現実の利用に注目した。実際のSpirit.Qiパーサーを書く際、速い段階で「悪魔は細部に宿る」ということに気付くだろう。思考錯誤によって、あるいはおそらくSpiritメーリングリストによって発見しなければならない特別なケース、トリック、イディオムがある。それには時間がかかり、便利とは限らないかもしれない。このセッションに、我々は&lt;code&gt;printf()&lt;/code&gt;(スタイルフォーマット文字列)のためのSpirit.Qiパーサーの開発を通じて見て回るだろう。結果として型安全で効率的な、&lt;code&gt;printf()&lt;/code&gt;の置き換えになるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#sweep-line-algorithm&#34; id=&#34;sweep-line-algorithm&#34;&gt;平面上の点、線分、多角形中間軸のボロノイ図における掃引線アルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sweep-Line Algorithm for Voronoi Diagrams of Points, Line Segments and Medial Axis of Polygons in the Plane&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#lucanus-simonson&#34; target=&#34;_blank&#34;&gt;pLucanus Simonson&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#andrii-sydorchuk&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/voronoi_diagram_of_line_segments.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/voronoi_diagram_of_line_segments.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/sweep-line-algorithm-for-voronoi-diagrams-of-points-line-segments-and-medial-axis-of-polygons-in-the-plane-5368229&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平面上の交点のないセグメントと点の集合を入力値とするボロノイ図を演算するアルゴリズムについて述べる。&lt;/p&gt;
&lt;p&gt;点のボロノイ図の演算を行なうFortuneによる平面掃引アルゴリズムを踏まえて、理論値であるO(n log n)の計算量を維持したまま、このアルゴリズムを線分に適用できるように拡張した。&lt;br /&gt;
線分に対するボロノイ図は、多角形中間軸を自明に生成することができ、VSLI、CAD、CAMの製造など、さまざまな適用が考えられる。&lt;br /&gt;
効率を犠牲することなく数値堅牢性を保証するアプローチについても議論するつもりである。&lt;br /&gt;
lazy-exact arithmeticに基づく堅牢な述語を用いることで、このアルゴリズムが整数座標入力について確実に正しい結果を返すことを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#b-tree&#34; id=&#34;b-tree&#34;&gt;Boostに提案されたB木ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Proposed Boost B-tree Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#beman-dawes&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式：チュートリアル&lt;/li&gt;
&lt;li&gt;トラック：Track II 2011&lt;/li&gt;
&lt;li&gt;プレゼン資料：&lt;a href=&#34;https://github.com/boostcon/2011_presentations/blob/master/tue/proposed_b_tree_library.pdf&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日本語版資料：&lt;a href=&#34;http://www.slideshare.net/eldesh/proposed-boost-btreelibraryja&#34; target=&#34;_blank&#34;&gt;The Proposed Boost B-tree Library(ja)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/the-proposed-boost-b-tree-library-5349968&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B木はデータベースやファイルシステム、ディスクに記憶される連想コンテナなどに利用される、どこにでもあるデータ構造である。&lt;/p&gt;
&lt;p&gt;このセッションではB木について、また、ディスクに記憶されるB木による&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;ライブラリについて紹介する。&lt;br /&gt;
まずB木を概略的に説明し、提案されたライブラリコンテナとC++標準の関連するコンテナとの関連について示す。すなわち、実装されているインターフェースや、落し穴、可変長データ、パフォーマンス、また、このライブラリの実装がどこまで進んでいるかについて紹介する。&lt;br /&gt;
フィードバックや議論する時間も設ける予定だ。&lt;/p&gt;
&lt;p&gt;このセッション終了時には、参加者した方々がご自身のアプリケーションにこのライブラリを利用することができるようになり、このライブラリがBoostに正式実装されるよう、さらなるフィードバックしていただけるようになるはずである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#think-async&#34; id=&#34;think-async&#34;&gt;非同期について考える ： Boost.Asioを使用したアプリケーション設計&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thinking Asynchronously: Designing Applications with Boost.Asio  &lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： 講義&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/thinking_asynchronously.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/thinking_asynchronously.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/thinking-asynchronously-designing-applications-with-boost-asio-5250947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初から、Boost.Asioは本心では、フレームワークとしてではなく、ツールキットとして設計された。ライブラリは1セットの基礎、汎用的なビルディングブロックの提供に注目する。タスクを検討するために、一つ以上の正しい方法があり、また、ライブラリは特定の書き方を強制しない。&lt;/p&gt;
&lt;p&gt;この発表では、我々は、問題を設計するためにどのように非同期の考え方を適用することができるかを考えていく。我々は、設計代案、共通の罠と落とし穴、それと複合操作によって計算量を攻撃する方法を見ることになるだろう。この話はまた、最適化、およびパフォーマンスと拡張性を管理するために、Boost.Asioが提供するツールをカバーするだろう。&lt;/p&gt;
&lt;p&gt;この話は、出席者がBoost.Asioにある程度基礎的なレベルのなじみがあると仮定する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#thread-shared-variables&#34; id=&#34;thread-shared-variables&#34;&gt;C++0xのスレッドと共有変数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Threads and Shared Variables in C++0x&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#hans-boehm&#34; target=&#34;_blank&#34;&gt;Hans Boehm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： キーノート&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/boehm-boostcon11.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/wed/boehm-boostcon11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/hans-boehm-threads-and-shared-variables-in-c-0x-keynote-5250902&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++0xの規格ドラフトは、言語へスレッドを導入し、スレッド間で共有される変数の意味を念入りに定義する。設計は、デフォルトでマルチスレッドのプログラムがスレッドの単純な割り込み実行に基づいたセマンティクス(つまり、順序一貫性:sequential consistency)を保証するべきであるという考えに基づく。間違ったものや無意味であるものとして、我々がデータレース(通常の共有変数への、ほとんどの種類の非保護同時アクセス)を考察するという理由だけで、これは効率的な実行を許可する。ドラフトは代わりに、とくにID付けされたオブジェクトにアクセスを許可するアトミック操作の広範囲なコレクションをサポートする。&lt;/p&gt;
&lt;p&gt;我々は、C++0xのスレッドサポートの概要を示し、次に、共有変数セマンティクスを定義するメモリモデルとアトミックライブラリの相互作用に注目する。過去の慣例とできるだけ一致するように心がけたが、我々は多くの難題と、驚きに遭遇した。我々は、コピーしないために試みた過去の誤りのいくつかに言及する。&lt;/p&gt;
&lt;p&gt;これは、Sarita Adve、Lawrence Crowl、Paul McKenney、Clark Nelson、Herb Sutter、他の多くの方との共同作業について説明する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#xml-processing&#34; id=&#34;xml-processing&#34;&gt;C++のマルチパラダイムデザインによるネイティブXML処理&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Toward Native XML Processing Using Multi-paradigm Design in C++  &lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#aniruddha-gokhale&#34; target=&#34;_blank&#34;&gt;Aniruddha Gokhale&lt;/a&gt;, &lt;a href=&#34;http://boostcon.boost.org/program/speakers#sumant-tambe&#34; target=&#34;_blank&#34;&gt;Sumant Tambe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track I 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/leesa_boostcon.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/mon/leesa_boostcon.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/toward-native-xml-processing-using-multi-paradigm-design-in-c-5254288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XMLプログラミングは、抽象、分割、プログラミングスタイル、およびイディオムの、それ自身の規則によって強力なデータ処理パラダイムとして出現した。経験を積んだXMLプログラマが求めるものは、それらの生産性がXMLプログラミングのドメイン固有パターンとプラクティスの使用を許可する言語とツールの有効性に依存する。しかし、これらのツールが与えられたXMLスキーマの静的に型付けされた、用語特化のオブジェクトモデル(vocabulary-specific object model)を自動的に生成するため、オブジェクト指向のコミュニティは専用XML言語よりもXMLデータバインディングツールを好む。不運にも、これらのツールはたいてい、純粋なオブジェクト指向の法則を使用して、XMLプログラミングの抽象的概念を統合する際の困難さのために、経験を積んだXMLプログラマの期待するものを避ける。この話は、C++のマルチパラダイムプログラミング能力の新たな適用によって、この普及しているギャップがどのように縮小されるのかを実証する。項目として、ジェネリックプログラミング、メタプログラミング、ジェネレーティブプログラミング、戦略プログラミング(strategic programming)、およびC++によってサポートされた演算子オーバーロードがネイティブで型付けされたXMLプログラミングをどのようにともに可能にするのかを話す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#why-cpp0x-is-awesomest-network-programming&#34; id=&#34;why-cpp0x-is-awesomest-network-programming&#34;&gt;C++0xはなぜネットワークプログラミングのための、最高の中の最高の言語なのか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why C++0x is the Awesomest Language for Network Programming&lt;/li&gt;
&lt;li&gt;スピーカー ： &lt;a href=&#34;http://boostcon.boost.org/program/speakers#christopher-kohlhoff&#34; target=&#34;_blank&#34;&gt;Christopher Kohlhoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;形式 ： チュートリアル&lt;/li&gt;
&lt;li&gt;トラック ： Track II 2011&lt;/li&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Awesomest.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/2011_presentations/master/thu/Awesomest.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ : &lt;a href=&#34;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&#34; target=&#34;_blank&#34;&gt;http://blip.tv/boostcon/why-c-0x-is-the-awesomest-language-for-network-programming-5368225&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;警告 ： これは臆病な人のための話ではない。最先端の言語機能があり、ハックがあり、言語の乱用があるだろう。このセッションは椅子を投げておわるかもしれない。&lt;/p&gt;
&lt;p&gt;スリルを求めるオタクにとって、それは楽しい旅であるべきだ。我々は、新たなC++0x言語とライブラリ機能のうちいくつかがどのように大きな位置を占めるのかを見ていく。また、いくつかのそれと古いものは、簡潔で、表現力があり、効率的なネットワークプログラムを作るためにBoost.Asioと連携することができる。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Norihisa Fujita, zak, DigitalGhost&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++Now! 2012 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/cppnow/2012.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:cppnow/2012.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++Now! 2012&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;セッション資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012&#34; target=&#34;_blank&#34;&gt;C++Now! Presentations 2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;../archive/cpp_online_reading.html&#34;&gt;C++オンライン読書会&lt;/a&gt; にて有志が一部の資料を読んでいるので、そちらも資料を読むお供にどうぞ。&lt;/p&gt;
&lt;h2&gt;ビデオ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/user/BoostCon&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/user/BoostCon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加レポート&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/redboltz/20120519/1337385881&#34; target=&#34;_blank&#34;&gt;C++Now2012体験記 - redboltzの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120522/1337650107&#34; target=&#34;_blank&#34;&gt;C++Now! 2012に参加してきました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25007975614/c-now-boostcon-c-now-boost-konferenz-im&#34; target=&#34;_blank&#34;&gt;C++Now! - BoostCon新装開店 (C++Now! – Boost-Konferenz im neuen Gewand) - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セッションリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-useful-computations&#34;&gt;おなじ環境でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ustring&#34;&gt;Ustring - 現代的な&lt;code&gt;std::string&lt;/code&gt;の代替&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-forward&#34;&gt;キーノート：C++11で前進せよ!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における今日的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compile-time-reparsing&#34;&gt;コンパイル時 再パース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#50-boost-libs&#34; id=&#34;50-boost-libs&#34;&gt;180分でめぐるBoost Library 50個の旅&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;50 Boost Libraries in 180 minutes&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/boris-schaeling/&#34; target=&#34;_blank&#34;&gt;Boris Schäling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/50_boost_libraries.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/50_boost_libraries.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションでは、50個のBoost Libraryを180分かけて紹介する。多くのBoost Libraryについて、幅広く俯瞰する。あまりboostに詳しくない方、または、いくつかのライブラリしか知らない方は、今後、boostが提供すべきすぐれたアイデアを得ることができるだろう。このセッションは、後程どのライブラリについて学びたいか、いまのプロジェクトで使えるか、さらには貢献できそうか判断する指針となるだろう。 このセッションは、プレゼンターの著書である「The Boost C++ Libraries」(英語版 2011/6刊行)と「Die Boost C++ Bibliotheken」(ドイツ語版 2012/1刊行)に基づいている。これらの書籍ではすぐに習得できる一般的なライブラリを紹介している。このセッションでは、これらの本から例を引用するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#more-useful-computations&#34; id=&#34;more-useful-computations&#34;&gt;おなじ時間でより効果的な計算を： C++で組み込みリアルタイムコード&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More Useful Computations in the Same Duration: Optimizing Embedded Hard Real-Time Code in C++
スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/schurr_more_useful_computations.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=mJjYgpeo5ws&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は非常に広い問題領域に適用可能なマルチパラダイム言語である。このセッションでは限られたメモリリソース、かつ、200KHz(5マイクロ秒)サーボインタラプト割合のリアルタイム組み込みシステムにC++を利用した際の最適化と拡張について紹介する。二年以上かけて、このシステムのデータ処理帯域幅は、ハードウェアの強化をすることなく大きく改善した。この改善を達成するために、様々なアプローチとテクニックについて議論した。その結果、ほとんどのよく知られているC++イディオムは組み込みのリアルタイムシステム環境にはよく合わないことが分かった。しかし、C++はCよりもメンテナンスの面でもコード実行速度の面でも優位な性能を見せた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションは、組み込み向け、汎用機向けという区分なく、特定のC++コードの実行速度の高速化に興味がある方には有意だろう。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションで、特定の組み込み環境について、何が正しく動き、何が正しく動かないのか、そしてその理由はなにかについて説明する。主なテーマはパフォーマンスモニタリング、特定領域のコードデザイン、コンパイラに高速なコードを生成させる方法、スレッドセーフオプションである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#whirlwind-overview-cpp11&#34; id=&#34;whirlwind-overview-cpp11&#34;&gt;駆け足でC++11の概要&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Whirlwind Overview of C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/leor-zolman/&#34; target=&#34;_blank&#34;&gt;Leor Zolman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/cpp_overview_handout.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/cpp_overview_handout.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jrCrWdrH17g&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このC++11の簡潔なイントロダクションでは、プレゼンターであるLeor Zolmanが言語への主要な機能追加について調査する。また以下の項目についても述べる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コード可読性の向上について(ラムダ, 統一初期化, &lt;code&gt;auto&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;パフォーマンスの向上について(右辺値参照とムーブコンストラクタ)&lt;/li&gt;
&lt;li&gt;マルチスレッドについて(並行性とアトミック型)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、他の多岐に渡る便利な機能や、標準ライブラリのコンポーネント(スマートポインタと新しいSTLコンテナ)についても触れる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションはC++11の簡潔な概要を知りたい方向けである。そのため、詳細をカヴァーしきれない言語機能、ライブラリが多々あることをご了承いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#odeint&#34; id=&#34;odeint&#34;&gt;odeint - C++で常微分方程式を解く&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;odeint – Solving ordinary differential equations in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/odeint.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/odeint.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=jv2oDfT-jds&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常微分方程式(ODE: Ordinary differential equation)は自然科学、応用分野の諸領域で重要な役割を果たしている。&lt;br /&gt;
例示すると、古典的ニュートン物理学、化学反応式、量子系から神経系にわたる、個体群動態における反応速度式などである。&lt;br /&gt;
さらに、常微分方程式は偏微分方程式(PDE: partial differential equation)の離散化をする際頻出する。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、odeint(&lt;a href=&#34;http://odeint.com&#34; target=&#34;_blank&#34;&gt;odeint.com&lt;/a&gt;) -常微分方程式の数値解法を探索するためだけのC++ライブラリ- を紹介する。このライブラリはBoost入りを目指している。&lt;/p&gt;
&lt;p&gt;odeintは非常にジェネリックに実装されており、高速に相互運用することができる。&lt;/p&gt;
&lt;p&gt;odeintはODEソルバのためのC++コンセプトを導入しており、標準的なメソッドを数多く実装している。例えば、古典的Runge-Kuttaスキーム、ステップサイズコントロールと稠密出力のメソッド、非明示なメソッドとシンプレティック解法などである。； odeintはコンテナ非依存であることを強調しておきたい。つまり、使用者はstd::vectorのような特定の型を使うことを強いられない。 それゆえ、ネットワーク、ラティス上のODEを解くこともできる。 さらに、多倍精度か区間演算を利用できる。 ジェネリックな設計を取っているので、odeintは容易に並列化してCUDA GPUで実行できる。 それにもかかわず、odeintはわかりやすいインターフェースを備えているので、簡単に、容易に使うことができる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではodeintの主要な機能ならびにそのソフトウェアデザインについて述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#fresh-paint&#34; id=&#34;fresh-paint&#34;&gt;新仕様できたてほやほや!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fresh Paint&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/fresh_paint.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=ourmFvidEpk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11では様々な方法で言語を拡張する興味深い新機能が導入された。&lt;/p&gt;
&lt;p&gt;このセッションではそれらを完全に無視して、別のテーマに焦点を当てる。すなわち、C++11でよりシンプルに、クリーンに、エレガントに記述する方法について述べる。このセッションはソフトウェアデザインの最先端についてあまりよく知らないけれど、クリーンかつシンプルかつ効率的なコードを書くことに関心がある方に最適である。話のなかでデザインについて知見が得られれば幸いである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#openmp-for-better-high&#34; id=&#34;openmp-for-better-high&#34;&gt;ハイパフォーマンスを求めるためだけではなく、高次の並列化のためのOpenMP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP for better high-level parallelism, not just for High Performance Computing&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/47981ddb3630f7fc1651ae0ecb608b0344d19b5f/mon/cppnow_openmp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGrk2mbKTS0&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenMPは高次の言語を用いたインクリメンタル並列化をサポートする、C,C++,FORTRAN向けの分散メモリ並列化の仕様である。&lt;/p&gt;
&lt;p&gt;OpenMPはハイパフォーマンスコンピューティング、スーパーコンピューティングのためのもの、と思っている方がいるかもしれないが、実際は他にほぼ類をみない分散メモリ並列化 - これは3つの汎用言語で実装されている - に適しており、それ自体高次言語である。OpenMPはグラフィクスや可視化の分野や、組み込みやリアルタイムアプリケーション分野、コミュニケーションとネットワーク分野、自動化とロボディクス分野、財務や通商分野、医療と生命工学分野、石油・ガス業界、シミュレーション、データベースとミドルウェア、音声・オーディオ処理、汎用データ解析などの分野でも有効であることが知られている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#hpx&#34; id=&#34;hpx&#34;&gt;HPX: C++11並列実行システム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HPX: A C++11 parallel runtime system&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/bryce-adelstein-lelbach/&#34; target=&#34;_blank&#34;&gt;Bryce Adelstein-Lelbach&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/hartmut-kaiser/&#34; target=&#34;_blank&#34;&gt;Hartmut Kaiser&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/matthew-anderson/&#34; target=&#34;_blank&#34;&gt;Matthew Anderson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/thu/hpx_a_cxx11_parallel_distributed_system.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;計算科学のアプリケーションは、しばしば基になる実行モデルから受けついだ選択の影響を受ける。並列計算アプリケーションにおいては、MPIが注目をあつめている。しかし、電源や、プロセッサコアの複雑性、マルチコアソケット、GPUの異種混在という問題が深刻になってきたため、並列アプリケーションはスケーリング不全の危機に陥っている。&lt;/p&gt;
&lt;p&gt;HPX実行時システムはモジュラーであり、完全実装であり、SMPノードとコモディティ・クラスターのような従来型の並列計算アーキテクチャを対象としたParalleX実行モデルのパフォーマンス指向の表現である。MPIの代替として、HPXは軽量ユーザースレッドを管理するためのルーチンに加えて、アクティヴグローバルアドレス空間(AGAS: Active Global Address Space)を提供している。HPXはC++11で実装され、20のBoostライブラリ/Boostライブラリ候補を利用している。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、実行時システムアーキテクチャに焦点を当てるとともに、HPXでどのようにBoost C++ライブラリやC++11機能を利用しているかについて議論する。HPXの概要についてプレゼンテーションし、さらに、競合するランタイムシステムおよび科学計算コミュニティ向けアプリケーションとの比較とベンチマークを紹介する。HPXに興味、関心をもたれて、実際に試用していただければ幸いである。ダウンロードはこちらから： &lt;a href=&#34;http://stellar.cct.lsu.edu/&#34; target=&#34;_blank&#34;&gt;http://stellar.cct.lsu.edu/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#lambda-functions&#34; id=&#34;lambda-functions&#34;&gt;ラムダ関数&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lambda Functions&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/lambda.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=tLp6ZBHwvj4&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無名関数は多くの言語で有用なツールとして成功を収めている。その局所性と明瞭な構文により、高い表現力と、バグの少ないコードを記述できる。Boost.LambdaやBoost.Phoenix、そしてFC++といったライブラリによって、C++にラムダ式がもたらされたが、今日、C++11には言語機能としてラムダ関数がある。ラムダ関数は無名関数オブジェクトとよく似ている。というのは、ラムダのスコープ外でキャプチャ/識別子の状態の変更が可能だからだ。&lt;/p&gt;
&lt;p&gt;この90分のチュートリアルセッションで、この新しい言語機能の構文と利用方法を概観する。上達を図るために練習問題や例を多数用意している。ラムダが利用可能なコンパイラを持参し、ぜひラムダ関数を使うとコードがどれほどよくなるか体験していただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#future-cpp1x-proposals&#34; id=&#34;future-cpp1x-proposals&#34;&gt;来るC++1xへの提案&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Future C++1x proposals&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-wong/&#34; target=&#34;_blank&#34;&gt;Michael Wong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/cppnow_future.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=NdWHVyZBazo&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11が公開された今、C++1xに搭載される次の機能は何だろうか？ このプレゼンテーションでは2月のコナ会議で提案されたものを紹介していく。Evolution Working Groupでレヴュー済みのペーパーと、ConcurrencyおよびLibrary Working Groupの活動についても焦点を当てる。 おまけ： 主要なコンパイラについて、最新のC++11実装状態についてもお伝えしたい。&lt;/p&gt;
&lt;p&gt;2012年2月のコナ会議を経て、標準委員会は次のC++標準を暫定的に2017年に、その次を2022年に、おおよそ五年毎に公開するように決定した。また、いくつか主要なものを例にあげると、モジュールや高度な並列抽象化、リフレクションといった次の標準にむけての提案についても精査した。このプレゼンテーションではこれらの機能について焦点をあて、C++11にどのような影響を与えるかについて議論する。&lt;/p&gt;
&lt;p&gt;カナダ、IBMのC++標準委員会代表や、BoostConでトランザクショナル・メモリからC++11の並行について多様なトピックを長きにわたってプレゼンターを務めた者として、標準委員会でC++の将来搭載されるべき機能についての議論にはできるだけ参加するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#variadic-tmp&#34; id=&#34;variadic-tmp&#34;&gt;モナドを使って可変長テンプレートメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variadic Template Metaprogramming using Monads&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/bartosz-milewski/&#34; target=&#34;_blank&#34;&gt;Bartosz Milewski&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/eric-niebler/&#34; target=&#34;_blank&#34;&gt;Eric Niebler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/compile_time_runtime_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/compile_time_runtime_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11 の新機能である可変引数テンプレートは，パワフルだが気の触れた制限がついている．なんと template parameter pack が一級市民ではないので，一部のよくある(メタ)プログラミングの定石で使いにくいのだ．うれしいことに偶然，関数型プログラミング，正確に言うと Haskell では，おもしろい方法でこの問題を解決している．というわけで我々は，可変個継続，継続モナド，カリー化，その他C++メタプログラミングで使うためのエキゾチックな構成を使った方法について話す．&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#ustring&#34; id=&#34;ustring&#34;&gt;Ustring - 現代的なstd::stringの代替&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ustring – A Modern Alternative to &lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alan-talbot/&#34; target=&#34;_blank&#34;&gt;Alan Talbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/ustring.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/boostcon/cppnow_presentations_2012/master/mon/ustring.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=nAm1Tbk068U&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++プログラミングで推奨される文字列表現はstd::stringである。しかし、実際には、あるプログラムには三つ以上の文字列型(例えば、&lt;code&gt;std::string&lt;/code&gt;、MFCの&lt;code&gt;CString&lt;/code&gt;、&lt;code&gt;char*&lt;/code&gt;)が混在していることがほとんどである。われらが&lt;code&gt;std::&lt;/code&gt;stringは長年よくやってくれているが、いろいろな制限やときどき見せる奇行に悩まされることもままある。そして、他の文字列クラスが備えている便利な機能、特に言うならUnicodeサポートが欠けている。C++11が公開されたことと、&lt;code&gt;std::string&lt;/code&gt;が実装されてから数十年来の知見を集めて、よりよいツールを創ってみた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの前半は、将来、強力かつ競争力のあるツールとなるよう、&lt;code&gt;std::string&lt;/code&gt;の制限や問題を解決することをめざした新しいクラスの設計について述べる。多くの知見を集積して、C++11にふさわしい、簡便で、表現力豊かで、強力な文字列処理を創りだすことが目標である。そのために、後半は理論や秘話、懸案事項やアイデアなどをいただきたく、聴講されている皆様とブレインストーミングするセッションにするつもりである。このライブラリは開発の初期段階にあるので、変更の余地はあるし、どんなアイデアでも歓迎する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#high-level-threading&#34; id=&#34;high-level-threading&#34;&gt;C++11: 高次のスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: High-Level Threading&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/mon/concurrency.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=9GILH2U94Ls&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11は並行処理の新しい機構を備えている。慎重に設計されたシステムのプログラミング言語であるならば当然のことだが、言語機能は厳格な理論的基礎(メモリモデル)に基いて構築され、低レヴェルプリミティヴ(atomic)へのアクセスを提供している。幸運にも、C++11ではスレッドを効果的に使う際に、こうした難解な詳細について理解する必要はない。(もし低レヴェルの事柄について詳細を知りたければ、Tony Van Eerdのプレゼンテーションを見るべし)&lt;/p&gt;
&lt;p&gt;その基礎の上に、プログラマが日々のコンカレントなコードを記述する際、実際に使うべきAPIが用意されている。すなわち、大量のロックやミューテクスや条件変数、そして、より高いレヴェルの&lt;code&gt;future&lt;/code&gt;, &lt;code&gt;promise&lt;/code&gt;, &lt;code&gt;packaged_task&lt;/code&gt;などだ。また、スレッドセーフなプログラミングの中核的問題についても述べ、これら問題を解決するためのコンポーネントの使いかたについても述べる。&lt;/p&gt;
&lt;p&gt;メモ： このプレゼンテーションに興味を持たれたかたは、&lt;a href=&#34;#cpp11-gems&#34;&gt;&#34;Other C++11 Gems&#34;&lt;/a&gt;のプレゼンテーションにも食指が動くかもしれない。そちらのプレゼンテーションでは、時刻や時間、タイムアウトでのロック、スリープといった優れたデザインの新機能について取りあげるそうだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#grill-the-committee&#34; id=&#34;grill-the-committee&#34;&gt;標準委員を質問攻めにしよう!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grill the Committee&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準のなれそめについて知りたくないか？ このパネルディスカッションではC++標準委員会のメンバーに登壇いただき、聴衆の皆様に気になっていることを質問していただく趣旨である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#moving-forward&#34; id=&#34;moving-forward&#34;&gt;キーノート： C++11で前進せよ!&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Moving Forward with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料&lt;ul&gt;
&lt;li&gt;前編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part1.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;後編：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward_part2.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前編・後編一括：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_moving_forward.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右辺値参照はC++に二つの新しい相乗的に機能するプログラミングイディオムをもたらす。すなわちムーブセマンティクスと完全転送である。このプレゼンテーションでは右辺値参照とは何か、ムーブセマンティクスとは何か、完全転送とは何か、といった基礎からはいる。また、このプレゼンテーションではこれらが導入された動機や利用法、コンパイラがこれらを自動生成する条件についても述べる。さらに、クラスを設計した後でも、条件に合致すれば自動的に、ムーブセマンティクスが最適化の役目を果たすことができるけれども、ムーブセマンティクスの知識は直接的にクラス設計に影響を与えることを示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#metaparse&#34; id=&#34;metaparse&#34;&gt;Metaparse – テンプレートメタプログラミングによるコンパイル時構文解析&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaparse – Complie-time parsing with template metaprogramming&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/abel-sinkovics/&#34; target=&#34;_blank&#34;&gt;Ábel Sinkovics&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/zoltan-porkolab/&#34; target=&#34;_blank&#34;&gt;Zoltan Porkolab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/2b6b26f9fcc28fa7b2c777819111012217116ff5/tue/metaparse.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/tue/metaparse.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=v3XoWi0XbZk&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Metaparseは、C++のコンパイル時文字列を解析する、パーサー生成のためのC++テンプレートメタプログラミングライブラリである。Boostはすでに2つのパーサージェネレータライブラリを持っている：Boost.SpiritとBoost.Proto。MetaparseとBoost.Spiritの主な違いは、Metaparseによって生成されたパーサーはコンパイル時に実行され、Boost.Spiritによって生成されたパーサーは実行時に実行されるということである。Boost.ProtoパーサーはC++の有効な式をコンパイル時に処理し、Metaparseは自由形式の文字列を入力としてパーサーを構築する。&lt;/p&gt;
&lt;p&gt;コンパイル時の任意なテキストを解析することは、多くの状況で有用である。我々はより複雑なユースケースを比較的に簡単にする方法を提供する。一般的な構文は、以下の正規表現のコンパイル時検証を有効にすることでBoost.Xpressiveのラッパーを作成できる。より複雑な例として、printfの書式指定文字列を解析し、コンパイル時に引数の型を検査する。コンパイル時パーサーの別な手段は、組み込みDSLスクリプトをC++のネイティブな関数への変換をコンパイル時に行い、実行時にそれを実行することである。最も複雑な例では、テンプレートメタ関数を定義するために、組み込みDSLをどのようにして実装するかを示す。Metaparseはパーサー生成のDSLをメタ関数に変換する能力を持つ。&lt;/p&gt;
&lt;p&gt;Metaparseの内部構造と、それをどのようにして拡張するかを説明する。ライブラリの正確なエラー報告の機能を紹介する。モナドの概念の入門と、それを使用することでパーサーの構築を容易にすることを示す。新たなC++標準の&lt;code&gt;constexpr&lt;/code&gt;は、コンパイル時にアルゴリズムを実行するための構造を提供する。メタプログラミングと&lt;code&gt;constexpr&lt;/code&gt;の間を繋ぎ、パーサーによって処理される入力の構文的なオーバーヘッドを最小限にしてそれを利用する方法を提供する。&lt;/p&gt;
&lt;p&gt;Metaparseと、その元となるライブラリは、以下から利用可能である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://abel.web.elte.hu/mpllibs&#34; target=&#34;_blank&#34;&gt;http://abel.web.elte.hu/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sabel83/mpllibs&#34; target=&#34;_blank&#34;&gt;https://github.com/sabel83/mpllibs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これはユーザーと開発者にとって高度な話である。Boost.MPLに精通していることを前提とする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#ladon&#34; id=&#34;ladon&#34;&gt;Ladon - 分散状態マシンフレームワーク&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ladon - A Distributed State-Machine Framework&lt;/li&gt;
&lt;li&gt;スピーカー： &lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/ladon.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ： &lt;a href=&#34;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=KExYq1bepT0&amp;amp;feature=plcp&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;階層的な状態マシンは、多くのドメインにエレガントな解決策を提供する。それらの厳格な要件は、高い信頼性のシステムのための規律を一段階強化する。状態マシンはシステムの反応的な振る舞い(reactive behavior)について記述するのに役立つ。ポート束縛、メッセージ配信、およびプロトコル変換を提供する一方で、コミュニケーションポートや包含コンセプト(containment concepts)のようないくつかの(ROOMのような)構造的コンポーネントを加える。そうすれば、分散状態マシンフレームワークが生まれる。よく定義されたインタフェースを持ったより小さな分散マシンに分割することは、大きな反応的システムのための強力なツールである。&lt;/p&gt;
&lt;p&gt;このセッションでは、Ladon分散状態マシンフレームワーク(C++Now 2012でデビューするciere consultingのオープンソースプロジェクト)を導入する。Ladonは、反応的なシステムのためのリッチな分散ソリューションを作成するために、Boost.MSM、Boost.AsioおよびBoost.Spiritを融合させる。フレームワークの設計と基本的な使用法についての議論に加え、我々はあなたのシステムで使用できるおもしろいパターンと解決策のいくつかを紹介する。我々が言及するライブラリは、以下のものを含む：MSM、Spirit、Asio、Fusion、Signals2、そしてPhoenix。&lt;/p&gt;
&lt;p&gt;この90分間のセッションは、初心者と中級レベルの出席者に、いくつかのBoostライブラリと現代的なC++手法の概観を提供する。&lt;/p&gt;
&lt;p&gt;語源 - Ladon(Λάδων)は、ヘスペリデスの庭のトマトを守護する、ギリシャの100の頭を持つヘビのようなドラゴンである。頭がそれぞれ異なる言語を話したという噂がある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#low-level-threading&#34; id=&#34;low-level-threading&#34;&gt;黒魔術につき取扱注意 - C++11で低レヴェルスレッディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t Try This at Work – Low Level Threading with C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/low_level_threading_with_cpp11.pps?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のC++は&#34;メモリモデル&#34;がある。しかしこれはどんな意味で、どうして導入されたのか、また、以前のC++に必要なかったのは何故か？ これを使って何ができるか？ そしてこれらの新しい原子操作にはなにやら相関があるようだ… むむむ…&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#exception-safety&#34; id=&#34;exception-safety&#34;&gt;C++で例外安全なコーディング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exception-Safe Coding in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/exception_safe_coding.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;皆様のコードは100%例外安全を達成していると言えるだろうか？&lt;/p&gt;
&lt;p&gt;例外を安全に利用するのはなまはんかな問題ではない。この業界では20年来この問題に奮闘してきた。もし皆様が恐怖や不透明感、例外安全に疑いをもっていたり、純粋にC++で例外のベストプラクティスを知りたいと思っているならば、ぜひこのプレゼンテーションを聞いていただきたい。まず始めに、&#34;何を解決しようとしているか&#34;から入り、代案について議論し、例外の利用に関する問題を確認し、例外安全について曲解されやすい試みについて述べる。また、安全な例外の利用法についての基本的なガイドラインと過去の例外安全ではないコードベースから移行するための鉄板の実装テクについても述べる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションの目的は、皆様に、簡単に記述できて、理解しやすく、高速に動作し、例外が発生しても100%の堅牢性を誇るコードをどうやったら書けるようになるかお伝えすることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#moving-boost-to-git&#34; id=&#34;moving-boost-to-git&#34;&gt;BoostをGitに移行しよう&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Moving Boost to Git&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/moving_to_git.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=rqKGX2LJOmU&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gitヴァージョン管理システムはSubversionに比べてBoostの開発者、利用者双方に利益がある。このセッションではBoostからみたGitについて紹介し、徐々に高度な議題について述べていく：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;なぜGitなのか？ - 成層圏から俯瞰してみよう&lt;/li&gt;
&lt;li&gt;皆様にGitの基礎を知っていただくために、駆け足のGitのチュートリアル&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost開発者の視点から&lt;/li&gt;
&lt;li&gt;Subversionに対するGitの優位性 - Boost利用者の視点から&lt;/li&gt;
&lt;li&gt;Boostのモジュール化への試み - 課題、アプローチ、トレードオフについて&lt;/li&gt;
&lt;li&gt;Boost開発者にあわせたワークフロー構築の試み&lt;/li&gt;
&lt;li&gt;BoostをGitに移行してみるワークショップ - 実行計画の開発&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この&#34;BoostをGitに移行しよう の前準備&#34;と題したドキュメントとファイルをC++Now!の二週間前くらいまでに用意するつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#learned-developing-std-lib&#34; id=&#34;learned-developing-std-lib&#34;&gt;C++11標準ライブラリの策定を通じて学んだこと&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lessons Learned Developing the C++11 Standard Library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/lessons_from_the_library.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11の標準化作業はおおよそ8年かかり、標準ライブラリのサイズは少なくともページ数上では倍増した。標準化作業は標準ライブラリの設計を再確認し、おおよそ十年間で蓄積したBoostライブラリで得られた知見や開発技術をもって仕様をクリーンアップし、右辺値参照やコンセプト、並行処理のサポートといった、言語に導入が考えられた新しいアイデアについて学び、最後に新しい機能でライブラリを拡張した。この経験は有意だったか、それとも無意だったか？ 次の機会によりうまくやるために、いったい何を学んだのか？ 次のライブラリ TR を策定するにあたり、このレッスンをどう生かせばいいのか？&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#utilizing-modern-programming&#34; id=&#34;utilizing-modern-programming&#34;&gt;科学的ソフトウェア開発における現代的プログラミングテクニックとBoostライブラリの適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Utilizing Modern Programming Techniques and the Boost Libraries for Scientific Software Development&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/josef-weinbub/&#34; target=&#34;_blank&#34;&gt;Josef Weinbub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/cppnow_weinbub.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現代的プログラミングテクニックとライブラリを利用することで、ソフトウェア開発者は膨大な機能と柔軟性を手にいれることができる。しかし、ジェネリックプログラミング、関数型プログラミング、メタプログラミングのような関連技術を利用するには、高度なプログラミングスキルが要求されるので、マニアかコンピュータサイエンティストでなければ使い熟し得ない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、Boostライブラリのような現代的プログラミング技術を利用する科学的コンピューティングの範疇に含まれる3つの仕事について報告する。まず、主にBoost GraphライブラリとBoost Phoenixライブラリを利用した順次および並列タスクグラフ実行のための拡張可能なプラグインスケジューラを紹介する。次に、Boost MetaprogrammingライブラリとBoost Fusionライブラリを利用した、コンパイルタイムに任意のプロパティに基づいてコンポーネントのサブセットを選択するというメタプロパティの選択方法について紹介する。最後に、ジェネリックパラダイムのもと幾何学的アルゴリズムを一般化するためのアプローチについて示す。&lt;/p&gt;
&lt;p&gt;これらアプローチの紹介を通じて、現代的プログラミングテクニックとBoostライブラリの適用により、非常に汎用的で、維持可能で、コンパクトで、拡張可能なコードを生み出せることを示す。以上から、長期的には高度なC++スキルを習得するために費した時間はペイすると結論する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#vs-ide&#34; id=&#34;vs-ide&#34;&gt;C++開発者むけVisual Studio IDEの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new in Visual Studio IDE for C++ Developers&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sumit-kumar/&#34; target=&#34;_blank&#34;&gt;Sumit Kumar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/tue/visual_studio_ide_for_cpp%20_developers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=XLrR3cJCjlI&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;きたるVisual Studio 11のリリースには、IDEとのやりとりやチーム内の他のC++開発者と共同作業するといった、日々のコーディング作業でC++開発をより効率的にするような新しい機能や革新が数多く詰まっている。&lt;/p&gt;
&lt;p&gt;本プレゼンテーションではデモをごらんいただきながら、構文の色分け、参照のハイライト、進化したインテリセンス、コード解析、プロファイリングといった機能に焦点を当てて紹介する。また、ドキュメントとの連携、検索やナビゲーションといった普段の作業を非常に簡易化するIDEの改善点についてもひととおりごらんいただく。このプレゼンテーションではコードレヴューやテスト、コードカヴァレッジといった統合機能についても概説する。Visual Studio 11はC++開発者チーム全体に有益である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#modules&#34; id=&#34;modules&#34;&gt;キーノート： C++におけるモジュール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Modules in C++&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/david-vandevoorde/&#34; target=&#34;_blank&#34;&gt;David Vandevoorde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modules_aspen2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=8SOCYQ033K8&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の幕開け以来、プリプロセッサはC++ライブラリインターフェースとやりとりするための手段としての役割を果たしてきた。しかし、長年にわたり、プリプロセッサであるがゆえに生じる制約によって、不愉快なビルド時間は増加の一途をたどっている。今日、プリプロセッサはよりよいC++開発ツールをつくるにあたり唯一最大の阻害要因になっている。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、C++に&#34;モジュール&#34;の概念を導入するための選択肢を紹介し、それらがもたらす課題と恩恵について議論する。次のC++標準仕様に向けて、C++標準委員会はこれらの選択肢について活発に検討している段階である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#generic-programming-real-world&#34; id=&#34;generic-programming-real-world&#34;&gt;C++でのジェネリックプログラミング： 実例を交えて&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generic Programming in C++: A Real-World Example&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/marshall-clow/&#34; target=&#34;_blank&#34;&gt;Marshall Clow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/marshall_generic_programming.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=SWGMq0_X32Q&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この90分のセッションでは、Boost MLでいただいたリクエストに答えようと思う。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜBoostには&lt;code&gt;hex&lt;/code&gt;／&lt;code&gt;unhex&lt;/code&gt;関数がないのか？ とても有用だと思うけど。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、Boost.Algorithmライブラリにマッチしたこれらのアルゴリズムのデザインと実装についても概説する。&lt;/p&gt;
&lt;p&gt;この関数は単純であるけれども、非常に多くの興味深い設計決定が実装中になされている。これについてもこのプレゼンテーションで述べるつもりだ。&lt;/p&gt;
&lt;p&gt;カヴァーする議題は以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ジェネリックプログラミングデザイン&lt;/li&gt;
&lt;li&gt;イテレータの取り扱い(出力イテレータの問題についても述べる)&lt;/li&gt;
&lt;li&gt;テンプレートメタプログラミング(&lt;code&gt;enable_if&lt;/code&gt;の用法についても述べる)&lt;/li&gt;
&lt;li&gt;Boost.Exception&lt;/li&gt;
&lt;li&gt;コードの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lowest-variational-methods&#34; id=&#34;lowest-variational-methods&#34;&gt;Boost.Protoを用いた最低次変分法のドメイン特化固有言語の実装&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Implementing a Domain Specific Embedded Language for lowest-order variational methods with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jean-marc-gratien/&#34; target=&#34;_blank&#34;&gt;Jean-Marc Gratien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/jmg_cppnow_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このペーパーでは、FreeFEM様のドメイン特化言語を用いて線型離散と双線型離散の定義を対象とする拡散問題を解くための最低次変分法族の原実装を示す。Boost Protoフレームワークの利用によって、この言語のバックエンドとフロントエンドをどう実装したかについて議論する。種々の学術的問題の実装を行なうことで、このDSEL設計を検証する。この言語のオーヴァーヘッドは従来の実装と比較することで評価する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp11-containers&#34; id=&#34;cpp11-containers&#34;&gt;C++11コンテナの最新情報&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What’s new with C++11 containers?&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/cppnow_containers.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11でピカピカのコンテナがいくつか導入された。すなわち、単方向リスト、ハッシュコンテナ、固定長同型コンテナ、そして異形コンテナである。しかしこれだけではない。前仕様C++98/03のコンテナも新しいメンバ関数の追加、ムーブのサポート、&#34;移動のみ&#34;のコンテナをつくれるように、&lt;code&gt;value_type&lt;/code&gt;に課されていた制限の緩和といった手直しがなされている。さあC++11のコンテナを有効利用する方法についてみていこう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#concept-clang&#34; id=&#34;concept-clang&#34;&gt;ConceptClang： C++ Conceptの実装モデル&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ConceptClang: An Implementation Model for C++ Concepts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrew-lumsdaine/&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;,&lt;a href=&#34;http://cppnow.org/participant/larisse-voufo/&#34; target=&#34;_blank&#34;&gt;Larisse Voufo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/concept_clang.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conceptはテンプレートに安全性を付与することを意図として、制約ベースのポリモルフィズムを行うために提案されたC++の拡張である。本プレゼンテーションではConceptClangを紹介する。これは、C族言語のLLVMフロントエンドであるClangをベースとする、Conceptデザインの検証を行うための基盤の実装例である。このプレゼンテーションでは、Conceptの提案された主要な機能(コンセプトに基づく探索、テンプレートのオーヴァーロード、テンプレートの拘束など)をどう実装したかについて述べるとともに、種々のConcept設計を深めていくために、ConceptClang基盤をいかに利用すればいいかについても示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#modern-cpp-techniques&#34; id=&#34;modern-cpp-techniques&#34;&gt;現代的C++テクニック入門&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Modern C++ Techniques&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/michael-caisse/&#34; target=&#34;_blank&#34;&gt;Michael Caisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/modern_cpp.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ポリシー、SFINAE、タグディスパッチ… ktkr! 現代的C++にノって弾みをつける準備はOK? Ciere C++ ニンジャシリーズから、このセッションでは基本的なことから、ジェネリックプログラミングで使われているテクニックやストラテジーを紹介する。このセッションで話すトピックは以下のとおり：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concept&lt;/li&gt;
&lt;li&gt;Trait&lt;/li&gt;
&lt;li&gt;ポリシークラス&lt;/li&gt;
&lt;li&gt;CRTP (Curiously Recurring Template Pattern)&lt;/li&gt;
&lt;li&gt;SFINAE (Substitution Failure is not an Error)&lt;/li&gt;
&lt;li&gt;タグディスパッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この3時間のハンズオンチュートリアルは例がびっしりの参加型セッションである。ノートPCを持参されたし! 日々のコーディングで現代的C++の技法を使いたい開発者には、きっと得るものがあるだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#smart-pointers-algorithm&#34; id=&#34;smart-pointers-algorithm&#34;&gt;C++11のスマートポインタとアルゴリズム&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 Smart Pointers and Algorithms&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/smart_pointers_algorithms.key?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++03で言うところのスマートポインタとは&lt;code&gt;auto_ptr&lt;/code&gt;だった。&lt;code&gt;auto_ptr&lt;/code&gt;は最良の型であり最悪の型である。このプレゼンテーションでは&lt;code&gt;auto_ptr&lt;/code&gt;がどのように&lt;code&gt;unique_ptr&lt;/code&gt;を触発したか、その違いはなにかについて説明する。&lt;code&gt;unique_ptr&lt;/code&gt;を比較対象として、&lt;code&gt;shared_ptr&lt;/code&gt;についても概説する。これらを使うべきときはいつか？ どちらのスマートポインタを使うべきか？&lt;/p&gt;
&lt;p&gt;加えて、このプレゼンテーションではC++11に新しく追加されたアルリズムについて、また、&lt;code&gt;unique_ptr&lt;/code&gt;のようなムーブのみ可能な型で動作するよう修正された多数の新旧アルゴリズムについても述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#voronoi&#34; id=&#34;voronoi&#34;&gt;Boost.Polygon.Voronoiライブラリを例に、堅牢かつ効率的多倍精度アルゴリズムの設計について&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Robust and efficient multi precision algorithms design based on Boost.Polygon.Voronoi library&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/andrii-sydorchuk/&#34; target=&#34;_blank&#34;&gt;Andrii Sydorchuk&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/lucanus-simonson/&#34; target=&#34;_blank&#34;&gt;Lucanus Simonson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/voronoi_presentation_andrii_sydorchuk.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複雑な数値計算アルゴリズムの設計と実装はユーザビリティ、拡張性、効率性、堅牢性という4つの要素を満たさねばならない。&lt;/p&gt;
&lt;p&gt;ユーザビリティとは、その分野に精通していないユーザーにとっての、公開されているアルゴリズムインターフェースのわかりやすさである。同時に、精通しているユーザーにとっての、アルゴリズムを構成できる幅のことでもある。&lt;/p&gt;
&lt;p&gt;拡張性とは、アルゴリズムそれ自身、依存するデータ構造、計算カーネル、数値型といった部分を再構成または置換する際、アルゴリズムに汎用性と柔軟性を持たせることである。&lt;/p&gt;
&lt;p&gt;効率性はまずアルゴリズムの複雑度とデータ構造の分析に始まり、メモリやパフォーマンスプロファイルを行い、システム/コンパイラ特異的な最適化に終わる。これには、数値型の操作および現実装と他のよく知られたアプローチとの比較も含まれる。&lt;/p&gt;
&lt;p&gt;堅牢性は数値アルゴリズムの最も重要な研究分野であろう。もし内部データ構造が実行時に破壊されたらどうなるか、という問いに対する答を用意しておくことである。アルゴリズムの出力と、出力がどの範囲で正常かつ信頼できるかを定義することでもある。言い変えれば、受けとった出力とランダムデータとの違いは何か、ということである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、アルゴリズムの動機となった実世界の問題を見ていきながらアルゴリズムを紹介する。Boost.Polygon.Voronoiライブラリで用いているアルゴリズム設計テクニックと実装をもとに、上記で言及した要素全てについて示す。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#tool-for-class-and-library-authors&#34; id=&#34;tool-for-class-and-library-authors&#34;&gt;C++11: クラスやライブラリ実装者のための新しいツール&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11: New Tools for Class and Library Authors&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/scott-schurr/&#34; target=&#34;_blank&#34;&gt;Scott Schurr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/wed/schurr_cpp11_tools_for_class_authors.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この新しい標準はクラスやライブラリ実装者のために、可変引数テンプレートや&lt;code&gt;static_assert&lt;/code&gt;、&lt;code&gt;constexpr&lt;/code&gt;、明示的な変換関数、および&lt;code&gt;decltype&lt;/code&gt;といった多数のツールが用意されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cmake-modularization&#34; id=&#34;cmake-modularization&#34;&gt;CMake、モジュール化と Ryppl 開発者向けプレヴュー&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CMake, Modularization and Ryppl Developer Preview&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rypplは、C++の開発や、構築、テストならびにBoostとそのユーザーの要求、すなわちC++コミュニティに合わせて設計された配信のための基盤フレームワークである。巨大化、複雑化、また潜在的にモジュール化がすすむBoostは、Rypplの完全なテストケースになりえる。このため我々は一年間、このコンセプトを証明するために必要なシステムと変更に取りくんできた。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、CMakeを使ってビルドおよびテストできるように、なにもインストールせずに配置できるように、またBuildBotを用いてリモートでビルド、テストできるようにするための、Boostのモジュール化にむけた作業の進捗について示す。BoostCon(訳註：C++Now2012のことか)が始まった時点で、Boost開発者に利用いただける、コミュニティ全体で予備的なレヴュー可能なシステムの機能を完全に揃えている予定である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#now-what&#34; id=&#34;now-what&#34;&gt;キーノート： さて、これからどうしよう？ 3つの視点から&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keynote: Now What? A vignette in 3 parts&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/now_what.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=iGenpw2NeKQ&amp;amp;feature=plcp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;パート1： 美しさ&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は効率性が要求されるところでは復権を果たした。しかし、C++へ移行してきた者に対して、いまだ多くの者が歓迎していない。これはJavaやJavaScript、Pythonからきたプログラマにとって移行の脅威になりえる。C++コミュニティとして、美しく、効率的なコードを書くための、C++11で提供されるツールを梃入れする必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート2： 真実&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今日のハードウェア上では、単一スレッドで実行されるC++コードではマシン性能のたった0.25%ほどしか引き出せない。C++11ではほんのちょっとだけスレッドサポートが解禁された。未来を見据える言語、ライブラリに課せられた最大の試練は、いかにマシン性能の残り99.75%を引き出すか、ということに尽きるだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;パート3： 美点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過剰なネットワークディヴァイスはソフトウェアの展望を変えつつある。インターネットの基盤は次第に裏方にまわり、増えつづける顧客はディヴァイス上にある情報を簡便に取得できるよう要求している。そのようなシステムが我々のソフトウェア設計と記述にどんな影響を与えるだろうか？この新しい世界におけるC++の果たす役割とは何だろうか。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#compile-time-reparsing&#34; id=&#34;compile-time-reparsing&#34;&gt;コンパイル時 &#39;再パース&#39;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compile-time ‘reparsing’&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/gordon-woodhull/&#34; target=&#34;_blank&#34;&gt;Gordon Woodhull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/gordon_woodhull_reparsing_2012.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コンパイラは今コードをパースしているとする。さて、その一部を再度パースしたいとしたらどうだろう？&lt;/p&gt;
&lt;p&gt;数年前から、ドメイン固有特化言語のためのメタプログラミングライブラリ群が提案され、ユーザーや特殊なライブラリアンはC++内に独自の言語を構築できるようになった。このようなユーザーやライブラリアンは皆、実行時表現のEric Niebler氏によるBoost.Protoに精通する必要がある。しかし、Ábel Sinkovic氏による、コンパイル時文字列パースのためのMetaparseや、&amp;lt;&amp;gt;表記をパースするための、プレゼンターが作成した&#34;とんがった(原：Angly)&#34;パーサもある。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら三つのライブラリを研究し、計算的に等価であることを(一方で、ドメインや表現力の違いについても)示す。コンピュータサイエンスの視点からは、これらライブラリは全てプッシュダウン・オートマトンである。ではなぜインターフェースがこうも違っているのだろう？対象ドメインの違いから生れるものなのか？それともライブラリ著者のバックグラウンドによるものなのか？&lt;/p&gt;
&lt;p&gt;また、コードをごらんいただきながら、これらのライブラリが実際にどのように動作するかごらんいただきたいと思う。このプレゼンテーションの大きな目的は、これらライブラリでどんなテクニックが一般的になっているか見ていくことと、共通のパターンがあるかどうか見ること、そして聴衆の皆様にメタプログラミングテクニックについて習熟していただくことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#type-string-conversions&#34; id=&#34;type-string-conversions&#34;&gt;型から文字列への変換と、その逆&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Type to string conversions, and vice-versa&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/jeroen-habraken/&#34; target=&#34;_blank&#34;&gt;Jeroen Habraken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/convert_types_to_strings.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=WLYcyu6mlgg&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、型から文字列への変換、またその逆に変換する際の、さまざまな選択肢について研究していく。古くは&lt;code&gt;atoi&lt;/code&gt;や&lt;code&gt;strtol&lt;/code&gt;から、真新しくは&lt;code&gt;std::stoi&lt;/code&gt;や、&lt;code&gt;boost::lexical_cast&lt;/code&gt;のようなBoostで提供されているものまで見る。これら選択肢のエラーハンドリングやフォールバック機構、localeサポートといった観点からみた利点と欠点についても研究する。&lt;/p&gt;
&lt;p&gt;利点と欠点を見ていただいた後は、それら利点と欠点をもとにGoogle Summer of Codeで作成したboost::coerceについて、現在の選択肢をどう補間するか紹介したい。このライブラリは速度や拡張性の面で優れている。このプレゼンテーションでは設計について概説し、またどう達成したかについて、使用法の豊富な例とともに紹介する。&lt;/p&gt;
&lt;p&gt;時間が許すなら、カスタマイズポイントやSpiritとの関連を見ていきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#cpp11-gems&#34; id=&#34;cpp11-gems&#34;&gt;C++11にある珠玉の品々&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Other C++11 Gems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/alisdair-meredith/&#34; target=&#34;_blank&#34;&gt;Alisdair Meredith&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/howard-hinnant/&#34; target=&#34;_blank&#34;&gt;Howard Hinnant&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jeff-garland/&#34; target=&#34;_blank&#34;&gt;Jeff Garland&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp11_allocators.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cpp_gems_garland_chrono_ratio.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非常に重要だが、それ単品では1セッションに満たないようなトピックについてとりあげる。GarlandとHinnantは&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;と&lt;code&gt;&amp;lt;ratio&amp;gt;&lt;/code&gt;から。またstateful allocatorとregexへのサポートについてもとりあげる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#linear-programming-proto&#34; id=&#34;linear-programming-proto&#34;&gt;Boost Protoで線型計画法を簡単に&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear programming made easy with Boost Proto&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/patrick-mihelich/&#34; target=&#34;_blank&#34;&gt;Patrick Mihelich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/linear_programming_proto.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オペレーションリサーチや金融、チップデザインに渡る分野の問題は、線型計画にモデル化できる。決定問題のための高度に汎用的で効率的なアルゴリズムがあるメソッドとして、線型計画法は有効なツールである。&lt;/p&gt;
&lt;p&gt;GLPKのような、線型計画を解くための強力なソフトウェアライブラリが存在するが、低レヴェルAPIが非常に使いにくいので、問題を一旦人が読みづらい形式に変換する必要がある。AMPLのようなモデリング言語を使えば、問題を容易に叙述的に表現できるが、汎用プログラミング言語としての力量と親和性が足りない。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは線型計画法を表現し解くための、Boost.Protoを用いたDSELであるCVX++を紹介する。Protoはどちらの世界、すなわちC++に組み込まれた叙述的プログラミングスタイルとして最高の役割を果たしてくれる。CVX++はGLPKをバックエンドソルバとして備え、Protoを用いて目的関数と制約をより機械が読みとりやすい表現に変換する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#solidfire&#34; id=&#34;solidfire&#34;&gt;SolidFireではC++11への移行をいかにして成しとげたか&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How we switched to C++11 at SolidFire and how it worked out&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/travis-gockel/&#34; target=&#34;_blank&#34;&gt;Travis Gockel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=43ej-H8yHWE&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプレゼンテーションでは、SolidFireのコードベースをC++03からC++11に移行する過程について、まず作業チームがワクワクするところから順に見ていく。正確性の検証やパフォーマンステストをどう行なったか、またそれとともに、C++03とC++11のどちらでも動作するコードをどう書いたらいいか紹介していくつもりだ(また、どうやって障害を迅速に乗り越えたかについても)。&lt;/p&gt;
&lt;p&gt;C++03/C++11開発で最初の月を越したころ、我々はよりよいコードを書くためにC++03コードベースのサポートを放棄した。このプレゼンテーションの第二部は、新しい標準によってもたらされる新しいコーディングスタイルについて述べる。また、それなしでは実装できなかったとんでもなくトリッキーなクラスや、可読性を上げるためにややトリッキーなことをしているクラスについても紹介する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#refactoring-clang&#34; id=&#34;refactoring-clang&#34;&gt;ClangでC++のリファクタリング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring C++ with Clang&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/chandler-carruth/&#34; target=&#34;_blank&#34;&gt;Chandler Carruth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/cxxnow2012_refactoring.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表ビデオ：&lt;a href=&#34;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=yuIOGfcOH0k&amp;amp;feature=plcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;十年来、C++開発者はJavaなどの言語が持っているツールをうらやましく思っていた。Clangでとうとう、我々は安全な自動変換を構築することができるほど簡便にC++コードの推論ができるようになる。このプレゼンテーションでは特殊なC++パターンの自動認識と変換をサポートする、Clang上に組まれた基盤について紹介する。また、古いAPIから新しい別のAPIへ更新するための、実際のソースコード変換ツールを実装するために必要な知識・技術についても示す。&lt;/p&gt;
&lt;p&gt;ライブラリの利用者が自身のコードを新しいAPIに置換するためのユーザー向けのスタンドアロンツールを組みあげることは、Boostのような広く利用されているライブラリでは非常に重要だが、C++11においては、新しい言語機能の利益を教授するために大量のインターフェースが更新されることになる。これらのインターフェースの採用を自動化することは、広く利用されているライブラリでは、長期にわたってサポートしなければならない非推奨APIの増加を抑える意味でも、急速な進歩をする上でも極めて重大なことである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#state-machine-coroutine&#34; id=&#34;state-machine-coroutine&#34;&gt;Boost.Coroutineを用いてステートマシンを解決する&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Boost.Coroutine to untangle a state machine&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/nat-goodspeed/&#34; target=&#34;_blank&#34;&gt;Nat Goodspeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/coroutine.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このセッションはイヴェント駆動型プログラムにおけるスタートアップのケーススタディである。このプログラムは外部サーバーへの一連のリクエストを生成し、それぞれ結果が返ってくるまで次のリクエストの生成を待機している。&lt;/p&gt;
&lt;p&gt;もともと、これはグローバルな&lt;code&gt;int&lt;/code&gt;状態変数を使って、巨大な&lt;code&gt;switch&lt;/code&gt;文として実装されていた。内在する関数はすべてのフレームで呼び出され、現在のステートロジックにジャンプし、結果を受けて状態を更新する。&lt;/p&gt;
&lt;p&gt;共同研究者がこれをBoost.Statechartを使って、ロジックをクラスのコレクションとして表現することで再実装した。&lt;/p&gt;
&lt;p&gt;どちらのケースでもロジックの構造は明確だった。実際の制御フローを解明するために、全てのコンポーネントの念入りな研究が必要だった。&lt;/p&gt;
&lt;p&gt;我々は同じロジックを、外部サーバーへのリクエストを結果が返ってくるまで待機する関数呼び出しとして表現するコルーチンとして再実装した。このような関数呼び出しはコルーチンだけを阻害する。すなわち、メインスタックの通常のフレーム毎の処理が継続する。実際のスタートアップ制御フローは、C++に精通していれば誰でも読める三重ループとして表現できる。さらに、メンテナンス(例えば、新しいリクエストを挿入するとか)は非常に容易である - これは前の実装ではとても言えなかったことであるが。&lt;/p&gt;
&lt;p&gt;このようなユースケースにおけるスレッドとコルーチンの対比を行う。&lt;/p&gt;
&lt;p&gt;coroutine オブジェクトの操作法について示す。&lt;/p&gt;
&lt;p&gt;Boost.Coroutineライブラリの微調整についても触れる。&lt;/p&gt;
&lt;p&gt;Boost.Contextがマージされたら、CoroutineをContextで再実装するつもりである。これこそまさにContextがサポートしようとしている種類のライブラリである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#metaprogramming-cpp11&#34; id=&#34;metaprogramming-cpp11&#34;&gt;C++11でのメタプログラミング&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming in C++11&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11で導入された新機能で、メタプログラマの世界は変化した。このプレゼンテーションでは、C++11メタプログラムをどう記述するかについての研究結果と、特にこの新しい言語にあわせたBoost.MPLの設計について述べる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#numerical-problems-metaprogramming&#34; id=&#34;numerical-problems-metaprogramming&#34;&gt;メタプログラミングの数学的問題への適用&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Metaprogramming Applied to Numerical Problems&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/karsten-ahnert/&#34; target=&#34;_blank&#34;&gt;Karsten Ahnert&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/mario-mulansky/&#34; target=&#34;_blank&#34;&gt;Mario Mulansky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/generic_stepper.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルンゲ=クッタ法と呼ばれるメソッドの高速かつ汎用的な実装をつくるために、現代的テンプレートメタプログラミングの手法をつかう。ルンゲ=クッタ法は常微分方程式(ODE: Ordinary Differential Equation)の初期値問題の近似解を探索する数値アルゴリズムである。常微分方程式を解くのは化学者、物理学者、生物学者にとっては日常のことである…&lt;/p&gt;
&lt;p&gt;今日、異なる一連のパラメータ値をとり、近似解の精度が違う、様々なルンゲ=クッタ法が存在する。そこで、これらのルンゲ=クッタ法を汎用的に実装し、テンプレートメタプログラミングを利用することで、非常に汎用的な実装であるにもかかわらず、非常に高いパフォーマンスを達成した。これは数値計算アルゴリズムの領域においてもテンプレートメタプログラミングの力を印象づける事例である。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#tr2-boost&#34; id=&#34;tr2-boost&#34;&gt;TR2に向けたBoostライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boosting Libraries for TR2&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/boosting_libraries_for_standardization.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++標準委員会のLibrary Working Group(LWG)は新しいライブラリの技術報告、TR2に向けたライブラリ提案を待っている。開発者以外の方でも、BoostライブラリをTR2に提案できる。&lt;/p&gt;
&lt;p&gt;このセッションはまず、TR2にBoost ライブラリをうまく提案し、委員会を通して提案を導いていく方法についてのチュートリアルから入る。話す予定のトピックは以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どうしてわざわざこんなことを - 経験から得られるもの&lt;/li&gt;
&lt;li&gt;標準化プロセスの概略&lt;/li&gt;
&lt;li&gt;提案募集&lt;/li&gt;
&lt;li&gt;委員会ウェブサイトの案内&lt;/li&gt;
&lt;li&gt;システム - 提案はどのようなものか、 いつどこで提出するのか&lt;/li&gt;
&lt;li&gt;初期の提案 - 何を詳細に見て、何を詳細に見るべきではないかについて - 演習つき&lt;/li&gt;
&lt;li&gt;提案の用語と標準の記述&lt;/li&gt;
&lt;li&gt;ドラフトとレヴューを手伝ってもらう&lt;/li&gt;
&lt;li&gt;提案提出 - のるかそるか&lt;/li&gt;
&lt;li&gt;委員会からのフィードバックへの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セッションの後ろ半分はTR2にむけて実際にBoostライブラリの提案を一緒にやるワークショップを開く。まず提案のテンプレートの空欄を埋めていくところから始める。このワークショップにはLWGメンバが何人かいらっしゃるので、彼らに助言をもらったり、意見を聞いたりするといいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#how-i-code-and-why&#34; id=&#34;how-i-code-and-why&#34;&gt;どうしてそう書くの？なんで？&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How I Code and Why&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/tony-van-eerd/&#34; target=&#34;_blank&#34;&gt;Tony Van Eerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/thu/how_i_code_and_why.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost委員会の方々(まだ未定。だが以前のBoostConで参加していただける旨をうかがった方の暫定リストはある)に、日々のコーディングで従っている原則について、なぜこの原則を適用していうのか、どのあたりに価値があると思っているかについて説明していただこうと思う。&lt;/p&gt;
&lt;p&gt;(例えば、私は、なぜ自分の好きなコミットワードが&#39;otherwise&#39;なのか、以前聞いたり読んだりされているかもしれないが、これに関連するどのようなアドヴァイスがあるか、この天啓に至った事件は何かを説明するつもりだ)
このプレゼンテーションの目的は、現実世界の話を時として書籍や講義で語られる高尚な理念に引き上げることである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#preparation-cppnow-2013&#34; id=&#34;preparation-cppnow-2013&#34;&gt;C++Now! 2013に向けた準備&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preparation of C++ Now! 2013&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来年の会合の準備委員会は早期に動きだす。提案があったり、支援していただける方はぜひご参加いただきたい。&lt;/p&gt;
&lt;h2&gt;&lt;a id=&#34;winrt&#34;&gt;WinRTにむけたC++コンポーネント拡張&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++ Component Extensions for WinRT&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/ale-contenti/&#34; target=&#34;_blank&#34;&gt;Ale Contenti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/master/fri/cpp_component_extensions_for_winrt_upload_version.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++は他のプログラミング言語やテクノロジー(例えば、 iOSのObjective-C、AndroidのJava、Windowsの.NETなど)を適用するプラットフォームにおいても活用されている。異種プログラミングプロジェクトがもたらす課題の一つに、C++の外部オブジェクトモデルとの結合という要求がある。CORBAやCOMといった既存の方法は一定の成功を収めているが、開発者は複雑性の増大というツケを払う羽目になる。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは、この問題に対処するために、Microsoftが取った二つのアプローチの詳細について述べる。最初のアプローチは、同じアプリケーションの中に、C++と非C++コンポーネント(外部オブジェクトモデル)が 混在するという複雑性に対処するためにC++抽象化レイヤを採用するというものである。この抽象化レイヤ(例えば Boostユーザーや開発者の方々にはおなじみの今日的C++テクニックをがっつり使ったWRLライブラリとか)はCOMコンポーネントの実装を単純化したが、このソリューションにある一般概念は他のいかなる異種混在環境においても拡張可能である。二つ目のアプローチは、異種言語で記述されたピア(訳註： 同格のコンポーネント)とやりとりするコンポーネントの宣言と定義ができるように、その構文にいくつかの拡張を追加して、C++自身の境界を押し上げることである。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションではこれら二つのアプローチについて、長所と短所、利点と注意事項についてそれぞれ説明していく。最後に、これらの設計が、C++の進化にとって潜在的にどのような影響を与えるかについてお話しする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#value-semantics&#34; id=&#34;value-semantics&#34;&gt;値のセマンティクスとConceptベースの多態&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Semantics and Concepts-based Polymorphism&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/sean-parent/&#34; target=&#34;_blank&#34;&gt;Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;https://github.com/boostcon/cppnow_presentations_2012/blob/355ac05d2937eea9b577b5a737b705b021b80045/fri/value_semantics/value_semantics.pdf?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プレゼンターであるSeanは先のキーノートの &lt;a href=&#34;#now-what&#34;&gt;&#34;Now What? A vignette in 3 parts.&#34;&lt;/a&gt; で話した値のセマンティクスとConceptベースの多態コンセプトについて、更に深めていくつもりである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#future-of-boost&#34; id=&#34;future-of-boost&#34;&gt;Boostの将来&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Future of Boost&lt;/li&gt;
&lt;li&gt;スピーカー：&lt;a href=&#34;http://cppnow.org/participant/beman-dawes/&#34; target=&#34;_blank&#34;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/dave-abrahams/&#34; target=&#34;_blank&#34;&gt;Dave Abrahams&lt;/a&gt;, &lt;a href=&#34;http://cppnow.org/participant/jon-kalb/&#34; target=&#34;_blank&#34;&gt;Jon Kalb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BoostとC++Now!の発起人であるお三方が将来について語り、どう考えているのかお答えする。&lt;/p&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi、zak、DigitalGhost&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #10 東京 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/study_meeting/study10.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:study_meeting/study10.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #10 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;p&gt;2012/07/28(土) 10:00 ～ 18:00&lt;/p&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IIJ本社 17F東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/info/map/head-office.html&#34; target=&#34;_blank&#34;&gt;http://www.iij.ad.jp/info/map/head-office.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/bd840b2e-77dc-4501-a765-cb581a90c165&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/13c26c3b-ada4-4f20-abaa-d154d677cad9&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #10 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タイムテーブル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00 - 10:10&lt;/td&gt;
&lt;td&gt;Boost.勉強会について&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:10 - 10:20&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.49.0～1.50.0&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:30 - 11:00&lt;/td&gt;
&lt;td&gt;C++Now! 2012参加レポート&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:20 - 11:40&lt;/td&gt;
&lt;td&gt;sexyhook 3の変更点&lt;/td&gt;
&lt;td&gt;@super_rti&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:40 - 13:00&lt;/td&gt;
&lt;td&gt;＜＜昼休み＞＞&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00 - 13:15&lt;/td&gt;
&lt;td&gt;万能数値型URR&lt;/td&gt;
&lt;td&gt;@wraith13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:30 - 14:00&lt;/td&gt;
&lt;td&gt;C++でエレガントな並列計算&lt;/td&gt;
&lt;td&gt;@ponkotuy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:20 - 15:00&lt;/td&gt;
&lt;td&gt;C++ Transactional Memory言語拡張の紹介&lt;/td&gt;
&lt;td&gt;@yohhoy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00 - 15:40&lt;/td&gt;
&lt;td&gt;家に帰るまでが遠足です&lt;/td&gt;
&lt;td&gt;@Cryolite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:00 - 18:00&lt;/td&gt;
&lt;td&gt;全員参加ディスカッション&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://live.streamingmedia.jp/boostjp/&#34; target=&#34;_blank&#34;&gt;http://live.streamingmedia.jp/boostjp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;misc.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Ag3bTfuU3UptdEpac0pZdXRSa0JMVm15cl9hOWJBa1E#gid=0&#34; target=&#34;_blank&#34;&gt;座席表&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boostライブラリ一周の旅 1.49.0-1.50.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋晶&lt;/li&gt;
&lt;li&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter : &lt;a href=&#34;https://twitter.com/#%21/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/cpp_akira&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost tour 1.50.0 diff [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1500&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;boost tour 1.50.0 all [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0_all.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/boost_tour_1_50_0_all.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1500-all&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++Now! 2012参加レポート&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋晶&lt;/li&gt;
&lt;li&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter : &lt;a href=&#34;https://twitter.com/#%21/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/cpp_akira&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： cppnow2012 [&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/cppnow2012.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropbox.com/u/1682460/presentation/boost_10/cppnow2012.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/c-now-2012-report&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120730/1343634476&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sexyhook 3の変更点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： rti&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/rti7743/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/rti7743/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/super_rti&#34; target=&#34;_blank&#34;&gt;http://twitter.com/super_rti&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： &lt;a href=&#34;http://prezi.com/ylkpa-fkbnjx/sexyhook3/&#34; target=&#34;_blank&#34;&gt;http://prezi.com/ylkpa-fkbnjx/sexyhook3/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;万能数値型URR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 道化師&lt;/li&gt;
&lt;li&gt;Twitter ： &lt;a href=&#34;http://twitter.com/wraith13&#34; target=&#34;_blank&#34;&gt;http://twitter.com/wraith13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++でエレガントな並列計算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： ponkotuy&lt;/li&gt;
&lt;li&gt;サイト： &lt;a href=&#34;http://ponkotuy.com/&#34; target=&#34;_blank&#34;&gt;http://ponkotuy.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/ponkotuy&#34; target=&#34;_blank&#34;&gt;http://twitter.com/ponkotuy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;https://bitbucket.org/ponkotuy/vector/src/80134e82bc82/Slide/main.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://bitbucket.org/ponkotuy/vector&#34; target=&#34;_blank&#34;&gt;bitbucket&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++ Transactional Memory言語拡張の紹介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： yohhoy&lt;/li&gt;
&lt;li&gt;ブログ： &lt;a href=&#34;http://d.hatena.ne.jp/yohhoy/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/yohhoy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/yohhoy&#34; target=&#34;_blank&#34;&gt;http://twitter.com/yohhoy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;https://raw.githubusercontent.com/yohhoy/docs/master/boostjp10_tm_20120728.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://www.scribd.com/doc/101230860/boostjp10-tm-20120728&#34; target=&#34;_blank&#34;&gt;scribd&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア： &lt;a href=&#34;http://yohhoy.hatenablog.jp/entries/2012/07/29&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;家に帰るまでが遠足です&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： Cryolite&lt;/li&gt;
&lt;li&gt;ブログ： &lt;a href=&#34;http://d.hatena.ne.jp/Cryolite/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/Cryolite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter： &lt;a href=&#34;http://twitter.com/Cryolite&#34; target=&#34;_blank&#34;&gt;http://twitter.com/Cryolite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料： [&lt;a href=&#34;http://www.slideshare.net/Cryolite/ss-13792596&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全員参加ディスカッション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.activebasic.com/egtra/2012/07/29/503/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 ディスカッションでイベント処理をやっていたグループのまとめ - イグトランスの頭の中(のかけら)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20120730/1343627128&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20120730/1343634476&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120731/1343713578&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 のディスカッションのまとめメモ - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/Sigureya/boost-10-13861431&#34; target=&#34;_blank&#34;&gt;ディスカッション資料まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731094237.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731094135.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093951.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093850.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093625.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093430.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093345.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093252.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093126.jpg&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;266&#34; src=&#34;http://cdn-ak.f.st-hatena.com/images/fotolife/S/Sigureya/20120731/20120731093010.jpg&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20120728/1343487500&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 - 永遠に未完成&lt;/a&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20120728/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m_xor/20120728/1343486815&#34; target=&#34;_blank&#34;&gt;Boost勉強会#10 - exclusive or（排他的論理和）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohhoy.hatenablog.jp/entries/2012/07/29&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Sigureya/20120729/1343534320&#34; target=&#34;_blank&#34;&gt;boost勉強会 #10 - C++黒魔術書の切れ端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.activebasic.com/egtra/2012/07/29/503/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 ディスカッションでイベント処理をやっていたグループのまとめ - イグトランスの頭の中(のかけら)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sharkpp.net/blog/2012/07/30/boost-workshop-10-in-tokyo.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 東京 に参加しました - Shark++ Software&#39;s Web Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120729/1343533783&#34; target=&#34;_blank&#34;&gt;C++Now! 2013 に行きたい - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20120730/1343627128&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 に参加しました - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/jyample/20120731/1343713578&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 のディスカッションのまとめメモ - どらの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/346641&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #10 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #12 大阪 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/study_meeting/study12.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:study_meeting/study12.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #12 大阪&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2013/06/22(土) 11:00～17:30&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大阪電気通信大学　駅前キャンパス　601（小ホール）&lt;/li&gt;
&lt;li&gt;大阪府寝屋川市早子町12-16&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/cb6309e7-67ad-41fe-8a99-302badbc5633&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/2b4812e6-5902-4ee2-833b-a3aea8c91b6c#&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #12 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催&amp;amp;スタッフ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主催者： 遥佐保(&lt;a href=&#34;https://twitter.com/hr_sao&#34; target=&#34;_blank&#34;&gt;@hr_sao&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;お手伝い： 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:30～&lt;/td&gt;
&lt;td&gt;開場&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:45～&lt;/td&gt;
&lt;td&gt;ご挨拶&lt;/td&gt;
&lt;td&gt;hr_sao&lt;br /&gt; 大阪電気通信大学 総合情報学部 情報学科　大西克彦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:10〜&lt;/td&gt;
&lt;td&gt;C++で作るWEBアプリケーション&lt;/td&gt;
&lt;td&gt;fadis_&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:50〜&lt;/td&gt;
&lt;td&gt;C++初心者のためのBoost.MPL入門&lt;/td&gt;
&lt;td&gt;suibaka&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:15〜&lt;/td&gt;
&lt;td&gt;Boost.Contractについて&lt;/td&gt;
&lt;td&gt;uskz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:15〜&lt;/td&gt;
&lt;td&gt;Allocators@C++11&lt;/td&gt;
&lt;td&gt;Cryolite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:10〜&lt;/td&gt;
&lt;td&gt;constexpr中３女子テクニック―実践と濫用そしてC++14へ&lt;/td&gt;
&lt;td&gt;bolero_MURAKAMI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:10〜&lt;/td&gt;
&lt;td&gt;君はまだ、本当のプリプロセスを知らない&lt;/td&gt;
&lt;td&gt;decimalbloat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:50〜&lt;/td&gt;
&lt;td&gt;C++コミュニティを作る&lt;/td&gt;
&lt;td&gt;cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:25〜&lt;/td&gt;
&lt;td&gt;おたのしみセッション&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;座席表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sekico.co/zaseki/154&#34; target=&#34;_blank&#34;&gt;http://sekico.co/zaseki/154&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ustream.tv/channel/boost-%E5%8B%89%E5%BC%B7%E4%BC%9A%E5%A4%A7%E9%98%AA&#34; target=&#34;_blank&#34;&gt;http://www.ustream.tv/channel/boost-勉強会大阪&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;C++で作るWEBアプリケーション&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : Naomasa Matsubayashi&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/fadis_&#34; target=&#34;_blank&#34;&gt;https://twitter.com/fadis_&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++をJavaScriptにコンパイルするコンパイラ、Emscriptenを使ってWEBブラウザで動くアプリケーションをC++で作る方法を紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;https://speakerdeck.com/fadis/c-plus-plus-dezuo-ruwebapurikesiyon&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/fadis/cweb-23287589&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://www41050u.sakura.ne.jp/blog/index.php?/archives/7-Boost.-12.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12に行ってきた - Fadisのノート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++初心者のためのBoost.MPL入門&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : すいかばー&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/suibaka&#34; target=&#34;_blank&#34;&gt;https://twitter.com/suibaka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;古くからあるBoost.MPL&lt;/p&gt;
&lt;p&gt;じつはまだ使ったことがないという方もいるのでは無いでしょうか&lt;/p&gt;
&lt;p&gt;今回のセッションではその基本的な使い方をMPLを使ったことがない人向けに紹介します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/Suikaba/try-to-use-boostmpl&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/Suikaba/try-to-use-boostmpl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://suikaba.hatenablog.com/entry/2013/06/23/004204&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪に行って来ました - 冬でもスイカバーが食べたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Contractについて&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : uskz&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/uskz&#34; target=&#34;_blank&#34;&gt;https://twitter.com/uskz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昨年BoostにacceptされたBoost.Contractの使い方について話します&lt;/p&gt;
&lt;h3&gt;boost.multiprecisionと適応型無誤差演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者：oniprog&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/oniprog&#34; target=&#34;_blank&#34;&gt;https://twitter.com/oniprog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無誤差演算の必要性についてと，その欠点の克服法について話します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://ohkuma.mydns.jp/homepage/tech/boost/boost_presen/Ohkuma_boost1.pdf&#34; target=&#34;_blank&#34;&gt;http://ohkuma.mydns.jp/homepage/tech/boost/boost_presen/Ohkuma_boost1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表練習動画：&lt;a href=&#34;http://www.youtube.com/watch?v=OCkqGOLXEa8&#34; target=&#34;_blank&#34;&gt;http://www.youtube.com/watch?v=OCkqGOLXEa8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Allocators@C++11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : Cryolite&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/Cryolite&#34; target=&#34;_blank&#34;&gt;https://twitter.com/Cryolite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;西暦2013年，人類は未曽有の危機にさらされていた．&lt;/p&gt;
&lt;p&gt;vectorに対し，各string要素のallocatorをカスタマイズすることは困難を極め，メモリ領域は分断さ（以下略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/Cryolite/allocator11final&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/Cryolite/allocator11final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;constexpr中３女子テクニック―実践と濫用そしてC++14へ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : ボレロ村上&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/bolero_MURAKAMI&#34; target=&#34;_blank&#34;&gt;https://twitter.com/bolero_MURAKAMI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11のconstexprでコンパイル時アルゴリズムを実装する上での諸問題とその解決、音声合成などの濫用例、またC++14でconstexprがどのように応用されたり実装が楽になるかの紹介です&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/GenyaMurakami/constexpr-23355469&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/GenyaMurakami/constexpr-23355469&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;君はまだ、本当のプリプロセスを知らない&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : DigitalGhost&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/decimalbloat&#34; target=&#34;_blank&#34;&gt;https://twitter.com/decimalbloat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;世間では邪悪だのオワコンだの言われているCプリプロセッサ&lt;/p&gt;
&lt;p&gt;その真の実力に迫るべく，Strong Typedefの実装に挑んだ話をします&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：&lt;a href=&#34;http://www.slideshare.net/digitalghost/ss-23314487&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/digitalghost/ss-23314487&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++コミュニティを作る&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : 高橋 晶&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;https://twitter.com/cpp_akira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本家のC++コミュニティ、他の国でのC++コミュニティ、そして日本のC++コミュニティの今と未来について話します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料：[&lt;a href=&#34;https://dl.dropboxusercontent.com/u/1682460/presentation/boost_12/development_cpp_community.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://dl.dropboxusercontent.com/u/1682460/presentation/boost_12/development_cpp_community.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/development-c-community-23330248&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130625/1372152906&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪でした。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/522537&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 - Togetter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tylg-linux.blogspot.jp/2013/06/boost-12.html&#34; target=&#34;_blank&#34;&gt;気まぐれLinux: Boost.勉強会 #12 大阪に参加してみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suikaba.hatenablog.com/entry/2013/06/23/004204&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪に行って来ました - 冬でもスイカバーが食べたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www41050u.sakura.ne.jp/blog/index.php?/archives/7-Boost.-12.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12に行ってきた - Fadisのノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130625/1372152906&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #12 大阪でした。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://srz-zumix.blogspot.jp/2013/06/boost-12.html&#34; target=&#34;_blank&#34;&gt;ブログズミ: 「Boost.勉強会 #12 大阪」に参加してきました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/tt_clown/20130630/continuous_community&#34; target=&#34;_blank&#34;&gt;コミュニティを持続・活性化させるために - Life Like a clown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://niche-prg-smith.hatenablog.com/entry/2013/07/03/000156&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 にいってきた - 躓いて１マス進む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;写真&lt;/h3&gt;
&lt;p&gt;※写真に写って困る方がいらっしゃいましたら、主催者かスタッフまでご連絡ください。削除対応いたします。&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00123.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00124.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00125.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00126.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00127.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00128.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00129.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00130.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00131.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00132.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00133.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00134.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00135.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00136.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00137.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00138.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00139.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00140.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00141.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00142.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00143.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00144.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00145.JPG&#34; width=&#34;400&#34; /&gt;
&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/boostjp/study12/master/image/DSC00146.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #14 東京 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/study_meeting/study14.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:study_meeting/study14.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #14 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2014/03/01(土) 10:00～&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IJ本社 17F&lt;/li&gt;
&lt;li&gt;東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/info/map/head-office.html&#34; target=&#34;_blank&#34;&gt;http://www.iij.ad.jp/info/map/head-office.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/47238&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京 - ATND&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/47550&#34; target=&#34;_blank&#34;&gt;Boost.懇親会 #14 - ATND&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主催&amp;amp;スタッフ&lt;/h2&gt;
&lt;p&gt;主催者： 高橋 晶(@cpp_akira)&lt;/p&gt;
&lt;h2&gt;タイムテーブル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;担当者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00-10:10&lt;/td&gt;
&lt;td&gt;Boost.勉強会について&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:10-10:40&lt;/td&gt;
&lt;td&gt;cpprefjpを支える技術&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;br /&gt; @melponn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00-11:30&lt;/td&gt;
&lt;td&gt;魔導書発売記念：GPGPUの今とこれから&lt;/td&gt;
&lt;td&gt;@fjnli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:30-13:00&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00-13:30&lt;/td&gt;
&lt;td&gt;いつからFIFOがスケールしないと錯覚していた？&lt;/td&gt;
&lt;td&gt;@kumagi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:50-14:20&lt;/td&gt;
&lt;td&gt;glfw3 OpenGL を使ったGUI フレームワーク&lt;/td&gt;
&lt;td&gt;@hira_kuni_45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:40-15:10&lt;/td&gt;
&lt;td&gt;データサイエンスワールドからC++を眺めてみる&lt;/td&gt;
&lt;td&gt;@sfchaos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:30-16:30&lt;/td&gt;
&lt;td&gt;C#や.NET Frameworkがやっていること&lt;/td&gt;
&lt;td&gt;@ufcpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:50-17:20&lt;/td&gt;
&lt;td&gt;新しい並列for構文のご提案&lt;/td&gt;
&lt;td&gt;@yohhoy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:30-18:00&lt;/td&gt;
&lt;td&gt;Boost.Graphの設計と、最短経路アルゴリズムの使い方いろいろ&lt;/td&gt;
&lt;td&gt;@cpp_akira&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ustream.tv/channel/fadis/theater&#34; target=&#34;_blank&#34;&gt;Fadis LIVE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boost.勉強会について&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/faithandbrave/booststudy-14-opening&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cpprefjpを支える技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)、めるぽん(&lt;a href=&#34;https://twitter.com/melponn&#34; target=&#34;_blank&#34;&gt;@melponn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://melpon.org/pub/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjpを支える技術&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44340485&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Graphの設計と、最短経路アルゴリズムの使い方いろいろ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: 高橋晶(&lt;a href=&#34;https://twitter.com/cpp_akira&#34; target=&#34;_blank&#34;&gt;@cpp_akira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/faithandbrave/bgl-design-and-shortest-path&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44341443&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アフターケア：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/03/03/172342&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京を開催しました。 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;いつからFIFOがスケールしないと錯覚していた？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/kumagi&#34; target=&#34;_blank&#34;&gt;@kumagi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideboom.com/presentations/938907/%E3%81%84%E3%81%A4%E3%81%8B%E3%82%89FIFO%E3%81%8C%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%84%E3%81%A8%E9%8C%AF%E8%A6%9A%E3%81%97%E3%81%A6%E3%81%84%E3%81%9F&#34; target=&#34;_blank&#34;&gt;slideboom&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44346151&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;glfw3 OpenGL を使ったGUI フレームワーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/hira_kuni_45&#34; target=&#34;_blank&#34;&gt;@hira_kuni_45&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/hira_kuni_45/glfw3-opengl&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44347324&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;データサイエンスワールドからC++を眺めてみる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/sfchaos&#34; target=&#34;_blank&#34;&gt;@sfchaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/sfchaos/c-31786840&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44348631&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C#や.NET Frameworkがやっていること&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/ufcpp&#34; target=&#34;_blank&#34;&gt;@ufcpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/ufcpp/cnet-framework&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44349775&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アフターケア：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ufcpp.wordpress.com/2014/03/02/c%E3%82%84net%E3%81%8C%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8/&#34; target=&#34;_blank&#34;&gt;C#や.NETがやっていること - ++C++; // 未確認飛行 C ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;新しい並列for構文のご提案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;発表者: &lt;a href=&#34;https://twitter.com/yohhoy&#34; target=&#34;_blank&#34;&gt;@yohhoy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料: [&lt;a href=&#34;https://raw.githubusercontent.com/yohhoy/docs/master/boostjp14_parfor_20140301.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;] [&lt;a href=&#34;http://www.slideshare.net/yohhoy/boostjp14-parfor-20140301-31781446&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44351995&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yohhoy.hatenablog.jp/entry/2014/03/02/143031&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14に参加しました - yohhoyの日記（別館）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;魔導書発売記念：GPGPUの今とこれから&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者: &lt;a href=&#34;https://twitter.com/fjnli&#34; target=&#34;_blank&#34;&gt;@fjnli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;資料: [&lt;a href=&#34;http://www.slideshare.net/fjnl/boost-study14&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;] [&lt;a href=&#34;http://www.ustream.tv/recorded/44352754&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/636213&#34; target=&#34;_blank&#34;&gt;boost.勉強会 #14 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20140301/1393685983&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#14 に行ってきた - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://goyoki.hatenablog.com/entry/2014/03/02/023758&#34; target=&#34;_blank&#34;&gt;Boost.Graphでの最短経路探索 - 千里霧中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.harapeko.jp/trac/original/ideanote/wiki/HowTo/BoostStudy14&#34; target=&#34;_blank&#34;&gt;HowTo/BoostStudy14 – Idea note&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/T_MURACHI/status/439687932140457985&#34; target=&#34;_blank&#34;&gt;@T_MURACHI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20140301/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 東京 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://locaq.hatenablog.com/entry/2014/03/03/222520&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#14東京に参加してきました - locablo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.harapeko.jp/2014/03/04/boost-study-1/&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #14 に行ってきました - はらぺこ日誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/n-trino/20140305&#34; target=&#34;_blank&#34;&gt;知識を得るには外に出ましょう - trinoの走り書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;写真&lt;/h2&gt;
&lt;p&gt;※写真に写って困る方がいらっしゃいましたら、主催者かスタッフまでご連絡ください。削除対応いたします。&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0324.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0325.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0337.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0340.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0344.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0348.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0349.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0350.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&#34;0&#34; height=&#34;300&#34; src=&#34;../static/image/study_meeting/study14/DSC_0352.JPG&#34; width=&#34;400&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.勉強会 #7 東京 -- imageリポジトリの画像URLを標準化</title>
      <link href="https://boostjp.github.io/study_meeting/study7.html"/>
      <id>d155fa109c7987f0f8a699e9a2f41153d327e1e0:study_meeting/study7.md</id>
      <updated>2022-06-06T08:47:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost.勉強会 #7 東京&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;p&gt;2011/12/03(土) 10:00～18:00&lt;/p&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IIJ本社&lt;/li&gt;
&lt;li&gt;東京都千代田区神田神保町1-105&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/a85f6ec3-95c4-40ee-8308-a5746c6277d4&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 東京 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://partake.in/events/ebfe31c2-9424-4d74-9b91-fc52bf95f69f&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2011 - PARTAKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;タイムテーブル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;発表タイトル&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10:00～10:30&lt;/td&gt;
&lt;td&gt;Boost C++ Librariesの概要&lt;/td&gt;
&lt;td&gt;高橋 晶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10:30～10:45&lt;/td&gt;
&lt;td&gt;Boostライブラリ一周の旅 1.45.0～1.48.0&lt;/td&gt;
&lt;td&gt;高橋 晶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00～11:45&lt;/td&gt;
&lt;td&gt;clangで入門 解析戦略ー&lt;/td&gt;
&lt;td&gt;fjnli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:45～12:00&lt;/td&gt;
&lt;td&gt;C++ Tips 2 後置インクリメント他&lt;/td&gt;
&lt;td&gt;道化師&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;昼休み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00～13:45&lt;/td&gt;
&lt;td&gt;統計解析言語Rにおける大規模データ管理のためのBoost.Interprocessの活用&lt;/td&gt;
&lt;td&gt;sfchaos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00～14:45&lt;/td&gt;
&lt;td&gt;Introduction to Boost.B-tree&lt;/td&gt;
&lt;td&gt;eldesh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00～15:15&lt;/td&gt;
&lt;td&gt;C++コンパイラ GCCとClangからのメッセージをお読みください&lt;/td&gt;
&lt;td&gt;DigitalGhost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:25～16:10&lt;/td&gt;
&lt;td&gt;Boost.Intervalで区間演算&lt;/td&gt;
&lt;td&gt;pepshiso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:25～17:10&lt;/td&gt;
&lt;td&gt;中3女子でもわかるconstexpr&lt;/td&gt;
&lt;td&gt;bolero_MURAKAMI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:10～18:00&lt;/td&gt;
&lt;td&gt;サプライズ枠&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://live.streamingmedia.jp/boostjp/&#34; target=&#34;_blank&#34;&gt;http://live.streamingmedia.jp/boostjp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;座席表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0Am0Htj_Q-a0DdHhZek1aV0R1dU5IZUtDNWFkSVpHTFE&amp;amp;hl=ja#gid=0&#34; target=&#34;_blank&#34;&gt;座席表 - GoogleDocs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;Boost C++ Librariesの概要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋 晶&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： boost overview [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_overview.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_overview.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-overview&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20111205/1323078372&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boostライブラリ一周の旅 1.48.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 高橋 晶&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サイト ： &lt;a href=&#34;https://sites.google.com/site/faithandbrave/about&#34; target=&#34;_blank&#34;&gt;https://sites.google.com/site/faithandbrave/about&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost tour 1.48.0 diff [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1480-diff&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;boost tour 1.48.0 all [&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0_all.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://dl.dropbox.com/u/1682460/presentation/boost_7/boost_tour_1_48_0_all.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/faithandbrave/boost-tour-1480-all&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;clangで入門 解析戦略ー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： fjnli&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/fjnl/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/fjnl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/fjnli&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/fjnli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;https://raw.githubusercontent.com/fjnl/boost-study-7-Tokyo/master/sheet.pdf&#34; target=&#34;_blank&#34;&gt;https://raw.githubusercontent.com/fjnl/boost-study-7-Tokyo/master/sheet.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++ Tips 2 インクリメント&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： 道化師&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/wraith13/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/wraith13/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/wraith13&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/wraith13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： cxx-tips2 [&lt;a href=&#34;http://www.trickpalace.net/paper/cxxtips2.pdf&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;http://www.trickpalace.net/paper/cxxtips2.pptx&#34; target=&#34;_blank&#34;&gt;pptx&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/wraith13/c-tips2&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;統計解析言語Rにおける大規模データ管理のためのBoost.Interprocessの活用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： sfchaos&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/sfchaos/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/sfchaos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;https://twitter.com/#%21/sfchaos&#34; target=&#34;_blank&#34;&gt;https://twitter.com/#!/sfchaos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： [&lt;a href=&#34;http://www.slideshare.net/sfchaos/rboostinterprocess&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Introduction to Boost.B-tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： Eldesh&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/eldesh/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/eldesh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/eldesh&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/eldesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： boost-btree-introduction [&lt;a href=&#34;http://goo.gl/yaUwI&#34; target=&#34;_blank&#34;&gt;google docs&lt;/a&gt;][&lt;a href=&#34;http://www.slideshare.net/eldesh/boost-btree-introduction&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Boost.Btree GitHubリポジトリ ： &lt;a href=&#34;https://github.com/Beman/Boost-Btree&#34; target=&#34;_blank&#34;&gt;https://github.com/Beman/Boost-Btree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/eldesh/20111205/1323050181&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7で発表してきた - ::Eldesh a b = LEFT a | RIGHT b&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;中３女子でもわかるconstexpr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： ボレロ村上&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/boleros/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/boleros/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/bolero_MURAKAMI&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/bolero_MURAKAMI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;http://www.slideshare.net/GenyaMurakami/constexpr-10458089&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++コンパイラ GCCとClangからのメッセージをお読みください&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： DigitalGhost&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/DigitalGhost/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/DigitalGhost/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/decimalbloat&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/decimalbloat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： &lt;a href=&#34;http://www.slideshare.net/digitalghost/bbk7&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Intervalで区間演算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： pepshiso&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/pepshiso/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/pepshiso/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/pepshiso&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/pepshiso&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： BoostInterval [&lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=sites&amp;amp;srcid=ZGVmYXVsdGRvbWFpbnxwZXBzaGlzbzl8Z3g6NmZlZjUxMTY3Y2M4NmY3OA&#34; target=&#34;_blank&#34;&gt;pdf&lt;/a&gt;][&lt;a href=&#34;https://sites.google.com/site/pepshiso9/home/boostinterval/BoostInterval.key?attredirects=0&#34; target=&#34;_blank&#34;&gt;keynote&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++03からの標準ライブラリの変更点について&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： melpon&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/melpon/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/melpon/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/melponn&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/melponn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boost.Interprocess さらっと紹介して逃げる&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 ： krustf&lt;/li&gt;
&lt;li&gt;ブログ ： &lt;a href=&#34;http://d.hatena.ne.jp/krustf/&#34; target=&#34;_blank&#34;&gt;http://d.hatena.ne.jp/krustf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Twitter ： &lt;a href=&#34;http://twitter.com/#%21/krustf&#34; target=&#34;_blank&#34;&gt;http://twitter.com/#!/krustf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;発表資料 ： Boost.Interprocess [&lt;a href=&#34;http://www.slideshare.net/krustf/boostinterprocess-10461625&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;アフターケア ： &lt;a href=&#34;http://d.hatena.ne.jp/krustf/20111205/1323060511&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきました。発表してしまいました。 - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/alwei/20111204/1323016765&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7 東京に参加してきた - Ideals and Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/rti7743/20111204/1323005129&#34; target=&#34;_blank&#34;&gt;boost勉強会/忘年会に参加してきました。朝まで。 - お前の血は何色だ!! 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://3dassociates.wordpress.com/2011/12/04/boost%E5%8B%89%E5%BC%B7%E4%BC%9A%E5%87%BA%E5%B8%AD%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/&#34; target=&#34;_blank&#34;&gt;boost勉強会出席してきました - 3D ASSOCIATES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/eldesh/20111205/1323050181&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#7で発表してきた - ::Eldesh a b = LEFT a | RIGHT b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/redboltz/20111204/1322998608&#34; target=&#34;_blank&#34;&gt;Boost勉強会#7に参加してきた - redboltzの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nokuno/20111203/1322902513&#34; target=&#34;_blank&#34;&gt;boost勉強会 #7 に参加しました #boostjp - nokunoの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20111203/1322902692&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきた - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20111203/p1&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 東京 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/krustf/20111205/1323060511&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 に行ってきました。発表してしまいました。 - krustf の雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20111205/1323078372&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7を開催しました - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/RiSK/20111206/1323137083&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 - 危ないRiSKのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/222760&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #7 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/222769&#34; target=&#34;_blank&#34;&gt;Boost.忘年会 2011 - togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.85.0リリースノート -- リンク修正</title>
      <link href="https://boostjp.github.io/document/version/1_85_0.html"/>
      <id>66b1a909c444de234901b4ca402348991a948ef6:document/version/1_85_0.md</id>
      <updated>2024-04-16T11:36:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.85.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_85_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_85_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_85_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_85_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/charconv&#34; target=&#34;_blank&#34;&gt;CharConv&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11での&lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt;の高品質な実装 (作者Matt Borland氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/scope&#34; target=&#34;_blank&#34;&gt;Scope&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Scope Guardユーティリティと&lt;code&gt;unique_resource&lt;/code&gt;ラッパーのコレクション (作者Andrey Semashev氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bind&#34;&gt;Bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#msm&#34;&gt;MSM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multi_index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pfr&#34;&gt;PFR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#asio&#34; id=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;左辺値修飾された完了シグネチャを正しく処理するために、&lt;code&gt;async_result&lt;/code&gt;プライマリテンプレートのコンセプトチェックを修正&lt;/li&gt;
&lt;li&gt;完了トークンアダプタ&lt;code&gt;bind_allocator&lt;/code&gt;、&lt;code&gt;bind_executor&lt;/code&gt;、&lt;code&gt;bind_immediate_executor&lt;/code&gt;、&lt;code&gt;bind_cancellation_slot&lt;/code&gt;を使用して互いをアダプトさせる際に発生する可能性があるいくつかのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;experimental::ranged_parallel_group&lt;/code&gt;操作を変更し、完了ハンドラを呼び出す際に&lt;code&gt;completion_order&lt;/code&gt; vectorをムーブするようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver_query&lt;/code&gt;、&lt;code&gt;io_context::strand&lt;/code&gt;、&lt;code&gt;coroutine&lt;/code&gt;で非推奨の暗黙のコピーコンストラクタに関する警告を修正&lt;/li&gt;
&lt;li&gt;Winsockの初期化に使用されるバージョン指定を更新&lt;/li&gt;
&lt;li&gt;キャンセルによって発生した例外を完了ハンドラに正しく伝播するように&lt;code&gt;co_spawn&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awaitable&amp;lt;&amp;gt;&lt;/code&gt;の内部ストレージにおける未定義の動作を修正するために、&lt;code&gt;std::launder&lt;/code&gt;の呼び出しを追加&lt;/li&gt;
&lt;li&gt;Windowsのファイルサポートの実装において、&lt;code&gt;file_base::append&lt;/code&gt;フラグの処理が欠落していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ioctl&lt;/code&gt;の呼び出しが失敗した場合、ソケットとディスクリプタの実装を更新し、&lt;code&gt;fcntl&lt;/code&gt;にフォールバックするケースを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/asio/experimental/parallel_group.hpp&lt;/code&gt;ヘッダが自己完結するように修正&lt;/li&gt;
&lt;li&gt;channelと&lt;code&gt;experimental::coro&lt;/code&gt;が同じ翻訳単位で使用された場合に発生していたコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;ドキュメントに欠落していたCancellationSlotの型要件を追加&lt;/li&gt;
&lt;li&gt;非同期操作の開始関数の推定戻り値型に対するドキュメントのハイパーリンクを修正&lt;/li&gt;
&lt;li&gt;その他の小さなドキュメント更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/atomic/pull/65&#34; target=&#34;_blank&#34;&gt;GitHub #65&lt;/a&gt; RISC-Vで&lt;code&gt;pause&lt;/code&gt;命令のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API変更&lt;ul&gt;
&lt;li&gt;ステータスコードのリストを、IANAレジストリに準拠するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffers_cat.hpp&lt;/code&gt; での到達不能コードの警告を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;websocker_server_awaitable&lt;/code&gt; サンプルコードの接続エラー処理を修正&lt;/li&gt;
&lt;li&gt;高度なサーバーのサンプルコードにおける &lt;code&gt;async_write&lt;/code&gt; の並行呼び出しを修正&lt;/li&gt;
&lt;li&gt;zlib 名が minizip と競合する問題を修正&lt;/li&gt;
&lt;li&gt;ホスト文字列が &lt;code&gt;SSL_set_tlsext_host_name()&lt;/code&gt; 呼び出しのあとに更新されるべきであった問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asio::associator&lt;/code&gt; の &lt;code&gt;bind_wrapper&lt;/code&gt; と &lt;code&gt;bind_front_wrapper&lt;/code&gt; 向け特殊化を追加&lt;/li&gt;
&lt;li&gt;error categoryのmessage関数に、アロケータを指定しないオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http::message::prepare_payload()&lt;/code&gt; は、必要がなければ呼び出さなくてよいと規定した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_stream::expires_after()&lt;/code&gt; の影響を受ける操作を記載&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teardown()&lt;/code&gt; と &lt;code&gt;async_teardown()&lt;/code&gt; はカスタマイズポイントであることを記載&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::serializer&lt;/code&gt; の最初の使用後にムーブまたはコピーすることは未定義動作であることを記載&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebSocket::permessage_deflate&lt;/code&gt; は WebSocket ハンドシェイクを行う前に設定すべきであることを記載&lt;/li&gt;
&lt;li&gt;http read 操作の &lt;code&gt;bytes_transferred&lt;/code&gt; は HTTP パーサーが消費したバイト数を報告することを記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;謝辞&lt;ul&gt;
&lt;li&gt;Emile Cormier, JohannesWilde, yhzx233&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/bimap/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; &lt;code&gt;bimap&lt;/code&gt;内で使用するサブコンテナ (&lt;code&gt;set_of&lt;/code&gt;や&lt;code&gt;unordered_set_of&lt;/code&gt;) の異種混合ルックアップ (heterogeneous lookup) を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#bind&#34; id=&#34;bind&#34;&gt;Bind&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了。C++11コンパイラを要求するようになった&lt;ul&gt;
&lt;li&gt;GCCは4.7以降、MSVCは12.0 (VS 2013) 以降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#conversion&#34; id=&#34;conversion&#34;&gt;Conversion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/conversion/pull/28&#34; target=&#34;_blank&#34;&gt;GitHub #28&lt;/a&gt; ライブラリの一部ではなくなった&lt;code&gt;boost::lexical_cast&lt;/code&gt;関連の古い記述を削除 (&lt;a href=&#34;https://github.com/eoan-ermine&#34; target=&#34;_blank&#34;&gt;Danil Sidoruk&lt;/a&gt;氏のPRに感謝)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生の関数を関数オブジェクトクラスでラップするための&lt;code&gt;functor&lt;/code&gt;クラステンプレートを持つ新しい&lt;code&gt;boost/core/functor.hpp&lt;/code&gt;ヘッダを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null_deleter&lt;/code&gt;、&lt;code&gt;fclose_deleter&lt;/code&gt;、チェックされたデリーター定義を変更し、引数依存の名前探索 (ADL) で名前空間&lt;code&gt;boost&lt;/code&gt;が持ち込まれないようにした。ユーザーは、呼び出される関数の名前空間を明示的に修飾するか、&lt;code&gt;using&lt;/code&gt;宣言を追加する必要があるかもしれない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path::generic_path&lt;/code&gt;と&lt;code&gt;path::generic_string&lt;/code&gt;メソッドは、返されるパスの中の重複したディレクトリセパレータを削除するようになった&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;path::generic_path&lt;/code&gt;、&lt;code&gt;path::generic_string&lt;/code&gt;、&lt;code&gt;path::make_preferred&lt;/code&gt;、&lt;code&gt;path::lexically_normal&lt;/code&gt;は、パスのルート名におけるバックスラッシュとフォワードスラッシュの変換を避けるようになった。例として、Windows上で&lt;code&gt;path(&#34;\\\\\\\\?\\\\c:\\\\foo&#34;).generic_string()&lt;/code&gt;は、&lt;code&gt;&#34;//?/c:/foo&#34;&lt;/code&gt;の代わりに&lt;code&gt;&#34;\\\\\\\\?\\\\c:/foo&#34;&lt;/code&gt;を返すようになった。同様に、&lt;code&gt;path(&#34;\\\\\\\\host/share/foo/..&#34;).lexically_normal()&lt;/code&gt;は&lt;code&gt;&#34;\\\\\\\\host\\\\share&#34;を&lt;/code&gt;返すようになった&lt;/li&gt;
&lt;li&gt;[v4:] &lt;code&gt;equivalent&lt;/code&gt;は、どちらかのパスが存在しない場合にエラーを示すようになった&lt;/li&gt;
&lt;li&gt;[v4:] &lt;a href=&#34;https://github.com/boostorg/filesystem/issues/301&#34; target=&#34;_blank&#34;&gt;GitHub #301&lt;/a&gt; &lt;code&gt;absolute&lt;/code&gt;は、入力パスの&lt;code&gt;relative_path()&lt;/code&gt;が空の場合、末尾にディレクトリセパレータを持つパスを返すようになった&lt;/li&gt;
&lt;li&gt;デフォルトのパスモデルを使用して一意のパスを生成する&lt;code&gt;unique_path&lt;/code&gt;関数の、単一の&lt;code&gt;error_code&amp;amp; ec&lt;/code&gt;引数をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/300&#34; target=&#34;_blank&#34;&gt;GitHub #300&lt;/a&gt; &lt;code&gt;weakly_canonical&lt;/code&gt;は、入力パスが相対パスであり、ファイルシステムに存在する要素を含まない場合、絶対パスを生成するようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/179&#34; target=&#34;_blank&#34;&gt;GitHub #179&lt;/a&gt; &lt;code&gt;copy_file&lt;/code&gt;と&lt;code&gt;copy&lt;/code&gt;操作に、新しい&lt;code&gt;copy_options::ignore_attribute_errors&lt;/code&gt;オプションを追加。この新しいオプションにより、ファイル属性のコピー中に発生する可能性のあるエラーを無視できる&lt;/li&gt;
&lt;li&gt;Linuxでは、&lt;code&gt;sendfile&lt;/code&gt;と&lt;code&gt;copy_file_range&lt;/code&gt;システムコールに基づく&lt;code&gt;copy_file&lt;/code&gt;バックエンドが、ターゲットファイルのストレージを事前に割り当てようとする。これにより、ファイルシステムの断片化が減少し、十分な空き容量がない場合に早期にエラーが示される。すべてのファイルシステムがこの機能をサポートしているわけではない。ストレージの事前割り当てがサポートされていない場合、ファイルのコピーは続行される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/9699919799/functions/fdopendir.html&#34; target=&#34;_blank&#34;&gt;fdopendir&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;openat&lt;/code&gt;、POSIX.1-2008で定義されている関連APIをサポートするPOSIXシステム、およびWindowsでは、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;は、反復中にファイルのステータスを問い合わせ、ネストされたディレクトリを開くために、パスの代わりにファイル記述子/ハンドルを使用するようになった。これにより、ファイルシステムの同時変更に対するディレクトリ反復の回復力が向上する&lt;/li&gt;
&lt;li&gt;以前に非推奨として宣言されていたAPIを削除しました。とくに、&lt;code&gt;path&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のメンバ関数、&lt;code&gt;is_regular&lt;/code&gt;、&lt;code&gt;copy_directory&lt;/code&gt;、&lt;code&gt;symbolic_link_exists&lt;/code&gt;、&lt;code&gt;complete&lt;/code&gt;、&lt;code&gt;copy_option&lt;/code&gt;、&lt;code&gt;symlink_option&lt;/code&gt;、および&lt;code&gt;boost/filesystem/convenience.hpp&lt;/code&gt;と&lt;code&gt;boost/filesystem/path_traits.hpp&lt;/code&gt;ヘッダが削除された。削除されたコンポーネントの代替はドキュメントに記載されている&lt;/li&gt;
&lt;li&gt;コンテナ型（例として&lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt;）からの&lt;code&gt;path&lt;/code&gt;の構築、代入、追加のサポートは、デフォルトで無効になった。ユーザーは&lt;code&gt;BOOST_FILESYSTEM_DEPRECATED&lt;/code&gt;を定義することで、この機能を有効にすることができる。この機能は非推奨のままであり、将来のリリースで完全に削除される予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#function&#34; id=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを終了。C++11コンパイラを要求するようになった&lt;ul&gt;
&lt;li&gt;GCCは4.7以降、MSVCは12.0 (VS 2013) 以降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#geometry&#34; id=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善点&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1247&#34; target=&#34;_blank&#34;&gt;GitHub #1247&lt;/a&gt; &lt;code&gt;condition&lt;/code&gt; マクロの代わりに &lt;code&gt;if constexpr&lt;/code&gt; マクロを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1242&#34; target=&#34;_blank&#34;&gt;GitHub #1242&lt;/a&gt; sideで並べ替えるためのstrategyを渡すようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1234&#34; target=&#34;_blank&#34;&gt;GitHub #1234&lt;/a&gt; clang/mac/darwin/arm64 用の CMake ファイルを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決した課題&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1231&#34; target=&#34;_blank&#34;&gt;GitHub #1231&lt;/a&gt;、&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1244&#34; target=&#34;_blank&#34;&gt;GitHub #1244&lt;/a&gt; 反時計回りのポリゴンに対する不正な集合操作を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1259&#34; target=&#34;_blank&#34;&gt;GitHub #1259&lt;/a&gt; CUDA NVCC コンパイラでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1250&#34; target=&#34;_blank&#34;&gt;GitHub #1250&lt;/a&gt; linestringのバッファが不正なinner polygonを返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1230&#34; target=&#34;_blank&#34;&gt;GitHub #1230&lt;/a&gt; union操作がpointに悪影響 (perturbing) し、間違った結果を返す問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/issues/1229&#34; target=&#34;_blank&#34;&gt;GitHub #1229&lt;/a&gt; union操作が自己交差を生成する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1248&#34; target=&#34;_blank&#34;&gt;GitHub #1248&lt;/a&gt; 閉じたクラスタ内の交点を非横断可能に設定することでバッファの問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/geometry/pull/1246&#34; target=&#34;_blank&#34;&gt;GitHub #1246&lt;/a&gt; コンバーターおよび &lt;code&gt;is_base_of&lt;/code&gt; のコンパイルを修正&lt;/li&gt;
&lt;li&gt;さまざまなエラーと警告の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#iterator&#34; id=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03のサポートを非推奨化。将来のリリースから削除される予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#json&#34; id=&#34;json&#34;&gt;JSON&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;エンディアンを扱うためにBoost.Endianを使用するようになった&lt;/li&gt;
&lt;li&gt;Boost.SystemとBoost.Containerコンポーネントへのエイリアスは非推奨となり、1.87.0で完全に削除される予定&lt;/li&gt;
&lt;li&gt;記述されたクラスへの変換がプライベートメンバをサポートするようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に右辺値参照のオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;のような型 (path-like types) への変換サポートを追加&lt;/li&gt;
&lt;li&gt;記述されたクラスへのparseが継承したメンバを正しく考慮するようになった&lt;/li&gt;
&lt;li&gt;自己参照するシーケンスの変換を無効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;の参照ハンドリングを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#leaf&#34; id=&#34;leaf&#34;&gt;LEAF&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スレッド間でエラーオブジェクトと例外を転送するための新たなAPI: &lt;code&gt;try_capture_all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_capture_all&lt;/code&gt;を介してキャプチャされた例外を&lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt;が転送できるようになった&lt;/li&gt;
&lt;li&gt;動的にキャプチャされたエラーオブジェクトを&lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt;が改善された効率で転送できるようになった&lt;/li&gt;
&lt;li&gt;古い&lt;code&gt;make_shared_context&lt;/code&gt;/&lt;code&gt;capture&lt;/code&gt; APIは非推奨となり、次のリリースで削除される予定&lt;/li&gt;
&lt;li&gt;例外で動的にキャプチャされたエラーオブジェクトを転送するサポートを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#lexical_cast&#34; id=&#34;lexical_cast&#34;&gt;LexicalCast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最適化されたストリームとC++標準ライブラリIOベースのストリームを分離するための内部ロジックの大幅な書き換え:&lt;ul&gt;
&lt;li&gt;C++標準ライブラリベースのストリームは、より良いパフォーマンスを実現するために、より少ないケースで構築されるようになった&lt;/li&gt;
&lt;li&gt;テンプレートのインスタンス化を減らし、コードがシンプルになった&lt;/li&gt;
&lt;li&gt;常に&lt;code&gt;std::char_traits&lt;/code&gt;を使用するようにした (入力/出力型からカスタムトレイトを使用しないようにした。リンク時または実行時エラーの原因になるため)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/pull/64&#34; target=&#34;_blank&#34;&gt;GitHub #64&lt;/a&gt; 前方宣言された&lt;code&gt;boost::array&lt;/code&gt;の誤用を修正 (報告をしてくれた&lt;a href=&#34;https://github.com/13steinj&#34; target=&#34;_blank&#34;&gt;13steinj&lt;/a&gt;氏に感謝！)&lt;/li&gt;
&lt;li&gt;C++標準ライブラリの傾向に従い、&lt;code&gt;volatile&lt;/code&gt;入力型のサポートを削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/30&#34; target=&#34;_blank&#34;&gt;GitHub #30&lt;/a&gt; &lt;code&gt;std::basic_string_view&lt;/code&gt;と&lt;code&gt;boost::basic_string_view&lt;/code&gt;からの変換を最適化&lt;/li&gt;
&lt;li&gt;Boost.NumericConversionとBoost.MPLへの依存関係を削除。浮動小数点型から算術型への一部の変換を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/lexical_cast/issues/45&#34; target=&#34;_blank&#34;&gt;GitHub #45&lt;/a&gt; このライブラリが、&lt;code&gt;-fno-sanitize-recover=integer&lt;/code&gt;オプションをつけてもコンパイルおよび動作するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#locale&#34; id=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20モードで&lt;code&gt;char8_t&lt;/code&gt;の型情報が欠落していたことによるリンカーの問題を修正&lt;/li&gt;
&lt;li&gt;バンドルされたIConvを使用する際のIConvコンパイルフラグを修正&lt;/li&gt;
&lt;li&gt;ドキュメント化されているように、&lt;code&gt;collator&lt;/code&gt;はコンストラクタで例外を投げるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/locale/pull/216&#34; target=&#34;_blank&#34;&gt;GitHub #216&lt;/a&gt; 現在のバックエンドで利用できない場合の型の混同を避けるため、&lt;code&gt;collator&lt;/code&gt;は&lt;code&gt;std::collator&lt;/code&gt;を継承しなくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/locale/pull/218&#34; target=&#34;_blank&#34;&gt;GitHub #218&lt;/a&gt; 無限ループを回避するため、不正なIConvライブラリ (一部のMacOSバージョンなど) が検出された場合に例外を投げるようになった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/locale/issues/221&#34; target=&#34;_blank&#34;&gt;GitHub #221&lt;/a&gt; &lt;code&gt;date_time&lt;/code&gt;の分解能がミリ秒単位だと混乱が起きていたため、秒に変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#math&#34; id=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しい最適化アルゴリズムのコレクションが追加されました:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1062&#34; target=&#34;_blank&#34;&gt;GitHub #1062&lt;/a&gt; 差分進化 (Differential Evolution)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1065&#34; target=&#34;_blank&#34;&gt;GitHub #1065&lt;/a&gt; JSO&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1071&#34; target=&#34;_blank&#34;&gt;GitHub #1071&lt;/a&gt; ランダム探索&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1074&#34; target=&#34;_blank&#34;&gt;GitHub #1074&lt;/a&gt; CMA-ES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NCF生存関数 (NCF survival function) における0による割り算の警告を修正&lt;/li&gt;
&lt;li&gt;ccmath::floor/ceilの大きな引数に対する&lt;code&gt;constexpr&lt;/code&gt;深さの制限を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quartic_roots&lt;/code&gt;の精度を改善&lt;/li&gt;
&lt;li&gt;libstdc++14のcstdfloatのnumeric limits検出マクロを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1060&#34; target=&#34;_blank&#34;&gt;GitHub #1060&lt;/a&gt; C++14を使用する際にMSVC UCRTがcomplex.hで&lt;code&gt;_Complex_I&lt;/code&gt;を定義する問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/math/pull/1066&#34; target=&#34;_blank&#34;&gt;GitHub #1066&lt;/a&gt; cstdfloat iostreamを改善&lt;/li&gt;
&lt;li&gt;スタンドアロンモードではない環境でスタンドアロンモードを使用する際のBoost.Configマクロの再定義を修正&lt;/li&gt;
&lt;li&gt;コードカバレッジを大幅に改善し、関連するバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#msm&#34; id=&#34;msm&#34;&gt;MSM&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下は、指定された内容を日本語に翻訳したものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メジャーアップデート&lt;/strong&gt; バックエンドを更新 (back11)。C++11が必要となる。ドキュメントではこれがデフォルトとなった&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大きな新機能&lt;/strong&gt; 新しいフロントエンド (PlantUML) を追加。C++20が必要となる&lt;/li&gt;
&lt;li&gt;様々なバグ修正 (コンパイルエラーと警告、遅延イベントの優先度)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multi_index&#34; id=&#34;multi_index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの間違いを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#multiprecision&#34; id=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/575&#34; target=&#34;_blank&#34;&gt;GitHub #575&lt;/a&gt; C++23 &lt;code&gt;&amp;lt;limits&amp;gt;&lt;/code&gt;から発生する非推奨警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/577&#34; target=&#34;_blank&#34;&gt;GitHub #577&lt;/a&gt; 小さなビット数に対する&lt;code&gt;cpp_bin_float&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/580&#34; target=&#34;_blank&#34;&gt;GitHub #580&lt;/a&gt; &lt;code&gt;-Wpessimizing-move&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;covecovの実行を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/585&#34; target=&#34;_blank&#34;&gt;GitHub #585&lt;/a&gt; &lt;code&gt;cpp_dec_float&lt;/code&gt;乗算での切り捨てを減らすよう修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/597&#34; target=&#34;_blank&#34;&gt;GitHub #597&lt;/a&gt; 精度要件を満たすよう&lt;code&gt;complex_adaptor&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/pull/603&#34; target=&#34;_blank&#34;&gt;GitHub #603&lt;/a&gt; tommathの破壊的変更に対する修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multiprecision/issues/608&#34; target=&#34;_blank&#34;&gt;GitHub #608&lt;/a&gt; 数値に変換可能な型が算術演算子オーバーロードに参加できるように修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#mysql&#34; id=&#34;mysql&#34;&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;: Boost.MySQLでは、新たにコンパイルされたBoost.Charconvライブラリへのリンクが必要になった&lt;ul&gt;
&lt;li&gt;これは、ロケール依存の問題を解決し、効率を向上させ、新しいクライアント側SQLフォーマット機能を提供する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接続プールの実験的サポートを追加。これにより、セッションを再利用でき、組み込みの再接続とエラー処理が提供される&lt;/li&gt;
&lt;li&gt;型消去された接続 (&lt;code&gt;any_connection&lt;/code&gt;クラス) の実験的サポートを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;any_connection&lt;/code&gt;はテンプレートではなく、より簡単な接続の確立と再接続のセマンティクスを特徴としている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クライアント側SQLフォーマット関数 (&lt;code&gt;format_sql&lt;/code&gt;と&lt;code&gt;format_sql_to&lt;/code&gt;) の実験的サポートを追加&lt;ul&gt;
&lt;li&gt;これにより、クライアント側で安全にクエリを構成できるため、バッチインサートや動的フィルタ、PATCH-like updateなどのパターンが可能になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close_statement&lt;/code&gt;と&lt;code&gt;async_close_statement&lt;/code&gt;での、アプリケーションコードに大幅な遅延を引き起こす可能性のあるパフォーマンスの問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/code&gt;を使用したビルドのサポートを追加&lt;/li&gt;
&lt;li&gt;非推奨の実行インターフェース (&lt;code&gt;connection::query&lt;/code&gt;、&lt;code&gt;connection::start_query&lt;/code&gt;、&lt;code&gt;connection::execute_statement&lt;/code&gt;、&lt;code&gt;connection::start_statement_execution&lt;/code&gt;とそれらの非同期対応版) は、Boost 1.86で削除が予定されているため、警告が発生するようになった&lt;/li&gt;
&lt;li&gt;一部のエラーメッセージが切り捨てられるバグを修正&lt;/li&gt;
&lt;li&gt;警告を整理。&lt;code&gt;-Wall&lt;/code&gt;と&lt;code&gt;-Wextra&lt;/code&gt;を使用したビルドで警告は発生しなくなった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;field_view&lt;/code&gt;のすべてのコンストラクタを安定化&lt;/li&gt;
&lt;li&gt;ライブラリ内部をsans-ioアプローチで書き換え、複雑さが減った&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#odeint&#34; id=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;: このライブラリは、Boost.Mathをインクルードすることによる暗黙の要件ではなく、明示的にC++14を要求するようになった&lt;/li&gt;
&lt;li&gt;Thrust 1.10.0との互換性を修正&lt;/li&gt;
&lt;li&gt;以下のC++03 Boostコンポーネントを削除:&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Bind  &lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Static_assert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#pfr&#34; id=&#34;pfr&#34;&gt;PFR&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/152&#34; target=&#34;_blank&#34;&gt;GitHub #152&lt;/a&gt; &lt;code&gt;boost::pfr::get_name&lt;/code&gt;は、一部のコンパイラでローカル型で動作するようになった&lt;ul&gt;
&lt;li&gt;PRをしてくれた&lt;a href=&#34;https://github.com/schaumb&#34; target=&#34;_blank&#34;&gt;Bela Schaum&lt;/a&gt;氏に感謝！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/pull/154&#34; target=&#34;_blank&#34;&gt;GitHub #154&lt;/a&gt; 未使用の実装の詳細を削除しました。PRをしてくれた&lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;Denis Mikhailov&lt;/a&gt;氏に感謝！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/pfr/issues/155&#34; target=&#34;_blank&#34;&gt;GitHub #155&lt;/a&gt; &lt;code&gt;boost::pfr::structure_to_tuple&lt;/code&gt;から例外を送出できるようになった。バグ報告をしてくれた&lt;a href=&#34;https://github.com/denzor200&#34; target=&#34;_blank&#34;&gt;Denis Mikhailov&lt;/a&gt;氏に感謝！&lt;/li&gt;
&lt;li&gt;フィールド・リフレクションのトリックがドキュメントに記述された。&lt;a href=&#34;https://github.com/boostorg/pfr/issues/150&#34; target=&#34;_blank&#34;&gt;GitHub #150&lt;/a&gt;の議論に参加してくれた全ての人に感謝！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#random&#34; id=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/random/pull/89&#34; target=&#34;_blank&#34;&gt;GitHub #89&lt;/a&gt; splitmix64擬似乱数生成器を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++03はサポートされなくなった。C++11コンパイラが必要となる&lt;ul&gt;
&lt;li&gt;これにはGCC 4.8以降、およびMSVC 14.0 (VS 2015) 以降が含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非推奨のヘッダー &lt;code&gt;boost/system/cygwin_error.hpp&lt;/code&gt; を削除&lt;/li&gt;
&lt;li&gt;旧式のMinGW (32ビット) はサポートされなくなった。MinGW-w64 (64ビットと32ビット) はサポート対象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result&amp;lt;void&amp;gt;&lt;/code&gt;で&lt;code&gt;operator&amp;amp;&lt;/code&gt;が使用可能になった (&lt;code&gt;nullary&lt;/code&gt;関数を介して)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result&lt;/code&gt;に&lt;code&gt;operator|=&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stacktrace&#34; id=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下は指定された内容の日本語訳です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大きな新機能: 任意の例外からのスタックトレース&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;一部のPOSIXプラットフォームで、&lt;code&gt;std::stacktrace::from_current_exception()&lt;/code&gt;が現在の例外オブジェクトのスタックトレースを返すようになった。これは、例外が送出された時点でスタックトレースがキャプチャされたかのように動作する。この機能のプロトタイプを&lt;code&gt;libsfe&lt;/code&gt;で作成してくれたAndrei Nekrashevich氏に感謝します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/111&#34; target=&#34;_blank&#34;&gt;GitHub #111&lt;/a&gt; &lt;code&gt;boost_stacktrace_windbg&lt;/code&gt;でのWindows上のメモリ消費を修正した。問題を報告してくれた&lt;a href=&#34;https://github.com/ycyclop&#34; target=&#34;_blank&#34;&gt;ycyclop&lt;/a&gt;氏、詳細を提供してくれた&lt;a href=&#34;https://github.com/correa&#34; target=&#34;_blank&#34;&gt;Thiago A. Correa&lt;/a&gt;氏、可能な修正を提供してくれた&lt;a href=&#34;https://github.com/akarpovskii&#34; target=&#34;_blank&#34;&gt;Andrei Karpovskii&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;non hidden visibilityでのライブラリビルドを修正。報告と修正方法の情報を提供してくれた&lt;a href=&#34;https://github.com/JBouwer&#34; target=&#34;_blank&#34;&gt;Jan Bouwer&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/stacktrace/issues/131&#34; target=&#34;_blank&#34;&gt;GitHub #131&lt;/a&gt; ドキュメントに非同期シグナル安全に関する独立したセクションを追加。問題を指摘してくれた&lt;a href=&#34;https://github.com/tworonix&#34; target=&#34;_blank&#34;&gt;tworonix&lt;/a&gt;氏と、問題に関する情報を提供してくれた&lt;a href=&#34;https://github.com/itrofimow&#34; target=&#34;_blank&#34;&gt;itrofimow&lt;/a&gt;氏に感謝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#stl_interfaces&#34; id=&#34;stl_interfaces&#34;&gt;STLInterfaces&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20以降、&lt;code&gt;iterator_interface&lt;/code&gt;の入力イテレータの動作を変更し、C++20のコンセプトにより密接に従うようにした&lt;/li&gt;
&lt;li&gt;コンセプトが異なる制約で再定義されているというエラーを修正するため、&lt;code&gt;iterator_interface&lt;/code&gt;からHidden Friendsを削除&lt;/li&gt;
&lt;li&gt;CRTPの代わりに deducing this に基づいた新しい &lt;code&gt;iterator_interface&lt;/code&gt; を含む新しい &lt;code&gt;v3&lt;/code&gt; インライン名前空間を追加（C++23以降）&lt;/li&gt;
&lt;li&gt;一時オブジェクトのダングリングを防ぐために、&lt;code&gt;closure::operator()&lt;/code&gt;の右辺値修飾オーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#test&#34; id=&#34;test&#34;&gt;Test&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/406&#34; target=&#34;_blank&#34;&gt;GitHub #406&lt;/a&gt; ライブラリ固有の &lt;code&gt;_NO_LIB&lt;/code&gt; マクロを考慮するようにした&lt;/li&gt;
&lt;li&gt;意図的に到達不能なコードの &lt;code&gt;__builtin\_unreachable()&lt;/code&gt; で MSVC C4702 を抑制するようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/test/pull/411&#34; target=&#34;_blank&#34;&gt;GitHub #411&lt;/a&gt; &lt;code&gt;boost::function&lt;/code&gt; のストリーミングエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#unordered&#34; id=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value_type&lt;/code&gt; または &lt;code&gt;init_type&lt;/code&gt;（該当する場合）の引数に対して &lt;code&gt;emplace()&lt;/code&gt; を最適化し、中間オブジェクトの作成を回避するようにした。引数はすでに中間オブジェクトと同じ型になっている&lt;/li&gt;
&lt;li&gt;マップコンテナの &lt;code&gt;k,v&lt;/code&gt; 引数に対して &lt;code&gt;emplace()&lt;/code&gt; を最適化し、要素を挿入すべきであることが確実になるまでオブジェクトの構築を遅延させるようにした。この最適化は、マップの &lt;code&gt;key_type&lt;/code&gt; がムーブ構築可能であるか、&lt;code&gt;k&lt;/code&gt; 引数が &lt;code&gt;key_type&lt;/code&gt; である場合に行われる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/234&#34; target=&#34;_blank&#34;&gt;GitHub #234&lt;/a&gt; &lt;code&gt;explicit&lt;/code&gt;なコピーコンストラクタを持つアロケータのサポートを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/unordered/pull/238&#34; target=&#34;_blank&#34;&gt;GitHub #238&lt;/a&gt; &lt;code&gt;unordered_multimap::find(k, hash, eq)&lt;/code&gt; の &lt;code&gt;const&lt;/code&gt; バージョンのバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#variant&#34; id=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11より前のマクロとワークアラウンドをさらに削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/200&#34; target=&#34;_blank&#34;&gt;GitHub #200&lt;/a&gt;: 出力されたpragmaが改行で終了していない問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/issues/202&#34; target=&#34;_blank&#34;&gt;GitHub #202&lt;/a&gt;: &lt;code&gt;BOOST_WAVE_BSIZE&lt;/code&gt;境界でfillが呼び出されたときにYYMARKERが更新されない問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#build&#34; id=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2の&lt;a href=&#34;https://www.boost.org/doc/libs/release/tools/build/doc/html/index.html#b2.history&#34; target=&#34;_blank&#34;&gt;バージョン5.1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++03: 4.6.3, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.5, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12&lt;/li&gt;
&lt;li&gt;GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang, C++03: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++17: 11.0.3&lt;/li&gt;
&lt;li&gt;Apple Clang, C++20: 11.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>