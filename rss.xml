<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2014-12-27T23:01:10.570314</updated>
  <id>751ea12b-0127-439a-ac2b-d29eafbbb747</id>

  
    <entry>
      <title>Boost.勉強会 #16 大阪 -- Boost.勉強会 #16のブログエントリをいくつか見つけたので追加</title>
      <link href="http://boostjp.github.io/study_meeting/study16.html"/>
      <id>071f4fc27bd60f5ef296435ed6c6a8b105f2dcb9:study_meeting/study16.md</id>
      <updated>2014-12-25 17:39:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost.勉強会 #16 大阪&lt;/h1&gt;
&lt;h2&gt;開催日時&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2014/09/20(土) 11:00～&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開催場所&lt;/h2&gt;
&lt;p&gt;〒530-0012 大阪市北区芝田2-9-20 学園ビル(ベルスクール) 902号室&lt;/p&gt;
&lt;h2&gt;募集ページ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osakaboostjp.doorkeeper.jp/events/14150&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #16 大阪 - doorkeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;主催&amp;amp;スタッフ&lt;/h3&gt;
&lt;p&gt;主催者： 遥佐保(@hr_sao)&lt;/p&gt;
&lt;h3&gt;タイムテーブル&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;発表者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;11:00〜&lt;/td&gt;
&lt;td&gt;会場注意など&lt;/td&gt;
&lt;td&gt;hr_sao&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:10～11:35 (25分)&lt;/td&gt;
&lt;td&gt;boostとstdとC#&lt;/td&gt;
&lt;td&gt;StoneGuitar777&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:45～12:45 (60分)&lt;/td&gt;
&lt;td&gt;便利！電動歯ブラシ&lt;/td&gt;
&lt;td&gt;Flast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:45～14:25 (40分)&lt;/td&gt;
&lt;td&gt;自由ゲーム運動決起集会&lt;/td&gt;
&lt;td&gt;自由ゲーム作者 (´･@･)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:35～15:05 (25分)&lt;/td&gt;
&lt;td&gt;CasablancaによるHTTPプログラミング&lt;/td&gt;
&lt;td&gt;Egtra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:10～15:50 (40分)&lt;/td&gt;
&lt;td&gt;帰ってきたコンセプト&lt;/td&gt;
&lt;td&gt;EzoeRyou&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:00～16:40 (40分)&lt;/td&gt;
&lt;td&gt;左と右の話&lt;/td&gt;
&lt;td&gt;Cryolite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:50～17:20 (30分)&lt;/td&gt;
&lt;td&gt;拡張可能でprintfっぽい書式指定ができて書式指定文字列と引数をコンパイル時に検証できる文字列フォーマット関数を作った&lt;/td&gt;
&lt;td&gt;DigitalGhost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:25～&lt;/td&gt;
&lt;td&gt;ライトニングトーク希望者：現地募集～！&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブ配信&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ustream.tv/broadcaster/14940429&#34; target=&#34;_blank&#34;&gt;http://www.ustream.tv/broadcaster/14940429&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;座席表&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/19bWm2Tr_MJEf3Jyvd80DUMpdf7gb5mRgqszYxZBy33M/edit#gid=0&#34; target=&#34;_blank&#34;&gt;https://docs.google.com/spreadsheets/d/19bWm2Tr_MJEf3Jyvd80DUMpdf7gb5mRgqszYxZBy33M/edit#gid=0&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Twitterハッシュタグ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://twitter.com/search?q=%23boostjp&#34; target=&#34;_blank&#34;&gt;#boostjp&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;発表内容&lt;/h2&gt;
&lt;h3&gt;boostとstdとC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者 : &lt;a href=&#34;https://twitter.com/StoneGuitar777&#34; target=&#34;_blank&#34;&gt;@StoneGuitar777&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;boost、c++11の標準ライブラリ、C#のLINQに関連した話をします。&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.slideshare.net/tatsuyaishikawa7334/boost-stdcsp&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/tatsuyaishikawa7334/boost-stdcsp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;便利！電動歯ブラシ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;http://www.flast.jp/&#34; target=&#34;_blank&#34;&gt;Flast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ちょっと古めのBoostから最近のバージョンまでを振り返ってみるcoffee break的セッションです。 また、今reviewが進められているライブラリや、開発への参加方法等にも軽く 触れたいと思うので、お気軽に。&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.flast.jp/article/boost-16-osaka/#1&#34; target=&#34;_blank&#34;&gt;http://www.flast.jp/article/boost-16-osaka/#1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自由ゲーム運動決起集会&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;http://tacoika.blog87.fc2.com/&#34; target=&#34;_blank&#34;&gt;自由ゲーム作者 (´･@･)&lt;/a&gt; 読み方 UEMURA&lt;/li&gt;
&lt;li&gt;マルチプラットフォーム自由ゲームライブラリSDXの設計や開発手法の紹介&lt;/li&gt;
&lt;li&gt;紹介するライブラリ: &lt;a href=&#34;https://sourceforge.jp/projects/dxframework/simple/&#34; target=&#34;_blank&#34;&gt;https://sourceforge.jp/projects/dxframework/simple/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.slideshare.net/mr_dagonn/boost-16-39404123&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/mr_dagonn/boost-16-39404123&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CasablancaによるHTTPプログラミング&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;http://dev.activebasic.com/egtra/&#34; target=&#34;_blank&#34;&gt;Egtra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ REST SDK (codename &#34;Casablanca&#34;)の紹介と、C++における非同期プログラミングについてです。 &lt;a href=&#34;https://casablanca.codeplex.com/&#34; target=&#34;_blank&#34;&gt;https://casablanca.codeplex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.slideshare.net/egtra/casablanca-39891032&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/egtra/casablanca-39891032&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;帰ってきたコンセプト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;https://twitter.com/EzoeRyou&#34; target=&#34;_blank&#34;&gt;@EzoeRyou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;N4040、Concept Lite TSのドラフトに基づくConcept Liteの解説&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;https://github.com/EzoeRyou/boost-benkyokai-oosaka-16&#34; target=&#34;_blank&#34;&gt;https://github.com/EzoeRyou/boost-benkyokai-oosaka-16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;左と右の話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;https://twitter.com/Cryolite&#34; target=&#34;_blank&#34;&gt;@Cryolite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;L/R valueの話&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.slideshare.net/Cryolite/ss-39313548&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/Cryolite/ss-39313548&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;拡張可能でprintfっぽい書式指定ができて書式指定文字列と引数をコンパイル時に検証できる文字列フォーマット関数を作った&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;発表者： &lt;a href=&#34;https://twitter.com/decimalbloat&#34; target=&#34;_blank&#34;&gt;DigitalGhost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;発表資料： &lt;a href=&#34;http://www.slideshare.net/digitalghost/printf0x&#34; target=&#34;_blank&#34;&gt;http://www.slideshare.net/digitalghost/printf0x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ライトニングトーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tacoika.blog87.fc2.com/&#34; target=&#34;_blank&#34;&gt;自由ゲーム作者 (´･@･)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;SDXFrameWorkで作成したゲームとドキュメントのデモ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/srz_zumix&#34; target=&#34;_blank&#34;&gt;ずみっくす@srz_zumix&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;自作C++テスティングフレームワークの話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://srz-zumix.github.io/slide/iuwandbox/#/&#34; target=&#34;_blank&#34;&gt;発表資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/StoneGuitar777&#34; target=&#34;_blank&#34;&gt;@StoneGuitar777&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Freindlyとは？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/tatsuyaishikawa7334/boost-stdcsp&#34; target=&#34;_blank&#34;&gt;発表資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/EzoeRyou&#34; target=&#34;_blank&#34;&gt;@EzoeRyou&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;エイリアス宣言　C++11の新機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;後援&lt;/h2&gt;
&lt;p&gt;株式会社ロングゲート (https://longgate.co.jp/)&lt;/p&gt;
&lt;h2&gt;関連リンク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://srz-zumix.blogspot.jp/2014/09/boost16.html&#34; target=&#34;_blank&#34;&gt;Boost.勉強会#16 大阪に行ってきました - ブログズミ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpplover.blogspot.jp/2014/09/boost16.html&#34; target=&#34;_blank&#34;&gt;Boost勉強会#16大阪 - 本の虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/haruka_sao/archives/52081460.html&#34; target=&#34;_blank&#34;&gt;[勉強会]Boost.勉強会#16大阪を開催しました - 遥佐保の技術メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mrdagon/items/e54223f3895f281a6beb&#34; target=&#34;_blank&#34;&gt;Boost.勉強会で発表した-(´･@･)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/youandi/20140920/p2&#34; target=&#34;_blank&#34;&gt;Boost.勉強会 #16 大阪 に参加 - 桜、抹茶、白、日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ishimotokoji.tumblr.com/post/98704785951/boost-16&#34; target=&#34;_blank&#34;&gt;Boost勉強会 #16 大阪に行ってきた - Generative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.activebasic.com/egtra/2014/10/05/684/&#34; target=&#34;_blank&#34;&gt;CasablancaでHTTP（Boost.勉強会） ‐ イグトランスの頭の中（のかけら）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Kohei Takahashi</name>
        <email>flast@flast.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>arrayクラス, 固定サイズ配列のSTLコンテナ -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/array/array.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:archive/boost_docs/libs/array/array.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;arrayクラス, 固定サイズ配列のSTLコンテナ&lt;/h1&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#discussion&#34;&gt;議論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#code&#34;&gt;コード例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#introduction&#34; name=&#34;introduction&#34;&gt;はじめに&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ 標準ライブラリの一部である C++ 標準テンプレートライブラリ STL は、さまざまな種類のコンテナに対してアルゴリズムを適用するためのフレームワークを提供している。しかしながら、通常の配列は STL コンテナのインターフェイスには備わっていない(STL コンテナのイテレータとしてのインターフェイスは用意されているけれども)。&lt;/p&gt;
&lt;p&gt;通常の配列を置き換えるものとして、STL では &lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt;が提供されているが、&lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt; は動的配列のセマンティクスを持つので、要素数が変化する可能性を持つデータを管理対象とする。静的なサイズさえあれば充分な場面では、このことはいくぶんかのオーバーヘッドを生じさせることとなる。&lt;/p&gt;
&lt;p&gt;Matthew H. Austern は彼の本、 &lt;em&gt;Generic Programming and the STL&lt;/em&gt; の中で、 &lt;strong&gt;block&lt;/strong&gt; と名づけられた、静的サイズの通常の配列を扱うとても便利なラッパクラスを紹介している。これは通常の配列よりも安全であり、パフォーマンスもひけを取らない。 &lt;em&gt;The C++ Programming Language, 3rd edition&lt;/em&gt; で、Bjarne Stroustrup は &lt;strong&gt;c_array&lt;/strong&gt; という同じようなクラスを紹介しているが、これは私(&lt;a href=&#34;http://www.josuttis.com/&#34; target=&#34;_blank&#34;&gt;Nicolai Josuttis&lt;/a&gt;)が、私の本 &lt;em&gt;The C++ Standard Library - A Tutorial and Reference&lt;/em&gt; の中で &lt;strong&gt;carray&lt;/strong&gt; と呼んでいるものを少々変更して提供したものだ。ここに紹介するのは、これらのアプローチのエッセンスを、&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;boost&lt;/a&gt; からのたくさんのフィードバックで味付けしたものである。&lt;/p&gt;
&lt;p&gt;いろいろな名前を考えたすえ、このクラスの名前はシンプルに &lt;strong&gt;array&lt;/strong&gt; と決定した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#interface&#34; name=&#34;interface&#34;&gt;インタフェース&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このクラスは以下のインターフェイスを提供する。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;型:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの型(ランダムアクセス・イテレータ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数とされる要素へのイテレータの型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の参照の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数とされる要素への参照の型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付のサイズの型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なしの距離(差分)の型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;操作:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;array&amp;lt;type,num&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコンストラクタ。&lt;code&gt;num&lt;/code&gt; (要素数)個の&lt;code&gt;type&lt;/code&gt; (型)を要素とする配列を作成する。下のコメントを参照。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;array&amp;lt;type,num&amp;gt;(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;code&gt;a&lt;/code&gt; のすべての要素をコピーする。(&lt;code&gt;a&lt;/code&gt; は同じ &lt;code&gt;type&lt;/code&gt; と &lt;code&gt;num&lt;/code&gt; でなければならない)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入。すべての要素を代入する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assign(val)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべての要素に &lt;code&gt;val&lt;/code&gt; を代入する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最初の要素へのイテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の要素の次の位置へのイテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rbegin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆イテレーションでの最初の要素を指す逆イテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆イテレーションでの最後の要素のひとつ後ろ(behind)を指す逆イテレータを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator[i]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インデックス &lt;code&gt;i&lt;/code&gt; の要素を返す(範囲チェックなし)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;at(i)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インデックス &lt;code&gt;i&lt;/code&gt; の要素を返す(&lt;code&gt;i&lt;/code&gt; が不正な場合は &lt;code&gt;std::range_error&lt;/code&gt; を送出する)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;front()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最初の要素を返す(要素が存在することを呼び出し側で保証しなければならない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;back()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の要素を返す(要素が存在することを呼び出し側で保証しなければならない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生の配列を読み取り専用として返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列が空かどうかを返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;格納可能な要素数の最大値を返す(&lt;code&gt;size()&lt;/code&gt; と同じ)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap(a)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array a&lt;/code&gt; と要素を交換する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==, !=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値性を調べる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt; の比較演算。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;値:&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の要素数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#discussion&#34; name=&#34;discussion&#34;&gt;議論&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;array&lt;/code&gt; クラスは&#34;reversible container&#34;(C++ 標準 Section 23.1, [lib.container.requirements] を参照)の要件のほとんどを満たしているが、完全にではない。&lt;code&gt;array&lt;/code&gt; が reversible な STL コンテナではない理由は以下のとおりである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供されるべきコンストラクタがない&lt;/li&gt;
&lt;li&gt;要素が不確定な初期値を持つ可能性がある(以下を参照)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap()&lt;/code&gt; の計算量が定数ではない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size()&lt;/code&gt; が常に一定で、型の第2テンプレート引数によって決定される。&lt;/li&gt;
&lt;li&gt;アロケータのサポートを提供しないコンテナである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&#34;sequence&#34;(C++標準Section 23.1.1, [lib.sequence.reqmts]参照)であるための要件を、以下のものを除いて満たしていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;front()&lt;/code&gt; と &lt;code&gt;back()&lt;/code&gt; が提供されている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator[]&lt;/code&gt; と &lt;code&gt;at()&lt;/code&gt; が提供されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンストラクタの点に関しては、重要な設計上のトレードオフを行い、(それによって)&#34;&lt;strong&gt;aggregate&lt;/strong&gt;&#34;( C++ 標準 Section 8.5.1, [dcl.init.aggr] を参照)として &lt;code&gt;array&lt;/code&gt; を実装することができた。つまり、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; は、ブレースで囲まれ、要素番号の昇順に並べられ、カンマで区切られたコンテナの要素への初期値のリストによって初期化することができる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::array&amp;lt;int,4&amp;gt; a = { { 1, 2, 3 } };&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;リスト内の初期値の数が足りない場合、残りの要素はデフォルト値のままになる(したがって定義された値を持つ)ことに注意しよう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;しかしながら、&lt;code&gt;初期値のリストをないままにすると、要素は不確定の初期値をもつことになる。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザー定義のコンストラクタを持たない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; あるいは &lt;code&gt;protected&lt;/code&gt; な 非 &lt;code&gt;static&lt;/code&gt; データメンバをもたない。&lt;/li&gt;
&lt;li&gt;基底クラスを持たない。&lt;/li&gt;
&lt;li&gt;仮想関数を持たない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在の実装はこのようなアプローチをとっているが、不確定な初期値を持つ可能性があることは大きな問題点である。そこで、この点に関してこのようにすべきだというあなたの考えを、ぜひフィードバックしてほしい。ここから導かれる &lt;strong&gt;未解決の問題点&lt;/strong&gt; は以下のようなものだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初期化リストをサポートするべきか、あるいは次のようなものでOKか？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int data[] = { 1, 2, 3, 4 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&amp;lt;int,5&amp;gt; x(data);&lt;/code&gt; あるいは  &lt;code&gt;array&amp;lt;int,data&amp;gt; x;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可搬性のために、初期化リストとして、&#34;&lt;code&gt;{ { ... } }&lt;/code&gt;&#34;のかわりに、&#34;&lt;code&gt;{ ... }&lt;/code&gt;&#34;を使えるようにするべきだろうか？&lt;ul&gt;
&lt;li&gt;規格の 8.5.1 (11) ではこれは許されているようだが、gcc 2.95.2 では警告メッセージを表示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初期値の決定と、初期化リストのサポートのための、別の方法があるだろうか？&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;逆イテレータのstuffのための Static_casts はどうするか？&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;原文は「Static_casts for reverse iterator stuff?」。よくわかりません…&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建設的な&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/solutions@josuttis.com&#34;&gt;フィードバック&lt;/a&gt;はどのようなものでも歓迎する。&lt;strong&gt;注意してほしいのは、boostメーリングリストのすべてのメールを読むだけの時間が、私にはないという点だ。というわけで、確実にフィードバックが私に届くようにするため、このクラスに関するメールについては、私にコピーを送ってほしい。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.html#code&#34; name=&#34;code&#34;&gt;コード例&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下のコードは「このままの形(as is)」で提供され、明示的あるいは暗黙的な保証はない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array.hpp.html&#34;&gt;&lt;strong&gt;array.hpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の実装ファイル&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array1.cpp.html&#34;&gt;&lt;strong&gt;array1.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った簡単な例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array2.cpp.html&#34;&gt;&lt;strong&gt;array2.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った別の例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array3.cpp.html&#34;&gt;&lt;strong&gt;array3.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt;を使った三つ目の例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array4.cpp.html&#34;&gt;&lt;strong&gt;array4.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; を使った例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/array/array5.cpp.html&#34;&gt;&lt;strong&gt;array5.cpp&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;array&amp;lt;&amp;gt;&lt;/code&gt; の他の操作をテストする例&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.45.0 リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_45_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_45_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.45.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：
&lt;a href=&#34;http://svn.boost.org/svn/boost/website/public_html/beta/feed/history/boost_1_45_0.qbk&#34; target=&#34;_blank&#34;&gt;http://beta.boost.org/users/news/version_1_45_0&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#polygon&#34;&gt;Polygon(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#property-tree&#34;&gt;Property Tree(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#serialization&#34;&gt;Serialization(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#thread&#34;&gt;Thread(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kqueueベースプラットフォームにおいて、&lt;code&gt;io_service&lt;/code&gt;がバックグラウンドスレッドで走っている場合に&lt;code&gt;deadline_timer&lt;/code&gt;が着火しないかもしれない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4568&#34; target=&#34;_blank&#34;&gt;#4568&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;メンバ関数である&lt;code&gt;has_service()&lt;/code&gt;中で、非constメンバ関数である&lt;code&gt;init_key()&lt;/code&gt;を呼んでいたためコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4638&#34; target=&#34;_blank&#34;&gt;#4638&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MinGWのクロスコンパイルを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4491&#34; target=&#34;_blank&#34;&gt;#4491&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Boost.Systemの非推奨関数に依存していた部分を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4672&#34; target=&#34;_blank&#34;&gt;#4672&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt;/&lt;code&gt;closesocket()&lt;/code&gt;の失敗を正しく伝播されることを保証(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4573&#34; target=&#34;_blank&#34;&gt;#4573&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InitializeCriticalSectionAndSpinCount&lt;/code&gt;によって返されたエラー値のチェックを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4574&#34; target=&#34;_blank&#34;&gt;#4574&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;QNXのハードウェア制御フローサポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4625&#34; target=&#34;_blank&#34;&gt;#4625&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;HP-UX上で&lt;code&gt;pselect()&lt;/code&gt;が利用可能な場合、常にそれを使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4578&#34; target=&#34;_blank&#34;&gt;#4578&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ハンドラ引数が左辺値として渡されることを保証(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4744&#34; target=&#34;_blank&#34;&gt;#4744&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;スレッドサポートが無効にされた場合のWindowsビルドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4680&#34; target=&#34;_blank&#34;&gt;#4680&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;5分以上の未来が指定された場合、&lt;code&gt;deadline_timer&lt;/code&gt;オブジェクトが終了しないことがあるWindows特有の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4745&#34; target=&#34;_blank&#34;&gt;#4745&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;空のサービス名がポート番号0に解決されるよう、ドキュメントに従ってBSDプラットフォーム上のバックエンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4690&#34; target=&#34;_blank&#34;&gt;#4690&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_buffers_1&lt;/code&gt;型のバッファシーケンスを受け入れないよう、&lt;code&gt;read&lt;/code&gt;操作を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4746&#34; target=&#34;_blank&#34;&gt;#4746&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Objective-C++のキーワードである&lt;code&gt;protocol&lt;/code&gt;と&lt;code&gt;id&lt;/code&gt;を避けるように再定義(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4191&#34; target=&#34;_blank&#34;&gt;#4191&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;実行中の&lt;code&gt;deadline_timer&lt;/code&gt;オブジェクトが数多くある場合に起こる、&lt;code&gt;vector&lt;/code&gt;の再確保問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4780&#34; target=&#34;_blank&#34;&gt;#4780&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;NetBSD上でコンパイルできるよう、kqueueバックエンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4662&#34; target=&#34;_blank&#34;&gt;#4662&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;64ビット Mac OS X、およびBSD上での&lt;code&gt;is_control()&lt;/code&gt;の実装を用意した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4782&#34; target=&#34;_blank&#34;&gt;#4782&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/asio/impl/src.hpp&amp;gt;&lt;/code&gt;をサポートし、&lt;code&gt;&amp;lt;boost/asio/impl/src.cpp&amp;gt;&lt;/code&gt;を非推奨にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4560&#34; target=&#34;_blank&#34;&gt;#4560&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数マクロが実装されているコンパイラかどうかを判定する&lt;code&gt;BOOST_NO_VARIADIC_MACROS&lt;/code&gt;マクロ追加。 &lt;/li&gt;
&lt;li&gt;C++0xから追加された&lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;::lowest()&lt;/code&gt;が実装されているかどうかを判定する&lt;code&gt;BOOST_NO_NUMERIC_LIMITS_LOWEST&lt;/code&gt;マクロ追加。 &lt;/li&gt;
&lt;li&gt;OpenVMS環境でのコンフィグレーションサポートを追加。&lt;code&gt;boost/config/platform/vms.hpp&lt;/code&gt;(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4474&#34; target=&#34;_blank&#34;&gt;#4474&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cygwin + GCC環境でWIN32マクロが定義されないと仮定していたためリンクエラーを起こしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4670&#34; target=&#34;_blank&#34;&gt;#4670&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/config/auto_link.hpp&lt;/code&gt;の&lt;code&gt;BOOST_AUTO_TAGGED&lt;/code&gt;で、「&lt;code&gt;#pragma commentcomment&lt;/code&gt;」になっていたのを「&lt;code&gt;#pragma comment&lt;/code&gt;」に修正。VC8ではunknown pragma警告が出ていた。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4563&#34; target=&#34;_blank&#34;&gt;#4653&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/config/platform/bsd.hpp&lt;/code&gt;で&lt;code&gt;__NetBSD_GCC__&lt;/code&gt;がdefineされていると仮定して書かれていたため、OpenBSD環境でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4508&#34; target=&#34;_blank&#34;&gt;#4508&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path_traits::is_pathable&lt;/code&gt;を追加した。&lt;code&gt;path&lt;/code&gt;メンバテンプレートが非pathableな型でオーバーロード解決されるのを防ぐためにこれを使用する。この問題は、Adam Baduraによって報告された(rev.64986)。&lt;/li&gt;
&lt;li&gt;古いWindows SDKに関するV2 create_hard_linkの問題を解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4487&#34; target=&#34;_blank&#34;&gt;#4487&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Boost.Mathで発生していた&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4799&#34; target=&#34;_blank&#34;&gt;#4799&lt;/a&gt;のリンクエラーと同じ問題が、他3箇所でも発生していたので修正。&lt;/li&gt;
&lt;li&gt;Boost 1.44.0でV3を追加した際に、V2の&lt;code&gt;boost::filesystem::slash&lt;/code&gt;が見つからないというコンパイルエラーが出ていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4712&#34; target=&#34;_blank&#34;&gt;#4712&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;不正にsymlinkと識別されるfilesystemオブジェクトの問題を修正し、テストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4663&#34; target=&#34;_blank&#34;&gt;#4663&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;temp_directory_path&lt;/code&gt;関数を追加(rev.66028)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;チケット&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4606&#34; target=&#34;_blank&#34;&gt;#4606&lt;/a&gt;で記述されたBoost.Interprocessと関係する、Win32プラットフォーム上で &lt;a href=&#34;http://beta.boost.org/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;intermodule_holder&lt;/code&gt;&lt;/a&gt; のぶら下がり問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::exit&lt;/code&gt;によって、非互換の内部拡張によるプログラム終了を削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto_any&lt;/code&gt;のコンストラクタを&lt;code&gt;explicit&lt;/code&gt;に修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラスをRandom Access Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラステンプレートをRandom Access Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_TPL_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラスをRandom Access SequenceかつAssociative Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ASSOC_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;メンバ変数を持つクラステンプレートをRandom Access SequenceかつAssociative Sequenceとしてアダプトする、&lt;code&gt;BOOST_FUSION_ADAPT_ASSOC_TPL_ADT&lt;/code&gt;マクロを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daniel TrebbienによるStoer-Wagnerの最小カットを求めるアルゴリズム(無向グラフを二つに分けたときに、重みが最小になるような分け方を求める)を追加。&lt;/li&gt;
&lt;li&gt;W. P. McNeillによる暗黙的グラフ(&lt;code&gt;implicit_graph&lt;/code&gt;)(メモリをあまり使わないグラフ)と&lt;code&gt;A*&lt;/code&gt;(astar_maze)(最短経路を求めるアルゴリズム)のサンプルを追加。&lt;/li&gt;
&lt;li&gt;グラフのプロパティのための、バンドルされたプロパティ（？）の追加。&lt;ul&gt;
&lt;li&gt;→&lt;strong&gt;補足(Akira)&lt;/strong&gt;： 分散グラフの&lt;code&gt;compressed_sparse_row_graph&lt;/code&gt;に&lt;code&gt;graph_bundled&lt;/code&gt;プロパティを追加。分散グラフの方はold-styleのプロパティを持たないので、非分散グラフとインタフェースを合わせるために持たせただけ(rev.65764)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4556&#34; target=&#34;_blank&#34;&gt;#4556&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4622&#34; target=&#34;_blank&#34;&gt;#4622&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4631&#34; target=&#34;_blank&#34;&gt;#4631&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4715&#34; target=&#34;_blank&#34;&gt;#4715&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4753&#34; target=&#34;_blank&#34;&gt;#4753&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4758&#34; target=&#34;_blank&#34;&gt;#4758&lt;/a&gt; 及び &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4793&#34; target=&#34;_blank&#34;&gt;#4793&lt;/a&gt;と、Tracに登録されていないバグを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4731&#34; target=&#34;_blank&#34;&gt;#4731&lt;/a&gt; と &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4737&#34; target=&#34;_blank&#34;&gt;#4737&lt;/a&gt;の、ドキュメントのバグを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Win32環境において、グローバルなファイルマッピングが行えない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1080&#34; target=&#34;_blank&#34;&gt;#1080&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_memory_mapping::get_size&lt;/code&gt;のドキュメントがおかしかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3284&#34; target=&#34;_blank&#34;&gt;#3284&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;named semaphoreの説明に、named conditionが出てきていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3439&#34; target=&#34;_blank&#34;&gt;#3439&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess_condition&lt;/code&gt;がデッドロックを起こしていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3448&#34; target=&#34;_blank&#34;&gt;#3448&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;同じファイルがほかのところで閉じられると、排他的な&lt;code&gt;file_lock&lt;/code&gt;が失われてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3582&#34; target=&#34;_blank&#34;&gt;#3582&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy_ptr&lt;/code&gt;時にセグメンテーションフォルトになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3682&#34; target=&#34;_blank&#34;&gt;#3682&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory&lt;/code&gt;のムーブコンストラクタで、初期化されてないハンドルで&lt;code&gt;swap&lt;/code&gt;していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3829&#34; target=&#34;_blank&#34;&gt;#3829&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline&lt;/code&gt;内で、変数が二重定義されていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3846&#34; target=&#34;_blank&#34;&gt;#3846&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;にセキュリティ属性を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3914&#34; target=&#34;_blank&#34;&gt;#3914&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;の&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;が動いていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3947&#34; target=&#34;_blank&#34;&gt;#3947&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;のデストラクタが、そうするべきではないところで&lt;code&gt;shm&lt;/code&gt;を&lt;code&gt;delete&lt;/code&gt;していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3950&#34; target=&#34;_blank&#34;&gt;#3950&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_shared_memory&lt;/code&gt;の&lt;code&gt;find&lt;/code&gt;が、GCCの最適化によって&lt;code&gt;assert&lt;/code&gt;に引っかかっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3951&#34; target=&#34;_blank&#34;&gt;#3951&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;非推奨となっているBoost.Configの&lt;code&gt;BOOST_HAS_*&lt;/code&gt;マクロを使用していたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3985&#34; target=&#34;_blank&#34;&gt;#3985&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;のために、bootstamp名のフォルダを使用していたため、長時間動かすようなシステムで突然動かなくなってしまう問題があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4010&#34; target=&#34;_blank&#34;&gt;#4010&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4352&#34; target=&#34;_blank&#34;&gt;#4352&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_mapping&lt;/code&gt;がVC10でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4417&#34; target=&#34;_blank&#34;&gt;#4417&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;例外メッセージをいくつか追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4019&#34; target=&#34;_blank&#34;&gt;#4019&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex&lt;/code&gt;が冬眠していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4039&#34; target=&#34;_blank&#34;&gt;#4039&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linux版の&lt;code&gt;set_file_pointer&lt;/code&gt;の結果判定が間違っていたため、成功しても失敗で返っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4218&#34; target=&#34;_blank&#34;&gt;#4218&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;時に&lt;code&gt;operator==&lt;/code&gt;がないというコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4230&#34; target=&#34;_blank&#34;&gt;#4230&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;プログラムを実行したユーザーの権限でtmpフォルダが作られていたため、ユーザーを切り替えるとそのフォルダにアクセスできなくなる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4250&#34; target=&#34;_blank&#34;&gt;#4250&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/interprocess/mem_algo/rbtree_best_fit.hpp&amp;gt;&lt;/code&gt;の警告をとった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4297&#34; target=&#34;_blank&#34;&gt;#4297&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;パーミッションを指定できるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4350&#34; target=&#34;_blank&#34;&gt;#4350&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC 4.6でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4426&#34; target=&#34;_blank&#34;&gt;#4426&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;MinGWでregression testがリンクエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4516&#34; target=&#34;_blank&#34;&gt;#4516&lt;/a&gt;) ←&lt;span style=&#34;color:red;&#34;&gt;直ってないぞ、と言われている…。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::interprocess_semaphore&lt;/code&gt;が&lt;code&gt;wait&lt;/code&gt;してる間CPUを消費する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4524&#34; target=&#34;_blank&#34;&gt;#4524&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ENABLE_ASSERT_HANDLER&lt;/code&gt;をdefineしたらコンパイルエラーになっていたので、Interprocess内の&lt;code&gt;assert&lt;/code&gt;を全て&lt;code&gt;BOOST_ASSERT&lt;/code&gt;に置き換えた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4557&#34; target=&#34;_blank&#34;&gt;#4557&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Flyweightと合わせて、&lt;code&gt;test_intermod_holder&lt;/code&gt;のregression testが通らなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4606&#34; target=&#34;_blank&#34;&gt;#4606&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::interprocess::winapi::get_last_bootup_time(std::wstring&amp;amp;)&lt;/code&gt;のregression testが通らなかったので修正&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4685&#34; target=&#34;_blank&#34;&gt;(#4685&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Jailed FreeBSD環境でregression testが通らなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4694&#34; target=&#34;_blank&#34;&gt;#4694&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ムーブセマンティクスに対応(GCC 4.5とVC10でテストしてある)&lt;/li&gt;
&lt;li&gt;interprocess named resourceのためにパーミッションを可能にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region::flush&lt;/code&gt;が汎用的な実装ではなかったので修正。&lt;/li&gt;
&lt;li&gt;FreeBSDとMacOS環境においてnamed semaphoreとmutexを実装するためにposix semaphoreを使用するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;逆ガンマ分布(inverse gamma distribution)、逆カイ二乗(inverse chi square)、Scaled逆カイ二乗(scaled inverse chi square)を追加。&lt;/li&gt;
&lt;li&gt;標準乱数ライブラリでの分布と関数の名前における曖昧さへの更なる警告を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントのリビジョン修正と、FAQの追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シリアライズに対応。&lt;/li&gt;
&lt;li&gt;eUMLのアクションに通常の関数オブジェクトを使用できるようにした。&lt;/li&gt;
&lt;li&gt;引数としてサブ状態、サブ状態マシンをとるコンストラクタを追加。これによって引数をサブ状態マシンに渡すことができる。&lt;/li&gt;
&lt;li&gt;Bugfixes (anonymous transitions) ←なにこれ？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3820&#34; target=&#34;_blank&#34;&gt;#3820&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3989&#34; target=&#34;_blank&#34;&gt;#3989&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt; のバグと、Trac に登録されていないその他のバグを修正（←その他のバグってなんやねん！）。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt; ―― &lt;a href=&#34;http://www.boost.org/doc/libs/1_40_0/libs/multi_array/doc/user.html#sec_storage&#34; target=&#34;_blank&#34;&gt;boost::fortran_storage_order example&lt;/a&gt; のサンプルが間違っている（&lt;code&gt;boost::fortran_storage_order&lt;/code&gt; ではなく &lt;code&gt;boost::fortran_storage_order()&lt;/code&gt;）のを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3820&#34; target=&#34;_blank&#34;&gt;#3820&lt;/a&gt; ―― &lt;a href=&#34;http://www.boost.org/doc/libs/1_41_0/libs/multi_array/doc/reference.html&#34; target=&#34;_blank&#34;&gt;Boost.MultiArray Reference Manual&lt;/a&gt; で &lt;code&gt;std::times&lt;/code&gt; を使っているが、これは標準の関数ではないので &lt;code&gt;std::multiplies&lt;/code&gt; に修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3989&#34; target=&#34;_blank&#34;&gt;#3989&lt;/a&gt; ―― &lt;code&gt;detail/ptree_implementation.hpp&lt;/code&gt; でメンバ呼び出しの際に &lt;code&gt;template&lt;/code&gt; が無いのと、&lt;code&gt;libs/multi_array/example/for_each.hpp&lt;/code&gt; で &lt;code&gt;typename&lt;/code&gt; が無いのを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt; ―― &lt;code&gt;boost::detail::ConstMultiArrayConcept&lt;/code&gt; と &lt;code&gt;boost::detail::MutableMultiArrayConcept&lt;/code&gt; はよく使うものなので Boost.ConceptCheck へ移動。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいサンプルとテストケースを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに載ってない変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;negative strideを適切に処理するために、&lt;code&gt;generate_array_view&lt;/code&gt;の&lt;code&gt;assert&lt;/code&gt;を修正(rev.53879)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_array_view&lt;/code&gt;において、合法な範囲(legal range)を考慮するとき、リサイズが空の配列から始まるのを説明する必要がある、ということで小さな修正を行った(rev.62963)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.44.0リリース以降の様々なバグを修正(rev.66403) ←なんですかそれ…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#property-tree&#34; name=&#34;property-tree&#34;&gt;Property Tree(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XMLパーサーがi18nに対応していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4340&#34; target=&#34;_blank&#34;&gt;#4340&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4602&#34; target=&#34;_blank&#34;&gt;#4602&lt;/a&gt; のバグを修正。&lt;code&gt;proto::N&lt;/code&gt; の大きな障害を取り除いた。&lt;/li&gt;
&lt;li&gt;RTTI のないコンパイラをサポート。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::matches&lt;/code&gt; の配列型とワイルドカードパターンのバグを修正。&lt;/li&gt;
&lt;li&gt;MSVC に &lt;code&gt;/clr&lt;/code&gt; オプションを付けた状態で Proto が動くように修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::eval&lt;/code&gt; のオーバーロードに const 修飾を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#serialization&#34; name=&#34;serialization&#34;&gt;Serialization(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializationの新しいバージョンをMPIで使うために同様の修正を行った(rev.65965)。&lt;/li&gt;
&lt;li&gt;XML構文を、Spirit.Qiで書き直した(rev.66030)。&lt;/li&gt;
&lt;li&gt;アーカイブバージョン1.41-, 1.42, 1.43,1.44+の互換性を修正(rev.66107)。&lt;/li&gt;
&lt;li&gt;MinGWのビルドを修正(rev.66123)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;optional attributeのSpirit.Qiデバッグ機能が壊れていたので修正&lt;/li&gt;
&lt;li&gt;Spirit.Qiの&lt;code&gt;auto&lt;/code&gt;パーサーおよびSpirit.Karmaの&lt;code&gt;auto&lt;/code&gt;ジェネレータが&lt;code&gt;signed char&lt;/code&gt;および&lt;code&gt;unsigned char&lt;/code&gt;で適切に動作するようになった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutli_pass fixed_size_queue&lt;/code&gt;ポリシーの問題を解決した。 ←問題ってなんだ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip&lt;/code&gt;ディレクティブでproper modifier handlingが可能になった。 ←何それどこにも書いてない。&lt;/li&gt;
&lt;li&gt;Spirit.Karmaの浮動小数点数フォーマットにおいて、&lt;code&gt;scientific&lt;/code&gt;モードで出力したときの値に誤差がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4742&#34; target=&#34;_blank&#34;&gt;#4742&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat&lt;/code&gt;ディレクティブ中でのパース失敗時に&lt;code&gt;first&lt;/code&gt;イテレータがリセットされない問題を修正(&lt;a href=&#34;http://stackoverflow.com/questions/4009752/boost-spirit-bug-when-mixing-alternates-with-optionals&#34; target=&#34;_blank&#34;&gt;Stack Overflowを参照&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread(+)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;リリースノートに記載されていない更新：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_time.hpp&lt;/code&gt;が、&lt;code&gt;BOOST_DATE_TIME_HAS_HIGH_PRECISION_CLOCK&lt;/code&gt;がdefinedされていることに依存した実装になっていた問題を修正。Androidでのクロスコンパイルに失敗していた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4727/&#34; target=&#34;_blank&#34;&gt;#4727&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;raceを回避するために、&lt;code&gt;promise::lazy_init&lt;/code&gt;を&lt;code&gt;shared_ptr&lt;/code&gt;のatomic accessを使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4531&#34; target=&#34;_blank&#34;&gt;#4531&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::wait&lt;/code&gt;の書き込み割り込みチェックの競合条件を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2330&#34; target=&#34;_blank&#34;&gt;#2330&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型に右辺値参照(&lt;code&gt;&amp;amp;&amp;amp;)&lt;/code&gt;を付加する&lt;code&gt;add_rvalue_reference&lt;/code&gt;メタ関数を追加。&lt;/li&gt;
&lt;li&gt;型に左辺値参照(&lt;code&gt;&amp;amp;&lt;/code&gt;)を追加する&lt;code&gt;add_lvalue_reference&lt;/code&gt;メタ関数を追加。&lt;/li&gt;
&lt;li&gt;可変個テンプレートパラメータを受け取り、それらが共通して変換可能な型を返す&lt;code&gt;common_type&lt;/code&gt;メタ関数を追加。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Boost.Ratioの実装に必要。このメタ関数の元ネタはD言語。&lt;/p&gt;
&lt;p&gt;参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kmonos.net/alang/d/2.0/phobos/std_traits.html#CommonType&#34; target=&#34;_blank&#34;&gt;template CommonType(T...) - std.traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;マイナー修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_signed&lt;/code&gt;, &lt;code&gt;is_unsigned&lt;/code&gt;メタ関数の内部で&lt;code&gt;static const T&lt;/code&gt;を使用していたのを&lt;code&gt;BOOST_STATIC_CONSTANT&lt;/code&gt;に修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_virtual_base_of&lt;/code&gt;メタ関数の内部実装で使用する型名を変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;疎行列/パックド行列の行列要素割当て時に型変換エラーが起こる可能性がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4410&#34; target=&#34;_blank&#34;&gt;#4410&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;行列/ベクトル&amp;lt;-&amp;gt;スカラー間の&lt;code&gt;operator*&lt;/code&gt;を新規に提供(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3397&#34; target=&#34;_blank&#34;&gt;#3397&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/795&#34; target=&#34;_blank&#34;&gt;#795&lt;/a&gt;を修正(何も変わっていない。rejected?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix&amp;lt;complex&amp;gt;&lt;/code&gt;と&lt;code&gt;matrix&amp;lt;double&amp;gt;&lt;/code&gt;のように異なる型同士の四則演算を追加。また、テストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3514&#34; target=&#34;_blank&#34;&gt;#3514&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;
- &lt;code&gt;size&amp;lt;&amp;gt;&lt;/code&gt;演算子。たとえば、&lt;code&gt;size&amp;lt;1&amp;gt;(A+B)&lt;/code&gt;は、行列Aと行列Bの和の行の数を表します。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix inserting from iterators which return by copy from &lt;code&gt;operator*&lt;/code&gt; in &lt;code&gt;boost::unordered_map&lt;/code&gt; and &lt;code&gt;boost::unordered_set&lt;/code&gt;. ←変更点を見たらTODOになってたので保留。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++0xでの &lt;code&gt;pp_tokens&lt;/code&gt; の定義に従って形成されたトークン（列）である場合に限りトークン連結が妥当となるようにした。今までは &lt;code&gt;--variadic&lt;/code&gt; モードにおいて、非 &lt;code&gt;pp_tokens&lt;/code&gt; に対して（訳注：トークン（列）の）形成を許していた。&lt;/li&gt;
&lt;li&gt;マクロ定義中、 &lt;code&gt;/##/&lt;/code&gt; を不正なトークン連結として prevented reporting する問題を修正&lt;/li&gt;
&lt;li&gt;&#39;inactive&#39; conditional preprocessing directive tokens に対する &lt;code&gt;skipped_token&lt;/code&gt; フック呼び出し禁止の問題を修正。 conditional preprocessing directives 処理時における、 reporting skipped tokens 中の関数フックの全体的な整合性を向上した。 skipped_token フックの呼び出しを検証する新しいテストケースを追加した(t_2_020.cpp)。&lt;/li&gt;
&lt;li&gt;真で戻ってくる場合の &#39;expanding_object_like_macro&#39;, &#39;expanding_function_like_macrol&#39; pp フックが、正しくマクロ展開を抑制せずに全ての preprocessing を停止してしまうことによる問題を修正。&lt;/li&gt;
&lt;li&gt;inactive conditional branches 内部で preprocessing directives に対して skipped_token pp フックを重複して呼びだしているのを修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::xpressive::as&amp;lt;T&amp;gt;&lt;/code&gt;が&lt;code&gt;std::wstring&lt;/code&gt;で動作していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4496&#34; target=&#34;_blank&#34;&gt;#4496&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#boostbook&#34; name=&#34;boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コードブロック終了にあるコメントのシンタックスハイライトを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_45_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンドラインマクロを修正&lt;/li&gt;
&lt;li&gt;ネストしたコードスニペット&lt;/li&gt;
&lt;li&gt;ネストしたドキュメンテーションコメント&lt;/li&gt;
&lt;li&gt;ドキュメント情報をエスケープするXMLを差し戻し。この問題はいくつかのドキュメントファイルを壊した(現在のバージョンは1.6)。&lt;/li&gt;
&lt;li&gt;他の小さな修正に関しては、&lt;a href=&#34;http://beta.boost.org/doc/html/quickbook/change_log.html#quickbook.change_log.releases.version_1_5_3___boost_1_45_0&#34; target=&#34;_blank&#34;&gt;修正履歴&lt;/a&gt;を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主要テストコンパイラ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.1. &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0. &lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1 &lt;/li&gt;
&lt;li&gt;Pathscale: 3.2. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4. &lt;/li&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0 and 10.0. &lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.3.3. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1, 32 bit. &lt;/li&gt;
&lt;li&gt;GCC: 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;追加のテストコンパイラ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.0, 4.6.0 (dev version). &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0. &lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1. &lt;/li&gt;
&lt;li&gt;pgCC 10.1. &lt;/li&gt;
&lt;li&gt;PathScale: 3.2. &lt;/li&gt;
&lt;li&gt;Clang from subversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel C++ Compiler: 10.1, 11.0, 11.1. &lt;/li&gt;
&lt;li&gt;GCC: 4.0.1, 4.2.1, 4.4.4 &lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4 &lt;/li&gt;
&lt;li&gt;Clang from subversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Borland: 5.9.3, 6.1.3 (2009), 6.2.1 (2010), 6.3.0 &lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.3.3, 4.4.5, 4.5.1 &lt;/li&gt;
&lt;li&gt;GCC, mingw, C++0x mode: 4.5.1 &lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AIX: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FreeBSD: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.2.1, 64 bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solaris: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sun C++: 5.10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, melpon, DigitalGhost, kambk, rigarash&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.50.0 リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_50_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_50_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.50.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_50_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_50_0.qbk&lt;/a&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_50_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_50_0.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/algorithm/&#34; target=&#34;_blank&#34;&gt;Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;便利なジェネリックアルゴリズム集&lt;/li&gt;
&lt;li&gt;作者：Marshall Clow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/functional/overloaded_function/&#34; target=&#34;_blank&#34;&gt;Functional/OverloadedFunction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;オーバーロードされた複数の関数を単一の関数オブジェクトにまとめるライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/local_function/&#34; target=&#34;_blank&#34;&gt;LocalFunction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;ローカルな関数を他の関数内や任意のスコープ内で定義するライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/utility/identity_type/&#34; target=&#34;_blank&#34;&gt;Utility/IdentityType&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;でラップすることでマクロのパラメータとして渡せるようにするライブラリ&lt;/li&gt;
&lt;li&gt;作者：Lorenzo Caminiti&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#fusion&#34;&gt;Fusion(+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#scope-exit&#34;&gt;ScopeExit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+が付いているものは本家のリリースノートには記載されていない変更。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インクルードが抜けていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6702&#34; target=&#34;_blank&#34;&gt;#6702&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCでコンストラクタの転送がコンパイルエラーになっていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6535&#34; target=&#34;_blank&#34;&gt;#6535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boostの開発者ガイドラインに従い、ファイル名を短くした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6196&#34; target=&#34;_blank&#34;&gt;#6196&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;※ファイル名は31文字以下でなければならない：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/accumulators/statistics/p_square_cumulative_distribution.hpp&lt;/code&gt; →  &lt;code&gt;boost/accumulators/statistics/p_square_cumul_dist.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/accumulators/statistics/weighted_p_square_cumlative_distribution.hpp&lt;/code&gt; → &lt;code&gt;boost/accumulators/statistics/weighted_p_square_cuml_dist.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#array&#34; name=&#34;array&#34;&gt;Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Hashのサポートを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6791&#34; target=&#34;_blank&#34;&gt;#6791&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EPOLL_OUT&lt;/code&gt;イベントのために、&lt;code&gt;epoll_reactor&lt;/code&gt;のバックエンドを遅延登録するよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epoll_reactor&lt;/code&gt;の帯域外データが、前回のリリースでは不完全な修正によって壊れていたので修正した&lt;/li&gt;
&lt;li&gt;Boost.AsioのSSLラッパーを、&lt;code&gt;OPENSSL_NO_ENGINE&lt;/code&gt;のdefineに配慮するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6432&#34; target=&#34;_blank&#34;&gt;#6432&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11のムーブセマンティクスをサポートするWindowsコンパイラ(g++など)のために、&lt;code&gt;windows::object_handle&lt;/code&gt;を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strand&lt;/code&gt;の再スケジューリングのパフォーマンスを向上&lt;/li&gt;
&lt;li&gt;g++4.7のC++11モードでのコンパイルをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6620&#34; target=&#34;_blank&#34;&gt;#6620&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;g++4.7で名称が変更になった&lt;code&gt;std::chrono::monotonic_clock&lt;/code&gt; → &lt;code&gt;std::chrono::steady_clock&lt;/code&gt;の差異に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;が&lt;code&gt;concurrency_hint&lt;/code&gt;を&lt;code&gt;1&lt;/code&gt;で構築した場合に、&lt;code&gt;signal_set&lt;/code&gt;が配信されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6657&#34; target=&#34;_blank&#34;&gt;#6657&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#bimap&#34; name=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;怪しいBoost.Serializationへの依存を削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3868&#34; target=&#34;_blank&#34;&gt;#3868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5749&#34; target=&#34;_blank&#34;&gt;#5749&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map views&lt;/code&gt;に&lt;code&gt;key_type&lt;/code&gt;と&lt;code&gt;mapped_type&lt;/code&gt;の&lt;code&gt;typedef&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6031&#34; target=&#34;_blank&#34;&gt;#6031&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;ただし後方互換性のために&lt;code&gt;data_type&lt;/code&gt;は残してある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::chrono::process_real_cpu_clock::now()&lt;/code&gt;が32ビット版Windowsでオーバーフローする問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6361&#34; target=&#34;_blank&#34;&gt;#6361&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clocks.hpp&lt;/code&gt;の警告を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6628&#34; target=&#34;_blank&#34;&gt;#6628&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_clock.hpp&lt;/code&gt;で&lt;code&gt;pthread.h&lt;/code&gt;のインクルードが抜けていたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6666&#34; target=&#34;_blank&#34;&gt;#6666&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;変数シャドウの警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6738&#34; target=&#34;_blank&#34;&gt;#6738&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非推奨だったv2を削除。v3への完全移行が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;修正の結果、より問題が発生したため  &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6131&#34; target=&#34;_blank&#34;&gt;#6131&lt;/a&gt; の修正を取り消した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion(+)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt;, &lt;code&gt;front_extended_deque&lt;/code&gt;, &lt;code&gt;back_extended_deque&lt;/code&gt;のドキュメントを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数の点のための&lt;code&gt;projected point strategy&lt;/code&gt;の戻り値型が間違っていたので修正&lt;/li&gt;
&lt;li&gt;セグメントとポリゴンの交差でのいくつかの信頼性問題を修正&lt;/li&gt;
&lt;li&gt;無効な交差点を出力から除外した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_polygon&lt;/code&gt;の&lt;code&gt;disjoint&lt;/code&gt;が、不正に&lt;code&gt;true&lt;/code&gt;を返してしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multi pointの代替シンタックスパッチを適用(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6585&#34; target=&#34;_blank&#34;&gt;#6585&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;MULTIPOINT ((10 40), (40 30), (20 20), (30 10))&#34;&lt;/code&gt;と&lt;code&gt;&#34;MULTIPOINT (10 40, 40 30, 20 20, 30 10)&#34;&lt;/code&gt;のどちらでも書けるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;と&lt;code&gt;linestring&lt;/code&gt;の&lt;code&gt;distance&lt;/code&gt;計算が間違っていたので修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6584&#34; target=&#34;_blank&#34;&gt;#6584&lt;/a&gt;, &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5730&#34; target=&#34;_blank&#34;&gt;#5730&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デカルトの3次元座標から球状の赤道3次元座標への変換を行うパッチを適用(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6166&#34; target=&#34;_blank&#34;&gt;#6166&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;無効な交差点が出力されてしまう問題。報告より前にtrunkで修正されていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6696&#34; target=&#34;_blank&#34;&gt;#6696&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*polygon&lt;/code&gt;/&lt;code&gt;*polygon&lt;/code&gt;のための新たなアルゴリズム&lt;code&gt;touches&lt;/code&gt;を追加(OGC SF準拠)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clear_vertex&lt;/code&gt;が自己閉路の&lt;code&gt;vertex&lt;/code&gt;でセグメンテーションフォルトする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4622&#34; target=&#34;_blank&#34;&gt;#4622&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;biconnected_components()&lt;/code&gt;による&lt;code&gt;lowpoint map&lt;/code&gt;の計算が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6033&#34; target=&#34;_blank&#34;&gt;#6033&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism()&lt;/code&gt;関数で、Iso Mappingがリセットされない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6242&#34; target=&#34;_blank&#34;&gt;#6242&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cube_topology&lt;/code&gt;のドキュメントに、3次元なのに2次元と書かれていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6435&#34; target=&#34;_blank&#34;&gt;#6435&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph_parallel&lt;/code&gt;のドキュメントにある&lt;code&gt;small_world_1_70_6_0p02.png&lt;/code&gt;が壊れていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6520&#34; target=&#34;_blank&#34;&gt;#6520&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;のコピーコンストラクタが&lt;code&gt;local_vertex&lt;/code&gt;/&lt;code&gt;local_edge&lt;/code&gt;プロパティをコピーしていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6564&#34; target=&#34;_blank&#34;&gt;#6564&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isormorphism()&lt;/code&gt;関数に巨大なグラフを与えると計算に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6573&#34; target=&#34;_blank&#34;&gt;#6573&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dijkstra Visitor Concept&lt;/code&gt;のドキュメントにあったtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6583&#34; target=&#34;_blank&#34;&gt;#6583&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;DistanceMap&#34;&lt;/code&gt; → &lt;code&gt;&#34;WeightMap&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components()&lt;/code&gt;がMSVC8でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6647&#34; target=&#34;_blank&#34;&gt;#6647&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;の実装で、依存名に&lt;code&gt;typename&lt;/code&gt;が付いていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6656&#34; target=&#34;_blank&#34;&gt;#6656&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_straight_line_drawing.hpp&lt;/code&gt;で&lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;のインクルードが抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6707&#34; target=&#34;_blank&#34;&gt;#6707&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_straight_line_drawing.hpp&lt;/code&gt;の&lt;code&gt;boost::intersects()&lt;/code&gt;関数でシンボルの重複エラーが出ていたので&lt;code&gt;inline&lt;/code&gt;を付けた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6708&#34; target=&#34;_blank&#34;&gt;#6708&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constified subgraph&lt;/code&gt;を&lt;code&gt;write_graphviz_dp()&lt;/code&gt;を使用して出力できない(コンパイルエラーになる)問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6739&#34; target=&#34;_blank&#34;&gt;#6739&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;reverse_graphに対するboost::get()がg++でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6858&#34; target=&#34;_blank&#34;&gt;#6858&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bron_kerbosch_all_cliques()はVertexIndexGraphConceptを満たす必要がないので要件を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6892&#34; target=&#34;_blank&#34;&gt;#6892&lt;/a&gt;)その他、Tracに含まれていないいくつかの警告とバグを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;と&lt;code&gt;std::tuple&lt;/code&gt;のサポートを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6806&#34; target=&#34;_blank&#34;&gt;#6806&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCにおける&lt;code&gt;-Wfloat-equal&lt;/code&gt;警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6771&#34; target=&#34;_blank&#34;&gt;#6771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/functional/detail/container_fwd.hpp&lt;/code&gt;に非推奨である旨の警告を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iostreams&#34; name=&#34;iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gzipのサポート (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5908&#34; target=&#34;_blank&#34;&gt;#5908&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最新のBoost.Filesystem及びBoost.Testのテストに更新&lt;/li&gt;
&lt;li&gt;幾つかのドキュメントのエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6530&#34; target=&#34;_blank&#34;&gt;#6530&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6650&#34; target=&#34;_blank&#34;&gt;#6650&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform_iterator&lt;/code&gt;のドキュメントでの&lt;code&gt;result_of&lt;/code&gt;の使い方が正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5127&#34; target=&#34;_blank&#34;&gt;#5127&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterator_facade::operator-&amp;gt;&lt;/code&gt;がproxy referencesに対して正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5697&#34; target=&#34;_blank&#34;&gt;#5697&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;MultiArray&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Conceptのバグ修正とVisual Studio 2010向けのワークアラウンド(&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/78496&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert.cpp&lt;/code&gt;のテストケース修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/78498&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::bad_lexical_cast&lt;/code&gt;例外は現在グローバルに見えるので&lt;code&gt;-fvisibility=hidden&lt;/code&gt;でコンパイルされていてもキャッチできる&lt;/li&gt;
&lt;li&gt;例外を無効にしていてもコンパイル、使用が可能になった (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5800&#34; target=&#34;_blank&#34;&gt;#5800&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::iterator_range&amp;lt;character_type*&amp;gt;&lt;/code&gt;の変換に対してメモリ使用量を減らしバグを修正しパフォーマンスを改善した&lt;/li&gt;
&lt;li&gt;バグと警告の修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6645&#34; target=&#34;_blank&#34;&gt;#6645&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6562&#34; target=&#34;_blank&#34;&gt;#6562&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6812&#34; target=&#34;_blank&#34;&gt;#6812&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6852&#34; target=&#34;_blank&#34;&gt;#6852&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6717&#34; target=&#34;_blank&#34;&gt;#6717&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6670&#34; target=&#34;_blank&#34;&gt;#6770&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6504&#34; target=&#34;_blank&#34;&gt;#6504&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STLPortを使用した場合でのビルドの問題を修正&lt;/li&gt;
&lt;li&gt;Boost.Systemが依存ライブラリとなった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTFエンコード関数が&lt;code&gt;OutputIterator&lt;/code&gt;に間違った型の値を渡している (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6635&#34; target=&#34;_blank&#34;&gt;#6635&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ICUの名前空間をつけ忘れている箇所がある (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6833&#34; target=&#34;_blank&#34;&gt;#6833&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数学定数を第1級クラスに：ビルトインへの便利なアクセス方法も含む&lt;/li&gt;
&lt;li&gt;Benjamin Sobottaにより、OwenのT関数とSkew標準分散を追加&lt;/li&gt;
&lt;li&gt;Hankel関数を追加&lt;/li&gt;
&lt;li&gt;K R Walkerのパッチをベースにして&lt;code&gt;0.0&lt;/code&gt;における&lt;code&gt;nonfinite_num_put&lt;/code&gt;のフォーマットを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6627&#34; target=&#34;_blank&#34;&gt;#6627&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ユーザー定義型でもスレッドセーフになるように定数初期化メカニズムを変更、また&lt;code&gt;long double&lt;/code&gt;型でなくともユーザー定義型の定数が最大精度を得られるように変更例えば&lt;code&gt;long double&lt;/code&gt;が64または80bitであっても、128bit有理数への近似がユーザー定義型で動作する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y[sub 8.5](4π)&lt;/code&gt;で&lt;code&gt;bessel_iy&lt;/code&gt;関数が&lt;code&gt;NaN&lt;/code&gt;になってしまう問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;eUML : eUMLで遷移表としてのみ定義されたフロントエンドのためのよりよい構文。&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;注意：破壊的変更！&lt;/span&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正： グラフ構築がシーケンスとして定義されたinitial_stateでのみ動作していた&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;Terminate&lt;/code&gt;か&lt;code&gt;Interrupt&lt;/code&gt;状態のために定義されたフラグが、これらの状態のブロッキング関数を壊さないようにした&lt;/li&gt;
&lt;li&gt;バグ修正： いくつかの領域からの多重遅延イベント(multiple deferred event)が、全てのケースで動作するとは限らなかった&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;visitor&lt;/code&gt;が、サブマシンに値渡しを行っていた&lt;/li&gt;
&lt;li&gt;バグ修正： &lt;code&gt;no_transition&lt;/code&gt;が、それ自身にイベントを送るサブマシンのためには呼ばれなかった&lt;/li&gt;
&lt;li&gt;GCCの警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;エラーレポートの強化(Leo Goodstadt氏の&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/77827&#34; target=&#34;_blank&#34;&gt;Patch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ヘルプメッセージ中のオプション値の名前のカスタマイズをサポート (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4781&#34; target=&#34;_blank&#34;&gt;#4781&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCC4.7でのコンパイルエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6790&#34; target=&#34;_blank&#34;&gt;#6790&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#property-map&#34; name=&#34;property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメント中の&lt;code&gt;get()&lt;/code&gt;の戻り値が正しくなかったのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6539&#34; target=&#34;_blank&#34;&gt;#6539&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map_traits&lt;/code&gt;のドキュメントが&lt;code&gt;reference&lt;/code&gt;に関して記述されていなかったのを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6721&#34; target=&#34;_blank&#34;&gt;#6721&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;N3276を実装しているコンパイラにかぎり、&lt;code&gt;decltype&lt;/code&gt;ベースの&lt;code&gt;result_of&lt;/code&gt;を使うようにした&lt;/li&gt;
&lt;li&gt;C++11向けに, &lt;code&gt;mpl::eval_if_c&lt;/code&gt;と&lt;code&gt;mpl::if_c&lt;/code&gt;の評価型が強制的に&lt;code&gt;bool&lt;/code&gt;になるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__forceinline&lt;/code&gt;による、「指定された関数がインライン展開の対象として選択されましたが、実際にはインライン展開されませんでした。」という警告がmsvcで出ないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::ratio&lt;/code&gt;がデフォルト設定でコンパイルされない問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6498&#34; target=&#34;_blank&#34;&gt;#6498&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#scope-exit&#34; name=&#34;scope-exit&#34;&gt;ScopeExit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャプチャにカンマ区切りリストを使用できるように可変長マクロを使用 (後方互換性のためにシーケンス構文でのキャプチャもサポート)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_&lt;/code&gt;の使用によるオブジェクトのキャプチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void&lt;/code&gt;の使用による空のキャプチャをサポート&lt;/li&gt;
&lt;li&gt;コンパイラがC++11のlambdaをサポートする場合、&lt;code&gt;BOOST_SCOPE_EXIT_ALL&lt;/code&gt;で暗黙的なlambdaに似たキャプチャをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#spirit&#34; name=&#34;spirit&#34;&gt;Spirit&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;廃止予定だったヘッダを除去した。このヘッダは2,3年間そのままだったが、そろそろクリーンアップの時期になったからである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock_guard&lt;/code&gt;/&lt;code&gt;unique_lock&lt;/code&gt;に対応する&lt;code&gt;unlock_guard&lt;/code&gt;のリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/1850&#34; target=&#34;_blank&#34;&gt;#1850&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;に&lt;code&gt;timed_lock&lt;/code&gt;と&lt;code&gt;timed_lock_shared&lt;/code&gt;メンバをリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2637&#34; target=&#34;_blank&#34;&gt;#2637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ポータブル及びポータブルではないスレッド属性の対応の提案(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2741&#34; target=&#34;_blank&#34;&gt;#2741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_lock_guard&lt;/code&gt;のリクエスト(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/3567&#34; target=&#34;_blank&#34;&gt;#3567&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boost.Moveベースのムーブセマンティクスへの変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6194&#34; target=&#34;_blank&#34;&gt;#6194&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;時間関係のインターフェースをBoost.Chronoで実装(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6195&#34; target=&#34;_blank&#34;&gt;#6195&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;Howard Hinnantが提案したインターフェースに&lt;code&gt;shared_mutex&lt;/code&gt;を拡張(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6217&#34; target=&#34;_blank&#34;&gt;#6217&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;をコンパイラがサポートしている場合&lt;code&gt;noexcept&lt;/code&gt;を指定(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6224&#34; target=&#34;_blank&#34;&gt;#6224&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;locks&lt;/code&gt;に明示的な&lt;code&gt;bool&lt;/code&gt;型への変換を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6226&#34; target=&#34;_blank&#34;&gt;#6226&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promise&lt;/code&gt;にアロケータ指定可能なコンストラクタを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6228&#34; target=&#34;_blank&#34;&gt;#6228&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;C++11標準で定められた例外の通知方法に変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6230&#34; target=&#34;_blank&#34;&gt;#6230&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;のデストラクタは&lt;code&gt;joinable&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す場合に&lt;code&gt;terminate&lt;/code&gt;を呼ぶ様に変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6266&#34; target=&#34;_blank&#34;&gt;#6266&lt;/a&gt;)(C++11標準への追従)(&lt;strong&gt;破壊的変更&lt;/strong&gt;)→ デフォルトではこれまで通りの&lt;code&gt;detach&lt;/code&gt;動作。&lt;code&gt;BOOST_THREAD_PROVIDES_THREAD_DESTRUCTOR_CALLS_TERMINATE_IF_JOINABLE&lt;/code&gt;を&lt;code&gt;define&lt;/code&gt;することで新しい動作に切り替えることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;はムーブ代入時に&lt;code&gt;joinable&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返す場合に&lt;code&gt;terminate&lt;/code&gt;を呼ぶように変更(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6269&#34; target=&#34;_blank&#34;&gt;#6269&lt;/a&gt;)(C++11標準への追従)(&lt;strong&gt;破壊的変更&lt;/strong&gt;)→ デフォルトではこれまで通りの動作。&lt;code&gt;BOOST_THREAD_PROVIDES_THREAD_MOVE_ASSIGN_CALLS_TERMINATE_IF_JOINABLE&lt;/code&gt;を&lt;code&gt;define&lt;/code&gt;することで新しい動作に切り替えることができる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::id&lt;/code&gt;用の&lt;code&gt;hash&lt;/code&gt;の特殊化を用意(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6272&#34; target=&#34;_blank&#34;&gt;#6272&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;条件変数の&lt;code&gt;wait&lt;/code&gt;系関数用の&lt;code&gt;cv_status&lt;/code&gt;列挙型を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6273&#34; target=&#34;_blank&#34;&gt;#6273&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;BasicLockagle&lt;/code&gt;要件に関する記述を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6231&#34; target=&#34;_blank&#34;&gt;#6231&lt;/a&gt;)(C++11標準への追従)&lt;/li&gt;
&lt;li&gt;C++11標準向けに&lt;code&gt;once_flag&lt;/code&gt;を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6342&#34; target=&#34;_blank&#34;&gt;#6342&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;に&lt;code&gt;mutex&lt;/code&gt;と&lt;code&gt;release&lt;/code&gt;メンバが不足していたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6671&#34; target=&#34;_blank&#34;&gt;#6671&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;に時間をメンバに取るコンストラクタが不足していたのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6672&#34; target=&#34;_blank&#34;&gt;#6672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrade_lock&lt;/code&gt;用のフリー関数版&lt;code&gt;swap&lt;/code&gt;が無かったのを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6675&#34; target=&#34;_blank&#34;&gt;#6675&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;に&lt;code&gt;result_type&lt;/code&gt;とアロケータを取るコンストラクタが不足していたのを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task::reset()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Itanium環境でリンク等に失敗する(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/2575&#34; target=&#34;_blank&#34;&gt;#2575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;をカスケードした状態で&lt;code&gt;thread::id&lt;/code&gt;を使用しながら&lt;code&gt;join&lt;/code&gt;すると適切に&lt;code&gt;join&lt;/code&gt;されない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4345&#34; target=&#34;_blank&#34;&gt;#4345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_USE_DLL&lt;/code&gt;及び&lt;code&gt;BOOST_THREAD_USE_LIB&lt;/code&gt;は重大であるにもかかわらずアンドキュメントである(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4921&#34; target=&#34;_blank&#34;&gt;#4921&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;中で&lt;code&gt;pthread_exit&lt;/code&gt;を呼ぶと&lt;code&gt;terminate&lt;/code&gt;が呼ばれるのをドキュメント化(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5013&#34; target=&#34;_blank&#34;&gt;#5013&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::get_id&lt;/code&gt;が非常に遅い(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5173&#34; target=&#34;_blank&#34;&gt;#5173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;を&lt;code&gt;interrupt&lt;/code&gt;すると&lt;code&gt;unknown_exception&lt;/code&gt;が投げられる(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5351&#34; target=&#34;_blank&#34;&gt;#5351&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;read lockが行われている状態で前の&lt;code&gt;upgrade_lock&lt;/code&gt;が解放を行っても&lt;code&gt;upgrade_lock&lt;/code&gt;が取得を行わない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5516&#34; target=&#34;_blank&#34;&gt;#5516&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_future&amp;lt;T&amp;gt;::get()&lt;/code&gt;が正しくない戻り値型になっている(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5990&#34; target=&#34;_blank&#34;&gt;#5990&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がムーブした結果を受け取る事ができない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6174&#34; target=&#34;_blank&#34;&gt;#6174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SunStudioにおいて&lt;code&gt;unique_future&lt;/code&gt;のムーブがコンパイルエラーになる(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6222&#34; target=&#34;_blank&#34;&gt;#6222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11環境で&lt;code&gt;shared_lock&lt;/code&gt;のムーブ代入が正しく動作しない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6673&#34; target=&#34;_blank&#34;&gt;#6673&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;の&lt;code&gt;try_lock_upgrade_until&lt;/code&gt;が正しく動作しない(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6674&#34; target=&#34;_blank&#34;&gt;#6674&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ML上で指摘された&lt;code&gt;task_object&lt;/code&gt;のムーブコンストラクタの存在下で&lt;code&gt;task_object&lt;/code&gt;のコピーコンストラクタが削除される問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;と&lt;code&gt;unordered_multimap&lt;/code&gt;の等価比較関数を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt;を実装 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6857&#34; target=&#34;_blank&#34;&gt;#6857&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wfloat-equal&lt;/code&gt;と&lt;code&gt;-Wshadow&lt;/code&gt;による警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6190&#34; target=&#34;_blank&#34;&gt;#6190&lt;/a&gt;) (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6771&#34; target=&#34;_blank&#34;&gt;#6771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;bcpで正しく展開されない名前空間の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6905&#34; target=&#34;_blank&#34;&gt;#6905&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SunStudio12.3でのコンパイルエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6784&#34; target=&#34;_blank&#34;&gt;#6784&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Bucket allocationのために内部の一部を変更&lt;/li&gt;
&lt;li&gt;すべての変更点は /doc/html/unordered/changes.html#unordered.changes.boost_1_50_0 を参照のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V2.3.2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部のメンバを &lt;code&gt;base_iteration_context&lt;/code&gt; コンストラクタで初期化していなかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6758&#34; target=&#34;_blank&#34;&gt;#6758&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force_include&lt;/code&gt; で追加したインクルードファイルが &lt;code&gt;#line&lt;/code&gt; ディレクティブを失敗させる問題の修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6838&#34; target=&#34;_blank&#34;&gt;#6838&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;testwave に &lt;code&gt;--forceinclude&lt;/code&gt; オプションのテスト用サポートを入れて，#6838 の修正確認のためのテストケースを追加&lt;/li&gt;
&lt;li&gt;wave ドライバのビルドに失敗するのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6870&#34; target=&#34;_blank&#34;&gt;#6870&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_50_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非常に醜い&lt;code&gt;lexical_cast&lt;/code&gt;ハックをまぁ我慢できるものに置きかえた&lt;/li&gt;
&lt;li&gt;C++11で問題になるMPL &lt;code&gt;assert&lt;/code&gt;を&lt;code&gt;static assert&lt;/code&gt;に置きかえたことで、 &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6846&#34; target=&#34;_blank&#34;&gt;#6846&lt;/a&gt; が修正された。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode:4.3.4, 4.4.3, 4.5.4, 4.6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;Intel: 11.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1 (32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX&lt;ul&gt;
&lt;li&gt;QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテスト済みコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;Visual Age: 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 10.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5 with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x mode, mingw: 4.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V12.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1 (32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solaris&lt;ul&gt;
&lt;li&gt;Sun: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak, Flast, DigitalGhost&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.52.0 リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_52_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_52_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.52.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_52_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_52_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_52_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_52_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#datetime&#34;&gt;Date Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#function&#34;&gt;Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#proto&#34;&gt;Proto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#result-of&#34;&gt;Result Of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オリジナルのtagを実装する時に既存のタグを継承すると、依存性がその意図した通りに解決されない長年の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7409&#34; target=&#34;_blank&#34;&gt;#7409&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;訳者注：このバグは2008年の6月から存在していた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.4のSFINAEがあまりにもバギーだったので、&lt;code&gt;BOOST_NO_SFINAE_EXPR&lt;/code&gt;を定義した&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrono I/Oの強化。これはHoward Hinnantによって提案された機能である(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5980&#34; target=&#34;_blank&#34;&gt;#5980&lt;/a&gt;, &lt;a href=&#34;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&#34; target=&#34;_blank&#34;&gt;proposal&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&lt;/code&gt;フォーマット状態のためのio state saverを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5981&#34; target=&#34;_blank&#34;&gt;#5981&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;低レベルのI/O機能群を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7059&#34; target=&#34;_blank&#34;&gt;#7059&lt;/a&gt;)非推奨機能&lt;/li&gt;
&lt;li&gt;Boost.Chrono 1.2.xに含まれるchrono i/o。これはバージョン2.0でリファクタリングされている。&lt;/li&gt;
&lt;li&gt;chrono i/o ： マニピュレータ&lt;code&gt;duration_short&lt;/code&gt;および&lt;code&gt;duration_long&lt;/code&gt;を非推奨とする。代わりにパラメータ化された&lt;code&gt;duration_fmt&lt;/code&gt;、もしくは名前変更されたマニピュレータ&lt;code&gt;duration_style::symbol&lt;/code&gt;および&lt;code&gt;duration_style::prefix&lt;/code&gt;を推奨する。&lt;/li&gt;
&lt;li&gt;chrono i/o ： &lt;code&gt;duration_punct&amp;lt;&amp;gt;&lt;/code&gt;ファセットを非推奨とする。ローカライズ用途には、&lt;code&gt;get_duration_style&lt;/code&gt;フリー関数で情報を取得し、&lt;code&gt;duration_units&lt;/code&gt;ファセットを使用する必要がある。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CHRONO_VERSION==2&lt;/code&gt;の場合には、非推奨機能は使用できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠 ： &lt;code&gt;constexpr duration&lt;/code&gt;から非&lt;code&gt;const&lt;/code&gt;ローカル変数への代入で、未解決シンボルになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7381&#34; target=&#34;_blank&#34;&gt;#7381&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修正なし&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrono_io.hpp&lt;/code&gt; ： &lt;code&gt;operator&amp;lt;&amp;lt;(ostream&amp;amp; os, …)&lt;/code&gt;によって&lt;code&gt;os&lt;/code&gt;の状態が変更される。バージョン2.0で提供される新たなI/Oではこの問題が解決される。新たなバージョンに移行する必要がある(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6871&#34; target=&#34;_blank&#34;&gt;#6871&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Betaリリース後に追加された修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラが&lt;code&gt;constexpr&lt;/code&gt;を対応しているが、標準ライブラリインターフェースが&lt;code&gt;constexpr&lt;/code&gt;に対応していない場合のコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7479&#34; target=&#34;_blank&#34;&gt;#7479&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stable_vector&lt;/code&gt;のテンプレートコード膨張と型安全性を改良した&lt;/li&gt;
&lt;li&gt;doxygenドキュメントを改良するために、シーケンスコンテナのtypedefを変更し、関数の並びを変えた&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;ドキュメントのリンクを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6615&#34; target=&#34;_blank&#34;&gt;#6615&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;flat_multimap&lt;/code&gt;のドキュメントで、比較述語の型が&lt;code&gt;std::less&amp;lt; std::pair&amp;lt; Key, T&amp;gt; &amp;gt;&lt;/code&gt;と記述されていたので、&lt;code&gt;std::less&amp;lt;Key&amp;gt;&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7139&#34; target=&#34;_blank&#34;&gt;#7139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string::insert()&lt;/code&gt;が返すイテレータが、標準と異なり、+1の位置を返すようになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7215&#34; target=&#34;_blank&#34;&gt;#7215&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;範囲を引数にとる&lt;code&gt;Container::insert()&lt;/code&gt;メンバ関数が、C++11からイテレータを返す仕様になったためその機能を実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7232&#34; target=&#34;_blank&#34;&gt;#7232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;範囲を引数にとる&lt;code&gt;vector::insert()&lt;/code&gt;メンバ関数が、逆順で挿入されたりクラッシュしたりする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7269&#34; target=&#34;_blank&#34;&gt;#7269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map&lt;/code&gt;/&lt;code&gt;set::insert(ordered_unique_range_t, …)&lt;/code&gt;の挙動がおかしかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7439&#34; target=&#34;_blank&#34;&gt;#7439&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11の、範囲を引数にとる&lt;code&gt;insert()&lt;/code&gt;メンバ関数がイテレータを返すという仕様を実装し、ほとんどのコンテナの挿入コードをクリーンナップした&lt;/li&gt;
&lt;li&gt;エイリアシングエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#datetime&#34; name=&#34;datetime&#34;&gt;Date Time&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_DATE_TIME_NO_LIB&lt;/code&gt;をドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6077&#34; target=&#34;_blank&#34;&gt;#6077&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nth_as_str()&lt;/code&gt;関数内で、AND条件をORで書いていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7022&#34; target=&#34;_blank&#34;&gt;#7022&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7234&#34; target=&#34;_blank&#34;&gt;#7234&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#foreach&#34; name=&#34;foreach&#34;&gt;Foreach&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCでのアライメント警告を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#function&#34; name=&#34;function&#34;&gt;Function&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタとムーブ代入演算子を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7330&#34; target=&#34;_blank&#34;&gt;#7330&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;C++11で右辺値参照が使える環境のみサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grid_graph&lt;/code&gt;のドキュメントに「2次元以上」と記載していたが、そんな制限はなかったのでドキュメントを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6950&#34; target=&#34;_blank&#34;&gt;#6950&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;辺の&lt;a href=&#34;http://stackoverflow.com/questions/2592769/what-is-the-relaxation-condition-in-graph-theory&#34; target=&#34;_blank&#34;&gt;緩和条件(relaxation condition)&lt;/a&gt;を判定する&lt;code&gt;relax.hpp&lt;/code&gt;の&lt;code&gt;relax()&lt;/code&gt;関数において、先行マップが変更された場合でも&lt;code&gt;false&lt;/code&gt;を返してしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7226&#34; target=&#34;_blank&#34;&gt;#7226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バンドルプロパティに継承関係のあるクラスを指定した場合、基本クラスのメンバを使おうとするとコンパイルエラーになっていた。バンドルプロパティの取得・設定には、指定した型のみではなく継承関係にある型を許可するよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7308&#34; target=&#34;_blank&#34;&gt;#7308&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テンプレートパラメータの&lt;code&gt;Graph&lt;/code&gt;から直接&lt;code&gt;null_vertex()&lt;/code&gt;を呼び出していたのを、&lt;code&gt;graph_traits&lt;/code&gt;を経由するよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7327&#34; target=&#34;_blank&#34;&gt;#7327&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt;/&lt;code&gt;indirect_cmp&lt;/code&gt;の戻り値型が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7338&#34; target=&#34;_blank&#34;&gt;#7338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コア数を計算する&lt;code&gt;weighted_core_numbers()&lt;/code&gt;アルゴリズムで、正しい使用方法にも関わらず&lt;code&gt;out_of_range&lt;/code&gt;例外が送出されていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7341&#34; target=&#34;_blank&#34;&gt;#7341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lookup_one_property_internal&lt;/code&gt;プロパティクラスが&lt;code&gt;type&lt;/code&gt;型を持っていなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7378&#34; target=&#34;_blank&#34;&gt;#7378&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astar_search_no_init()&lt;/code&gt;の名前付き引数バージョンから通常のバージョンを呼び出す際に、&lt;code&gt;color&lt;/code&gt;パラメータと&lt;code&gt;index_map&lt;/code&gt;パラメータを逆に渡していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7380&#34; target=&#34;_blank&#34;&gt;#7380&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;/&lt;code&gt;dijkstra_shortest_paths_no_color_map()&lt;/code&gt;において、無限の重さは正しく動作する保証がないことをドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7398&#34; target=&#34;_blank&#34;&gt;#7398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正(#&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7428&#34; target=&#34;_blank&#34;&gt;7428&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アクシデントにより&lt;code&gt;enum&lt;/code&gt;のサポートが削除されたのをリストア (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7437&#34; target=&#34;_blank&#34;&gt;#7437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;新しい浮動小数点数用&lt;code&gt;hasher&lt;/code&gt;を用意&lt;ul&gt;
&lt;li&gt;バイナリを&lt;code&gt;hash&lt;/code&gt;することで多くのプラットフォームで高速に動作するようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;に&lt;code&gt;shrink_by()&lt;/code&gt;関数と&lt;code&gt;advise()&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;ABI破壊&lt;/span&gt;： &lt;code&gt;circular buffer index&lt;/code&gt;で&lt;code&gt;message_queue&lt;/code&gt;を再実装(古い実装では、順序付けされた配列を過度にコピーしていた)。これはパフォーマンスを大幅に改善するが、ABIは壊れる。古い挙動とABIが必要な場合は、&lt;code&gt;boost/interprocess/detail/workaround.hpp&lt;/code&gt;の&lt;code&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/code&gt;をundefineすること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message_queue&lt;/code&gt;への挿入時間を改善。一般的なケースでの優先探索を回避(配列と循環バッファ両方の構成)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interproces_sharable_mutex&lt;/code&gt;と&lt;code&gt;interproces_condition_any&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_ptr&lt;/code&gt;のパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;整数のオーバーフローチェックを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンストラクタで関数が呼ばれて１つ要素が食われていたのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5825&#34; target=&#34;_blank&#34;&gt;#5825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_input_iterator&lt;/code&gt;のドキュメントのエラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7194&#34; target=&#34;_blank&#34;&gt;#7194&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5825&#34; target=&#34;_blank&#34;&gt;#5825&lt;/a&gt; を修正するに伴い、不必要な関数の実行は行われなくなった。例えば、終端イテレータの生成に関数は実行されない。つまり、イテレータの参照外しとインクリメントをN回実行すれば関数はN+1回ではなくN回実行される。古い挙動に関連しているユーザコードは調整する必要がある。&lt;ul&gt;
&lt;li&gt;訳者注：このバグの修正方法では参照外しとインクリメントはセットで行わなければならない。つまり、イテレータのインクリメントだけを行なって読み飛ばそうとすると&lt;code&gt;BOOST_ASSERT&lt;/code&gt;によりアサートが発生する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexycal_cast(const CharType* chars, std::size_t count)&lt;/code&gt; というオーバーロードを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6663&#34; target=&#34;_blank&#34;&gt;#6663&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7228&#34; target=&#34;_blank&#34;&gt;#7228&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1.51.0でMSVC2003でコンパイルできなくなったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7255&#34; target=&#34;_blank&#34;&gt;#7255&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与えられた分布に対して&lt;code&gt;moments(mean, variance, …)&lt;/code&gt;が定義されていない場合、それを求めようとするとコンパイルエラーも例外も吐かずに数学的に間違っている値を返したりする問題を修正。長い議論の末、全ての&lt;code&gt;moments&lt;/code&gt;は数学的なポリシーに沿わない場合、&lt;code&gt;domain_error&lt;/code&gt;を投げる（例外が無効な場合はNaNを返す）ことに既になっていた。よってこのバグはそれにあたって解決されている。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7177&#34; target=&#34;_blank&#34;&gt;#7177&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;多くの分布で不正な値を検出するルーチンが間違っていた問題を &lt;code&gt;check_out_of_range&lt;/code&gt; を実装できる機能を追加したことで修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6934&#34; target=&#34;_blank&#34;&gt;#6934&lt;/a&gt;) 。これに付随して、不正な値を検出できていなかった分布が更に発見され、同時に修正されている。&lt;/li&gt;
&lt;li&gt;Hankel 関数で &lt;code&gt;x &amp;lt; 0&lt;/code&gt; かつ&lt;code&gt;ν&lt;/code&gt; が奇数の場合に不正な値が返される問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7135&#34; target=&#34;_blank&#34;&gt;#7135&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::math::isfinite&lt;/code&gt; が &lt;code&gt;unsigned int 0&lt;/code&gt; に対して &lt;code&gt;false&lt;/code&gt; を返す問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6517&#34; target=&#34;_blank&#34;&gt;#6517&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCC 4.4で &lt;code&gt;bessel_ik.hpp&lt;/code&gt; 内の匿名&lt;code&gt;enum&lt;/code&gt;による問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6362&#34; target=&#34;_blank&#34;&gt;#6362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Boostによる必要なマクロ等の定義後に &lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt; をインクルードしていたことによって Boost.TR1 がうまく動かない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7053&#34; target=&#34;_blank&#34;&gt;#7053&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Golden ratio等を数学的な定数のリストに新たに追加する提案をfixedとしてマーク。このチケットは相当に古く、現在のバージョンでは phi として既に実装されているため。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2693&#34; target=&#34;_blank&#34;&gt;#2693&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdf&lt;/code&gt;/&lt;code&gt;pdf&lt;/code&gt;/&lt;code&gt;quantile&lt;/code&gt; による 問題のある分布のチェックが不正だった問題は、不正な値を検出するルーチンの改良によって既に修正された。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6937&#34; target=&#34;_blank&#34;&gt;#6937&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;浮動小数点数のビット数が小さい特定のコンパイラでそれによって例外が投げられる問題のcompiler workaround (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7099&#34; target=&#34;_blank&#34;&gt;#7099&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decltype&lt;/code&gt;ベースの&lt;code&gt;boost::result_of&lt;/code&gt;が動作するようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#phoenix&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ボロノイ図に関する拡張機能を追加&lt;/li&gt;
&lt;li&gt;新たな&lt;code&gt;Segment&lt;/code&gt;コンセプトを導入&lt;/li&gt;
&lt;li&gt;コンパイルエラーを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#proto&#34; name=&#34;proto&#34;&gt;Proto&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;データパラメータのプリミティブな変換は &lt;code&gt;key&lt;/code&gt; でインデックスされたスロットを持つこともできるようになった&lt;/li&gt;
&lt;li&gt;プリミティブな変換は &lt;code&gt;const&lt;/code&gt; 参照されていないtemporary expressionにも適用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;とBoost.Rangeに存在する幾つかのフリー関数について、呼び出し可能な関数オブジェクトの型を追加&lt;/li&gt;
&lt;li&gt;Protoのexpression nodesにMPLのalgorithmが動くようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto::pass_through&lt;/code&gt; プリミティブ変換は、&lt;code&gt;Domain&lt;/code&gt; テンプレートパラメータを新たに取るようになった。これによって結果の表現についてのドメインを指定できるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short_name&lt;/code&gt; と &lt;code&gt;long_name&lt;/code&gt; 関数はそれぞれ &lt;code&gt;symbol&lt;/code&gt; と &lt;code&gt;prefix&lt;/code&gt; 関数に置き換えられた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;非推奨&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ratio_string&amp;lt;&amp;gt;::short_name&lt;/code&gt; と &lt;code&gt;ratio_string&amp;lt;&amp;gt;::long_name&lt;/code&gt; は非推奨となった。それぞれ &lt;code&gt;ratio_string&amp;lt;&amp;gt;::symbol&lt;/code&gt; と &lt;code&gt;ratio_string&amp;lt;&amp;gt;::prefix&lt;/code&gt; を使用することが推奨される。非推奨となった関数は1.55まで提供される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ベータリリース後に追加された修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンパイラが&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;に対応しているが、標準ライブラリが&lt;code&gt;std::u16string&lt;/code&gt;と&lt;code&gt;std::u32string&lt;/code&gt;に対応していない場合のコンパイルエラーを修正 (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7478&#34; target=&#34;_blank&#34;&gt;#7478&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#result-of&#34; name=&#34;result-of&#34;&gt;Result Of&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decltype&lt;/code&gt;が”満足に動作する”のであれば&lt;code&gt;boost::result_of&lt;/code&gt;は&lt;code&gt;decltype&lt;/code&gt;で実装される。つまりコンパイラがn3276の提案を実装していることが要求される&lt;ul&gt;
&lt;li&gt;現在、n3276を実装しているのは非常に最近のコンパイラであるClang 3.1のみである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::result_of&lt;/code&gt;が&lt;code&gt;decltype&lt;/code&gt;で実装されているのであればn3436で実装される&lt;ul&gt;
&lt;li&gt;n3436の提案は&lt;code&gt;result_of&lt;/code&gt;でSFINAEできるようにする提案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;廃止予定機能&lt;/span&gt;： Boost 1.50.0からBoost 1.55.0まで利用可能な廃止予定機能。これらの廃止予定機能は、Boost 1.52.0までデフォルトで提供される。非推奨機能が必要ない場合は、&lt;code&gt;BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0&lt;/code&gt;をdefineすればよい。1.53.0移行で廃止予定機能を使いたい場合は、&lt;code&gt;BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0&lt;/code&gt;をdefineすること。これらの廃止予定機能は、Boost 1.55.0までの提供なので、1年以内に新機能に移行すること。&lt;ul&gt;
&lt;li&gt;時間関連の関数にBoost.DateTimeライブラリを使わず、代わりにChronoオーバーロードを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_VERSION==3&lt;/code&gt;での破壊的変更(Boost 1.53.0からのデフォルト)： いくつかの新機能は、インタフェースが同じで挙動が異なる。&lt;code&gt;BOOST_THREAD_VERSION&lt;/code&gt;が3の場合でも、マクロによる動作切り替えで限定的に2の機能を提供する。廃止予定機能はBoost 1.55.0まで利用可能である。&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;C++11準拠&amp;amp;破壊的変更&lt;/span&gt;： &lt;code&gt;unique_future&lt;/code&gt;を、C++11に従って&lt;code&gt;future&lt;/code&gt;に名前変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6229&#34; target=&#34;_blank&#34;&gt;#6229&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;C++11準拠&amp;amp;破壊的変更&lt;/span&gt;： &lt;code&gt;thread&lt;/code&gt;のデストラクタは、&lt;code&gt;join&lt;/code&gt;可能な状態で呼び出されたら&lt;code&gt;terminate&lt;/code&gt;を呼ぶようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6266&#34; target=&#34;_blank&#34;&gt;#6266&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;C++11準拠&amp;amp;破壊的変更&lt;/span&gt;： &lt;code&gt;thread&lt;/code&gt;のムーブ代入は、&lt;code&gt;join&lt;/code&gt;可能な状態で呼び出されたら&lt;code&gt;terminate&lt;/code&gt;を呼ぶようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6269&#34; target=&#34;_blank&#34;&gt;#6269&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： 不足していた&lt;code&gt;async()&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4710&#34; target=&#34;_blank&#34;&gt;#4710&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;notify_all_at_thread_exit&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7283&#34; target=&#34;_blank&#34;&gt;#7283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;recursive mutex&lt;/code&gt;の&lt;code&gt;try_lock&lt;/code&gt;に&lt;code&gt;noexcept&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7345&#34; target=&#34;_blank&#34;&gt;#7345&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;thread_specific_ptr&lt;/code&gt;のキーの本質、計算量、論拠をドキュメント化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2361&#34; target=&#34;_blank&#34;&gt;#2361&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_specific_ptr&lt;/code&gt;の2つの問題を修正： 1. dllでスレッドが使われる場合、スレッドローカルストレージのクリーンナップコードが呼ばれる前にdllがアンロードされるとクラッシュする。 2. 微妙にリークしてる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2797&#34; target=&#34;_blank&#34;&gt;#2797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future.hpp&lt;/code&gt;のコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5274&#34; target=&#34;_blank&#34;&gt;#5274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WIndows CE 6.0上でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5431&#34; target=&#34;_blank&#34;&gt;#5431&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once&lt;/code&gt;が、いくつかのプラットフォームで動作しない可能性があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5752&#34; target=&#34;_blank&#34;&gt;#5752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threadライブラリのビルドで、&lt;code&gt;date_time&lt;/code&gt;が自動的にビルドされない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7045&#34; target=&#34;_blank&#34;&gt;#7045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;誤字修正：ドキュメントで&lt;code&gt;interrupt_point()&lt;/code&gt;と書いていたところを&lt;code&gt;interruption_point()&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7173&#34; target=&#34;_blank&#34;&gt;#7173&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;libs以下にあるテストコード中で、&lt;code&gt;#include &amp;lt;libs/thread/src/pthread/timeconv.inl&amp;gt;&lt;/code&gt;のようなパス指定でインクルードを行っていた。これはCMakeで問題になるので、相対パスでインクルードするようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7200&#34; target=&#34;_blank&#34;&gt;#7200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;インライン関数に&lt;code&gt;dllimport&lt;/code&gt;を指定していて警告が出ていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7220&#34; target=&#34;_blank&#34;&gt;#7220&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::sleep_for()&lt;/code&gt;が&lt;code&gt;interrupt()&lt;/code&gt;に対応してなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7238&#34; target=&#34;_blank&#34;&gt;#7238&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バージョン3関連のドキュメントtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7245&#34; target=&#34;_blank&#34;&gt;#7245&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;win32/thread_primitives.hpp&lt;/code&gt;の、Intel C++ compiler 12.1での警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7272&#34; target=&#34;_blank&#34;&gt;#7272&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared mutex&lt;/code&gt;に対する&lt;code&gt;lock&lt;/code&gt;と&lt;code&gt;shared lock&lt;/code&gt;へのアクセスには優先順位がないことを明記(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7284&#34; target=&#34;_blank&#34;&gt;#7284&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/thread/future.hpp&lt;/code&gt;がHPUXでコンパイルエラーになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7329&#34; target=&#34;_blank&#34;&gt;#7329&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/code&gt;が動作していなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7336&#34; target=&#34;_blank&#34;&gt;#7336&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がアロケータを指定された場合、アロケータへの参照をメンバに保持していたので、コピーを保持するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7349&#34; target=&#34;_blank&#34;&gt;#7349&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packaged_task&lt;/code&gt;がアロケータを指定された場合、デストラクタを呼んでいなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7350&#34; target=&#34;_blank&#34;&gt;7350&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inplace_solve()&lt;/code&gt;のパフォーマンス向上(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4024&#34; target=&#34;_blank&#34;&gt;#4024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coordinate_matrix::sort()&lt;/code&gt;がGCC 4.7でコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7363&#34; target=&#34;_blank&#34;&gt;#7363&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;内部で&lt;code&gt;std::inplace_merge()&lt;/code&gt;を使用していたが、&lt;code&gt;index_triple&lt;/code&gt;のイテレータはプロキシオブジェクトを返すため、標準アルゴリズムの要件を満たしていなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要素の追加時に既存のノードを再利用できる時は再利用するようにした&lt;/li&gt;
&lt;li&gt;その他、実装のリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区間を&lt;code&gt;erase&lt;/code&gt;するときにクラッシュしていたのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7471&#34; target=&#34;_blank&#34;&gt;#7471&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;警告、エラーを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6118&#34; target=&#34;_blank&#34;&gt;#6118&lt;/a&gt;), (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6788&#34; target=&#34;_blank&#34;&gt;#6788&lt;/a&gt;), (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7375&#34; target=&#34;_blank&#34;&gt;#7375&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ベータリリース後に追加された修正&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;536,870,912バイト以上のメッセージに対して&lt;code&gt;sha1.hpp&lt;/code&gt;が正しく計算できていなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7128&#34; target=&#34;_blank&#34;&gt;#7128&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_52_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::filesystem::create_directories()&lt;/code&gt; の仕様変更に応じて &lt;code&gt;util::create_directories()&lt;/code&gt; を新たに定義した&lt;/li&gt;
&lt;li&gt;直前の行が空のマクロの展開だけの場合、プリプロセス時の文脈が認識されなくなる、非常に発見しづらいバグを修正 （テスト t_9_023.cpp を追加）&lt;/li&gt;
&lt;li&gt;新たなオプション &lt;code&gt;--license=&amp;lt;file&amp;gt;&lt;/code&gt; を追加。これによって、生成される新しいファイル全ての先頭に対して &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; の中身をプリペンドできるようになった。これはPhoenixやFusionで使用されている部分的なプリプロセッシングの実装を簡単にする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt; オプションの動作を変更。以前はマクロ自体が無いものとして扱われていたが、この変更によってマクロ展開全てはスキップされず、引数の展開は行い、そのマクロ自身の展開のみ行わないようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Xpressive&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sub_match&lt;/code&gt;をBoost.Rangeで動作するようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7237&#34; target=&#34;_blank&#34;&gt;#7237&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0, 12.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;GCC: 4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテスト済みコンパイラ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Cray: 8.0&lt;/li&gt;
&lt;li&gt;LLVM Clang: from subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang:&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.0, 12.1&lt;ul&gt;
&lt;li&gt;Visual Age: 10.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X&lt;ul&gt;
&lt;li&gt;LLVM Clang: subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang, C++11 mode: subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.4&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;li&gt;GCC, MinGW: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: V12.1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1(32/64bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solaris&lt;ul&gt;
&lt;li&gt;Sun: 5.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Kohei Takahashi, Akira Takahashi, manga_osyo, Nana Sakisaka(saki7)&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.53.0 リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_53_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_53_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.53.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_53_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_53_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Atomic&lt;ul&gt;
&lt;li&gt;Helge Bahmannによる、C++11スタイルの&lt;code&gt;atomic&lt;/code&gt;ライブラリ。Tim Blechmannによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coroutine&lt;ul&gt;
&lt;li&gt;Oliver Kowalkeによるコルーチンライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lockfree&lt;ul&gt;
&lt;li&gt;Tim Blechmannによるロックフリーデータ構造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiprecision&lt;ul&gt;
&lt;li&gt;John MaddockとChristopher Kormanyosによる、拡張精度の算術型演算(浮動小数点数型、整数型、有理数型)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Odeint&lt;ul&gt;
&lt;li&gt;Karsten AhnertとMario Mulanskyによる、常微分方程式ライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#array&#34;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#gil&#34;&gt;GIL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#locale&#34;&gt;Locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#minmax&#34;&gt;MinMax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#random&#34;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#range&#34;&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#string-algo&#34;&gt;String Algo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#array&#34; name=&#34;array&#34;&gt;Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::get&lt;/code&gt;と&lt;code&gt;std::get&lt;/code&gt;をサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7652&#34; target=&#34;_blank&#34;&gt;#7652&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#algorithm&#34; name=&#34;algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非ASCIIのコメントを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7781&#34; target=&#34;_blank&#34;&gt;#7781&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Knuth-Morris-Prattのドキュメントを更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7656&#34; target=&#34;_blank&#34;&gt;#7656&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの64ビットから32ビットへの変換警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7459&#34; target=&#34;_blank&#34;&gt;#7459&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントとコメントの小さな間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7761&#34; target=&#34;_blank&#34;&gt;#7761&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket::get_option()&lt;/code&gt;のドキュメントにある例で、古い関数を使用していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7562&#34; target=&#34;_blank&#34;&gt;#7562&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OpenSSLに合わせて、&lt;code&gt;SSL_CTX&lt;/code&gt;に使用する型を&lt;code&gt;long&lt;/code&gt;から&lt;code&gt;int&lt;/code&gt;に変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7209&#34; target=&#34;_blank&#34;&gt;#7209&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のMinGWバージョンでは、&lt;code&gt;_snwprintf&lt;/code&gt;がコンパイルエラーとなるため、&lt;code&gt;swprintf&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7373&#34; target=&#34;_blank&#34;&gt;#7373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で&lt;code&gt;io_service&lt;/code&gt;のスレッドプールをシャットダウンするときに、デッドロックする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7552&#34; target=&#34;_blank&#34;&gt;#7552&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;修飾子を使うようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7797&#34; target=&#34;_blank&#34;&gt;#7797&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;UNIXドメインソケットの例で、&lt;code&gt;accept&lt;/code&gt;が致命的なエラーにならないよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7488&#34; target=&#34;_blank&#34;&gt;#7488&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトメモリアロケーションの振る舞いを改善するために、小さいブロックの再利用をする最適化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#bimap&#34; name=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;エラーメッセージを改善するために、&lt;code&gt;map_view_iterator&lt;/code&gt;をリファクタ&lt;/li&gt;
&lt;li&gt;情報で比較する際の&lt;code&gt;replace_&lt;/code&gt;(&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt;/&lt;code&gt;data&lt;/code&gt;)のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector_of&lt;/code&gt;ビューと&lt;code&gt;list_of&lt;/code&gt;ビューの&lt;code&gt;assign(size_type,value_type)&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector_of&lt;/code&gt;ビューの&lt;code&gt;operator[](size_type)&lt;/code&gt;と&lt;code&gt;at(size_type)&lt;/code&gt;の戻り値を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;非推奨&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Chrono 1.2.xに含まれていたchrono i/oを、2.0で完全にリファクタリングした&lt;/li&gt;
&lt;li&gt;chrono i/o : &lt;code&gt;duration_short&lt;/code&gt;、&lt;code&gt;duration_long&lt;/code&gt;マニピュレータを非推奨にした。その代わりに、パラメータ付きのフォーマットマニピュレータである&lt;code&gt;duration_fmt&lt;/code&gt;、もしくは名前変更したマニピュレータである&lt;code&gt;duration_symbol&lt;/code&gt;、&lt;code&gt;duration_prefix&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;li&gt;chrono i/o : &lt;code&gt;duration_punct&amp;lt;&amp;gt;&lt;/code&gt;ファセットを非推奨にした。代わりに、情報取得のために&lt;code&gt;get_duration_style&lt;/code&gt;フリー関数、ローカライズのために&lt;code&gt;duration_units&lt;/code&gt;ファセットを使用すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_CHRONO_VERSION==2&lt;/code&gt;とした場合、非推奨機能は使用できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time_point&amp;lt;system_clock&amp;gt;&lt;/code&gt;の出力バージョンがコンパイルに失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7546&#34; target=&#34;_blank&#34;&gt;#7546&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&amp;lt;system_clock&amp;gt;&lt;/code&gt;の入力バージョンがコンパイルに失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7547&#34; target=&#34;_blank&#34;&gt;#7547&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;chrono i/oで時間の解析が不完全だった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7868&#34; target=&#34;_blank&#34;&gt;#7868&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list::const_iterator&lt;/code&gt;の&lt;code&gt;operator-&amp;gt;()&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7650&#34; target=&#34;_blank&#34;&gt;#7650&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;の挿入パフォーマンスを改善&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために、実験的にマルチアロケーションのインタフェースを再度変更(まだ実験)&lt;/li&gt;
&lt;li&gt;例外無効化の環境に対応&lt;/li&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ARMのiOS、x86(32ビット)のMacOS Xのサポートを追加&lt;/li&gt;
&lt;li&gt;Win32のSEH上書き保護サポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部リングが最小サイズ以下の場合(たとえば、1か2個の点)に、ポリゴンの生成を回避するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::disjoint&lt;/code&gt;へのセグメント縮退(Karsten Ahnertによるパッチ)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::difference&lt;/code&gt;で、正接のハンドリングが不足していた問題を修正(H2からの報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::for_each&lt;/code&gt;でのラムダを使用を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::comparable_distance&lt;/code&gt;の&lt;code&gt;point-linestring&lt;/code&gt;、&lt;code&gt;point-range&lt;/code&gt;、&lt;code&gt;point-polygon&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geometry::disjoint&lt;/code&gt;の組み合わせ： &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;ring&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multi_polygon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometry::intersects&lt;/code&gt;の組み合わせ： &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;ring&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;point&lt;/code&gt;/&lt;code&gt;multi_polygon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;様々なアルゴリズムの特殊バージョンと未実装バージョンを更新(以前のバージョンから引き続いての変更。これらは構造を簡略化し、より良いエラー報告をし、ドキュメント化の自動的に行う)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#gil&#34; name=&#34;gil&#34;&gt;GIL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自己代入の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4919&#34; target=&#34;_blank&#34;&gt;#4919&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kolmogorov_max_flow()&lt;/code&gt;がmax flow値を見つけてこない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3468&#34; target=&#34;_blank&#34;&gt;#3468&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7728&#34; target=&#34;_blank&#34;&gt;#7728&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アルゴリズムの要件が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4386&#34; target=&#34;_blank&#34;&gt;#4386&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_search()&lt;/code&gt;に、&lt;code&gt;on_finish_edge&lt;/code&gt;イベントを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5269&#34; target=&#34;_blank&#34;&gt;#5269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7428&#34; target=&#34;_blank&#34;&gt;#7428&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kamada_kawai_spring_layout.hpp&lt;/code&gt;のコメント誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7457&#34; target=&#34;_blank&#34;&gt;#7457&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph&lt;/code&gt;/&lt;code&gt;reverse_graph.hpp&lt;/code&gt;の不要なセミコロンを削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7467&#34; target=&#34;_blank&#34;&gt;#7467&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_graph&lt;/code&gt;に対する&lt;code&gt;add_vertex()&lt;/code&gt;関数のオーバーロードが曖昧になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7600&#34; target=&#34;_blank&#34;&gt;#7600&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/graph/labeled_graph.hpp&lt;/code&gt;内の誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7648&#34; target=&#34;_blank&#34;&gt;#7648&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/graph/tiernan_all_cycles.hpp&lt;/code&gt;内の誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7684&#34; target=&#34;_blank&#34;&gt;#7684&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Graph&lt;/code&gt;コンセプトの、必須ではない関連型を要件から削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7741&#34; target=&#34;_blank&#34;&gt;#7741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small_world_iterator&lt;/code&gt;のドキュメントに、デフォルト引数が記載されていない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7771&#34; target=&#34;_blank&#34;&gt;#7771&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inserted_labeled_vertex()&lt;/code&gt;でプロパティが追加されていなかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7773&#34; target=&#34;_blank&#34;&gt;#7773&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Push Relabel Max Flowのドキュメント上のサンプルにあった誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7780&#34; target=&#34;_blank&#34;&gt;#7780&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Graph&lt;/code&gt;コンセプトのドキュメントで、&lt;code&gt;examples/undirected.cpp&lt;/code&gt;へのリンクが切れていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7787&#34; target=&#34;_blank&#34;&gt;#7787&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;その他、Tracにないいくつかのバグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数のグラフを含むGraphMLの読み込みをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A*&lt;/code&gt;検索の新バージョンを追加。具体的にはツリーや、同じ頂点を何度も通ることを許可するために、必要ならカラーマップを削除する。&lt;/li&gt;
&lt;li&gt;VF2 subgraph isomorphismアルゴリズムを追加(Flavio De Lorenziに感謝する！)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用可能な環境で&lt;code&gt;boost::int128_type&lt;/code&gt;と&lt;code&gt;boost::uint128_type&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;プラットフォームが標準の浮動小数点数関数を持っている場合は、自動推論を使用しないようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7221&#34; target=&#34;_blank&#34;&gt;#7221&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7470&#34; target=&#34;_blank&#34;&gt;#7470&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために、実験的にマルチアロケーションのインタフェースを再度変更(まだ実験)&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;li&gt;[&lt;span style=&#34;color:red;&#34;&gt;ABI破壊&lt;/span&gt;] 効率改善のため、ノードプールアロケータを内部的に変更&lt;/li&gt;
&lt;li&gt;ファイルマッピングのデータ構造を作る際、小さいサイズを指定するとクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7795&#34; target=&#34;_blank&#34;&gt;#7795&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCCの&lt;code&gt;-Wshadow&lt;/code&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7174&#34; target=&#34;_blank&#34;&gt;#7174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;等値キーの要素が挿入される位置についてドキュメントに記載(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7529&#34; target=&#34;_blank&#34;&gt;#7529&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/intrusive/detail/has_member_function_callable_with.hpp&lt;/code&gt;でのコンパイルエラーを修正。&lt;code&gt;const&lt;/code&gt;付きの型を継承していた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7815&#34; target=&#34;_blank&#34;&gt;#7815&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;侵入コンテナのコンストラクタに、不足していた&lt;code&gt;explicit&lt;/code&gt;を付けた&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザー定義クラスのための、新たな文字型(&lt;code&gt;char16_t&lt;/code&gt;/&lt;code&gt;char32_t&lt;/code&gt;)検出アルゴリズム(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6786&#34; target=&#34;_blank&#34;&gt;#6786&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7582&#34; target=&#34;_blank&#34;&gt;#7582&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7831&#34; target=&#34;_blank&#34;&gt;#7831&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::array&lt;/code&gt;の変換が、最適化の効かない書き方になっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7799&#34; target=&#34;_blank&#34;&gt;#7799&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;g++で&lt;code&gt;-ftrapvオプション&lt;/code&gt; (trap overflow errors : オーバーフローを検知して&lt;code&gt;abort()&lt;/code&gt;させる)をつけるとエラーになるケースを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7814&#34; target=&#34;_blank&#34;&gt;#7814&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#locale&#34; name=&#34;locale&#34;&gt;Locale&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;セキュリティ関連のバグ修正。いくつかの不正なUTF-8シーケンスを、有効なものとして受け入れていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7743&#34; target=&#34;_blank&#34;&gt;#7743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsのコードページ名として不正な名前を使用していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7386&#34; target=&#34;_blank&#34;&gt;#7386&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Doxygenのフォーマットミスによって、ドキュメントが不足していたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7734&#34; target=&#34;_blank&#34;&gt;#7734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの場所で &lt;code&gt;std::&lt;/code&gt; 指定が抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7701&#34; target=&#34;_blank&#34;&gt;#7701&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかの誤字と、英語の構文を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7368&#34; target=&#34;_blank&#34;&gt;#7368&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7762&#34; target=&#34;_blank&#34;&gt;#7762&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;問題点の修正：&lt;ul&gt;
&lt;li&gt;Lanczos近似の背景ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7325&#34; target=&#34;_blank&#34;&gt;#7325&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atanh()&lt;/code&gt;の正の値を渡した場合、&lt;code&gt;domain_error&lt;/code&gt;例外が送出されるべきだが、&lt;code&gt;overflow&lt;/code&gt;例外が送出されていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7415&#34; target=&#34;_blank&#34;&gt;#7415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asinh()&lt;/code&gt;のエラーポリシーとして&lt;code&gt;ignore_error&lt;/code&gt;を設定していても、大きな負数を渡すと&lt;code&gt;overflow&lt;/code&gt;例外が送出されてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7416&#34; target=&#34;_blank&#34;&gt;#7416&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;FBSD環境での&lt;code&gt;isinf()&lt;/code&gt;のコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7183&#34; target=&#34;_blank&#34;&gt;#7183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/math/constants/calculate_constants.hpp&lt;/code&gt;ヘッダのコメント誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7649&#34; target=&#34;_blank&#34;&gt;#7649&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math/minimax/main.cpp&lt;/code&gt;に、インクルードするヘッダが足りていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7694&#34; target=&#34;_blank&#34;&gt;#7694&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float_advance()&lt;/code&gt;に非正規化数として0を設定するとスタックオーバーフローする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4445&#34; target=&#34;_blank&#34;&gt;#4445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;libc++でコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7492&#34; target=&#34;_blank&#34;&gt;#7492&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;two-sample students tの例が間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7402&#34; target=&#34;_blank&#34;&gt;#7402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complex&lt;/code&gt;の&lt;code&gt;acos&lt;/code&gt;/&lt;code&gt;asin&lt;/code&gt;/&lt;code&gt;atan&lt;/code&gt;を改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7290&#34; target=&#34;_blank&#34;&gt;#7290&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7291&#34; target=&#34;_blank&#34;&gt;#7291&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_j&lt;/code&gt;と&lt;code&gt;gamma_p&lt;/code&gt;/&lt;code&gt;gamma_q&lt;/code&gt;のいくつかのコーナーケースで精度を改善。Rocco Romeoに感謝する。&lt;/li&gt;
&lt;li&gt;整数でのベッセルJとYの精度を改善。Rocco Romeoに感謝する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#minmax&#34; name=&#34;minmax&#34;&gt;MinMax&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;カンマ演算子の誤用を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7752&#34; target=&#34;_blank&#34;&gt;#7752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント上の壊れたリンクを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7751&#34; target=&#34;_blank&#34;&gt;#7751&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/move/move.hpp&lt;/code&gt;に全ての機能を入れていたので、&lt;code&gt;core.hpp&lt;/code&gt;と&lt;code&gt;utility.hpp&lt;/code&gt;に分離した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6524&#34; target=&#34;_blank&#34;&gt;#6524&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの小さな修正&lt;/li&gt;
&lt;li&gt;非推奨マクロ&lt;code&gt;BOOST_NO_XXXX&lt;/code&gt;の代わりに&lt;code&gt;BOOST_NO_CXX11_XXX&lt;/code&gt;を使用するよう置き換えた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uninitialized_move()&lt;/code&gt;の実装に、例外のチェックが抜けていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7830&#34; target=&#34;_blank&#34;&gt;#7830&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マクロの不足と間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7832&#34; target=&#34;_blank&#34;&gt;#7832&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::polygon::contains()&lt;/code&gt;が、含まれていても&lt;code&gt;false&lt;/code&gt;を返す場合があったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6366&#34; target=&#34;_blank&#34;&gt;#6366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::polygon::belongs()&lt;/code&gt;の、ODR違反によるリンクエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7678&#34; target=&#34;_blank&#34;&gt;#7678&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;/&lt;code&gt;segment&lt;/code&gt;/&lt;code&gt;interval&lt;/code&gt;と&lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;をリファクタ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point&lt;/code&gt;と&lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;区間のユニットテストを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform.hpp&lt;/code&gt;の2次元操作を簡略化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point_3d&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;/&lt;code&gt;concept&lt;/code&gt;/&lt;code&gt;traits&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#random&#34; name=&#34;random&#34;&gt;Random&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例外が無効な状態で、コンパイルが通るように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5399&#34; target=&#34;_blank&#34;&gt;#5399&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#range&#34; name=&#34;range&#34;&gt;Range&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range/any_range.hpp&lt;/code&gt;にインクルードが不足している問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5603&#34; target=&#34;_blank&#34;&gt;#5603&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_n&lt;/code&gt;の実装詳細名前空間が&lt;code&gt;boost::range::range_detail&lt;/code&gt;になっていたので、他に合わせて&lt;code&gt;boost::range_detail&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6103&#34; target=&#34;_blank&#34;&gt;#6103&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのドキュメント修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#ratio&#34; name=&#34;ratio&#34;&gt;Ratio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラステンプレート&lt;code&gt;br_mul&lt;/code&gt;のメンバ変数&lt;code&gt;nan&lt;/code&gt;の初期値のシフト演算において、シフトカウントがマイナスになったり、大きすぎる数になった場合に、未定義動作を引き起こすという警告が発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7616&#34; target=&#34;_blank&#34;&gt;#7616&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_u32regex()&lt;/code&gt;のUTF-8検証が不十分だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7744&#34; target=&#34;_blank&#34;&gt;#7744&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc4.7.2でC++11オプションを有効にした際の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7644&#34; target=&#34;_blank&#34;&gt;#7644&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#smart-pointers&#34; name=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Glen Fernandes氏による、配列用の&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;実装を取り込んだ。これにより、デフォルト初期化と値なし初期化についてのオーバーロードと同じく、コンストラクタ実引数かinitializer listで初期化されうる配列についてのシングルアロケーションが可能になった。詳細はこちら[&lt;a href=&#34;http://www.boost.org/doc/libs/1_53_0/libs/smart_ptr/make_shared_array.html&#34; target=&#34;_blank&#34;&gt;/libs/smart_ptr/make_shared_array.html make_shared and allocate_shared for arrays&lt;/a&gt;]を参照のこと。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を、配列へのポインタを保持できるようにした。これには、テンプレートパラメータで配列型(&lt;code&gt;T[]&lt;/code&gt;もしくは&lt;code&gt;T[N]&lt;/code&gt;)を指定する。&lt;/li&gt;
&lt;li&gt;C++11コンパイラでは&lt;code&gt;explicit operator bool()&lt;/code&gt;を使用するようにした。これは、以下のようなケースでコードを破壊する：  1. &lt;code&gt;bool&lt;/code&gt;をとる関数にスマートポインタを渡しているコード  2. &lt;code&gt;bool&lt;/code&gt;を返す関数でスマートポインタを返しているコードこのようなケースでは、 &lt;code&gt;p != 0&lt;/code&gt; もしくは &lt;code&gt;!!p&lt;/code&gt; を使用してください&lt;/li&gt;
&lt;li&gt;[追加リリースノート] だいぶ前から非推奨だった&lt;code&gt;shared_ptr&lt;/code&gt;の&lt;code&gt;value_type&lt;/code&gt;を削除した。代わりに&lt;code&gt;element_type&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#string-algo&#34; name=&#34;string-algo&#34;&gt;String Algo&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;パターンがオーバーラップしている時に、オーバーラップしている箇所がヒットしない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7784&#34; target=&#34;_blank&#34;&gt;#7784&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;あいまいな&lt;code&gt;insert&lt;/code&gt;呼び出しを排除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7346&#34; target=&#34;_blank&#34;&gt;#7346&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;廃止された機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost 1.53で廃止された機能はboost 1.58までは利用可能である&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task&amp;lt;R&amp;gt;&lt;/code&gt;を廃止した。以降は&lt;code&gt;packaged_task&amp;lt;R()&amp;gt;&lt;/code&gt;を使うこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mutex::scoped_lock&lt;/code&gt;、&lt;code&gt;scoped_try_lock&lt;/code&gt;、&lt;code&gt;boost::condition&lt;/code&gt;を廃止にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7537&#34; target=&#34;_blank&#34;&gt;#7537&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： ムーブ可能な関数オブジェクトと実引数をとれる&lt;code&gt;thread&lt;/code&gt;コンストラクタを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6270&#34; target=&#34;_blank&#34;&gt;#6270&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： システムまわりの関数に&lt;code&gt;noexcept&lt;/code&gt;をつけた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7279&#34; target=&#34;_blank&#34;&gt;#7279&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;promise&lt;/code&gt;::&lt;code&gt;…at_thread_exit&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7280&#34; target=&#34;_blank&#34;&gt;#7280&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task&lt;/code&gt;テンプレートに&lt;code&gt;ArgTypes&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7281&#34; target=&#34;_blank&#34;&gt;#7281&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;packaged_task::make_ready_at_thread_exit&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7282&#34; target=&#34;_blank&#34;&gt;#7282&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： ムーブ可能な関数オブジェクトと実引数をとれる&lt;code&gt;async&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7412&#34; target=&#34;_blank&#34;&gt;#7412&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;launch&lt;/code&gt;ポリシーが&lt;code&gt;defferred&lt;/code&gt;のとき、&lt;code&gt;async&lt;/code&gt;を追加する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7413&#34; target=&#34;_blank&#34;&gt;#7413&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;future::get&lt;/code&gt; の事後条件が &lt;code&gt;valid()==false&lt;/code&gt; になるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7414&#34; target=&#34;_blank&#34;&gt;#7414&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ゼロオーバーヘッドな&lt;code&gt;condition_variable&lt;/code&gt;を提供(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7422&#34; target=&#34;_blank&#34;&gt;#7422&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Async: &lt;code&gt;make_future&lt;/code&gt;と&lt;code&gt;make_shared_future&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7444&#34; target=&#34;_blank&#34;&gt;#7444&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thread: デストラクタで&lt;code&gt;thread&lt;/code&gt;を&lt;code&gt;join&lt;/code&gt;するヘルパークラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7540&#34; target=&#34;_blank&#34;&gt;#7540&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thread: デストラクタで&lt;code&gt;thread&lt;/code&gt;を&lt;code&gt;join&lt;/code&gt;する&lt;code&gt;thread&lt;/code&gt;のラッパークラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7541&#34; target=&#34;_blank&#34;&gt;#7541&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;async&lt;/code&gt;で作成した&lt;code&gt;future&lt;/code&gt;がデストラクタで&lt;code&gt;join&lt;/code&gt;するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7575&#34; target=&#34;_blank&#34;&gt;#7575&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: &lt;code&gt;strict_lock&lt;/code&gt;と&lt;code&gt;nested_strict_lock&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7587&#34; target=&#34;_blank&#34;&gt;#7587&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: 依存関係を制限するために&lt;code&gt;locks.hpp&lt;/code&gt;を分割した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7588&#34; target=&#34;_blank&#34;&gt;#7588&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: Boost.ConceptCheckを利用して&#34;ロック可能コンセプト&#34;チェッカーを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7590&#34; target=&#34;_blank&#34;&gt;#7590&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable_if&lt;/code&gt;で使える&#34;ロック可能トレイト&#34;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7591&#34; target=&#34;_blank&#34;&gt;#7591&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: なにもしない、&lt;code&gt;UpgardeLockable&lt;/code&gt;コンセプトに適合する&lt;code&gt;null_mutex&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7592&#34; target=&#34;_blank&#34;&gt;#7592&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchro: &lt;code&gt;externally_locked&lt;/code&gt;クラスを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7593&#34; target=&#34;_blank&#34;&gt;#7593&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threads: スレッド中断禁止設定を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7590&#34; target=&#34;_blank&#34;&gt;#7594&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回帰テストツールで、データ競合によって&lt;code&gt;BOOST_TEST(n_alive == 1);&lt;/code&gt;が失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7464&#34; target=&#34;_blank&#34;&gt;#7464&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::generations&lt;/code&gt;メンバ関数が&lt;code&gt;notify_one&lt;/code&gt;か&lt;code&gt;notify_all&lt;/code&gt;を呼び続ける状態になり、メモリー消費とパフォーマンスに甚大な影響を及してしまう(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7657&#34; target=&#34;_blank&#34;&gt;#7657&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スレッド内で&lt;code&gt;this_thread::sleep_for&lt;/code&gt; はもう&lt;code&gt;steady_clock&lt;/code&gt;を使わない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7665&#34; target=&#34;_blank&#34;&gt;#7665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_group::join_all()&lt;/code&gt;は&lt;code&gt;thread&lt;/code&gt;が&lt;code&gt;join&lt;/code&gt;可能かチェックすべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7668&#34; target=&#34;_blank&#34;&gt;#7668&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_group::join_all()&lt;/code&gt;は&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;を&lt;code&gt;catch&lt;/code&gt;すべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7669&#34; target=&#34;_blank&#34;&gt;#7669&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lockable_traits.hpp&lt;/code&gt;の&#34;defined&#34;トークンがtypoしている(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7672&#34; target=&#34;_blank&#34;&gt;#7672&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::future&lt;/code&gt;の&lt;code&gt;set_wait_callback&lt;/code&gt;のスレッドセーフ問題(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7798&#34; target=&#34;_blank&#34;&gt;#7798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this_thread::sleep_for&lt;/code&gt;と&lt;code&gt;this_thread::sleep_until&lt;/code&gt;の説明が正しくない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7808&#34; target=&#34;_blank&#34;&gt;#7808&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cv_status::no_timeout&lt;/code&gt;が&lt;code&gt;rel_time&lt;/code&gt;で指定した時間を越えたときに返却されている。&lt;code&gt;cv_status::timeout&lt;/code&gt;であるべき(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7812&#34; target=&#34;_blank&#34;&gt;#7812&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::id&lt;/code&gt;に、シンボル可視の属性が付いていなかったことによる警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7874&#34; target=&#34;_blank&#34;&gt;#7874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED&lt;/code&gt;をデフォルトで有効にするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7875&#34; target=&#34;_blank&#34;&gt;#7875&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;)&lt;/code&gt;で発生する例外のメッセージが不適切だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7882&#34; target=&#34;_blank&#34;&gt;#7882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread::do_try_join_until()&lt;/code&gt;に戻り値の型が抜けていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7890&#34; target=&#34;_blank&#34;&gt;#7890&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準以前の古いvariadic pairコンストラクタのサポートを外し、同等の実装をしなおした。いずれもBoost 1.48からdeprecated指定である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;erase&lt;/code&gt;のより単純な実装の導入や、deprecated指定されていたコンフィグマクロの除去など、内部実装をさらに変更した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字列への所有権を持たない参照を保持する&lt;code&gt;string_ref&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11環境に対してのみだが、ムーブコンストラクタとムーブ代入演算子を追加した。Variantライブラリは今、コピー不可でムーブ可なオブジェクトが使用できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7620&#34; target=&#34;_blank&#34;&gt;#7620&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7576&#34; target=&#34;_blank&#34;&gt;#7576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context&amp;lt;&amp;gt;::add_macro_definition&lt;/code&gt;がマクロ置換リストにまれに余計な&lt;code&gt;T_EOF&lt;/code&gt;を追加する問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近のスマートポインタに対応するための修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7809&#34; target=&#34;_blank&#34;&gt;#7809&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_53_0.html#build&#34; name=&#34;build&#34;&gt;Build&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Qt5ツールセット&lt;/li&gt;
&lt;li&gt;rccサポートを改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7576&#34; target=&#34;_blank&#34;&gt;#7576&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.1&lt;/li&gt;
&lt;li&gt;LLVM Clang: 2.8&lt;/li&gt;
&lt;li&gt;LLVM Clang, with libc++: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;GCC: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 9.0, 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1, 32 and 64 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加のテストコンパイラ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Cray: 4.6.1&lt;/li&gt;
&lt;li&gt;Clang: from subversion&lt;/li&gt;
&lt;li&gt;LLVM Clang, with libc++: 3.2&lt;/li&gt;
&lt;li&gt;GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2&lt;/li&gt;
&lt;li&gt;pgCC: 11.9&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.1, 12.1&lt;/li&gt;
&lt;li&gt;Intel, C++11 mode: 13.0.1&lt;/li&gt;
&lt;li&gt;Visual Age:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: from subversion&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: from subversion&lt;/li&gt;
&lt;li&gt;Intel: 11.1, 12.0&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;Visual C++: 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++ with STLport: 9.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX:&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: V12.1.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Takatoshi Kondo, zak&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.54.0リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_54_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_54_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.54.0リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_54_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_54_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Log&lt;ul&gt;
&lt;li&gt;Andrey Semashevによる、ロギングライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TTI&lt;ul&gt;
&lt;li&gt;Edward Dienerによる、型特性の内省ライブラリ(Type Traits Introspection)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type Erasure&lt;ul&gt;
&lt;li&gt;Steven Watanabeによる、コンセプトに基づいた実行時多相性のライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#range&#34;&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ニュース&lt;/h2&gt;
&lt;p&gt;Boostはこのバージョンから、80386ターゲットCPUをサポートしない。x86 32ビットの最小サポートはi486となる。&lt;/p&gt;
&lt;p&gt;80386ターゲットは、このリリース以前からBoost.SmartPtrとBoost.Atomicで適切なサポートがされていなかった。&lt;/p&gt;
&lt;p&gt;いくつかのBoostライブラリ(たとえばBoost.Log)は、CPUに求める要件を定めているので、詳細は各ライブラリのドキュメントを参照すること。&lt;/p&gt;
&lt;p&gt;x86 32ビットターゲットのデフォルトでは、i686(Pentium Pro)とそれ以降でビルドされる。これはb2とbjamのコマンドラインオプションで変更指定できる。例：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;選択可能な命令セットは以下である：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ホストCPUのターゲット: native&lt;/li&gt;
&lt;li&gt;汎用x86 CPU: i486, i586, i686&lt;/li&gt;
&lt;li&gt;Intel CPU: pentium, pentium-mmx, pentiumpro, pentium2, pentium3, pentium3m, pentium-m, pentium4, pentium4m, prescott, nocona, core2, corei7, corei7-avx, core-avx-i, conroe, conroe-xe, conroe-l, allendale, merom, merom-xe, kentsfield, kentsfield-xe, penryn, wolfdale, yorksfield, nehalem, sandy-bridge, ivy-bridge, haswell, atom&lt;/li&gt;
&lt;li&gt;AMD CPU: k6, k6-2, k6-3, athlon, athlon-tbird, athlon-4, athlon-xp, athlon-mp, k8, opteron, athlon64, athlon-fx, k8-sse3, opteron-sse3, athlon64-sse3, amdfam10, barcelona, bdver1, bdver2, bdver3, btver1, btver2&lt;/li&gt;
&lt;li&gt;VIA CPU: c3, c3-2&lt;/li&gt;
&lt;li&gt;IDT CPU: winchip-c6, winchip2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;非推奨ライブラリ&lt;/h2&gt;
&lt;p&gt;Boost 1.54.0から、Boost.Signalsが非推奨となる。まだ削除はされない。&lt;/p&gt;
&lt;p&gt;Boost.Signals2に移行すること。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コメントのtypoを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7917&#34; target=&#34;_blank&#34;&gt;#7917&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6926&#34; target=&#34;_blank&#34;&gt;#6926&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#algorithm&#34; name=&#34;algorithm&#34;&gt;Algorithm&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;copy_while&lt;/code&gt;と&lt;code&gt;copy_until&lt;/code&gt;の戻り型を変更した。これはインターフェースの変更である。もしこれらの関数の戻り値を利用しているなら、コードを変更しなければならない。単に更新済みの&lt;code&gt;OutputIterator&lt;/code&gt;を返すのではなく、これらの関数は&lt;code&gt;std::pair&amp;lt;InputIterator, 
OutputIterator&amp;gt;&lt;/code&gt;を返す。もしこの変更が運用中のコードに影響を与えるならば、呼び出しの最後に&lt;code&gt;.second&lt;/code&gt;を加えるのが以前と同じ挙動になる最も簡単な変更になるだろう。&lt;/li&gt;
&lt;li&gt;C++14版の&lt;code&gt;is_permutation()&lt;/code&gt;、&lt;code&gt;equal()&lt;/code&gt;、&lt;code&gt;mismatch()&lt;/code&gt;を追加。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11の機能サポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6999&#34; target=&#34;_blank&#34;&gt;#6999&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタとムーブ代入演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなトレイトクラス、&lt;code&gt;handler_type&lt;/code&gt;と&lt;code&gt;async_result&lt;/code&gt;を追加。これらを使用することで、開始関数(&lt;code&gt;async_read()&lt;/code&gt;とか)の戻り値型をカスタマイズできる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio::spawn()&lt;/code&gt;関数を追加。これはBoost.Coroutineベースのスタックフルコルーチンによる高レベルなラッパーである。&lt;code&gt;spawn()&lt;/code&gt;関数を使用することで、同期ロジックのように非同期ロジックを書けるようになる。&lt;ul&gt;
&lt;li&gt;例：&lt;code&gt;size_t n = my_socket.async_read(my_buffer, yield);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特殊な値、&lt;code&gt;asio::use_future&lt;/code&gt;を追加。これを開始関数に指定することで、C++11環境で非同期の開始関数が&lt;code&gt;std::future&lt;/code&gt;を返すようにできる。&lt;ul&gt;
&lt;li&gt;例： &lt;code&gt;future&amp;lt;size_t&amp;gt; = my_socket.async_read(my_buffer, asio::use_future);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPサーバー4の例で使用していた、スタックレスコルーチンのクラスとマクロを、正式にドキュメントに記載し、推進するようにした。&lt;/li&gt;
&lt;li&gt;新たなハンドラーフックである&lt;code&gt;asio_handler_is_continuation()&lt;/code&gt;関数を追加。非同期操作が、現在実行中のハンドラに関連付けられた非同期制御フローの継続を表現する場合がある。&lt;code&gt;asio_handler_is_continuation()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;を返すようカスタマイズすれば、Asioの実装はその知識を使ってハンドラのスケジューリングを最適化することができる。一般的なケースとしては、&lt;code&gt;strand&lt;/code&gt;、&lt;code&gt;spawn&lt;/code&gt;、非同期操作の組み合わせなどがある。&lt;/li&gt;
&lt;li&gt;4つの汎用的なプロトコルクラスを追加。&lt;code&gt;generic::datagram_protocol&lt;/code&gt;、&lt;code&gt;generic::raw_protocol&lt;/code&gt;、&lt;code&gt;generic::seq_packet_protocol&lt;/code&gt;、&lt;code&gt;generic::stream_protocol&lt;/code&gt;。これらは&lt;code&gt;Protocol&lt;/code&gt;要件に基いて実装しているが、アドレスファミリ(たとえば&lt;code&gt;AF_INET&lt;/code&gt;)とプロトコル種類(たとえば&lt;code&gt;IPPROTO_TCP&lt;/code&gt;)は、実行時にユーザーが指定できる。&lt;/li&gt;
&lt;li&gt;C++11のムーブコンストラクタを追加。これによって、&lt;code&gt;socket&lt;/code&gt;(や&lt;code&gt;acceptor&lt;/code&gt;)からジェネリックな型への変換が可能になる。たとえば、&lt;code&gt;ip::tcp::socket&lt;/code&gt;から&lt;code&gt;generic::stream_protocol::socket&lt;/code&gt;へのムーブ構築が可能である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor&amp;lt;&amp;gt;&lt;/code&gt;クラスの&lt;code&gt;accept()&lt;/code&gt;と&lt;code&gt;async_accept()&lt;/code&gt;を拡張。新たなコネクションとして、&lt;code&gt;socket&lt;/code&gt;をよりジェネリックな型に直接accept可能になる。たとえば、&lt;code&gt;ip::tcp::acceptor&lt;/code&gt;を&lt;code&gt;generic::stream_protocol::socket&lt;/code&gt;オブジェクトにaccept可能である。&lt;/li&gt;
&lt;li&gt;既存のサンプルをC++03用ディレクトリに移動し、C++11用のディレクトリを新たに作った。C++03の限定的なサブセットとして、C++11に等価に変換可能である。&lt;/li&gt;
&lt;li&gt;SSLの機能を多々強化した。Nick Jonesに感謝する。&lt;ul&gt;
&lt;li&gt;すでにワイヤーから読み取られたデータを再利用することによって、SSLのハンドシェイクをサポートした。&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;クラスの&lt;code&gt;handshake()&lt;/code&gt;と&lt;code&gt;async_handshake()&lt;/code&gt;に新たなオーバーロードを追加した。これらは、SSLエンジンのハンドシェイクプローシージャに入力を渡すために、&lt;code&gt;ConstBufferSequence&lt;/code&gt;を受け付けるようにした。&lt;/li&gt;
&lt;li&gt;TLSv1.1とTLSv1.2の&lt;code&gt;ssl::context&lt;/code&gt;オブジェクトを作成できるようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::context&lt;/code&gt;クラスと&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;クラスに、&lt;code&gt;set_verify_depth()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;SSLの証明書とキーのデータを、メモリバッファから読み込む機能を追加。&lt;code&gt;ssl::context&lt;/code&gt;クラスに、以下の新たな関数を追加。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_certificate_authority()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_certificate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_certificate_chain()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_private_key()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_rsa_private_key()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use_tmp_dh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::context&lt;/code&gt;を、デフォルトでは自動的にSSL圧縮を無効化するよう変更。新たな関数&lt;code&gt;ssl::context::clear_options()&lt;/code&gt;を使用して、内部的に&lt;code&gt;my_context.clear_options(ssl::context::no_compression)&lt;/code&gt;が行われる。&lt;ul&gt;
&lt;li&gt;[訳注] : SSLの圧縮は、ブルートフォースによる攻撃を容易にするため、使用してはいけない模様。&lt;/li&gt;
&lt;li&gt;参照 : &lt;a href=&#34;http://www.scutum.jp/information/waf_tech_blog/2012/09/waf-blog-014.html&#34; target=&#34;_blank&#34;&gt;SSL/SPDYを攻撃するCRIMEはBEASTの正統な後継者だ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_set&lt;/code&gt;でデッドロックの可能性があった実装を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acceptor&lt;/code&gt;のサンプルにあった間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8421&#34; target=&#34;_blank&#34;&gt;#8421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waitable timer&lt;/code&gt;のドキュメントにあったコピペミスを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8602&#34; target=&#34;_blank&#34;&gt;#8602&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コード解析ツールの要件を満たすために、いくつかの&lt;code&gt;assert&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7739&#34; target=&#34;_blank&#34;&gt;#7739&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不正な&lt;code&gt;#warning&lt;/code&gt;ディレクティブを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7939&#34; target=&#34;_blank&#34;&gt;#7939&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Linuxでデータ競合の可能性があった&lt;code&gt;epoll()&lt;/code&gt;の実装を修正&lt;/li&gt;
&lt;li&gt;Windows限定のバグで、限定された操作によって、&lt;code&gt;NULL&lt;/code&gt;の&lt;code&gt;error_category&lt;/code&gt;へのポインタを持つ&lt;code&gt;error_code&lt;/code&gt;を生成してしまう可能性があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8613&#34; target=&#34;_blank&#34;&gt;#8613&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer&lt;/code&gt;の内部実装で使用している&lt;code&gt;time_point&lt;/code&gt;の計算で、中間結果の&lt;code&gt;duration&lt;/code&gt;オブジェクトがオーバーフローしてしまう問題を修正&lt;/li&gt;
&lt;li&gt;同じ&lt;code&gt;io_service&lt;/code&gt;オブジェクトに対して平行に&lt;code&gt;run()&lt;/code&gt;と&lt;code&gt;poll()&lt;/code&gt;を呼び出すと、スレッドの起床がロストしてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8354&#34; target=&#34;_blank&#34;&gt;#8354&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;非同期の接続操作が、reactorからの見かけ上の準備完了通知(spurious readiness notifications)に対処できるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7961&#34; target=&#34;_blank&#34;&gt;#7961&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入出力でのメモリリークを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8079&#34; target=&#34;_blank&#34;&gt;#8079&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_point&lt;/code&gt;と&lt;code&gt;duration&lt;/code&gt;のコンストラクタに、&lt;code&gt;BOOST_FORCEINLINE&lt;/code&gt;を付けた(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8318&#34; target=&#34;_blank&#34;&gt;#8318&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Xcode 4.5.2のClangで、標準ライブラリとしてlibc++を使用していると&lt;code&gt;duration&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8367&#34; target=&#34;_blank&#34;&gt;#8367&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;リファレンスのtypoを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8370&#34; target=&#34;_blank&#34;&gt;#8370&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HP-UXでChronoのコンパイルが通らない問題を修正。ワークアラウンドの判定条件が逆だった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8435&#34; target=&#34;_blank&#34;&gt;#8435&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8032&#34; target=&#34;_blank&#34;&gt;#8032&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Andrew HundtとAdam Wulkiewiczのハイパフォーマンスな&lt;code&gt;vararray&lt;/code&gt;の実装をベースにした&lt;code&gt;static_vector&lt;/code&gt;クラスを、実験的に追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;のコンストラクタ／コピー／ムーブ／スワップの速度を改善。&lt;code&gt;memcpy&lt;/code&gt;が可能な場合には、それをディスパッチするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;をサポートした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7227&#34; target=&#34;_blank&#34;&gt;#7227&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::container::slist&lt;/code&gt;クラス内部で、&lt;code&gt;intrusive::pointer_traits::to_pointer&lt;/code&gt;が呼び出せないというコンパイルエラーが発生していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7921&#34; target=&#34;_blank&#34;&gt;#7921&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;がGCCで使用できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7969&#34; target=&#34;_blank&#34;&gt;#7969&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_vector::back()&lt;/code&gt;が不正な値を返す問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8118&#34; target=&#34;_blank&#34;&gt;#8118&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque::insert(const_iterator, Itr, Itr)&lt;/code&gt;の計算オーダーが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8294&#34; target=&#34;_blank&#34;&gt;#8294&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;の&lt;code&gt;swap&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8553&#34; target=&#34;_blank&#34;&gt;#8553&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPARCアーキテクチャをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分割スタック(要求に対して成長するスタック)のサポートを追加&lt;/li&gt;
&lt;li&gt;以下のチケットを修正&lt;ul&gt;
&lt;li&gt;ドキュメントのtypoを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7805&#34; target=&#34;_blank&#34;&gt;#7805&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントが不正なURLリンクを指していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7899&#34; target=&#34;_blank&#34;&gt;#7899&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCでの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7972&#34; target=&#34;_blank&#34;&gt;#7972&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;iterator&lt;/code&gt;を取得しようとしてコンパイルエラーが出る問題を修正。&lt;code&gt;iterator_traits&lt;/code&gt;を使っていなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8023&#34; target=&#34;_blank&#34;&gt;#8023&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt;文で、&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;const_iterator&lt;/code&gt;が使用できない問題を修正。&lt;code&gt;boost::const_begin()&lt;/code&gt;をオーバーロードしていなかった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8024&#34; target=&#34;_blank&#34;&gt;#8024&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coroutine&lt;/code&gt;のイテレータが後置インクリメント演算子を持っていなかったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8101&#34; target=&#34;_blank&#34;&gt;#8101&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spartial Index(空間インデックス)を追加。これはAdam WulkiewiczによってBoost.Geometry向けに開発された。オリジナルの実装は、Hartmut Kaiserがメンターを勤めたGoogle Summer of Code 2008のプロジェクトで、Federico J. Fernandezが始めた。&lt;/li&gt;
&lt;li&gt;SVG出力を追加。これは拡張機能として数年前からある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ドキュメント&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつか説明不足だったところを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共線の反対セグメント(collinear opposite segments)が(主に円:circleで)持っていた、堅牢性の問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertion()&lt;/code&gt;が、交点の挿入に失敗する問題を修正&lt;/li&gt;
&lt;li&gt;Vladimir Petrovicのパッチによる、横断のデバッグ機能を適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;の縮退&lt;code&gt;union()&lt;/code&gt;の結果を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7462&#34; target=&#34;_blank&#34;&gt;#7462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_transformer&lt;/code&gt;クラスのコンストラクタが&lt;code&gt;private&lt;/code&gt;になっていたので、&lt;code&gt;public&lt;/code&gt;に修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7465&#34; target=&#34;_blank&#34;&gt;#7465&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cart_intersect.hpp&lt;/code&gt;の、未使用パラメータ警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7802&#34; target=&#34;_blank&#34;&gt;#7802&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt;が誤った交点を検出する問題を修正(レアケース)。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8254&#34; target=&#34;_blank&#34;&gt;#8254&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;polygon modelが、ドキュメントに記載された&lt;code&gt;Polygon&lt;/code&gt;コンセプトを厳守していなかった。ドキュメントを更新(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8393&#34; target=&#34;_blank&#34;&gt;#8393&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;「条件式は定数式でなければならない」というコンパイラの警告をを黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8403&#34; target=&#34;_blank&#34;&gt;#8403&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8405&#34; target=&#34;_blank&#34;&gt;#8405&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内部的な変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのアルゴリズムのバリエーションを作った(&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;convert&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;num_points&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jakob Lykke AndersenとFlavio De Lorenziによる、VF2 subgraph isomorphishmへの更新を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8166&#34; target=&#34;_blank&#34;&gt;#8166&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fernando Vilasによる、maximum adjacency search(最大隣接探索)アルゴリズムを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6780&#34; target=&#34;_blank&#34;&gt;#6780&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Brammert Ottensによる、resource-constrained shortest paths (&lt;code&gt;r_c_shortest_paths&lt;/code&gt;, リソース制限最短経路)アルゴリズムへのタイムアウトサポートを追加。&lt;/li&gt;
&lt;li&gt;ドキュメントとサンプルコードへの様々な修正。古いコンパイラ向けのワークアラウンドを除去。&lt;/li&gt;
&lt;li&gt;以下のバグを修正：&lt;ul&gt;
&lt;li&gt;graphmlの値に&#34;for&#34;属性を設定すると例外が投げられてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7016&#34; target=&#34;_blank&#34;&gt;#7016&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7155&#34; target=&#34;_blank&#34;&gt;#7155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism()&lt;/code&gt;に異なる2つのグラフ型を与えると、コンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7845&#34; target=&#34;_blank&#34;&gt;#7845&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;削除した名前付き頂点を再度追加すると、不正なグラフになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7863&#34; target=&#34;_blank&#34;&gt;#7863&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph/example/dijkstra-example.cpp&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7877&#34; target=&#34;_blank&#34;&gt;#7877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;の構築が、コンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8192&#34; target=&#34;_blank&#34;&gt;#8192&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;において、距離の比較がドキュメントとは異なる実装になっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8398&#34; target=&#34;_blank&#34;&gt;#8398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PBGLのビルドが、C++11モードで失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8411&#34; target=&#34;_blank&#34;&gt;#8411&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Johnson APSPのドキュメントで、&lt;code&gt;DistanceMap&lt;/code&gt;の値型に&lt;code&gt;addable&lt;/code&gt;(&lt;code&gt;a + b&lt;/code&gt;が可能なこと)を要求していたが、これは不要なので要求を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8427&#34; target=&#34;_blank&#34;&gt;#8427&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Johnson APSPのドキュメントで、&lt;code&gt;DistanceMap&lt;/code&gt;と&lt;code&gt;WeightMap&lt;/code&gt;の値型に、実装にある「2項減算が可能なこと(&lt;code&gt;a - b&lt;/code&gt;)」が記載されていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8428&#34; target=&#34;_blank&#34;&gt;#8428&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sloan orderingの実装が、特定の値型を使用していたので、テンプレートの型を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8434&#34; target=&#34;_blank&#34;&gt;#8434&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astar_search()&lt;/code&gt;の&lt;code&gt;DistanceType&lt;/code&gt;に、&lt;code&gt;numeric_limits&lt;/code&gt;の特殊化を必要としないよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8490&#34; target=&#34;_blank&#34;&gt;#8490&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapped_region&lt;/code&gt;に、プラットフォーム規定のフラグサポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8030&#34; target=&#34;_blank&#34;&gt;#8030&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_memory_object&lt;/code&gt;の&lt;code&gt;m_mode&lt;/code&gt;メンバ変数が、デフォルトコンストラクタで初期化されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7484&#34; target=&#34;_blank&#34;&gt;#7484&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::unique_ptr&lt;/code&gt;が代入できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7598&#34; target=&#34;_blank&#34;&gt;#7598&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex&lt;/code&gt;/&lt;code&gt;named_condition&lt;/code&gt;の組み合わせが壊れる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7682&#34; target=&#34;_blank&#34;&gt;#7682&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;named_mutex::remove()&lt;/code&gt;を連続で呼び出すと、成功しても&lt;code&gt;false&lt;/code&gt;が返ってきてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7923&#34; target=&#34;_blank&#34;&gt;#7923&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BSD向けのワークアラウンドを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7924&#34; target=&#34;_blank&#34;&gt;#7924&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_memory_object&lt;/code&gt;の生成が無限ループに陥ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7928&#34; target=&#34;_blank&#34;&gt;#7928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;OSの起動時間が、時計で変更できてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7936&#34; target=&#34;_blank&#34;&gt;#7936&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess/mem_algo/rbtree_best_fit.hpp&lt;/code&gt;のアサートに副作用がある問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8521&#34; target=&#34;_blank&#34;&gt;#8521&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapped_region::flush()&lt;/code&gt;で、&lt;code&gt;async&lt;/code&gt;パラメータの比較条件が逆だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8595&#34; target=&#34;_blank&#34;&gt;#8595&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&lt;/span&gt;：Windowsにおいて、OSの起動時間をイベントログから取得してくるように修正した。以前使用していた&lt;code&gt;LastBootupTime()&lt;/code&gt;は、WMIから使用すると、不正な時刻同期を行ってしまう。1.54.0より前のOS起動時間が本当に必要であれば、&lt;code&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/code&gt;を定義すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt; サポートを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7849&#34; target=&#34;_blank&#34;&gt;#7849&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#iostreams&#34; name=&#34;iostreams&#34;&gt;Iostreams&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tee()&lt;/code&gt;が&lt;code&gt;std::streams&lt;/code&gt;で正しく動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8315&#34; target=&#34;_blank&#34;&gt;#8315&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメント修正&lt;ul&gt;
&lt;li&gt;リンクの間違いを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8385&#34; target=&#34;_blank&#34;&gt;#8385&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;typo修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8460&#34; target=&#34;_blank&#34;&gt;#8460&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;オプションで発生する警告を回避(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8482&#34; target=&#34;_blank&#34;&gt;#8482&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字ポインタへの変換が実行時ではなくコンパイル時アサートになるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8334&#34; target=&#34;_blank&#34;&gt;#8334&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::int128_type&lt;/code&gt;と&lt;code&gt;boost::uint128_type&lt;/code&gt;の変換に対応した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7909&#34; target=&#34;_blank&#34;&gt;#7909&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;内部ストリームバッファの扱いを変えて、libc++で動作するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8267&#34; target=&#34;_blank&#34;&gt;#8267&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7704&#34; target=&#34;_blank&#34;&gt;#7704&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1.53.0で&lt;code&gt;lexical_cast()&lt;/code&gt;のアドレス取得ができなくなっていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7421&#34; target=&#34;_blank&#34;&gt;#7421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;警告、内部実装、テストの修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2558&#34; target=&#34;_blank&#34;&gt;#2558,&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7949&#34; target=&#34;_blank&#34;&gt;#7949&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8162&#34; target=&#34;_blank&#34;&gt;8162&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8369&#34; target=&#34;_blank&#34;&gt;#8369&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8547&#34; target=&#34;_blank&#34;&gt;#8547&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;他のBoost.Math用の整数ユーティリティ(最大公約数と最小公倍数)、四元数や八元数を組み込むために大きな再構成を行った。これについて新しく章見出しを作った。&lt;/li&gt;
&lt;li&gt;Boost.Multiprecisionのリファレンスを追加し、&lt;code&gt;cpp_dec_float_50&lt;/code&gt;をユーザー定義型(UDT:User-defined Type)の例として追加した&lt;/li&gt;
&lt;li&gt;Clangをサポートコンパイラに加えた&lt;/li&gt;
&lt;li&gt;任意の精度で計算結果のスレッドセーフなキャッシュを使うための定数を修正した。&lt;/li&gt;
&lt;li&gt;Christopher Kormanyos氏により、&lt;code&gt;cyl_bessel_j_zero&lt;/code&gt;、&lt;code&gt;cyl_neumann_zero&lt;/code&gt;、&lt;code&gt;airy_ai_zeros&lt;/code&gt;、&lt;code&gt;airy_bi_zeros&lt;/code&gt;というベッセル関数の零点を求める関数が追加された。&lt;/li&gt;
&lt;li&gt;Rocco Romeo氏に協力いただき、第一種ベッセル関数と、第二種ベッセル関数の精度が向上した&lt;/li&gt;
&lt;li&gt;ヘッダがコンパイルされないひどい循環依存バグを解消した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7999&#34; target=&#34;_blank&#34;&gt;#7999&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tgamma&lt;/code&gt;が142.5から143の実引数を与えると奇妙なオーヴァーフローを起こすバグを修正した。&lt;/li&gt;
&lt;li&gt;例外がキャッチされたときに正しくない結果を返す&lt;code&gt;raise_rounding_error&lt;/code&gt;のバグを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7905&#34; target=&#34;_blank&#34;&gt;#7905&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;のサポートを最小限追加した&lt;/li&gt;
&lt;li&gt;ポワソン分位数が境界値ぎりぎりの場合に発生するバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8308&#34; target=&#34;_blank&#34;&gt;#8308&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;導関数が平坦になっている領域で、不完全ベータ逆関数に対処するためのHalley iterationで利用しているヒューリスティックを調整した。例えば計算機イプシロンよりも確率が小さい場合におけるフィッシャーF分布の四元数を算出する場合などである。&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8314&#34; target=&#34;_blank&#34;&gt;#8314&lt;/a&gt; を参照のこと。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;を使うとC++11でGCCコンテナ型が利用できなくなる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7969&#34; target=&#34;_blank&#34;&gt;#7969&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_RVALUE_REFERENCES&lt;/code&gt;が未定義だと、&lt;code&gt;has_move_emulation_enabled&lt;/code&gt;が&lt;code&gt;boost&lt;/code&gt;名前空間に定義されないバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8231&#34; target=&#34;_blank&#34;&gt;#8231&lt;/a&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; ： &lt;code&gt;rational_adapter&lt;/code&gt;を&lt;code&gt;rational_adaptor&lt;/code&gt;に名前変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://perso.ens-lyon.fr/nathalie.revol/software.html&#34; target=&#34;_blank&#34;&gt;MPFI&lt;/a&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logged_adaptor&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;128ビット浮動小数点数型として、GCCの&lt;code&gt;__float128&lt;/code&gt;とIntelの&lt;code&gt;_Quad&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;にユーザー定義リテラルのサポートを追加。&lt;code&gt;constexpr&lt;/code&gt;サポートを改善。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;による符号あり整数の除算が、正しくない結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8126&#34; target=&#34;_blank&#34;&gt;#8126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;single limbの&lt;code&gt;cpp_int&lt;/code&gt;で、減算が正しくない結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8133&#34; target=&#34;_blank&#34;&gt;#8133&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;で0を何かで割っても、結果が0にならない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8160&#34; target=&#34;_blank&#34;&gt;#8160&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;変数を再利用するケース(たとえば&lt;code&gt;a = pow(a, b)&lt;/code&gt;)で、超越関数が不正な結果になる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8326&#34; target=&#34;_blank&#34;&gt;#8326&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Voronoiドキュメントの修正と更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Point&lt;/code&gt;コンセプトのドキュメントで、&lt;code&gt;typedef&lt;/code&gt;が抜けていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8026&#34; target=&#34;_blank&#34;&gt;#8026&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range/algorithm&lt;/code&gt;と名前衝突する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8197&#34; target=&#34;_blank&#34;&gt;#8197&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#pragma warning&lt;/code&gt;する際に、&lt;code&gt;default&lt;/code&gt;ではなく&lt;code&gt;push&lt;/code&gt;と&lt;code&gt;pop&lt;/code&gt;を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8257&#34; target=&#34;_blank&#34;&gt;#8257&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#property-map&#34; name=&#34;property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Guillaume Pinotによる、&lt;code&gt;compose_property_map&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#range&#34; name=&#34;range&#34;&gt;Range&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのRangeコンセプトが、正しくないイテレータコンセプトを使用していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6944&#34; target=&#34;_blank&#34;&gt;#6944&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istream_range&lt;/code&gt;に&lt;code&gt;wcin&lt;/code&gt;を渡すとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7407&#34; target=&#34;_blank&#34;&gt;#7407&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istream_range&lt;/code&gt;の内部で&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;をインクルードしていたが、&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;で十分なため、インクルードするヘッダを変更(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7408&#34; target=&#34;_blank&#34;&gt;#7408&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;irange&lt;/code&gt;に渡すステップサイズが3以上だと、最終要素がステップサイズの倍数の場合に、rangeの要素に含まれない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7731&#34; target=&#34;_blank&#34;&gt;#7731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムに&lt;code&gt;r | indexed&lt;/code&gt;を渡すとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7827&#34; target=&#34;_blank&#34;&gt;#7827&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterator_range&lt;/code&gt;に、配列へのポインタを入れられない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8338&#34; target=&#34;_blank&#34;&gt;#8338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION&lt;/code&gt;マクロを使用した設定が正しくない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8453&#34; target=&#34;_blank&#34;&gt;#8453&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11準拠： &lt;code&gt;call_once()&lt;/code&gt;の引数をムーブで渡すことを可能にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7285&#34; target=&#34;_blank&#34;&gt;#7285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;非同期： &lt;code&gt;future&lt;/code&gt;に&lt;code&gt;then()&lt;/code&gt;メンバ関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7445&#34; target=&#34;_blank&#34;&gt;#7445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;同期： &lt;code&gt;synchronized_value&lt;/code&gt;クラスを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7449&#34; target=&#34;_blank&#34;&gt;#7449&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MinGW 4.5.0での、&lt;code&gt;interruptible_wait()&lt;/code&gt;関数のリンクエラーを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/4878&#34; target=&#34;_blank&#34;&gt;#4878&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;win32で&lt;code&gt;shared_mutex&lt;/code&gt;のタイムアウトが正しく動作していなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4882&#34; target=&#34;_blank&#34;&gt;#4882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;pthread環境の&lt;code&gt;call_once()&lt;/code&gt;実装が、いくつかの環境でうまく動作しない可能性がある問題を修正。エポックの値として&lt;code&gt;uintmax_t&lt;/code&gt;を使用していたが、アトミックであることが保証される型を使用するようにした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5752&#34; target=&#34;_blank&#34;&gt;#5752&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;の警告を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6652&#34; target=&#34;_blank&#34;&gt;#6652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel C++ Compilerで、&lt;code&gt;#include &amp;lt;atomic&amp;gt;&lt;/code&gt;しているところがコンパイルエラーになっていた問題を修正 &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6843&#34; target=&#34;_blank&#34;&gt;#6843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::future_category&lt;/code&gt;のDLLリンケージを修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6966&#34; target=&#34;_blank&#34;&gt;#6966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_mutex&lt;/code&gt;のロック／アンロックで、&lt;code&gt;lock_error&lt;/code&gt;例外が送出される問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7720&#34; target=&#34;_blank&#34;&gt;#7720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上の&lt;code&gt;shared_mutex&lt;/code&gt;で、デッドロックが発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7755&#34; target=&#34;_blank&#34;&gt;#7755&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVC 11.0で&lt;code&gt;BOOST_THREAD_DONT_USE_DATETIME&lt;/code&gt;を使用するとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7980&#34; target=&#34;_blank&#34;&gt;#7980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIX上で&lt;code&gt;pthread_delay_np()&lt;/code&gt;呼び出しがコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7982&#34; target=&#34;_blank&#34;&gt;#7982&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual Studio 2003でThreadライブラリのコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8027&#34; target=&#34;_blank&#34;&gt;#8027&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsの64ビット環境で、&lt;code&gt;GetTickCount()&lt;/code&gt;の代わりに&lt;code&gt;GetTickCount64()&lt;/code&gt;を使用するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows上で&lt;code&gt;boost::this_thread::sleep_for()&lt;/code&gt;のスリープ時間が長い問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8136&#34; target=&#34;_blank&#34;&gt;#8136&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Solaris 10上で&lt;code&gt;future&lt;/code&gt;のコンパイルが通らない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8212&#34; target=&#34;_blank&#34;&gt;#8212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントで、&lt;code&gt;thread_group&lt;/code&gt;のインクルードヘッダが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8237&#34; target=&#34;_blank&#34;&gt;#8237&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;barrier::wait()&lt;/code&gt;に割り込みポイントが設定されていることを、ドキュメントに明記(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8239&#34; target=&#34;_blank&#34;&gt;#8239&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_join_for()&lt;/code&gt;に時間0を渡すと、無限ループしてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8323&#34; target=&#34;_blank&#34;&gt;#8323&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future_error::what()&lt;/code&gt;が、死んだオブジェクトの文字列を返していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8337&#34; target=&#34;_blank&#34;&gt;#8337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;が使用できない環境で、完全なC++11実装の&lt;code&gt;call_once()&lt;/code&gt;が有効になっていたので、条件一致しない場合はC++03実装を選択するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8371&#34; target=&#34;_blank&#34;&gt;#8371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex.hpp&lt;/code&gt;と&lt;code&gt;recursive_mutex.hpp&lt;/code&gt;の両方でpthreadのタイムアウト付きロックが使用可能かをチェックしていたが、片方のチェック条件が緩かったために、利用可能でないタイムアウト付きロックが選択できてしまっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8443&#34; target=&#34;_blank&#34;&gt;#8443&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::scoped_thread::joinable()&lt;/code&gt;のドキュメントが抜けていたので修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8451&#34; target=&#34;_blank&#34;&gt;#8451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用変数の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8530&#34; target=&#34;_blank&#34;&gt;#8530&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11が有効な場合に、&lt;code&gt;packaged_task&lt;/code&gt;に関数オブジェクトのコピーではなく参照を保持するようにした(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8596&#34; target=&#34;_blank&#34;&gt;#8596&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなType Traitsを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8189&#34; target=&#34;_blank&#34;&gt;#8189&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_nothrow_move_constructible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_nothrow_move_assignable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_trivial_move_assign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_trivial_move_constructor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#ublas&#34; name=&#34;ublas&#34;&gt;uBLAS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ベータ後の変更&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型による除算に&lt;code&gt;enable_if&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6511&#34; target=&#34;_blank&#34;&gt;#6511&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フリー関数&lt;code&gt;num_columns()&lt;/code&gt;と&lt;code&gt;num_rows()&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7297&#34; target=&#34;_blank&#34;&gt;#7297&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assignment.hpp&lt;/code&gt;の、リンケージ問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6010&#34; target=&#34;_blank&#34;&gt;#6010&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;すごく基本的な&lt;code&gt;noexcept&lt;/code&gt;をサポートした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_string_ref::find()&lt;/code&gt;が、発見したかどうかを判定するために&lt;code&gt;==&lt;/code&gt;ではなく&lt;code&gt;=&lt;/code&gt;を使っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8067&#34; target=&#34;_blank&#34;&gt;#8067&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noncopyable&lt;/code&gt;のC++11版を作成(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6578&#34; target=&#34;_blank&#34;&gt;#6578&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noncopyable&lt;/code&gt;のDLLインタフェースを使用したときに発生する警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6935&#34; target=&#34;_blank&#34;&gt;#6935&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SolarisStudioコンパイラで発生する&lt;code&gt;boost::function&lt;/code&gt;に対する&lt;code&gt;boost::addressof()&lt;/code&gt;でのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7079&#34; target=&#34;_blank&#34;&gt;#7079&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.TypeTraitsの、&lt;code&gt;noexcept&lt;/code&gt;なコンストラクタと代入演算子を判定する新たなトレイトを使用するようにした。これによって、C++11の&lt;code&gt;boost::variant&lt;/code&gt;は、多くの型に対してパフォーマンス向上する。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8296&#34; target=&#34;_blank&#34;&gt;#8296&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;multiple visitationを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8459&#34; target=&#34;_blank&#34;&gt;#8459&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11機能サポートに関するドキュメントの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.waveをClangの &lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt; 診断に対応させた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8478&#34; target=&#34;_blank&#34;&gt;#8478&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_54_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;未使用変数を削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8039&#34; target=&#34;_blank&#34;&gt;#8039&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glx.h&lt;/code&gt;のマクロ&lt;code&gt;None&lt;/code&gt;と名前が衝突していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8204&#34; target=&#34;_blank&#34;&gt;#8204&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8138&#34; target=&#34;_blank&#34;&gt;#8138&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++98 mode: 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0&lt;/li&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: 3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;GCC: 4.2&lt;/li&gt;
&lt;li&gt;Apple Clang: 4.2.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11 mode: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0&lt;/li&gt;
&lt;li&gt;Visual C++: 8.0, 9.0, 10.0, 11.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.1, 3.2, from Subversion&lt;/li&gt;
&lt;li&gt;Clang, with libc++: 3.2&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++98 mode: 4.7.3&lt;/li&gt;
&lt;li&gt;GCC, C++11 mode: 4.7.3, 4.8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 4.2.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11 mode: 4.2.1&lt;/li&gt;
&lt;li&gt;Clang: from Subversion&lt;/li&gt;
&lt;li&gt;Clang, C++11 mode: from Subversion&lt;/li&gt;
&lt;li&gt;GCC: 4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0&lt;/li&gt;
&lt;li&gt;Visual C++: 9.0, 10.0, 11.0&lt;/li&gt;
&lt;li&gt;Visual C++, Windows Mobile 5, with STLport: 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AIX:&lt;ul&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition: 12.1.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, zak&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.55.0 リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_55_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_55_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.55.0 リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_55_0.qbk&#34; target=&#34;_blank&#34;&gt;https://svn.boost.org/svn/boost/website/public_html/live/feed/history/boost_1_55_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_55_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_55_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Predef&lt;ul&gt;
&lt;li&gt;Rene Rivera氏作のこのライブラリには、C、C++、Objective C、Objective C++で提供されているマクロや、それらに存在するヘッダ内で定義されているマクロをまとめた情報をもとに、コンパイラやアーキテクチャ、OS、ライブラリ、その他のヴァージョン番号がひととおり定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#geometry&#34;&gt;Geometory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#graph&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multi-index&#34;&gt;Multi-index Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#property-map&#34;&gt;PropertyMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#rational&#34;&gt;Rational&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#smart-pointer&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#timer&#34;&gt;Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Quickbook(#quickbook)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ニュース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本バージョンよりいくつかの古いコンパイラのサポートが終了した&lt;/li&gt;
&lt;li&gt;新しくサポートされる最低環境は以下の通り。なお他のコンパイラに変更はない&lt;ul&gt;
&lt;li&gt;Digitial Mars 8.41&lt;/li&gt;
&lt;li&gt;GCC 3.3&lt;/li&gt;
&lt;li&gt;Intel 6.0&lt;/li&gt;
&lt;li&gt;Visual C++ 7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;なお、更に以下のコンパイラのサポートを終了することも考えている。もし使用しているのであればメーリングリストで知らせてほしい&lt;ul&gt;
&lt;li&gt;Metrowoks C++ (ie. codewarrior)&lt;/li&gt;
&lt;li&gt;SunPro 5.3 またはそれ以前&lt;/li&gt;
&lt;li&gt;Borland C++ Builder 2006 (bcc 5.82) またはそれ以前&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio 2013／Visual C++ 12.0での既知の問題&lt;/h2&gt;
&lt;p&gt;Visual Studio 2013がリリースされた時期が、Boostのリリースプロセスの遅い段階であったため、いくつかの未解決問題が存在する。これは以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializationがコンパイルできない。&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;のインクルードが不足しているためである。&lt;/li&gt;
&lt;li&gt;Boost.Containerの&lt;code&gt;allocator_traits&lt;/code&gt;から&lt;code&gt;has_member_function_callable_with&lt;/code&gt;を使用するとコンパイルエラーになる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9332&#34; target=&#34;_blank&#34;&gt;#9332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのライブラリで&lt;code&gt;initializer_list&lt;/code&gt;のオーバーロードが曖昧になり、コンパイルエラーになる。これはVisual C++のバグであり、現在有効な回避策は見つかっていない。UnorderedとMulti-Indexの関数オーバーロードでその問題が発生する。&lt;/li&gt;
&lt;li&gt;Threadの&lt;code&gt;ex_scoped_thread&lt;/code&gt;がコンパイルに失敗する(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9333&#34; target=&#34;_blank&#34;&gt;#9333&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの誤字を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7915&#34; target=&#34;_blank&#34;&gt;#7915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCでの警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8850&#34; target=&#34;_blank&#34;&gt;#8850&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;average&lt;/code&gt;を&lt;code&gt;fdiv&lt;/code&gt;に名称変更 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8262&#34; target=&#34;_blank&#34;&gt;#8262&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bad_any_cast&lt;/code&gt;を、モジュール間で見えるようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8751&#34; target=&#34;_blank&#34;&gt;#8751&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;不足していた&lt;code&gt;BOOST_NOEXCEPT&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; rvaluesの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9215&#34; target=&#34;_blank&#34;&gt;#9215&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windowsランタイム向けに、限定的なポートを実装した。このサポートは、言語拡張機能を有効にする必要がある。ポートはWindowsランタイムAPIによって公開される制限機能により、以下の制限事項も付いてくる：&lt;ul&gt;
&lt;li&gt;コア機能である&lt;code&gt;io_service&lt;/code&gt;、&lt;code&gt;strand&lt;/code&gt;、バッファ、複合操作、タイマー等は、今まで通り動作する。&lt;/li&gt;
&lt;li&gt;ソケットは、クライアントTCP側のみサポートする。&lt;/li&gt;
&lt;li&gt;クライアント側TCPソケットの明示的なバインディングは、サポートされない。&lt;/li&gt;
&lt;li&gt;ソケットでは&lt;code&gt;cancel()&lt;/code&gt;関数をサポートしない。非同期操作は、クローズによってのみキャンセルを行うことになるだろう。&lt;/li&gt;
&lt;li&gt;null bufferを使用した操作はサポートされない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tcp::no_delay&lt;/code&gt;、&lt;code&gt;socket_base::keep_alive&lt;/code&gt;オプションのみサポートされる。&lt;/li&gt;
&lt;li&gt;名前解決はサーバー名をサポートせず、番号のみ。例として、&#34;http&#34;ではなく&#34;80&#34;を使用する必要がある。&lt;/li&gt;
&lt;li&gt;ほとんどの名前解決クエリフラグは、効果を持たない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Boost 1.54.0から導入された)レギュレッションテストを、いくつかの環境向けに修正。&lt;code&gt;async_connect()&lt;/code&gt;からのエラーが完了ハンドラに伝達されていなかった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8795&#34; target=&#34;_blank&#34;&gt;#8795&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;(Boost 1.54.0から導入された)Windows向けの、&lt;code&gt;io_service&lt;/code&gt;が複数スレッドから着火されるケースのレギュレッションテストを修正。バグが発生した際、非同期操作の結果は正しくないとして破棄され、代わりに&lt;code&gt;0&lt;/code&gt;が使用されていた。TCPソケットでは、見かけ上(spurious)のファイル終端通知で起きていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8933&#34; target=&#34;_blank&#34;&gt;#8933&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのバグを修正。いくつかのハンドラIDが正しく出力されていなかった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8808&#34; target=&#34;_blank&#34;&gt;#8808&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;非同期&lt;code&gt;accept&lt;/code&gt;操作のテストに使用する比較がコンパイルエラーになっていた問題を修正。符号なしソケット記述子が正しく動作するようになった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8752&#34; target=&#34;_blank&#34;&gt;#8752&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;すでに発生されたシグナルに対する&lt;code&gt;async_wait&lt;/code&gt;を開始した際、完了ハンドラにシグナル番号が正しく確実に渡されるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8738&#34; target=&#34;_blank&#34;&gt;#8738&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;GCC 4.8の、未使用&lt;code&gt;typedef&lt;/code&gt;警告を抑制(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8980&#34; target=&#34;_blank&#34;&gt;#8980&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;default invocation hookで使用するハンドラの、ムーブ最適化を有効にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8624&#34; target=&#34;_blank&#34;&gt;#8624&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;重複する&lt;code&gt;async_write_at&lt;/code&gt;操作を発行すべきではない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8669&#34; target=&#34;_blank&#34;&gt;#8669&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Windowsの&lt;code&gt;HANDLE&lt;/code&gt;を、同期&lt;code&gt;read&lt;/code&gt;の&lt;code&gt;GetOverlappedResult&lt;/code&gt;によって返される、非致命的な&lt;code&gt;ERROR_MORE_DATA&lt;/code&gt;を取り扱うように変更。&lt;/li&gt;
&lt;li&gt;Visual C++は言語拡張として「&lt;code&gt;generic&lt;/code&gt;」をキーワードとして扱う。これを回避するために、名前空間名を&lt;code&gt;cpp_generic&lt;/code&gt;に変更。&lt;/li&gt;
&lt;li&gt;Boost 1.54でサポートされた&lt;code&gt;async_result&lt;/code&gt;の結果を取り逃すという、いくつかの非同期操作の問題を修正。とくに、buffer streamテンプレートを、現在のハンドラパターンに従うように更新した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9000&#34; target=&#34;_blank&#34;&gt;#9000&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9001&#34; target=&#34;_blank&#34;&gt;#9001&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Visual Studio 2012向けに、ムーブサポートを有効にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8959&#34; target=&#34;_blank&#34;&gt;#8959&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;Visual Studio 2012向けに、&lt;code&gt;use_future&lt;/code&gt;サポートを追加した。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8758&#34; target=&#34;_blank&#34;&gt;#8758&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;いくつかの、不要なハンドラのコピーを排除した。&lt;/li&gt;
&lt;li&gt;その他、コードとドキュメントの小さな問題を修正した。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8347&#34; target=&#34;_blank&#34;&gt;#8347&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8950&#34; target=&#34;_blank&#34;&gt;#8950&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8953&#34; target=&#34;_blank&#34;&gt;#8953&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8965&#34; target=&#34;_blank&#34;&gt;#8965&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8997&#34; target=&#34;_blank&#34;&gt;#8997&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x86ターゲットのGCC、MSVCおよびその互換コンパイラに対して、64ビットアトミック操作のサポートを追加。このサポートは、ターゲットCPUの要求するインストラクションがコンパイル時にわかる場合に有効になる&lt;/li&gt;
&lt;li&gt;x86-64ターゲットのGCCと互換コンパイラに対して、128ビットアトミック操作のサポートを追加。このサポートは、ターゲットCPUの要求するインストラクションがコンパイル時にわかる場合に有効になる。このサポートは、新たなマクロ&lt;code&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/code&gt;でテストできる&lt;/li&gt;
&lt;li&gt;GCC環境で、より効率的な&lt;code&gt;atomic&amp;lt;&amp;gt;&lt;/code&gt;の実装を追加。これはGCC 4.7以降で導入された&lt;code&gt;__atomic*&lt;/code&gt;インストラクションを使用する&lt;/li&gt;
&lt;li&gt;ARM v7のサポートを追加。Thumb 2のサポートを改善&lt;/li&gt;
&lt;li&gt;GCCとその互換コンパイラに、x32ターゲットのサポートを追加(たとえば、64ビット x86で32ビットポインタを使用できるような環境)&lt;/li&gt;
&lt;li&gt;Boost.Threadへの依存を削除&lt;/li&gt;
&lt;li&gt;False Sharingを避けるために、内部的なロックプールに適切なパディングとアラインメントが含まれるようになった&lt;/li&gt;
&lt;li&gt;Windows上のIntelコンパイラのコンパイル問題を修正。Windows上の重複した内部マクロを削除&lt;/li&gt;
&lt;li&gt;いくつかのコードを、使用可能な場合にC++11機能を使用するようリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.52と1.53でchrono_ioが文字列を正しくパースできていない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7868&#34; target=&#34;_blank&#34;&gt;#7868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/chrono/stopwatches/formatters/base_formatter.hpp&lt;/code&gt;のtypoを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9028&#34; target=&#34;_blank&#34;&gt;#9028&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註]: &lt;code&gt;=&lt;/code&gt;とするべきところ&lt;code&gt;==&lt;/code&gt;としていたため、&lt;code&gt;duration_style&lt;/code&gt;を変更出来ないでいた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;std::tmを初期化していなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9147&#34; target=&#34;_blank&#34;&gt;#9147&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Circular Buffer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Moveによりムーブセマンティクスをサポートした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7888&#34; target=&#34;_blank&#34;&gt;#7888&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;これによりCircular Bufferはムーブ可能かつコピー不可能な型をサポートする&lt;/li&gt;
&lt;li&gt;ただし&lt;code&gt;noexcept&lt;/code&gt;なムーブコンストラクタかつムーブ代入演算子の両方が実装されている必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメントの改良&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;指定されているとコンパイル出来ない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5362&#34; target=&#34;_blank&#34;&gt;#5362&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不要な&lt;code&gt;const&lt;/code&gt;に対する警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7025&#34; target=&#34;_blank&#34;&gt;#7025&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCにおいて、Circular Buffer以外で定義されたコンマ演算子によって警告が出るのを抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7950&#34; target=&#34;_blank&#34;&gt;#7950&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34; name=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;： 古いコンパイラのサポートを終了した&lt;/li&gt;
&lt;li&gt;新しいサポート対象は以下のバージョン及びそれ以後のみである。なお、他のコンパイラに変更はない&lt;ul&gt;
&lt;li&gt;Digital Mars 8.41&lt;/li&gt;
&lt;li&gt;GCC 3.3&lt;/li&gt;
&lt;li&gt;Intel C++ 6.0&lt;/li&gt;
&lt;li&gt;Visual C++ 7.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#config&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SCARYイテレータを実装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat_set&lt;/code&gt;と&lt;code&gt;flat_map&lt;/code&gt;のイテレータがランダムアクセスイテレータであることが言及されていないのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8269&#34; target=&#34;_blank&#34;&gt;#8269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;によってswitch-caseでwarningが出力されるのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8473&#34; target=&#34;_blank&#34;&gt;#8473&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註] warningを抑制する&lt;code&gt;BOOST_FALLTHROUGH&lt;/code&gt;マクロが (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8408&#34; target=&#34;_blank&#34;&gt;#8408&lt;/a&gt;) で提案されている。用例は次の通り：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;switch&lt;/span&gt; (cond) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; A:
    ... ;
    BOOST_FALLTHROUGH;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; B:
    ... ;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;break&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

- C++11で&lt;code&gt;std::map&lt;/code&gt;に新規追加されたコンストラクタと同様のものを追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8892&#34; target=&#34;_blank&#34;&gt;#8892&lt;/a&gt;)
    - [訳者註] 例えば次のようなものである&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; flat_map( &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;a )
&lt;/pre&gt;&lt;/div&gt;

- &lt;code&gt;flat_set::insert&lt;/code&gt;の呼び出しが曖昧になっていた問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9009&#34; target=&#34;_blank&#34;&gt;#9009&lt;/a&gt;)
- &lt;code&gt;scoped_allocator_adaptor&lt;/code&gt;とともに使用した場合、コピーでSEGVる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9064&#34; target=&#34;_blank&#34;&gt;#9064&lt;/a&gt;)
- ソート済みの非ユニークなシーケンスをflat_setに挿入するとクラッシュする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9092&#34; target=&#34;_blank&#34;&gt;#9092&lt;/a&gt;)
- &lt;code&gt;flat_multimap::insert(itr,itr)&lt;/code&gt;でリークする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9108&#34; target=&#34;_blank&#34;&gt;#9108&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スタックが正しくアラインメントされていないことにより、SSE2のIntrinsic命令によってセグメンテーションフォルトが起きる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8650&#34; target=&#34;_blank&#34;&gt;#8650&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいインターフェイス(unidirectional data transfer)を追加&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/libs/coroutine/doc/html/unidirect.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_55_0/libs/coroutine/doc/html/unidirect.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;所謂Generatorの実装である。以下に簡単なコード例を示す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutines&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;pull_type gen(
    [](boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutines&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;coroutine&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;push_type &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;yield)
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}) yield(i);
    });

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; gen) std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
&lt;/pre&gt;&lt;/div&gt;

これまでの様に&lt;code&gt;coroutine&lt;/code&gt;の&lt;code&gt;caller&lt;/code&gt;から&lt;code&gt;callee&lt;/code&gt;に値を渡すことができない単方向(unidirectional)のインターフェイスとなる&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;このインターフェイスを実装したことにより、従来の双方向なインターフェイスは&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;非推奨&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;となった&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;ただし、`&lt;/span&gt;BOOST_COROUTINES_OLD&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;`マクロを定義することで古いインターフェイスも従来通り使用可能となる。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jamfile.v2でのターゲット名が間違っていることによって、ビルドができない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8782&#34; target=&#34;_blank&#34;&gt;#8782&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windows環境でのauto-linkを有効にした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8801&#34; target=&#34;_blank&#34;&gt;#8801&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#filesystem&#34; name=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Android環境でコンパイルエラーになる問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8706&#34; target=&#34;_blank&#34;&gt;#8706&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fusion::map&lt;/code&gt;の&lt;code&gt;convert&lt;/code&gt;がコンパイルエラーになる問題を修正。&lt;code&gt;map_tag&lt;/code&gt;に対する&lt;code&gt;convert_impl&lt;/code&gt;の特殊化を実装 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8759&#34; target=&#34;_blank&#34;&gt;#8759&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;centroid()&lt;/code&gt;に、&lt;code&gt;segment type&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersects()&lt;/code&gt;と&lt;code&gt;disjoints()&lt;/code&gt;に、Segment-BoxとLinestring-Boxのサポートを追加&lt;/li&gt;
&lt;li&gt;パッキングアルゴリズムを使用した&lt;code&gt;rtee&lt;/code&gt;の作成を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains()&lt;/code&gt;と&lt;code&gt;covers()&lt;/code&gt;に、空間クエリ述語(spatial query predicates)を追加&lt;/li&gt;
&lt;li&gt;イテレーティブクエリを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのケースで、コンセプトに違反して&lt;code&gt;.back()&lt;/code&gt;と&lt;code&gt;.clear()&lt;/code&gt;が呼ばれていた。報告された例を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cart_intersect&lt;/code&gt;、&lt;code&gt;get_turn_info&lt;/code&gt;、&lt;code&gt;handle_tangencies&lt;/code&gt;、&lt;code&gt;enrich_intersection_info&lt;/code&gt;で、一貫性のあるサイド情報を使用するようにした。これは(必要に応じて)6ポイントのみの整数、4 or 3セグメント上でのズームに切り替えることによって行われる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スパイクによって引き起こされる、Intersectionで自己交差が生成される問題を修正した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6958&#34; target=&#34;_blank&#34;&gt;#6958&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;直前ステップのスパイクによって引き起こされる、不正な入力例外(invalid input exception)問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8364&#34; target=&#34;_blank&#34;&gt;#8364&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8365&#34; target=&#34;_blank&#34;&gt;#8365&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::geometry::model::point&lt;/code&gt;の単一引数コンストラクタに、&lt;code&gt;explicit&lt;/code&gt;を付けた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8969&#34; target=&#34;_blank&#34;&gt;#8369&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントにメンバ変数が記載されるよう、doxygen_xml2qbkツールを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8825&#34; target=&#34;_blank&#34;&gt;#8825&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スパイクによって引き起こされる、triangle-triangleのintersectionが失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8652&#34; target=&#34;_blank&#34;&gt;#8652&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;boost/geometry/strategies/intersection.hpp&amp;gt;&lt;/code&gt;が自身のファイルをインクルードしていたので修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9047&#34; target=&#34;_blank&#34;&gt;#9047&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#graph&#34; name=&#34;graph&#34;&gt;Graph&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バンドルプロパティとして&lt;code&gt;void&lt;/code&gt;型は許可していなかったが、指定できてしまっていた(たとえば、&lt;code&gt;VertexProperties&lt;/code&gt;テンプレートパラメータへのグラフ型指定で)。現在は、静的アサートで完全に禁止した。代わりに&lt;code&gt;boost::no_property&lt;/code&gt;を使用すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;depth_first_search&lt;/code&gt;に、ビジターイベントポイント&lt;code&gt;finish_edge&lt;/code&gt;のサポートを追加。この変更は、そのメンバ関数を持たないビジターとの下位互換性を持つ (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5269&#34; target=&#34;_blank&#34;&gt;#5269&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sunコンパイラでのビルドテストを無効にした&lt;/li&gt;
&lt;li&gt;マルチソース頂点のサポートを、非名前付きパラメータ版の&lt;code&gt;breadth_first_visit&lt;/code&gt;、&lt;code&gt;breadth_first_search&lt;/code&gt;、&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;、&lt;code&gt;dijkstra_shortest_paths_no_init&lt;/code&gt;に追加した。これはまだドキュメントに記載していない。これを使用する場合は、それらの関数の単一頂点パラメータを、同じ型を指す2つのInput Iteratorで置き換える&lt;/li&gt;
&lt;li&gt;Louis Dionneのコントリビュートにより、Hawick circuitsアルゴリズムを追加した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8433&#34; target=&#34;_blank&#34;&gt;#8433&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Maciej Piechotkaのコントリビュートにより、edge coloringアルゴリズムを追加した (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8317&#34; target=&#34;_blank&#34;&gt;#8317&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Piotr Wygockiのコントリビュートにより、min-cost max-flowアルゴリズムを追加した&lt;/li&gt;
&lt;li&gt;以下のバグ、および機能リクエストを修正した：&lt;ul&gt;
&lt;li&gt;ヘッダーファイルのインクルード順に依存していた問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8791&#34; target=&#34;_blank&#34;&gt;#8791&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCでの未使用変数警告を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8877&#34; target=&#34;_blank&#34;&gt;#8877&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8986&#34; target=&#34;_blank&#34;&gt;#8986&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;に、辺の重みとして負の値を入れると、予期しないエラーが発生する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9012&#34; target=&#34;_blank&#34;&gt;#9012&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;の擬似コードが間違っていたので修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9080&#34; target=&#34;_blank&#34;&gt;#9080&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sunコンパイラが複雑なSFINAE構文をコンパイル出来なかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8822&#34; target=&#34;_blank&#34;&gt;#8822&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;SVCで無限ループとして推論され警告されてしまうのを抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8568&#34; target=&#34;_blank&#34;&gt;#8568&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSVCのSTLの実装の問題によりリークする問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7156&#34; target=&#34;_blank&#34;&gt;#7156&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interprocess::shared_ptr&lt;/code&gt;の代入演算子の実装の問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7164&#34; target=&#34;_blank&#34;&gt;#7164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8277&#34; target=&#34;_blank&#34;&gt;#8277&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCにてコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8976&#34; target=&#34;_blank&#34;&gt;#8976&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マルチプロセスなブラウザを開くと&lt;code&gt;condition_variable&lt;/code&gt;が加速する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9008&#34; target=&#34;_blank&#34;&gt;#9008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PPCのCASに渡す引数の順番が正しくなかったのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9065&#34; target=&#34;_blank&#34;&gt;#9065&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MSVCにて&lt;code&gt;realloc&lt;/code&gt;という関数が意図しないマクロ置き換えされるのを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9073&#34; target=&#34;_blank&#34;&gt;#9073&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;[訳者註] この&lt;code&gt;realloc&lt;/code&gt;は標準の&lt;code&gt;realloc&lt;/code&gt;ではなく、Interprocessの内部で定義される関数である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;splay&lt;/code&gt;コンテナの &lt;code&gt;xxx_dont_splay&lt;/code&gt;関数を廃止した。また、&lt;code&gt;splay_set_hook&lt;/code&gt;も廃止した。この代替として、&lt;code&gt;bs_set_hook&lt;/code&gt;を利用すること。いずれもBoost 1.56で削除予定である&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&lt;/span&gt; ハッシュコンテナの&lt;code&gt;end&lt;/code&gt;イテレータがバケット配列の&lt;code&gt;end&lt;/code&gt;よりひとつ後ろを指すよう実装されていた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8698&#34; target=&#34;_blank&#34;&gt;#8698&lt;/a&gt;)。このため、バケット配列の隣に値を挿入したときにひどいバグが発生していた。&lt;code&gt;end&lt;/code&gt;イテレータはバケット配列の先頭を指すように修正した&lt;/li&gt;
&lt;li&gt;テンプレートおよびデバッグシンボルの削減のために大規模なリファクタリングを行った。MSVCのデバッグモードで生成されるテストオブジェクトファイルサイズが約半分になった。Identical COMDAT Folding (ICF)がないコンパイラでもサイズ削減に寄与するはずである&lt;/li&gt;
&lt;li&gt;SCARYイテレータを実装した &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;例外は&lt;code&gt;boost::bad_lexical_cast&lt;/code&gt;に変換されなくなった。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8966&#34; target=&#34;_blank&#34;&gt;#8966&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;の128bit整数型に対する特殊化された値が変換のために必要になった場合に、それをチェックする&lt;code&gt;static assert&lt;/code&gt;を追加。128bit整数型をサポートしているかどうかを判定するために&lt;code&gt;BOOST_HAS_INT128&lt;/code&gt;を使用するように変更。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8790&#34; target=&#34;_blank&#34;&gt;#8790&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントを改善し、さらに多くの使用例を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;修正点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/code&gt;環境設定マクロを追加した。このマクロを定義すると、設定パーサでのフォーマッタファクトリとデフォルトフィルタのコンパイルをしないようになる。これにより、設定パーサのサポートを維持したままバイナリサイズを削減できる可能性がある&lt;/li&gt;
&lt;li&gt;パーサを書きなおして生成されるバイナリサイズを削減した。この修正により、あいまいな入力や正しくない入力の検出精度が向上し、より堅牢になった&lt;/li&gt;
&lt;li&gt;以下のヘッダを廃止予定にした。これらのヘッダは将来のリリースで削除される。また、内容については他のライブラリに移譲した&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/intrusive_ref_counter.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/explicit_operator_bool.hpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/utility/empty_deleter.hpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows上で&lt;code&gt;QueryPerformanceCounter&lt;/code&gt; APIを利用した場合、激しいスレッド間競合により、&lt;code&gt;timer&lt;/code&gt;アトリビュートが間違った時間になってしまう問題を修正&lt;/li&gt;
&lt;li&gt;パース済みフィルターとあるアトリビュートの組み合わせを防止するフィルターパーサのバグを修正&lt;/li&gt;
&lt;li&gt;デフォルトシンクとフォーマッタ間でスレッドIDの書式が違う問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;完了したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android上で&lt;code&gt;posix_memalign&lt;/code&gt;が宣言されていない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8815&#34; target=&#34;_blank&#34;&gt;#8815&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mingw w64上でコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8819&#34; target=&#34;_blank&#34;&gt;#8819&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/log/detail/spin_mutex.hpp&lt;/code&gt;が&lt;code&gt;pthread_&lt;/code&gt;系関数からのエラーを完全に無視している (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8915&#34; target=&#34;_blank&#34;&gt;#8915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libs/log/src/once_block.cpp&lt;/code&gt;が&lt;code&gt;pthread_&lt;/code&gt;系関数からのエラーをほとんど無視している (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8917&#34; target=&#34;_blank&#34;&gt;#8917&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;attribute_value_set.cpp&lt;/code&gt;がコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9139&#34; target=&#34;_blank&#34;&gt;#9139&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;boost/log/detail/snprintf.hpp&lt;/code&gt;が&lt;code&gt;snprintf&lt;/code&gt;と&lt;code&gt;vsnprintf&lt;/code&gt;が定義されていないためコンパイルできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9140&#34; target=&#34;_blank&#34;&gt;#9140&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sun Studio 12.3で&lt;code&gt;boost::log::aux::light_function&lt;/code&gt;がビルドできない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9153&#34; target=&#34;_blank&#34;&gt;#9153&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;solaris studio 12.3でstlport4を利用するとき、&lt;code&gt;&amp;lt;cstudio&amp;gt;&lt;/code&gt;をインクルードすれば&lt;code&gt;fflush&lt;/code&gt;は&lt;code&gt;std&lt;/code&gt;名前空間にあるが、&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;をインクルードしても&lt;code&gt;std&lt;/code&gt;名前空間にある(&lt;code&gt;using&lt;/code&gt;しているだけ)ので、&lt;code&gt;std::&lt;/code&gt;を指定しなければならない (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9155&#34; target=&#34;_blank&#34;&gt;#9155&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳細は&lt;a href=&#34;http://www.boost.org/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;変更履歴&lt;/a&gt;を参照のこと&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多数の警告を抑制。（主にGCC-4.8とMSVCからのもの）(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8384&#34; target=&#34;_blank&#34;&gt;#8384&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8855&#34; target=&#34;_blank&#34;&gt;#8855&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9107&#34; target=&#34;_blank&#34;&gt;#9107&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9109&#34; target=&#34;_blank&#34;&gt;#9109&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PGIでのコンパイルエラーを修正。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8333&#34; target=&#34;_blank&#34;&gt;#8333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PGIで、&lt;code&gt;erf&lt;/code&gt;関数が不正な値を生成する原因となる、定数初期化の問題を修正。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8621&#34; target=&#34;_blank&#34;&gt;#8621&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++の関数と同じ名前で定義されているC99のいくつかのマクロでマクロ展開されてしまうのを防止。 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8732&#34; target=&#34;_blank&#34;&gt;#8732&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8733&#34; target=&#34;_blank&#34;&gt;#8733&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自由度が巨大な（&lt;code&gt;integer&lt;/code&gt;で表現可能な値よりも大きな）場合でもStudentのT分布が正しく振る舞うように修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8873&#34; target=&#34;_blank&#34;&gt;#8873&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;プラットフォームで&lt;code&gt;long double&lt;/code&gt;がサポートされていない場合でも、いくつかのコア関数で&lt;code&gt;long double&lt;/code&gt;が使用できるようにした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8940&#34; target=&#34;_blank&#34;&gt;#8940&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;確率変数が無限大の時に不正な尺度母数や位置母数のエラーを捕捉できるように、分布関数のエラーハンドリングを修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9126&#34; target=&#34;_blank&#34;&gt;#9126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Intel C++ 14の不完全な&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;のためのワークアラウンドを追加。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9083&#34; target=&#34;_blank&#34;&gt;#9083&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;楕円積分の中で行われる、引数を約分する処理の整合性を向上。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9104&#34; target=&#34;_blank&#34;&gt;#9104&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベータ関数がarcsineもしくはStudentのT分布である時に、逆不完全ベータ関数の結果で桁落ちが発生してしまうバグを修正。([訳注]：訳に自信ないのでダブルチェックお願いします)&lt;/li&gt;
&lt;li&gt;一種のベッセル関数ならびにK関数の連分数で擬似的な(Spurious)オーバーフローやアンダーフローが発生する問題を修正。([訳注]：訳に自信ないのでダブルチェックお願いします)&lt;/li&gt;
&lt;li&gt;Thomas Luuによる、非中央のカイ二乗分布変位値の改善を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントの誤りを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7952&#34; target=&#34;_blank&#34;&gt;#7952&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MoveのTraitsを改善 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8764&#34; target=&#34;_blank&#34;&gt;#8764&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::move&lt;/code&gt;と&lt;code&gt;boost::forward&lt;/code&gt;に&lt;code&gt;noexcept&lt;/code&gt;指定をつけた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8765&#34; target=&#34;_blank&#34;&gt;#8765&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++98/03で&lt;code&gt;BOOST_MOVABLE_BUT_NOT_COPYABLE&lt;/code&gt;マクロを適用すると正しく動作しない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8842&#34; target=&#34;_blank&#34;&gt;#8842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/move/algorithm.hpp&lt;/code&gt;で自身をインクルードしていた (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8979&#34; target=&#34;_blank&#34;&gt;#8979&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#msm&#34; name=&#34;msm&#34;&gt;Meta State Machine&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; : interrupt stateは中断を終了させるためのイベント列をサポートした。&lt;/li&gt;
&lt;li&gt;例外を無効にしたgcc-4.2でコンパイルが通らなかった問題を修正。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8686&#34; target=&#34;_blank&#34;&gt;#8686&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multiprecision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Serialization サポートの追加&lt;/li&gt;
&lt;li&gt;GCC による警告を抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8872&#34; target=&#34;_blank&#34;&gt;#8872&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow&lt;/code&gt; の引数に大きな値を設定した際に発生するバグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8809&#34; target=&#34;_blank&#34;&gt;#8809&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow&lt;/code&gt; で &lt;code&gt;0&lt;/code&gt; のべき乗を計算した場合のバグを修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8798&#34; target=&#34;_blank&#34;&gt;#8798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; の IO で &lt;code&gt;CHAR_BIT&lt;/code&gt; 以下の値の出力 (文字列への変換) が正常に行われていなかった問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8745&#34; target=&#34;_blank&#34;&gt;#8745&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で固定サイズのときに左シフトをするとオーバフローが発生する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8741&#34; target=&#34;_blank&#34;&gt;#8741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で発生する警告を抑制 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8748&#34; target=&#34;_blank&#34;&gt;#8748&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C99 のマクロが必要になる関数を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8732&#34; target=&#34;_blank&#34;&gt;#8732&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt; で &lt;code&gt;INT_MIN&lt;/code&gt;, &lt;code&gt;LONG_MIN&lt;/code&gt; 等の構築が失敗する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8711&#34; target=&#34;_blank&#34;&gt;#8711&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index Container&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.MultiIndexのC++11標準準拠度向上&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;を効率的にムーヴできるようになった&lt;/li&gt;
&lt;li&gt;Initializer listのサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace&lt;/code&gt;系関数のサポート&lt;/li&gt;
&lt;li&gt;コピー不可の要素(&lt;code&gt;std::unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt;など)をサポート。また、要素と互換性のある型のイテレータについて、無駄なコピーをせず、&lt;code&gt;[first,last)&lt;/code&gt;の形式で範囲挿入できるようになった&lt;/li&gt;
&lt;li&gt;ランダムアクセスインデックスへの&lt;code&gt;shrink_to_fit()&lt;/code&gt;実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++11以前のコンパイラでの制限については&lt;a href=&#34;http://www.boost.org//libs/multi_index/doc/compiler_specifics.htmll&#34; target=&#34;_blank&#34;&gt;compiler specifics&lt;/a&gt;参照のこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下のクラスは&lt;strong&gt;非推奨&lt;/strong&gt;になった：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;member_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;const_mem_fun_explicit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mem_fun_explicit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_equal_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_less&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_greater&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;composite_key_result_hash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#mpi&#34; name=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MPI の非推奨な関数を入れ替え&lt;/li&gt;
&lt;li&gt;マルチスレッド初期化のサポートを追加&lt;/li&gt;
&lt;li&gt;in-prace collectives の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#phoenix&#34; name=&#34;phoenix&#34;&gt;Phoenix&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;phonenix::funcion&lt;/code&gt;のコンストラクタを&lt;code&gt;constexpr&lt;/code&gt;にした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9049&#34; target=&#34;_blank&#34;&gt;#9049&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#polygon&#34; name=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sebastien Loriotによるパッチで、VoronoiベンチマークのCGAL部分を更新した。&lt;/li&gt;
&lt;li&gt;(Intelからのパッチにより、)&lt;code&gt;polygon_90_set_data&lt;/code&gt;に多角形分解機能(polygon decomposition capability)を追加した。&lt;/li&gt;
&lt;li&gt;Tracチケットのバグ修正：&lt;ul&gt;
&lt;li&gt;Polygonと&lt;code&gt;range/algorithm&lt;/code&gt;が衝突する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8197&#34; target=&#34;_blank&#34;&gt;#8197&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#property-map&#34; name=&#34;property-map&#34;&gt;Property Map&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dynamic_properties&lt;/code&gt;オブジェクトを非破壊的に &lt;code&gt;.property(name, pm)&lt;/code&gt; メソッドチェインで構築できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_properties()
  .property(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;color&#34;&lt;/span&gt;, color_map)
  .property(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;pos&#34;&lt;/span&gt;, position_map)
&lt;/pre&gt;&lt;/div&gt;

- 生ポインタをプロパティマップとして利用できないようにした。これは以前、Visual Studioでしばしば失敗したためである。このような用法はBoost.Graphの例やテストにあったが全て削除した。&lt;code&gt;graph&lt;/code&gt;で&lt;code&gt;vertex&lt;/code&gt;プロパティを使う際(この機能のもっとも一般的な利用法である)には次のように記述する：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_iterator_property_map(
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pointer or container .begin() iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
  get(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_index, &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;graph object&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

(註：このコードで&lt;code&gt;get()&lt;/code&gt;の名前空間が省略されているのはコードを汎化する上で重要である)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;graph&lt;/code&gt;以外では、以下のように記述するとよい&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_iterator_property_map(
  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;pointer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;typed_identity_property_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;

&lt;code&gt;&amp;lt;boost/property_map/property_map.hpp&amp;gt;&lt;/code&gt;の151行目と159行目にはコメントアウトした&lt;code&gt;static&lt;/code&gt;アサーションがあるが、これを有効にすることで、ユーザーコード中にあるこのような廃止予定のポインタの用法を検出することができる&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#rational&#34; name=&#34;rational&#34;&gt;Rational&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11モードでコンパイルする場合、Boost.Testが&lt;code&gt;lowest&lt;/code&gt;と&lt;code&gt;max_digits10&lt;/code&gt;のどちらかを参照するため、C++11で追加された&lt;code&gt;std::numeric_limits&lt;/code&gt;のメンバ、&lt;code&gt;lowest&lt;/code&gt;と&lt;code&gt;max_digits10&lt;/code&gt;をユニットテストコードに追加した。&lt;/li&gt;
&lt;li&gt;C++11でナローイングがエラーになるため、内部変数の初期化でナローイングがおこらないように修正した。これにより &lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/5855&#34; target=&#34;_blank&#34;&gt;#5855&lt;/a&gt; が解決された。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#smart-pointer&#34; name=&#34;smart-pointer&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Logから抽出された&lt;code&gt;boost/smart_ptr/intrusive_ref_counter.hpp&lt;/code&gt;ヘッダーが加えられた。このヘッダーはユーザーのクラスに&lt;code&gt;intrusive_ptr&lt;/code&gt;サポートを加えるミックスイン基底クラスを実装する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;機能追加&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8519&#34; target=&#34;_blank&#34;&gt;#8519&lt;/a&gt; 同期: completion function（バリアの待機完了時に呼ばれる関数）の機能を追加して&lt;code&gt;barrier&lt;/code&gt;クラスを更新。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8515&#34; target=&#34;_blank&#34;&gt;#8515&lt;/a&gt; 非同期: &lt;code&gt;shared_future::then&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8615&#34; target=&#34;_blank&#34;&gt;#8615&lt;/a&gt; 非同期: &lt;code&gt;make_future&lt;/code&gt;/&lt;code&gt;make_shared_future&lt;/code&gt;を&lt;code&gt;make_ready_future&lt;/code&gt;に置き換え。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8627&#34; target=&#34;_blank&#34;&gt;#8627&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::unwrap&lt;/code&gt;メンバ関数と&lt;code&gt;unwrap&lt;/code&gt;するコンストラクタを追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8677&#34; target=&#34;_blank&#34;&gt;#8677&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::get_or&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8678&#34; target=&#34;_blank&#34;&gt;#8678&lt;/a&gt; 非同期: &lt;code&gt;future&amp;lt;&amp;gt;::fallback_to&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8891&#34; target=&#34;_blank&#34;&gt;#8891&lt;/a&gt; &lt;code&gt;upgrade_to_unique_lock&lt;/code&gt;に&lt;code&gt;mutex()&lt;/code&gt;メンバ関数が無かったので追加。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8955&#34; target=&#34;_blank&#34;&gt;#8955&lt;/a&gt; &lt;code&gt;future&lt;/code&gt;から効率的に&lt;code&gt;exception_ptr&lt;/code&gt;を取得したいという要望に対応。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7461&#34; target=&#34;_blank&#34;&gt;#7461&lt;/a&gt; &lt;code&gt;count_to_release&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;のときに&lt;code&gt;detail::win32::ReleaseSemaphore&lt;/code&gt;が呼ばれてしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt; &lt;code&gt;GetTickCount&lt;/code&gt;より適切な&lt;code&gt;GetTickCount64&lt;/code&gt;を使用するように変更。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8768&#34; target=&#34;_blank&#34;&gt;#8768&lt;/a&gt; win32で稀に&lt;code&gt;condition_variable&lt;/code&gt;が永遠に&lt;code&gt;wait&lt;/code&gt;してしまう問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8817&#34; target=&#34;_blank&#34;&gt;#8817&lt;/a&gt; Windows CE用のコードによって、mingw w64環境でコンパイルができない問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8943&#34; target=&#34;_blank&#34;&gt;#8943&lt;/a&gt; Window上のIntel C++ Composer XE 2013で&lt;code&gt;boost::call_once&lt;/code&gt;を使用したコードのコンパイルに失敗する問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8931&#34; target=&#34;_blank&#34;&gt;#8931&lt;/a&gt; &lt;code&gt;external_locking&lt;/code&gt;のリファレンスにtypoがあったのを修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9029&#34; target=&#34;_blank&#34;&gt;#9029&lt;/a&gt; ドキュメントの誤植を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9073&#34; target=&#34;_blank&#34;&gt;#9037&lt;/a&gt; gcc &lt;code&gt;-Wshadow&lt;/code&gt;でコンパイルしたときに&lt;code&gt;conditional_variable{,_fwd}.hpp&lt;/code&gt;で警告が発生する問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9041&#34; target=&#34;_blank&#34;&gt;#9041&lt;/a&gt; Boost.Threadの動的共有オブジェクトがBoost.Atomicへのシンボル参照を解決できない問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9048&#34; target=&#34;_blank&#34;&gt;#9048&lt;/a&gt; &lt;code&gt;boost::scoped_thread&lt;/code&gt;の可変長テンプレート引数を使用するコンストラクタが使いにくい問題を修正。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9079&#34; target=&#34;_blank&#34;&gt;#9079&lt;/a&gt; Windows環境で、Condition variableが永遠にwaitしてしまう問題を修正。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#timer&#34; name=&#34;timer&#34;&gt;Timer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel compilerで&lt;code&gt;progress.hpp&lt;/code&gt;がコンパイルできない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8956&#34; target=&#34;_blank&#34;&gt;#8956&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#type-traits&#34; name=&#34;type-traits&#34;&gt;Type Traits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_copy_contructible&lt;/code&gt;トレイト追加 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8802&#34; target=&#34;_blank&#34;&gt;#8802&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の警告を修正&lt;ul&gt;
&lt;li&gt;未使用の変数への警告 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8851&#34; target=&#34;_blank&#34;&gt;#8851&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用の&lt;code&gt;typedef&lt;/code&gt;への警告 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8874&#34; target=&#34;_blank&#34;&gt;#8874&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの&lt;code&gt;detail&lt;/code&gt;な関数がADLによってエクスポートされてしまうのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::result_of&lt;/code&gt;で、デフォルトでTR1のプロトコルを使うようにし、もしこの関数オブジェクトがサポートしていない場合(たとえばC++11のラムダ関数)には&lt;code&gt;decltype&lt;/code&gt;を使うように設定できるようになった。このモードを利用するには&lt;code&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/code&gt;環境設定マクロを定義する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::base_from_member&lt;/code&gt;クラステンプレートのC++11対応度向上。このクラスはコンパイラが右辺値参照、可変引数テンプレート、関数テンプレートのデフォルト実引数機能を備えている際に、コンストラクタ実引数の完全転送を実装する&lt;/li&gt;
&lt;li&gt;Boost.Logから&lt;code&gt;boost/utility/explicit_operator_bool.hpp&lt;/code&gt;と&lt;code&gt;boost/utility/empty_deleter.hpp&lt;/code&gt;を受け継いだ。それぞれ、&lt;code&gt;bool&lt;/code&gt;への明示的な型変換演算子となにもしないデリータを定義するためのユーティリティである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; rvalueをコンストラクタ/代入演算子の仮引数にしたときコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8988&#34; target=&#34;_blank&#34;&gt;#8988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ある&lt;code&gt;variant&lt;/code&gt;クラステンプレートが&lt;code&gt;nothrow&lt;/code&gt;コピーコンストラクタと例外を送出するムーヴコンストラクタを持っている場合に、ムーヴ代入演算子がコンパイルできない問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8772&#34; target=&#34;_blank&#34;&gt;#8772&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;例外が無効の環境下でのコンパイルに対応 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8717&#34; target=&#34;_blank&#34;&gt;#8717&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;到達不能コード警告を解消 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8665&#34; target=&#34;_blank&#34;&gt;#8665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;重複したコードを削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7601&#34; target=&#34;_blank&#34;&gt;#7601&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#wave&#34; name=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Waveドライバーが0xFFFFui64トークンを不適切に処理する問題を修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8848&#34; target=&#34;_blank&#34;&gt;#8848&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;--c++0x&lt;/code&gt;オプションが記載されていたが、実際には不正なオプションになる。ドキュメント表記を&lt;code&gt;--c++11&lt;/code&gt;に修正 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9098&#34; target=&#34;_blank&#34;&gt;#9098&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#xpressive&#34; name=&#34;xpressive&#34;&gt;Xpressive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不完全なキャラクタセットについて&lt;code&gt;assert&lt;/code&gt;ではなく例外を投げるようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8843&#34; target=&#34;_blank&#34;&gt;#8843&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;未使用の&lt;code&gt;typedef&lt;/code&gt;削除 (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8880&#34; target=&#34;_blank&#34;&gt;#8880&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence_stack.hpp&lt;/code&gt;で&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;のかわりにRAIIを使うようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8882&#34; target=&#34;_blank&#34;&gt;#8882&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;clangの&lt;code&gt;-Wimplicit-fallthrough&lt;/code&gt;診断がきちんと動くようにした (&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8474&#34; target=&#34;_blank&#34;&gt;#8474&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_55_0.html#quickbook&#34; name=&#34;quickbook&#34;&gt;Quickbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Quickbook 1.6の言語実装を完了した。詳細は以下を参照&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/quickbook/versions.html#quickbook.versions.1_6&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/doc/html/quickbook/versions.html#quickbook.versions.1_6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;＜ライブラリ名＞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt; (必要であれば分類分けをする)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;＜追加、変更、削除内容＞ (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/0&#34; target=&#34;_blank&#34;&gt;#0&lt;/a&gt;) (←svn.boost.orgのissuesへのリンク)&lt;/li&gt;
&lt;li&gt;＜追加、変更、削除内容＞ (&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/0&#34; target=&#34;_blank&#34;&gt;r0&lt;/a&gt;) (←svn.boost.orgのcommitへのリンク)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;： 赤文字+ボールドではっきりと分かるように&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&lt;/span&gt;： これも赤文字で&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[訳注] 本家ノートの記述が不十分であると考えるときは、適宜注釈を入れる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://blog.example.com/path/to/references&#34; target=&#34;_blank&#34;&gt;必要であれば外部の文献へのリンクを挿入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:
- Linux:
    - Clang: 3.3, 3.2, 3.1, 3.0
    - Clang, C++11, libc++: 3.4, 3.3
    - GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
    - GCC, C++11: 4.8.1
    - GCC, C++98: 4.8.1
- OS X:
    - GCC: 4.2
    - Apple Clang: 5.0
    - Apple Clang, C++11: 5.0
- Windows:
    - GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
    - Visual C++: 11.0, 10.0, 9.0&lt;/p&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.0&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 5.0&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.3, 3.2, 3.1, 3.0, trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.4&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4, 3.3&lt;/li&gt;
&lt;li&gt;GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.1&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.8.1&lt;/li&gt;
&lt;li&gt;Intel: 13.0.1, 12.1.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi, Kohei Takahashi, Yuta Hirokawa, zak, sscrisk, hotwatermorning&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.56.0リリースノート -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/document/version/1_56_0.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:document/version/1_56_0.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;Boost 1.56.0リリースノート&lt;/h1&gt;
&lt;p&gt;本家リリースノート：&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_56_0.qbk&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;モジュール化&lt;/h2&gt;
&lt;p&gt;Boostのバージョン管理を、Subversionから、Gitのサブモジュールを使用するシステムに移行した。ディレクトリの構成が、以前と少し異なる。&lt;/p&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新モジュール&lt;/h2&gt;
&lt;p&gt;以下のモジュールは、既存のコードから抽出されたもの。ヘッダのパスは今までと同じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assert&lt;ul&gt;
&lt;li&gt;カスタマイズ可能なassertマクロ。Peter Dimovによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core&lt;ul&gt;
&lt;li&gt;他のライブラリから使用される、最小の依存関係を持つコアユーティリティ。Peter Dimov、Glen Fernandes、Andrey Semashevによってメンテナンスされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lexical_Cast&lt;ul&gt;
&lt;li&gt;Kevlin Henney氏による、テキストと整数間の汎用的な変換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throw_Exception&lt;ul&gt;
&lt;li&gt;Emil Dotchevski氏による、Boostから例外を送出するための一般的なインフラストラクチャ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WinApi&lt;ul&gt;
&lt;li&gt;Boost内部で使用する、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;を必要としない宣言。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/align.html&#34; target=&#34;_blank&#34;&gt;Align&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Glen Fernandes氏による、メモリアラインメントの関数、アロケータ、アダプタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_56_0/doc/html/boost_typeindex.html&#34; target=&#34;_blank&#34;&gt;Type_Index&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Antony Polukhin氏による、実行時とコンパイル時両方で使用できる、コピー可能なtype info。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#any&#34;&gt;Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#assign&#34;&gt;Assign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#hash&#34;&gt;Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#move&#34;&gt;Move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#mpl&#34;&gt;MPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#tti&#34;&gt;TTI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#uuid&#34;&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;非推奨ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TR1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#accumulators&#34; name=&#34;accumulators&#34;&gt;Accumulators&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新たなアキュムレータとして、&lt;code&gt;rolling_variance&lt;/code&gt;と&lt;code&gt;rolling_moment&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#any&#34; name=&#34;any&#34;&gt;Any&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照関係の問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9215&#34; target=&#34;_blank&#34;&gt;#9215&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9462&#34; target=&#34;_blank&#34;&gt;#9462&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boost.Coroutineの新しいインタフェースで&lt;code&gt;boost::asio::spawn()&lt;/code&gt;が動かなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9442&#34; target=&#34;_blank&#34;&gt;#9442&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9928&#34; target=&#34;_blank&#34;&gt;#9928&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;のデストラクタによるクリーンナップ処理が走ったとき、&lt;code&gt;boost::asio::spawn()&lt;/code&gt;のコルーチンが正しくアンワインド(スタック巻き戻しによるスタック内のデストラクタ呼び出し)されない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9731&#34; target=&#34;_blank&#34;&gt;#9731&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::wrap()&lt;/code&gt;と&lt;code&gt;strand::wrap()&lt;/code&gt;によって生成されるハンドラのための継続フックの移譲を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9741&#34; target=&#34;_blank&#34;&gt;#9741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;接続志向IPソケットのために、WindowsのI/O完了ポートバックエンドに、使用可能なら&lt;code&gt;ConnectEx()&lt;/code&gt;関数を使用するようにした。&lt;/li&gt;
&lt;li&gt;非Windows(および非IOCP Windows)環境において、&lt;code&gt;io_service&lt;/code&gt;のインスタンスひとつに付き、ひとつの条件変数を使用するよう変更した。これによって、&lt;code&gt;run_one()&lt;/code&gt;が複数スレッドから呼ばれる際の、潜在的な競合状態を解決した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono&lt;/code&gt;と&lt;code&gt;std::chrono&lt;/code&gt;のクロックをベースにしてタイムアウト時間を計算する際の整数オーバーフローを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9662&#34; target=&#34;_blank&#34;&gt;#9662&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9778&#34; target=&#34;_blank&#34;&gt;#9778&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;kqueueバックエンドの&lt;code&gt;EV_CLEAR&lt;/code&gt;ハンドリングに、さらに変更を加えた。Mac OS Xの&lt;code&gt;close()&lt;/code&gt;システムコールがハングするケースがあったため。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolver_query_base::flags::operator~&lt;/code&gt;の実装で無限再帰が起こっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9548&#34; target=&#34;_blank&#34;&gt;#9548&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;膨大な数のソケットを使うWindows上で&lt;code&gt;select&lt;/code&gt;リアクタがより効率的に動作するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9528&#34; target=&#34;_blank&#34;&gt;#9528&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのGCCで起きるtype aliasingの問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9550&#34; target=&#34;_blank&#34;&gt;#9550&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アドレスサニタイザーの警告を回避するために、バッファのテストをコンパイル時のみ走らせるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のWindowsバージョンで、&lt;code&gt;GetQueuedCompletionStatus()&lt;/code&gt;のタイムアウトワークアラウンドを無効にした(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/9d13af49f80f2f12e3b99c9c8b4219b0c4bfe8eb&#34; target=&#34;_blank&#34;&gt;9d13af4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスを使用する際の、文字列ベースのスコープIDをサポートした&lt;/li&gt;
&lt;li&gt;IPv6マルチキャストグループのジョインに、明示的に指定されなければアドレスのスコープIDを使用するよう変更した&lt;/li&gt;
&lt;li&gt;リンクローカルなマルチキャストアドレスのテストがMac OS XとBSD環境で失敗していたので修正&lt;/li&gt;
&lt;li&gt;GCCで無名enumを使用すると発生する問題のワークアラウンドを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10042&#34; target=&#34;_blank&#34;&gt;#10042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsの&lt;code&gt;HANDLE&lt;/code&gt;バックエンドを、&lt;code&gt;ERROR_MORE_DATA&lt;/code&gt;を無視するよう巻き戻した。代わりに、他のもの(&lt;code&gt;error_code&lt;/code&gt;を使うか、&lt;code&gt;system_error&lt;/code&gt;例外の送出)を使ってエラーを伝搬するようにし、転送されたバイト数が返るようにした。部分的なメッセージを処理する必要がある場合は、&lt;code&gt;error_code&lt;/code&gt;のオーバーロードを使用すること(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10034&#34; target=&#34;_blank&#34;&gt;#10034&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_set&lt;/code&gt;の実装に含まれるシグナル番号チェックでの、&lt;a href=&#34;http://ja.wikipedia.org/wiki/Off-by-one%E3%82%A8%E3%83%A9%E3%83%BC&#34; target=&#34;_blank&#34;&gt;off-by-oneエラー&lt;/a&gt;を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9324&#34; target=&#34;_blank&#34;&gt;#9324&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Crayコンパイラで動くように、SSE2を組み込み関数ではなくインラインアセンブラを使用するようにした&lt;/li&gt;
&lt;li&gt;最新のVisual C++とWindows SDKで非推奨マークが付いているWinsockの機能を使用停止(commit &lt;a href=&#34;https://github.com/boostorg/asio/commit/cc9730e493c015e8ae089da1b8438fb6477710f7&#34; target=&#34;_blank&#34;&gt;cc9730e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのGCCで単体テストを通すためのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;多くのドキュメントの細かい部分を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8295&#34; target=&#34;_blank&#34;&gt;#8295&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9605&#34; target=&#34;_blank&#34;&gt;#9605&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9771&#34; target=&#34;_blank&#34;&gt;#9771&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#assign&#34; name=&#34;assign&#34;&gt;Assign&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11での曖昧さを解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3073&#34; target=&#34;_blank&#34;&gt;#3073&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリを再設計した。内部的なリファクタリングのほか、さまざまなバグの修正、機能テストマクロの不適切な値やオーバーフローハンドリングの割り込みといったことも含む。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory_order&lt;/code&gt;列挙型の値を変更した。列挙型の値はインタフェースの一部ではないが、ユーザーのインタフェースとして使用する場合、ABIが壊れる可能性がある。&lt;/li&gt;
&lt;li&gt;MSVCのWindows x64向けに、128ビットのアトミック操作を実装した。ターゲットCPUにcmpxchg16b命令が存在していることを想定している。初期のいくつかのAMD CPUはこの命令をサポートしていない。そのようなターゲットのためには、&lt;code&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/code&gt;マクロを定義する。&lt;/li&gt;
&lt;li&gt;実験的に、MSVCのWindows ARMターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;実験的に、GCCのDEC Alphaターゲットのサポートを実装した。&lt;/li&gt;
&lt;li&gt;GCCのARMv6とそれ以降のサポートを改善した。全てのアトミック操作を、CASベースのループの代わりに、アセンブラブロックで実装した。ARMv7で64ビット操作をサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_ATOMIC_FLAG_INIT&lt;/code&gt;マクロと&lt;code&gt;atomic_flag&lt;/code&gt;の初期化の、オプショナルなサポートを実装した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8158&#34; target=&#34;_blank&#34;&gt;#8158&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;デフォルトコンストラクタによる初期化に依存する。以下の記事を参照：&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zakkas783.tumblr.com/post/25490513807/constant-initialization&#34; target=&#34;_blank&#34;&gt;Constant Initialization - 雑貨’s tumblr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SPARCv9ターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9446&#34; target=&#34;_blank&#34;&gt;#9446&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;PowerPCターゲットのコンパイルを修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9447&#34; target=&#34;_blank&#34;&gt;#9447&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;x86とx86-64に対するClangでのいくつかの互換性問題を修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9610&#34; target=&#34;_blank&#34;&gt;#9610&lt;/a&gt;、&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9842&#34; target=&#34;_blank&#34;&gt;#9842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WindowsのIA64プラットフォームに特化したコードを削除した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#circular-buffer&#34; name=&#34;circular-buffer&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11のアロケータモデルをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9970&#34; target=&#34;_blank&#34;&gt;#9970&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#concept-check&#34; name=&#34;concept-check&#34;&gt;Concept Check&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いくつかの警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5012&#34; target=&#34;_blank&#34;&gt;#5012&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#container&#34; name=&#34;container&#34;&gt;Container&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DLMallocベースの拡張アロケータを追加&lt;ul&gt;
&lt;li&gt;参照：「&lt;a href=&#34;http://faithandbrave.hateblo.jp/entry/2014/04/21/141406&#34; target=&#34;_blank&#34;&gt;Boost.Containerにrealloc相当の機能が入る予定&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::allocator&amp;lt;T, 2&amp;gt;&lt;/code&gt;を使用することで(2はバージョン)、&lt;code&gt;vector&lt;/code&gt;の内部実装に&lt;code&gt;realloc()&lt;/code&gt;相当の機能が使われるようになる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::node_allocator&lt;/code&gt;を追加。これは、シンプルな分離ストレージのアロケータ。明示的に要求しない限り、システムにメモリを返さない、Boost.Poolと同じようなアプローチをとっている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::container::adaptive_pool&lt;/code&gt;を追加。これは、&lt;code&gt;node_allocator&lt;/code&gt;が低コストでシステムにメモリを返せるようにするためのもの。&lt;/li&gt;
&lt;li&gt;これらの機能を使うには、Boost.Containerのビルドが必要。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーベースの順序付き連想コンテナのカスタマイズ性を改善した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(multi)map&lt;/code&gt;および&lt;code&gt;(multi)set&lt;/code&gt;の実装に、AVL tree、Scapegoat tree、Splay treeを使用できるようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS2005でcontainer/memory_util.hppをインクルードしたあとに&lt;code&gt;swap()&lt;/code&gt;を使うとコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9338&#34; target=&#34;_blank&#34;&gt;#9338&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize()&lt;/code&gt;のパフォーマンス問題を解決(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9637&#34; target=&#34;_blank&#34;&gt;#9637&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;の構築を最適化(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9648&#34; target=&#34;_blank&#34;&gt;#9648&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_vector&lt;/code&gt;のイテレータから&lt;code&gt;iterator_range&lt;/code&gt;を作れない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9801&#34; target=&#34;_blank&#34;&gt;#9801&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector::resize(size, default_init)&lt;/code&gt;のドキュメントでvalue initializedされると書かれていたので、default initializedに修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9915&#34; target=&#34;_blank&#34;&gt;#9915&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほとんどのコンテナの代入演算子で、アロケータの伝搬が間違っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9916&#34; target=&#34;_blank&#34;&gt;#9916&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat_map::insert(ordered_unique_range_t...)&lt;/code&gt;に&lt;code&gt;move_iterator&lt;/code&gt;を渡せない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9931&#34; target=&#34;_blank&#34;&gt;#9931&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;の中で、重複メモリ範囲で&lt;code&gt;memcpy()&lt;/code&gt;を行っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9955&#34; target=&#34;_blank&#34;&gt;#9955&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#context&#34; name=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;：&lt;code&gt;fcontext_t&lt;/code&gt;型を、構造体から、&lt;code&gt;void*&lt;/code&gt;の別名に変更&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fcontext_t&lt;/code&gt;型に関連する&lt;code&gt;make_fcontext()&lt;/code&gt;関数のシグニチャの一部が、&lt;code&gt;fcontext_t*&lt;/code&gt;から&lt;code&gt;fcontext_t&lt;/code&gt;に変わる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux環境において、コンテキストに使用するスタックがexecutable stackではないことを示すマーカーを付けた。これにより、executable stackを作る権限が必要なくなる。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8826&#34; target=&#34;_blank&#34;&gt;#8826&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;iOSとWindows 8環境において、Boost.Contextの例外を捕捉できない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9437&#34; target=&#34;_blank&#34;&gt;#9437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;x32 ABIをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9445&#34; target=&#34;_blank&#34;&gt;#9445&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64leをサポート(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9522&#34; target=&#34;_blank&#34;&gt;#9522&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;powerpc_64 le/beの、エンディアン周りのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9743&#34; target=&#34;_blank&#34;&gt;#9743&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OS X + clangに対するx86のバグ修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9774&#34; target=&#34;_blank&#34;&gt;#9774&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#coroutine&#34; name=&#34;coroutine&#34;&gt;Coroutine&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;symmetric_coroutine&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;Boost.Coroutineがサポートするアーキテクチャのリストを、ドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9551&#34; target=&#34;_blank&#34;&gt;#9551&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数スレッドで&lt;code&gt;pull_coroutine&lt;/code&gt;を使用する際に発生する、&lt;code&gt;protected_stack_allocator&lt;/code&gt;での競合状態を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9355&#34; target=&#34;_blank&#34;&gt;#9355&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;POSIX実装のstack_allocator内で&lt;code&gt;mmap&lt;/code&gt;のエラーチェックをしていなかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9734&#34; target=&#34;_blank&#34;&gt;#9734&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap&lt;/code&gt;後に&lt;code&gt;memset&lt;/code&gt;で0を埋める必要はなかったので削除(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9735&#34; target=&#34;_blank&#34;&gt;#9735&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;coroutineのイテレータが&lt;code&gt;const&lt;/code&gt;修飾版の&lt;code&gt;operator==&lt;/code&gt;を持っていなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9760&#34; target=&#34;_blank&#34;&gt;#9760&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mmap()&lt;/code&gt;の戻り値を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10070&#34; target=&#34;_blank&#34;&gt;#10070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected_stack_allocator&lt;/code&gt;でファイル記述子は必要なかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10157&#34; target=&#34;_blank&#34;&gt;#10157&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#chrono&#34; name=&#34;chrono&#34;&gt;Chrono&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HP ux上で、&lt;code&gt;pthread_getcpuclockid()&lt;/code&gt;が定義されていないために、コンパイルエラーになる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/6918&#34; target=&#34;_blank&#34;&gt;#6918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで起動時に&lt;code&gt;steady_clock::now()&lt;/code&gt;を呼ぶと、アサーション失敗になる問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8006&#34; target=&#34;_blank&#34;&gt;#8006&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrono::process_cpu_clock&lt;/code&gt;のtime pointでの1000の係数が、Linux上で間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9337&#34; target=&#34;_blank&#34;&gt;#9337&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clock::time_point&lt;/code&gt;の出力フォーマットが{real;user;system}の3つになっているはずが、V2ではrealのみが出力されていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9342&#34; target=&#34;_blank&#34;&gt;#9342&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::chrono::floor()&lt;/code&gt;／&lt;code&gt;round()&lt;/code&gt;に負のdurationを渡した結果が間違っていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9419&#34; target=&#34;_blank&#34;&gt;#9419&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_clock&lt;/code&gt;がMac OS X向けに定義されていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9698&#34; target=&#34;_blank&#34;&gt;#9698&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::this_thread::sleep_for()&lt;/code&gt;が、Win32上でときどき、すぐに返ってしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9720&#34; target=&#34;_blank&#34;&gt;#9720&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windowsを使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9859&#34; target=&#34;_blank&#34;&gt;#9859&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Solaris上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーをが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9918&#34; target=&#34;_blank&#34;&gt;#9918&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::numeric_limits&lt;/code&gt;の静的メンバ関数が&lt;code&gt;constexpr&lt;/code&gt;実装になっていなかった場合にコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9811&#34; target=&#34;_blank&#34;&gt;#9811&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process_cpu_clocks&lt;/code&gt;が32ビット環境でオーバーフローする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10069&#34; target=&#34;_blank&#34;&gt;#10069&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;QNX上で&lt;code&gt;timegm()&lt;/code&gt;関数が定義されていないためにコンパイルエラーが起こっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10151&#34; target=&#34;_blank&#34;&gt;#10151&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#dynamic-bitset&#34; name=&#34;dynamic-bitset&#34;&gt;Dynamic Bitset&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ムーブコンストラクタのサポートを追加&lt;/li&gt;
&lt;li&gt;MSVC2013の警告を修正&lt;/li&gt;
&lt;li&gt;C++11の最小アロケータ要件をサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noexcept&lt;/code&gt;仕様に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#flyweight&#34; name=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数テンプレートを使用した、&lt;code&gt;flyweight&amp;lt;T&amp;gt;&lt;/code&gt;で&lt;code&gt;T::T()&lt;/code&gt;への完全転送をサポートした。(以前まではエミュレーションをしていた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;を受け取るコンストラクタと代入演算子をサポート。元となる型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数として使用する。&lt;/li&gt;
&lt;li&gt;DLLモジュール間の静的初期化で発生する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9553&#34; target=&#34;_blank&#34;&gt;#9553&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス関係の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FusionをGPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;buffer()&lt;/code&gt;を追加。これは、ジオメトリの膨張／収縮(inflating/deflating)を行う。(&lt;code&gt;buffer()&lt;/code&gt;アルゴリズム自体は以前からあったが、Boxを大きくするのみだった。)&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;remove_spikes()&lt;/code&gt;を追加。これは、Ring、Polygon、もしくはMulti Polygonからスパイクを削除するアルゴリズム。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;point_on_surface()&lt;/code&gt;を追加。このアルゴリズムは、Polygonのサーフェイス(インテリア)上のPointを生成する。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_simple()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従ってシンプルなら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;is_valid()&lt;/code&gt;を追加。このアルゴリズムは、ジオメトリがOGC標準に従って適格なら&lt;code&gt;true&lt;/code&gt;を返す。&lt;/li&gt;
&lt;li&gt;新たなアルゴリズム&lt;code&gt;crosses()&lt;/code&gt;を追加。このアルゴリズムは、OGC標準に従って空間的関係をチェックする。&lt;/li&gt;
&lt;li&gt;集合演算アルゴリズム(&lt;code&gt;difference()&lt;/code&gt;, &lt;code&gt;intersection()&lt;/code&gt;, &lt;code&gt;sym_difference()&lt;/code&gt;, &lt;code&gt;union_()&lt;/code&gt;)に対して、入力としてPointと見なせる型の組、および線形ジオメトリをサポートした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance()&lt;/code&gt;アルゴリズムと&lt;code&gt;comparable_distance()&lt;/code&gt;アルゴリズムを、全てのジオメトリの組み合わせに対応した。&lt;/li&gt;
&lt;li&gt;空間関係のアルゴリズム(&lt;code&gt;covered_by()&lt;/code&gt;, &lt;code&gt;touches()&lt;/code&gt;, &lt;code&gt;within()&lt;/code&gt;, etc...)に、線形ジオメトリと面積ジオメトリのサポートを追加。&lt;/li&gt;
&lt;li&gt;様々なアルゴリズムの入力ジオメトリとして、&lt;code&gt;boost::variant&lt;/code&gt;をサポート。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;に、インデックス付きセグメントのサポートを追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;の&lt;code&gt;nearest()&lt;/code&gt;に、述語のサポートを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解決したチケット&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重なっているポリゴンに対する多くのアルゴリズムの結果がおかしくなる問題を、&lt;code&gt;disjoint()&lt;/code&gt;の実装に&lt;code&gt;point_on_surface()&lt;/code&gt;を使用することで解決した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8310&#34; target=&#34;_blank&#34;&gt;#8310&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自己交差がないポリゴンから自己交差が作られてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9081&#34; target=&#34;_blank&#34;&gt;#9081&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;make_qbk.pyの実行がエラーになってドキュメント生成に失敗する問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9245&#34; target=&#34;_blank&#34;&gt;#9245&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(sym_)difference()&lt;/code&gt;が成功しない問題を、堅牢な型への再スケーリングによって修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9563&#34; target=&#34;_blank&#34;&gt;#9563&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ほぼ水平のSegmentに対してwinding戦略を付けた&lt;code&gt;within()&lt;/code&gt;の実行結果がおかしい問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9628&#34; target=&#34;_blank&#34;&gt;#9628&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;スパイクのみのポリゴンの、スパイクを削除するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9871&#34; target=&#34;_blank&#34;&gt;#9871&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;WKTのドキュメントがなかったので追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9947&#34; target=&#34;_blank&#34;&gt;#9947&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LinestringとBoxに対するdifferenceがintersectionを返す問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10019&#34; target=&#34;_blank&#34;&gt;#10019&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;boost/geometry/arithmetic.hppのコンセプトチェックがおかしかったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10077&#34; target=&#34;_blank&#34;&gt;#10077&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intersects(polygon)&lt;/code&gt;が自己交差のPointを返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;が、OGC標準の非シンプルなジオメトリに対して不正な結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;touches()&lt;/code&gt;が、CCW面積ジオメトリに対して正しく動作していなかったので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;のnearestクエリが、非デカルト(cartesian)座標系において間違った結果を返していたので修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtree&lt;/code&gt;にInterprocessのアロケータを使うと、いくつかのケースでクラッシュしていたので修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#hash&#34; name=&#34;hash&#34;&gt;Hash&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++ 6.0向けのワークアラウンドをいくつか削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_combine()&lt;/code&gt;の継続的な改善。これは、以前からドキュメント化されていたアルゴリズムの変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#interprocess&#34; name=&#34;interprocess&#34;&gt;Interprocess&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Linux上で&lt;code&gt;message_queue&lt;/code&gt;がデッドロックする問題を修正(#Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;いくつかのコンピュータではCommon AppDataのレジストリが空であるため、Interprocessが動かない問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9226&#34; target=&#34;_blank&#34;&gt;#9226&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WaitForSingleObject(mutex)&lt;/code&gt;を呼び出しているところで、&lt;code&gt;WAIT_ABANDONED&lt;/code&gt;をハンドリングするよう修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9284&#34; target=&#34;_blank&#34;&gt;#9284&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CreateMutex()&lt;/code&gt;を呼び出しているところで、失敗値を&lt;code&gt;winapi::invalid_handle_value(-1)&lt;/code&gt;と比較していたが、実際の失敗値は&lt;code&gt;NULL&lt;/code&gt;なので、比較する値を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9285&#34; target=&#34;_blank&#34;&gt;#9285&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timed_wait&lt;/code&gt;が寿命切れをチェックしていなかったので修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9288&#34; target=&#34;_blank&#34;&gt;#9288&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AndroidはXSI共有メモリオブジェクトをサポートしていないので、ワークアラウンドを修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9408&#34; target=&#34;_blank&#34;&gt;#9408&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;managed_external_buffer&lt;/code&gt;オブジェクトの構築でクラッシュする問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9729&#34; target=&#34;_blank&#34;&gt;#9729&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsでイベントログが破損しているとbooststampの生成に失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9767&#34; target=&#34;_blank&#34;&gt;#9767&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Android NDK GCC 4.8でコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9835&#34; target=&#34;_blank&#34;&gt;#9835&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Windowsで共有フォルダが使用可能でない場合に、&lt;code&gt;get_tmp_base_dir()&lt;/code&gt;が失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9911&#34; target=&#34;_blank&#34;&gt;#9911&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init_atomic_func()&lt;/code&gt;と&lt;code&gt;fini_atomic_func()&lt;/code&gt;での、変数の未初期化警告を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9946&#34; target=&#34;_blank&#34;&gt;#9946&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_manager::find(unique_instance_t*)&lt;/code&gt;がコンパイルに失敗する問題を修正(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10011&#34; target=&#34;_blank&#34;&gt;#10011&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cray C++ Compilerのサポートを追加(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/2&#34; target=&#34;_blank&#34;&gt;#2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW環境のために、&lt;code&gt;interprocess_exception&lt;/code&gt;例外を送出する部分を修正。エラー内容の取得とthrowを同一行に書くと、&lt;code&gt;GetLastError()&lt;/code&gt;がリセットされてしまうため、2行に分離した(GitHub &lt;a href=&#34;https://github.com/boostorg/interprocess/pull/3&#34; target=&#34;_blank&#34;&gt;#3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;message_queue&lt;/code&gt;に、&lt;code&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/code&gt;オプションを追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9221&#34; target=&#34;_blank&#34;&gt;#9221&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock()&lt;/code&gt;の&lt;code&gt;(timed_)lock&lt;/code&gt;コードをリファクタリングし、統一化した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;condition_variable&lt;/code&gt;のデストラクタの挙動として、POSIXのセマンティクスを許可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/code&gt;オプションを追加。これは、共有メモリオブジェクトの実装としてメモリマップドファイルが使われた場合に、使用する共有ディレクトリの場所を指定するためのもの。&lt;/li&gt;
&lt;li&gt;他のライブラリと同じように、&lt;code&gt;BOOST_USE_WINDOWS_H&lt;/code&gt;をサポートした。これが定義されている場合、&lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;や他のWindows SDKの構造体を使用し、そうでなければ、重いヘッダーの負担を軽減する構造体を定義して使用する。(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows_shared_memory&lt;/code&gt;に&lt;code&gt;get_size()&lt;/code&gt;メンバ関数を追加した(Trac &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10021&#34; target=&#34;_blank&#34;&gt;#10021&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#intrusive&#34; name=&#34;intrusive&#34;&gt;Intrusive&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doxygenによって生成されるリファレンスを改善し、先行宣言のヘッダーを修正、更新した。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI破壊&lt;/strong&gt;&lt;/span&gt; 1.55.0で導入したABIレギュレッションを修正した。主にMSVCコンパイラ周りで。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 以前から非推奨としていた機能を削除した。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;xxx_dont_splay()&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splay&lt;/code&gt;コンテナから&lt;code&gt;splay_set_base_hook&lt;/code&gt;と&lt;code&gt;splay_set_member_hook&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splaytree_algorithms&lt;/code&gt;の関数の追加パラメータ「&lt;code&gt;bool splay = true&lt;/code&gt;」を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;Visual Studio 2010/2012で&lt;code&gt;has_member_function_callable_with_construct_impl&lt;/code&gt;がコンパイルエラーになっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9332&#34; target=&#34;_blank&#34;&gt;#9332&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list_impl::iterator_to()&lt;/code&gt;メンバ関数内で使用する&lt;code&gt;value_traits&lt;/code&gt;を、ステートフルにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9650&#34; target=&#34;_blank&#34;&gt;#9650&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;最近のSun CC CompilerでIntrusiveのコンパイルができなくなっていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9746&#34; target=&#34;_blank&#34;&gt;#9736&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;safe_link(or auto_unlink)を付けたintrusive listが、解放後のメモリを操作していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9940&#34; target=&#34;_blank&#34;&gt;#9940&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9949&#34; target=&#34;_blank&#34;&gt;#9949&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_cast&lt;/code&gt;の使用をやめた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9948&#34; target=&#34;_blank&#34;&gt;#9948&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;デフォルトフックから派生しない場合の、侵入フックのテストを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9961&#34; target=&#34;_blank&#34;&gt;#9961&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ツリーの再バランスコードの冗長な代入を回避して、最適化した&lt;/li&gt;
&lt;li&gt;64ビット環境の&lt;code&gt;suggested_upper_bucket_count()&lt;/code&gt;と&lt;code&gt;suggested_lower_bucket_count()&lt;/code&gt;用に、64ビットの素数値を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8468&#34; target=&#34;_blank&#34;&gt;#8468&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;古いSun CC Compilerのworkaroundを削除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#lexical-cast&#34; name=&#34;lexical-cast&#34;&gt;Lexical Cast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;try_lexical_convert()&lt;/code&gt;関数を追加。この関数は変換失敗時に&lt;code&gt;false&lt;/code&gt;を返し、出力パラメータの型にDefault Constructibleを要求しない(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6700&#34; target=&#34;_blank&#34;&gt;#6700&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;先頭が0の文字列を&lt;code&gt;bool&lt;/code&gt;に変換する処理を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9659&#34; target=&#34;_blank&#34;&gt;#9659&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Boost 1.47.0まで&lt;code&gt;boost::lexical_cast&amp;lt;bool&amp;gt;(&#34;00&#34;)&lt;/code&gt;は成功し&lt;code&gt;false&lt;/code&gt;を返していたが、それ以降で&lt;code&gt;bad_lexical_cast&lt;/code&gt;例外を送出していた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;より小さなバイナリを生成し、コンパイラの作業をよりシンプルにする変更を行った(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9046&#34; target=&#34;_blank&#34;&gt;#9046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;このライブラリを、Boost Conversion Libraryから分離した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8991&#34; target=&#34;_blank&#34;&gt;#8991&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;全体的な変更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsターゲットにおいて、このライブラリはデフォルトでWindows XP向けにコンパイルするようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;record&lt;/code&gt;と&lt;code&gt;record_view&lt;/code&gt;の添字演算子に&lt;code&gt;attribute_name&lt;/code&gt;引数を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_formatting_ostream&lt;/code&gt;で、一時オブジェクトを出力できるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9389&#34; target=&#34;_blank&#34;&gt;#9389&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;フォーマット文字列に、名前付きスコープの関数名とソースファイル名を入れられるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9263&#34; target=&#34;_blank&#34;&gt;#9263&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;named scope formatterに、不完全および空のmarkerのサポートを追加した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9123&#34; target=&#34;_blank&#34;&gt;#9123&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不完全な名前付きスコープリストのデフォルトの出力フォーマットを変更した：末尾のスコープ区切り文字を省略するようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::regex&lt;/code&gt;のサポートを追加。&lt;/li&gt;
&lt;li&gt;Boost.Logのデフォルトで、Boost.Regexを内部的な正規表現に使用するようにした。この正規表現バックエンドは、マクロで変更できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;バグ修正：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AVX2を有効にしたCPU(たとえばIntelのHaswell)での&lt;code&gt;dump&lt;/code&gt;マニピュレータを修正&lt;/li&gt;
&lt;li&gt;ロガークラスの&lt;code&gt;get_attribute()&lt;/code&gt;メンバ関数のコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;同期／非同期sinkフロントエンドの&lt;code&gt;locked_backend()&lt;/code&gt;関数の実装で発生していたデータ競合を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block_on_overflow&lt;/code&gt;戦略を使用した非同期sinkの&lt;code&gt;enqueue()&lt;/code&gt;メンバ関数での、ロギングスレッドの無限ブロックを修正より詳細な変更は、ChangeLogを参照：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/release/libs/log/doc/html/log/changelog.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; メンテナンス用の機能を、libs/math/include_privateディレクトリ以下に移動した。影響を受けるヘッダは以下：&lt;ul&gt;
&lt;li&gt;boost/math/tools/test_data.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/remez.hpp&lt;/li&gt;
&lt;li&gt;boost/math/constants/generate.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/solve.hpp&lt;/li&gt;
&lt;li&gt;boost/math/tools/test.hpp&lt;/li&gt;
&lt;li&gt;もしこれらの機能を引き続き使いたい場合は、libs/math/include_privateディレクトリへのパスを通せばよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; 分布関数と特殊関数が、overflow errorを吐き出す変わりに、正の無限大の値を返すよう修正し、ドキュメントに挙動を明記した。これまでoverflow errorが発生したときのデフォルトの動作は&lt;code&gt;std::overflow_error&lt;/code&gt;例外の送出だったが、例外を送出するかしないかは、関数ごとに違っていた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10111&#34; target=&#34;_blank&#34;&gt;#10111&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;影響がある特殊関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_inva()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibeta_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ibetac_invb()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_p_inv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_q_inv()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影響がある分布関数は以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pareto_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beta_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_chi_squared_distribution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inverse_gamma_distribution&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;round()&lt;/code&gt;と&lt;code&gt;trunc()&lt;/code&gt;の引数として、整数を受け取れるようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10066&#34; target=&#34;_blank&#34;&gt;#10066&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;0階導関数(zero derivative)をハンドリングするよう、Halleyのイテレーションを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10046&#34; target=&#34;_blank&#34;&gt;#10046&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;geometric distribution (幾何分布)の内部処理で、渡されたポリシーを使っていない箇所があったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9833&#34; target=&#34;_blank&#34;&gt;#9833&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;negative binomial distribution (負の二項分布)のコーナーケースを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9834&#34; target=&#34;_blank&#34;&gt;#9834&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mac OSでのコンパイルエラーを修正&lt;/li&gt;
&lt;li&gt;スターリングの近似を使うために、&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;の精度を任意に変更できる&lt;code&gt;bernoulli_numbers&lt;/code&gt;を追加(Nikhar Agrawal氏作)&lt;/li&gt;
&lt;li&gt;ベッセル関数の最初の導関数を追加(Anton Bikineev氏作)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_j_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_i_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl_bessel_k_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_bessel_prime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sph_neumann_prime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Studentのt分布のサンプルコードにあったバグを修正。sample meanの透過性テストも一緒に修正。&lt;/li&gt;
&lt;li&gt;より良いルート探索コードに使えるmax_iterパラメータをドキュメントに記載した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9225&#34; target=&#34;_blank&#34;&gt;#9225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__float128&lt;/code&gt;型の定数を有効／無効にするオプションを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9240&#34; target=&#34;_blank&#34;&gt;#9240&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ベッセルのI0とI1における、負数のハンドリングを整理した(それと、もう使っていないコードを削除した)。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9512&#34; target=&#34;_blank&#34;&gt;#9512&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tgamma&lt;/code&gt;と&lt;code&gt;lgamma&lt;/code&gt;に非常に小さい値が渡された場合でもハンドリングできるよう修正した。これらはspuriousオーバーフローを生成しないようになった。(Rocco Romeoに感謝)&lt;/li&gt;
&lt;li&gt;「&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9672&#34; target=&#34;_blank&#34;&gt;#9672 Laplace distribution(ラプラス分布)のPDFとCDFがdomain error例外を送出する&lt;/a&gt;」ランダムな変量(variate)を無限にした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rising_factorial&lt;/code&gt;、&lt;code&gt;falling_factorial&lt;/code&gt;、&lt;code&gt;tgamma_delta_ratio&lt;/code&gt;にあったいくつかのコーナーケースを修正した。Rocco Romeoに感謝。&lt;/li&gt;
&lt;li&gt;使っていなかった定数&lt;code&gt;pow23_four_minus_pi&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#move&#34; name=&#34;move&#34;&gt;Move&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;マクロを追加&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;MSVC向けの設定マクロがundefされていなかった問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9482&#34; target=&#34;_blank&#34;&gt;#9482&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントに&lt;code&gt;BOOST_RV_REF_START&lt;/code&gt;というマクロが記載されていたが、&lt;code&gt;BOOST_RV_REF_BEG&lt;/code&gt;の間違いだったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9045&#34; target=&#34;_blank&#34;&gt;#9045&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;アラインメント指定された型に対して、Boost.Moveが自前実装している&lt;code&gt;is_convertible&lt;/code&gt;がコンパイルエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8420&#34; target=&#34;_blank&#34;&gt;#8420&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#mpl&#34; name=&#34;mpl&#34;&gt;MPL&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost::mpl::for_each&lt;/code&gt;を、GPUで使用可能にした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-array&#34; name=&#34;multi-array&#34;&gt;Multi Array&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator()&lt;/code&gt;がCollectionコンセプトをチェックしているが、実際にはRandomAccessCollectionを要求していた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/5664&#34; target=&#34;_blank&#34;&gt;#5664&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Visual C++ 2010デバッグモードでのコンパイルエラーを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4874&#34; target=&#34;_blank&#34;&gt;#4874&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fortran_storage_ordering&lt;/code&gt;のサンプルコードが間違っていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3581&#34; target=&#34;_blank&#34;&gt;#3581&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;コンセプトが&lt;code&gt;detail&lt;/code&gt;名前空間に置かれていたので、&lt;code&gt;detail&lt;/code&gt;の外に出した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4032&#34; target=&#34;_blank&#34;&gt;#4032&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++標準文書へのリンクが壊れていたので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9212&#34; target=&#34;_blank&#34;&gt;#9212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GCCの-Wundefオプションで発生する&lt;code&gt;BOOST_MULTI_ARRAY_NO_GENERATORS&lt;/code&gt;関係の警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8368&#34; target=&#34;_blank&#34;&gt;#8368&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-Index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;erase(iterator)のオーバーロードが、次を指すイテレータを返す必要があるためにパフォーマンスが遅かった(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4264&#34; target=&#34;_blank&#34;&gt;#4264&lt;/a&gt;を参照)。&lt;a href=&#34;http://lwg.github.io/issues/lwg-closed.html#579&#34; target=&#34;_blank&#34;&gt;LWG issue #579&lt;/a&gt;の解決策に基いて、ひとつ以上の要素メモリを使用することを犠牲にして、eraseのインタフェースを維持したままこの問題を解決した。実際には、非順序連想コンテナに対する計算量の要件は、hashed indicesで以下のように改善した：&lt;ul&gt;
&lt;li&gt;与えられた要素の削除を、無条件に定数時間にした&lt;/li&gt;
&lt;li&gt;最悪ケースの計算量はO(n)ではなく、O(n&lt;sub&gt;dist&lt;/sub&gt;)となる。n&lt;sub&gt;dist&lt;/sub&gt;は、そのインデックスにおける要素数とは同等でない数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hashed indiciesの&lt;code&gt;iterator&lt;/code&gt;と&lt;code&gt;local iterator&lt;/code&gt;の内部表現が、新しいデータ構造に依存して変更される。これはシリアライズに影響を与えるため、対応するシリアライズのバージョンが0から1に上がる。hashed indiciesの&lt;code&gt;(local) iterator&lt;/code&gt;を含む古いアーカイブは、1.56.0のBoost.Multi-Indexに読み込める。&lt;/li&gt;
&lt;li&gt;hashed indiciesに&lt;code&gt;reserve&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;hashed indiciesの等値／非等値のチェックを、C++標準規格の[unord.req]仕様に合わせた。&lt;/li&gt;
&lt;li&gt;Boost.Multi-Indexの&lt;code&gt;public&lt;/code&gt;インタフェースを、&lt;code&gt;noexcept&lt;/code&gt;に対応した。(&lt;code&gt;noexcept&lt;/code&gt;が使用可能なコンパイラで)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multi_index_container&lt;/code&gt;への挿入失敗のパフォーマンスを改善した。&lt;/li&gt;
&lt;li&gt;MSVC 7.0以前のサポートを目的とした内部コードを削除した。この修正によって、コンパイル時間がわずかに速くなる可能性がある。&lt;/li&gt;
&lt;li&gt;右辺値を挿入できなかったバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9665&#34; target=&#34;_blank&#34;&gt;#9665&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/code&gt;に対応し、名前空間修飾なしのプレースホルダーを直接使用しないように修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9798&#34; target=&#34;_blank&#34;&gt;#9798&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;メンテナンス上の細かい修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#multi-precision&#34; name=&#34;multiprecision&#34;&gt;Multiprecision&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浮動小数点数型から&lt;code&gt;rational&lt;/code&gt;への変換を&lt;code&gt;implicit&lt;/code&gt;にした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10082&#34; target=&#34;_blank&#34;&gt;#10082&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked_cpp_rational&lt;/code&gt; typedefの定義を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の、文字列からの代入でのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2進浮動小数点のバックエンドとして、&lt;code&gt;cpp_bin_float&lt;/code&gt;を追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpp_int&lt;/code&gt;の文字列からの代入で発生するバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9936&#34; target=&#34;_blank&#34;&gt;#9936&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;符号がクリアされない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVCのコンパイラintrinsicをインクルードするよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9336&#34; target=&#34;_blank&#34;&gt;#9336&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9432&#34; target=&#34;_blank&#34;&gt;#9432&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gmp_rational&lt;/code&gt;をムーブコピーできるよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9497&#34; target=&#34;_blank&#34;&gt;#9497&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numeric_limits&lt;/code&gt;の値のリストをドキュメントに追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#odeint&#34; name=&#34;odeint&#34;&gt;Odeint&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;適切な代数と操作を自動検出するディスパッチャーを追加&lt;/li&gt;
&lt;li&gt;Eigen、Boost.Multiarray、Boost.MPI、Boost.Compute、Blaze、NT2のサポートを追加&lt;/li&gt;
&lt;li&gt;代数インタフェースを、algebra.norm_inf関数を使用するよう変更した&lt;/li&gt;
&lt;li&gt;ODEの解をイテレートするためのイテレータを追加。これは、積分(integrate)関数の代わりに使用できる。&lt;/li&gt;
&lt;li&gt;Velocity-Verletメソッドを追加&lt;/li&gt;
&lt;li&gt;小さなバグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右辺値参照のサポートを追加。&lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt;が、ムーブ可能でコピー不可な&lt;code&gt;T&lt;/code&gt;型を扱えるようになった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;を改善した。(ムーブ操作を使うようにした)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace()&lt;/code&gt;メンバ関数を追加。これは &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/1841&#34; target=&#34;_blank&#34;&gt;#1841&lt;/a&gt; でリクエストされたもの。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;をムーブ可能にした。&lt;code&gt;std::move_if_noexcept&lt;/code&gt;と組み合わせられる、条件付きの&lt;code&gt;noexcept&lt;/code&gt;仕様にした。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; プラットフォームがサポートしていれば、safe boolイディオムの代わりに&lt;code&gt;explicit operator bool()&lt;/code&gt;を使用するようにした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/4227&#34; target=&#34;_blank&#34;&gt;#4227&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt;オブジェクトを誤って不適切にシリアライズしないように、&lt;code&gt;operator&amp;lt;&amp;lt;(ostream&amp;amp;, optional const&amp;amp;)&lt;/code&gt;の先行宣言を定義した。&lt;/li&gt;
&lt;li&gt;非推奨なメンバ関数である&lt;code&gt;reset()&lt;/code&gt;の使用を、サンプルコードから削除した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9005&#34; target=&#34;_blank&#34;&gt;#9005&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::none&lt;/code&gt;との比較では、&lt;code&gt;T&lt;/code&gt;にEqualityComparableを要求しないようにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&amp;lt;T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;を明確に禁止した。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;optional&amp;lt;T&amp;amp;&amp;gt;&lt;/code&gt;への一時オブジェクトの束縛を、明確に禁止した。&lt;/li&gt;
&lt;li&gt;包含している値にアクセスする新たな手段として、&lt;code&gt;value()&lt;/code&gt;、&lt;code&gt;value_or()&lt;/code&gt;、&lt;code&gt;value_or_eval()&lt;/code&gt;メンバ関数を追加。&lt;/li&gt;
&lt;li&gt;ドキュメントを更新し、再編した。チュートリアルとクイックガイドの項を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#preprocessor&#34; name=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可変引数マクロを使用する場合のタプル機能を、配列機能と一致するものとして追加した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#program-options&#34; name=&#34;program-options&#34;&gt;Program Options&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全てのグループ間でのヘルプメッセージの縦位置を合わせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/6114&#34; target=&#34;_blank&#34;&gt;#6114&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ハイフン区切りされたオプション名が、エラーメッセージ内で切り捨てられる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8009&#34; target=&#34;_blank&#34;&gt;#8009&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basic_regex&amp;lt;&amp;gt;::mark_count()&lt;/code&gt;の挙動を、ドキュメントに一致するよう修正した。&lt;code&gt;basic_regex&amp;lt;&amp;gt;::subexpression(n)&lt;/code&gt;も同様に、一致するよう修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8903&#34; target=&#34;_blank&#34;&gt;#8903&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;ドキュメントの誤字を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9283&#34; target=&#34;_blank&#34;&gt;#9283&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ロケールによって生成された照合文字列へのnul埋め込みが失敗した場合の、照合コードのバグを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9451&#34; target=&#34;_blank&#34;&gt;#9451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Threadライブラリの非推奨なミューテックスを使っていたのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9461&#34; target=&#34;_blank&#34;&gt;#9461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不正なUTF-8シーケンスの、より良いチェッカーを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9473&#34; target=&#34;_blank&#34;&gt;#9473&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#smart-pointers&#34; name=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;のオーバーロードを更新し、C++言語規格に&lt;a href=&#34;http://http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&#34; target=&#34;_blank&#34;&gt;N3939&lt;/a&gt;で提案されている配列型(&lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;T[N]&lt;/code&gt;)に対応した。&lt;/li&gt;
&lt;li&gt;C++標準の欠陥レポート&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&#34; target=&#34;_blank&#34;&gt;LWG #2070&lt;/a&gt;に対応し、&lt;code&gt;make_shared&lt;/code&gt;と&lt;code&gt;allocate_shared&lt;/code&gt;におけるスカラ型と配列型の実装を修正した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;実験的な新機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7446&#34; target=&#34;_blank&#34;&gt;#7446&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_all()&lt;/code&gt;関数を追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/7447&#34; target=&#34;_blank&#34;&gt;#7447&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async()&lt;/code&gt;関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7448&#34; target=&#34;_blank&#34;&gt;#7448&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;並行キューとして、&lt;code&gt;sync_queue&lt;/code&gt;と&lt;code&gt;sync_bounded_queue&lt;/code&gt;を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8274&#34; target=&#34;_blank&#34;&gt;#8274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread_pool&lt;/code&gt; executorを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8513&#34; target=&#34;_blank&#34;&gt;#8513&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latch&lt;/code&gt;クラスを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8518&#34; target=&#34;_blank&#34;&gt;#8518&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;／&lt;code&gt;shared_future&lt;/code&gt;の&lt;code&gt;then()&lt;/code&gt;メンバ関数に、スケジューラをとるパラメータを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/8516&#34; target=&#34;_blank&#34;&gt;#8516&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_lock_guard()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9058&#34; target=&#34;_blank&#34;&gt;#9058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;動的なexecutorと、executorアダプタを追加(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9571&#34; target=&#34;_blank&#34;&gt;#9571&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsの64ビット環境上で、&lt;code&gt;GetTickCount()&lt;/code&gt;関数の代わりに、&lt;code&gt;GetTickCount64()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8070&#34; target=&#34;_blank&#34;&gt;#8070&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scoped_thread&lt;/code&gt;がmsvc-12.0でコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9333&#34; target=&#34;_blank&#34;&gt;#9333&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;intel-linux-14.0.1上で&lt;code&gt;scoped_thread&lt;/code&gt;がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9341&#34; target=&#34;_blank&#34;&gt;#9341&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、&lt;code&gt;async(Executor, ...)&lt;/code&gt;のコンパイルに失敗する問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9366&#34; target=&#34;_blank&#34;&gt;#9366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;msvc-10,11,12上で、executorのテストを通した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9402&#34; target=&#34;_blank&#34;&gt;#9402&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_future&lt;/code&gt;のテストを通した(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/9404&#34; target=&#34;_blank&#34;&gt;#9404&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Synchronizationドキュメントの細かい修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9471&#34; target=&#34;_blank&#34;&gt;#9471&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future_waiter::add()&lt;/code&gt;がクラッシュする問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9535&#34; target=&#34;_blank&#34;&gt;#9535&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_lock_for()&lt;/code&gt;に0ミリ秒を指定した場合、Windows上でプログラムが終了しない問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9618&#34; target=&#34;_blank&#34;&gt;#9618&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスのデストラクタの説明が不明瞭だったので修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9625&#34; target=&#34;_blank&#34;&gt;#9625&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thread&lt;/code&gt;クラスに、アンドキュメントな&lt;code&gt;public&lt;/code&gt;メンバ関数&lt;code&gt;start_thread()&lt;/code&gt;があったので、&lt;code&gt;private&lt;/code&gt;に移動(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9632&#34; target=&#34;_blank&#34;&gt;#9632&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;MinGW上で、&lt;code&gt;boost::thread::physical_concurrency()&lt;/code&gt;関数がコンパイルエラーになる問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9673&#34; target=&#34;_blank&#34;&gt;#9673&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::condition_variable::timed_wait()&lt;/code&gt;にBoost.DateTimeの無限時間を指定すると、意図と違ってすぐに目覚めてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9708&#34; target=&#34;_blank&#34;&gt;#9708&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future::then()&lt;/code&gt;に指定した関数が、2回呼ばれてしまう問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9711&#34; target=&#34;_blank&#34;&gt;#9711&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gcc-mingwは多くの問題があったため、Boost.Buildから削除された。代わりに&lt;code&gt;&amp;lt;toolset&amp;gt;gcc,&amp;lt;target-os&amp;gt;windows&lt;/code&gt;を使うよう修正した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9867&#34; target=&#34;_blank&#34;&gt;#9867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;future&lt;/code&gt;のドキュメントの誤字を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10008&#34; target=&#34;_blank&#34;&gt;#10008&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;内でヌルポインタにアクセスする可能性があったのを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10058&#34; target=&#34;_blank&#34;&gt;#10058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の右辺値参照エミュレーションでの可変引数バージョンがコンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10125&#34; target=&#34;_blank&#34;&gt;#10125&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call_once()&lt;/code&gt;の&lt;code&gt;(Function, once_flag&amp;amp;)&lt;/code&gt;のオーバーロードを非推奨化(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10126&#34; target=&#34;_blank&#34;&gt;#10126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;AIXのgcc上の&lt;code&gt;pthread_delay_np()&lt;/code&gt;関数はパラメータが異なっているため、コンパイルエラーになっていた問題を修正(&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/10147&#34; target=&#34;_blank&#34;&gt;#10147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;PowerPC上での&lt;code&gt;thread::physical_concurrency()&lt;/code&gt;が常に0を返していたので、修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10155&#34; target=&#34;_blank&#34;&gt;#10155&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when_any()&lt;/code&gt;と&lt;code&gt;when_all()&lt;/code&gt;に&lt;code&gt;inline&lt;/code&gt;を付け忘れていて、シンボルの重複定義でリンクエラーになっていた問題を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/10184&#34; target=&#34;_blank&#34;&gt;#10184&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#tti&#34; name=&#34;tti&#34;&gt;TTI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sun Solaris Studio C++ compilerのサポートを強化した(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9441&#34; target=&#34;_blank&#34;&gt;#9441&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;テンプレート引数としてクラスではない型が渡される、全ての状況をサポートした(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9444&#34; target=&#34;_blank&#34;&gt;#9444&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#unordered&#34; name=&#34;unordered&#34;&gt;Unordered&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小さなドキュメントと警告の修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9377&#34; target=&#34;_blank&#34;&gt;#9377&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9719&#34; target=&#34;_blank&#34;&gt;#9719&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;整数のバケットに、常に素数を使用するようにした。連続した整数を挿入するときのパフォーマンスを改善(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9282&#34; target=&#34;_blank&#34;&gt;#9282&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;C++11標準仕様に基づき、アロケータのみを使用してメモリ確保するようにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつかのコンポーネントを、Boost.Coreモジュールに移動した。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty_deleter&lt;/code&gt;を非推奨とした。代わりにBoost.Coreの&lt;code&gt;null_deleter&lt;/code&gt;を使用すること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base_from_member&lt;/code&gt;ユーティリティで、左辺値参照のメンバ型をサポートした。(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/7577&#34; target=&#34;_blank&#34;&gt;#7577&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#uuid&#34; name=&#34;uuid&#34;&gt;UUID&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的なC++11機能のサポートを追加。&lt;/li&gt;
&lt;li&gt;SSE最適化バージョンの関数を実装した。これには、&lt;code&gt;swap&lt;/code&gt;や比較演算子も含まれる。SSE版は、コンパイラによって自動的に有効になるが、明示的に有効／無効を設定できる(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8509&#34; target=&#34;_blank&#34;&gt;#8509&lt;/a&gt;)。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_UUID_NO_SIMD&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE2&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE3&lt;/code&gt;、&lt;code&gt;BOOST_UUID_USE_SSE41&lt;/code&gt;のいずれかをdefineする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いくつかの警告を黙らせた(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8495&#34; target=&#34;_blank&#34;&gt;#8495&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/8697&#34; target=&#34;_blank&#34;&gt;#8697&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_PLAT_*&lt;/code&gt;のプラットフォーム定義に、MinGWとWindowsのバリエーションを追加。&lt;/li&gt;
&lt;li&gt;Windows 8のモバイルデバイスをターゲットとするWindowsで、ARMアーキテクチャを検出できるようにした。&lt;/li&gt;
&lt;li&gt;64ビットARMの検出を改善。&lt;/li&gt;
&lt;li&gt;オペレーティング・システムとして、iOSの検出を追加。&lt;/li&gt;
&lt;li&gt;いくつかのプラットフォームでのエンディアン検出を改善。&lt;/li&gt;
&lt;li&gt;プラットフォームとコンパイラを検出するための、エミュレーション機能を追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/document/version/1_56_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; サポートしているコンパイラでは、可変引数テンプレートを使用するようにした。これによってバイナリが小さくなり、コンパイル速度も改善することを期待できるが、いくつかのケースで既存のメタプログラミングコードを破壊する可能性がある。とくに、&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_PARAMS.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/doc/html/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/code&gt;&lt;/a&gt;が使われなくなったことについて注意が必要だ。可変引数テンプレートを使用する場合、&lt;code&gt;BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES&lt;/code&gt;が無効になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polymorphic_get()&lt;/code&gt;関数を追加(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/9479&#34; target=&#34;_blank&#34;&gt;#9479&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブのみ可能な型をビジターから返せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;variant::swap()&lt;/code&gt;を最適化し、&lt;code&gt;move_swap()&lt;/code&gt;との曖昧さを修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/2839&#34; target=&#34;_blank&#34;&gt;#2839&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ムーブ代入演算子、デフォルトコンストラクタ、ムーブコンストラクタに条件付きの&lt;code&gt;noexcept&lt;/code&gt;を追加し、&lt;code&gt;variant&lt;/code&gt;を&lt;code&gt;move_if_noexcept()&lt;/code&gt;フレンドリーにした。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-fvisibility=hidden&lt;/code&gt;フラグが設定されていても、例外をモジュール間で見えるようにした。&lt;/li&gt;
&lt;li&gt;古いコンパイラのサポートを終了した。&lt;/li&gt;
&lt;li&gt;警告を修正(&lt;a href=&#34;https://svn.boost.org/trac/boost/ticket/3020&#34; target=&#34;_blank&#34;&gt;#3020&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;＜ライブラリ名＞&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;新機能&lt;/strong&gt; (必要であれば分類分けをする)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/0&#34; target=&#34;_blank&#34;&gt;#0&lt;/a&gt;) (←svn.boost.orgのissuesへのリンク)
- ＜追加、変更、削除内容＞ (&lt;a href=&#34;https://svn.boost.org/trac/boost/changeset/0&#34; target=&#34;_blank&#34;&gt;r0&lt;/a&gt;) (←svn.boost.orgのcommitへのリンク)&lt;b&gt;バグ修正&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt;： 赤文字+ボールドではっきりと分かるように&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;ABI変更&lt;/strong&gt;&lt;/span&gt;： これも赤文字で&lt;/li&gt;
&lt;li&gt;[訳注] 本家ノートの記述が不十分であると考えるときは、適宜注釈を入れる&lt;/li&gt;
&lt;li&gt;参照： &lt;a href=&#34;http://blog.example.com/path/to/references&#34; target=&#34;_blank&#34;&gt;必要であれば外部の文献へのリンクを挿入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11: 5.1&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.4, 3.3, 3.2, 3.1, 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++98: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++11, libc++: 3.4.2&lt;/li&gt;
&lt;li&gt;Clang, C++1y: 3.3.16&lt;/li&gt;
&lt;li&gt;Clang, C++14, libc++: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++98: 4.9.0&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.9.0, 4.8.2&lt;/li&gt;
&lt;li&gt;GCC, C++1y: 4.9.0&lt;/li&gt;
&lt;li&gt;Intel: 13.1, 13.0, 12.1, 11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang: 5.1&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Clang: trunk&lt;/li&gt;
&lt;li&gt;Clang, C++11: trunk&lt;/li&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;li&gt;Intel: 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7&lt;/li&gt;
&lt;li&gt;Visual C++: 12.0, 11.0, 10.0, 9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC: 4.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, ARM: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, x86: 4.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;Akira Takahashi&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>グラフ -- 文字色設定の方法として、非推奨の&lt;font&gt;タグをやめて、&lt;span&gt;タグのstyleを使用するようにした。</title>
      <link href="http://boostjp.github.io/tips/graph.html"/>
      <id>539fb70238a313455ca9013fced1d35db6d24c66:tips/graph.md</id>
      <updated>2014-12-24 17:18:40 +0900</updated>
      
        <content type="html">&lt;h1&gt;グラフ&lt;/h1&gt;
&lt;p&gt;グラフ構造とそれに対する操作を行うには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/index.html&#34; target=&#34;_blank&#34;&gt;Boost Graph Library&lt;/a&gt;を使用する。&lt;/p&gt;
&lt;h2&gt;インデックス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#define-graph&#34;&gt;グラフ型を定義する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#add-vertex-edge&#34;&gt;頂点と辺を追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#bundle-property&#34;&gt;任意のクラスをプロパティにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#dijkstra-shortest-paths&#34;&gt;ダイクストラ法で最短経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#distance-map&#34;&gt;最短経路の長さ(重みの合計)を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#is-reachable&#34;&gt;ある頂点に到達可能かどうかを調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#simple-shortest-path&#34;&gt;通過する辺が最も少ない経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#isomorphism&#34;&gt;2つのグラフが同型か判定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#minimum-spanning-tree&#34;&gt;最小全域木を作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#topological-sort&#34;&gt;トポロジカルソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#euler-path&#34;&gt;一筆書きの経路を求める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#write-graphviz&#34;&gt;グラフをGraphviz形式(.dot)で出力する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#read-graphviz&#34;&gt;Graphviz形式(.dot)のデータを読み込む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#define-graph&#34; name=&#34;define-graph&#34;&gt;グラフ型を定義する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Graphで標準的に使用する、グラフ構造のためのクラス&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/using_adjacency_list.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::adjacency_list&lt;/code&gt;&lt;/a&gt;は、様々な目的に利用できるようカスタマイズが可能になっている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;OutEdgeListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vecS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vecS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DirectedS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; directedS,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;VertexProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EdgeProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;GraphProperties&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; no_property,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EdgeListS&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; listS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;adjacency_list&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;設定例：&lt;/p&gt;
&lt;p&gt;以下は、無向グラフを定義する例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
Graph;
&lt;/pre&gt;&lt;/div&gt;

有向グラフで、辺に重みを付ける例：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property,
        boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
Graph;
&lt;/pre&gt;&lt;/div&gt;

テンプレートパラメータの説明：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OutEdgeList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの隣接構造(入辺と出辺)を表すためのコンテナを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt; (&lt;code&gt;std::vector&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VertexList&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの頂点集合を表すためのコンテナを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt; (&lt;code&gt;std::vector&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DirectedS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有向グラフか無向グラフかを選択する。&lt;br /&gt; &lt;code&gt;directedS&lt;/code&gt; : 有向グラフ&lt;br /&gt; &lt;code&gt;undirectedS&lt;/code&gt; : 無向グラフ&lt;br /&gt; &lt;code&gt;bidirectionalS&lt;/code&gt; : 双方向グラフ(有向で、辺が2本)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;directedS&lt;/code&gt; (有向グラフ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VertexProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;頂点のカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EdgeProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;辺のカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GraphProperties&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフオブジェクトのカスタムプロパティを指定する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;no_property&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EdgeListS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフの辺リストを表すためのコンテナを指定する。 このコンテナは、&lt;code&gt;bidirectionalS&lt;/code&gt;もしくは&lt;code&gt;undirectedS&lt;/code&gt;の場合に実際に辺を格納するために使用され、&lt;code&gt;OutEdgeList&lt;/code&gt;はコンテナの要素を指すオブジェクトを格納する。&lt;code&gt;directedS&lt;/code&gt;の場合は&lt;code&gt;OutEdgeList&lt;/code&gt;に直接格納されるため、このパラメータは使用しない。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;listS&lt;/code&gt; (&lt;code&gt;std::list&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;コンテナの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutEdgeList&lt;/code&gt;, &lt;code&gt;VertexList&lt;/code&gt;, &lt;code&gt;EdgeListS&lt;/code&gt;パラメータでのコンテナの指定には、以下を指定できる：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指定可能なパラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vecS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;listS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;slistS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::slist&lt;/code&gt; (非標準)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multisetS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::multiset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash_setS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash_multisetS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::unordered_multiset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;プロパティの選択&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VertexProperties&lt;/code&gt;, &lt;code&gt;EdgeProperties&lt;/code&gt;, &lt;code&gt;GraphProperties&lt;/code&gt;に指定可能な、標準提供されているプロパティは以下：&lt;/p&gt;
&lt;p&gt;頂点プロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_index2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_distance_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_root_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ダイクストラや幅優先木での根を示す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;頂点に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_color_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_rank_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_predecessor_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行ノード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_isomorphism_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同型情報&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量(&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E4%B8%8D%E5%A4%89%E9%87%8F&#34; target=&#34;_blank&#34;&gt;Wikipedia:不変量&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_invariant2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不変量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次数(節点についてる辺の数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_out_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出次数(節点から出てる辺の数。無向の場合は次数と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_in_degree_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入次数(節点に入る辺の数。無効の場合は次数と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_discover_time_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;深さ優先探索などでの発見された順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vertex_finish_time_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;深さ優先探索などでの探索が終わった順番&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;辺プロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_index_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_weight_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重み&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_weight2_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重み&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_capacity_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キャパシティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_residual_capacity_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;残りキャパシティ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_reverse_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最大流アルゴリズムで使用する、向きが逆になった辺か否かを示す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;edge_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;辺に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;グラフプロパティ&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graph_name_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;graph_all_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフ自体に関連づけられた全てのプロパティ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#add-vertex-edge&#34; name=&#34;add-vertex-edge&#34;&gt;頂点と辺を追加する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;頂点と辺を追加する方法としては、コンストラクタを使用するものと、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/MutableGraph.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数と&lt;code&gt;boost::add_edge()&lt;/code&gt;関数&lt;/a&gt;を使用して動的に追加するものの2つがある。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. コンストラクタを使用する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boost.Graphのグラフ構造クラスは、コンストラクタで辺の範囲と頂点数をとる。&lt;/p&gt;
&lt;p&gt;これを使用することで、シンプルにグラフを構築できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B}, {A, C}, {A, D},
        {B, E}, {C, E}, {D, E}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D 
B --&amp;gt; E 
C --&amp;gt; E 
D --&amp;gt; E 
E --&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 動的に追加する&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コンストラクタは初期化時のみ使用可能なため、動的に頂点や辺を追加する必要がある場合には、頂点と追加する&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数、辺を追加する&lt;code&gt;boost::add_edge()&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;頂点を追加する&lt;code&gt;boost::add_vertex()&lt;/code&gt;関数は、&lt;code&gt;for&lt;/code&gt;文や&lt;code&gt;while&lt;/code&gt;文でループして、必要な頂点数分だけ呼び出して使用する。戻り値として、頂点記述子が返される。&lt;/p&gt;
&lt;p&gt;辺を追加する&lt;code&gt;boost::add_edge()&lt;/code&gt;関数は、追加する辺の2つの頂点を指定して使用する。順番は、&lt;code&gt;source&lt;/code&gt;、&lt;code&gt;target&lt;/code&gt;の順である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Graph g;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点を追加&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, Graph&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; desc;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        desc[i] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(g);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺を追加&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[B], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[C], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[A], desc[D], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[B], desc[E], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[C], desc[E], g);
    &lt;span style=&#34;color:#ff0000&#34;&gt;add_edge&lt;/span&gt;(desc[D], desc[E], g);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D 
B --&amp;gt; E 
C --&amp;gt; E 
D --&amp;gt; E 
E --&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
※&lt;code&gt;add_vertex()&lt;/code&gt;関数と&lt;code&gt;add_edge()&lt;/code&gt;は、&lt;code&gt;boost::adjacency_list&lt;/code&gt;以外のグラフ構造にも適用できるようにするため、名前空間の修飾なしで呼び出す。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/eagle_raptor/20111221/1324478088&#34; target=&#34;_blank&#34;&gt;Boost.Graphで動的な頂点の追加削除 - ばるの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#bundle-property&#34; name=&#34;bundle-property&#34;&gt;任意のクラスをプロパティにする&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Graphのグラフ構造には、Property Mapによって頂点・辺・グラフに任意のプロパティを持たせられる。しかしながらこの方法は、プロパティが増えてくると管理しきれなくなってくるので、ひとまとめにしたくなるだろう。&lt;/p&gt;
&lt;p&gt;そこで、Boost.Graphには&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/bundles.html&#34; target=&#34;_blank&#34;&gt;Bundleプロパティ&lt;/a&gt;という機能が用意されている。これは、グラフ構造のプロパティ指定の場所にユーザー定義クラスを指定するという機能である。&lt;/p&gt;
&lt;p&gt;後述のサンプルでは、以下のプロパティを設定している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;頂点のBundleプロパティとして「名前」「人口」「郵便番号一覧」を持つ&lt;code&gt;City&lt;/code&gt;(街)クラス&lt;/li&gt;
&lt;li&gt;辺のBundleプロパティとして「名前」と「距離」を持つ&lt;code&gt;Highway&lt;/code&gt;(高速道路)クラス&lt;/li&gt;
&lt;li&gt;グラフのBundleプロパティとして「名前」を持つ&lt;code&gt;Country&lt;/code&gt;(国)クラス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そして、最短経路の計算の際に、&lt;code&gt;Highway&lt;/code&gt;クラスの&lt;code&gt;distance&lt;/code&gt;メンバ変数を辺の重みとして使用している。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;City&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; population;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; zipcodes;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; distance; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// km&lt;/span&gt;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;Country&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name;
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bidirectionalS,
    &lt;span style=&#34;color:#ff0000&#34;&gt;City&lt;/span&gt;,    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点のBundleプロパティ&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;, &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺のBundleプロパティ&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;Country&lt;/span&gt;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフのBundleプロパティ&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Map;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Map map;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフのBundleプロパティを設定&lt;/span&gt;
    map[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_bundle].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Japan&#34;&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 街(頂点)を2つ追加&lt;/span&gt;
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor v1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(map);
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vertex_descriptor v2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_vertex(map);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 頂点のBundleプロパティを設定&lt;/span&gt;
    map[v1].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tokyo&#34;&lt;/span&gt;;
    map[v1].population &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;13221169&lt;/span&gt;;
    map[v1].zipcodes.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1500013&lt;/span&gt;);

    map[v2].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Nagoya&#34;&lt;/span&gt;;
    map[v2].population &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2267048&lt;/span&gt;;
    map[v2].zipcodes.push_back(&lt;span style=&#34;color: #666666&#34;&gt;4600006&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺を追加&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; inserted &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
    Map&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;edge_descriptor e;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tie(e, inserted) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; add_edge(v1, v2, map);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺のBundleプロパティを設定&lt;/span&gt;
    map[e].name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tomei Expessway&#34;&lt;/span&gt;;
    map[e].distance &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;325.5&lt;/span&gt;;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;クラスのdistanceメンバを辺の重みとして計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; distance(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(map));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(map, v1,
            boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;weight_map(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;get(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;Highway&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;distance, map)).
            distance_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Tokyo-Nagoya : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; distance[v2] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;km&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Tokyo-Nagoya : 325.5km
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#dijkstra-shortest-paths&#34; name=&#34;dijkstra-shortest-paths&#34;&gt;ダイクストラ法で最短経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ダイクストラ法で最短経路を求めるには、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/dijkstra_shortest_paths.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::dijkstra_shortest_paths()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;ここでは、以下の経路図で、頂点Sから頂点Zへの最短経路を求める。&lt;/p&gt;
&lt;p&gt;経路図：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/dijkstra_shortest_paths.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (S, A)
        (A, B)
        (B, C)
        (B, D)
        (C, E)
        (C, F)
        (D, F)
        (E, D)
        (F, E)
        (E, Z)
        (F, Z)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;dijkstra_shortest_paths&lt;/span&gt;(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;S
A
B
D
F
Z
&lt;/code&gt;&lt;/pre&gt;
この場合、SからZへの最短経路は、S, A, B, D, F, Zの順となる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;関数の第1引数はグラフ構造を表す変数への&lt;code&gt;const&lt;/code&gt;参照、第2引数は開始地点の頂点、第3引数は先行ノードを格納する変数へのポインタである。&lt;/p&gt;
&lt;p&gt;目的地から開始地点まで先行ノードを辿っていくことにより、最短経路を求めることができる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#distance-map&#34; name=&#34;distance-map&#34;&gt;最短経路の長さ(重みの合計)を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最短経路の長さを求めるには&lt;code&gt;DistanceMap&lt;/code&gt;を使用する。&lt;code&gt;DistanceMap&lt;/code&gt;は、最短経路探索の結果として取得できる、開始地点から最短経路のある頂点までの距離を保存したものである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DistanceMap&lt;/code&gt;は、最短経路探索アルゴリズムに&lt;code&gt;boost::distance_map()&lt;/code&gt;関数を使用して取得できる(他の名前付き引数に続けて記述する場合は、「&lt;code&gt;named_param.distance_map(...);&lt;/code&gt;」のようにする)。&lt;/p&gt;
&lt;p&gt;ここでは、先行ノードも一緒に求めているが、経路長のみが必要であれば、&lt;code&gt;DistanceMap&lt;/code&gt;のみを計算してもよい。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (S, A)
        (A, B)
        (B, C)
        (B, D)
        (C, E)
        (C, F)
        (D, F)
        (E, D)
        (F, E)
        (E, Z)
        (F, Z)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
        (&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;)
    ;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; distance(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]).distance_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路の長さを計算&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;distance[to]&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;route length:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;route length:11
S
A
B
D
F
Z
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#is-reachable&#34; name=&#34;is-reachable&#34;&gt;ある頂点に到達可能かどうかを調べる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ある頂点に到達可能かどうかを調べるには、&lt;code&gt;&amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/code&gt;で定義される&lt;code&gt;boost::is_reachable()&lt;/code&gt;関数を使用する。この関数は、グラフ構造&lt;code&gt;g&lt;/code&gt;において、頂点&lt;code&gt;x&lt;/code&gt;が頂点&lt;code&gt;y&lt;/code&gt;に到達可能かどうかを調べ、到達可能であれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boost::is_reachable()&lt;/code&gt;の定義：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// xからyに到達可能?&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; IncidenceGraph, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; VertexColorMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; is_reachable(
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor x,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor y,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; IncidenceGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g,
           VertexColorMap color &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各頂点が白で開始しなければならない&lt;/span&gt;
        );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/assign/list_of.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/detail/lightweight_test.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex_count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; N;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;assign&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
        (A, B)(B, E)
        (A, C)(C, E)
    ; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Dはどこにも繋がっていない&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), vertex_count);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 全部白のカラーマップを作って渡す&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_color_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; color(vertex_count, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;white_color);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AからEに到達可能か調べる&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_reachable&lt;/span&gt;(A, E, g, color.data())) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;AからEに到達可能&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        assert(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AからDに到達可能か調べる&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;is_reachable&lt;/span&gt;(A, D, g, color.data())) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;AからDに到達不可能&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
        assert(&lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;AからEに到達可能
AからDに到達不可能
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#simple-shortest-path&#34; name=&#34;simple-shortest-path&#34;&gt;通過する辺が最も少ない経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;辺に重みのないグラフから最短経路を求めると、「最短単純路」という通過する辺が最も少ない経路が得られる。これは、たとえばソーシャルグラフから「Twitterで何回のRTで特定の情報に辿りつけたか」というような情報を抽出する用途に使える。&lt;/p&gt;
&lt;p&gt;&amp;lt;strike&amp;gt;Boost.Graphの&lt;code&gt;boost::dijkstra_shortest_paths()&lt;/code&gt;は重みのないグラフを与えるとコンパイルエラーになるので、辺の重みを全て1に設定することで代用できる。&amp;lt;/strike&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;※2014/02/16 修正：そのような場面では &lt;a href=&#34;http://www.boost.org/doc/libs/1_55_0/libs/graph/doc/breadth_first_search.html&#34; target=&#34;_blank&#34;&gt;Breadth-First Search&lt;/a&gt; を使うべきである。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/simple_shortest_path.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;                             Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor   Vertex;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { S, A, B, C, D, E, F, G, Z, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Names &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;SABCDEFGZ&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// グラフを作る&lt;/span&gt;
Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {S, A},
        {A, B},
        {B, C},
        {B, D},
        {C, E},
        {D, G},
        {E, D},
        {G, E},
        {E, F},
        {F, Z},
        {G, Z},
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 辺の重みは1&lt;/span&gt;
    &lt;span style=&#34;color:#ff0000&#34;&gt;const std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights(edges.size(), &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex from &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; S; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開始地点&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex to &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Z; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 目的地&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を計算&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;num_vertices(g));
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths(g, from,
                boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;predecessor_map(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]));

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 経路なし&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[to] &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; to) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;no path&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路の頂点リストを作成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; route;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (Vertex v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; to; v &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; from; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parents[v]) {
        route.push_front(v);
    }
    route.push_front(from);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 最短経路を出力&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Vertex v &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; route) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Names[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;S
A
B
D
G
Z
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#isomorphism&#34; name=&#34;isomorphism&#34;&gt;2つのグラフが同型か判定する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2つのグラフが同型かを判定するには、&lt;code&gt;&amp;lt;boost/graph/isomorphism.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/isomorphism.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::isomorphism()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数は、引数として2つのグラフをとり、それらが同型であれば&lt;code&gt;true&lt;/code&gt;、そうでなければ&lt;code&gt;false&lt;/code&gt;を返す。
ここでは、以下の2つのグラフを比較する。&lt;/p&gt;
&lt;p&gt;g1:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/isomorphism_1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;g2:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/isomorphism_2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;isomorphism&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex_count &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;;

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph1&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), vertex_count);
}

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph2&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        { &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;9&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;},
        { &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;}, { &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), vertex_count);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph1();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph2();

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;isomorphism&lt;/span&gt;(g1, g2);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;isomorphic? &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;isomorphic? true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#minimum-spanning-tree&#34; name=&#34;minimum-spanning-tree&#34;&gt;最小全域木を作る&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;グラフに含まれるすべての頂点を含む最小の部分グラフを、最小全域木(minimum spanning tree)と言う。&lt;/p&gt;
&lt;p&gt;Boost.Graphには、最小全域木を作るためのアルゴリズムとして、以下の2つの関数が用意されている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.com/libs/graph/doc/kruskal_min_spanning_tree.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::kruskal_minimum_spanning_tree()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスカル法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.com/libs/graph/doc/prim_minimum_spanning_tree.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::prim_minimum_spanning_tree()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリム法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらを以下のグラフに適用すると&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/minimum_spanning_tree_1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以下のような最小全域木(赤の太線部分)が手に入る。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/minimum_spanning_tree_2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;それぞれの使い方は以下のようになる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;クラスカル法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;クラスカル法によって最小全域木を求める&lt;code&gt;boost::kruskal_minimum_spanning_tree()&lt;/code&gt;関数は、Output Iteratorで最小全域木の辺記述子(edge descriptor)を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/kruskal_min_spanning_tree.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;edge_descriptor EdgeDesc;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, C},
        {B, D},
        {B, E},
        {C, B},
        {C, D},
        {D, E},
        {E, A}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;EdgeDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; spanning_tree;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;kruskal_minimum_spanning_tree&lt;/span&gt;(g, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(spanning_tree));

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; EdgeDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; spanning_tree) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;source(e, g)] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;
                         &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;target(e, g)] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;)&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(A,C)
(D,E)
(E,A)
(B,D)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;プリム法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;プリム法によって最小全域木を求める&lt;code&gt;boost::prim_minimum_spanning_tree()&lt;/code&gt;関数は、先行ノードマップ(predecessor map)として最小全域木を返す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/prim_minimum_spanning_tree.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS,
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;no_property, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor VertexDesc;

std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string Name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, C},
        {B, D},
        {B, E},
        {C, B},
        {C, D},
        {D, E},
        {E, A},
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; weights &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), weights.begin(), N);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;VertexDesc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parents(N);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;prim_minimum_spanning_tree(g, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;parents[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parents[i] &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; i) {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;parent[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;] = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[parents[i]] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;parent[&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; Name[i] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;] = no parent&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;parent[A] = no parent
parent[B] = D
parent[C] = A
parent[D] = E
parent[E] = A
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#topological-sort&#34; name=&#34;topological-sort&#34;&gt;トポロジカルソート&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;無閉路有向グラフ(DAG : Directed Acyclic Graph)に順序を付けるトポロジカルソートは、&lt;code&gt;&amp;lt;boost/graph/topological_sort.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/topological_sort.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::topological_sort()&lt;/code&gt;&lt;/a&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;この関数は引数として、グラフ構造への&lt;code&gt;const&lt;/code&gt;参照と、頂点リストを出力するOutput Iteratorをとる。(頂点リストは逆順で返されるため、&lt;code&gt;boost::adaptors::reversed&lt;/code&gt;や&lt;code&gt;rbegin()&lt;/code&gt;/&lt;code&gt;rend()&lt;/code&gt;などで正順に直して使用する。)&lt;/p&gt;
&lt;p&gt;ここでは、以下のグラフにトポロジカルソートを適用する：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/topological_sort.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;topological_sort&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/algorithm/for_each.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/range/adaptor/reversed.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

Graph &lt;span style=&#34;color: #0000FF&#34;&gt;make_graph&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}, {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
        {&lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}
    };
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Graph(edges.begin(), edges.end(), &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; make_graph();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;topological_sort&lt;/span&gt;(g, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;back_inserter(result));

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(result &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adaptors&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;reversed, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; vertex) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vertex &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    });
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2
5
0
1
4
3
&lt;/code&gt;&lt;/pre&gt;
出力から、有向グラフgがトポロジカルソートによって「2 → 5 → 0 → 1 → 4 → 3」の順序が付けられたことがわかる。&lt;/p&gt;
&lt;p&gt;なお、&lt;code&gt;boost::topological_sort()&lt;/code&gt;関数に、閉路のある有向グラフを指定した場合、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/exception.html#not_a_dag&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::not_a_dag&lt;/code&gt;&lt;/a&gt;例外が投げられる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#euler-path&#34; name=&#34;euler-path&#34;&gt;一筆書きの経路を求める&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;オイラー閉路というのを求めると、グラフの一筆書きの経路を得ることができる。ここでは、「サンタクロースの家」と呼ばれる無向グラフの一筆書きを求める。&lt;/p&gt;
&lt;p&gt;Boost.Graphにはオイラー閉路のためのアルゴリズムは用意されていないが、以下のGitHubにある&lt;code&gt;shand::graph::euler_path()&lt;/code&gt;関数を利用することで、一筆書きを容易に求められる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/faithandbrave/Shand/blob/master/shand/graph/euler_path.hpp&#34; target=&#34;_blank&#34;&gt;shand/graph/euler_path.hpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;deque&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;shand/graph/&lt;span style=&#34;color:#ff0000&#34;&gt;euler_path&lt;/span&gt;.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; {A, B, C, D, E, N};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;undirectedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor vertex_desc;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B},
        {B, C},
        {C, A},
        {B, D},
        {B, E},
        {C, D},
        {D, E},
        {E, C}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vertex_desc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; path;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;shand&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;euler_path&lt;/span&gt;(g, E, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;path](vertex_desc v) { path.push_front(v); })) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;euler path failed&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;;
    }

    BOOST_FOREACH (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; vertex_desc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; v, path) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[v] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;E
B
A
C
B
D
C
E
D
&lt;/code&gt;&lt;/pre&gt;
E, B, A, C, B, D, C, E, Dの順に頂点をたどれば一筆書きになることがわかった。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/euler_path.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#write-graphviz&#34; name=&#34;write-graphviz&#34;&gt;グラフをGraphviz形式(.dot)で出力する&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;グラフをGraphviz形式(.dot)で出力するには、&lt;code&gt;&amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/code&gt;をインクルードし、&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/write-graphviz.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::write_graphviz()&lt;/code&gt;&lt;/a&gt;関数を使用する。この機能のために、別途ライブラリは必要としない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write_graphviz()&lt;/code&gt;関数の引数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第1引数&lt;/td&gt;
&lt;td&gt;出力先の&lt;code&gt;std::ostream&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第2引数&lt;/td&gt;
&lt;td&gt;グラフ構造への&lt;code&gt;const&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第3引数&lt;/td&gt;
&lt;td&gt;出力方法のカスタマイズ方法 (ここでは、頂点名を出力するために&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/write-graphviz.html#concept:PropertyWriter&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;make_label_writer()&lt;/code&gt;&lt;/a&gt;を使用している)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Edge;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; edges &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        {A, B}, {A, C}, {A, D},
        {B, E}, {C, E}, {D, E}
    };

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Graph g(edges.begin(), edges.end(), N);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// graphvizの形式(*.dot)で出力&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.dot&#34;&lt;/span&gt;);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;write_graphviz(file, g, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_label_writer(name.c_str()));
}
&lt;/pre&gt;&lt;/div&gt;

出力されたtest.dotファイル：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;digraph G {
0[label=&#34;A&#34;];
1[label=&#34;B&#34;];
2[label=&#34;C&#34;];
3[label=&#34;D&#34;];
4[label=&#34;E&#34;];
0-&amp;gt;1 ;
0-&amp;gt;2 ;
0-&amp;gt;3 ;
1-&amp;gt;4 ;
2-&amp;gt;4 ;
3-&amp;gt;4 ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Graphvizのdotコマンドを使用してpngに変換：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;dot -Tpng test.dot -o test.png
&lt;/code&gt;&lt;/pre&gt;
出力されたtest.png：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/boostjp/image/master/tips/graph/graphviz.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;追加資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20100416/1271388752&#34; target=&#34;_blank&#34;&gt;Boost.Graph Graphviz形式で重みを出力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;http://boostjp.github.io/tips/graph.html#read-graphviz&#34; name=&#34;read-graphviz&#34;&gt;Graphviz形式(.dot)のデータを読み込む&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Graphviz形式(.dot)のデータを読み込むには、&lt;code&gt;&amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/code&gt;で定義される&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/graph/doc/read_graphviz.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boost::read_graphviz()&lt;/code&gt;&lt;/a&gt;関数を使用する。この関数を使用するには、Boost Regex Libraryをリンクする必要がある。&lt;/p&gt;
&lt;p&gt;ここでは、「[グラフをGraphviz形式(.dot)で出力する](#write-graphviz」で出力したtest.dotファイルを読み込む。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read_graphviz()&lt;/code&gt;関数の引数：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第1引数&lt;/td&gt;
&lt;td&gt;入力元の&lt;code&gt;std::istream&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第2引数&lt;/td&gt;
&lt;td&gt;グラフ構造への参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第3引数&lt;/td&gt;
&lt;td&gt;DOT言語のプロパティを処理するための&lt;code&gt;boost::dynamic_properties&lt;/code&gt;型変数への参照&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graphviz.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;listS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vecS, boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;directedS&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { A, B, C, D, E, N };
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABCDE&#34;&lt;/span&gt;;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ifstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.dot&#34;&lt;/span&gt;);

    Graph g;
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dynamic_properties dp(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ignore_other_properties);
    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;read_graphviz(file, g, dp);

    boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;print_graph(g, name.c_str());
}
&lt;/pre&gt;&lt;/div&gt;

出力：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A --&amp;gt; B C D
B --&amp;gt; E
C --&amp;gt; E
D --&amp;gt; E
E --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
tested boost version is 1.51.0&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : distance_recorderを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>d9d0a1b3207e3eda95d2ba9c8c2e12ce7d934abc:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-24 15:15:06 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html&#34;&gt;基本的なグラフ理論の復習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS （深さ優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;Dijkstra Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dfs_visitor.html&#34;&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_visitor.html&#34;&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html&#34;&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html&#34;&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html&#34;&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>distance_recorder&lt;DistanceMap, EventTag&gt; -- Boost.Graph : distance_recorderを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html"/>
      <id>d9d0a1b3207e3eda95d2ba9c8c2e12ce7d934abc:archive/boost_docs/libs/graph/distance_recorder.md</id>
      <updated>2014-12-24 15:15:06 +0900</updated>
      
        <content type="html">&lt;h1&gt;distance_recorder&amp;lt;DistanceMap, EventTag&amp;gt;&lt;/h1&gt;
&lt;p&gt;これは、グラフ探索中に、ある始点から各頂点までの距離を (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map.html&#34;&gt;property map&lt;/a&gt; を使って) 記録する &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EventVisitor.html&#34;&gt;EventVisitor&lt;/a&gt; である。辺 &lt;code&gt;e = (u,v)&lt;/code&gt; に対して実行されると、 &lt;code&gt;v&lt;/code&gt; への距離は &lt;code&gt;u&lt;/code&gt; への距離より大きくなる。 &lt;code&gt;distance_recorder&lt;/code&gt; は &lt;code&gt;on_tree_edge&lt;/code&gt; や &lt;code&gt;on_relax_edge&lt;/code&gt; イベントでよく使われる。頂点イベントには使用できない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dfs_visitor.html&#34;&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/a&gt; などのアルゴリズム別のアダプタでラップすることで、 &lt;code&gt;distance_recorder&lt;/code&gt; を グラフアルゴリズムで使えるようになる。また、&lt;code&gt;std::pair&lt;/code&gt; を使って他のイベントビジタと結合して、 EventVisitorList を作れる。&lt;/p&gt;
&lt;h2&gt;コード例&lt;/h2&gt;
&lt;p&gt;例は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt; を参照。&lt;/p&gt;
&lt;h2&gt;モデル&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/EventVisitor.html&#34;&gt;EventVisitor&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;定義場所&lt;/h2&gt;
&lt;p&gt;boost/graph/visitors.hpp&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;パラメータ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;デフォルト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DistanceMap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの型と値の型がグラフの頂点記述子型である &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/WritablePropertyMap.html&#34;&gt;WritablePropertyMap&lt;/a&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html#translate_note_1&#34;&gt;[訳注1]&lt;/a&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EventTag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;グラフアルゴリズム中、いつ &lt;code&gt;distance_recorder&lt;/code&gt; が呼び出されるかを指定するタグ。 &lt;code&gt;EventTag&lt;/code&gt; は辺イベントでなければならない。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;distance_recorder::event_filter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータ &lt;code&gt;EventTag&lt;/code&gt; と同じ型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;メンバ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;distance_recorder(DistanceMap pa);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離プロパティマップ &lt;code&gt;pa&lt;/code&gt; を使って &lt;code&gt;distance_recorder&lt;/code&gt; オブジェクトを構築する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class Edge, class Graph&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;void operator()(Edge e, const Graph&amp;amp; g);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;辺 &lt;code&gt;e = (u,v)&lt;/code&gt; を渡されると、 &lt;code&gt;u&lt;/code&gt; への距離に 1 を足したものを &lt;code&gt;v&lt;/code&gt; への距離として記録する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;class DistanceMap, class Tag&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;distance_recorder&amp;lt;DistanceMap, Tag&amp;gt;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;record_distances(DistanceMap pa, Tag);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;distance_recorder&lt;/code&gt; を作る便利な方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/visitor_concepts.html&#34;&gt;Visitorコンセプト&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イベントビジタ: &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/predecessor_recorder.html&#34;&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/a&gt; 、 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/time_stamper.html&#34;&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/a&gt; 、 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/property_writer.html&#34;&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;h2&gt;訳注&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/distance_recorder.html#translate_note_1&#34; name=&#34;translate_note_1&#34;&gt;[訳注1]&lt;/a&gt; 値の型は整数である。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>the Boost Graph Library -- Boost.Graph : DijkstraVisitorコンセプトを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph.html"/>
      <id>697b76a13570ef6f9ebabff4a74bbedb79e3eb27:archive/boost_docs/libs/graph.md</id>
      <updated>2014-12-24 15:02:08 +0900</updated>
      
        <content type="html">&lt;h1&gt;the Boost Graph Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;翻訳元ドキュメント : &lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/table_of_contents.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://www.boost.org/doc/libs/1_31_0/libs/graph/doc/bgl-cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;BGLへの序章&lt;/li&gt;
&lt;li&gt;歴史&lt;/li&gt;
&lt;li&gt;刊行物&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/acknowledgements.html&#34;&gt;謝辞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クイック・ツアー&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/graph_theory_review.html&#34;&gt;基本的なグラフ理論の復習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;チュートリアル&lt;ol&gt;
&lt;li&gt;Property Maps&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;adjacency_list&lt;/code&gt; class&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;例題&lt;ol&gt;
&lt;li&gt;ファイル依存関係の例&lt;/li&gt;
&lt;li&gt;Kevin Bacon の６次数&lt;/li&gt;
&lt;li&gt;Graph Coloring&lt;/li&gt;
&lt;li&gt;Sparse Matrix Ordering&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BGL 拡張&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/constructing_algorithms.html&#34;&gt;BGLでグラフアルゴリズムを構築する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Converting Existing Graphs to BGL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boost Graph インタフェイス&lt;ol&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;li&gt;Incidence Graph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BidirectionalGraph.html&#34;&gt;Bidirectional Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/AdjacencyGraph.html&#34;&gt;Adjacency Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vertex List Graph&lt;/li&gt;
&lt;li&gt;Edge List Graph&lt;/li&gt;
&lt;li&gt;Vertex and Edge List Graph&lt;/li&gt;
&lt;li&gt;Mutable Graph&lt;/li&gt;
&lt;li&gt;Property Graph&lt;/li&gt;
&lt;li&gt;Mutable Property Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The Property Map Library （専門的にはグラフ・ライブラリの部分ではないが、ここで使用される頻度が高い）&lt;/li&gt;
&lt;li&gt;ビジタ・コンセプト&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BFSVisitor.html&#34;&gt;BFS （幅優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DFSVisitor.html&#34;&gt;DFS （深さ優先探査） Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html&#34;&gt;Dijkstra Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BellmanFordVisitor.html&#34;&gt;Bellman Ford Visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event Visitor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EventVisitorList アダプタ&lt;ol&gt;
&lt;li&gt;Event Visitor List&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bfs_visitor.html&#34;&gt;&lt;code&gt;bfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dfs_visitor.html&#34;&gt;&lt;code&gt;dfs_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_visitor.html&#34;&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_visitor.html&#34;&gt;&lt;code&gt;bellman_visitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イベント・ビジタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predecessor_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance_recorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_stamper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_writer&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・クラス&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list.html&#34;&gt;&lt;code&gt;adjacency_list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_matrix.html&#34;&gt;&lt;code&gt;adjacency_matrix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subgraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edge_list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filtered_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Matrix as Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Leda Graph(アンドキュメント)&lt;/li&gt;
&lt;li&gt;Stanford GraphBase&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;イテレータ・アダプタ&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_iterator.html&#34;&gt;&lt;code&gt;adjacency_iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特性クラス&lt;ol&gt;
&lt;li&gt;&lt;code&gt;graph_traits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/adjacency_list_traits.html&#34;&gt;&lt;code&gt;adjacency_list_traits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;property_map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bgl_named_params.html&#34;&gt;&lt;code&gt;bgl_named_params&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核となるアルゴリズム・パターン&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_search.html&#34;&gt;&lt;code&gt;breadth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/breadth_first_visit.html&#34;&gt;&lt;code&gt;breadth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_search.html&#34;&gt;&lt;code&gt;depth_first_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/depth_first_visit.html&#34;&gt;&lt;code&gt;depth_first_visit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undirected_dfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform_cost_search&lt;/code&gt; (非推奨、代わりに Dijkstra を使うこと)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;グラフ・アルゴリズム&lt;ol&gt;
&lt;li&gt;最短経路アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html&#34;&gt;&lt;code&gt;dijkstra_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bellman_ford_shortest_paths.html&#34;&gt;&lt;code&gt;bellman_ford_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dag_shortest_paths.html&#34;&gt;&lt;code&gt;dag_shortest_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnson_all_pairs_shortest_paths&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最小全域木アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kruskal_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prim_minimum_spanning_tree&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/connected_components.html&#34;&gt;&lt;code&gt;connected_components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incremental Connected Components&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initialize_incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incremental_components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;same_component&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component_index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最大流アルゴリズム&lt;ol&gt;
&lt;li&gt;&lt;code&gt;edmunds_karp_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_relabel_max_flow&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topological_sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transitive_closure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/copy_graph.html&#34;&gt;&lt;code&gt;copy_graph&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transpose_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isomorphism&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/cuthill_mckee_ordering.html&#34;&gt;&lt;code&gt;cuthill_mckee_ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequential_vertex_coloring&lt;/code&gt;(アンドキュメント)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minimum_degree_ordering&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T Graphviz フォーマット入出力ユーティリティ&lt;ol&gt;
&lt;li&gt;&lt;code&gt;write_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_graphviz&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;補助コンセプト、補助クラス、補助関数&lt;ol&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/ColorValue.html&#34;&gt;ColorValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/Buffer.html&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/BasicMatrix.html&#34;&gt;BasicMatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opposite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/bandwidth.html&#34;&gt;&lt;code&gt;ith_bandwidth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools for random graphs&lt;ol&gt;
&lt;li&gt;&lt;code&gt;random_vertex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_random_graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomize_property&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;目標と To-Do 項目&lt;/li&gt;
&lt;li&gt;トラブルシューティング&lt;/li&gt;
&lt;li&gt;既知の問題&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;BGL Book Errata&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/oki_miyuki@cppll.jp&#34;&gt;OKI Miyuki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Dijkstra Visitor Concept -- Boost.Graph : DijkstraVisitorコンセプトを追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/DijkstraVisitor.html"/>
      <id>697b76a13570ef6f9ebabff4a74bbedb79e3eb27:archive/boost_docs/libs/graph/DijkstraVisitor.md</id>
      <updated>2014-12-24 15:02:08 +0900</updated>
      
        <content type="html">&lt;h1&gt;Dijkstra Visitor Concept&lt;/h1&gt;
&lt;p&gt;このコンセプトは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_shortest_paths.html&#34;&gt;&lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt;&lt;/a&gt; 用のビジタのインタフェースと、関連するアルゴリズムを定義する。ユーザはこのインタフェースに一致するクラスを作って、そのクラスのオブジェクトを &lt;code&gt;dijkstra_shortest_paths()&lt;/code&gt; に渡すことで、探索中に実行される操作を追加できる。&lt;/p&gt;
&lt;h2&gt;Refinement of&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/utility/CopyConstructible.html&#34;&gt;Copy Constructible&lt;/a&gt; (ビジタのコピーは軽い操作である方がいい)&lt;/p&gt;
&lt;h2&gt;表記&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;識別子&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Dijkstra Visitor のモデルの型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;V&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Graph のモデルの型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;G&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::graph_traits&amp;lt;G&amp;gt;::edge_descriptor&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;,&lt;code&gt;u&lt;/code&gt;,&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boost::graph_traits&amp;lt;G&amp;gt;::vertex_descriptor&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DistanceMap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadWritePropertyMap.html&#34;&gt;Read/Write Property Map&lt;/a&gt; のモデルの型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DistanceMap&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WeightMap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/property_map/ReadablePropertyMap.html&#34;&gt;Readable Property Map&lt;/a&gt; のモデルの型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DistanceMap&lt;/code&gt; 型のオブジェクト。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;有効な表現式&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;式&lt;/th&gt;
&lt;th&gt;戻り値&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Initialize Vertex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.initialize_vertex(u, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期化される時に、グラフの各頂点に対して実行される。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Examine Vertex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.examine_vertex(u, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各頂点がキューからポップされる時に、その頂点に対して実行される。これは頂点 &lt;code&gt;u&lt;/code&gt; の各出力辺に対して &lt;code&gt;examine_edge()&lt;/code&gt; が実行される直前に起こる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Examine Edge&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.examine_edge(e, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各頂点が発見された後に、その頂点の各出力辺に対して実行される。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Discover Vertex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.discover_vertex(u, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;各頂点に初めて遭遇した時に実行される。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Edge Relaxed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.edge_relaxed(e, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;調査時に、以下の条件が満たされれば、その辺は緩和される (距離が減らされる) 。この時、このメソッドが実行される。&lt;br /&gt; &lt;code&gt;tie(u,v) = incident(e, g);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;D d_u = get(d, u), d_v = get(d, v);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;W w_e = get(w, e);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;assert(compare(combine(d_u, w_e), d_v));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Edge Not Relaxed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.edge_not_relaxed(e, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;調査時に、辺が緩和 (上を参照) されなければ、このメソッドが実行される。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Finish Vertex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vis.finish_vertex(u, g)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある頂点の全ての出力辺が探索木に追加され、全ての隣接する頂点が発見された後に、その頂点に対して実行される (ただし、隣接する頂点の出力辺を調査するよりは前に) 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;モデル&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/dijkstra_visitor.html&#34;&gt;&lt;code&gt;dijkstra_visitor&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Copyright © 2000-2001&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/jeremy_siek.htm&#34; target=&#34;_blank&#34;&gt;Jeremy Siek&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:jsiek@osl.iu.edu&#34;&gt;jsiek@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/people/liequan_lee.htm&#34; target=&#34;_blank&#34;&gt;Lie-Quan Lee&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:llee@cs.indiana.edu&#34;&gt;llee@cs.indiana.edu&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.osl.iu.edu/~lums&#34; target=&#34;_blank&#34;&gt;Andrew Lumsdaine&lt;/a&gt;, Indiana University (&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/mailto:lums@osl.iu.edu&#34;&gt;lums@osl.iu.edu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Translation Copyright © 2003 &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/graph/gimite@mx12.freecom.ne.jp&#34;&gt;Hiroshi Ichikawa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」に提供されており、いかなる明示的、暗黙的保証も行わない。また、いかなる目的に対しても、その利用が適していることを関知しない。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>libs/graph/example/dave.cpp -- Boost.Graph : dijkstra_visitorからリンクしているサンプルコードを追加。</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/graph/examples/dave.cpp.html"/>
      <id>e66cc8a919c21d4a73e9e5349e537f889acba5be:archive/boost_docs/libs/graph/examples/dave.cpp.md</id>
      <updated>2014-12-24 14:06:38 +0900</updated>
      
        <content type="html">&lt;h1&gt;libs/graph/example/dave.cpp&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This file is part of the Boost Graph Library&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// You should have received a copy of the License Agreement for the&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Boost Graph Library along with the software; see the file LICENSE.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// If not, contact Office of Research, University of Notre Dame, Notre&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Dame, IN 46556.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission to modify the code and to distribute modified code is&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// granted, provided the text of this NOTICE is retained, a notice that&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the code was modified is included with the above COPYRIGHT NOTICE and&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// with the COPYRIGHT NOTICE in the LICENSE file, and that the LICENSE&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// file is distributed with the modified code.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// By way of example, but not limitation, Licensor MAKES NO&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE COMPONENTS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR DOCUMENTATION WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS, TRADEMARKS&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OR OTHER RIGHTS.&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//=======================================================================&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/config.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/adjacency_list.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/visitors.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/breadth_first_search.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/dijkstra_shortest_paths.hpp&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;boost/graph/graph_utility.hpp&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; boost;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;  This example does a best-first-search (using dijkstra&#39;s) and&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;  simultaneously makes a copy of the graph (assuming the graph is&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;  connected).&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;  Example Graph: (p. 90 &#34;Data Structures and Network Algorithms&#34;, Tarjan)&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;              g&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;            3+ +2&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;            / 1 \&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           e+----f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           |+0 5++&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           | \ / |&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;         10|  d  |12&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           |8++\7|&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           +/ | +|&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;           b 4|  c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;            \ | +&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;            6+|/3&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;              a&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;  Sample Output:&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;a --&amp;gt; c d &lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;b --&amp;gt; a d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;c --&amp;gt; f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;d --&amp;gt; c e f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;e --&amp;gt; b g&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;f --&amp;gt; e g&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;g --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;Starting graph:&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;a(32767); c d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;c(32767); f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;d(32767); c e f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;f(32767); e g&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;e(32767); b g&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;g(32767);&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;b(32767); a d&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;Result:&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;a(0); d c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;d(4); f e c&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;c(3); f&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;f(9); g e&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;e(4); g b&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;g(7);&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;b(14); d a &lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;vertex_color_t&lt;/span&gt;, default_color_type, 
         property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;vertex_distance_t&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; VProperty;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;weight_t&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;edge_weight_t&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;weight_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; EProperty;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;vecS, vecS, directedS, VProperty, EProperty &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Graph;



&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; endl_printer
  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;base_visitor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; endl_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Tag event_filter;
  endl_printer(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; m_os(os) { }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T, Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) { m_os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m_os;
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
endl_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; print_endl(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, Tag) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; endl_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(os);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PA&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; edge_printer
 &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;base_visitor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; edge_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;PA, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Tag event_filter;

  edge_printer(PA pa, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; m_pa(pa), m_os(os) { }

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T x, Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g) {
    m_os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; get(m_pa, source(x, g)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; 
         &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; get(m_pa, target(x, g)) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;) &#34;&lt;/span&gt;;
  }
  PA m_pa;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; m_os;
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PA&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
edge_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;PA, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
print_edge(PA pa, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; os, Tag) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; edge_printer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;PA, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(pa, os);
}


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;NewGraph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; graph_copier 
  &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;base_visitor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;graph_copier&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;NewGraph, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; Tag event_filter;

  graph_copier(NewGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; graph) &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; new_g(graph) { }

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Edge&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(Edge e, Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g) {
    add_edge(source(e, g), target(e, g), new_g);
  }
&lt;span style=&#34;color: #A0A000&#34;&gt;private:&lt;/span&gt;
  NewGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; new_g;
};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;NewGraph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;inline&lt;/span&gt; graph_copier&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;NewGraph, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
copy_graph(NewGraph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; g, Tag) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; graph_copier&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;NewGraph, Tag&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(g);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Graph&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; G, Name name)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_iterator ui, uiend;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tie(ui, uiend) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vertices(G); ui &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; uiend; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;ui) {
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;ui] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; --&amp;gt; &#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;adjacency_iterator vi, viend;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt;(boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;tie(vi, viend) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; adjacent_vertices(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;ui, G); vi &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; viend; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;vi)
      cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name[&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;vi] &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
    cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  }

}


&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; 
main(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; , &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; [])
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Name and ID numbers for the vertices&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; name[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;abcdefg&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; { a, b, c, d, e, f, g, N};

  Graph &lt;span style=&#34;color: #0000FF&#34;&gt;G&lt;/span&gt;(N);
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;property_map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph, &lt;span style=&#34;color: #B00040&#34;&gt;vertex_index_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type 
    vertex_id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; get(vertex_index, G);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;weight_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; distance(N, numeric_limits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;weight_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;max());
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;graph_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Graph&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;vertex_descriptor Vertex;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; parent(N);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; E;

  E edges[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { E(a,c), E(a,d),
                E(b,a), E(b,d),
                E(c,f),
                E(d,c), E(d,e), E(d,f),
                E(e,b), E(e,g),
                E(f,e), E(f,g) };

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; weight[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;,
                   &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt;,
                   &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;,
                   &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;,
                   &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,
                   &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i)
    add_edge(edges[i].first, edges[i].second, weight[i], G);

  print(G, name);

  adjacency_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;listS, vecS, directedS, 
    property&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;vertex_color_t&lt;/span&gt;, default_color_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; G_copy(N);

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Starting graph:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cout_int(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cout_char(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;queue&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Vertex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; Q;
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;breadth_first_search
    (G, vertex(a, G), Q,
     make_bfs_visitor(
     boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_list
      (write_property(make_iterator_property_map(name, vertex_id,
                                                name[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]),
                      cout_char, on_examine_vertex()),
       write_property(make_iterator_property_map(distance.begin(),
                                                vertex_id, 
                                                distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]), 
                      cout_int, on_examine_vertex()),
       print_edge(make_iterator_property_map(name, vertex_id, 
                                            name[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]),
                  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, on_examine_edge()),
       print_endl(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, on_finish_vertex()))),
     get(vertex_color, G));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;about to call dijkstra&#39;s&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  parent[vertex(a, G)] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; vertex(a, G);
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;dijkstra_shortest_paths
    (G, vertex(a, G), 
     distance_map(make_iterator_property_map(distance.begin(), vertex_id, 
                                             distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;])).
     predecessor_map(make_iterator_property_map(parent.begin(), vertex_id,
                                                parent[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;])).
     visitor(make_dijkstra_visitor(copy_graph(G_copy, on_examine_edge()))));

  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Result:&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
  boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;breadth_first_search
    (G, vertex(a, G), 
     visitor(make_bfs_visitor(
     boost&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_list
     (write_property(make_iterator_property_map(name, vertex_id,
                                                name[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]),
                     cout_char, on_examine_vertex()),
      write_property(make_iterator_property_map(distance.begin(),
                                                vertex_id, 
                                                distance[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]), 
                     cout_int, on_examine_vertex()),
      print_edge(make_iterator_property_map(name, vertex_id, 
                                            name[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]),
                 std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, on_examine_edge()),
      print_endl(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout, on_finish_vertex())))));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>