<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2020-07-07T03:49:51.208775</updated>
  <id>962e9c76-cb85-4d6f-8ee1-416d418963ed</id>

  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : STLInterfacesを追加 (close #485)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>710f5eb85a5194bfb33deffcca5dfd89b8462d32:document/version/1_74_0.md</id>
      <updated>2020-07-07T12:48:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.74.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_74_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_74_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boost.org/libs/stl_interfaces/&#34; target=&#34;_blank&#34;&gt;STLInterfaces&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;CRTPベースでSTLのビュー、イテレータ、シーケンスコンテナをかんたんに書けるライブラリ (作者Zach Laine)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34; id=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_OVERRIDE&lt;/code&gt;と&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;の代わりに個別のトレイトと関数に対する仕組みとして、アロケータアクセスのユーティリティを実装 (Glen Fernandes氏)。これらは、使用可能な場合はC++11のアロケータモデルをサポートし、C++98互換へのフォールバックを提供する。この機能は現在、以下のライブラリで使用している：&lt;ul&gt;
&lt;li&gt;Circular_Buffer&lt;/li&gt;
&lt;li&gt;Wave&lt;/li&gt;
&lt;li&gt;Lockfree&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;Smart_Ptr&lt;/li&gt;
&lt;li&gt;Dynamic_Bitset&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Bimap&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;でのスコープ付き列挙型を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;での&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;に配列のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34; id=&#34;heap&#34;&gt;Heap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skew_heap&lt;/code&gt;のtop nodeの破棄が正しく行われるよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きい&lt;code&gt;N&lt;/code&gt;での&lt;code&gt;mp_with_index&amp;lt;N&amp;gt;&lt;/code&gt;のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple_transform&lt;/code&gt;を追加 (Hans Dembinski氏によるコントリビュート)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; 読み書きのキー抽出器 (key extractors) に関するドキュメントを明確化&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリは、C++11準拠のコンパイラと標準ライブラリを要求するようになった&lt;/li&gt;
&lt;li&gt;LFS: 基礎システムがサポートする2GBを超えるファイルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::utf&lt;/code&gt;名前空間で、ジェネリックなUTF変換関数を使用可能にした&lt;/li&gt;
&lt;li&gt;UTF-8パスでの&lt;code&gt;stat&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;v2.1ブランチは2020年末に廃止する予定で、v2.2ブランチがデフォルトになる。将来のv2.2ブランチの機能は、&lt;code&gt;&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;better_optimisation&lt;/a&gt;&lt;/code&gt;で使用できる。このブランチは、Outcome v2.1に対する主要で大きな変更がいくつかある。詳細は&lt;a href=&#34;https://ned14.github.io/outcome/&#34; target=&#34;_blank&#34;&gt;先頭ページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;void&lt;/code&gt;のresultとoutcomeからの&lt;code&gt;explicit&lt;/code&gt;構築でデフォルト構築が行われなくなった。以前はエラーのない&lt;code&gt;result&amp;lt;void&amp;gt;&lt;/code&gt;から&lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt;に明示的に構築した場合、&lt;code&gt;T&lt;/code&gt;がデフォルト構築されていた。これは役に立たない驚きを与えてしまっていたため、無効にした&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;。このマクロは、新しいバージョンのOutcomeを使用する際に、古い名前で新たな機能を使用する別名を有効にすることができる&lt;/li&gt;
&lt;li&gt;コンセプトをCamelCaseからsnake_caseにした。Outcomeが最初に実装されたとき、C++20はCamelCaseスタイルのコンセプトが入ると考えられていた。これはC++20のリリース前に変更され、Outcomeもそれに合わせて名前を変更した。互換用の別名が提供されるため、Outcome v2.1については既存コードを破壊しない。ただし、Outcome v2.2でコンパイルするコードについては、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;を&lt;code&gt;210&lt;/code&gt;以下に設定しない限りはアップグレードが必要になる&lt;/li&gt;
&lt;li&gt;コンセプトを&lt;code&gt;OUTCOME_V2_NAMESPACE::concepts&lt;/code&gt;名前空間に置くようにした。以前までコンセプトは&lt;code&gt;convert&lt;/code&gt;名前空間にあったが、現在は専用の名前空間にある&lt;/li&gt;
&lt;li&gt;新たなコンセプト&lt;code&gt;basic_result&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;basic_outcome&amp;lt;T&amp;gt;&lt;/code&gt;を追加。エンドユーザーにとって&lt;code&gt;is_basic_result &amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;value_or_error &amp;lt;T&amp;gt;&lt;/code&gt;の間に役立たないギャップがあったため、&lt;code&gt;basic_result&lt;/code&gt;にマッチするコンセプトが求められていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRY&lt;/code&gt;操作は、Outcome v2.2以降では動作が異なる。&lt;code&gt;OUTCOME_TRY()&lt;/code&gt;を使用するコードが破壊的変更される大きな変更になる。コードをアップグレードする正規表現が、Outcome v2.1からv2.2への変更リストにある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; Xcode 11.4 (現在の最新) に含まれるclang Appleには&lt;code&gt;noexcept(std::is_constructible&amp;lt;T, void&amp;gt;)&lt;/code&gt;がコンパイルに失敗する問題を修正したパッチが適用されていない。このパッチは数年前に提出した。Appleがclangを修正するのを諦めて、Outcomeにワークアラウンドを追加した&lt;/li&gt;
&lt;li&gt;値をもたないポリシークラスから、予備ストレージ (spare storage) を使用できなかった。当時このコードを書いたときは頭がおかしくなっており、予備ストレージAPIには間違ったプロトタイプがあり、ポリシークラス内での作業を妨げていた。申し訳ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt; 内部で&lt;code&gt;boost::type_erasure::any&lt;/code&gt;と&lt;code&gt;boost::any&lt;/code&gt;があいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の機能をC++20向けに修正 (Glen Fernandes氏)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event_comparison_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;voronoi_predicates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34; id=&#34;smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;owner_equals&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;に&lt;code&gt;owner_hash_value&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner_hash&lt;/code&gt;に&lt;code&gt;owner_equal_to&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;std::hash&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;に、&lt;code&gt;boost::hash&lt;/code&gt;サポートと、&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;std::equal_to&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator bool()&lt;/code&gt;が&lt;code&gt;value() != 0&lt;/code&gt;の代わりに&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下を実装 (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に派生型のサポートを追加&lt;/li&gt;
&lt;li&gt;多く (数百) の候補型を指定した場合のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&amp;lt;R&amp;gt;&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;__VA_OPT__&lt;/code&gt;を含む可変引数関係のC++20機能をを実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/102&#34; target=&#34;_blank&#34;&gt;GitHUb #102&lt;/a&gt; &lt;code&gt;__has_include&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; Boost自体で役立つ新たなサンプルとして&lt;code&gt;check_macro_naming&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; C++20での&lt;code&gt;std::allocator&lt;/code&gt;クラスのメンバが削除されたことにともない、コンパイル問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; Xpressiveのlexerと&lt;code&gt;token_statistics&lt;/code&gt;のサンプルを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; lexertl lexerを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/87&#34; target=&#34;_blank&#34;&gt;GitHUb #87&lt;/a&gt; 事前定義マクロに対してもフックが実行されるようにした&lt;/li&gt;
&lt;li&gt;いくつかの小さなバグを修正&lt;/li&gt;
&lt;li&gt;C++98/03のサポートを非推奨にした。バージョン1.77でで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プレースホルダーのコンパイルエラーを修正。一般的なケースで動作するようになり、とくに&lt;code&gt;yap::print()&lt;/code&gt;で使用できる&lt;/li&gt;
&lt;li&gt;YAPのすべてをconstexprにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yap::print()&lt;/code&gt;で、正しい値カテゴリの出力を修正&lt;/li&gt;
&lt;li&gt;ドキュメントを明確化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#boostbook&#34; id=&#34;boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生成されるドキュメントの文字コードをUS-ASCIIからUTF-8に変更 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : Boostbookを追加 (close #484)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>fd09d3e6557c75d3df671cc853502eafdfbc35ae:document/version/1_74_0.md</id>
      <updated>2020-07-07T12:44:55+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.74.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_74_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_74_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ツール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34; id=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_OVERRIDE&lt;/code&gt;と&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;の代わりに個別のトレイトと関数に対する仕組みとして、アロケータアクセスのユーティリティを実装 (Glen Fernandes氏)。これらは、使用可能な場合はC++11のアロケータモデルをサポートし、C++98互換へのフォールバックを提供する。この機能は現在、以下のライブラリで使用している：&lt;ul&gt;
&lt;li&gt;Circular_Buffer&lt;/li&gt;
&lt;li&gt;Wave&lt;/li&gt;
&lt;li&gt;Lockfree&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;Smart_Ptr&lt;/li&gt;
&lt;li&gt;Dynamic_Bitset&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Bimap&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;でのスコープ付き列挙型を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;での&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;に配列のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34; id=&#34;heap&#34;&gt;Heap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skew_heap&lt;/code&gt;のtop nodeの破棄が正しく行われるよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きい&lt;code&gt;N&lt;/code&gt;での&lt;code&gt;mp_with_index&amp;lt;N&amp;gt;&lt;/code&gt;のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple_transform&lt;/code&gt;を追加 (Hans Dembinski氏によるコントリビュート)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; 読み書きのキー抽出器 (key extractors) に関するドキュメントを明確化&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリは、C++11準拠のコンパイラと標準ライブラリを要求するようになった&lt;/li&gt;
&lt;li&gt;LFS: 基礎システムがサポートする2GBを超えるファイルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::utf&lt;/code&gt;名前空間で、ジェネリックなUTF変換関数を使用可能にした&lt;/li&gt;
&lt;li&gt;UTF-8パスでの&lt;code&gt;stat&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;v2.1ブランチは2020年末に廃止する予定で、v2.2ブランチがデフォルトになる。将来のv2.2ブランチの機能は、&lt;code&gt;&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;better_optimisation&lt;/a&gt;&lt;/code&gt;で使用できる。このブランチは、Outcome v2.1に対する主要で大きな変更がいくつかある。詳細は&lt;a href=&#34;https://ned14.github.io/outcome/&#34; target=&#34;_blank&#34;&gt;先頭ページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;void&lt;/code&gt;のresultとoutcomeからの&lt;code&gt;explicit&lt;/code&gt;構築でデフォルト構築が行われなくなった。以前はエラーのない&lt;code&gt;result&amp;lt;void&amp;gt;&lt;/code&gt;から&lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt;に明示的に構築した場合、&lt;code&gt;T&lt;/code&gt;がデフォルト構築されていた。これは役に立たない驚きを与えてしまっていたため、無効にした&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;。このマクロは、新しいバージョンのOutcomeを使用する際に、古い名前で新たな機能を使用する別名を有効にすることができる&lt;/li&gt;
&lt;li&gt;コンセプトをCamelCaseからsnake_caseにした。Outcomeが最初に実装されたとき、C++20はCamelCaseスタイルのコンセプトが入ると考えられていた。これはC++20のリリース前に変更され、Outcomeもそれに合わせて名前を変更した。互換用の別名が提供されるため、Outcome v2.1については既存コードを破壊しない。ただし、Outcome v2.2でコンパイルするコードについては、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;を&lt;code&gt;210&lt;/code&gt;以下に設定しない限りはアップグレードが必要になる&lt;/li&gt;
&lt;li&gt;コンセプトを&lt;code&gt;OUTCOME_V2_NAMESPACE::concepts&lt;/code&gt;名前空間に置くようにした。以前までコンセプトは&lt;code&gt;convert&lt;/code&gt;名前空間にあったが、現在は専用の名前空間にある&lt;/li&gt;
&lt;li&gt;新たなコンセプト&lt;code&gt;basic_result&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;basic_outcome&amp;lt;T&amp;gt;&lt;/code&gt;を追加。エンドユーザーにとって&lt;code&gt;is_basic_result &amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;value_or_error &amp;lt;T&amp;gt;&lt;/code&gt;の間に役立たないギャップがあったため、&lt;code&gt;basic_result&lt;/code&gt;にマッチするコンセプトが求められていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRY&lt;/code&gt;操作は、Outcome v2.2以降では動作が異なる。&lt;code&gt;OUTCOME_TRY()&lt;/code&gt;を使用するコードが破壊的変更される大きな変更になる。コードをアップグレードする正規表現が、Outcome v2.1からv2.2への変更リストにある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; Xcode 11.4 (現在の最新) に含まれるclang Appleには&lt;code&gt;noexcept(std::is_constructible&amp;lt;T, void&amp;gt;)&lt;/code&gt;がコンパイルに失敗する問題を修正したパッチが適用されていない。このパッチは数年前に提出した。Appleがclangを修正するのを諦めて、Outcomeにワークアラウンドを追加した&lt;/li&gt;
&lt;li&gt;値をもたないポリシークラスから、予備ストレージ (spare storage) を使用できなかった。当時このコードを書いたときは頭がおかしくなっており、予備ストレージAPIには間違ったプロトタイプがあり、ポリシークラス内での作業を妨げていた。申し訳ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt; 内部で&lt;code&gt;boost::type_erasure::any&lt;/code&gt;と&lt;code&gt;boost::any&lt;/code&gt;があいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の機能をC++20向けに修正 (Glen Fernandes氏)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event_comparison_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;voronoi_predicates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34; id=&#34;smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;owner_equals&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;に&lt;code&gt;owner_hash_value&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner_hash&lt;/code&gt;に&lt;code&gt;owner_equal_to&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;std::hash&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;に、&lt;code&gt;boost::hash&lt;/code&gt;サポートと、&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;std::equal_to&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator bool()&lt;/code&gt;が&lt;code&gt;value() != 0&lt;/code&gt;の代わりに&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下を実装 (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に派生型のサポートを追加&lt;/li&gt;
&lt;li&gt;多く (数百) の候補型を指定した場合のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&amp;lt;R&amp;gt;&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;__VA_OPT__&lt;/code&gt;を含む可変引数関係のC++20機能をを実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/102&#34; target=&#34;_blank&#34;&gt;GitHUb #102&lt;/a&gt; &lt;code&gt;__has_include&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; Boost自体で役立つ新たなサンプルとして&lt;code&gt;check_macro_naming&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; C++20での&lt;code&gt;std::allocator&lt;/code&gt;クラスのメンバが削除されたことにともない、コンパイル問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; Xpressiveのlexerと&lt;code&gt;token_statistics&lt;/code&gt;のサンプルを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; lexertl lexerを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/87&#34; target=&#34;_blank&#34;&gt;GitHUb #87&lt;/a&gt; 事前定義マクロに対してもフックが実行されるようにした&lt;/li&gt;
&lt;li&gt;いくつかの小さなバグを修正&lt;/li&gt;
&lt;li&gt;C++98/03のサポートを非推奨にした。バージョン1.77でで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プレースホルダーのコンパイルエラーを修正。一般的なケースで動作するようになり、とくに&lt;code&gt;yap::print()&lt;/code&gt;で使用できる&lt;/li&gt;
&lt;li&gt;YAPのすべてをconstexprにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yap::print()&lt;/code&gt;で、正しい値カテゴリの出力を修正&lt;/li&gt;
&lt;li&gt;ドキュメントを明確化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#boostbook&#34; id=&#34;boostbook&#34;&gt;Boostbook&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生成されるドキュメントの文字コードをUS-ASCIIからUTF-8に変更 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : Outcomeを追加 (close #486)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>3cd7e31b6889af1f0dfa082e5b0a84cf9b2bcfc7:document/version/1_74_0.md</id>
      <updated>2020-07-07T12:42:46+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.74.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_74_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_74_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34; id=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_OVERRIDE&lt;/code&gt;と&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;の代わりに個別のトレイトと関数に対する仕組みとして、アロケータアクセスのユーティリティを実装 (Glen Fernandes氏)。これらは、使用可能な場合はC++11のアロケータモデルをサポートし、C++98互換へのフォールバックを提供する。この機能は現在、以下のライブラリで使用している：&lt;ul&gt;
&lt;li&gt;Circular_Buffer&lt;/li&gt;
&lt;li&gt;Wave&lt;/li&gt;
&lt;li&gt;Lockfree&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;Smart_Ptr&lt;/li&gt;
&lt;li&gt;Dynamic_Bitset&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Bimap&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;でのスコープ付き列挙型を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;での&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;に配列のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34; id=&#34;heap&#34;&gt;Heap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skew_heap&lt;/code&gt;のtop nodeの破棄が正しく行われるよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きい&lt;code&gt;N&lt;/code&gt;での&lt;code&gt;mp_with_index&amp;lt;N&amp;gt;&lt;/code&gt;のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple_transform&lt;/code&gt;を追加 (Hans Dembinski氏によるコントリビュート)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; 読み書きのキー抽出器 (key extractors) に関するドキュメントを明確化&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリは、C++11準拠のコンパイラと標準ライブラリを要求するようになった&lt;/li&gt;
&lt;li&gt;LFS: 基礎システムがサポートする2GBを超えるファイルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::utf&lt;/code&gt;名前空間で、ジェネリックなUTF変換関数を使用可能にした&lt;/li&gt;
&lt;li&gt;UTF-8パスでの&lt;code&gt;stat&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アナウンス&lt;ul&gt;
&lt;li&gt;v2.1ブランチは2020年末に廃止する予定で、v2.2ブランチがデフォルトになる。将来のv2.2ブランチの機能は、&lt;code&gt;&lt;a href=&#34;https://github.com/ned14/outcome/tree/better_optimisation&#34; target=&#34;_blank&#34;&gt;better_optimisation&lt;/a&gt;&lt;/code&gt;で使用できる。このブランチは、Outcome v2.1に対する主要で大きな変更がいくつかある。詳細は&lt;a href=&#34;https://ned14.github.io/outcome/&#34; target=&#34;_blank&#34;&gt;先頭ページ&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;void&lt;/code&gt;のresultとoutcomeからの&lt;code&gt;explicit&lt;/code&gt;構築でデフォルト構築が行われなくなった。以前はエラーのない&lt;code&gt;result&amp;lt;void&amp;gt;&lt;/code&gt;から&lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt;に明示的に構築した場合、&lt;code&gt;T&lt;/code&gt;がデフォルト構築されていた。これは役に立たない驚きを与えてしまっていたため、無効にした&lt;/li&gt;
&lt;li&gt;新たなマクロ&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;。このマクロは、新しいバージョンのOutcomeを使用する際に、古い名前で新たな機能を使用する別名を有効にすることができる&lt;/li&gt;
&lt;li&gt;コンセプトをCamelCaseからsnake_caseにした。Outcomeが最初に実装されたとき、C++20はCamelCaseスタイルのコンセプトが入ると考えられていた。これはC++20のリリース前に変更され、Outcomeもそれに合わせて名前を変更した。互換用の別名が提供されるため、Outcome v2.1については既存コードを破壊しない。ただし、Outcome v2.2でコンパイルするコードについては、&lt;code&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/code&gt;を&lt;code&gt;210&lt;/code&gt;以下に設定しない限りはアップグレードが必要になる&lt;/li&gt;
&lt;li&gt;コンセプトを&lt;code&gt;OUTCOME_V2_NAMESPACE::concepts&lt;/code&gt;名前空間に置くようにした。以前までコンセプトは&lt;code&gt;convert&lt;/code&gt;名前空間にあったが、現在は専用の名前空間にある&lt;/li&gt;
&lt;li&gt;新たなコンセプト&lt;code&gt;basic_result&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;basic_outcome&amp;lt;T&amp;gt;&lt;/code&gt;を追加。エンドユーザーにとって&lt;code&gt;is_basic_result &amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;value_or_error &amp;lt;T&amp;gt;&lt;/code&gt;の間に役立たないギャップがあったため、&lt;code&gt;basic_result&lt;/code&gt;にマッチするコンセプトが求められていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRY&lt;/code&gt;操作は、Outcome v2.2以降では動作が異なる。&lt;code&gt;OUTCOME_TRY()&lt;/code&gt;を使用するコードが破壊的変更される大きな変更になる。コードをアップグレードする正規表現が、Outcome v2.1からv2.2への変更リストにある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/224&#34; target=&#34;_blank&#34;&gt;GitHub #224&lt;/a&gt; Xcode 11.4 (現在の最新) に含まれるclang Appleには&lt;code&gt;noexcept(std::is_constructible&amp;lt;T, void&amp;gt;)&lt;/code&gt;がコンパイルに失敗する問題を修正したパッチが適用されていない。このパッチは数年前に提出した。Appleがclangを修正するのを諦めて、Outcomeにワークアラウンドを追加した&lt;/li&gt;
&lt;li&gt;値をもたないポリシークラスから、予備ストレージ (spare storage) を使用できなかった。当時このコードを書いたときは頭がおかしくなっており、予備ストレージAPIには間違ったプロトタイプがあり、ポリシークラス内での作業を妨げていた。申し訳ない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt; 内部で&lt;code&gt;boost::type_erasure::any&lt;/code&gt;と&lt;code&gt;boost::any&lt;/code&gt;があいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の機能をC++20向けに修正 (Glen Fernandes氏)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event_comparison_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;voronoi_predicates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34; id=&#34;smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;owner_equals&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;に&lt;code&gt;owner_hash_value&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner_hash&lt;/code&gt;に&lt;code&gt;owner_equal_to&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;std::hash&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;に、&lt;code&gt;boost::hash&lt;/code&gt;サポートと、&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;std::equal_to&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator bool()&lt;/code&gt;が&lt;code&gt;value() != 0&lt;/code&gt;の代わりに&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下を実装 (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に派生型のサポートを追加&lt;/li&gt;
&lt;li&gt;多く (数百) の候補型を指定した場合のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&amp;lt;R&amp;gt;&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;__VA_OPT__&lt;/code&gt;を含む可変引数関係のC++20機能をを実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/102&#34; target=&#34;_blank&#34;&gt;GitHUb #102&lt;/a&gt; &lt;code&gt;__has_include&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; Boost自体で役立つ新たなサンプルとして&lt;code&gt;check_macro_naming&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; C++20での&lt;code&gt;std::allocator&lt;/code&gt;クラスのメンバが削除されたことにともない、コンパイル問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; Xpressiveのlexerと&lt;code&gt;token_statistics&lt;/code&gt;のサンプルを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; lexertl lexerを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/87&#34; target=&#34;_blank&#34;&gt;GitHUb #87&lt;/a&gt; 事前定義マクロに対してもフックが実行されるようにした&lt;/li&gt;
&lt;li&gt;いくつかの小さなバグを修正&lt;/li&gt;
&lt;li&gt;C++98/03のサポートを非推奨にした。バージョン1.77でで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プレースホルダーのコンパイルエラーを修正。一般的なケースで動作するようになり、とくに&lt;code&gt;yap::print()&lt;/code&gt;で使用できる&lt;/li&gt;
&lt;li&gt;YAPのすべてをconstexprにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yap::print()&lt;/code&gt;で、正しい値カテゴリの出力を修正&lt;/li&gt;
&lt;li&gt;ドキュメントを明確化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : アンカーを修正</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>a0996a2aca9db1a526b3339901c89337b82b22e1:document/version/1_74_0.md</id>
      <updated>2020-07-06T23:10:19+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.74.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_74_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_74_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34; id=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_OVERRIDE&lt;/code&gt;と&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;の代わりに個別のトレイトと関数に対する仕組みとして、アロケータアクセスのユーティリティを実装 (Glen Fernandes氏)。これらは、使用可能な場合はC++11のアロケータモデルをサポートし、C++98互換へのフォールバックを提供する。この機能は現在、以下のライブラリで使用している：&lt;ul&gt;
&lt;li&gt;Circular_Buffer&lt;/li&gt;
&lt;li&gt;Wave&lt;/li&gt;
&lt;li&gt;Lockfree&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;Smart_Ptr&lt;/li&gt;
&lt;li&gt;Dynamic_Bitset&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Bimap&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;でのスコープ付き列挙型を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;での&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;に配列のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34; id=&#34;heap&#34;&gt;Heap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skew_heap&lt;/code&gt;のtop nodeの破棄が正しく行われるよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きい&lt;code&gt;N&lt;/code&gt;での&lt;code&gt;mp_with_index&amp;lt;N&amp;gt;&lt;/code&gt;のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple_transform&lt;/code&gt;を追加 (Hans Dembinski氏によるコントリビュート)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; 読み書きのキー抽出器 (key extractors) に関するドキュメントを明確化&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリは、C++11準拠のコンパイラと標準ライブラリを要求するようになった&lt;/li&gt;
&lt;li&gt;LFS: 基礎システムがサポートする2GBを超えるファイルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::utf&lt;/code&gt;名前空間で、ジェネリックなUTF変換関数を使用可能にした&lt;/li&gt;
&lt;li&gt;UTF-8パスでの&lt;code&gt;stat&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt; 内部で&lt;code&gt;boost::type_erasure::any&lt;/code&gt;と&lt;code&gt;boost::any&lt;/code&gt;があいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の機能をC++20向けに修正 (Glen Fernandes氏)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event_comparison_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;voronoi_predicates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34; id=&#34;smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;owner_equals&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;に&lt;code&gt;owner_hash_value&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner_hash&lt;/code&gt;に&lt;code&gt;owner_equal_to&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;std::hash&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;に、&lt;code&gt;boost::hash&lt;/code&gt;サポートと、&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;std::equal_to&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator bool()&lt;/code&gt;が&lt;code&gt;value() != 0&lt;/code&gt;の代わりに&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下を実装 (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に派生型のサポートを追加&lt;/li&gt;
&lt;li&gt;多く (数百) の候補型を指定した場合のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&amp;lt;R&amp;gt;&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;__VA_OPT__&lt;/code&gt;を含む可変引数関係のC++20機能をを実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/102&#34; target=&#34;_blank&#34;&gt;GitHUb #102&lt;/a&gt; &lt;code&gt;__has_include&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; Boost自体で役立つ新たなサンプルとして&lt;code&gt;check_macro_naming&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; C++20での&lt;code&gt;std::allocator&lt;/code&gt;クラスのメンバが削除されたことにともない、コンパイル問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; Xpressiveのlexerと&lt;code&gt;token_statistics&lt;/code&gt;のサンプルを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; lexertl lexerを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/87&#34; target=&#34;_blank&#34;&gt;GitHUb #87&lt;/a&gt; 事前定義マクロに対してもフックが実行されるようにした&lt;/li&gt;
&lt;li&gt;いくつかの小さなバグを修正&lt;/li&gt;
&lt;li&gt;C++98/03のサポートを非推奨にした。バージョン1.77でで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プレースホルダーのコンパイルエラーを修正。一般的なケースで動作するようになり、とくに&lt;code&gt;yap::print()&lt;/code&gt;で使用できる&lt;/li&gt;
&lt;li&gt;YAPのすべてをconstexprにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yap::print()&lt;/code&gt;で、正しい値カテゴリの出力を修正&lt;/li&gt;
&lt;li&gt;ドキュメントを明確化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.74.0リリースノート -- 1.74.0リリースノート : YAPを追加 (close #483)</title>
      <link href="https://boostjp.github.io/document/version/1_74_0.html"/>
      <id>b7091b05d4109ead0374fe551486c8d027c92c87:document/version/1_74_0.md</id>
      <updated>2020-07-06T23:01:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.74.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_74_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_74_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_74_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34;&gt;Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34;&gt;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34;&gt;Wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34;&gt;YAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#bimap&#34; id=&#34;bimap&#34;&gt;Bimap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#config&#34; id=&#34;config&#34;&gt;Config&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOOST_NO_CXX11_OVERRIDE&lt;/code&gt;と&lt;code&gt;BOOST_OVERRIDE&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#core&#34; id=&#34;core&#34;&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;allocator_traits&lt;/code&gt;の代わりに個別のトレイトと関数に対する仕組みとして、アロケータアクセスのユーティリティを実装 (Glen Fernandes氏)。これらは、使用可能な場合はC++11のアロケータモデルをサポートし、C++98互換へのフォールバックを提供する。この機能は現在、以下のライブラリで使用している：&lt;ul&gt;
&lt;li&gt;Circular_Buffer&lt;/li&gt;
&lt;li&gt;Wave&lt;/li&gt;
&lt;li&gt;Lockfree&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;li&gt;Smart_Ptr&lt;/li&gt;
&lt;li&gt;Dynamic_Bitset&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Bimap&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;でのスコープ付き列挙型を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;での&lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;を有効にした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endian_reverse_inplace&lt;/code&gt;に配列のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#flyweight&#34; id=&#34;flyweight&#34;&gt;Flyweight&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#format&#34; id=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アロケータを正しく使用するよう修正 (C++20でのコンパイルを修正) (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#heap&#34; id=&#34;heap&#34;&gt;Heap&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skew_heap&lt;/code&gt;のtop nodeの破棄が正しく行われるよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;li&gt;アロケータを正しくかつシンプルに使用するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#mp11&#34; id=&#34;mp11&#34;&gt;Mp11&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大きい&lt;code&gt;N&lt;/code&gt;での&lt;code&gt;mp_with_index&amp;lt;N&amp;gt;&lt;/code&gt;のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple_transform&lt;/code&gt;を追加 (Hans Dembinski氏によるコントリビュート)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#multi-index&#34; id=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/multi_index/issues/32&#34; target=&#34;_blank&#34;&gt;GitHub #32&lt;/a&gt; 読み書きのキー抽出器 (key extractors) に関するドキュメントを明確化&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/nowide&#34; id=&#34;nowide&#34;&gt;Nowide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このライブラリは、C++11準拠のコンパイラと標準ライブラリを要求するようになった&lt;/li&gt;
&lt;li&gt;LFS: 基礎システムがサポートする2GBを超えるファイルのサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost::nowide::utf&lt;/code&gt;名前空間で、ジェネリックなUTF変換関数を使用可能にした&lt;/li&gt;
&lt;li&gt;UTF-8パスでの&lt;code&gt;stat&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/poly_collection/issues/17&#34; target=&#34;_blank&#34;&gt;GitHub #17&lt;/a&gt; 内部で&lt;code&gt;boost::type_erasure::any&lt;/code&gt;と&lt;code&gt;boost::any&lt;/code&gt;があいまいになってしまう問題を修正&lt;/li&gt;
&lt;li&gt;メンテナンス作業&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#polygon&#34; id=&#34;polygon&#34;&gt;Polygon&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下の機能をC++20向けに修正 (Glen Fernandes氏)：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event_comparison_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertex_equality_predicate_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;voronoi_predicates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/smart-ptr&#34; id=&#34;smart-ptr&#34;&gt;SmartPtr&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;owner_equals&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;weak_ptr&lt;/code&gt;に&lt;code&gt;owner_hash_value&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owner_hash&lt;/code&gt;に&lt;code&gt;owner_equal_to&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shared_ptr&lt;/code&gt;, &lt;code&gt;local_shared_ptr&lt;/code&gt;に&lt;code&gt;std::hash&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;に、&lt;code&gt;boost::hash&lt;/code&gt;サポートと、&lt;code&gt;std::hash&lt;/code&gt;と&lt;code&gt;std::equal_to&lt;/code&gt;の特殊化を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#system&#34; id=&#34;system&#34;&gt;System&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator bool()&lt;/code&gt;が&lt;code&gt;value() != 0&lt;/code&gt;の代わりに&lt;code&gt;failed()&lt;/code&gt;を返すようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#type-traits&#34; id=&#34;type-traits&#34;&gt;TypeTraits&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下を実装 (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disjunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;negation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_scoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_unscoped_enum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#variant2&#34; id=&#34;variant2&#34;&gt;Variant2&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visit&lt;/code&gt;に派生型のサポートを追加&lt;/li&gt;
&lt;li&gt;多く (数百) の候補型を指定した場合のコンパイルパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visit&amp;lt;R&amp;gt;&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#wave&#34; id=&#34;wave&#34;&gt;Wave&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/75&#34; target=&#34;_blank&#34;&gt;GitHub #75&lt;/a&gt; &lt;code&gt;__VA_OPT__&lt;/code&gt;を含む可変引数関係のC++20機能をを実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/102&#34; target=&#34;_blank&#34;&gt;GitHUb #102&lt;/a&gt; &lt;code&gt;__has_include&lt;/code&gt;を実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/97&#34; target=&#34;_blank&#34;&gt;GitHub #97&lt;/a&gt; Boost自体で役立つ新たなサンプルとして&lt;code&gt;check_macro_naming&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/72&#34; target=&#34;_blank&#34;&gt;GitHub #72&lt;/a&gt; C++20での&lt;code&gt;std::allocator&lt;/code&gt;クラスのメンバが削除されたことにともない、コンパイル問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/79&#34; target=&#34;_blank&#34;&gt;GitHub #79&lt;/a&gt; Xpressiveのlexerと&lt;code&gt;token_statistics&lt;/code&gt;のサンプルを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/78&#34; target=&#34;_blank&#34;&gt;GitHub #78&lt;/a&gt; lexertl lexerを修復&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/wave/pull/87&#34; target=&#34;_blank&#34;&gt;GitHUb #87&lt;/a&gt; 事前定義マクロに対してもフックが実行されるようにした&lt;/li&gt;
&lt;li&gt;いくつかの小さなバグを修正&lt;/li&gt;
&lt;li&gt;C++98/03のサポートを非推奨にした。バージョン1.77でで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_74_0.html#yap&#34; id=&#34;yap&#34;&gt;YAP&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プレースホルダーのコンパイルエラーを修正。一般的なケースで動作するようになり、とくに&lt;code&gt;yap::print()&lt;/code&gt;で使用できる&lt;/li&gt;
&lt;li&gt;YAPのすべてをconstexprにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yap::print()&lt;/code&gt;で、正しい値カテゴリの出力を修正&lt;/li&gt;
&lt;li&gt;ドキュメントを明確化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加で含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>