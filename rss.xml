<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2019-11-22T03:12:21.666095</updated>
  <id>15c8bf5b-fdd9-4824-acbf-55598f751f08</id>

  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Histogramを追加 (close #413)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>1e274d7aa4a181654a810f1622b81c7dce905ddf:document/version/1_72_0.md</id>
      <updated>2019-11-22T12:07:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#histogram&#34; id=&#34;histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新機能&lt;ul&gt;
&lt;li&gt;C++17コンパイラ向けに、axis型とhistogram型のよりよい推論ガイドを定義&lt;/li&gt;
&lt;li&gt;インデックスを使用したコードのパフォーマンスを改善&lt;/li&gt;
&lt;li&gt;値のチャンクからのfillを加速する&lt;code&gt;histogram::fill&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boost/histogram/ostream.hpp&lt;/code&gt;に、1Dヒストグラム向けにASCII棒グラフの出力を追加 (Przemyslaw Bartosik氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;不正なaxisオプションが渡された場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight()&lt;/code&gt;と&lt;code&gt;sample()&lt;/code&gt;の間違った使い方をした場合に、ユーザーフレンドリーなコンパイルエラーを出力するようにした&lt;/li&gt;
&lt;li&gt;全てのhistogramがデフォルト値をもつ場合に&lt;code&gt;true&lt;/code&gt;を返す、&lt;code&gt;algorithm::empty&lt;/code&gt;関数 (Henry Schreiner氏によるコントリビュート)&lt;/li&gt;
&lt;li&gt;shrink付き&lt;code&gt;algorithm::reduce&lt;/code&gt;は、値がbin edgeでない場合に、適格に定義されるようになった&lt;/li&gt;
&lt;li&gt;axisが受け入れる値の数を返す&lt;code&gt;axis::traits::rank&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが連続か離散かを判定する&lt;code&gt;axis::traits::is_continuous&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;axisが、入力可能なbinをもっているかを判定する&lt;code&gt;axis::traits::is_inclusive&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;mean accumulator向けに、限定的にweightをサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accumulators::weighted_mean::sum_of_weights_squared&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正&lt;ul&gt;
&lt;li&gt;clangでの&lt;code&gt;-std=c++2a&lt;/code&gt;と&lt;code&gt;-stdlib=libc++&lt;/code&gt;のサポートを追加。gcc-9の互換性を修正&lt;/li&gt;
&lt;li&gt;エラーをトリガーにすることなく、fill中にsampleの代わりにweightを渡せるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;algorithm::project&lt;/code&gt;に大量のインデックスを渡したときのセグメンテーションフォルトを修正&lt;/li&gt;
&lt;li&gt;indexed range generatorが、&lt;code&gt;std::array&lt;/code&gt;ベースのストレージで動作していなかった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weighted_mean() + weighted_mean() != weighted_mean()&lt;/code&gt;だった問題を修正 (Henry Schreiner氏による問題発見と報告)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::option::test(...)&lt;/code&gt;が、テストマスクのいずれかのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返すよう修正 (これまでは、テストマスクの全てのビットが立っている場合に&lt;code&gt;true&lt;/code&gt;を返していた)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;と&lt;code&gt;max&lt;/code&gt;の呼び出しをマクロ展開から保護&lt;/li&gt;
&lt;li&gt;concepts.qbkの全てのcrlfをlfに置き換え&lt;/li&gt;
&lt;li&gt;histogramに、ユーザーによって大量のaxisが渡された場合の、不足していた&lt;code&gt;std::invalid_argument&lt;/code&gt;の例外送出を入れた&lt;/li&gt;
&lt;li&gt;コンセプトセクションでの、シリアライズサポートに関するドキュメントを正した&lt;/li&gt;
&lt;li&gt;いくつかのコンパイラバージョンの警告を解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他&lt;ul&gt;
&lt;li&gt;Boost.Histogramのロゴを追加&lt;/li&gt;
&lt;li&gt;不足していたcopyright注記を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axis::category::value&lt;/code&gt;が、スカラ型に対してコピーを返し、その他が&lt;code&gt;const&lt;/code&gt;参照を返すようにした&lt;/li&gt;
&lt;li&gt;コードの膨張を防ぐために、例外のメッセージ生成に&lt;code&gt;std::ostringstream&lt;/code&gt;を使用するのをやめた&lt;/li&gt;
&lt;li&gt;ドキュメント改善&lt;ul&gt;
&lt;li&gt;overviewセクションを再構成&lt;/li&gt;
&lt;li&gt;新機能を紹介するuser guideを更新&lt;/li&gt;
&lt;li&gt;accumulatorの例を更新&lt;/li&gt;
&lt;li&gt;Conceptsで、accumulatorがオプショナルにweightを受け入れる方法を記載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベンチマークコードを更新&lt;/li&gt;
&lt;li&gt;b2とcmakeビルドシステムの一貫性をチェックするテストを追加&lt;/li&gt;
&lt;li&gt;ODR (One-Definition-Rule) をチェックするテストを追加 (非テンプレートな関数が&lt;code&gt;inline&lt;/code&gt;になっていなかったらテスト失敗)&lt;/li&gt;
&lt;li&gt;シリアライズのコードをBoost.Serializationから分離&lt;/li&gt;
&lt;li&gt;Boost.CallableTraitsへの依存を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Logを追加 (close #410)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>9b8b736ccdff6c1a9575b1eab5553fcfe9eb1249:document/version/1_72_0.md</id>
      <updated>2019-11-22T11:15:48+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#log&#34; id=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Filesystemを追加 (close #409)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>f6cef2d68e474e03ba0d8ff6d1f6a78a693ec2b8:document/version/1_72_0.md</id>
      <updated>2019-11-18T13:29:04+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#filesystem&#34; id=&#34;filesystem&#34;&gt;Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダファイルを整理&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;を&lt;code&gt;exception.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_status&lt;/code&gt;と関連する列挙型と関数を&lt;code&gt;file_status.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directory_entry&lt;/code&gt;、&lt;code&gt;directory_iterator&lt;/code&gt;、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;を&lt;code&gt;directory.hpp&lt;/code&gt;に抽出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; 後方互換性のために&lt;code&gt;operations.hpp&lt;/code&gt;では、新たなヘッダ&lt;code&gt;exception.hpp&lt;/code&gt;、&lt;code&gt;file_status.hpp&lt;/code&gt;、&lt;code&gt;directory.hpp&lt;/code&gt;を、&lt;code&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/code&gt;がdefineされない限りインクルードする。これらの暗黙的なインクルードは非推奨とし、将来のリリースから削除される。ユーザーは、新たなヘッダを直接インクルードするか、&lt;code&gt;filesystem.hpp&lt;/code&gt;をインクルードすることを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filesystem_error&lt;/code&gt;例外が、コンパイル済みBoost.Filesystemライブラリに実装されるようになった。ユーザーは、プロジェクトにBoost.Filesystemライブラリをリンクする必要がある場合がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/pull/115&#34; target=&#34;_blank&#34;&gt;GitHub #115&lt;/a&gt; POSIX.1-2008プラットフォームでは、&lt;code&gt;utime&lt;/code&gt;の代わりに&lt;code&gt;utimensat&lt;/code&gt;を使用するようにした。&lt;code&gt;utime&lt;/code&gt;はPOSIX.1-2008で廃止されており、たとえばuClibc-ngでは無効にできる&lt;/li&gt;
&lt;li&gt;終端状態の&lt;code&gt;directory_iterator&lt;/code&gt;でメモリ確保エラーが起こらないようにした&lt;/li&gt;
&lt;li&gt;Windows環境で、Boost.WinAPIを使用してWindowsバージョンを選択できるようにした&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options&lt;/code&gt;列挙型を追加した。これはC++20の名前付き列挙型を反映している。この列挙型を使用することで、&lt;code&gt;directory_iterator&lt;/code&gt;と&lt;code&gt;recursive_directory_iterator&lt;/code&gt;のイテレーション時の振る舞いをカスタマイズできる。とくに、権限が不十分で開くことのできないディレクトリのスキップをサポートするようになった。&lt;code&gt;symlink_option&lt;/code&gt;列挙型は非推奨となり、&lt;code&gt;directory_options&lt;/code&gt;で置き換えられる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/112&#34; target=&#34;_blank&#34;&gt;GitHub #112&lt;/a&gt; デフォルトで、&lt;code&gt;recursive_directory_iterator&lt;/code&gt;でエラーが起きたときに終端状態になるよう、C++20の仕様に合わせた&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::pop_on_error&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、成功するか終了状態になるまで&lt;code&gt;pop()&lt;/code&gt;を繰り返し呼び続けることにより、イテレーションエラーからの回復を試みる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新機能&lt;/strong&gt; &lt;code&gt;directory_options::skip_dangling_symlinks&lt;/code&gt;オプションを追加。このオプションは&lt;code&gt;recursive_directory_iterator&lt;/code&gt;に対して設定するもので、ぶらさがった (参照先がない) ディレクトリのシンボリックリンクを辿らずに、エラー報告する代わりにイテレーションを続行する&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;非推奨化&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt;の以下のメンバ関数を非推奨とする：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_pending()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push_request()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no_push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ユーザーは、標準の機能に対応する&lt;code&gt;depth()&lt;/code&gt;, &lt;code&gt;recursion_pending()&lt;/code&gt;, &lt;code&gt;disable_recursion_pending()&lt;/code&gt;を使用すること。&lt;code&gt;recursion_pending()&lt;/code&gt;は、&lt;code&gt;no_push_pending()&lt;/code&gt;と&lt;code&gt;no_push_request()&lt;/code&gt;と比較して反対の意味をもつことに注意。非推奨となったメンバ関数は、将来のリリースで削除する予定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/filesystem/issues/76&#34; target=&#34;_blank&#34;&gt;GitHub #76&lt;/a&gt; &lt;code&gt;path::lexically_relative&lt;/code&gt; (およびそれに依存するアルゴリズム) を修正し、空、ドット、ドットx2のパス要素を含むパスを正しくハンドリングできるようにした。この動作はC++17に近づき、空およびドットx1パス要素は無視され、ドットx2パス要素は生成される相対パスから減らすよう考慮される&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Atomicを追加 (close #408)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>435283c5b8e7fc80dd7f415c4860fbc028b19371:document/version/1_72_0.md</id>
      <updated>2019-11-18T12:48:52+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#atomic&#34; id=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libstdc++のいくつかのバージョンで&lt;code&gt;__float128&lt;/code&gt;が浮動小数点数型とみなされない問題へのワークアラウンドを追加&lt;/li&gt;
&lt;li&gt;clang-winコンパイラとの互換性を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.72.0リリースノート -- 1.72.0リリースノート : Beastを追加 (close #407)</title>
      <link href="https://boostjp.github.io/document/version/1_72_0.html"/>
      <id>6be5efdc1c6b0c7857a0bd18cc2d1816c43fcfe0:document/version/1_72_0.md</id>
      <updated>2019-11-18T12:44:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.72.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_72_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_72_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_72_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#newone&#34;&gt;NewOne&lt;/a&gt; # example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34;&gt;Beast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34;&gt;Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34;&gt;VMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#beast&#34; id=&#34;beast&#34;&gt;Beast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今回は、バグ修正と、Boost.Asioの新機能対応を含むメンテナンスアップデートである&lt;/li&gt;
&lt;li&gt;このライブラリを使用しているユーザーもしくはユーザー企業がどのようにこのライブラリを使用しているか教えてほしい。以下にリストがある：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast&#34; target=&#34;_blank&#34;&gt;Companies and Individuals Using Beast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正内容&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https_get&lt;/code&gt;のサンプルコードで、Host Headerを送信するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_read&lt;/code&gt;がタイムアウトしたときの&lt;code&gt;async_close&lt;/code&gt;のエラーコードを修正&lt;/li&gt;
&lt;li&gt;zlibのテストをリファクタし、enumのtypoを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#circular-buffer&#34; id=&#34;circular-buffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/circular_buffer/issues/29&#34; target=&#34;_blank&#34;&gt;GitHub #29&lt;/a&gt; &lt;code&gt;max_size()&lt;/code&gt;メンバ関数がアロケータの&lt;code&gt;max_size()&lt;/code&gt;を考慮するよう修正 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#context&#34; id=&#34;context&#34;&gt;Context&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;s390xアーキテクチャをサポート&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;破壊的変更&lt;/strong&gt;&lt;/span&gt; &lt;code&gt;execution_context&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#endian&#34; id=&#34;endian&#34;&gt;Endian&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endian_reverse&lt;/code&gt;、&lt;code&gt;conditional_reverse&lt;/code&gt;、および&lt;code&gt;\*\_to_*&lt;/code&gt;をGCCとClang向けに&lt;code&gt;constexpr&lt;/code&gt;にした&lt;/li&gt;
&lt;li&gt;便利な読み込み関数 (load) と書き込み関数 (store) を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[load|store]_[big|little]_[s|u][16|24|32|40|48|56|64]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;便利な浮動小数点数型の別名を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[big|little|native]_float[32|64]_[t|at]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;const&lt;/code&gt;な&lt;code&gt;data()&lt;/code&gt;メンバ関数を追加し、戻り値型を&lt;code&gt;unsigned char*&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;利用可能な場合に&lt;code&gt;endian_reverse&lt;/code&gt;に&lt;code&gt;__int128&lt;/code&gt;のサポートを追加&lt;/li&gt;
&lt;li&gt;便利なヘッダ&lt;code&gt;boost/endian.hpp&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#functional-factory&#34; id=&#34;functional-factory&#34;&gt;Functional/Factory&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;factory&lt;/code&gt;と&lt;code&gt;value_factory&lt;/code&gt;の実装を、以下の機能に対応するよう書き換えた (Glen Fernandes氏) ：&lt;ul&gt;
&lt;li&gt;右辺値引数のサポート (可能な場合)&lt;/li&gt;
&lt;li&gt;可変引数テンプレートを使用した任意数の引数サポート (可能な場合)&lt;/li&gt;
&lt;li&gt;finalなアロケータのサポート&lt;/li&gt;
&lt;li&gt;fancy pointer (ポインタのように振る舞う機能) を使用するアロケータのサポート&lt;/li&gt;
&lt;li&gt;例外が無効化された設定をサポート (&lt;code&gt;BOOST_NO_EXCEPTIONS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;コンパイル時間を改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下の機能を削除した：&lt;ul&gt;
&lt;li&gt;C++03向けの&lt;code&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/code&gt;による引数の数に対する制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/code&gt;による&lt;code&gt;void&lt;/code&gt;の代わりの&lt;code&gt;boost::none_t&lt;/code&gt;の使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#mpi&#34; id=&#34;mpi&#34;&gt;MPI&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;より明確にドキュメント化した&lt;/li&gt;
&lt;li&gt;明示的な入力バッファオフセットを使用した際の&lt;code&gt;scatterv&lt;/code&gt;のバグを修正&lt;/li&gt;
&lt;li&gt;Intel MPI &amp;gt;= 2019.4で、&lt;code&gt;MPI_Probe&lt;/code&gt;とその仲間の使用を有効にした&lt;/li&gt;
&lt;li&gt;Windowsでのシンボル可視性を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#outcome&#34; id=&#34;outcome&#34;&gt;Outcome&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強化&lt;ul&gt;
&lt;li&gt;スタンドアローン版のOutcomeが&lt;code&gt;make install&lt;/code&gt;ができるようになり、cmakeの&lt;code&gt;find_package()&lt;/code&gt;で見つけられるようになった。注意として、個別にインストールする必要があり、依存関係にある&lt;code&gt;quickcpplib&lt;/code&gt;をインストールしないと&lt;code&gt;find_package()&lt;/code&gt;が失敗する&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeでは依存ライブラリの管理にgit submoduleを使用していたが、代わりにcmake superbuildの依存関係メカニズムを使用するようにした。cmake configureをすることで、quickcpplibの内部コピーがgit cloneされ、(内部で&lt;code&gt;find_package()&lt;/code&gt;によって) ビルドディレクトリにインストールされる。これは、configureされていないOutcomeリポジトリにとって破壊的変更となり、以下のいずれかを実行する必要がある：&lt;ul&gt;
&lt;li&gt;cmake buildのためのサブディレクトリとしてOutcomeを追加する&lt;/li&gt;
&lt;li&gt;cmake superbuildを使用してビルドとインストールを行う&lt;/li&gt;
&lt;li&gt;シングルヘッダ版を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スタンドアローン版のOutcomeにおいて、C++ Conceptがコンパイラで使用可能かをチェックし、使用できるなら有効にするようにした。cmake変数&lt;code&gt;CXX_CONCEPTS_FLAGS&lt;/code&gt;を空文字列に設定することで、この自動検出と有効化を防止できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTCOME_TRY&lt;/code&gt;で、操作が成功する可能性が高いかをヒントとしてコンパイラに伝えられるようになった。「&lt;a href=&#34;https://wg21.link/P1886&#34; target=&#34;_blank&#34;&gt;P1886 &lt;em&gt;Error speed benchmarking&lt;/em&gt;&lt;/a&gt;」では、式が成功する可能性が高いかどうかをコンパイラに伝えることにより、非常に小さな関数にとってかなりの有益になることがわかった。&lt;code&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/code&gt;は操作が失敗する可能性が高いことをコンパイラに伝える。ヒントのない以前の動作に戻したい場合は、&lt;code&gt;OUTCOME_TRY_LIKELY(expr)&lt;/code&gt;の定義を&lt;code&gt;(!!expr)&lt;/code&gt;とすればよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/199&#34; target=&#34;_blank&#34;&gt;GitHub #199&lt;/a&gt; C++コルーチンのサポートを追加。これには2種類あり、まず&lt;code&gt;TRY&lt;/code&gt;操作を行う&lt;code&gt;OUTCOME_CO_TRY()&lt;/code&gt;がある。もうひとつは、&lt;code&gt;outcome/coroutine_support.hpp&lt;/code&gt;ヘッダに&lt;code&gt;eager&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;OutcomeType&amp;gt;&lt;/code&gt;の実装があり、C++コルーチン内から&lt;code&gt;basic_result&lt;/code&gt;と&lt;code&gt;basic_outcome&lt;/code&gt;をより自然で効率よく使える。具体的には、&lt;code&gt;result&lt;/code&gt;もしくは&lt;code&gt;outcome&lt;/code&gt;が例外ポインタから構築される場合、コルーチン内から送出された例外は、コルーチンマシンを介して例外を送出するのではなく、送出された例外を保持するオブジェクトをコルーチンreturnする。&lt;code&gt;earger&amp;lt;T&amp;gt;&lt;/code&gt;と&lt;code&gt;lazy&amp;lt;T&amp;gt;&lt;/code&gt;はどちらも&lt;code&gt;T&lt;/code&gt;を受けられる。どちらもVisual Studio 2019およびClang 9でテストし、動作することを確認している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/210&#34; target=&#34;_blank&#34;&gt;GitHub #210&lt;/a&gt; &lt;code&gt;make_error_code()&lt;/code&gt;と&lt;code&gt;make_exception_ptr()&lt;/code&gt;が、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;との互換性あるコピーとムーブの変換をさらに考慮するようになった。これにより、&lt;code&gt;basic_result&amp;lt;T, E&amp;gt;&lt;/code&gt;から&lt;code&gt;basic_result&amp;lt;T, error_code&amp;gt;&lt;/code&gt;を構築できるようになった。ここで&lt;code&gt;E&lt;/code&gt;は、ADLにより見つかった非メンバ関数&lt;code&gt;error_code make_error_code(E)&lt;/code&gt;を実装したカスタム型である。そうでない場合、&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;error_code&lt;/code&gt;とは関連性がないものとされる。同じ機能が&lt;code&gt;exception_ptr&lt;/code&gt;にもあり、こちらはADLにより&lt;code&gt;make_exception_ptr()&lt;/code&gt;関数が探索される。&lt;code&gt;basic_outcome&amp;lt;&amp;gt;&lt;/code&gt;はコンストラクタの数を維持するために、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;よりも小さなサポートとなり、&lt;code&gt;basic_result&amp;lt;&amp;gt;&lt;/code&gt;と&lt;code&gt;failure_type&amp;lt;&amp;gt;&lt;/code&gt;からの変換を受けられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ned14/outcome/issues/184&#34; target=&#34;_blank&#34;&gt;GitHub #184&lt;/a&gt; コンパイラの&lt;code&gt;[[nodiscard]]&lt;/code&gt;サポートの検出が壊れていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#poly-collection&#34; id=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;メンテナンス上の修正&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#preprocessor&#34; id=&#34;preprocessor&#34;&gt;Preprocessor&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;空 (emptiness) に関する議論をトピックとして追加&lt;/li&gt;
&lt;li&gt;C++20 &lt;code&gt;__VA_OPT__&lt;/code&gt;構築のサポートを追加&lt;ul&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;がサポートされているかを判定する&lt;code&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用して空かをテストする&lt;code&gt;BOOST_PP_CHECK_EMPTY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++20レベルの&lt;code&gt;__VA_OPT__&lt;/code&gt;より柔軟な代替機能である&lt;code&gt;BOOST_PP_VA_OPT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#smart-pointers&#34; id=&#34;smart-pointers&#34;&gt;Smart Pointers&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スカラ型と配列型に対応した&lt;code&gt;allocate_unique&lt;/code&gt;を実装 (Glen Fernandes氏)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_72_0.html#vmd&#34; id=&#34;vmd&#34;&gt;VMD&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20レベルの実装として100%の信頼がある場合に、&lt;code&gt;BOOST_VMD_IS_EMPTY&lt;/code&gt;に&lt;code&gt;__VA_OPT__&lt;/code&gt;を使用するよう更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;GCC, C++11:&lt;/li&gt;
&lt;li&gt;GCC, C++14:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;li&gt;Intel, C++11:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Apple Clang:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++11:&lt;/li&gt;
&lt;li&gt;Apple Clang, C++14:&lt;/li&gt;
&lt;li&gt;Clang:&lt;/li&gt;
&lt;li&gt;Clang, C++11:&lt;/li&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;li&gt;Intel:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC, mingw:&lt;/li&gt;
&lt;li&gt;Visual C++:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;GCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>