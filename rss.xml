<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="https://boostjp.github.io" />
  <updated>2017-12-15T02:21:37.626790</updated>
  <id>9a13f72a-a228-436c-955f-95dc941bc6c0</id>

  
    <entry>
      <title>Boost 1.66.0リリースノート -- 1.66.0リリースノート : Geometryを追加 (close #208)</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>792e4fc1e43e79f6f860cafcb28dbc0bcfe15588:document/version/1_66_0.md</id>
      <updated>2017-12-15T11:17:48+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Networking TSによるインタフェース変更を反映させた (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf&#34; target=&#34;_blank&#34;&gt;N4546&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Networking TSによって置き換えられた関数とクラスは非推奨となった&lt;/li&gt;
&lt;li&gt;サービステンプレートパラメータと対応するクラスは、デフォルトで無効となった。例として&lt;code&gt;basic_socket&amp;lt;Protocol, SocketService&amp;gt;&lt;/code&gt;の代わりにシンプルな&lt;code&gt;basic_socket&amp;lt;Protocol&amp;gt;&lt;/code&gt;がある。古いインタフェースを有効にする場合は、&lt;code&gt;BOOST_ASIO_ENABLE_OLD_SERVICES&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以前から非推奨だった関数を削除&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのカスタマイズをサポート&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのためにreactor関係のイベントを追加 (ディスクリプタの準備ができた、とか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;単位でロックを無効化するために使用する、特殊な「並行性のヒント (concurrency hint)」を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;の最初のコンストラクタ引数の完全転送を可能にした&lt;/li&gt;
&lt;li&gt;低レイヤーネイティブソケット (underlying native socket) の所有権を手放す機能を追加した (この機能を使用するには、Windows 8.1以降のI/O完了ポートバックエンドが必要)&lt;/li&gt;
&lt;li&gt;Networking TSによるインタフェース変更のリストは以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;を&lt;code&gt;io_context&lt;/code&gt;に変更。&lt;code&gt;io_service&lt;/code&gt;はtypedefとして残る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::dispatch()&lt;/code&gt;を非メンバ関数の&lt;code&gt;dispatch()&lt;/code&gt;に変更。任意のExecutor／Contextで実行できるようにするため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::post()&lt;/code&gt;を非メンバ関数の&lt;code&gt;post()&lt;/code&gt;に変更。任意のExecutor／Contextで実行できるようにするため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_is_continuation&lt;/code&gt;フック付きの&lt;code&gt;io_service::post()&lt;/code&gt;を非メンバ関数&lt;code&gt;defer()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::poll()&lt;/code&gt;を&lt;code&gt;io_context::poll()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::poll_one()&lt;/code&gt;を&lt;code&gt;io_context::poll_one()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::run()&lt;/code&gt;を&lt;code&gt;io_context::run()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::run_one()&lt;/code&gt;を&lt;code&gt;io_context::run_one()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;時間制限付き実行の機能として、&lt;code&gt;io_context::run_for()&lt;/code&gt;、&lt;code&gt;io_context::run_until()&lt;/code&gt;、&lt;code&gt;io_context::run_one_for()&lt;/code&gt;、&lt;code&gt;io_context::run_one_until()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::reset()&lt;/code&gt;を&lt;code&gt;io_context::restart()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;を&lt;code&gt;execution_context&lt;/code&gt;に変更。&lt;code&gt;io_service::service&lt;/code&gt;を&lt;code&gt;execution_context::service&lt;/code&gt;に変更。&lt;code&gt;io_service::id&lt;/code&gt;を&lt;code&gt;execution_context::id&lt;/code&gt;に変更。サービス関係の機能は&lt;code&gt;execution_context&lt;/code&gt;基本クラスに移動となった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_service()&lt;/code&gt;を&lt;code&gt;add_service()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::strand&lt;/code&gt;を&lt;code&gt;strand&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::work&lt;/code&gt;を&lt;code&gt;executor_work_guard&lt;/code&gt;と&lt;code&gt;make_work_guard()&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::wrap&lt;/code&gt;と&lt;code&gt;io_service::strand::wrap&lt;/code&gt;を&lt;code&gt;executor_binder&lt;/code&gt;と&lt;code&gt;bind_executor&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_invoke&lt;/code&gt;フックを&lt;code&gt;associated_executor&lt;/code&gt;と&lt;code&gt;get_associated_executor&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_allocate&lt;/code&gt;フックと&lt;code&gt;asio_handler_deallocate&lt;/code&gt;フックを、&lt;code&gt;associated_allocator&lt;/code&gt;と&lt;code&gt;get_associated_allocator&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_cast()&lt;/code&gt;を&lt;code&gt;const_buffer::data()&lt;/code&gt;と&lt;code&gt;mutable_buffer::data()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;単一バッファ用の&lt;code&gt;buffer_size()&lt;/code&gt;を&lt;code&gt;const_buffer::size()&lt;/code&gt;と&lt;code&gt;mutable_buffer::size()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_buffers_1&lt;/code&gt;を&lt;code&gt;const_buffer&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutable_buffers_1&lt;/code&gt;を&lt;code&gt;mutable_buffer&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object::get_io_service()&lt;/code&gt;を&lt;code&gt;basic_socket::get_executor()&lt;/code&gt;に変更。タイマーやシリアルポート関係の同様のメンバ関数も同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_base::max_connections()&lt;/code&gt;を&lt;code&gt;socket_base::max_listen_connections()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket::wait()&lt;/code&gt;、&lt;code&gt;basic_socket::async_wait()&lt;/code&gt;、&lt;code&gt;basic_socket_acceptor::wait()&lt;/code&gt;、&lt;code&gt;basic_socket_acceptor::async_wait()&lt;/code&gt;を&lt;code&gt;socket_base::wait_type&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor::accept()&lt;/code&gt;がソケットの参照をパラメータでとっていたが、ソケットを戻り値で返すよう変更。これはC++11以降でムーブサポートされている場合のみ使用できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor::async_accept()&lt;/code&gt;がソケットの参照をパラメータでとっていたが、ハンドラに渡されるよう変更。これはC++11以降でムーブサポートされている場合のみ使用できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;と&lt;code&gt;async_connect()&lt;/code&gt;がイテレータをひとつだけとっていたが、イテレータ範囲をとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::duration_type&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::duration&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::time_type&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::time_point&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::expires_at()&lt;/code&gt;と&lt;code&gt;basic_socket_streambuf::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_socket_streambuf::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_socket_streambuf::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::puberror&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::error&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::duration_type&lt;/code&gt;を&lt;code&gt;basic_socket_iostream::duration&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::time_type&lt;/code&gt;を&lt;code&gt;basic_socket_iostream::time_point&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::expires_at()&lt;/code&gt;と&lt;code&gt;basic_socket_iostream::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_socket_iostream::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_socket_iostream::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;basic_waitable_timer::cancel()&lt;/code&gt;を&lt;code&gt;basic_waitable_timer::cancel()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;basic_waitable_timer::expires_at()&lt;/code&gt;のセッターを&lt;code&gt;basic_waitable_timer::expires_at()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer::expires_at&lt;/code&gt;と&lt;code&gt;basic_waitable_timer::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_waitable_timer::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_waitable_timer::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address::from_string()&lt;/code&gt;を&lt;code&gt;ip::make_address()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4::from_string()&lt;/code&gt;と&lt;code&gt;ip::address_v6::to_v4()&lt;/code&gt;を&lt;code&gt;ip::make_address_v4()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6::from_string()&lt;/code&gt;と&lt;code&gt;ip::address_v6::v4_mapped()&lt;/code&gt;を&lt;code&gt;ip::make_address_v6()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address::to_string()&lt;/code&gt;を&lt;code&gt;ip::address::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address_v4::to_string()&lt;/code&gt;を&lt;code&gt;ip::address_v4::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address_v6::to_string()&lt;/code&gt;を&lt;code&gt;ip::address_v6::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6::v4_compatible()&lt;/code&gt;を&lt;code&gt;ip::address_v6::is_v4_compatible()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4::broadcast&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_a&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_b&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_c&lt;/code&gt;、&lt;code&gt;ip::address_v4::netmask&lt;/code&gt;を、&lt;code&gt;ip::network_v4&lt;/code&gt;に変更。このクラスはCIDR notationを使用してIPv4ネットワークの計算を行う機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::network_v6&lt;/code&gt;を追加。このクラスはCIDR notationを使用してIPv6ネットワークの計算を行う機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4_iterator&lt;/code&gt;と&lt;code&gt;ip::address_v4_range&lt;/code&gt;を追加。これらはIPv4アドレスのサブセットをイテレートする機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6_iterator&lt;/code&gt;と&lt;code&gt;ip::address_v6_range&lt;/code&gt;を追加。これらはIPv6アドレスのサブセットをイテレートする機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::iterator&lt;/code&gt;を&lt;code&gt;ip::basic_resolver::results_type&lt;/code&gt;に変更。単一イテレータではなく範囲を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::query&lt;/code&gt;を引数にとる&lt;code&gt;ip::basic_resolver::resolve()&lt;/code&gt;を、ホスト名とサービスを引数にとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::resolve()&lt;/code&gt;が単一イテレータではなく範囲を返すよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::query&lt;/code&gt;を引数にとる&lt;code&gt;ip::basic_resolver::async_resolve()&lt;/code&gt;を、ホスト名とサービスを引数にとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::async_resolve()&lt;/code&gt;の完了がンドラに単一イテレータではなく範囲が渡されるよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数型の拡張アトミック命令を実験的に実装&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch_negate&lt;/code&gt;と&lt;code&gt;fetch_complement&lt;/code&gt;はアトミックに符号反転（2の補数）、もしくは1の補数（ビット反転）へ置換え、もとの値を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opaque_&amp;lt;op&amp;gt;&lt;/code&gt;は対応する&lt;code&gt;fetch_&amp;lt;op&amp;gt;&lt;/code&gt;に等しいが、値を返さない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;op&amp;gt;_and_test&lt;/code&gt;は&lt;code&gt;&amp;lt;op&amp;gt;&lt;/code&gt;をアトミックに行い、結果が&lt;code&gt;0&lt;/code&gt;であるならば&lt;code&gt;true&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bit_test_and_set&lt;/code&gt;、&lt;code&gt;bit_test_and_reset&lt;/code&gt;および&lt;code&gt;bit_test_and_complement&lt;/code&gt;はアトミックに指定したビットを&lt;code&gt;1&lt;/code&gt;にする（&lt;code&gt;set&lt;/code&gt;）、&lt;code&gt;0&lt;/code&gt;にする（&lt;code&gt;reset&lt;/code&gt;）もしくはビット反転（&lt;code&gt;complement&lt;/code&gt;）し、そのビットのもとの値を返す&lt;ul&gt;
&lt;li&gt;訳者註: 原文ではそのビットのもとの値を返すとなっているが、戻り値の型は&lt;code&gt;bool&lt;/code&gt;型であることに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf&#34; target=&#34;_blank&#34;&gt;P0558R1&lt;/a&gt;で提案、C++17に採択されたポインターを介した整数演算の削除に追従。それらはもう提供されなくなった&lt;/li&gt;
&lt;li&gt;C++17で追加された&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::difference_type&lt;/code&gt;にも追従し、ユーザコードで使用可能となった&lt;/li&gt;
&lt;li&gt;GCC 7へのサポートを改善し、x86-64環境下での128bit演算にはコンパイラ提供の&lt;code&gt;libatomic&lt;/code&gt;へのリンクは不要となった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows SDKの抽象レイヤーとしてBoost.WinAPIを使用するようにした&lt;/li&gt;
&lt;li&gt;日付から大きな年を加算・減算した際に、整数オーバーフローによって不正な結果になっていた問題を修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations&#34; target=&#34;_blank&#34;&gt;Boost.DateTime issue with adding long year durations - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CUDAストリームと同期できるようになった&lt;/li&gt;
&lt;li&gt;ROCm/HIPストリームと同期できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34; name=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;新たな変換指定子を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;a&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;fixed | scientific&lt;/code&gt;フラグを設定する (&lt;code&gt;hexfloat&lt;/code&gt;相当)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/43&#34; target=&#34;_blank&#34;&gt;&#39;b&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;boolalpha&lt;/code&gt;フラグを設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;A&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;a&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;F&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;f&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ISO 99の新たな引数型 &lt;code&gt;j&lt;/code&gt; (&lt;code&gt;intmax_t&lt;/code&gt;) と &lt;code&gt;z&lt;/code&gt; (&lt;code&gt;size_t&lt;/code&gt;) を追加。これは値の解析をし、型としては単に無視する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/44&#34; target=&#34;_blank&#34;&gt;GitHub #44&lt;/a&gt; Microsoftの新たな引数型プレフィックス &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;ptrdiff_t&lt;/code&gt;)、 &lt;code&gt;I32&lt;/code&gt; (&lt;code&gt;__int32&lt;/code&gt;)、 &lt;code&gt;I64&lt;/code&gt; (&lt;code&gt;__int64&lt;/code&gt;)、 &lt;code&gt;w&lt;/code&gt; (&lt;code&gt;wchar_t&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;format_matrix&lt;/code&gt;という新たな開発ツールを追加した。これはできるだけ多くの可能なフォーマットを組み合わせて、ファイルに記録する：&lt;ul&gt;
&lt;li&gt;Boostリリース時の回帰テストに役立つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snprintf&lt;/code&gt;との比較ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/36&#34; target=&#34;_blank&#34;&gt;GitHub #36&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;引数に対して安全に&lt;code&gt;operator%&lt;/code&gt;を使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/4636&#34; target=&#34;_blank&#34;&gt;Trac #4636&lt;/a&gt; MSVC環境で値の丸め処理が&lt;code&gt;/RTCc&lt;/code&gt;オプション (ランタイムエラーチェック) によって失敗していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/7477&#34; target=&#34;_blank&#34;&gt;Trac #7477&lt;/a&gt; MSVCの&lt;code&gt;/Za&lt;/code&gt;オプション (Microsoftの言語拡張を使用しない) との互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10324&#34; target=&#34;_blank&#34;&gt;Trac #10324&lt;/a&gt; 不正な&lt;code&gt;const_cast&lt;/code&gt;による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11632&#34; target=&#34;_blank&#34;&gt;Trac #11632&lt;/a&gt; 静的解析して問題があった&lt;code&gt;alt_sstream.hpp&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/149&#34; target=&#34;_blank&#34;&gt;PR#149&lt;/a&gt; &lt;code&gt;isspace(c)&lt;/code&gt; はVxWorksのDinkum clibではマクロとして実装されていないこと対応。Brian Kuhl(@kuhlenough)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/150&#34; target=&#34;_blank&#34;&gt;PR#150&lt;/a&gt; 循環したプリプロセッサのインクルードを修正。Gregor Jasny(@gjasny)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/151&#34; target=&#34;_blank&#34;&gt;PR#151&lt;/a&gt; &lt;code&gt;fusion::tuple&lt;/code&gt;の基底クラスが変更された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/153&#34; target=&#34;_blank&#34;&gt;PR#153&lt;/a&gt; &lt;code&gt;std::array&lt;/code&gt;でコンパイルエラーになることがあるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/154&#34; target=&#34;_blank&#34;&gt;PR#154&lt;/a&gt; C++03において、ネストしたコンテナのコピーでバグがあったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#geometry&#34; name=&#34;geometry&#34;&gt;Geometry&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;改善&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PointLike/AnyGeometry間のgeometric戦略での&lt;code&gt;distance&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非常に複雑な状況で&lt;code&gt;union&lt;/code&gt;/&lt;code&gt;intersection&lt;/code&gt;/&lt;code&gt;difference&lt;/code&gt;が誤った結果になる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt;/&lt;code&gt;intersection&lt;/code&gt;/&lt;code&gt;difference&lt;/code&gt;/&lt;code&gt;buffer&lt;/code&gt;の妥当性 (validity) を修正&lt;/li&gt;
&lt;li&gt;非デカルト座標系での集合・関係演算を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_collector::scan_for_files()&lt;/code&gt;のバグを修正。ユーザーアプリケーションの再起動後、ターゲットディレクトリ内のログファイル名が不正になることがあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt;と&lt;code&gt;prior()&lt;/code&gt;関数は、ネストした型（例えば&lt;code&gt;iterator_category&lt;/code&gt;や&lt;code&gt;difference_type&lt;/code&gt;といったような型特性に関わる型）を定義していないようなユーザイテレータをサポートするようになった。代わりにそれらの型を扱うには&lt;code&gt;std::iterator_traits&lt;/code&gt;を特殊化すること。これが正しく動作するためにはC++17準拠の&lt;code&gt;std::iterator_traits&lt;/code&gt;をサポートした環境が必要である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ガウス求積法 (Gauss quadrature) とガウス＝クロンロッド求積法 (Gauss-Kronrod quadrature) のルーチンを追加&lt;/li&gt;
&lt;li&gt;二重指数関数型数値積分 (double-exponential quadrature) のルーチンを追加 (tanh-sinh, exp-sinh, sinh-sinh)&lt;/li&gt;
&lt;li&gt;チェビシェフ多項式 (Chebyshev polynomial) の評価 (evaluation)、平方根 (roots)、積分 (integration)、微分 (differentiation)、内挿 (interpolation, 補間) のルーチンを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt;と&lt;code&gt;modify_key()&lt;/code&gt;をより頑強にし、Modifierで例外が送出された場合や、Rollback関数で復旧がされなかった場合に、変更要素を消去するようにした (完全な議論は &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12542&#34; target=&#34;_blank&#34;&gt;Trac #12542&lt;/a&gt; を参照)。これは技術的には後方互換性がなく、以下のコードにおいて：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Boostの以前のバージョンでは&lt;code&gt;c&lt;/code&gt;は維持されたが、現在は&lt;code&gt;c.begin()&lt;/code&gt;の要素は消去される。この問題を提起したJon Kalb氏に感謝する
- メンテナンス上の修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンパイラでは、Tがスカラー型の場合 optional&amp;lt;T&amp;gt; がトリビアルコピー可能となった。これは、これまでとは異なるストレージ(aligned_storage ではなく、単なる T)を用いることで実現している。 我々はコンパイラが default宣言 された関数をサポートすることを必須としている&lt;/li&gt;
&lt;li&gt;GCC が &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; の警告を誤って出すのを防止するため、 &lt;code&gt;operator==&lt;/code&gt; の実装を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34; name=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9、Clang 3.3から3.6といった古いバージョンのコンパイラで動作するようバックポートした。GCC 4.8のlibstdc++-v3では、一部の機能が欠如しているために、以下の制限がある (Clangでlibstdc++を使用する場合も同様)。&lt;ul&gt;
&lt;li&gt;状態を持つアロケータがない&lt;/li&gt;
&lt;li&gt;アロケータのムーブ構築がコピー構築にdecayされる&lt;/li&gt;
&lt;li&gt;要素のコピー中に例外が送出されると、コピー構築がクラッシュする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows Universal Platformの検出を改善した (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;cloudlibcを使用したCloudABIの検出を追加 (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;その他バグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;de-fuzzingによって発見されたセキュリティ問題に対する小さな修正をした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34; name=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常識から外れたMinGW-w64環境で動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libbacktrace&lt;/code&gt;がインストールされたMinGW環境 (&lt;code&gt;-w64&lt;/code&gt;なし) で動作するようにした。さらなる情報は、MinGWの「MinGW specific notes」セクションを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12323&#34; target=&#34;_blank&#34;&gt;Trac #12323&lt;/a&gt; Windows環境で関数ポインタ&lt;code&gt;_pRawDllMainOrig&lt;/code&gt;のシグニチャが間違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12730&#34; target=&#34;_blank&#34;&gt;Trac #12730&lt;/a&gt; MSVC 2017でTLS cleanup hooks関係のシグニチャが変わった問題に対処&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12976&#34; target=&#34;_blank&#34;&gt;Trac #12976&lt;/a&gt; Boost Thread Executorsのドキュメント間違いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12949&#34; target=&#34;_blank&#34;&gt;Trac #12949&lt;/a&gt; &lt;code&gt;BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC&lt;/code&gt;を定義してもスリープ操作がモノトニックにならなかった問題について、インクルード不足でも誤って動作してしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13019&#34; target=&#34;_blank&#34;&gt;Trac #13019&lt;/a&gt; &lt;code&gt;BOOST_THREAD_PROVIDES_INTERRUPTIONS&lt;/code&gt;定義時のABI互換が不完全だった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13069&#34; target=&#34;_blank&#34;&gt;Trac #13069&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/136&#34; target=&#34;_blank&#34;&gt;GitHub #136&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; MSVC 2015環境でスレッドプールのテストがハング・デッドロックしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13163&#34; target=&#34;_blank&#34;&gt;Trac #13163&lt;/a&gt; 可変引数テンプレートをもたない環境で&lt;code&gt;boost::detail::heap_new()&lt;/code&gt;が引数4個までしかサポートされていなかったため、9個まで使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13226&#34; target=&#34;_blank&#34;&gt;Trac #13226&lt;/a&gt; POSIX環境で&lt;code&gt;getpagesize()&lt;/code&gt;が非推奨になったため、ワークアラウンドを入れた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; Windows環境でSpuriousなテイミングテストが失敗していたため、タイムアウトの閾値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; MSVC 12.0でコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;BOOST_THREAD_ATTRIBUTE_MAY_ALIAS&lt;/code&gt;定義時にClangでコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たな実験的機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; &lt;code&gt;promise&lt;/code&gt;クラスに、遅延書き込みの関数を追加。&lt;code&gt;set_value_deferred()&lt;/code&gt;、&lt;code&gt;set_exception_deferred()&lt;/code&gt;、&lt;code&gt;notify_deferred()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/next_prior.hpp&lt;/code&gt;をBoost.Iteratorモジュールに移動。ユーザーコードは変更の必要なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;name_generator&lt;/code&gt;をリファクタし、hash provider conceptによるハッシュアルゴリズムの設定変更をできるようにした。オプション機能としてRFC-4122のMD5ハッシュ実装を追加した。この変更によって、将来の標準ハッシュアルゴリズムがサポートしやすくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc4122#appendix-C&#34; target=&#34;_blank&#34;&gt;RFC 4122, Appendix C&lt;/a&gt;の名前空間として&lt;code&gt;boost::uuids::ns&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/8630&#34; target=&#34;_blank&#34;&gt;Trac #8630&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/11482&#34; target=&#34;_blank&#34;&gt;Trac #11482&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12253&#34; target=&#34;_blank&#34;&gt;Trac #12253&lt;/a&gt; &lt;code&gt;string_generator&lt;/code&gt;が不正なuuidを受け付けてしまっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10665&#34; target=&#34;_blank&#34;&gt;Trac #10665&lt;/a&gt; &lt;code&gt;name_generator::operator()&lt;/code&gt;をドキュメントに合わせて&lt;code&gt;const&lt;/code&gt;メンバ関数にした&lt;/li&gt;
&lt;li&gt;実証詳細のヘッダファイルをdetailディレクトリに移動した。ユーザーコードの変更は必要ないが、移動前の古いファイルをインクルードしたときに警告は出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/6971&#34; target=&#34;_blank&#34;&gt;Trac #6971&lt;/a&gt; &lt;code&gt;apply_visitor()&lt;/code&gt;の&lt;code&gt;visitables&lt;/code&gt;パラメータ (&lt;code&gt;variant&lt;/code&gt;オブジェクト) を完全転送するよう修正。この機能を実装してくれたLevon Tarakchyan氏に多大なる感謝を&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.4.0, 7.1.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.2.0&lt;/li&gt;
&lt;li&gt;Intel: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4&lt;/li&gt;
&lt;li&gt;GCC, C++14: 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, C++0x: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, C++11: 4.7.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.2.0&lt;/li&gt;
&lt;li&gt;Intel: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4&lt;/li&gt;
&lt;li&gt;GCC, C++14: 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, C++0x: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, C++11: 4.7.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>posix_time::ptime Documentation -- fix: Broken Conversion to string Table layout</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html"/>
      <id>638266c411559f3eaeab34f5ac8a59959ab11912:archive/boost_docs/libs/date_time/class_ptime.md</id>
      <updated>2017-12-14T23:09:27+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;posix_time::ptime Documentation&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ptime Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-clock&#34;&gt;Construct from Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::posix_time::ptime&lt;/code&gt; クラスは時間位置(time point)を操作するための主要なインタフェースである。 一般に，&lt;code&gt;ptime&lt;/code&gt; クラスは代入可能ではあるが，一度構築されると不変である事が多い。&lt;/p&gt;
&lt;p&gt;クラス &lt;code&gt;ptime&lt;/code&gt; は，時間位置(time point)の日付部分へのインタフェースである &lt;code&gt;gregorian::date&lt;/code&gt; に依存する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptime&lt;/code&gt; を生成する別の手法が，&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/time_iterators.html&#34;&gt;time iterators&lt;/a&gt; にある。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/posix_time/posix_time_types.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime(date,time_duration)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付とオフセットから構築&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t1(date(2002,Jan,10), time_duration(1,2,3));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(date(2002,Jan,10), hours(1)+nanosec(5));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t3(t1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-string&#34; name=&#34;construct-from-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime time_from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;区切られた文字列から構築&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ts(&#34;2002-01-20 23:59:59.000&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(time_from_string(ts));&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#construct-from-clock&#34; name=&#34;construct-from-clock&#34;&gt;Construction From Clock&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static ptime second_clock::local_time();&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算機の時間帯設定に基づいた地域時間(秒レベル分解能)で初期化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t(second_clock::local_time());&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static ptime second_clock::universal_time()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 時間で初期化&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptime t(second_clock::universal_day());&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date date() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間の日付部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d, hour(1));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;t.date() --&amp;gt; 2002-Jan-10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration time_of_day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;その日の時間オフセットを取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d, hour(1));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;t.time_of_day() --&amp;gt; 01:00:00;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-mmm-DD HH:MM:SS.fffffffff 形式の文字列(mmm は月名の3文字短縮名)に変換。 秒の小数部(.fffffffff)は0でないとき含まれる。&lt;/td&gt;
&lt;td&gt;2002-Jan-01 10:00:01.123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYYMMDDTHHMMSS,fffffffff 形式(T は日付と時間の区切り) に変換&lt;/td&gt;
&lt;td&gt;20020131T100001,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_extended_string(ptime)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-MM-DDTHH:MM:SS,fffffffff 形式(T は日付と時間の区切り) に変換&lt;/td&gt;
&lt;td&gt;2002-01-31T10:00:01,123456789&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_ptime.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;&lt;/code&gt; &lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t1 == t2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数(&lt;code&gt;date_duration&lt;/code&gt;)を加えた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t + dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数(&lt;code&gt;date_duration&lt;/code&gt;)を差し引いた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t - dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator+(time_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(&lt;code&gt;time_duration&lt;/code&gt;)を加えた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t + hours(1) + minutes(2);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptime operator-(time_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間長(&lt;code&gt;time_duration&lt;/code&gt;)を差し引いた &lt;code&gt;ptime&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2 = t - minutes(2);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time_duration operator-(ptime) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つの時間の差を取る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t1(d,minutes(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;ptime t2(d,seconds(5));&lt;/code&gt;&lt;br /&gt; &lt;code&gt;time_duration t3 = t2 - t1;//negative result&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;mailto:jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>沖 観行</name>
        <email>oki.miyuki@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date -- Merge pull request #207 from oki-miyuki/master</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html"/>
      <id>841eeb91c724d970f58069573ad6f98f71aa84ba:archive/boost_docs/libs/date_time/class_date.md</id>
      <updated>2017-12-14T13:54:02+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;gregorian::date&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34;&gt;Construct from Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::date&lt;/code&gt; クラスはライブラリユーザーにとって主要なインタフェースである。 一般に、日付クラスは代入可能ではあるが、一度構築されると不変である事が多い。&lt;/p&gt;
&lt;p&gt;日付の生成について別の方法が&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;date iterators&lt;/a&gt;と&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;date algorithms or generators&lt;/a&gt;に含まれている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(greg_year year, greg_month month, greg_day day)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付の要素から構築する。year, month, day の範囲が不正な場合、それぞれ &lt;code&gt;std::out_of_range&lt;/code&gt; から派生した &lt;code&gt;bad_year&lt;/code&gt;, &lt;code&gt;bad_day_of_month&lt;/code&gt;, &lt;code&gt;bad_day_month&lt;/code&gt; 例外を投げる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(d)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(special_values sv)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;無限大、無効値(not-a-date-time)、最大値、最小値を構築するコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(neg_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(pos_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d3(not_a_date_time);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d4(max_date);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d5(min_date);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34; name=&#34;construct-from-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順に区切られた文字列から　例:2002-1-25&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;2002/1/25&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_undelimited_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順のISO形式から　例:20020125&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;20020125&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34; name=&#34;construct-from-clock&#34;&gt;Construction From Clock&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::local_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算機に設定された時間帯に準じた地域時間を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::local_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::universal_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 標準時を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::universal_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_year year() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.year() --&amp;gt; 2002;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_month month() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.month() --&amp;gt; 1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_ymd year_month_day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_ymd&lt;/code&gt; 構造体を返す&lt;br /&gt; 日付の3つの要素全てが必要なときに便利である&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date::ymd_type ymd = d.year_month_day(); ymd.year --&amp;gt; 2002, ymd.month --&amp;gt; 1, ymd.day --&amp;gt; 10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;曜日を返す(例: &lt;code&gt;Sunday&lt;/code&gt;, &lt;code&gt;Monday&lt;/code&gt;, etc.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; Thursday;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正または負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(pos_infin); d.is_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_neg_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_neg_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_pos_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_pos_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_not_a_date() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が無効値(not a date)の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(not_a_date_time); d.is_not_a_date() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-mmm-DD (mmm は月名の3文字短縮形)形式に変換&lt;/td&gt;
&lt;td&gt;2002-Jan-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYYMMDD 形式に変換&lt;/td&gt;
&lt;td&gt;20020131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_extended_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD 形式に変換&lt;/td&gt;
&lt;td&gt;2002-01-31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリーム出力演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;std::cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;d1 == d2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を加えた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d + dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を差し引いた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d - dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration operator-(date) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの日付を差し引いた日数(date duration)を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(2002,Jan,2);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd = d2-d1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;mailto:jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gregorian::date -- fix: Broken accessors table layout</title>
      <link href="https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html"/>
      <id>0daa7598004d1e0291ed4dc504c8ea02fb954501:archive/boost_docs/libs/date_time/class_date.md</id>
      <updated>2017-12-14T13:27:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;gregorian::date&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time.html&#34;&gt;全体のインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/gregorian.html&#34;&gt;Gregorianのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/posix_time.html&#34;&gt;Posix Timeのインデックスへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Date Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34;&gt;Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34;&gt;Construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34;&gt;Construct from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34;&gt;Construct from Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#introduction&#34; name=&#34;introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::gregorian::date&lt;/code&gt; クラスはライブラリユーザーにとって主要なインタフェースである。 一般に、日付クラスは代入可能ではあるが、一度構築されると不変である事が多い。&lt;/p&gt;
&lt;p&gt;日付の生成について別の方法が&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/date_iterators.html&#34;&gt;date iterators&lt;/a&gt;と&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/date_algorithms.html&#34;&gt;date algorithms or generators&lt;/a&gt;に含まれている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#header&#34; name=&#34;header&#34;&gt;Header&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//全ての型とI/Oを含む&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;もしくは&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &#34;boost/date_time/gregorian/gregorian_types.hpp&#34; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//型のみでI/Oは含まない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construction&#34; name=&#34;construction&#34;&gt;Construction&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(greg_year year, greg_month month, greg_day day)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付の要素から構築する。year, month, day の範囲が不正な場合、それぞれ &lt;code&gt;std::out_of_range&lt;/code&gt; から派生した &lt;code&gt;bad_year&lt;/code&gt;, &lt;code&gt;bad_day_of_month&lt;/code&gt;, &lt;code&gt;bad_day_month&lt;/code&gt; 例外を投げる。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピーコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(d)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date(special_values sv)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;無限大、無効値(not-a-date-time)、最大値、最小値を構築するコンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(neg_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(pos_infin);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d3(not_a_date_time);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d4(max_date);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d5(min_date);&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-string&#34; name=&#34;construct-from-string&#34;&gt;Construction From String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順に区切られた文字列から　例:2002-1-25&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;2002/1/25&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date from_undelimited_string(const std::string&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年-月-日の順のISO形式から　例:20020125&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::string ds(&#34;20020125&#34;);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d(from_string(ds))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#construct-from-clock&#34; name=&#34;construct-from-clock&#34;&gt;Construction From Clock&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::local_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;計算機に設定された時間帯に準じた地域時間を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::local_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day_clock::universal_day()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC 標準時を取得する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(day_clock::universal_day())&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#accessors&#34; name=&#34;accessors&#34;&gt;Accessors&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_year year() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.year() --&amp;gt; 2002;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_month month() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.month() --&amp;gt; 1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日の部分を取得&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_ymd year_month_day() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greg_ymd&lt;/code&gt; 構造体を返す&lt;br /&gt; 日付の3つの要素全てが必要なときに便利である&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date::ymd_type ymd = d.year_month_day(); ymd.year --&amp;gt; 2002, ymd.month --&amp;gt; 1, ymd.day --&amp;gt; 10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;greg_day_of_week day_of_week() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;曜日を返す(例: &lt;code&gt;Sunday&lt;/code&gt;, &lt;code&gt;Monday&lt;/code&gt;, etc.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,10); d.day() --&amp;gt; Thursday;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正または負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(pos_infin); d.is_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_neg_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が負の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_neg_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_pos_infinity() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が正の無限大の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(neg_infin); d.is_pos_infinity() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool is_not_a_date() const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付が無効値(not a date)の時 &lt;code&gt;true&lt;/code&gt; を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(not_a_date_time); d.is_not_a_date() --&amp;gt; true;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#conversion-to-string&#34; name=&#34;conversion-to-string&#34;&gt;Conversion To String&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_simple_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-mmm-DD (mmm は月名の3文字短縮形)形式に変換&lt;/td&gt;
&lt;td&gt;2002-Jan-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYYMMDD 形式に変換&lt;/td&gt;
&lt;td&gt;20020131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::string to_iso_extended_string(date d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;YYYY-MM-DD 形式に変換&lt;/td&gt;
&lt;td&gt;2002-01-31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/archive/boost_docs/libs/date_time/class_date.html#operators&#34; name=&#34;operators&#34;&gt;Operators&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリーム出力演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;std::cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==, operator!=,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;, operator&amp;lt;,&lt;/code&gt;&lt;br /&gt; &lt;code&gt;operator&amp;gt;=, operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サポートする比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;d1 == d2&lt;/code&gt;, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator+(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を加えた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d + dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date operator-(date_duration) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;オフセット日数 &lt;code&gt;date_duration&lt;/code&gt; を差し引いた日付を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd(1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2 = d - dd;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;date_duration operator-(date) const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つの日付を差し引いた日数(date duration)を返す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;date d1(2002,Jan,1);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date d2(2002,Jan,2);&lt;/code&gt;&lt;br /&gt; &lt;code&gt;date_duration dd = d2-d1;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Last modified: Wed Aug 28 17:52:03 MST 2002 by &lt;a href=&#34;mailto:jeff@crystalclearsoftware.com&#34;&gt;Jeff Garland&lt;/a&gt; © 2000-2002 &lt;/p&gt;
&lt;p&gt;Japanese Translation Copyright (C) 2003 &lt;a href=&#34;mailto:sshino@cppll.jp&#34;&gt;Shoji Shinohara&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>沖 観行</name>
        <email>oki.miyuki@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost 1.66.0リリースノート -- 1.66.0リリースノート : Threadを追加 (close #206)</title>
      <link href="https://boostjp.github.io/document/version/1_66_0.html"/>
      <id>506dda049ce4a8e7665763d36ecc8af59fdb2282:document/version/1_66_0.md</id>
      <updated>2017-12-12T13:57:42+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Boost 1.66.0リリースノート&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本家リリースノート：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/website/blob/master/feed/history/boost_1_66_0.qbk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/users/history/version_1_66_0.html&#34; target=&#34;_blank&#34;&gt;http://www.boost.org/users/history/version_1_66_0.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリは以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/&#34; target=&#34;_blank&#34;&gt;https://github.com/boostorg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リポジトリからのビルド方法は、egtraさんのブログを参照：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「&lt;a href=&#34;http://dev.activebasic.com/egtra/2013/12/03/620/&#34; target=&#34;_blank&#34;&gt;Modularized Boost（GitHubへ移行したリポジトリ）を使用する&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/beast&#34; target=&#34;_blank&#34;&gt;Beast&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11以降限定のポータブルなHTTP、WebSocket、その他ネットワーク操作のライブラリ。作者Vinnie Falco氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/callable_traits&#34; target=&#34;_blank&#34;&gt;CallableTraits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost.FunctionTypesの精神的な後継ライブラリ。C++11以降限定のライブラリで、&lt;code&gt;callable&lt;/code&gt; (関数呼び出し可能) に関する全ての型検査と型操作を提供する。作者Barrett Adair氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/mp11&#34; target=&#34;_blank&#34;&gt;Mp11&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11のメタプログラミングライブラリ。作者Peter Dimov氏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34;&gt;Asio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34;&gt;Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34;&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34;&gt;Predef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#thread&#34;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34;&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34;&gt;Variant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#asio&#34; name=&#34;asio&#34;&gt;Asio&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Networking TSによるインタフェース変更を反映させた (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf&#34; target=&#34;_blank&#34;&gt;N4546&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Networking TSによって置き換えられた関数とクラスは非推奨となった&lt;/li&gt;
&lt;li&gt;サービステンプレートパラメータと対応するクラスは、デフォルトで無効となった。例として&lt;code&gt;basic_socket&amp;lt;Protocol, SocketService&amp;gt;&lt;/code&gt;の代わりにシンプルな&lt;code&gt;basic_socket&amp;lt;Protocol&amp;gt;&lt;/code&gt;がある。古いインタフェースを有効にする場合は、&lt;code&gt;BOOST_ASIO_ENABLE_OLD_SERVICES&lt;/code&gt;マクロをdefineすること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以前から非推奨だった関数を削除&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのカスタマイズをサポート&lt;/li&gt;
&lt;li&gt;ハンドラトラッキングのためにreactor関係のイベントを追加 (ディスクリプタの準備ができた、とか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_context&lt;/code&gt;単位でロックを無効化するために使用する、特殊な「並行性のヒント (concurrency hint)」を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl::stream&amp;lt;&amp;gt;&lt;/code&gt;の最初のコンストラクタ引数の完全転送を可能にした&lt;/li&gt;
&lt;li&gt;低レイヤーネイティブソケット (underlying native socket) の所有権を手放す機能を追加した (この機能を使用するには、Windows 8.1以降のI/O完了ポートバックエンドが必要)&lt;/li&gt;
&lt;li&gt;Networking TSによるインタフェース変更のリストは以下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;を&lt;code&gt;io_context&lt;/code&gt;に変更。&lt;code&gt;io_service&lt;/code&gt;はtypedefとして残る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::dispatch()&lt;/code&gt;を非メンバ関数の&lt;code&gt;dispatch()&lt;/code&gt;に変更。任意のExecutor／Contextで実行できるようにするため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::post()&lt;/code&gt;を非メンバ関数の&lt;code&gt;post()&lt;/code&gt;に変更。任意のExecutor／Contextで実行できるようにするため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_is_continuation&lt;/code&gt;フック付きの&lt;code&gt;io_service::post()&lt;/code&gt;を非メンバ関数&lt;code&gt;defer()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::poll()&lt;/code&gt;を&lt;code&gt;io_context::poll()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::poll_one()&lt;/code&gt;を&lt;code&gt;io_context::poll_one()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::run()&lt;/code&gt;を&lt;code&gt;io_context::run()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;io_service::run_one()&lt;/code&gt;を&lt;code&gt;io_context::run_one()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;時間制限付き実行の機能として、&lt;code&gt;io_context::run_for()&lt;/code&gt;、&lt;code&gt;io_context::run_until()&lt;/code&gt;、&lt;code&gt;io_context::run_one_for()&lt;/code&gt;、&lt;code&gt;io_context::run_one_until()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::reset()&lt;/code&gt;を&lt;code&gt;io_context::restart()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service&lt;/code&gt;を&lt;code&gt;execution_context&lt;/code&gt;に変更。&lt;code&gt;io_service::service&lt;/code&gt;を&lt;code&gt;execution_context::service&lt;/code&gt;に変更。&lt;code&gt;io_service::id&lt;/code&gt;を&lt;code&gt;execution_context::id&lt;/code&gt;に変更。サービス関係の機能は&lt;code&gt;execution_context&lt;/code&gt;基本クラスに移動となった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make_service()&lt;/code&gt;を&lt;code&gt;add_service()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::strand&lt;/code&gt;を&lt;code&gt;strand&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::work&lt;/code&gt;を&lt;code&gt;executor_work_guard&lt;/code&gt;と&lt;code&gt;make_work_guard()&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;io_service::wrap&lt;/code&gt;と&lt;code&gt;io_service::strand::wrap&lt;/code&gt;を&lt;code&gt;executor_binder&lt;/code&gt;と&lt;code&gt;bind_executor&lt;/code&gt;に変更。あらゆるExecutorで動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_invoke&lt;/code&gt;フックを&lt;code&gt;associated_executor&lt;/code&gt;と&lt;code&gt;get_associated_executor&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asio_handler_allocate&lt;/code&gt;フックと&lt;code&gt;asio_handler_deallocate&lt;/code&gt;フックを、&lt;code&gt;associated_allocator&lt;/code&gt;と&lt;code&gt;get_associated_allocator&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer_cast()&lt;/code&gt;を&lt;code&gt;const_buffer::data()&lt;/code&gt;と&lt;code&gt;mutable_buffer::data()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;単一バッファ用の&lt;code&gt;buffer_size()&lt;/code&gt;を&lt;code&gt;const_buffer::size()&lt;/code&gt;と&lt;code&gt;mutable_buffer::size()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_buffers_1&lt;/code&gt;を&lt;code&gt;const_buffer&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutable_buffers_1&lt;/code&gt;を&lt;code&gt;mutable_buffer&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_io_object::get_io_service()&lt;/code&gt;を&lt;code&gt;basic_socket::get_executor()&lt;/code&gt;に変更。タイマーやシリアルポート関係の同様のメンバ関数も同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_base::max_connections()&lt;/code&gt;を&lt;code&gt;socket_base::max_listen_connections()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket::wait()&lt;/code&gt;、&lt;code&gt;basic_socket::async_wait()&lt;/code&gt;、&lt;code&gt;basic_socket_acceptor::wait()&lt;/code&gt;、&lt;code&gt;basic_socket_acceptor::async_wait()&lt;/code&gt;を&lt;code&gt;socket_base::wait_type&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor::accept()&lt;/code&gt;がソケットの参照をパラメータでとっていたが、ソケットを戻り値で返すよう変更。これはC++11以降でムーブサポートされている場合のみ使用できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_acceptor::async_accept()&lt;/code&gt;がソケットの参照をパラメータでとっていたが、ハンドラに渡されるよう変更。これはC++11以降でムーブサポートされている場合のみ使用できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect()&lt;/code&gt;と&lt;code&gt;async_connect()&lt;/code&gt;がイテレータをひとつだけとっていたが、イテレータ範囲をとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::duration_type&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::duration&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::time_type&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::time_point&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::expires_at()&lt;/code&gt;と&lt;code&gt;basic_socket_streambuf::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_socket_streambuf::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_socket_streambuf::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_streambuf::puberror&lt;/code&gt;を&lt;code&gt;basic_socket_streambuf::error&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::duration_type&lt;/code&gt;を&lt;code&gt;basic_socket_iostream::duration&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::time_type&lt;/code&gt;を&lt;code&gt;basic_socket_iostream::time_point&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::expires_at()&lt;/code&gt;と&lt;code&gt;basic_socket_iostream::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_socket_iostream::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_socket_iostream::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_socket_iostream::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;basic_waitable_timer::cancel()&lt;/code&gt;を&lt;code&gt;basic_waitable_timer::cancel()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;basic_waitable_timer::expires_at()&lt;/code&gt;のセッターを&lt;code&gt;basic_waitable_timer::expires_at()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer::expires_at&lt;/code&gt;と&lt;code&gt;basic_waitable_timer::expires_from_now()&lt;/code&gt;のゲッターを&lt;code&gt;basic_waitable_timer::expiry()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_waitable_timer::expires_from_now()&lt;/code&gt;のセッターを&lt;code&gt;basic_waitable_timer::expires_after()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address::from_string()&lt;/code&gt;を&lt;code&gt;ip::make_address()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4::from_string()&lt;/code&gt;と&lt;code&gt;ip::address_v6::to_v4()&lt;/code&gt;を&lt;code&gt;ip::make_address_v4()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6::from_string()&lt;/code&gt;と&lt;code&gt;ip::address_v6::v4_mapped()&lt;/code&gt;を&lt;code&gt;ip::make_address_v6()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address::to_string()&lt;/code&gt;を&lt;code&gt;ip::address::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address_v4::to_string()&lt;/code&gt;を&lt;code&gt;ip::address_v4::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_code&amp;amp;&lt;/code&gt;をとる&lt;code&gt;ip::address_v6::to_string()&lt;/code&gt;を&lt;code&gt;ip::address_v6::to_string()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6::v4_compatible()&lt;/code&gt;を&lt;code&gt;ip::address_v6::is_v4_compatible()&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4::broadcast&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_a&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_b&lt;/code&gt;、&lt;code&gt;ip::address_v4::is_class_c&lt;/code&gt;、&lt;code&gt;ip::address_v4::netmask&lt;/code&gt;を、&lt;code&gt;ip::network_v4&lt;/code&gt;に変更。このクラスはCIDR notationを使用してIPv4ネットワークの計算を行う機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::network_v6&lt;/code&gt;を追加。このクラスはCIDR notationを使用してIPv6ネットワークの計算を行う機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v4_iterator&lt;/code&gt;と&lt;code&gt;ip::address_v4_range&lt;/code&gt;を追加。これらはIPv4アドレスのサブセットをイテレートする機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::address_v6_iterator&lt;/code&gt;と&lt;code&gt;ip::address_v6_range&lt;/code&gt;を追加。これらはIPv6アドレスのサブセットをイテレートする機能をもつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::iterator&lt;/code&gt;を&lt;code&gt;ip::basic_resolver::results_type&lt;/code&gt;に変更。単一イテレータではなく範囲を返すようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::query&lt;/code&gt;を引数にとる&lt;code&gt;ip::basic_resolver::resolve()&lt;/code&gt;を、ホスト名とサービスを引数にとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::resolve()&lt;/code&gt;が単一イテレータではなく範囲を返すよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::query&lt;/code&gt;を引数にとる&lt;code&gt;ip::basic_resolver::async_resolve()&lt;/code&gt;を、ホスト名とサービスを引数にとるよう変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip::basic_resolver::async_resolve()&lt;/code&gt;の完了がンドラに単一イテレータではなく範囲が渡されるよう変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#atomic&#34; name=&#34;atomic&#34;&gt;Atomic&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;整数型の拡張アトミック命令を実験的に実装&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch_negate&lt;/code&gt;と&lt;code&gt;fetch_complement&lt;/code&gt;はアトミックに符号反転（2の補数）、もしくは1の補数（ビット反転）へ置換え、もとの値を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opaque_&amp;lt;op&amp;gt;&lt;/code&gt;は対応する&lt;code&gt;fetch_&amp;lt;op&amp;gt;&lt;/code&gt;に等しいが、値を返さない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;op&amp;gt;_and_test&lt;/code&gt;は&lt;code&gt;&amp;lt;op&amp;gt;&lt;/code&gt;をアトミックに行い、結果が&lt;code&gt;0&lt;/code&gt;であるならば&lt;code&gt;true&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bit_test_and_set&lt;/code&gt;、&lt;code&gt;bit_test_and_reset&lt;/code&gt;および&lt;code&gt;bit_test_and_complement&lt;/code&gt;はアトミックに指定したビットを&lt;code&gt;1&lt;/code&gt;にする（&lt;code&gt;set&lt;/code&gt;）、&lt;code&gt;0&lt;/code&gt;にする（&lt;code&gt;reset&lt;/code&gt;）もしくはビット反転（&lt;code&gt;complement&lt;/code&gt;）し、そのビットのもとの値を返す&lt;ul&gt;
&lt;li&gt;訳者註: 原文ではそのビットのもとの値を返すとなっているが、戻り値の型は&lt;code&gt;bool&lt;/code&gt;型であることに注意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf&#34; target=&#34;_blank&#34;&gt;P0558R1&lt;/a&gt;で提案、C++17に採択されたポインターを介した整数演算の削除に追従。それらはもう提供されなくなった&lt;/li&gt;
&lt;li&gt;C++17で追加された&lt;code&gt;atomic&amp;lt;T&amp;gt;::value_type&lt;/code&gt;と&lt;code&gt;atomic&amp;lt;T&amp;gt;::difference_type&lt;/code&gt;にも追従し、ユーザコードで使用可能となった&lt;/li&gt;
&lt;li&gt;GCC 7へのサポートを改善し、x86-64環境下での128bit演算にはコンパイラ提供の&lt;code&gt;libatomic&lt;/code&gt;へのリンクは不要となった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#datetime&#34; name=&#34;datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows SDKの抽象レイヤーとしてBoost.WinAPIを使用するようにした&lt;/li&gt;
&lt;li&gt;日付から大きな年を加算・減算した際に、整数オーバーフローによって不正な結果になっていた問題を修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations&#34; target=&#34;_blank&#34;&gt;Boost.DateTime issue with adding long year durations - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fiber&#34; name=&#34;fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CUDAストリームと同期できるようになった&lt;/li&gt;
&lt;li&gt;ROCm/HIPストリームと同期できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#format&#34; name=&#34;format&#34;&gt;Format&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;新たな変換指定子を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;a&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;fixed | scientific&lt;/code&gt;フラグを設定する (&lt;code&gt;hexfloat&lt;/code&gt;相当)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/43&#34; target=&#34;_blank&#34;&gt;&#39;b&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;boolalpha&lt;/code&gt;フラグを設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;A&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;a&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/41&#34; target=&#34;_blank&#34;&gt;&#39;F&#39;&lt;/a&gt;&lt;/code&gt; : &lt;code&gt;f&lt;/code&gt;フラグ + &lt;code&gt;uppercase&lt;/code&gt;を設定する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/42&#34; target=&#34;_blank&#34;&gt;GitHub #42&lt;/a&gt; ISO 99の新たな引数型 &lt;code&gt;j&lt;/code&gt; (&lt;code&gt;intmax_t&lt;/code&gt;) と &lt;code&gt;z&lt;/code&gt; (&lt;code&gt;size_t&lt;/code&gt;) を追加。これは値の解析をし、型としては単に無視する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/pull/44&#34; target=&#34;_blank&#34;&gt;GitHub #44&lt;/a&gt; Microsoftの新たな引数型プレフィックス &lt;code&gt;I&lt;/code&gt; (&lt;code&gt;ptrdiff_t&lt;/code&gt;)、 &lt;code&gt;I32&lt;/code&gt; (&lt;code&gt;__int32&lt;/code&gt;)、 &lt;code&gt;I64&lt;/code&gt; (&lt;code&gt;__int64&lt;/code&gt;)、 &lt;code&gt;w&lt;/code&gt; (&lt;code&gt;wchar_t&lt;/code&gt;) を追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/33&#34; target=&#34;_blank&#34;&gt;GitHub #33&lt;/a&gt; &lt;code&gt;format_matrix&lt;/code&gt;という新たな開発ツールを追加した。これはできるだけ多くの可能なフォーマットを組み合わせて、ファイルに記録する：&lt;ul&gt;
&lt;li&gt;Boostリリース時の回帰テストに役立つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snprintf&lt;/code&gt;との比較ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/format/issues/36&#34; target=&#34;_blank&#34;&gt;GitHub #36&lt;/a&gt; &lt;code&gt;volatile&lt;/code&gt;引数に対して安全に&lt;code&gt;operator%&lt;/code&gt;を使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/4636&#34; target=&#34;_blank&#34;&gt;Trac #4636&lt;/a&gt; MSVC環境で値の丸め処理が&lt;code&gt;/RTCc&lt;/code&gt;オプション (ランタイムエラーチェック) によって失敗していた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/7477&#34; target=&#34;_blank&#34;&gt;Trac #7477&lt;/a&gt; MSVCの&lt;code&gt;/Za&lt;/code&gt;オプション (Microsoftの言語拡張を使用しない) との互換性を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10324&#34; target=&#34;_blank&#34;&gt;Trac #10324&lt;/a&gt; 不正な&lt;code&gt;const_cast&lt;/code&gt;による警告を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/11632&#34; target=&#34;_blank&#34;&gt;Trac #11632&lt;/a&gt; 静的解析して問題があった&lt;code&gt;alt_sstream.hpp&lt;/code&gt;を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#fusion&#34; name=&#34;fusion&#34;&gt;Fusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/149&#34; target=&#34;_blank&#34;&gt;PR#149&lt;/a&gt; &lt;code&gt;isspace(c)&lt;/code&gt; はVxWorksのDinkum clibではマクロとして実装されていないこと対応。Brian Kuhl(@kuhlenough)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/150&#34; target=&#34;_blank&#34;&gt;PR#150&lt;/a&gt; 循環したプリプロセッサのインクルードを修正。Gregor Jasny(@gjasny)氏に感謝&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/151&#34; target=&#34;_blank&#34;&gt;PR#151&lt;/a&gt; &lt;code&gt;fusion::tuple&lt;/code&gt;の基底クラスが変更された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/153&#34; target=&#34;_blank&#34;&gt;PR#153&lt;/a&gt; &lt;code&gt;std::array&lt;/code&gt;でコンパイルエラーになることがあるのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/fusion/pull/154&#34; target=&#34;_blank&#34;&gt;PR#154&lt;/a&gt; C++03において、ネストしたコンテナのコピーでバグがあったのを修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#log&#34; name=&#34;log&#34;&gt;Log&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_collector::scan_for_files()&lt;/code&gt;のバグを修正。ユーザーアプリケーションの再起動後、ターゲットディレクトリ内のログファイル名が不正になることがあった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#iterator&#34; name=&#34;iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt;と&lt;code&gt;prior()&lt;/code&gt;関数は、ネストした型（例えば&lt;code&gt;iterator_category&lt;/code&gt;や&lt;code&gt;difference_type&lt;/code&gt;といったような型特性に関わる型）を定義していないようなユーザイテレータをサポートするようになった。代わりにそれらの型を扱うには&lt;code&gt;std::iterator_traits&lt;/code&gt;を特殊化すること。これが正しく動作するためにはC++17準拠の&lt;code&gt;std::iterator_traits&lt;/code&gt;をサポートした環境が必要である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#math&#34; name=&#34;math&#34;&gt;Math&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ガウス求積法 (Gauss quadrature) とガウス＝クロンロッド求積法 (Gauss-Kronrod quadrature) のルーチンを追加&lt;/li&gt;
&lt;li&gt;二重指数関数型数値積分 (double-exponential quadrature) のルーチンを追加 (tanh-sinh, exp-sinh, sinh-sinh)&lt;/li&gt;
&lt;li&gt;チェビシェフ多項式 (Chebyshev polynomial) の評価 (evaluation)、平方根 (roots)、積分 (integration)、微分 (differentiation)、内挿 (interpolation, 補間) のルーチンを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#multi-index&#34; name=&#34;multi-index&#34;&gt;Multi-index&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify()&lt;/code&gt;と&lt;code&gt;modify_key()&lt;/code&gt;をより頑強にし、Modifierで例外が送出された場合や、Rollback関数で復旧がされなかった場合に、変更要素を消去するようにした (完全な議論は &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12542&#34; target=&#34;_blank&#34;&gt;Trac #12542&lt;/a&gt; を参照)。これは技術的には後方互換性がなく、以下のコードにおいて：
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),[](&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Boostの以前のバージョンでは&lt;code&gt;c&lt;/code&gt;は維持されたが、現在は&lt;code&gt;c.begin()&lt;/code&gt;の要素は消去される。この問題を提起したJon Kalb氏に感謝する
- メンテナンス上の修正&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#optional&#34; name=&#34;optional&#34;&gt;Optional&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しいコンパイラでは、Tがスカラー型の場合 optional&amp;lt;T&amp;gt; がトリビアルコピー可能となった。これは、これまでとは異なるストレージ(aligned_storage ではなく、単なる T)を用いることで実現している。 我々はコンパイラが default宣言 された関数をサポートすることを必須としている&lt;/li&gt;
&lt;li&gt;GCC が &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt; の警告を誤って出すのを防止するため、 &lt;code&gt;operator==&lt;/code&gt; の実装を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#poly-collection&#34; name=&#34;poly-collection&#34;&gt;PolyCollection&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9、Clang 3.3から3.6といった古いバージョンのコンパイラで動作するようバックポートした。GCC 4.8のlibstdc++-v3では、一部の機能が欠如しているために、以下の制限がある (Clangでlibstdc++を使用する場合も同様)。&lt;ul&gt;
&lt;li&gt;状態を持つアロケータがない&lt;/li&gt;
&lt;li&gt;アロケータのムーブ構築がコピー構築にdecayされる&lt;/li&gt;
&lt;li&gt;要素のコピー中に例外が送出されると、コピー構築がクラッシュする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;メンテナンス上の修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#predef&#34; name=&#34;predef&#34;&gt;Predef&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows Universal Platformの検出を改善した (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;cloudlibcを使用したCloudABIの検出を追加 (James E. King, III氏に感謝)&lt;/li&gt;
&lt;li&gt;その他バグ修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#regex&#34; name=&#34;regex&#34;&gt;Regex&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;de-fuzzingによって発見されたセキュリティ問題に対する小さな修正をした&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#stacktrace&#34; name=&#34;stacktrace&#34;&gt;Stacktrace&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常識から外れたMinGW-w64環境で動作するようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libbacktrace&lt;/code&gt;がインストールされたMinGW環境 (&lt;code&gt;-w64&lt;/code&gt;なし) で動作するようにした。さらなる情報は、MinGWの「MinGW specific notes」セクションを参照&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#thread&#34; name=&#34;thread&#34;&gt;Thread&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;バグ修正&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12323&#34; target=&#34;_blank&#34;&gt;Trac #12323&lt;/a&gt; Windows環境で関数ポインタ&lt;code&gt;_pRawDllMainOrig&lt;/code&gt;のシグニチャが間違っていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12730&#34; target=&#34;_blank&#34;&gt;Trac #12730&lt;/a&gt; MSVC 2017でTLS cleanup hooks関係のシグニチャが変わった問題に対処&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12976&#34; target=&#34;_blank&#34;&gt;Trac #12976&lt;/a&gt; Boost Thread Executorsのドキュメント間違いを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/12949&#34; target=&#34;_blank&#34;&gt;Trac #12949&lt;/a&gt; &lt;code&gt;BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC&lt;/code&gt;を定義してもスリープ操作がモノトニックにならなかった問題について、インクルード不足でも誤って動作してしまっていたのを修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13019&#34; target=&#34;_blank&#34;&gt;Trac #13019&lt;/a&gt; &lt;code&gt;BOOST_THREAD_PROVIDES_INTERRUPTIONS&lt;/code&gt;定義時のABI互換が不完全だった問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13069&#34; target=&#34;_blank&#34;&gt;Trac #13069&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/132&#34; target=&#34;_blank&#34;&gt;GitHub #132&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/134&#34; target=&#34;_blank&#34;&gt;GitHub #134&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/135&#34; target=&#34;_blank&#34;&gt;GitHub #135&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/136&#34; target=&#34;_blank&#34;&gt;GitHub #136&lt;/a&gt;, &lt;a href=&#34;https://github.com/boostorg/thread/issues/137&#34; target=&#34;_blank&#34;&gt;GitHub #137&lt;/a&gt; MSVC 2015環境でスレッドプールのテストがハング・デッドロックしていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13163&#34; target=&#34;_blank&#34;&gt;Trac #13163&lt;/a&gt; 可変引数テンプレートをもたない環境で&lt;code&gt;boost::detail::heap_new()&lt;/code&gt;が引数4個までしかサポートされていなかったため、9個まで使用できるようにした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://svn.boost.org/trac/boost/ticket/13226&#34; target=&#34;_blank&#34;&gt;Trac #13226&lt;/a&gt; POSIX環境で&lt;code&gt;getpagesize()&lt;/code&gt;が非推奨になったため、ワークアラウンドを入れた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/133&#34; target=&#34;_blank&#34;&gt;GitHub #133&lt;/a&gt; Windows環境でSpuriousなテイミングテストが失敗していたため、タイムアウトの閾値を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/143&#34; target=&#34;_blank&#34;&gt;GitHub #143&lt;/a&gt; MSVC 12.0でコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/145&#34; target=&#34;_blank&#34;&gt;GitHub #145&lt;/a&gt; &lt;code&gt;BOOST_THREAD_ATTRIBUTE_MAY_ALIAS&lt;/code&gt;定義時にClangでコンパイルエラーになる問題を修正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;新たな実験的機能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/thread/issues/116&#34; target=&#34;_blank&#34;&gt;GitHub #116&lt;/a&gt; &lt;code&gt;promise&lt;/code&gt;クラスに、遅延書き込みの関数を追加。&lt;code&gt;set_value_deferred()&lt;/code&gt;、&lt;code&gt;set_exception_deferred()&lt;/code&gt;、&lt;code&gt;notify_deferred()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#utility&#34; name=&#34;utility&#34;&gt;Utility&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boost/next_prior.hpp&lt;/code&gt;をBoost.Iteratorモジュールに移動。ユーザーコードは変更の必要なし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#uuid&#34; name=&#34;uuid&#34;&gt;Uuid&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改善&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/26&#34; target=&#34;_blank&#34;&gt;GitHub #26&lt;/a&gt; &lt;code&gt;name_generator&lt;/code&gt;をリファクタし、hash provider conceptによるハッシュアルゴリズムの設定変更をできるようにした。オプション機能としてRFC-4122のMD5ハッシュ実装を追加した。この変更によって、将来の標準ハッシュアルゴリズムがサポートしやすくなった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boostorg/uuid/issues/34&#34; target=&#34;_blank&#34;&gt;GitHub #34&lt;/a&gt; &lt;a href=&#34;https://tools.ietf.org/html/rfc4122#appendix-C&#34; target=&#34;_blank&#34;&gt;RFC 4122, Appendix C&lt;/a&gt;の名前空間として&lt;code&gt;boost::uuids::ns&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/8630&#34; target=&#34;_blank&#34;&gt;Trac #8630&lt;/a&gt;, &lt;a href=&#34;https://svn.boost.org/trac10/ticket/11482&#34; target=&#34;_blank&#34;&gt;Trac #11482&lt;/a&gt; &lt;a href=&#34;https://svn.boost.org/trac10/ticket/12253&#34; target=&#34;_blank&#34;&gt;Trac #12253&lt;/a&gt; &lt;code&gt;string_generator&lt;/code&gt;が不正なuuidを受け付けてしまっていた問題を修正&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/10665&#34; target=&#34;_blank&#34;&gt;Trac #10665&lt;/a&gt; &lt;code&gt;name_generator::operator()&lt;/code&gt;をドキュメントに合わせて&lt;code&gt;const&lt;/code&gt;メンバ関数にした&lt;/li&gt;
&lt;li&gt;実証詳細のヘッダファイルをdetailディレクトリに移動した。ユーザーコードの変更は必要ないが、移動前の古いファイルをインクルードしたときに警告は出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://boostjp.github.io/document/version/1_66_0.html#variant&#34; name=&#34;variant&#34;&gt;Variant&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://svn.boost.org/trac10/ticket/6971&#34; target=&#34;_blank&#34;&gt;Trac #6971&lt;/a&gt; &lt;code&gt;apply_visitor()&lt;/code&gt;の&lt;code&gt;visitables&lt;/code&gt;パラメータ (&lt;code&gt;variant&lt;/code&gt;オブジェクト) を完全転送するよう修正。この機能を実装してくれたLevon Tarakchyan氏に多大なる感謝を&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;テスト済みコンパイラ&lt;/h2&gt;
&lt;p&gt;主要なテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.4.0, 7.1.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.2.0&lt;/li&gt;
&lt;li&gt;Intel: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4&lt;/li&gt;
&lt;li&gt;GCC, C++14: 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, C++0x: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, C++11: 4.7.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;追加して含まれるテストコンパイラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;Clang: 3.0, 3.8.1, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++0x: 3.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1&lt;/li&gt;
&lt;li&gt;Clang, C++17: 5.0.1&lt;/li&gt;
&lt;li&gt;GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.4.7&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1, 8.0.0&lt;/li&gt;
&lt;li&gt;GCC, C++17: 7.2.0&lt;/li&gt;
&lt;li&gt;Intel: 18.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS X:&lt;ul&gt;
&lt;li&gt;Clang: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 9.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 9.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4&lt;/li&gt;
&lt;li&gt;GCC, C++0x: 4.6.4&lt;/li&gt;
&lt;li&gt;GCC, C++11: 4.7.3, 4.8.1, 4.9.3&lt;/li&gt;
&lt;li&gt;GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0&lt;/li&gt;
&lt;li&gt;Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;Clang: 3.6, 3.7, 3.8&lt;/li&gt;
&lt;li&gt;GCC: 4.9, 5.4&lt;/li&gt;
&lt;li&gt;GCC, C++14: 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FreeBSD:&lt;ul&gt;
&lt;li&gt;Clang: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++11: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++14: 4.0.0&lt;/li&gt;
&lt;li&gt;Clang, C++1z: 4.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;QNX:&lt;ul&gt;
&lt;li&gt;QCC, C++0x: 4.4.2&lt;/li&gt;
&lt;li&gt;QCC, C++11: 4.7.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;翻訳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/faithandbrave&#34; target=&#34;_blank&#34;&gt;Akira Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/Flast&#34; target=&#34;_blank&#34;&gt;Kohei Takahashi&lt;/a&gt;, &lt;a href=&#34;https://github.com/mumumu&#34; target=&#34;_blank&#34;&gt;Yoshinari Takaoka&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>