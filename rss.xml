<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>boostjp : Boost日本語情報サイト</title>
  <link href="http://boostjp.github.io" />
  <updated>2016-08-20T16:03:24.360643</updated>
  <id>43b4b8d6-54a8-4993-8f42-3125cde67e8f</id>

  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;[boost/signals/connection.hpp](http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp)&amp;gt; -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html"/>
      <id>fd732e63e2b638f854370f83e48edab910a5b63f:archive/boost_docs/libs/signals/reference/connection.md</id>
      <updated>2016-08-20 16:03:05 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;connection_class&#34;&gt;&lt;code&gt;connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;connection&lt;/code&gt; クラスは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html&#34;&gt;Signal&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;Slot&lt;/a&gt; の間の接続を表す。
これはシグナルとスロットが現在接続されているかを問い合わせ、またシグナルとスロットを切断する能力を有する軽量オブジェクトである。
問い合わせと &lt;code&gt;connection&lt;/code&gt; の切断を行うことは、常に安全である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt; クラスは &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; かつ &lt;a href=&#34;http://www.sgi.com/tech/stl/EqualityComparable.html&#34; target=&#34;_blank&#34;&gt;EqualityComparable&lt;/a&gt;である&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;less_than_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equality_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#destructor&#34;&gt;~connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connected&#34;&gt;connected&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#less_than&#34;&gt;operator&amp;lt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;default_constructor&#34;&gt;connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_constructor&#34;&gt;connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect&#34;&gt;void disconnect() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;is_connected()&lt;/code&gt; が真であれば &lt;code&gt;this&lt;/code&gt; によって参照されているシグナルとスロットの接続を切断する; そうでなければ何もしない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;is_connected()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connected&#34;&gt;bool connected() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; がアクティブな (接続されている) 非 NULL 接続を参照していれば &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_assignment&#34;&gt;connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_member&#34;&gt;void swap(connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照している接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;equality&#34;&gt;bool operator==(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が同一の接続を参照しているか、両方とも NULL 接続を参照している場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;less_than&#34;&gt;bool operator&amp;lt;(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 実装定義の順序づけによって、&lt;code&gt;this&lt;/code&gt; によって参照されている接続が &lt;code&gt;other&lt;/code&gt; によって参照されている接続に先行する場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;scoped_connection_class&#34;&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスは、そのインスタンスが破棄されるときに自動的に切断される接続である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_destructor&#34;&gt;~scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_default_constructor&#34;&gt;scoped_connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_constructor&#34;&gt;scoped_connection(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_constructor&#34;&gt;scoped_connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;disconnect()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_member&#34;&gt;void swap(scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照する接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;フリー関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_free&#34;&gt;void swap(connection&amp;amp; c1, connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_free&#34;&gt;void swap(scoped_connection&amp;amp; c1, scoped_connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:05 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>fd732e63e2b638f854370f83e48edab910a5b63f:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-20 16:03:05 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラス `trackable` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html"/>
      <id>fd732e63e2b638f854370f83e48edab910a5b63f:archive/boost_docs/libs/signals/reference/trackable.md</id>
      <updated>2016-08-20 16:03:05 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラス &lt;code&gt;trackable&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/trackable.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/trackable.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;trackable&lt;/code&gt; クラスは、スロットの一部として結合されたオブジェクトが破棄されたときに、シグナルとスロットを自動的に切断するよう管理する責任を負う。
&lt;code&gt;trackable&lt;/code&gt; クラスは他のクラスの基底クラスとしてのみ用いることが可能である; そのとき、派生クラスはスロットの一部として用いられる関数オブジェクトに結合される。
&lt;code&gt;trackable&lt;/code&gt; オブジェクトがシグナル・スロット接続を追跡する方法は、実装定義である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;protected:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#default_constructor&#34;&gt;trackable()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#destructor&#34;&gt;~trackable()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;default_constructor&#34;&gt;trackable();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 接続済みスロットのリストを空にする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_constructor&#34;&gt;trackable(const trackable&amp;amp;);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 接続済みスロットのリストを空にする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: シグナル・スロット接続は明示的な connect メソッド呼び出しを介してのみ作成される。
    したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトがコピーされるここでは、作成できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~trackable();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべての接続済みスロットを切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_assignment&#34;&gt;trackable&amp;amp; operator=(const trackable&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべての接続済みスロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: シグナル・スロット接続は明示的な &lt;code&gt;connect&lt;/code&gt; メソッド呼び出しを介してのみ作成される。
    したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトがコピーされるここでは、作成できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:22 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>fd732e63e2b638f854370f83e48edab910a5b63f:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-20 16:03:05 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals チュートリアル -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html"/>
      <id>fd732e63e2b638f854370f83e48edab910a5b63f:archive/boost_docs/libs/signals/tutorial.md</id>
      <updated>2016-08-20 16:03:05 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals チュートリアル&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;チュートリアルの読み方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このチュートリアルは直線的に読むことを意図していない。
最上位の構成では、おおまかにライブラリにおける異なった概念(たとえば複数スロット呼び出しの扱い、スロットとの値の受け渡し)を分類している。
それぞれの概念に対して、まず基本的な考え方が提示され、その後、より複雑なライブラリの利用法について記述されている。
読者の便宜を図るため、各セクションは &lt;em&gt;初級&lt;/em&gt; 、 &lt;em&gt;中級&lt;/em&gt; 、 &lt;em&gt;上級&lt;/em&gt; と区分されている。
&lt;em&gt;初級&lt;/em&gt; セクションは、すべてのライブラリユーザが知っておくべき情報を含んでいる。
&lt;em&gt;初級&lt;/em&gt; セクションのみを読み終えた段階で、Signals ライブラリの標準的な使用が可能になる。
&lt;em&gt;中級&lt;/em&gt; セクションは&lt;em&gt;初級&lt;/em&gt;セクションの基礎の上に立ち、ライブラリのやや複雑な使用法を提供する。
最後に &lt;em&gt;上級&lt;/em&gt; セクションは Signals ライブラリの非常に高度な使用方法を詳述しており、しばしば &lt;em&gt;初級&lt;/em&gt; 、 &lt;em&gt;中級&lt;/em&gt; の項目に関する堅固な理解が要求される。
ほとんどのユーザは &lt;em&gt;上級&lt;/em&gt; セクションを読む必要はない。&lt;/p&gt;
&lt;h2&gt;互換性に関する注記&lt;/h2&gt;
&lt;p&gt;Boost.Signals は二通りの文法形式を持つ。
preferred 形式は、より C++ に似合っており、考慮の必要がある隔てられたテンプレートパラメータの数を減少させ、たいてい可読性を向上させる。
しかしながらコンパイラのバグのため、 preferred 形式はすべてのプラットフォームではサポートされていない。
compatible 形式は Boost によってサポートされているすべてのコンパイラで動作する。
あなたのコンパイラでどちらの形式を利用するか決定するために、下の表が参考になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;Boost.Function&lt;/a&gt; の利用者は、Signals の prefered 形式は Function の preferred 形式と等価なことに注意。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GNU C++ 2.95.x, 3.0.x, 3.1.x&lt;/li&gt;
&lt;li&gt;Comeau C++ 4.2.45.2&lt;/li&gt;
&lt;li&gt;SGI MIPSpro 7.3.0&lt;/li&gt;
&lt;li&gt;Intel C++ 5.0, 6.0&lt;/li&gt;
&lt;li&gt;Compaq&#39;s cxx 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 6.0, 7.0&lt;/li&gt;
&lt;li&gt;Borland C++ 5.5.1&lt;/li&gt;
&lt;li&gt;Sun WorkShop 6 update 2 C++ 5.3&lt;/li&gt;
&lt;li&gt;Metrowerks CodeWarrior 8.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アナタのコンパイラがこのリストに含まれていない場合、この表を最新の状態に保つため、 preferred 形式を試して結果を Boost メーリングリストに報告して欲しい。&lt;/p&gt;
&lt;h2&gt;大要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#hello_world&#34;&gt;Hello, World!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;複数スロットの呼び出し&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#multiple_slots&#34;&gt;複数スロットの接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#ordering_slots&#34;&gt;スロット呼び出しグループの順序づけ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スロットとの値の受け渡し&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#slot_arguments&#34;&gt;スロットへの実引数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;上級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#return_values&#34;&gt;シグナルの戻り値&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接続管理&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#disconnecting&#34;&gt;スロットの切断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#scoped&#34;&gt;変数スコープによって管理された接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#tracking&#34;&gt;自動化された接続管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#passing_slots&#34;&gt;スロットの受け渡し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;hello_world&#34;&gt;Hello, World!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;次の例はシグナルとスロットを用いて &#34;Hello, World!&#34; を出力する。
はじめにシグナル &lt;code&gt;sig&lt;/code&gt; を作成する。
これは引数を取らず戻り値もない。
次に &lt;code&gt;connect&lt;/code&gt; メソッドを用いて、&lt;code&gt;hello&lt;/code&gt; 関数オブジェクトをシグナルに接続する。
最後に、シグナル &lt;code&gt;sig&lt;/code&gt; をスロットを呼び出す関数のように使用する。
これが &lt;code&gt;HelloWorld::operator()&lt;/code&gt; を呼び出し &#34;Hello, World!&#34; を表示する。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 引数なし、戻り値なしのシグナル&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// HelloWorld スロットに接続&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// スロットをすべて呼び出す&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 引数なし、戻り値なしのシグナル&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// HelloWorld スロットに接続&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// スロットをすべて呼び出す&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;multiple_slots&#34;&gt;複数スロットの接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;単一のシグナルから単一のスロットを呼び出すのは、あまり面白いとはいえない。
そこで &#34;Hello, World!&#34; を表示する仕事を二つの完全に分離されたスロットに分割することによって、 Hello, World プログラムをより興味深いものにする。
最初のスロットは &#34;Hello&#34; を表示するもので、次のようになるだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;次のスロットは &#34;, World!&#34; と改行を表示し、プログラムを完全なものとする。
第二のスロットは次のようになるだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;先の例と同様に、引数なし、戻り値型 &lt;code&gt;void&lt;/code&gt; のシグナル &lt;code&gt;sig&lt;/code&gt; を作成する。
ここで &lt;code&gt;hello&lt;/code&gt; と &lt;code&gt;world&lt;/code&gt; 両スロットを同一のシグナルに接続すると、シグナル呼び出しによって双方のスロットが呼ばれるだろう。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ところで、このプログラムをコンパイルし実行すると、奇妙なものを目にするかもしれない。
出力は次のようになる可能性がある:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;理由は、シグナルの順序が保証されないためだ。
シグナルは &lt;code&gt;Hello&lt;/code&gt; と &lt;code&gt;World&lt;/code&gt; のいずれを先に呼び出しても構わないが、何かまずいこと (例えば例外) が起きない限り、すべてのスロットが呼ばれる。
先を読み続けると &#34;Hello, World!&#34; が常に想定通りに表示されるように、順序を制御する方法を学ぶことができる。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;ordering_slots&#34;&gt;スロット呼び出しグループの順序づけ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットには副作用があってもかまわないため、他のスロットに先立って呼ぶ必要があるスロットが存在する可能性がある。
Boost.Signals ライブラリでは、スロットを何らかの方法で順序づけられたグループに配置することができる。
Hello, World プログラムでは &#34;Hello&#34; を &#34;, World!&#34; に先だって表示したいので、&#34;Hello&#34; を &#34;, World!&#34; が格納されるグループよりも先に実行されるグループに配置する。
このために、 &lt;code&gt;connect&lt;/code&gt; の最初にグループを指定する追加のパラメタを与えることができる。
既定の状態では、グループ値は &lt;code&gt;int&lt;/code&gt; であり整数の &lt;code&gt;&amp;lt;&lt;/code&gt; 関係によって順序づけがなされる。
Hello, World を組み立てる方法は次の通りである:&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは正しく &#34;Hello, World!&#34; を出力する。
なぜならグループ 0 に含まれる &lt;code&gt;Hello&lt;/code&gt; オブジェクトは &lt;code&gt;World&lt;/code&gt; オブジェクトが所属するグループ 1 よりも先に実行されるからだ。&lt;/p&gt;
&lt;p&gt;実際のところ、グループパラメタはオプションである。
最初の Hello, World の例ではグループパラメタを省略した。
なぜなら、すべてのスロットが独立であればグループパラメタは不要だからだ。
それではグループパラメタを使用しているものと使用していないものを混在させたら、何が起きるだろうか？
&#34;無名&#34; スロット (グループ名を指定せずに接続されたスロット) は、他のすべてのグループの後にくる特殊な別グループに置かれる。
したがって、私たちの例に次のような新しいスロットを追加すると:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GoodMorning&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;... and good morning!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GoodMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;…次のように、望み通りの結果を得られるだろう:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;good&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;morning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;スロットグループに関する最後の興味深い点は、複数のスロットが同一グループに接続された際の振る舞いである。
グループ内ではスロット呼び出しは順不同である:
スロット &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; を同一グループ名で同じシグナルに接続すると、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; いずれかが最初に呼ばれる (ただし両方とも呼ばれる)。
これは、我々が第二バージョンの Hello, World で見たのと同じ振る舞いであり、スロットが誤った順番で呼ばれ出力がめちゃくちゃになる可能性がある。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;slot_arguments&#34;&gt;スロットへの実引数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;シグナルは、呼び出すそれぞれのスロットに対して引数を伝搬させることができる。
たとえばマウス動作イベントを伝搬させるシグナルは、新しいマウス座標とボタンが押されているか否かを渡したいだろう。&lt;/p&gt;
&lt;p&gt;例として二つの &lt;code&gt;float&lt;/code&gt; 引数をスロットに渡すシグナルを作成する。
そして、これらの値に対して様々な算術操作を行った結果を表示するスロットをいくつか作成する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The sum is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The product is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The difference is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The quotient is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは、行の順序は異なる可能性があるが、以下のような出力を行うだろう:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quotient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.66667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のように &lt;code&gt;sig&lt;/code&gt; が関数のように呼び出される際に与えられた値は、いずれも各スロットに渡される。
シグナルを作成する際は、先頭でこれらの値の型を宣言しなければならない。
型 &lt;code&gt;boost::signal&amp;lt;void, float, float&amp;gt;&lt;/code&gt; は、戻り値型 &lt;code&gt;void&lt;/code&gt; を持ち二つの &lt;code&gt;float&lt;/code&gt; 値をとるシグナルを意味する。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;return_values&#34;&gt;シグナルの戻り値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットが実引数を受け取れるのと同様、スロットは値を戻すこともできる。
これらの値は &lt;em&gt;統合子&lt;/em&gt; を介してシグナルの呼び出し側に戻される。
統合子はスロット呼び出しの結果 (結果はないこともあれば百個に及ぶこともある; プログラムを実行するまで分からない) を受けとり、それを合体させて呼び出し側に戻す単一の値にする仕組みである。
その単一の値は、しばしばスロット呼び出しの結果に対する単純な関数である:
最後のスロット呼び出しの結果、スロットによって戻された値の最大値、すべての結果を格納したものなどがありうる。&lt;/p&gt;
&lt;p&gt;先ほどの算術操作の例に少々手を加えて、それぞれのスロットが積、商、和もしくは差を返すように変更する。
これによってシグナルが結果に基づいた値を戻し、それを表示することが可能になる。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは、シグナルが呼ばれる順序によるが、 &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;1.6667&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt; もしくは &lt;code&gt;2&lt;/code&gt; のいずれかを出力するだろう。
これは、戻り値型 (&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;boost::signal&lt;/code&gt; クラステンプレートに与えられた最初の引数) を持つシグナルの既定の動作は、すべてのスロット呼び出した上で、最後のスロット呼び出しによって返された結果を返すことだからである。
正直なところ、今回の例に対してはこの振る舞いは馬鹿げている。
というのはスロットに副作用がないため、本質的に結果はスロットからランダムに選ばれるためだ。&lt;/p&gt;
&lt;p&gt;すべてのスロットから戻された値の最大値は、より興味あるシグナルの結果だろう。
これを求めるために、次のようなカスタム統合子を作成する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If there are no slots to call, just return the&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// default-constructed value&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;maximum&lt;/code&gt; クラステンプレートは関数オブジェクトとして機能する。
戻り値型はテンプレートパラメタとして与えられ、その型に基づいて最大値が計算される
(たとえば &lt;code&gt;maximum&amp;lt;float&amp;gt;&lt;/code&gt; は &lt;code&gt;float&lt;/code&gt; のシーケンスから、最大の &lt;code&gt;float&lt;/code&gt; を見つけ出す)。
&lt;code&gt;maximum&lt;/code&gt; オブジェクトが呼び出される際、すべてのスロット呼び出しの結果を含む入力イテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; が与えられる。
&lt;code&gt;maximum&lt;/code&gt; はこの入力イテレータのシーケンスを用いて最大の要素を計算し、その最大値を返す。&lt;/p&gt;
&lt;p&gt;実際には、この関数オブジェクトの型をシグナルに対する統合子として導入し、利用する。
この型は、次のように &lt;em&gt;名前付きテンプレートパラメタ&lt;/em&gt; を介して与える。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これで、算術関数を計算するスロットを接続してシグナルを使うことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムの出力は &lt;code&gt;15&lt;/code&gt; となるだろう。
なぜならスロットが呼ばれる順序にかかわらず、5 と 3 の積は商、和、差よりも大きくなるからだ。&lt;/p&gt;
&lt;p&gt;別の場合には、スロットによって計算されたすべての値をまとめてひとつの大きなデータ構造で返したくなるかもしれない。
これは別の統合子によって、容易に実行できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;再び、この新しい統合子を使ったシグナルを作ろう。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムの出力は 15, 8, 1.6667 と 2 を含む (ただし順不同)。
&lt;code&gt;signal&lt;/code&gt; クラスに対する最初のテンプレート実引数 &lt;code&gt;float&lt;/code&gt; が、実際にはシグナルの戻り値型でないことは興味深い。
そうではなく、最初のテンプレート実引数は接続されたスロットの戻り値型であり、統合子に渡される入力イテレータの &lt;code&gt;value_type&lt;/code&gt; として用いられる。
統合子それ自身は関数オブジェクトであり、統合子の &lt;code&gt;result_type&lt;/code&gt; メンバ型がシグナルの戻り値型となる。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;disconnecting&#34;&gt;スロットの切断&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットは、接続後、永遠に存在することは期待されていない。
しばしばスロットは 2, 3 のイベントを受け取るために用いられ、そして切断される。
そこでプログラマは、スロットを切断すべきタイミングを決定する制御を必要とする。&lt;/p&gt;
&lt;p&gt;明示的な接続管理の入口は &lt;code&gt;boost::signal::connection&lt;/code&gt; クラスである。
&lt;code&gt;connection&lt;/code&gt; クラスは、それぞれ特定のシグナルと特定のスロットの間の接続を表している。
&lt;code&gt;connected()&lt;/code&gt; メソッドはそのシグナルとスロットがまだ接続されているかを調べ、 &lt;code&gt;disconnect()&lt;/code&gt; メソッドは、シグナルとスロットが接続されているなら呼び出される前に切断する。
シグナルの &lt;code&gt;connect()&lt;/code&gt; メソッドはそれぞれ &lt;code&gt;connection&lt;/code&gt; オブジェクトを返す。
そのオブジェクトは接続がまだ存在しているかを決定し、またシグナルとスロットを切断するために用いることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// c はまだシグナルに接続されている&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &#34;Hello, World!&#34; を表示する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// HelloWorld オブジェクトを切断する&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// c はすでに接続されていない&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 何もしない : 接続されたスロットはない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;scoped&#34;&gt;変数スコープによって管理された接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::signals::scoped_connection&lt;/code&gt; クラスは、 &lt;code&gt;scoped_connection&lt;/code&gt; クラスがスコープからはずれると切断されるシグナル／スロット接続を参照する。
この機能は接続が一時的に必要な場合に有用である。
例を次に示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scoped_connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShortLived&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ShortLived 関数オブジェクトを呼び出す&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ShortLived 関数オブジェクトは、もはや sig に接続されていない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;tracking&#34;&gt;自動化された接続管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals は、スロット呼び出しに含まれるオブジェクトが破棄されたときに自動的にスロットを切断することも含めて、シグナル／スロット接続に関係するオブジェクトの寿命を自動的に追跡することができる。
たとえば、クライアントがニュース供給者に接続し、ニュース供給者は情報が届くとすべての接続されたクライアントにニュースを送るという、単純なニュース配信サービスを考えてみる。
ニュース配信サービスは、次のようになるだろう:&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NewsItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latestNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NewsItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ニュース更新を受け取りたいクライアントは、ニュース項目を受信できる関数オブジェクトを &lt;code&gt;deliverNews&lt;/code&gt; シグナルに接続するだけで良い。
たとえば、アプリケーションにニュースのための特別なメッセージ領域があるとしよう。
例を次に示す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageArea&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;displayNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;news&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;messageText&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;news&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;displayNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newsMessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;しかしながら、ユーザがニュースメッセージ領域を閉じ &lt;code&gt;deliverNews&lt;/code&gt; が関知している &lt;code&gt;newsMessageArea&lt;/code&gt; オブジェクトを破棄したら、どうなるだろうか？
おそらくセグメンテーションフォールトが起こるだろう。
だが Boost.Signals では &lt;code&gt;NewsMessageArea&lt;/code&gt; を &lt;em&gt;trackable&lt;/em&gt; にするだけでよい、
そうすれば &lt;code&gt;newsMessageArea&lt;/code&gt; が破棄される時に &lt;code&gt;newsMessageArea&lt;/code&gt; に含まれるスロットが切断される。
&lt;code&gt;boost::signals::trackable&lt;/code&gt; から public 派生させることで、&lt;code&gt;NewsMessageArea&lt;/code&gt; クラスは trackable になる。
例を次に示す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trackable&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;現在は、スロット接続を作成する際の &lt;code&gt;trackable&lt;/code&gt; オブジェクトの使用法には、ひとつ重大な制約がある:
関数オブジェクトは Boost.Bind を用いて構築する必要がある。
したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトは常に bind 式の中に現れる。
しかし、ユーザ定義の関数オブジェクトや他のライブラリ (Boost.Function や Boost.Lambda など) 由来の関数オブジェクトは &lt;code&gt;trackable&lt;/code&gt; オブジェクト検出のために必要なインターフェースを実装していないため、 &lt;em&gt;bind された trackable オブジェクトは黙って無視される。&lt;/em&gt;
将来の Boost ライブラリは、この制約に対処するだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;passing_slots&#34;&gt;スロットの受け渡し&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals ライブラリのスロットは任意の関数オブジェクトから作成されるため、特定の型を持たない。
しかしながら、テンプレートにできないインターフェースを介してスロットを受け渡すことが必要となるのは良くあることだ。
スロットは、それぞれのシグナル型に対応する &lt;code&gt;slot_type&lt;/code&gt; を介して受け渡すことが可能であり、任意の有効な関数オブジェクトを &lt;code&gt;slot_type&lt;/code&gt; 型のパラメタに渡すことができる。
例を次に示す:&lt;/p&gt;
&lt;h3&gt;Preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Button&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;Compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Button&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;doOnClick&lt;/code&gt; メソッドは &lt;code&gt;onClick&lt;/code&gt; シグナルの &lt;code&gt;connect&lt;/code&gt; メソッドと機能的に等価だが、いまや &lt;code&gt;doOnClick&lt;/code&gt; メソッドの詳細は実装詳細ファイルに隠蔽することが可能になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: ヘッダ &amp;lt;[boost/signals/connection.hpp](http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp)&amp;gt; -- Boost.Signals の翻訳ドキュメント修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html"/>
      <id>2037725d657ffe50f5aa5005f98d1700ab041667:archive/boost_docs/libs/signals/reference/connection.md</id>
      <updated>2016-08-20 16:02:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: ヘッダ &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/connection.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/connection.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connection_class&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_free&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_connection_class&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;connection_class&#34;&gt;&lt;code&gt;connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;connection&lt;/code&gt; クラスは &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signal.html&#34;&gt;Signal&lt;/a&gt; と &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;Slot&lt;/a&gt; の間の接続を表す。
これはシグナルとスロットが現在接続されているかを問い合わせ、またシグナルとスロットを切断する能力を有する軽量オブジェクトである。
問い合わせと &lt;code&gt;connection&lt;/code&gt; の切断を行うことは、常に安全である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt; クラスは &lt;a href=&#34;http://www.sgi.com/tech/stl/LessThanComparable.html&#34; target=&#34;_blank&#34;&gt;LessThanComparable&lt;/a&gt; かつ &lt;a href=&#34;http://www.sgi.com/tech/stl/EqualityComparable.html&#34; target=&#34;_blank&#34;&gt;EqualityComparable&lt;/a&gt;である&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;less_than_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equality_comparable1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#destructor&#34;&gt;~connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#connected&#34;&gt;connected&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#less_than&#34;&gt;operator&amp;lt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#default_constructor&#34;&gt;connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;default_constructor&#34;&gt;connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_constructor&#34;&gt;connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect&#34;&gt;void disconnect() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;is_connected()&lt;/code&gt; が真であれば &lt;code&gt;this&lt;/code&gt; によって参照されているシグナルとスロットの接続を切断する; そうでなければ何もしない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;is_connected()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connected&#34;&gt;bool connected() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; がアクティブな (接続されている) 非 NULL 接続を参照していれば &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_assignment&#34;&gt;connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_member&#34;&gt;void swap(connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照している接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;equality&#34;&gt;bool operator==(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が同一の接続を参照しているか、両方とも NULL 接続を参照している場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;less_than&#34;&gt;bool operator&amp;lt;(const connection&amp;amp; other) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 実装定義の順序づけによって、&lt;code&gt;this&lt;/code&gt; によって参照されている接続が &lt;code&gt;other&lt;/code&gt; によって参照されている接続に先行する場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;scoped_connection_class&#34;&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラス概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスは、そのインスタンスが破棄されるときに自動的に切断される接続である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_destructor&#34;&gt;~scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_default_constructor&#34;&gt;scoped_connection&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html#scoped_swap_member&#34;&gt;swap&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;scoped_connection&lt;/code&gt; クラスメンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_default_constructor&#34;&gt;scoped_connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 現在の接続を NULL 接続に設定する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;!this-&amp;gt;connected()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_constructor&#34;&gt;scoped_connection(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_constructor&#34;&gt;scoped_connection(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;other&lt;/code&gt; によって参照されていた接続を &lt;code&gt;this&lt;/code&gt; が参照する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~connection();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;disconnect()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入と交換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_copy_connection_assignment&#34;&gt;scoped_connection&amp;amp; operator=(const connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;scoped_connection(other).swap(*this);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_member&#34;&gt;void swap(scoped_connection&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; が参照する接続を交換する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;フリー関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;swap_free&#34;&gt;void swap(connection&amp;amp; c1, connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;scoped_swap_free&#34;&gt;void swap(scoped_connection&amp;amp; c1, scoped_connection&amp;amp; c2);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:05 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Boost.Signals の翻訳ドキュメント修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>2037725d657ffe50f5aa5005f98d1700ab041667:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-20 16:02:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラス `trackable` -- Boost.Signals の翻訳ドキュメント修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html"/>
      <id>2037725d657ffe50f5aa5005f98d1700ab041667:archive/boost_docs/libs/signals/reference/trackable.md</id>
      <updated>2016-08-20 16:02:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラス &lt;code&gt;trackable&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/signals/trackable.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/trackable.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;trackable&lt;/code&gt; クラスは、スロットの一部として結合されたオブジェクトが破棄されたときに、シグナルとスロットを自動的に切断するよう管理する責任を負う。
&lt;code&gt;trackable&lt;/code&gt; クラスは他のクラスの基底クラスとしてのみ用いることが可能である; そのとき、派生クラスはスロットの一部として用いられる関数オブジェクトに結合される。
&lt;code&gt;trackable&lt;/code&gt; オブジェクトがシグナル・スロット接続を追跡する方法は、実装定義である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nl&#34;&gt;protected:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#default_constructor&#34;&gt;trackable()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#destructor&#34;&gt;~trackable()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_assignment&#34;&gt;operator=&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html#copy_constructor&#34;&gt;trackable&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;default_constructor&#34;&gt;trackable();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 接続済みスロットのリストを空にする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_constructor&#34;&gt;trackable(const trackable&amp;amp;);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 接続済みスロットのリストを空にする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: シグナル・スロット接続は明示的な connect メソッド呼び出しを介してのみ作成される。
    したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトがコピーされるここでは、作成できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;destructor&#34;&gt;~trackable();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべての接続済みスロットを切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代入&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;copy_assignment&#34;&gt;trackable&amp;amp; operator=(const trackable&amp;amp; other);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべての接続済みスロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: &lt;code&gt;*this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: シグナル・スロット接続は明示的な &lt;code&gt;connect&lt;/code&gt; メソッド呼び出しを介してのみ作成される。
    したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトがコピーされるここでは、作成できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:22 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- Boost.Signals の翻訳ドキュメント修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>2037725d657ffe50f5aa5005f98d1700ab041667:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-20 16:02:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals チュートリアル -- Boost.Signals の翻訳ドキュメント修正</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html"/>
      <id>2037725d657ffe50f5aa5005f98d1700ab041667:archive/boost_docs/libs/signals/tutorial.md</id>
      <updated>2016-08-20 16:02:27 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals チュートリアル&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a name=&#34;intro&#34;&gt;チュートリアルの読み方&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このチュートリアルは直線的に読むことを意図していない。
最上位の構成では、おおまかにライブラリにおける異なった概念(たとえば複数スロット呼び出しの扱い、スロットとの値の受け渡し)を分類している。
それぞれの概念に対して、まず基本的な考え方が提示され、その後、より複雑なライブラリの利用法について記述されている。
読者の便宜を図るため、各セクションは &lt;em&gt;初級&lt;/em&gt; 、 &lt;em&gt;中級&lt;/em&gt; 、 &lt;em&gt;上級&lt;/em&gt; と区分されている。
&lt;em&gt;初級&lt;/em&gt; セクションは、すべてのライブラリユーザが知っておくべき情報を含んでいる。
&lt;em&gt;初級&lt;/em&gt; セクションのみを読み終えた段階で、Signals ライブラリの標準的な使用が可能になる。
&lt;em&gt;中級&lt;/em&gt; セクションは&lt;em&gt;初級&lt;/em&gt;セクションの基礎の上に立ち、ライブラリのやや複雑な使用法を提供する。
最後に &lt;em&gt;上級&lt;/em&gt; セクションは Signals ライブラリの非常に高度な使用方法を詳述しており、しばしば &lt;em&gt;初級&lt;/em&gt; 、 &lt;em&gt;中級&lt;/em&gt; の項目に関する堅固な理解が要求される。
ほとんどのユーザは &lt;em&gt;上級&lt;/em&gt; セクションを読む必要はない。&lt;/p&gt;
&lt;h2&gt;互換性に関する注記&lt;/h2&gt;
&lt;p&gt;Boost.Signals は二通りの文法形式を持つ。
preferred 形式は、より C++ に似合っており、考慮の必要がある隔てられたテンプレートパラメータの数を減少させ、たいてい可読性を向上させる。
しかしながらコンパイラのバグのため、 preferred 形式はすべてのプラットフォームではサポートされていない。
compatible 形式は Boost によってサポートされているすべてのコンパイラで動作する。
あなたのコンパイラでどちらの形式を利用するか決定するために、下の表が参考になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/function.html&#34;&gt;Boost.Function&lt;/a&gt; の利用者は、Signals の prefered 形式は Function の preferred 形式と等価なことに注意。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GNU C++ 2.95.x, 3.0.x, 3.1.x&lt;/li&gt;
&lt;li&gt;Comeau C++ 4.2.45.2&lt;/li&gt;
&lt;li&gt;SGI MIPSpro 7.3.0&lt;/li&gt;
&lt;li&gt;Intel C++ 5.0, 6.0&lt;/li&gt;
&lt;li&gt;Compaq&#39;s cxx 6.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Visual C++ 6.0, 7.0&lt;/li&gt;
&lt;li&gt;Borland C++ 5.5.1&lt;/li&gt;
&lt;li&gt;Sun WorkShop 6 update 2 C++ 5.3&lt;/li&gt;
&lt;li&gt;Metrowerks CodeWarrior 8.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アナタのコンパイラがこのリストに含まれていない場合、この表を最新の状態に保つため、 preferred 形式を試して結果を Boost メーリングリストに報告して欲しい。&lt;/p&gt;
&lt;h2&gt;大要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#hello_world&#34;&gt;Hello, World!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;複数スロットの呼び出し&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#multiple_slots&#34;&gt;複数スロットの接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#ordering_slots&#34;&gt;スロット呼び出しグループの順序づけ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スロットとの値の受け渡し&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#slot_arguments&#34;&gt;スロットへの実引数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;上級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#return_values&#34;&gt;シグナルの戻り値&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接続管理&lt;ul&gt;
&lt;li&gt;&lt;em&gt;初級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#disconnecting&#34;&gt;スロットの切断&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#scoped&#34;&gt;変数スコープによって管理された接続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;中級:&lt;/em&gt; &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#tracking&#34;&gt;自動化された接続管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/tutorial.html#passing_slots&#34;&gt;スロットの受け渡し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&#34;hello_world&#34;&gt;Hello, World!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;次の例はシグナルとスロットを用いて &#34;Hello, World!&#34; を出力する。
はじめにシグナル &lt;code&gt;sig&lt;/code&gt; を作成する。
これは引数を取らず戻り値もない。
次に &lt;code&gt;connect&lt;/code&gt; メソッドを用いて、&lt;code&gt;hello&lt;/code&gt; 関数オブジェクトをシグナルに接続する。
最後に、シグナル &lt;code&gt;sig&lt;/code&gt; をスロットを呼び出す関数のように使用する。
これが &lt;code&gt;HelloWorld::operator()&lt;/code&gt; を呼び出し &#34;Hello, World!&#34; を表示する。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 引数なし、戻り値なしのシグナル&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// HelloWorld スロットに接続&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// スロットをすべて呼び出す&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 引数なし、戻り値なしのシグナル&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// HelloWorld スロットに接続&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// スロットをすべて呼び出す&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;multiple_slots&#34;&gt;複数スロットの接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;単一のシグナルから単一のスロットを呼び出すのは、あまり面白いとはいえない。
そこで &#34;Hello, World!&#34; を表示する仕事を二つの完全に分離されたスロットに分割することによって、 Hello, World プログラムをより興味深いものにする。
最初のスロットは &#34;Hello&#34; を表示するもので、次のようになるだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;次のスロットは &#34;, World!&#34; と改行を表示し、プログラムを完全なものとする。
第二のスロットは次のようになるだろう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;, World!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;先の例と同様に、引数なし、戻り値型 &lt;code&gt;void&lt;/code&gt; のシグナル &lt;code&gt;sig&lt;/code&gt; を作成する。
ここで &lt;code&gt;hello&lt;/code&gt; と &lt;code&gt;world&lt;/code&gt; 両スロットを同一のシグナルに接続すると、シグナル呼び出しによって双方のスロットが呼ばれるだろう。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ところで、このプログラムをコンパイルし実行すると、奇妙なものを目にするかもしれない。
出力は次のようになる可能性がある:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;理由は、シグナルの順序が保証されないためだ。
シグナルは &lt;code&gt;Hello&lt;/code&gt; と &lt;code&gt;World&lt;/code&gt; のいずれを先に呼び出しても構わないが、何かまずいこと (例えば例外) が起きない限り、すべてのスロットが呼ばれる。
先を読み続けると &#34;Hello, World!&#34; が常に想定通りに表示されるように、順序を制御する方法を学ぶことができる。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;ordering_slots&#34;&gt;スロット呼び出しグループの順序づけ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットには副作用があってもかまわないため、他のスロットに先立って呼ぶ必要があるスロットが存在する可能性がある。
Boost.Signals ライブラリでは、スロットを何らかの方法で順序づけられたグループに配置することができる。
Hello, World プログラムでは &#34;Hello&#34; を &#34;, World!&#34; に先だって表示したいので、&#34;Hello&#34; を &#34;, World!&#34; が格納されるグループよりも先に実行されるグループに配置する。
このために、 &lt;code&gt;connect&lt;/code&gt; の最初にグループを指定する追加のパラメタを与えることができる。
既定の状態では、グループ値は &lt;code&gt;int&lt;/code&gt; であり整数の &lt;code&gt;&amp;lt;&lt;/code&gt; 関係によって順序づけがなされる。
Hello, World を組み立てる方法は次の通りである:&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは正しく &#34;Hello, World!&#34; を出力する。
なぜならグループ 0 に含まれる &lt;code&gt;Hello&lt;/code&gt; オブジェクトは &lt;code&gt;World&lt;/code&gt; オブジェクトが所属するグループ 1 よりも先に実行されるからだ。&lt;/p&gt;
&lt;p&gt;実際のところ、グループパラメタはオプションである。
最初の Hello, World の例ではグループパラメタを省略した。
なぜなら、すべてのスロットが独立であればグループパラメタは不要だからだ。
それではグループパラメタを使用しているものと使用していないものを混在させたら、何が起きるだろうか？
&#34;無名&#34; スロット (グループ名を指定せずに接続されたスロット) は、他のすべてのグループの後にくる特殊な別グループに置かれる。
したがって、私たちの例に次のような新しいスロットを追加すると:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GoodMorning&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;... and good morning!&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GoodMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;…次のように、望み通りの結果を得られるだろう:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;good&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;morning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;スロットグループに関する最後の興味深い点は、複数のスロットが同一グループに接続された際の振る舞いである。
グループ内ではスロット呼び出しは順不同である:
スロット &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; を同一グループ名で同じシグナルに接続すると、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; いずれかが最初に呼ばれる (ただし両方とも呼ばれる)。
これは、我々が第二バージョンの Hello, World で見たのと同じ振る舞いであり、スロットが誤った順番で呼ばれ出力がめちゃくちゃになる可能性がある。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;slot_arguments&#34;&gt;スロットへの実引数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;シグナルは、呼び出すそれぞれのスロットに対して引数を伝搬させることができる。
たとえばマウス動作イベントを伝搬させるシグナルは、新しいマウス座標とボタンが押されているか否かを渡したいだろう。&lt;/p&gt;
&lt;p&gt;例として二つの &lt;code&gt;float&lt;/code&gt; 引数をスロットに渡すシグナルを作成する。
そして、これらの値に対して様々な算術操作を行った結果を表示するスロットをいくつか作成する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The sum is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The product is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The difference is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;The quotient is &#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは、行の順序は異なる可能性があるが、以下のような出力を行うだろう:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quotient&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.66667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のように &lt;code&gt;sig&lt;/code&gt; が関数のように呼び出される際に与えられた値は、いずれも各スロットに渡される。
シグナルを作成する際は、先頭でこれらの値の型を宣言しなければならない。
型 &lt;code&gt;boost::signal&amp;lt;void, float, float&amp;gt;&lt;/code&gt; は、戻り値型 &lt;code&gt;void&lt;/code&gt; を持ち二つの &lt;code&gt;float&lt;/code&gt; 値をとるシグナルを意味する。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;return_values&#34;&gt;シグナルの戻り値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットが実引数を受け取れるのと同様、スロットは値を戻すこともできる。
これらの値は &lt;em&gt;統合子&lt;/em&gt; を介してシグナルの呼び出し側に戻される。
統合子はスロット呼び出しの結果 (結果はないこともあれば百個に及ぶこともある; プログラムを実行するまで分からない) を受けとり、それを合体させて呼び出し側に戻す単一の値にする仕組みである。
その単一の値は、しばしばスロット呼び出しの結果に対する単純な関数である:
最後のスロット呼び出しの結果、スロットによって戻された値の最大値、すべての結果を格納したものなどがありうる。&lt;/p&gt;
&lt;p&gt;先ほどの算術操作の例に少々手を加えて、それぞれのスロットが積、商、和もしくは差を返すように変更する。
これによってシグナルが結果に基づいた値を戻し、それを表示することが可能になる。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムは、シグナルが呼ばれる順序によるが、 &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;1.6667&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt; もしくは &lt;code&gt;2&lt;/code&gt; のいずれかを出力するだろう。
これは、戻り値型 (&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;boost::signal&lt;/code&gt; クラステンプレートに与えられた最初の引数) を持つシグナルの既定の動作は、すべてのスロット呼び出した上で、最後のスロット呼び出しによって返された結果を返すことだからである。
正直なところ、今回の例に対してはこの振る舞いは馬鹿げている。
というのはスロットに副作用がないため、本質的に結果はスロットからランダムに選ばれるためだ。&lt;/p&gt;
&lt;p&gt;すべてのスロットから戻された値の最大値は、より興味あるシグナルの結果だろう。
これを求めるために、次のようなカスタム統合子を作成する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// If there are no slots to call, just return the&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// default-constructed value&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;maximum&lt;/code&gt; クラステンプレートは関数オブジェクトとして機能する。
戻り値型はテンプレートパラメタとして与えられ、その型に基づいて最大値が計算される
(たとえば &lt;code&gt;maximum&amp;lt;float&amp;gt;&lt;/code&gt; は &lt;code&gt;float&lt;/code&gt; のシーケンスから、最大の &lt;code&gt;float&lt;/code&gt; を見つけ出す)。
&lt;code&gt;maximum&lt;/code&gt; オブジェクトが呼び出される際、すべてのスロット呼び出しの結果を含む入力イテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; が与えられる。
&lt;code&gt;maximum&lt;/code&gt; はこの入力イテレータのシーケンスを用いて最大の要素を計算し、その最大値を返す。&lt;/p&gt;
&lt;p&gt;実際には、この関数オブジェクトの型をシグナルに対する統合子として導入し、利用する。
この型は、次のように &lt;em&gt;名前付きテンプレートパラメタ&lt;/em&gt; を介して与える。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;これで、算術関数を計算するスロットを接続してシグナルを使うことができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムの出力は &lt;code&gt;15&lt;/code&gt; となるだろう。
なぜならスロットが呼ばれる順序にかかわらず、5 と 3 の積は商、和、差よりも大きくなるからだ。&lt;/p&gt;
&lt;p&gt;別の場合には、スロットによって計算されたすべての値をまとめてひとつの大きなデータ構造で返したくなるかもしれない。
これは別の統合子によって、容易に実行できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;再び、この新しい統合子を使ったシグナルを作ろう。&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aggregate_values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_quotient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ompute_difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ostream_iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムの出力は 15, 8, 1.6667 と 2 を含む (ただし順不同)。
&lt;code&gt;signal&lt;/code&gt; クラスに対する最初のテンプレート実引数 &lt;code&gt;float&lt;/code&gt; が、実際にはシグナルの戻り値型でないことは興味深い。
そうではなく、最初のテンプレート実引数は接続されたスロットの戻り値型であり、統合子に渡される入力イテレータの &lt;code&gt;value_type&lt;/code&gt; として用いられる。
統合子それ自身は関数オブジェクトであり、統合子の &lt;code&gt;result_type&lt;/code&gt; メンバ型がシグナルの戻り値型となる。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;disconnecting&#34;&gt;スロットの切断&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スロットは、接続後、永遠に存在することは期待されていない。
しばしばスロットは 2, 3 のイベントを受け取るために用いられ、そして切断される。
そこでプログラマは、スロットを切断すべきタイミングを決定する制御を必要とする。&lt;/p&gt;
&lt;p&gt;明示的な接続管理の入口は &lt;code&gt;boost::signal::connection&lt;/code&gt; クラスである。
&lt;code&gt;connection&lt;/code&gt; クラスは、それぞれ特定のシグナルと特定のスロットの間の接続を表している。
&lt;code&gt;connected()&lt;/code&gt; メソッドはそのシグナルとスロットがまだ接続されているかを調べ、 &lt;code&gt;disconnect()&lt;/code&gt; メソッドは、シグナルとスロットが接続されているなら呼び出される前に切断する。
シグナルの &lt;code&gt;connect()&lt;/code&gt; メソッドはそれぞれ &lt;code&gt;connection&lt;/code&gt; オブジェクトを返す。
そのオブジェクトは接続がまだ存在しているかを決定し、またシグナルとスロットを切断するために用いることができる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HelloWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// c はまだシグナルに接続されている&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &#34;Hello, World!&#34; を表示する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disconnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// HelloWorld オブジェクトを切断する&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// c はすでに接続されていない&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 何もしない : 接続されたスロットはない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;scoped&#34;&gt;変数スコープによって管理された接続&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;boost::signals::scoped_connection&lt;/code&gt; クラスは、 &lt;code&gt;scoped_connection&lt;/code&gt; クラスがスコープからはずれると切断されるシグナル／スロット接続を参照する。
この機能は接続が一時的に必要な場合に有用である。
例を次に示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scoped_connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShortLived&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ShortLived 関数オブジェクトを呼び出す&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ShortLived 関数オブジェクトは、もはや sig に接続されていない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;tracking&#34;&gt;自動化された接続管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals は、スロット呼び出しに含まれるオブジェクトが破棄されたときに自動的にスロットを切断することも含めて、シグナル／スロット接続に関係するオブジェクトの寿命を自動的に追跡することができる。
たとえば、クライアントがニュース供給者に接続し、ニュース供給者は情報が届くとすべての接続されたクライアントにニュースを送るという、単純なニュース配信サービスを考えてみる。
ニュース配信サービスは、次のようになるだろう:&lt;/p&gt;
&lt;h3&gt;preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NewsItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latestNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NewsItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ニュース更新を受け取りたいクライアントは、ニュース項目を受信できる関数オブジェクトを &lt;code&gt;deliverNews&lt;/code&gt; シグナルに接続するだけで良い。
たとえば、アプリケーションにニュースのための特別なメッセージ領域があるとしよう。
例を次に示す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageArea&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;displayNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsItem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;news&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;messageText&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;news&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;deliverNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;displayNews&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newsMessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;しかしながら、ユーザがニュースメッセージ領域を閉じ &lt;code&gt;deliverNews&lt;/code&gt; が関知している &lt;code&gt;newsMessageArea&lt;/code&gt; オブジェクトを破棄したら、どうなるだろうか？
おそらくセグメンテーションフォールトが起こるだろう。
だが Boost.Signals では &lt;code&gt;NewsMessageArea&lt;/code&gt; を &lt;em&gt;trackable&lt;/em&gt; にするだけでよい、
そうすれば &lt;code&gt;newsMessageArea&lt;/code&gt; が破棄される時に &lt;code&gt;newsMessageArea&lt;/code&gt; に含まれるスロットが切断される。
&lt;code&gt;boost::signals::trackable&lt;/code&gt; から public 派生させることで、&lt;code&gt;NewsMessageArea&lt;/code&gt; クラスは trackable になる。
例を次に示す:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewsMessageArea&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageArea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trackable&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;現在は、スロット接続を作成する際の &lt;code&gt;trackable&lt;/code&gt; オブジェクトの使用法には、ひとつ重大な制約がある:
関数オブジェクトは Boost.Bind を用いて構築する必要がある。
したがって &lt;code&gt;trackable&lt;/code&gt; オブジェクトは常に bind 式の中に現れる。
しかし、ユーザ定義の関数オブジェクトや他のライブラリ (Boost.Function や Boost.Lambda など) 由来の関数オブジェクトは &lt;code&gt;trackable&lt;/code&gt; オブジェクト検出のために必要なインターフェースを実装していないため、 &lt;em&gt;bind された trackable オブジェクトは黙って無視される。&lt;/em&gt;
将来の Boost ライブラリは、この制約に対処するだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a name=&#34;passing_slots&#34;&gt;スロットの受け渡し&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boost.Signals ライブラリのスロットは任意の関数オブジェクトから作成されるため、特定の型を持たない。
しかしながら、テンプレートにできないインターフェースを介してスロットを受け渡すことが必要となるのは良くあることだ。
スロットは、それぞれのシグナル型に対応する &lt;code&gt;slot_type&lt;/code&gt; を介して受け渡すことが可能であり、任意の有効な関数オブジェクトを &lt;code&gt;slot_type&lt;/code&gt; 型のパラメタに渡すことができる。
例を次に示す:&lt;/p&gt;
&lt;h3&gt;Preferred 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Button&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;Compatible 形式&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Button&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signal2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Button&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doOnClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OnClick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;doOnClick&lt;/code&gt; メソッドは &lt;code&gt;onClick&lt;/code&gt; シグナルの &lt;code&gt;connect&lt;/code&gt; メソッドと機能的に等価だが、いまや &lt;code&gt;doOnClick&lt;/code&gt; メソッドの詳細は実装詳細ファイルに隠蔽することが可能になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Shogo Furusawa</name>
        <email>graighle@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>0f2625979d9f57f023fe106c09dcb54f5e18ccdd:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:19:00 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `signalN` -- コードの開きバッククォートがなかったので追加</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html"/>
      <id>865fdde9d94aa9db1c7bda5138cec25b8deee354:archive/boost_docs/libs/signals/reference/signalN.md</id>
      <updated>2016-08-19 12:18:50 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;signalN&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; はサポートされているシグナルのパラメタ数である。
つまり、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal0.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal0&lt;/code&gt; が含まれており、ヘッダ &lt;code&gt;&amp;lt;boost/signals/signal1.hpp&amp;gt;&lt;/code&gt; には &lt;code&gt;signal1&lt;/code&gt; が含まれている。
サポートされているシグナルの最大パラメタ数は実装定義だが、最低 10 であることが要求される。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;boost/signals/signalN.hpp&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;本ドキュメントは複数の関係するクラス &lt;code&gt;signal0&lt;/code&gt;, &lt;code&gt;signal1&lt;/code&gt;, &lt;code&gt;signal2&lt;/code&gt; などを扱う。
ここで末尾の数値は、シグナルとそれに接続されたスロットがとるパラメタ数を表す。
すべてのクラスを列挙する代わりに、単一の例 &lt;code&gt;signalN&lt;/code&gt; について記述する。
なお &lt;code&gt;N&lt;/code&gt; は関数のパラメタ数を表す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html&#34;&gt;last_value&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;functionN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noncopyable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用 : クラスは Noncopyable 要求を満たす&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;boost::trackable&lt;/a&gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;Group&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slot_function_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_result_type&#34;&gt;slot_result_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; が戻り値型 void を持つ場合は void でない可能性がある; そのほかの場合には &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt; の戻り値型&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot_call_iterator&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// `value_type` が `R` である &lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 1 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableUnaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;second_argument_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// N == 2 のとき、シグナルは &lt;a href=&#34;http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html&#34; target=&#34;_blank&#34;&gt;AdaptableBinaryFunction&lt;/a&gt; のモデルである&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argN_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#constructor&#34;&gt;signalN&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_compare_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#destructor&#34;&gt;~signal&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;signals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#connect&#34;&gt;connect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slot_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#group_disconnect&#34;&gt;disconnect&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#disconnect_all&#34;&gt;disconnect_all_slots&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#empty&#34;&gt;empty&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#function_call_operator&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;combiner_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関連型&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;combiner&#34;&gt;Combiner&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Combiner&lt;/code&gt; はイテレータのシーケンス &lt;code&gt;[first, last)&lt;/code&gt; を受け取り、シーケンス中のいくつかのイテレータを参照外しして値を戻す関数オブジェクトである。
&lt;code&gt;Combiner&lt;/code&gt; に渡されるイテレータの型は &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_call_iterator&#34;&gt;slot call iterator&lt;/a&gt; である。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_group&#34;&gt;Group&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Group&lt;/code&gt; は、接続をグループ化するために用いる型を定義する。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; かつ &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; でなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;group_compare&#34;&gt;GroupCompare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GroupCompare&lt;/code&gt; は、実引数型が &lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_group&#34;&gt;group type&lt;/a&gt; と一致する &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/BinaryPredicate.html&#34; target=&#34;_blank&#34;&gt;BinaryPredicate&lt;/a&gt;&lt;/code&gt; である。
これは接続グループの順序関係を定める。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; は、他の互換性がある関数オブジェクトからコンストラクト可能な関数オブジェクトアダプタであることが要求される(互換性は &lt;code&gt;SlotFunction&lt;/code&gt; それ自身によって定義される)。
&lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;T1, T2, .. TN&lt;/code&gt; 型のパラメタを受け取り、シグナルのテンプレートパラメタ型 &lt;code&gt;R&lt;/code&gt; に変換可能な結果を返す必要がある;
ただし &lt;code&gt;R&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; である場合には &lt;code&gt;SlotFunction&lt;/code&gt; の戻り値型はすべて無視されることに注意。&lt;/p&gt;
&lt;p&gt;他のシグナルへの接続、ならびに関数オブジェクトの参照への接続では、 &lt;code&gt;SlotFunction&lt;/code&gt; は &lt;code&gt;reference_wrapper&lt;/code&gt; オブジェクトを受理可能である必要がある。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&#34;slot_result_type&#34;&gt;&lt;code&gt;slot_result_type&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SlotFunction&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; を戻す場合、スロットの戻り値型は実装定義である; そうでないばあいにはスロットの戻り値型は &lt;code&gt;SlotFunction&lt;/code&gt; 関数オブジェクトによって戻される型であることが要求される。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;slot_call_iterator&#34;&gt;&lt;code&gt;slot_call_iterator&lt;/code&gt; 型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;value_type&lt;/code&gt; が &lt;code&gt;R&lt;/code&gt; であるような &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/InputIterator.html&#34; target=&#34;_blank&#34;&gt;InputIterator&lt;/a&gt;&lt;/code&gt;。
&lt;code&gt;slot_call_iterator&lt;/code&gt; の参照外し演算子は、指定された実引数を与えてスロットを呼び出し、その結果を戻す責任を負う。
イテレータを複数回参照外ししたときでもスロットが一度だけ呼び出されることを保証するため、結果はキャッシュされなければならない。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&#34;constructor&#34;&gt;コンストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explicit signalN(const combiner_type&amp;amp; = combiner_type(), const group_compare_type&amp;amp; = group_compare_type());&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルをスロットを含まない状態に初期化し、与えられた統合子を内部記憶域にコピーし、与えられたグループ比較関数オブジェクトを格納する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&#34;destructor&#34;&gt;デストラクタ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~signal();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: すべてのスロット接続を切断する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;接続管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;connect&#34;&gt;signals::connection connect(const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナル &lt;code&gt;this&lt;/code&gt; を &lt;code&gt;slot&lt;/code&gt; に接続する。
    スロットが &lt;em&gt;非アクティブ&lt;/em&gt; である場合、たとえばスロット呼び出しに結合された &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/trackable.html&#34;&gt;trackable&lt;/a&gt;&lt;/code&gt; オブジェクトが破棄されている場合、&lt;code&gt;connect&lt;/code&gt; 呼び出しは無視される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト;
    &lt;code&gt;slot&lt;/code&gt; が非アクティブである場合、切断状態の接続が返る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。
    例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_connect&#34;&gt;signals::connection connect(const group_type&amp;amp; group, const slot_type&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたスロットを (&lt;code&gt;connect(slot)&lt;/code&gt; と同様に) シグナルに接続し、このスロット接続を与えられたグループ &lt;code&gt;group&lt;/code&gt; に関連づける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 新規に作成されたシグナル・スロット間の接続を参照する &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/connection.html&#34;&gt;signals::connection&lt;/a&gt;&lt;/code&gt; オブジェクト。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 強い例外保証。例外が発生すると常に、スロットはシグナルに接続された状態にならない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n)&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナル呼び出し中に接続されたスロットが直ちに呼び出されるか否かは、不定である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;group_disconnect&#34;&gt;void disconnect(const group_type&amp;amp; group);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: 与えられたグループ中の全スロットが切断される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: ユーザのデストラクタが投げない限りは、例外を投げない。
    ユーザのデストラクタが例外を投げると、グループ中の全スロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: &lt;code&gt;O(lg n) + k&lt;/code&gt;。
    ここで &lt;code&gt;n&lt;/code&gt; はシグナルが認識しているスロット数であり、&lt;code&gt;k&lt;/code&gt; は &lt;code&gt;group&lt;/code&gt; に含まれるスロット数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;disconnect_all&#34;&gt;void disconnect_all_slots();&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シグナルに接続された全スロットを切断する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;: &lt;code&gt;this-&amp;gt;empty()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: 切断するスロットが例外を投げる場合、すべてのスロットが切断されない可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: シグナルがスロットを呼び出している最中を含めて、シグナルの生存期間中、いつでも呼び出してよい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;empty&#34;&gt;bool empty() const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: そのシグナルに接続されたスロットがない場合 &lt;code&gt;true&lt;/code&gt;、そうでなければ &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: なし。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;計算量&lt;/strong&gt;: シグナルが認識しているスロット数に比例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: スロットは、そのスロットの実行中も含めて、任意の時点で切断することが可能である。
    したがって実装は切断されたスロットのリストを検索し、まだスロットが接続されているかを決定しなければならない可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;シグナル呼び出し&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;function_call_operator&#34;&gt;result_type operator()(T1 a1, T2 a2, ..., TN aN); result_type operator()(T1 a1, T2 a2, ..., TN aN) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;slot_call_iterator&lt;/code&gt; の範囲 &lt;code&gt;[first, last)&lt;/code&gt; を与えて統合子を呼び出す (言い換えると &lt;code&gt;combiner(first, last)&lt;/code&gt;)。
    この範囲は、各スロットに与えられたパラメタの集合 &lt;code&gt;a1, a2, ..., aN&lt;/code&gt; を渡して呼び出した結果をイテレートする。
    スロットはグループ比較関数オブジェクトによって与えられる半順序関係にしたがって呼び出されるが、グループに所属しないスロットは最後に呼ばれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 統合子によって戻された結果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例外&lt;/strong&gt;: スロット呼び出しによって例外が投げられた、あるいは統合子が渡されたスロットを参照外ししなかった場合、接続されたスロットの内部リストに含まれるその後のスロットは呼び出されない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;const&lt;/code&gt; 版の関数呼び出し演算子は統合子を &lt;code&gt;const&lt;/code&gt; として実行する一方で、非&lt;code&gt;const&lt;/code&gt; 版は統合子を非 &lt;code&gt;const&lt;/code&gt; として実行する。
    同一グループ中のメンバー、ならびにグループに所属していないスロット間の順序は不定である。
    使用される統合子によっては、スロットが一つもシグナルに接続されていない状態で関数呼び出し演算子を呼び出すと未定義動作を引き起こす可能性がある。
    既定の統合子は、戻り値型が &lt;code&gt;void&lt;/code&gt; の場合にはゼロ個のスロットに対しても正しく定義されているが、戻り値型が他の型の場合には未定義である (なぜなら戻り値を合成する方法がないから)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:42 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート `last_value` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/last_value.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート &lt;code&gt;last_value&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/last_value.hpp&#34; target=&#34;_blank&#34;&gt;boost/last_value.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;last_value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// void は禁止&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;result_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/last_value.html#call&#34;&gt;operator()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事前条件&lt;/strong&gt;: &lt;code&gt;first != last&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 最後のイテレータを参照外しした結果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;void_call&#34;&gt;template&amp;lt;typename InputIterator&amp;gt; result_type operator()(InputIterator first, InputIterator last) const;&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: シーケンス &lt;code&gt;[first, last)&lt;/code&gt; 中のすべてのイテレータを参照外しする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: 値は無意味だが &lt;code&gt;void&lt;/code&gt; ではない。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論拠&lt;/strong&gt;: &lt;code&gt;void&lt;/code&gt; を戻す関数は、しばしば関数オブジェクトを構成するシステムに多くの回避手段を要求する。
    そこで &lt;code&gt;void&lt;/code&gt; を戻すことを避け、代わりに関数オブジェクトを容易に適合させうる、実装依存の無意味な値を戻すことに決定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:42:17 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>Boost.Signals: クラステンプレート slot -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/slot.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;Boost.Signals: クラステンプレート slot&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/signals/slot.hpp&#34; target=&#34;_blank&#34;&gt;boost/signals/slot.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;slot&lt;/code&gt; クラステンプレートはスロットを作成し、非テンプレート関数への実引数として渡すことを可能にする。
これは &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/CopyConstructible.html&#34; target=&#34;_blank&#34;&gt;CopyConstructible&lt;/a&gt;&lt;/code&gt; であるが &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/DefaultConstructible.html&#34; target=&#34;_blank&#34;&gt;DefaultConstructible&lt;/a&gt;&lt;/code&gt; ならびに &lt;code&gt;&lt;a href=&#34;http://www.sgi.com/tech/stl/Assignable.html&#34; target=&#34;_blank&#34;&gt;Assignable&lt;/a&gt;&lt;/code&gt; ではない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;public:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/slot.html#constructor&#34;&gt;slot&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Slot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;nl&#34;&gt;private:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stored_slot_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 開示用&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;コンストラクタ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;constructor&#34;&gt;template&amp;lt;typename Slot&amp;gt; slot(const Slot&amp;amp; slot);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;this&lt;/code&gt; が、渡された &lt;code&gt;slot&lt;/code&gt; を保持するように初期化する。
    渡される &lt;code&gt;slot&lt;/code&gt; は、それによって &lt;code&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/signalN.html#slot_function_type&#34;&gt;SlotFunction&lt;/a&gt;&lt;/code&gt; を構築可能な任意の関数オブジェクトである。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:10 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレート `visit_each` -- Merge branch &#39;master&#39; of https://github.com/boostjp/site
</title>
      <link href="http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html"/>
      <id>2319dea43b3475cd2e83bfa86c63bea4a443c8f4:archive/boost_docs/libs/signals/reference/visit_each.md</id>
      <updated>2016-08-19 12:10:06 +0900
</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;関数テンプレート &lt;code&gt;visit_each&lt;/code&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;ヘッダ&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://www.boost.org/doc/libs/1_31_0/boost/boost/visit_each.hpp&#34; target=&#34;_blank&#34;&gt;boost/visit_each.hpp&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;visit_each&lt;/code&gt; の機構は、&lt;code&gt;visitor&lt;/code&gt; を与えられたオブジェクトの全部分オブジェクトに対して適用することを可能にする。
これは Signals ライブラリによって関数オブジェクト中の &lt;code&gt;trackable&lt;/code&gt; オブジェクトを見つけ出すために使われているが、広く使われれば他の用途も出てくるだろう (例: 保守的ガベージコレクション)。
&lt;code&gt;visit_each&lt;/code&gt; フレームワークに適合させるため、各オブジェクト型に対して &lt;code&gt;visit_each&lt;/code&gt; のオーバーロードを提供する必要がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;http://boostjp.github.io/archive/boost_docs/libs/signals/reference/visit_each.html#visit_each&#34;&gt;visit_each&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a name=&#34;visit_each&#34;&gt;template&amp;lt;typename Visitor, typename T&amp;gt; void visit_each(Visitor&amp;amp; v, const T&amp;amp; t, int);&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: &lt;code&gt;v(t)&lt;/code&gt;。
    また &lt;code&gt;t&lt;/code&gt; のすべての部分オブジェクト &lt;code&gt;x&lt;/code&gt; に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照であれば &lt;code&gt;v(boost::ref(x))&lt;/code&gt; を実行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; が参照でなければ &lt;code&gt;v(x)&lt;/code&gt; を実行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;戻り値&lt;/strong&gt;: なし。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注記&lt;/strong&gt;: &lt;code&gt;&amp;lt;boost/visit_each.hpp&amp;gt;&lt;/code&gt; 中で定義されている &lt;code&gt;visit_each&lt;/code&gt; の非特殊化版の第三パラメタは &lt;code&gt;long&lt;/code&gt; であり、この第三パラメタに与える実引数は常に 0 でなければならない。
    第三パラメタは、正しい関数テンプレートの部分整列の欠落が広まっているために設けられた人為的なものであり、将来削除されるだろう。
    ライブラリ作者は、クラスの &lt;code&gt;T&lt;/code&gt; 実引数を特殊化する追加のオーバーロードを加え、部分オブジェクトを訪ねられるようにすることが期待されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cs.rpi.edu/~gregod&#34; target=&#34;_blank&#34;&gt;Doug Gregor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last modified: Fri Oct 11 05:43:33 EDT 2002&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon
</name>
        <email>melt@e-ml.jp
</email>
      </author>
    </entry>
  
</feed>